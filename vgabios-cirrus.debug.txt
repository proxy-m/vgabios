00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-cirrus.debug_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void load_dac_palette();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetb();
00040                                           !BCC_EOS
00041                                           ! 20 static void memsetw();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyb();
00044                                           !BCC_EOS
00045                                           ! 22 static void memcpyw();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_video_mode();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_shape();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_set_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_get_cursor_pos();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_set_active_page();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_scroll();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_read_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_attr();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_char_only();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_write_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_read_pixel();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_write_teletype();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_perform_gray_scale_summing();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_user_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_14_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_8_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_text_8_16_pat();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_8_8_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_user_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_14_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_8_dd_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_load_gfx_8_16_chars();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_get_font_info();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_alternate_prtsc();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_switch_video_interface();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_enable_video_refresh_control();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_write_string();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_state_info();
00102                                           !BCC_EOS
00103                                           ! 51 static void biosfn_read_video_state_size();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_save_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 static Bit16u biosfn_restore_video_state();
00108                                           !BCC_EOS
00109                                           ! 54 extern Bit8u video_save_pointer_table[];
00110                                           !BCC_EOS
00111                                           ! 55 #asm
00112                                           !BCC_ASM
00113                                           MACRO SET_INT_VECTOR
00114                                             push ds
00115                                             xor ax, ax
00116                                             mov ds, ax
00117                                             mov ax, ?3
00118                                             mov ?1*4, ax
00119                                             mov ax, ?2
00120                                             mov ?1*4+2, ax
00121                                             pop ds
00122                                           MEND
00123                                           ! 66 endasm
00124                                           !BCC_ENDASM
00125                                           ! 67 #asm
00126                                           !BCC_ASM
00127                                           
00128 0000                                      .rom
00129 0000                                      .org 0
00130                                           use16 386
00131                       00000000            vgabios_start:
00132 0000                        55            .byte 0x55, 0xaa
00133 0002                        40            .byte 0x40
00134                       00000003            vgabios_entry_point:
00135 0003           E9         0122              jmp vgabios_init_func
00136 0018                                      .org 0x18
00137 0018                      0110            .word vgabios_pci_data
00138 001E                                      .org 0x1e
00139 001E                        49            .ascii "IBM"
00140 0021                        00            .byte 0x00
00141                       00000022            vgabios_name:
00142 0022                        50            .ascii "Plex86/Bochs VGABios"
00143 0036                        20            .ascii " (PCI)"
00144 003C                        20            .ascii " "
00145 003D                        00            .byte 0x00
00146                       0000003E            vgabios_version:
00147 003E                        63            .ascii "current-cvs"
00148 0049                        20            .ascii " "
00149                       0000004A            vgabios_date:
00150 004A                        31            .ascii "18 May 2021"
00151 0055                        0A            .byte 0x0a,0x0d
00152 0057                        00            .byte 0x00
00153                       00000058            vgabios_copyright:
00154 0058                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00155 0081                        0A            .byte 0x0a,0x0d
00156 0083                        00            .byte 0x00
00157                       00000084            vgabios_license:
00158 0084                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00159 00B4                        0A            .byte 0x0a,0x0d
00160 00B6                        0A            .byte 0x0a,0x0d
00161 00B8                        00            .byte 0x00
00162                       000000B9            vgabios_website:
00163 00B9                        50            .ascii "Please visit :"
00164 00C7                        0A            .byte 0x0a,0x0d
00165                                           ;;.ascii " . http://www.plex86.org"
00166                                           ;;.byte 0x0a,0x0d
00167 00C9                        20            .ascii " . http://bochs.sourceforge.net"
00168 00E8                        0A            .byte 0x0a,0x0d
00169 00EA                        20            .ascii " . http://www.nongnu.org/vgabios"
00170 010A                        0A            .byte 0x0a,0x0d
00171 010C                        0A            .byte 0x0a,0x0d
00172 010E                        00            .byte 0x00
00173 010F                  00000004            .align 4
00174                       00000110            vgabios_pci_data:
00175 0110                        50            .ascii "PCIR"
00176 0114                      1013            .word 0x1013
00177 0116                      00B8            .word 0x00b8
00178 0118                      0000            .word 0
00179 011A                      0018            .word 0x18
00180 011C                        00            .byte 0
00181 011D                        00            .byte 0x0
00182 011E                      0300            .word 0x300
00183 0120                      0040            .word 0x40
00184 0122                      0001            .word 1
00185 0124                        00            .byte 0
00186 0125                        80            .byte 0x80
00187 0126                      0000            .word 0
00188                                           ;; ============================================================================================
00189                                           ;;
00190                                           ;; Init Entry point
00191                                           ;;
00192                                           ;; ============================================================================================
00193                       00000128            vgabios_init_func:
00194                                           ;; init vga card
00195 0128           E8         3428              call init_vga_card
00196                                           ;; init basic bios vars
00197 012B           E8         3484              call init_bios_area
00198                                           ;; set int10 vect
00199                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   012E           1E                           push ds
 +a   012F           31C0                         xor ax, ax
 +a   0131           8ED8                         mov ds, ax
 +a   0133           B8                   0152    mov ax,  #vgabios_int10_handler
 +a   0136           A3         0040              mov 0x10*4, ax
 +a   0139           B8                   C000    mov ax,  #0xC000
 +a   013C           A3         0042              mov 0x10*4+2, ax
 +a   013F           1F                           pop ds
00200 0140           E8         84DD              call cirrus_init
00201                                           ;; display splash screen
00202 0143           E8         34C0              call _display_splash_screen
00203                                           ;; init video mode and clear the screen
00204 0146           B8                   0003    mov ax,#0x0003
00205 0149           CD                     10    int #0x10
00206                                           ;; show info
00207 014B           E8         34B9              call _display_info
00208                                           ;; show cirrus info
00209 014E           E8         8506              call cirrus_display_info
00210 0151           CB                           retf
00211                                           ! 152 endasm
00212                                           !BCC_ENDASM
00213                                           ! 153 #asm
00214                                           !BCC_ASM
00215                       00000152            vgabios_int10_handler:
00216 0152           9C                           pushf
00217 0153           80FC                   0F    cmp ah, #0x0f
00218 0156           75           05              jne int10_test_1A
00219 0158           E8         5FEF              call biosfn_get_video_mode
00220 015B           EB           7C              jmp int10_end
00221                       0000015D            int10_test_1A:
00222 015D           80FC                   1A    cmp ah, #0x1a
00223 0160           75           05              jne int10_test_0B
00224 0162           E8         6D7C              call biosfn_group_1A
00225 0165           EB           72              jmp int10_end
00226                       00000167            int10_test_0B:
00227 0167           80FC                   0B    cmp ah, #0x0b
00228 016A           75           05              jne int10_test_1103
00229 016C           E8         570D              call biosfn_group_0B
00230 016F           EB           68              jmp int10_end
00231                       00000171            int10_test_1103:
00232 0171           3D                   1103    cmp ax, #0x1103
00233 0174           75           05              jne int10_test_12
00234 0176           E8         66CC              call biosfn_set_text_block_specifier
00235 0179           EB           5E              jmp int10_end
00236                       0000017B            int10_test_12:
00237 017B           80FC                   12    cmp ah, #0x12
00238 017E           75           3C              jne int10_test_101B
00239 0180           80FB                   10    cmp bl, #0x10
00240 0183           75           05              jne int10_test_BL30
00241 0185           E8         6B81              call biosfn_get_ega_info
00242 0188           EB           4F              jmp int10_end
00243                       0000018A            int10_test_BL30:
00244 018A           80FB                   30    cmp bl, #0x30
00245 018D           75           05              jne int10_test_BL31
00246 018F           E8         6B9B              call biosfn_select_vert_res
00247 0192           EB           45              jmp int10_end
00248                       00000194            int10_test_BL31:
00249 0194           80FB                   31    cmp bl, #0x31
00250 0197           75           05              jne int10_test_BL32
00251 0199           E8         6BE4              call biosfn_enable_default_palette_loading
00252 019C           EB           3B              jmp int10_end
00253                       0000019E            int10_test_BL32:
00254 019E           80FB                   32    cmp bl, #0x32
00255 01A1           75           05              jne int10_test_BL33
00256 01A3           E8         6BFC              call biosfn_enable_video_addressing
00257 01A6           EB           31              jmp int10_end
00258                       000001A8            int10_test_BL33:
00259 01A8           80FB                   33    cmp bl, #0x33
00260 01AB           75           05              jne int10_test_BL34
00261 01AD           E8         6C10              call biosfn_enable_grayscale_summing
00262 01B0           EB           27              jmp int10_end
00263                       000001B2            int10_test_BL34:
00264 01B2           80FB                   34    cmp bl, #0x34
00265 01B5           75           14              jne int10_normal
00266 01B7           E8         6C2A              call biosfn_enable_cursor_emulation
00267 01BA           EB           1D              jmp int10_end
00268                       000001BC            int10_test_101B:
00269 01BC           3D                   101B    cmp ax, #0x101b
00270 01BF           74           0A              je int10_normal
00271 01C1           80FC                   10    cmp ah, #0x10
00272 01C4           75           05              jne int10_normal
00273 01C6           E8         5FA8              call biosfn_group_10
00274 01C9           EB           0E              jmp int10_end
00275                       000001CB            int10_normal:
00276 01CB           06                           push es
00277 01CC           1E                           push ds
00278 01CD           60                           pusha
00279                                           ;; We have to set ds to access the right data segment
00280 01CE           BB                   C000    mov bx, #0xc000
00281 01D1           8EDB                         mov ds, bx
00282 01D3           E8         3476              call _int10_func
00283 01D6           61                           popa
00284 01D7           1F                           pop ds
00285 01D8           07                           pop es
00286                       000001D9            int10_end:
00287 01D9           9D                           popf
00288 01DA           CF                           iret
00289                                           ! 228 endasm
00290                                           !BCC_ENDASM
00291                                           ! 229 typedef struct
00292                                           ! 230 {Bit8u svgamode;
00293                                           !BCC_EOS
00294                                           ! 231  Bit8u class;
00295                                           !BCC_EOS
00296                                           ! 232  Bit8u memmodel;
00297                                           !BCC_EOS
00298                                           ! 233  Bit8u pixbits;
00299                                           !BCC_EOS
00300                                           ! 234  Bit16u sstart;
00301                                           !BCC_EOS
00302                                           ! 235  Bit8u pelmask;
00303                                           !BCC_EOS
00304                                           ! 236  Bit8u dacmodel;
00305                                           !BCC_EOS
00306                                           ! 237 } VGAMODES;
00307                                           !BCC_EOS
00308                                           ! 238 static VGAMODES vga_modes[17 +1]=
00309                                           ! 239 {
00310                                           
00311                       000001DB            _vga_modes:
00312                                           ! 240  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00313 01DB                        00            .byte	0
00314 01DC                        00            .byte	0
00315 01DD                        00            .byte	0
00316 01DE                        04            .byte	4
00317 01DF                      B800            .word	$B800
00318 01E1                        FF            .byte	$FF
00319 01E2                        02            .byte	2
00320                                           ! 241  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00321 01E3                        01            .byte	1
00322 01E4                        00            .byte	0
00323 01E5                        00            .byte	0
00324 01E6                        04            .byte	4
00325 01E7                      B800            .word	$B800
00326 01E9                        FF            .byte	$FF
00327 01EA                        02            .byte	2
00328                                           ! 242  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00329 01EB                        02            .byte	2
00330 01EC                        00            .byte	0
00331 01ED                        00            .byte	0
00332 01EE                        04            .byte	4
00333 01EF                      B800            .word	$B800
00334 01F1                        FF            .byte	$FF
00335 01F2                        02            .byte	2
00336                                           ! 243  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00337 01F3                        03            .byte	3
00338 01F4                        00            .byte	0
00339 01F5                        00            .byte	0
00340 01F6                        04            .byte	4
00341 01F7                      B800            .word	$B800
00342 01F9                        FF            .byte	$FF
00343 01FA                        02            .byte	2
00344                                           ! 244  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00345 01FB                        04            .byte	4
00346 01FC                        01            .byte	1
00347 01FD                        02            .byte	2
00348 01FE                        02            .byte	2
00349 01FF                      B800            .word	$B800
00350 0201                        FF            .byte	$FF
00351 0202                        01            .byte	1
00352                                           ! 245  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00353 0203                        05            .byte	5
00354 0204                        01            .byte	1
00355 0205                        02            .byte	2
00356 0206                        02            .byte	2
00357 0207                      B800            .word	$B800
00358 0209                        FF            .byte	$FF
00359 020A                        01            .byte	1
00360                                           ! 246  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00361 020B                        06            .byte	6
00362 020C                        01            .byte	1
00363 020D                        02            .byte	2
00364 020E                        01            .byte	1
00365 020F                      B800            .word	$B800
00366 0211                        FF            .byte	$FF
00367 0212                        01            .byte	1
00368                                           ! 247  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00369 0213                        07            .byte	7
00370 0214                        00            .byte	0
00371 0215                        01            .byte	1
00372 0216                        04            .byte	4
00373 0217                      B000            .word	$B000
00374 0219                        FF            .byte	$FF
00375 021A                        00            .byte	0
00376                                           ! 248  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00377 021B                        0D            .byte	$D
00378 021C                        01            .byte	1
00379 021D                        04            .byte	4
00380 021E                        04            .byte	4
00381 021F                      A000            .word	$A000
00382 0221                        FF            .byte	$FF
00383 0222                        01            .byte	1
00384                                           ! 249  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00385 0223                        0E            .byte	$E
00386 0224                        01            .byte	1
00387 0225                        04            .byte	4
00388 0226                        04            .byte	4
00389 0227                      A000            .word	$A000
00390 0229                        FF            .byte	$FF
00391 022A                        01            .byte	1
00392                                           ! 250  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00393 022B                        0F            .byte	$F
00394 022C                        01            .byte	1
00395 022D                        03            .byte	3
00396 022E                        01            .byte	1
00397 022F                      A000            .word	$A000
00398 0231                        FF            .byte	$FF
00399 0232                        00            .byte	0
00400                                           ! 251  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00401 0233                        10            .byte	$10
00402 0234                        01            .byte	1
00403 0235                        04            .byte	4
00404 0236                        04            .byte	4
00405 0237                      A000            .word	$A000
00406 0239                        FF            .byte	$FF
00407 023A                        02            .byte	2
00408                                           ! 252  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00409 023B                        11            .byte	$11
00410 023C                        01            .byte	1
00411 023D                        03            .byte	3
00412 023E                        01            .byte	1
00413 023F                      A000            .word	$A000
00414 0241                        FF            .byte	$FF
00415 0242                        02            .byte	2
00416                                           ! 253  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00417 0243                        12            .byte	$12
00418 0244                        01            .byte	1
00419 0245                        04            .byte	4
00420 0246                        04            .byte	4
00421 0247                      A000            .word	$A000
00422 0249                        FF            .byte	$FF
00423 024A                        02            .byte	2
00424                                           ! 254  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00425 024B                        13            .byte	$13
00426 024C                        01            .byte	1
00427 024D                        05            .byte	5
00428 024E                        08            .byte	8
00429 024F                      A000            .word	$A000
00430 0251                        FF            .byte	$FF
00431 0252                        03            .byte	3
00432                                           ! 255  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00433 0253                        6A            .byte	$6A
00434 0254                        01            .byte	1
00435 0255                        04            .byte	4
00436 0256                        04            .byte	4
00437 0257                      A000            .word	$A000
00438 0259                        FF            .byte	$FF
00439 025A                        02            .byte	2
00440                                           ! 256  {0x21, 0x00, 0x00, 4, 0xA000, 0xFF, 0x02},
00441 025B                        21            .byte	$21
00442 025C                        00            .byte	0
00443 025D                        00            .byte	0
00444 025E                        04            .byte	4
00445 025F                      A000            .word	$A000
00446 0261                        FF            .byte	$FF
00447 0262                        02            .byte	2
00448                                           ! 257  {0x22 , 0x00, 0x00, 4, 0xB800, 0xFF, 0x02}
00449 0263                        22            .byte	$22
00450 0264                        00            .byte	0
00451 0265                        00            .byte	0
00452 0266                        04            .byte	4
00453 0267                      B800            .word	$B800
00454 0269                        FF            .byte	$FF
00455 026A                        02            .byte	2
00456                                           ! 258 };
00457                                           !BCC_EOS
00458                                           ! 259 static Bit8u line_to_vpti[17 +1]={
00459                       0000026B            _line_to_vpti:
00460                                           ! 260     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00461 026B                        17            .byte	$17
00462 026C                        17            .byte	$17
00463 026D                        18            .byte	$18
00464 026E                        18            .byte	$18
00465 026F                        04            .byte	4
00466 0270                        05            .byte	5
00467 0271                        06            .byte	6
00468 0272                        07            .byte	7
00469                                           ! 261     0x0d, 0x0e, 0x11,
00470 0273                        0D            .byte	$D
00471 0274                        0E            .byte	$E
00472                                           ! 261  0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00473 0275                        11            .byte	$11
00474 0276                        12            .byte	$12
00475 0277                        1A            .byte	$1A
00476 0278                        1B            .byte	$1B
00477 0279                        1C            .byte	$1C
00478 027A                        1D            .byte	$1D
00479                                           ! 262     0x18, 0x15
00480 027B                        18            .byte	$18
00481                                           ! 263 };
00482 027C                        15            .byte	$15
00483                                           !BCC_EOS
00484                                           ! 264 static Bit8u dac_regs[3 +1]=
00485                                           ! 265 {0x3f,0x3f,0x3f,0xff};
00486                       0000027D            _dac_regs:
00487 027D                        3F            .byte	$3F
00488 027E                        3F            .byte	$3F
00489 027F                        3F            .byte	$3F
00490 0280                        FF            .byte	$FF
00491                                           !BCC_EOS
00492                                           ! 266 typedef struct {
00493                                           ! 267     Bit8u twidth;
00494                                           !BCC_EOS
00495                                           ! 268     Bit8u theightm1;
00496                                           !BCC_EOS
00497                                           ! 269     Bit8u cheight;
00498                                           !BCC_EOS
00499                                           ! 270     Bit8u slength_l;
00500                                           !BCC_EOS
00501                                           ! 271     Bit8u slength_h;
00502                                           !BCC_EOS
00503                                           ! 272     Bit8u sequ_regs[4];
00504                                           !BCC_EOS
00505                                           ! 273     Bit8u miscreg;
00506                                           !BCC_EOS
00507                                           ! 274     Bit8u crtc_regs[25];
00508                                           !BCC_EOS
00509                                           ! 275     Bit8u actl_regs[20];
00510                                           !BCC_EOS
00511                                           ! 276     Bit8u grdc_regs[9];
00512                                           !BCC_EOS
00513                                           ! 277 } VideoParamTableEntry;
00514                                           !BCC_EOS
00515                                           ! 278 static VideoParamTableEntry video_param_table[30] = {
00516                       00000281            _video_param_table:
00517                                           ! 279 {
00518                                           ! 280  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00519 0281                        00            .byte	0
00520 0282                        00            .byte	0
00521 0283                        00            .byte	0
00522 0284                        00            .byte	0
00523 0285                        00            .byte	0
00524 0286                        00            .byte	0
00525 0287                        00            .byte	0
00526 0288                        00            .byte	0
00527                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00528 0289                        00            .byte	0
00529 028A                        00            .byte	0
00530 028B                        00            .byte	0
00531 028C                        00            .byte	0
00532 028D                        00            .byte	0
00533 028E                        00            .byte	0
00534 028F                        00            .byte	0
00535 0290                        00            .byte	0
00536                                           ! 282  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00537 0291                        00            .byte	0
00538 0292                        00            .byte	0
00539 0293                        00            .byte	0
00540 0294                        00            .byte	0
00541 0295                        00            .byte	0
00542 0296                        00            .byte	0
00543 0297                        00            .byte	0
00544 0298                        00            .byte	0
00545                                           ! 283  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00546 0299                        00            .byte	0
00547 029A                        00            .byte	0
00548 029B                        00            .byte	0
00549 029C                        00            .byte	0
00550 029D                        00            .byte	0
00551 029E                        00            .byte	0
00552 029F                        00            .byte	0
00553 02A0                        00            .byte	0
00554                                           ! 284  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00555 02A1                        00            .byte	0
00556 02A2                        00            .byte	0
00557 02A3                        00            .byte	0
00558 02A4                        00            .byte	0
00559 02A5                        00            .byte	0
00560 02A6                        00            .byte	0
00561 02A7                        00            .byte	0
00562 02A8                        00            .byte	0
00563                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00564 02A9                        00            .byte	0
00565 02AA                        00            .byte	0
00566 02AB                        00            .byte	0
00567 02AC                        00            .byte	0
00568 02AD                        00            .byte	0
00569 02AE                        00            .byte	0
00570 02AF                        00            .byte	0
00571 02B0                        00            .byte	0
00572                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00573 02B1                        00            .byte	0
00574 02B2                        00            .byte	0
00575 02B3                        00            .byte	0
00576 02B4                        00            .byte	0
00577 02B5                        00            .byte	0
00578 02B6                        00            .byte	0
00579 02B7                        00            .byte	0
00580 02B8                        00            .byte	0
00581                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00582 02B9                        00            .byte	0
00583 02BA                        00            .byte	0
00584 02BB                        00            .byte	0
00585 02BC                        00            .byte	0
00586 02BD                        00            .byte	0
00587 02BE                        00            .byte	0
00588 02BF                        00            .byte	0
00589 02C0                        00            .byte	0
00590                                           ! 288 },
00591                                           ! 289 {
00592                                           ! 290  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00593 02C1                        00            .byte	0
00594 02C2                        00            .byte	0
00595 02C3                        00            .byte	0
00596 02C4                        00            .byte	0
00597 02C5                        00            .byte	0
00598 02C6                        00            .byte	0
00599 02C7                        00            .byte	0
00600 02C8                        00            .byte	0
00601                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00602 02C9                        00            .byte	0
00603 02CA                        00            .byte	0
00604 02CB                        00            .byte	0
00605 02CC                        00            .byte	0
00606 02CD                        00            .byte	0
00607 02CE                        00            .byte	0
00608 02CF                        00            .byte	0
00609 02D0                        00            .byte	0
00610                                           ! 292  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00611 02D1                        00            .byte	0
00612 02D2                        00            .byte	0
00613 02D3                        00            .byte	0
00614 02D4                        00            .byte	0
00615 02D5                        00            .byte	0
00616 02D6                        00            .byte	0
00617 02D7                        00            .byte	0
00618 02D8                        00            .byte	0
00619                                           ! 293  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00620 02D9                        00            .byte	0
00621 02DA                        00            .byte	0
00622 02DB                        00            .byte	0
00623 02DC                        00            .byte	0
00624 02DD                        00            .byte	0
00625 02DE                        00            .byte	0
00626 02DF                        00            .byte	0
00627 02E0                        00            .byte	0
00628                                           ! 294  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00629 02E1                        00            .byte	0
00630 02E2                        00            .byte	0
00631 02E3                        00            .byte	0
00632 02E4                        00            .byte	0
00633 02E5                        00            .byte	0
00634 02E6                        00            .byte	0
00635 02E7                        00            .byte	0
00636 02E8                        00            .byte	0
00637                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00638 02E9                        00            .byte	0
00639 02EA                        00            .byte	0
00640 02EB                        00            .byte	0
00641 02EC                        00            .byte	0
00642 02ED                        00            .byte	0
00643 02EE                        00            .byte	0
00644 02EF                        00            .byte	0
00645 02F0                        00            .byte	0
00646                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00647 02F1                        00            .byte	0
00648 02F2                        00            .byte	0
00649 02F3                        00            .byte	0
00650 02F4                        00            .byte	0
00651 02F5                        00            .byte	0
00652 02F6                        00            .byte	0
00653 02F7                        00            .byte	0
00654 02F8                        00            .byte	0
00655                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00656 02F9                        00            .byte	0
00657 02FA                        00            .byte	0
00658 02FB                        00            .byte	0
00659 02FC                        00            .byte	0
00660 02FD                        00            .byte	0
00661 02FE                        00            .byte	0
00662 02FF                        00            .byte	0
00663 0300                        00            .byte	0
00664                                           ! 298 },
00665                                           ! 299 {
00666                                           ! 300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00667 0301                        00            .byte	0
00668 0302                        00            .byte	0
00669 0303                        00            .byte	0
00670 0304                        00            .byte	0
00671 0305                        00            .byte	0
00672 0306                        00            .byte	0
00673 0307                        00            .byte	0
00674 0308                        00            .byte	0
00675                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00676 0309                        00            .byte	0
00677 030A                        00            .byte	0
00678 030B                        00            .byte	0
00679 030C                        00            .byte	0
00680 030D                        00            .byte	0
00681 030E                        00            .byte	0
00682 030F                        00            .byte	0
00683 0310                        00            .byte	0
00684                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00685 0311                        00            .byte	0
00686 0312                        00            .byte	0
00687 0313                        00            .byte	0
00688 0314                        00            .byte	0
00689 0315                        00            .byte	0
00690 0316                        00            .byte	0
00691 0317                        00            .byte	0
00692 0318                        00            .byte	0
00693                                           ! 303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00694 0319                        00            .byte	0
00695 031A                        00            .byte	0
00696 031B                        00            .byte	0
00697 031C                        00            .byte	0
00698 031D                        00            .byte	0
00699 031E                        00            .byte	0
00700 031F                        00            .byte	0
00701 0320                        00            .byte	0
00702                                           ! 304  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00703 0321                        00            .byte	0
00704 0322                        00            .byte	0
00705 0323                        00            .byte	0
00706 0324                        00            .byte	0
00707 0325                        00            .byte	0
00708 0326                        00            .byte	0
00709 0327                        00            .byte	0
00710 0328                        00            .byte	0
00711                                           ! 305  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00712 0329                        00            .byte	0
00713 032A                        00            .byte	0
00714 032B                        00            .byte	0
00715 032C                        00            .byte	0
00716 032D                        00            .byte	0
00717 032E                        00            .byte	0
00718 032F                        00            .byte	0
00719 0330                        00            .byte	0
00720                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00721 0331                        00            .byte	0
00722 0332                        00            .byte	0
00723 0333                        00            .byte	0
00724 0334                        00            .byte	0
00725 0335                        00            .byte	0
00726 0336                        00            .byte	0
00727 0337                        00            .byte	0
00728 0338                        00            .byte	0
00729                                           ! 307  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00730 0339                        00            .byte	0
00731 033A                        00            .byte	0
00732 033B                        00            .byte	0
00733 033C                        00            .byte	0
00734 033D                        00            .byte	0
00735 033E                        00            .byte	0
00736 033F                        00            .byte	0
00737 0340                        00            .byte	0
00738                                           ! 308 },
00739                                           ! 309 {
00740                                           ! 310  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00741 0341                        00            .byte	0
00742 0342                        00            .byte	0
00743 0343                        00            .byte	0
00744 0344                        00            .byte	0
00745 0345                        00            .byte	0
00746 0346                        00            .byte	0
00747 0347                        00            .byte	0
00748 0348                        00            .byte	0
00749                                           ! 311  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00750 0349                        00            .byte	0
00751 034A                        00            .byte	0
00752 034B                        00            .byte	0
00753 034C                        00            .byte	0
00754 034D                        00            .byte	0
00755 034E                        00            .byte	0
00756 034F                        00            .byte	0
00757 0350                        00            .byte	0
00758                                           ! 312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00759 0351                        00            .byte	0
00760 0352                        00            .byte	0
00761 0353                        00            .byte	0
00762 0354                        00            .byte	0
00763 0355                        00            .byte	0
00764 0356                        00            .byte	0
00765 0357                        00            .byte	0
00766 0358                        00            .byte	0
00767                                           ! 313  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00768 0359                        00            .byte	0
00769 035A                        00            .byte	0
00770 035B                        00            .byte	0
00771 035C                        00            .byte	0
00772 035D                        00            .byte	0
00773 035E                        00            .byte	0
00774 035F                        00            .byte	0
00775 0360                        00            .byte	0
00776                                           ! 314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00777 0361                        00            .byte	0
00778 0362                        00            .byte	0
00779 0363                        00            .byte	0
00780 0364                        00            .byte	0
00781 0365                        00            .byte	0
00782 0366                        00            .byte	0
00783 0367                        00            .byte	0
00784 0368                        00            .byte	0
00785                                           ! 315  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00786 0369                        00            .byte	0
00787 036A                        00            .byte	0
00788 036B                        00            .byte	0
00789 036C                        00            .byte	0
00790 036D                        00            .byte	0
00791 036E                        00            .byte	0
00792 036F                        00            .byte	0
00793 0370                        00            .byte	0
00794                                           ! 316  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00795 0371                        00            .byte	0
00796 0372                        00            .byte	0
00797 0373                        00            .byte	0
00798 0374                        00            .byte	0
00799 0375                        00            .byte	0
00800 0376                        00            .byte	0
00801 0377                        00            .byte	0
00802 0378                        00            .byte	0
00803                                           ! 317  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00804 0379                        00            .byte	0
00805 037A                        00            .byte	0
00806 037B                        00            .byte	0
00807 037C                        00            .byte	0
00808 037D                        00            .byte	0
00809 037E                        00            .byte	0
00810 037F                        00            .byte	0
00811 0380                        00            .byte	0
00812                                           ! 318 },
00813                                           ! 319 {
00814                                           ! 320  40, 24, 8, 0x00, 0x40,
00815 0381                        28            .byte	$28
00816 0382                        18            .byte	$18
00817 0383                        08            .byte	8
00818 0384                        00            .byte	0
00819 0385                        40            .byte	$40
00820                                           ! 321  0x09, 0x03, 0x00, 0x
00821 0386                        09            .byte	9
00822 0387                        03            .byte	3
00823 0388                        00            .byte	0
00824                                           ! 321 02,
00825 0389                        02            .byte	2
00826                                           ! 322  0x63,
00827 038A                        63            .byte	$63
00828                                           ! 323  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00829 038B                        2D            .byte	$2D
00830 038C                        27            .byte	$27
00831 038D                        28            .byte	$28
00832 038E                        90            .byte	$90
00833 038F                        2B            .byte	$2B
00834 0390                        80            .byte	$80
00835 0391                        BF            .byte	$BF
00836 0392                        1F            .byte	$1F
00837                                           ! 324  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00838 0393                        00            .byte	0
00839 0394                        C1            .byte	$C1
00840 0395                        00            .byte	0
00841 0396                        00            .byte	0
00842 0397                        00            .byte	0
00843 0398                        00            .byte	0
00844 0399                        00            .byte	0
00845 039A                        00            .byte	0
00846                                           ! 325  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00847 039B                        9C            .byte	$9C
00848 039C                        8E            .byte	$8E
00849 039D                        8F            .byte	$8F
00850 039E                        14            .byte	$14
00851 039F                        00            .byte	0
00852 03A0                        96            .byte	$96
00853 03A1                        B9            .byte	$B9
00854 03A2                        A2            .byte	$A2
00855                                           ! 326  0xff,
00856 03A3                        FF            .byte	$FF
00857                                           ! 327  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00858 03A4                        00            .byte	0
00859 03A5                        13            .byte	$13
00860 03A6                        15            .byte	$15
00861 03A7                        17            .byte	$17
00862 03A8                        02            .byte	2
00863 03A9                        04            .byte	4
00864 03AA                        06            .byte	6
00865 03AB                        07            .byte	7
00866                                           ! 328  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00867 03AC                        10            .byte	$10
00868 03AD                        11            .byte	$11
00869 03AE                        12            .byte	$12
00870 03AF                        13            .byte	$13
00871 03B0                        14            .byte	$14
00872 03B1                        15            .byte	$15
00873 03B2                        16            .byte	$16
00874 03B3                        17            .byte	$17
00875                                           ! 329  0x01, 0x00, 0x03, 0x00,
00876 03B4                        01            .byte	1
00877 03B5                        00            .byte	0
00878 03B6                        03            .byte	3
00879 03B7                        00            .byte	0
00880                                           ! 330  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00881 03B8                        00            .byte	0
00882 03B9                        00            .byte	0
00883 03BA                        00            .byte	0
00884 03BB                        00            .byte	0
00885 03BC                        00            .byte	0
00886 03BD                        30            .byte	$30
00887 03BE                        0F            .byte	$F
00888 03BF                        0F            .byte	$F
00889 03C0                        FF            .byte	$FF
00890                                           ! 331 },
00891                                           ! 332 {
00892                                           ! 333  40, 24, 8, 0x00, 0x40,
00893 03C1                        28            .byte	$28
00894 03C2                        18            .byte	$18
00895 03C3                        08            .byte	8
00896 03C4                        00            .byte	0
00897 03C5                        40            .byte	$40
00898                                           ! 334  0x09, 0x03, 0x00, 0x02,
00899 03C6                        09            .byte	9
00900 03C7                        03            .byte	3
00901 03C8                        00            .byte	0
00902 03C9                        02            .byte	2
00903                                           ! 335  0x63,
00904 03CA                        63            .byte	$63
00905                                           ! 336  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00906 03CB                        2D            .byte	$2D
00907 03CC                        27            .byte	$27
00908 03CD                        28            .byte	$28
00909 03CE                        90            .byte	$90
00910 03CF                        2B            .byte	$2B
00911 03D0                        80            .byte	$80
00912 03D1                        BF            .byte	$BF
00913 03D2                        1F            .byte	$1F
00914                                           ! 337  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00915 03D3                        00            .byte	0
00916 03D4                        C1            .byte	$C1
00917 03D5                        00            .byte	0
00918 03D6                        00            .byte	0
00919 03D7                        00            .byte	0
00920 03D8                        00            .byte	0
00921 03D9                        00            .byte	0
00922 03DA                        00            .byte	0
00923                                           ! 338  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00924 03DB                        9C            .byte	$9C
00925 03DC                        8E            .byte	$8E
00926 03DD                        8F            .byte	$8F
00927 03DE                        14            .byte	$14
00928 03DF                        00            .byte	0
00929 03E0                        96            .byte	$96
00930 03E1                        B9            .byte	$B9
00931 03E2                        A2            .byte	$A2
00932                                           ! 339  0xff,
00933 03E3                        FF            .byte	$FF
00934                                           ! 340  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00935 03E4                        00            .byte	0
00936 03E5                        13            .byte	$13
00937 03E6                        15            .byte	$15
00938 03E7                        17            .byte	$17
00939 03E8                        02            .byte	2
00940 03E9                        04            .byte	4
00941 03EA                        06            .byte	6
00942 03EB                        07            .byte	7
00943                                           ! 341  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00944 03EC                        10            .byte	$10
00945 03ED                        11            .byte	$11
00946 03EE                        12            .byte	$12
00947 03EF                        13            .byte	$13
00948 03F0                        14            .byte	$14
00949 03F1                        15            .byte	$15
00950 03F2                        16            .byte	$16
00951 03F3                        17            .byte	$17
00952                                           ! 342  0x01, 0x00, 0x03, 0x00,
00953 03F4                        01            .byte	1
00954 03F5                        00            .byte	0
00955 03F6                        03            .byte	3
00956 03F7                        00            .byte	0
00957                                           ! 343  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00958 03F8                        00            .byte	0
00959 03F9                        00            .byte	0
00960 03FA                        00            .byte	0
00961 03FB                        00            .byte	0
00962 03FC                        00            .byte	0
00963 03FD                        30            .byte	$30
00964 03FE                        0F            .byte	$F
00965 03FF                        0F            .byte	$F
00966 0400                        FF            .byte	$FF
00967                                           ! 344 },
00968                                           ! 345 {
00969                                           ! 346  80, 24, 8, 0x00, 0x40,
00970 0401                        50            .byte	$50
00971 0402                        18            .byte	$18
00972 0403                        08            .byte	8
00973 0404                        00            .byte	0
00974 0405                        40            .byte	$40
00975                                           ! 347  0x01, 0x01, 0x00, 0x06,
00976 0406                        01            .byte	1
00977 0407                        01            .byte	1
00978 0408                        00            .byte	0
00979 0409                        06            .byte	6
00980                                           ! 348  0x63,
00981 040A                        63            .byte	$63
00982                                           ! 349  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00983 040B                        5F            .byte	$5F
00984 040C                        4F            .byte	$4F
00985 040D                        50            .byte	$50
00986 040E                        82            .byte	$82
00987 040F                        54            .byte	$54
00988 0410                        80            .byte	$80
00989 0411                        BF            .byte	$BF
00990 0412                        1F            .byte	$1F
00991                                           ! 350  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00992 0413                        00            .byte	0
00993 0414                        C1            .byte	$C1
00994 0415                        00            .byte	0
00995 0416                        00            .byte	0
00996 0417                        00            .byte	0
00997 0418                        00            .byte	0
00998 0419                        00            .byte	0
00999 041A                        00            .byte	0
01000                                           ! 351  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01001 041B                        9C            .byte	$9C
01002 041C                        8E            .byte	$8E
01003 041D                        8F            .byte	$8F
01004 041E                        28            .byte	$28
01005 041F                        00            .byte	0
01006 0420                        96            .byte	$96
01007 0421                        B9            .byte	$B9
01008 0422                        C2            .byte	$C2
01009                                           ! 352  0xff,
01010 0423                        FF            .byte	$FF
01011                                           ! 353  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01012 0424                        00            .byte	0
01013 0425                        17            .byte	$17
01014 0426                        17            .byte	$17
01015 0427                        17            .byte	$17
01016 0428                        17            .byte	$17
01017 0429                        17            .byte	$17
01018 042A                        17            .byte	$17
01019 042B                        17            .byte	$17
01020                                           ! 354  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01021 042C                        17            .byte	$17
01022 042D                        17            .byte	$17
01023 042E                        17            .byte	$17
01024 042F                        17            .byte	$17
01025 0430                        17            .byte	$17
01026 0431                        17            .byte	$17
01027 0432                        17            .byte	$17
01028 0433                        17            .byte	$17
01029                                           ! 355  0x01, 0x00, 0x01, 0x00,
01030 0434                        01            .byte	1
01031 0435                        00            .byte	0
01032 0436                        01            .byte	1
01033 0437                        00            .byte	0
01034                                           ! 356  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01035 0438                        00            .byte	0
01036 0439                        00            .byte	0
01037 043A                        00            .byte	0
01038 043B                        00            .byte	0
01039 043C                        00            .byte	0
01040 043D                        00            .byte	0
01041 043E                        0D            .byte	$D
01042 043F                        0F            .byte	$F
01043 0440                        FF            .byte	$FF
01044                                           ! 357 },
01045                                           ! 358 {
01046                                           ! 359  80, 24, 16, 0x00, 0x10,
01047 0441                        50            .byte	$50
01048 0442                        18            .byte	$18
01049 0443                        10            .byte	$10
01050 0444                        00            .byte	0
01051 0445                        10            .byte	$10
01052                                           ! 360  0x00, 0x03, 0x00, 0x02,
01053 0446                        00            .byte	0
01054 0447                        03            .byte	3
01055 0448                        00            .byte	0
01056 0449                        02            .byte	2
01057                                           ! 361  0x66,
01058 044A                        66            .byte	$66
01059                                           ! 362  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01060 044B                        5F            .byte	$5F
01061 044C                        4F            .byte	$4F
01062 044D                        50            .byte	$50
01063 044E                        82            .byte	$82
01064 044F                        55            .byte	$55
01065 0450                        81            .byte	$81
01066 0451                        BF            .byte	$BF
01067 0452                        1F            .byte	$1F
01068                                           ! 363  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01069 0453                        00            .byte	0
01070 0454                        4F            .byte	$4F
01071 0455                        0D            .byte	$D
01072 0456                        0E            .byte	$E
01073 0457                        00            .byte	0
01074 0458                        00            .byte	0
01075 0459                        00            .byte	0
01076 045A                        00            .byte	0
01077                                           ! 364  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01078 045B                        9C            .byte	$9C
01079 045C                        8E            .byte	$8E
01080 045D                        8F            .byte	$8F
01081 045E                        28            .byte	$28
01082 045F                        0F            .byte	$F
01083 0460                        96            .byte	$96
01084 0461                        B9            .byte	$B9
01085 0462                        A3            .byte	$A3
01086                                           ! 365  0xff,
01087 0463                        FF            .byte	$FF
01088                                           ! 366  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01089 0464                        00            .byte	0
01090 0465                        08            .byte	8
01091 0466                        08            .byte	8
01092 0467                        08            .byte	8
01093 0468                        08            .byte	8
01094 0469                        08            .byte	8
01095 046A                        08            .byte	8
01096 046B                        08            .byte	8
01097                                           ! 367  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01098 046C                        10            .byte	$10
01099 046D                        18            .byte	$18
01100 046E                        18            .byte	$18
01101 046F                        18            .byte	$18
01102 0470                        18            .byte	$18
01103 0471                        18            .byte	$18
01104 0472                        18            .byte	$18
01105 0473                        18            .byte	$18
01106                                           ! 368  0x0e, 0x00, 0x0f, 0x08,
01107 0474                        0E            .byte	$E
01108 0475                        00            .byte	0
01109 0476                        0F            .byte	$F
01110 0477                        08            .byte	8
01111                                           ! 369  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01112 0478                        00            .byte	0
01113 0479                        00            .byte	0
01114 047A                        00            .byte	0
01115 047B                        00            .byte	0
01116 047C                        00            .byte	0
01117 047D                        10            .byte	$10
01118 047E                        0A            .byte	$A
01119 047F                        0F            .byte	$F
01120 0480                        FF            .byte	$FF
01121                                           ! 370 },
01122                                           ! 371 {
01123                                           ! 372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01124 0481                        00            .byte	0
01125 0482                        00            .byte	0
01126 0483                        00            .byte	0
01127 0484                        00            .byte	0
01128 0485                        00            .byte	0
01129 0486                        00            .byte	0
01130 0487                        00            .byte	0
01131 0488                        00            .byte	0
01132                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01133 0489                        00            .byte	0
01134 048A                        00            .byte	0
01135 048B                        00            .byte	0
01136 048C                        00            .byte	0
01137 048D                        00            .byte	0
01138 048E                        00            .byte	0
01139 048F                        00            .byte	0
01140 0490                        00            .byte	0
01141                                           ! 374  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01142 0491                        00            .byte	0
01143 0492                        00            .byte	0
01144 0493                        00            .byte	0
01145 0494                        00            .byte	0
01146 0495                        00            .byte	0
01147 0496                        00            .byte	0
01148 0497                        00            .byte	0
01149 0498                        00            .byte	0
01150                                           ! 375  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01151 0499                        00            .byte	0
01152 049A                        00            .byte	0
01153 049B                        00            .byte	0
01154 049C                        00            .byte	0
01155 049D                        00            .byte	0
01156 049E                        00            .byte	0
01157 049F                        00            .byte	0
01158 04A0                        00            .byte	0
01159                                           ! 376  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01160 04A1                        00            .byte	0
01161 04A2                        00            .byte	0
01162 04A3                        00            .byte	0
01163 04A4                        00            .byte	0
01164 04A5                        00            .byte	0
01165 04A6                        00            .byte	0
01166 04A7                        00            .byte	0
01167 04A8                        00            .byte	0
01168                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01169 04A9                        00            .byte	0
01170 04AA                        00            .byte	0
01171 04AB                        00            .byte	0
01172 04AC                        00            .byte	0
01173 04AD                        00            .byte	0
01174 04AE                        00            .byte	0
01175 04AF                        00            .byte	0
01176 04B0                        00            .byte	0
01177                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01178 04B1                        00            .byte	0
01179 04B2                        00            .byte	0
01180 04B3                        00            .byte	0
01181 04B4                        00            .byte	0
01182 04B5                        00            .byte	0
01183 04B6                        00            .byte	0
01184 04B7                        00            .byte	0
01185 04B8                        00            .byte	0
01186                                           ! 379  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01187 04B9                        00            .byte	0
01188 04BA                        00            .byte	0
01189 04BB                        00            .byte	0
01190 04BC                        00            .byte	0
01191 04BD                        00            .byte	0
01192 04BE                        00            .byte	0
01193 04BF                        00            .byte	0
01194 04C0                        00            .byte	0
01195                                           ! 380 },
01196                                           ! 381 {
01197                                           ! 382  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01198 04C1                        00            .byte	0
01199 04C2                        00            .byte	0
01200 04C3                        00            .byte	0
01201 04C4                        00            .byte	0
01202 04C5                        00            .byte	0
01203 04C6                        00            .byte	0
01204 04C7                        00            .byte	0
01205 04C8                        00            .byte	0
01206                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01207 04C9                        00            .byte	0
01208 04CA                        00            .byte	0
01209 04CB                        00            .byte	0
01210 04CC                        00            .byte	0
01211 04CD                        00            .byte	0
01212 04CE                        00            .byte	0
01213 04CF                        00            .byte	0
01214 04D0                        00            .byte	0
01215                                           ! 384  0x00, 0x00, 0x00, 0x00, 
01216 04D1                        00            .byte	0
01217 04D2                        00            .byte	0
01218 04D3                        00            .byte	0
01219 04D4                        00            .byte	0
01220                                           ! 384 0x00, 0x00, 0x00, 0x00,
01221 04D5                        00            .byte	0
01222 04D6                        00            .byte	0
01223 04D7                        00            .byte	0
01224 04D8                        00            .byte	0
01225                                           ! 385  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01226 04D9                        00            .byte	0
01227 04DA                        00            .byte	0
01228 04DB                        00            .byte	0
01229 04DC                        00            .byte	0
01230 04DD                        00            .byte	0
01231 04DE                        00            .byte	0
01232 04DF                        00            .byte	0
01233 04E0                        00            .byte	0
01234                                           ! 386  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01235 04E1                        00            .byte	0
01236 04E2                        00            .byte	0
01237 04E3                        00            .byte	0
01238 04E4                        00            .byte	0
01239 04E5                        00            .byte	0
01240 04E6                        00            .byte	0
01241 04E7                        00            .byte	0
01242 04E8                        00            .byte	0
01243                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01244 04E9                        00            .byte	0
01245 04EA                        00            .byte	0
01246 04EB                        00            .byte	0
01247 04EC                        00            .byte	0
01248 04ED                        00            .byte	0
01249 04EE                        00            .byte	0
01250 04EF                        00            .byte	0
01251 04F0                        00            .byte	0
01252                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01253 04F1                        00            .byte	0
01254 04F2                        00            .byte	0
01255 04F3                        00            .byte	0
01256 04F4                        00            .byte	0
01257 04F5                        00            .byte	0
01258 04F6                        00            .byte	0
01259 04F7                        00            .byte	0
01260 04F8                        00            .byte	0
01261                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01262 04F9                        00            .byte	0
01263 04FA                        00            .byte	0
01264 04FB                        00            .byte	0
01265 04FC                        00            .byte	0
01266 04FD                        00            .byte	0
01267 04FE                        00            .byte	0
01268 04FF                        00            .byte	0
01269 0500                        00            .byte	0
01270                                           ! 390 },
01271                                           ! 391 {
01272                                           ! 392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01273 0501                        00            .byte	0
01274 0502                        00            .byte	0
01275 0503                        00            .byte	0
01276 0504                        00            .byte	0
01277 0505                        00            .byte	0
01278 0506                        00            .byte	0
01279 0507                        00            .byte	0
01280 0508                        00            .byte	0
01281                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01282 0509                        00            .byte	0
01283 050A                        00            .byte	0
01284 050B                        00            .byte	0
01285 050C                        00            .byte	0
01286 050D                        00            .byte	0
01287 050E                        00            .byte	0
01288 050F                        00            .byte	0
01289 0510                        00            .byte	0
01290                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01291 0511                        00            .byte	0
01292 0512                        00            .byte	0
01293 0513                        00            .byte	0
01294 0514                        00            .byte	0
01295 0515                        00            .byte	0
01296 0516                        00            .byte	0
01297 0517                        00            .byte	0
01298 0518                        00            .byte	0
01299                                           ! 395  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01300 0519                        00            .byte	0
01301 051A                        00            .byte	0
01302 051B                        00            .byte	0
01303 051C                        00            .byte	0
01304 051D                        00            .byte	0
01305 051E                        00            .byte	0
01306 051F                        00            .byte	0
01307 0520                        00            .byte	0
01308                                           ! 396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01309 0521                        00            .byte	0
01310 0522                        00            .byte	0
01311 0523                        00            .byte	0
01312 0524                        00            .byte	0
01313 0525                        00            .byte	0
01314 0526                        00            .byte	0
01315 0527                        00            .byte	0
01316 0528                        00            .byte	0
01317                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01318 0529                        00            .byte	0
01319 052A                        00            .byte	0
01320 052B                        00            .byte	0
01321 052C                        00            .byte	0
01322 052D                        00            .byte	0
01323 052E                        00            .byte	0
01324 052F                        00            .byte	0
01325 0530                        00            .byte	0
01326                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01327 0531                        00            .byte	0
01328 0532                        00            .byte	0
01329 0533                        00            .byte	0
01330 0534                        00            .byte	0
01331 0535                        00            .byte	0
01332 0536                        00            .byte	0
01333 0537                        00            .byte	0
01334 0538                        00            .byte	0
01335                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01336 0539                        00            .byte	0
01337 053A                        00            .byte	0
01338 053B                        00            .byte	0
01339 053C                        00            .byte	0
01340 053D                        00            .byte	0
01341 053E                        00            .byte	0
01342 053F                        00            .byte	0
01343 0540                        00            .byte	0
01344                                           ! 400 },
01345                                           ! 401 {
01346                                           ! 402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01347 0541                        00            .byte	0
01348 0542                        00            .byte	0
01349 0543                        00            .byte	0
01350 0544                        00            .byte	0
01351 0545                        00            .byte	0
01352 0546                        00            .byte	0
01353 0547                        00            .byte	0
01354 0548                        00            .byte	0
01355                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01356 0549                        00            .byte	0
01357 054A                        00            .byte	0
01358 054B                        00            .byte	0
01359 054C                        00            .byte	0
01360 054D                        00            .byte	0
01361 054E                        00            .byte	0
01362 054F                        00            .byte	0
01363 0550                        00            .byte	0
01364                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01365 0551                        00            .byte	0
01366 0552                        00            .byte	0
01367 0553                        00            .byte	0
01368 0554                        00            .byte	0
01369 0555                        00            .byte	0
01370 0556                        00            .byte	0
01371 0557                        00            .byte	0
01372 0558                        00            .byte	0
01373                                           ! 405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01374 0559                        00            .byte	0
01375 055A                        00            .byte	0
01376 055B                        00            .byte	0
01377 055C                        00            .byte	0
01378 055D                        00            .byte	0
01379 055E                        00            .byte	0
01380 055F                        00            .byte	0
01381 0560                        00            .byte	0
01382                                           ! 406  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01383 0561                        00            .byte	0
01384 0562                        00            .byte	0
01385 0563                        00            .byte	0
01386 0564                        00            .byte	0
01387 0565                        00            .byte	0
01388 0566                        00            .byte	0
01389 0567                        00            .byte	0
01390 0568                        00            .byte	0
01391                                           ! 407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01392 0569                        00            .byte	0
01393 056A                        00            .byte	0
01394 056B                        00            .byte	0
01395 056C                        00            .byte	0
01396 056D                        00            .byte	0
01397 056E                        00            .byte	0
01398 056F                        00            .byte	0
01399 0570                        00            .byte	0
01400                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01401 0571                        00            .byte	0
01402 0572                        00            .byte	0
01403 0573                        00            .byte	0
01404 0574                        00            .byte	0
01405 0575                        00            .byte	0
01406 0576                        00            .byte	0
01407 0577                        00            .byte	0
01408 0578                        00            .byte	0
01409                                           ! 409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01410 0579                        00            .byte	0
01411 057A                        00            .byte	0
01412 057B                        00            .byte	0
01413 057C                        00            .byte	0
01414 057D                        00            .byte	0
01415 057E                        00            .byte	0
01416 057F                        00            .byte	0
01417 0580                        00            .byte	0
01418                                           ! 410 },
01419                                           ! 411 {
01420                                           ! 412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01421 0581                        00            .byte	0
01422 0582                        00            .byte	0
01423 0583                        00            .byte	0
01424 0584                        00            .byte	0
01425 0585                        00            .byte	0
01426 0586                        00            .byte	0
01427 0587                        00            .byte	0
01428 0588                        00            .byte	0
01429                                           ! 413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01430 0589                        00            .byte	0
01431 058A                        00            .byte	0
01432 058B                        00            .byte	0
01433 058C                        00            .byte	0
01434 058D                        00            .byte	0
01435 058E                        00            .byte	0
01436 058F                        00            .byte	0
01437 0590                        00            .byte	0
01438                                           ! 414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01439 0591                        00            .byte	0
01440 0592                        00            .byte	0
01441 0593                        00            .byte	0
01442 0594                        00            .byte	0
01443 0595                        00            .byte	0
01444 0596                        00            .byte	0
01445 0597                        00            .byte	0
01446 0598                        00            .byte	0
01447                                           ! 415  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01448 0599                        00            .byte	0
01449 059A                        00            .byte	0
01450 059B                        00            .byte	0
01451 059C                        00            .byte	0
01452 059D                        00            .byte	0
01453 059E                        00            .byte	0
01454 059F                        00            .byte	0
01455 05A0                        00            .byte	0
01456                                           ! 416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01457 05A1                        00            .byte	0
01458 05A2                        00            .byte	0
01459 05A3                        00            .byte	0
01460 05A4                        00            .byte	0
01461 05A5                        00            .byte	0
01462 05A6                        00            .byte	0
01463 05A7                        00            .byte	0
01464 05A8                        00            .byte	0
01465                                           ! 417  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01466 05A9                        00            .byte	0
01467 05AA                        00            .byte	0
01468 05AB                        00            .byte	0
01469 05AC                        00            .byte	0
01470 05AD                        00            .byte	0
01471 05AE                        00            .byte	0
01472 05AF                        00            .byte	0
01473 05B0                        00            .byte	0
01474                                           ! 418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01475 05B1                        00            .byte	0
01476 05B2                        00            .byte	0
01477 05B3                        00            .byte	0
01478 05B4                        00            .byte	0
01479 05B5                        00            .byte	0
01480 05B6                        00            .byte	0
01481 05B7                        00            .byte	0
01482 05B8                        00            .byte	0
01483                                           ! 419  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01484 05B9                        00            .byte	0
01485 05BA                        00            .byte	0
01486 05BB                        00            .byte	0
01487 05BC                        00            .byte	0
01488 05BD                        00            .byte	0
01489 05BE                        00            .byte	0
01490 05BF                        00            .byte	0
01491 05C0                        00            .byte	0
01492                                           ! 420 },
01493                                           ! 421 {
01494                                           ! 422  40, 24, 8, 0x00, 0x20,
01495 05C1                        28            .byte	$28
01496 05C2                        18            .byte	$18
01497 05C3                        08            .byte	8
01498 05C4                        00            .byte	0
01499 05C5                        20            .byte	$20
01500                                           ! 423  0x09, 0x0f, 0x00, 0x06,
01501 05C6                        09            .byte	9
01502 05C7                        0F            .byte	$F
01503 05C8                        00            .byte	0
01504 05C9                        06            .byte	6
01505                                           ! 424  0x63,
01506 05CA                        63            .byte	$63
01507                                           ! 425  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01508 05CB                        2D            .byte	$2D
01509 05CC                        27            .byte	$27
01510 05CD                        28            .byte	$28
01511 05CE                        90            .byte	$90
01512 05CF                        2B            .byte	$2B
01513 05D0                        80            .byte	$80
01514 05D1                        BF            .byte	$BF
01515 05D2                        1F            .byte	$1F
01516                                           ! 426  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01517 05D3                        00            .byte	0
01518 05D4                        C0            .byte	$C0
01519 05D5                        00            .byte	0
01520 05D6                        00            .byte	0
01521 05D7                        00            .byte	0
01522 05D8                        00            .byte	0
01523 05D9                        00            .byte	0
01524 05DA                        00            .byte	0
01525                                           ! 427  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01526 05DB                        9C            .byte	$9C
01527 05DC                        8E            .byte	$8E
01528 05DD                        8F            .byte	$8F
01529 05DE                        14            .byte	$14
01530 05DF                        00            .byte	0
01531 05E0                        96            .byte	$96
01532 05E1                        B9            .byte	$B9
01533 05E2                        E3            .byte	$E3
01534                                           ! 428  0xff,
01535 05E3                        FF            .byte	$FF
01536                                           ! 429  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01537 05E4                        00            .byte	0
01538 05E5                        01            .byte	1
01539 05E6                        02            .byte	2
01540 05E7                        03            .byte	3
01541 05E8                        04            .byte	4
01542 05E9                        05            .byte	5
01543 05EA                        06            .byte	6
01544 05EB                        07            .byte	7
01545                                           ! 430  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01546 05EC                        10            .byte	$10
01547 05ED                        11            .byte	$11
01548 05EE                        12            .byte	$12
01549 05EF                        13            .byte	$13
01550 05F0                        14            .byte	$14
01551 05F1                        15            .byte	$15
01552 05F2                        16            .byte	$16
01553 05F3                        17            .byte	$17
01554                                           ! 431  0x01, 0x00, 0x0f, 0x00,
01555 05F4                        01            .byte	1
01556 05F5                        00            .byte	0
01557 05F6                        0F            .byte	$F
01558 05F7                        00            .byte	0
01559                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01560 05F8                        00            .byte	0
01561 05F9                        00            .byte	0
01562 05FA                        00            .byte	0
01563 05FB                        00            .byte	0
01564 05FC                        00            .byte	0
01565 05FD                        00            .byte	0
01566 05FE                        05            .byte	5
01567 05FF                        0F            .byte	$F
01568 0600                        FF            .byte	$FF
01569                                           ! 433 },
01570                                           ! 434 {
01571                                           ! 435  80, 24, 8, 0x00, 0x40,
01572 0601                        50            .byte	$50
01573 0602                        18            .byte	$18
01574 0603                        08            .byte	8
01575 0604                        00            .byte	0
01576 0605                        40            .byte	$40
01577                                           ! 436  0x01, 0x0f, 0x00, 0x06,
01578 0606                        01            .byte	1
01579 0607                        0F            .byte	$F
01580 0608                        00            .byte	0
01581 0609                        06            .byte	6
01582                                           ! 437  0x63,
01583 060A                        63            .byte	$63
01584                                           ! 438  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01585 060B                        5F            .byte	$5F
01586 060C                        4F            .byte	$4F
01587 060D                        50            .byte	$50
01588 060E                        82            .byte	$82
01589 060F                        54            .byte	$54
01590 0610                        80            .byte	$80
01591 0611                        BF            .byte	$BF
01592 0612                        1F            .byte	$1F
01593                                           ! 439  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01594 0613                        00            .byte	0
01595 0614                        C0            .byte	$C0
01596 0615                        00            .byte	0
01597 0616                        00            .byte	0
01598 0617                        00            .byte	0
01599 0618                        00            .byte	0
01600 0619                        00            .byte	0
01601 061A                        00            .byte	0
01602                                           ! 440  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96,
01603 061B                        9C            .byte	$9C
01604 061C                        8E            .byte	$8E
01605 061D                        8F            .byte	$8F
01606 061E                        28            .byte	$28
01607 061F                        00            .byte	0
01608                                           ! 440  0xb9, 0xe3,
01609 0620                        96            .byte	$96
01610 0621                        B9            .byte	$B9
01611 0622                        E3            .byte	$E3
01612                                           ! 441  0xff,
01613 0623                        FF            .byte	$FF
01614                                           ! 442  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01615 0624                        00            .byte	0
01616 0625                        01            .byte	1
01617 0626                        02            .byte	2
01618 0627                        03            .byte	3
01619 0628                        04            .byte	4
01620 0629                        05            .byte	5
01621 062A                        06            .byte	6
01622 062B                        07            .byte	7
01623                                           ! 443  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01624 062C                        10            .byte	$10
01625 062D                        11            .byte	$11
01626 062E                        12            .byte	$12
01627 062F                        13            .byte	$13
01628 0630                        14            .byte	$14
01629 0631                        15            .byte	$15
01630 0632                        16            .byte	$16
01631 0633                        17            .byte	$17
01632                                           ! 444  0x01, 0x00, 0x0f, 0x00,
01633 0634                        01            .byte	1
01634 0635                        00            .byte	0
01635 0636                        0F            .byte	$F
01636 0637                        00            .byte	0
01637                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01638 0638                        00            .byte	0
01639 0639                        00            .byte	0
01640 063A                        00            .byte	0
01641 063B                        00            .byte	0
01642 063C                        00            .byte	0
01643 063D                        00            .byte	0
01644 063E                        05            .byte	5
01645 063F                        0F            .byte	$F
01646 0640                        FF            .byte	$FF
01647                                           ! 446 },
01648                                           ! 447 {
01649                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01650 0641                        00            .byte	0
01651 0642                        00            .byte	0
01652 0643                        00            .byte	0
01653 0644                        00            .byte	0
01654 0645                        00            .byte	0
01655 0646                        00            .byte	0
01656 0647                        00            .byte	0
01657 0648                        00            .byte	0
01658                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01659 0649                        00            .byte	0
01660 064A                        00            .byte	0
01661 064B                        00            .byte	0
01662 064C                        00            .byte	0
01663 064D                        00            .byte	0
01664 064E                        00            .byte	0
01665 064F                        00            .byte	0
01666 0650                        00            .byte	0
01667                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01668 0651                        00            .byte	0
01669 0652                        00            .byte	0
01670 0653                        00            .byte	0
01671 0654                        00            .byte	0
01672 0655                        00            .byte	0
01673 0656                        00            .byte	0
01674 0657                        00            .byte	0
01675 0658                        00            .byte	0
01676                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01677 0659                        00            .byte	0
01678 065A                        00            .byte	0
01679 065B                        00            .byte	0
01680 065C                        00            .byte	0
01681 065D                        00            .byte	0
01682 065E                        00            .byte	0
01683 065F                        00            .byte	0
01684 0660                        00            .byte	0
01685                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01686 0661                        00            .byte	0
01687 0662                        00            .byte	0
01688 0663                        00            .byte	0
01689 0664                        00            .byte	0
01690 0665                        00            .byte	0
01691 0666                        00            .byte	0
01692 0667                        00            .byte	0
01693 0668                        00            .byte	0
01694                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01695 0669                        00            .byte	0
01696 066A                        00            .byte	0
01697 066B                        00            .byte	0
01698 066C                        00            .byte	0
01699 066D                        00            .byte	0
01700 066E                        00            .byte	0
01701 066F                        00            .byte	0
01702 0670                        00            .byte	0
01703                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01704 0671                        00            .byte	0
01705 0672                        00            .byte	0
01706 0673                        00            .byte	0
01707 0674                        00            .byte	0
01708 0675                        00            .byte	0
01709 0676                        00            .byte	0
01710 0677                        00            .byte	0
01711 0678                        00            .byte	0
01712                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01713 0679                        00            .byte	0
01714 067A                        00            .byte	0
01715 067B                        00            .byte	0
01716 067C                        00            .byte	0
01717 067D                        00            .byte	0
01718 067E                        00            .byte	0
01719 067F                        00            .byte	0
01720 0680                        00            .byte	0
01721                                           ! 456 },
01722                                           ! 457 {
01723                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01724 0681                        00            .byte	0
01725 0682                        00            .byte	0
01726 0683                        00            .byte	0
01727 0684                        00            .byte	0
01728 0685                        00            .byte	0
01729 0686                        00            .byte	0
01730 0687                        00            .byte	0
01731 0688                        00            .byte	0
01732                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01733 0689                        00            .byte	0
01734 068A                        00            .byte	0
01735 068B                        00            .byte	0
01736 068C                        00            .byte	0
01737 068D                        00            .byte	0
01738 068E                        00            .byte	0
01739 068F                        00            .byte	0
01740 0690                        00            .byte	0
01741                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01742 0691                        00            .byte	0
01743 0692                        00            .byte	0
01744 0693                        00            .byte	0
01745 0694                        00            .byte	0
01746 0695                        00            .byte	0
01747 0696                        00            .byte	0
01748 0697                        00            .byte	0
01749 0698                        00            .byte	0
01750                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01751 0699                        00            .byte	0
01752 069A                        00            .byte	0
01753 069B                        00            .byte	0
01754 069C                        00            .byte	0
01755 069D                        00            .byte	0
01756 069E                        00            .byte	0
01757 069F                        00            .byte	0
01758 06A0                        00            .byte	0
01759                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01760 06A1                        00            .byte	0
01761 06A2                        00            .byte	0
01762 06A3                        00            .byte	0
01763 06A4                        00            .byte	0
01764 06A5                        00            .byte	0
01765 06A6                        00            .byte	0
01766 06A7                        00            .byte	0
01767 06A8                        00            .byte	0
01768                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01769 06A9                        00            .byte	0
01770 06AA                        00            .byte	0
01771 06AB                        00            .byte	0
01772 06AC                        00            .byte	0
01773 06AD                        00            .byte	0
01774 06AE                        00            .byte	0
01775 06AF                        00            .byte	0
01776 06B0                        00            .byte	0
01777                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01778 06B1                        00            .byte	0
01779 06B2                        00            .byte	0
01780 06B3                        00            .byte	0
01781 06B4                        00            .byte	0
01782 06B5                        00            .byte	0
01783 06B6                        00            .byte	0
01784 06B7                        00            .byte	0
01785 06B8                        00            .byte	0
01786                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01787 06B9                        00            .byte	0
01788 06BA                        00            .byte	0
01789 06BB                        00            .byte	0
01790 06BC                        00            .byte	0
01791 06BD                        00            .byte	0
01792 06BE                        00            .byte	0
01793 06BF                        00            .byte	0
01794 06C0                        00            .byte	0
01795                                           ! 466 },
01796                                           ! 467 {
01797                                           ! 468  80, 24, 14, 0x00, 0x80,
01798 06C1                        50            .byte	$50
01799 06C2                        18            .byte	$18
01800 06C3                        0E            .byte	$E
01801 06C4                        00            .byte	0
01802 06C5                        80            .byte	$80
01803                                           ! 469  0x01, 0x0f, 0x00, 0x06,
01804 06C6                        01            .byte	1
01805 06C7                        0F            .byte	$F
01806 06C8                        00            .byte	0
01807 06C9                        06            .byte	6
01808                                           ! 470  0xa3,
01809 06CA                        A3            .byte	$A3
01810                                           ! 471  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01811 06CB                        5F            .byte	$5F
01812 06CC                        4F            .byte	$4F
01813 06CD                        50            .byte	$50
01814 06CE                        82            .byte	$82
01815 06CF                        54            .byte	$54
01816 06D0                        80            .byte	$80
01817 06D1                        BF            .byte	$BF
01818 06D2                        1F            .byte	$1F
01819                                           ! 472  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01820 06D3                        00            .byte	0
01821 06D4                        40            .byte	$40
01822 06D5                        00            .byte	0
01823 06D6                        00            .byte	0
01824 06D7                        00            .byte	0
01825 06D8                        00            .byte	0
01826 06D9                        00            .byte	0
01827 06DA                        00            .byte	0
01828                                           ! 473  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01829 06DB                        83            .byte	$83
01830 06DC                        85            .byte	$85
01831 06DD                        5D            .byte	$5D
01832 06DE                        28            .byte	$28
01833 06DF                        0F            .byte	$F
01834 06E0                        63            .byte	$63
01835 06E1                        BA            .byte	$BA
01836 06E2                        E3            .byte	$E3
01837                                           ! 474  0xff,
01838 06E3                        FF            .byte	$FF
01839                                           ! 475  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01840 06E4                        00            .byte	0
01841 06E5                        08            .byte	8
01842 06E6                        00            .byte	0
01843 06E7                        00            .byte	0
01844 06E8                        18            .byte	$18
01845 06E9                        18            .byte	$18
01846 06EA                        00            .byte	0
01847 06EB                        00            .byte	0
01848                                           ! 476  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01849 06EC                        00            .byte	0
01850 06ED                        08            .byte	8
01851 06EE                        00            .byte	0
01852 06EF                        00            .byte	0
01853 06F0                        00            .byte	0
01854 06F1                        18            .byte	$18
01855 06F2                        00            .byte	0
01856 06F3                        00            .byte	0
01857                                           ! 477  0x01, 0x00, 0x01, 0x00,
01858 06F4                        01            .byte	1
01859 06F5                        00            .byte	0
01860 06F6                        01            .byte	1
01861 06F7                        00            .byte	0
01862                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01863 06F8                        00            .byte	0
01864 06F9                        00            .byte	0
01865 06FA                        00            .byte	0
01866 06FB                        00            .byte	0
01867 06FC                        00            .byte	0
01868 06FD                        00            .byte	0
01869 06FE                        05            .byte	5
01870 06FF                        0F            .byte	$F
01871 0700                        FF            .byte	$FF
01872                                           ! 479 },
01873                                           ! 480 {
01874                                           ! 481  80, 24, 14, 0x00, 0x80,
01875 0701                        50            .byte	$50
01876 0702                        18            .byte	$18
01877 0703                        0E            .byte	$E
01878 0704                        00            .byte	0
01879 0705                        80            .byte	$80
01880                                           ! 482  0x01, 0x0f, 0x00, 0x06,
01881 0706                        01            .byte	1
01882 0707                        0F            .byte	$F
01883 0708                        00            .byte	0
01884 0709                        06            .byte	6
01885                                           ! 483  0xa3,
01886 070A                        A3            .byte	$A3
01887                                           ! 484  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01888 070B                        5F            .byte	$5F
01889 070C                        4F            .byte	$4F
01890 070D                        50            .byte	$50
01891 070E                        82            .byte	$82
01892 070F                        54            .byte	$54
01893 0710                        80            .byte	$80
01894 0711                        BF            .byte	$BF
01895 0712                        1F            .byte	$1F
01896                                           ! 485  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01897 0713                        00            .byte	0
01898 0714                        40            .byte	$40
01899 0715                        00            .byte	0
01900 0716                        00            .byte	0
01901 0717                        00            .byte	0
01902 0718                        00            .byte	0
01903 0719                        00            .byte	0
01904 071A                        00            .byte	0
01905                                           ! 486  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01906 071B                        83            .byte	$83
01907 071C                        85            .byte	$85
01908 071D                        5D            .byte	$5D
01909 071E                        28            .byte	$28
01910 071F                        0F            .byte	$F
01911 0720                        63            .byte	$63
01912 0721                        BA            .byte	$BA
01913 0722                        E3            .byte	$E3
01914                                           ! 487  0xff,
01915 0723                        FF            .byte	$FF
01916                                           ! 488  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01917 0724                        00            .byte	0
01918 0725                        01            .byte	1
01919 0726                        02            .byte	2
01920 0727                        03            .byte	3
01921 0728                        04            .byte	4
01922 0729                        05            .byte	5
01923 072A                        14            .byte	$14
01924 072B                        07            .byte	7
01925                                           ! 489  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01926 072C                        38            .byte	$38
01927 072D                        39            .byte	$39
01928 072E                        3A            .byte	$3A
01929 072F                        3B            .byte	$3B
01930 0730                        3C            .byte	$3C
01931 0731                        3D            .byte	$3D
01932 0732                        3E            .byte	$3E
01933 0733                        3F            .byte	$3F
01934                                           ! 490  0x01, 0x00, 0x0f, 0x00,
01935 0734                        01            .byte	1
01936 0735                        00            .byte	0
01937 0736                        0F            .byte	$F
01938 0737                        00            .byte	0
01939                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01940 0738                        00            .byte	0
01941 0739                        00            .byte	0
01942 073A                        00            .byte	0
01943 073B                        00            .byte	0
01944 073C                        00            .byte	0
01945 073D                        00            .byte	0
01946 073E                        05            .byte	5
01947 073F                        0F            .byte	$F
01948 0740                        FF            .byte	$FF
01949                                           ! 492 },
01950                                           ! 493 {
01951                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01952 0741                        00            .byte	0
01953 0742                        00            .byte	0
01954 0743                        00            .byte	0
01955 0744                        00            .byte	0
01956 0745                        00            .byte	0
01957 0746                        00            .byte	0
01958 0747                        00            .byte	0
01959 0748                        00            .byte	0
01960                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01961 0749                        00            .byte	0
01962 074A                        00            .byte	0
01963 074B                        00            .byte	0
01964 074C                        00            .byte	0
01965 074D                        00            .byte	0
01966 074E                        00            .byte	0
01967 074F                        00            .byte	0
01968 0750                        00            .byte	0
01969                                           ! 496  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01970 0751                        00            .byte	0
01971 0752                        00            .byte	0
01972 0753                        00            .byte	0
01973 0754                        00            .byte	0
01974 0755                        00            .byte	0
01975 0756                        00            .byte	0
01976 0757                        00            .byte	0
01977 0758                        00            .byte	0
01978                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01979 0759                        00            .byte	0
01980 075A                        00            .byte	0
01981 075B                        00            .byte	0
01982 075C                        00            .byte	0
01983 075D                        00            .byte	0
01984 075E                        00            .byte	0
01985 075F                        00            .byte	0
01986 0760                        00            .byte	0
01987                                           ! 498  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01988 0761                        00            .byte	0
01989 0762                        00            .byte	0
01990 0763                        00            .byte	0
01991 0764                        00            .byte	0
01992 0765                        00            .byte	0
01993 0766                        00            .byte	0
01994 0767                        00            .byte	0
01995 0768                        00            .byte	0
01996                                           ! 499  0x00, 0x00, 0x00,
01997 0769                        00            .byte	0
01998 076A                        00            .byte	0
01999                                           ! 499  0x00, 0x00, 0x00, 0x00, 0x00,
02000 076B                        00            .byte	0
02001 076C                        00            .byte	0
02002 076D                        00            .byte	0
02003 076E                        00            .byte	0
02004 076F                        00            .byte	0
02005 0770                        00            .byte	0
02006                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02007 0771                        00            .byte	0
02008 0772                        00            .byte	0
02009 0773                        00            .byte	0
02010 0774                        00            .byte	0
02011 0775                        00            .byte	0
02012 0776                        00            .byte	0
02013 0777                        00            .byte	0
02014 0778                        00            .byte	0
02015                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02016 0779                        00            .byte	0
02017 077A                        00            .byte	0
02018 077B                        00            .byte	0
02019 077C                        00            .byte	0
02020 077D                        00            .byte	0
02021 077E                        00            .byte	0
02022 077F                        00            .byte	0
02023 0780                        00            .byte	0
02024                                           ! 502 },
02025                                           ! 503 {
02026                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02027 0781                        00            .byte	0
02028 0782                        00            .byte	0
02029 0783                        00            .byte	0
02030 0784                        00            .byte	0
02031 0785                        00            .byte	0
02032 0786                        00            .byte	0
02033 0787                        00            .byte	0
02034 0788                        00            .byte	0
02035                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02036 0789                        00            .byte	0
02037 078A                        00            .byte	0
02038 078B                        00            .byte	0
02039 078C                        00            .byte	0
02040 078D                        00            .byte	0
02041 078E                        00            .byte	0
02042 078F                        00            .byte	0
02043 0790                        00            .byte	0
02044                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02045 0791                        00            .byte	0
02046 0792                        00            .byte	0
02047 0793                        00            .byte	0
02048 0794                        00            .byte	0
02049 0795                        00            .byte	0
02050 0796                        00            .byte	0
02051 0797                        00            .byte	0
02052 0798                        00            .byte	0
02053                                           ! 507  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02054 0799                        00            .byte	0
02055 079A                        00            .byte	0
02056 079B                        00            .byte	0
02057 079C                        00            .byte	0
02058 079D                        00            .byte	0
02059 079E                        00            .byte	0
02060 079F                        00            .byte	0
02061 07A0                        00            .byte	0
02062                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02063 07A1                        00            .byte	0
02064 07A2                        00            .byte	0
02065 07A3                        00            .byte	0
02066 07A4                        00            .byte	0
02067 07A5                        00            .byte	0
02068 07A6                        00            .byte	0
02069 07A7                        00            .byte	0
02070 07A8                        00            .byte	0
02071                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02072 07A9                        00            .byte	0
02073 07AA                        00            .byte	0
02074 07AB                        00            .byte	0
02075 07AC                        00            .byte	0
02076 07AD                        00            .byte	0
02077 07AE                        00            .byte	0
02078 07AF                        00            .byte	0
02079 07B0                        00            .byte	0
02080                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02081 07B1                        00            .byte	0
02082 07B2                        00            .byte	0
02083 07B3                        00            .byte	0
02084 07B4                        00            .byte	0
02085 07B5                        00            .byte	0
02086 07B6                        00            .byte	0
02087 07B7                        00            .byte	0
02088 07B8                        00            .byte	0
02089                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02090 07B9                        00            .byte	0
02091 07BA                        00            .byte	0
02092 07BB                        00            .byte	0
02093 07BC                        00            .byte	0
02094 07BD                        00            .byte	0
02095 07BE                        00            .byte	0
02096 07BF                        00            .byte	0
02097 07C0                        00            .byte	0
02098                                           ! 512 },
02099                                           ! 513 {
02100                                           ! 514  120, 49, 16, 0x00, 0x08,
02101 07C1                        78            .byte	$78
02102 07C2                        31            .byte	$31
02103 07C3                        10            .byte	$10
02104 07C4                        00            .byte	0
02105 07C5                        08            .byte	8
02106                                           ! 515  0x08, 0x03, 0x00, 0x02,
02107 07C6                        08            .byte	8
02108 07C7                        03            .byte	3
02109 07C8                        00            .byte	0
02110 07C9                        02            .byte	2
02111                                           ! 516  0x67,
02112 07CA                        67            .byte	$67
02113                                           ! 517  0x87, 0x77, 0x78, 0x90, 0x2b, 0xa0, 0xd0, 0x7f,
02114 07CB                        87            .byte	$87
02115 07CC                        77            .byte	$77
02116 07CD                        78            .byte	$78
02117 07CE                        90            .byte	$90
02118 07CF                        2B            .byte	$2B
02119 07D0                        A0            .byte	$A0
02120 07D1                        D0            .byte	$D0
02121 07D2                        7F            .byte	$7F
02122                                           ! 518  0x00, 0x07, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02123 07D3                        00            .byte	0
02124 07D4                        07            .byte	7
02125 07D5                        0D            .byte	$D
02126 07D6                        0E            .byte	$E
02127 07D7                        00            .byte	0
02128 07D8                        00            .byte	0
02129 07D9                        00            .byte	0
02130 07DA                        00            .byte	0
02131                                           ! 519  0x9c, 0x8e, 0xd0, 0x3c , 0x1f, 0x96, 0xb9, 0xa3,
02132 07DB                        9C            .byte	$9C
02133 07DC                        8E            .byte	$8E
02134 07DD                        D0            .byte	$D0
02135 07DE                        3C            .byte	$3C
02136 07DF                        1F            .byte	$1F
02137 07E0                        96            .byte	$96
02138 07E1                        B9            .byte	$B9
02139 07E2                        A3            .byte	$A3
02140                                           ! 520  0xff,
02141 07E3                        FF            .byte	$FF
02142                                           ! 521  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02143 07E4                        00            .byte	0
02144 07E5                        01            .byte	1
02145 07E6                        02            .byte	2
02146 07E7                        03            .byte	3
02147 07E8                        04            .byte	4
02148 07E9                        05            .byte	5
02149 07EA                        14            .byte	$14
02150 07EB                        07            .byte	7
02151                                           ! 522  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02152 07EC                        38            .byte	$38
02153 07ED                        39            .byte	$39
02154 07EE                        3A            .byte	$3A
02155 07EF                        3B            .byte	$3B
02156 07F0                        3C            .byte	$3C
02157 07F1                        3D            .byte	$3D
02158 07F2                        3E            .byte	$3E
02159 07F3                        3F            .byte	$3F
02160                                           ! 523  0x0c, 0x00, 0x0f, 0x08,
02161 07F4                        0C            .byte	$C
02162 07F5                        00            .byte	0
02163 07F6                        0F            .byte	$F
02164 07F7                        08            .byte	8
02165                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02166 07F8                        00            .byte	0
02167 07F9                        00            .byte	0
02168 07FA                        00            .byte	0
02169 07FB                        00            .byte	0
02170 07FC                        00            .byte	0
02171 07FD                        10            .byte	$10
02172 07FE                        0E            .byte	$E
02173 07FF                        0F            .byte	$F
02174 0800                        FF            .byte	$FF
02175                                           ! 525 },
02176                                           ! 526 {
02177                                           ! 527     80, 24, 14, 0x00, 0x10,
02178 0801                        50            .byte	$50
02179 0802                        18            .byte	$18
02180 0803                        0E            .byte	$E
02181 0804                        00            .byte	0
02182 0805                        10            .byte	$10
02183                                           ! 528     0x00, 0x03, 0x00, 0x02,
02184 0806                        00            .byte	0
02185 0807                        03            .byte	3
02186 0808                        00            .byte	0
02187 0809                        02            .byte	2
02188                                           ! 529     0x67,
02189 080A                        67            .byte	$67
02190                                           ! 530     0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02191 080B                        5F            .byte	$5F
02192 080C                        4F            .byte	$4F
02193 080D                        50            .byte	$50
02194 080E                        82            .byte	$82
02195 080F                        55            .byte	$55
02196 0810                        81            .byte	$81
02197 0811                        BF            .byte	$BF
02198 0812                        1F            .byte	$1F
02199                                           ! 531     0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02200 0813                        00            .byte	0
02201 0814                        4F            .byte	$4F
02202 0815                        0D            .byte	$D
02203 0816                        0E            .byte	$E
02204 0817                        00            .byte	0
02205 0818                        00            .byte	0
02206 0819                        00            .byte	0
02207 081A                        00            .byte	0
02208                                           ! 532     0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02209 081B                        9C            .byte	$9C
02210 081C                        8E            .byte	$8E
02211 081D                        8F            .byte	$8F
02212 081E                        28            .byte	$28
02213 081F                        1F            .byte	$1F
02214 0820                        96            .byte	$96
02215 0821                        B9            .byte	$B9
02216 0822                        A3            .byte	$A3
02217                                           ! 533     0xff,
02218 0823                        FF            .byte	$FF
02219                                           ! 534     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02220 0824                        00            .byte	0
02221 0825                        01            .byte	1
02222 0826                        02            .byte	2
02223 0827                        03            .byte	3
02224 0828                        04            .byte	4
02225 0829                        05            .byte	5
02226 082A                        14            .byte	$14
02227 082B                        07            .byte	7
02228                                           ! 535     0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02229 082C                        38            .byte	$38
02230 082D                        39            .byte	$39
02231 082E                        3A            .byte	$3A
02232 082F                        3B            .byte	$3B
02233 0830                        3C            .byte	$3C
02234 0831                        3D            .byte	$3D
02235 0832                        3E            .byte	$3E
02236 0833                        3F            .byte	$3F
02237                                           ! 536     0x0c, 0x00, 0x0f, 0x08,
02238 0834                        0C            .byte	$C
02239 0835                        00            .byte	0
02240 0836                        0F            .byte	$F
02241 0837                        08            .byte	8
02242                                           ! 537     0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02243 0838                        00            .byte	0
02244 0839                        00            .byte	0
02245 083A                        00            .byte	0
02246 083B                        00            .byte	0
02247 083C                        00            .byte	0
02248 083D                        10            .byte	$10
02249 083E                        0E            .byte	$E
02250 083F                        0F            .byte	$F
02251 0840                        FF            .byte	$FF
02252                                           ! 538 },
02253                                           ! 539 {
02254                                           ! 540  40, 24, 16, 0x00, 0x08,
02255 0841                        28            .byte	$28
02256 0842                        18            .byte	$18
02257 0843                        10            .byte	$10
02258 0844                        00            .byte	0
02259 0845                        08            .byte	8
02260                                           ! 541  0x08, 0x03, 0x00, 0x02,
02261 0846                        08            .byte	8
02262 0847                        03            .byte	3
02263 0848                        00            .byte	0
02264 0849                        02            .byte	2
02265                                           ! 542  0x67,
02266 084A                        67            .byte	$67
02267                                           ! 543  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02268 084B                        2D            .byte	$2D
02269 084C                        27            .byte	$27
02270 084D                        28            .byte	$28
02271 084E                        90            .byte	$90
02272 084F                        2B            .byte	$2B
02273 0850                        A0            .byte	$A0
02274 0851                        BF            .byte	$BF
02275 0852                        1F            .byte	$1F
02276                                           ! 544  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02277 0853                        00            .byte	0
02278 0854                        4F            .byte	$4F
02279 0855                        0D            .byte	$D
02280 0856                        0E            .byte	$E
02281 0857                        00            .byte	0
02282 0858                        00            .byte	0
02283 0859                        00            .byte	0
02284 085A                        00            .byte	0
02285                                           ! 545  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02286 085B                        9C            .byte	$9C
02287 085C                        8E            .byte	$8E
02288 085D                        8F            .byte	$8F
02289 085E                        14            .byte	$14
02290 085F                        1F            .byte	$1F
02291 0860                        96            .byte	$96
02292 0861                        B9            .byte	$B9
02293 0862                        A3            .byte	$A3
02294                                           ! 546  0xff,
02295 0863                        FF            .byte	$FF
02296                                           ! 547  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02297 0864                        00            .byte	0
02298 0865                        01            .byte	1
02299 0866                        02            .byte	2
02300 0867                        03            .byte	3
02301 0868                        04            .byte	4
02302 0869                        05            .byte	5
02303 086A                        14            .byte	$14
02304 086B                        07            .byte	7
02305                                           ! 548  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02306 086C                        38            .byte	$38
02307 086D                        39            .byte	$39
02308 086E                        3A            .byte	$3A
02309 086F                        3B            .byte	$3B
02310 0870                        3C            .byte	$3C
02311 0871                        3D            .byte	$3D
02312 0872                        3E            .byte	$3E
02313 0873                        3F            .byte	$3F
02314                                           ! 549  0x0c, 0x00, 0x0f, 0x08,
02315 0874                        0C            .byte	$C
02316 0875                        00            .byte	0
02317 0876                        0F            .byte	$F
02318 0877                        08            .byte	8
02319                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02320 0878                        00            .byte	0
02321 0879                        00            .byte	0
02322 087A                        00            .byte	0
02323 087B                        00            .byte	0
02324 087C                        00            .byte	0
02325 087D                        10            .byte	$10
02326 087E                        0E            .byte	$E
02327 087F                        0F            .byte	$F
02328 0880                        FF            .byte	$FF
02329                                           ! 551 },
02330                                           ! 552 {
02331                                           ! 553  80, 24, 16, 0x00, 0x10,
02332 0881                        50            .byte	$50
02333 0882                        18            .byte	$18
02334 0883                        10            .byte	$10
02335 0884                        00            .byte	0
02336 0885                        10            .byte	$10
02337                                           ! 554  0x00, 0x03, 0x00, 0x02,
02338 0886                        00            .byte	0
02339 0887                        03            .byte	3
02340 0888                        00            .byte	0
02341 0889                        02            .byte	2
02342                                           ! 555  0x67,
02343 088A                        67            .byte	$67
02344                                           ! 556  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02345 088B                        5F            .byte	$5F
02346 088C                        4F            .byte	$4F
02347 088D                        50            .byte	$50
02348 088E                        82            .byte	$82
02349 088F                        55            .byte	$55
02350 0890                        81            .byte	$81
02351 0891                        BF            .byte	$BF
02352 0892                        1F            .byte	$1F
02353                                           ! 557  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02354 0893                        00            .byte	0
02355 0894                        4F            .byte	$4F
02356 0895                        0D            .byte	$D
02357 0896                        0E            .byte	$E
02358 0897                        00            .byte	0
02359 0898                        00            .byte	0
02360 0899                        00            .byte	0
02361 089A                        00            .byte	0
02362                                           ! 558  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02363 089B                        9C            .byte	$9C
02364 089C                        8E            .byte	$8E
02365 089D                        8F            .byte	$8F
02366 089E                        28            .byte	$28
02367 089F                        1F            .byte	$1F
02368 08A0                        96            .byte	$96
02369 08A1                        B9            .byte	$B9
02370 08A2                        A3            .byte	$A3
02371                                           ! 559  0xff,
02372 08A3                        FF            .byte	$FF
02373                                           ! 560  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02374 08A4                        00            .byte	0
02375 08A5                        01            .byte	1
02376 08A6                        02            .byte	2
02377 08A7                        03            .byte	3
02378 08A8                        04            .byte	4
02379 08A9                        05            .byte	5
02380 08AA                        14            .byte	$14
02381 08AB                        07            .byte	7
02382                                           ! 561  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3
02383 08AC                        38            .byte	$38
02384 08AD                        39            .byte	$39
02385 08AE                        3A            .byte	$3A
02386 08AF                        3B            .byte	$3B
02387 08B0                        3C            .byte	$3C
02388 08B1                        3D            .byte	$3D
02389                                           ! 561 e, 0x3f,
02390 08B2                        3E            .byte	$3E
02391 08B3                        3F            .byte	$3F
02392                                           ! 562  0x0c, 0x00, 0x0f, 0x08,
02393 08B4                        0C            .byte	$C
02394 08B5                        00            .byte	0
02395 08B6                        0F            .byte	$F
02396 08B7                        08            .byte	8
02397                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02398 08B8                        00            .byte	0
02399 08B9                        00            .byte	0
02400 08BA                        00            .byte	0
02401 08BB                        00            .byte	0
02402 08BC                        00            .byte	0
02403 08BD                        10            .byte	$10
02404 08BE                        0E            .byte	$E
02405 08BF                        0F            .byte	$F
02406 08C0                        FF            .byte	$FF
02407                                           ! 564 },
02408                                           ! 565 {
02409                                           ! 566  80, 24, 16, 0x00, 0x10,
02410 08C1                        50            .byte	$50
02411 08C2                        18            .byte	$18
02412 08C3                        10            .byte	$10
02413 08C4                        00            .byte	0
02414 08C5                        10            .byte	$10
02415                                           ! 567  0x00, 0x03, 0x00, 0x02,
02416 08C6                        00            .byte	0
02417 08C7                        03            .byte	3
02418 08C8                        00            .byte	0
02419 08C9                        02            .byte	2
02420                                           ! 568  0x66,
02421 08CA                        66            .byte	$66
02422                                           ! 569  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02423 08CB                        5F            .byte	$5F
02424 08CC                        4F            .byte	$4F
02425 08CD                        50            .byte	$50
02426 08CE                        82            .byte	$82
02427 08CF                        55            .byte	$55
02428 08D0                        81            .byte	$81
02429 08D1                        BF            .byte	$BF
02430 08D2                        1F            .byte	$1F
02431                                           ! 570  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02432 08D3                        00            .byte	0
02433 08D4                        4F            .byte	$4F
02434 08D5                        0D            .byte	$D
02435 08D6                        0E            .byte	$E
02436 08D7                        00            .byte	0
02437 08D8                        00            .byte	0
02438 08D9                        00            .byte	0
02439 08DA                        00            .byte	0
02440                                           ! 571  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02441 08DB                        9C            .byte	$9C
02442 08DC                        8E            .byte	$8E
02443 08DD                        8F            .byte	$8F
02444 08DE                        28            .byte	$28
02445 08DF                        0F            .byte	$F
02446 08E0                        96            .byte	$96
02447 08E1                        B9            .byte	$B9
02448 08E2                        A3            .byte	$A3
02449                                           ! 572  0xff,
02450 08E3                        FF            .byte	$FF
02451                                           ! 573  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02452 08E4                        00            .byte	0
02453 08E5                        08            .byte	8
02454 08E6                        08            .byte	8
02455 08E7                        08            .byte	8
02456 08E8                        08            .byte	8
02457 08E9                        08            .byte	8
02458 08EA                        08            .byte	8
02459 08EB                        08            .byte	8
02460                                           ! 574  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02461 08EC                        10            .byte	$10
02462 08ED                        18            .byte	$18
02463 08EE                        18            .byte	$18
02464 08EF                        18            .byte	$18
02465 08F0                        18            .byte	$18
02466 08F1                        18            .byte	$18
02467 08F2                        18            .byte	$18
02468 08F3                        18            .byte	$18
02469                                           ! 575  0x0e, 0x00, 0x0f, 0x08,
02470 08F4                        0E            .byte	$E
02471 08F5                        00            .byte	0
02472 08F6                        0F            .byte	$F
02473 08F7                        08            .byte	8
02474                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02475 08F8                        00            .byte	0
02476 08F9                        00            .byte	0
02477 08FA                        00            .byte	0
02478 08FB                        00            .byte	0
02479 08FC                        00            .byte	0
02480 08FD                        10            .byte	$10
02481 08FE                        0A            .byte	$A
02482 08FF                        0F            .byte	$F
02483 0900                        FF            .byte	$FF
02484                                           ! 577 },
02485                                           ! 578 {
02486                                           ! 579  80, 29, 16, 0x00, 0xa0,
02487 0901                        50            .byte	$50
02488 0902                        1D            .byte	$1D
02489 0903                        10            .byte	$10
02490 0904                        00            .byte	0
02491 0905                        A0            .byte	$A0
02492                                           ! 580  0x01, 0x0f, 0x00, 0x06,
02493 0906                        01            .byte	1
02494 0907                        0F            .byte	$F
02495 0908                        00            .byte	0
02496 0909                        06            .byte	6
02497                                           ! 581  0xe3,
02498 090A                        E3            .byte	$E3
02499                                           ! 582  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02500 090B                        5F            .byte	$5F
02501 090C                        4F            .byte	$4F
02502 090D                        50            .byte	$50
02503 090E                        82            .byte	$82
02504 090F                        54            .byte	$54
02505 0910                        80            .byte	$80
02506 0911                        0B            .byte	$B
02507 0912                        3E            .byte	$3E
02508                                           ! 583  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02509 0913                        00            .byte	0
02510 0914                        40            .byte	$40
02511 0915                        00            .byte	0
02512 0916                        00            .byte	0
02513 0917                        00            .byte	0
02514 0918                        00            .byte	0
02515 0919                        00            .byte	0
02516 091A                        00            .byte	0
02517                                           ! 584  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xc3,
02518 091B                        EA            .byte	$EA
02519 091C                        8C            .byte	$8C
02520 091D                        DF            .byte	$DF
02521 091E                        28            .byte	$28
02522 091F                        00            .byte	0
02523 0920                        E7            .byte	$E7
02524 0921                        04            .byte	4
02525 0922                        C3            .byte	$C3
02526                                           ! 585  0xff,
02527 0923                        FF            .byte	$FF
02528                                           ! 586  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02529 0924                        00            .byte	0
02530 0925                        3F            .byte	$3F
02531 0926                        00            .byte	0
02532 0927                        3F            .byte	$3F
02533 0928                        00            .byte	0
02534 0929                        3F            .byte	$3F
02535 092A                        00            .byte	0
02536 092B                        3F            .byte	$3F
02537                                           ! 587  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02538 092C                        00            .byte	0
02539 092D                        3F            .byte	$3F
02540 092E                        00            .byte	0
02541 092F                        3F            .byte	$3F
02542 0930                        00            .byte	0
02543 0931                        3F            .byte	$3F
02544 0932                        00            .byte	0
02545 0933                        3F            .byte	$3F
02546                                           ! 588  0x01, 0x00, 0x0f, 0x00,
02547 0934                        01            .byte	1
02548 0935                        00            .byte	0
02549 0936                        0F            .byte	$F
02550 0937                        00            .byte	0
02551                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02552 0938                        00            .byte	0
02553 0939                        00            .byte	0
02554 093A                        00            .byte	0
02555 093B                        00            .byte	0
02556 093C                        00            .byte	0
02557 093D                        00            .byte	0
02558 093E                        05            .byte	5
02559 093F                        0F            .byte	$F
02560 0940                        FF            .byte	$FF
02561                                           ! 590 },
02562                                           ! 591 {
02563                                           ! 592  80, 29, 16, 0x00, 0xa0,
02564 0941                        50            .byte	$50
02565 0942                        1D            .byte	$1D
02566 0943                        10            .byte	$10
02567 0944                        00            .byte	0
02568 0945                        A0            .byte	$A0
02569                                           ! 593  0x01, 0x0f, 0x00, 0x06,
02570 0946                        01            .byte	1
02571 0947                        0F            .byte	$F
02572 0948                        00            .byte	0
02573 0949                        06            .byte	6
02574                                           ! 594  0xe3,
02575 094A                        E3            .byte	$E3
02576                                           ! 595  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02577 094B                        5F            .byte	$5F
02578 094C                        4F            .byte	$4F
02579 094D                        50            .byte	$50
02580 094E                        82            .byte	$82
02581 094F                        54            .byte	$54
02582 0950                        80            .byte	$80
02583 0951                        0B            .byte	$B
02584 0952                        3E            .byte	$3E
02585                                           ! 596  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02586 0953                        00            .byte	0
02587 0954                        40            .byte	$40
02588 0955                        00            .byte	0
02589 0956                        00            .byte	0
02590 0957                        00            .byte	0
02591 0958                        00            .byte	0
02592 0959                        00            .byte	0
02593 095A                        00            .byte	0
02594                                           ! 597  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02595 095B                        EA            .byte	$EA
02596 095C                        8C            .byte	$8C
02597 095D                        DF            .byte	$DF
02598 095E                        28            .byte	$28
02599 095F                        00            .byte	0
02600 0960                        E7            .byte	$E7
02601 0961                        04            .byte	4
02602 0962                        E3            .byte	$E3
02603                                           ! 598  0xff,
02604 0963                        FF            .byte	$FF
02605                                           ! 599  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02606 0964                        00            .byte	0
02607 0965                        01            .byte	1
02608 0966                        02            .byte	2
02609 0967                        03            .byte	3
02610 0968                        04            .byte	4
02611 0969                        05            .byte	5
02612 096A                        14            .byte	$14
02613 096B                        07            .byte	7
02614                                           ! 600  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02615 096C                        38            .byte	$38
02616 096D                        39            .byte	$39
02617 096E                        3A            .byte	$3A
02618 096F                        3B            .byte	$3B
02619 0970                        3C            .byte	$3C
02620 0971                        3D            .byte	$3D
02621 0972                        3E            .byte	$3E
02622 0973                        3F            .byte	$3F
02623                                           ! 601  0x01, 0x00, 0x0f, 0x00,
02624 0974                        01            .byte	1
02625 0975                        00            .byte	0
02626 0976                        0F            .byte	$F
02627 0977                        00            .byte	0
02628                                           ! 602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02629 0978                        00            .byte	0
02630 0979                        00            .byte	0
02631 097A                        00            .byte	0
02632 097B                        00            .byte	0
02633 097C                        00            .byte	0
02634 097D                        00            .byte	0
02635 097E                        05            .byte	5
02636 097F                        0F            .byte	$F
02637 0980                        FF            .byte	$FF
02638                                           ! 603 },
02639                                           ! 604 {
02640                                           ! 605  40, 24, 8, 0x00, 0x20,
02641 0981                        28            .byte	$28
02642 0982                        18            .byte	$18
02643 0983                        08            .byte	8
02644 0984                        00            .byte	0
02645 0985                        20            .byte	$20
02646                                           ! 606  0x01, 0x0f, 0x00, 0x0e,
02647 0986                        01            .byte	1
02648 0987                        0F            .byte	$F
02649 0988                        00            .byte	0
02650 0989                        0E            .byte	$E
02651                                           ! 607  0x63,
02652 098A                        63            .byte	$63
02653                                           ! 608  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02654 098B                        5F            .byte	$5F
02655 098C                        4F            .byte	$4F
02656 098D                        50            .byte	$50
02657 098E                        82            .byte	$82
02658 098F                        54            .byte	$54
02659 0990                        80            .byte	$80
02660 0991                        BF            .byte	$BF
02661 0992                        1F            .byte	$1F
02662                                           ! 609  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02663 0993                        00            .byte	0
02664 0994                        41            .byte	$41
02665 0995                        00            .byte	0
02666 0996                        00            .byte	0
02667 0997                        00            .byte	0
02668 0998                        00            .byte	0
02669 0999                        00            .byte	0
02670 099A                        00            .byte	0
02671                                           ! 610  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02672 099B                        9C            .byte	$9C
02673 099C                        8E            .byte	$8E
02674 099D                        8F            .byte	$8F
02675 099E                        28            .byte	$28
02676 099F                        40            .byte	$40
02677 09A0                        96            .byte	$96
02678 09A1                        B9            .byte	$B9
02679 09A2                        A3            .byte	$A3
02680                                           ! 611  0xff,
02681 09A3                        FF            .byte	$FF
02682                                           ! 612  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02683 09A4                        00            .byte	0
02684 09A5                        01            .byte	1
02685 09A6                        02            .byte	2
02686 09A7                        03            .byte	3
02687 09A8                        04            .byte	4
02688 09A9                        05            .byte	5
02689 09AA                        06            .byte	6
02690 09AB                        07            .byte	7
02691                                           ! 613  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02692 09AC                        08            .byte	8
02693 09AD                        09            .byte	9
02694 09AE                        0A            .byte	$A
02695 09AF                        0B            .byte	$B
02696 09B0                        0C            .byte	$C
02697 09B1                        0D            .byte	$D
02698 09B2                        0E            .byte	$E
02699 09B3                        0F            .byte	$F
02700                                           ! 614  0x41, 0x00, 0x0f, 0x00,
02701 09B4                        41            .byte	$41
02702 09B5                        00            .byte	0
02703 09B6                        0F            .byte	$F
02704 09B7                        00            .byte	0
02705                                           ! 615  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02706 09B8                        00            .byte	0
02707 09B9                        00            .byte	0
02708 09BA                        00            .byte	0
02709 09BB                        00            .byte	0
02710 09BC                        00            .byte	0
02711 09BD                        40            .byte	$40
02712 09BE                        05            .byte	5
02713 09BF                        0F            .byte	$F
02714 09C0                        FF            .byte	$FF
02715                                           ! 616 },
02716                                           ! 617 {
02717                                           ! 618  100, 36, 16, 0x00, 0x00,
02718 09C1                        64            .byte	$64
02719 09C2                        24            .byte	$24
02720 09C3                        10            .byte	$10
02721 09C4                        00            .byte	0
02722 09C5                        00            .byte	0
02723                                           ! 619  0x01, 0x0f, 0x00, 0x06,
02724 09C6                        01            .byte	1
02725 09C7                        0F            .byte	$F
02726 09C8                        00            .byte	0
02727 09C9                        06            .byte	6
02728                                           ! 620  0xe3,
02729 09CA                        E3            .byte	$E3
02730                                           ! 621  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02731 09CB                        7F            .byte	$7F
02732 09CC                        63            .byte	$63
02733 09CD                        63            .byte	$63
02734 09CE                        83            .byte	$83
02735 09CF                        6B            .byte	$6B
02736 09D0                        1B            .byte	$1B
02737 09D1                        72            .byte	$72
02738 09D2                        F0            .byte	$F0
02739                                           ! 622  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02740 09D3                        00            .byte	0
02741 09D4                        60            .byte	$60
02742 09D5                        00            .byte	0
02743 09D6                        00            .byte	0
02744 09D7                        00            .byte	0
02745 09D8                        00            .byte	0
02746 09D9                        00            .byte	0
02747 09DA                        00            .byte	0
02748                                           ! 623  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02749 09DB                        59            .byte	$59
02750 09DC                        8D            .byte	$8D
02751 09DD                        57            .byte	$57
02752 09DE                        32            .byte	$32
02753 09DF                        00            .byte	0
02754 09E0                        57            .byte	$57
02755 09E1                        73            .byte	$73
02756 09E2                        E3            .byte	$E3
02757                                           ! 624  0xff,
02758 09E3                        FF            .byte	$FF
02759                                           ! 625  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02760 09E4                        00            .byte	0
02761 09E5                        01            .byte	1
02762 09E6                        02            .byte	2
02763 09E7                        03            .byte	3
02764 09E8                        04            .byte	4
02765 09E9                        05            .byte	5
02766 09EA                        14            .byte	$14
02767 09EB                        07            .byte	7
02768                                           ! 626  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02769 09EC                        38            .byte	$38
02770 09ED                        39            .byte	$39
02771 09EE                        3A            .byte	$3A
02772 09EF                        3B            .byte	$3B
02773 09F0                        3C            .byte	$3C
02774 09F1                        3D            .byte	$3D
02775 09F2                        3E            .byte	$3E
02776 09F3                        3F            .byte	$3F
02777                                           ! 627  0x01, 0x00, 0x0f, 0x00,
02778 09F4                        01            .byte	1
02779 09F5                        00            .byte	0
02780 09F6                        0F            .byte	$F
02781 09F7                        00            .byte	0
02782                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0
02783 09F8                        00            .byte	0
02784 09F9                        00            .byte	0
02785 09FA                        00            .byte	0
02786 09FB                        00            .byte	0
02787 09FC                        00            .byte	0
02788 09FD                        00            .byte	0
02789 09FE                        05            .byte	5
02790                                           ! 628 x0f, 0xff,
02791 09FF                        0F            .byte	$F
02792 0A00                        FF            .byte	$FF
02793                                           ! 629 }
02794                                           ! 630 };
02795                                           !BCC_EOS
02796                                           ! 631 static Bit8u palette0[63+1][3]=
02797                                           ! 632 {
02798                       00000A01            _palette0:
02799                                           ! 633   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02800 0A01                        00            .byte	0
02801 0A02                        00            .byte	0
02802 0A03                        00            .byte	0
02803 0A04                        00            .byte	0
02804 0A05                        00            .byte	0
02805 0A06                        00            .byte	0
02806 0A07                        00            .byte	0
02807 0A08                        00            .byte	0
02808 0A09                        00            .byte	0
02809 0A0A                        00            .byte	0
02810 0A0B                        00            .byte	0
02811 0A0C                        00            .byte	0
02812 0A0D                        00            .byte	0
02813 0A0E                        00            .byte	0
02814 0A0F                        00            .byte	0
02815 0A10                        00            .byte	0
02816 0A11                        00            .byte	0
02817 0A12                        00            .byte	0
02818 0A13                        00            .byte	0
02819 0A14                        00            .byte	0
02820 0A15                        00            .byte	0
02821 0A16                        00            .byte	0
02822 0A17                        00            .byte	0
02823 0A18                        00            .byte	0
02824                                           ! 634   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02825 0A19                        2A            .byte	$2A
02826 0A1A                        2A            .byte	$2A
02827 0A1B                        2A            .byte	$2A
02828 0A1C                        2A            .byte	$2A
02829 0A1D                        2A            .byte	$2A
02830 0A1E                        2A            .byte	$2A
02831 0A1F                        2A            .byte	$2A
02832 0A20                        2A            .byte	$2A
02833 0A21                        2A            .byte	$2A
02834 0A22                        2A            .byte	$2A
02835 0A23                        2A            .byte	$2A
02836 0A24                        2A            .byte	$2A
02837 0A25                        2A            .byte	$2A
02838 0A26                        2A            .byte	$2A
02839 0A27                        2A            .byte	$2A
02840 0A28                        2A            .byte	$2A
02841 0A29                        2A            .byte	$2A
02842 0A2A                        2A            .byte	$2A
02843 0A2B                        2A            .byte	$2A
02844 0A2C                        2A            .byte	$2A
02845 0A2D                        2A            .byte	$2A
02846 0A2E                        2A            .byte	$2A
02847 0A2F                        2A            .byte	$2A
02848 0A30                        2A            .byte	$2A
02849                                           ! 635   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02850 0A31                        2A            .byte	$2A
02851 0A32                        2A            .byte	$2A
02852 0A33                        2A            .byte	$2A
02853 0A34                        2A            .byte	$2A
02854 0A35                        2A            .byte	$2A
02855 0A36                        2A            .byte	$2A
02856 0A37                        2A            .byte	$2A
02857 0A38                        2A            .byte	$2A
02858 0A39                        2A            .byte	$2A
02859 0A3A                        2A            .byte	$2A
02860 0A3B                        2A            .byte	$2A
02861 0A3C                        2A            .byte	$2A
02862 0A3D                        2A            .byte	$2A
02863 0A3E                        2A            .byte	$2A
02864 0A3F                        2A            .byte	$2A
02865 0A40                        2A            .byte	$2A
02866 0A41                        2A            .byte	$2A
02867 0A42                        2A            .byte	$2A
02868 0A43                        2A            .byte	$2A
02869 0A44                        2A            .byte	$2A
02870 0A45                        2A            .byte	$2A
02871 0A46                        2A            .byte	$2A
02872 0A47                        2A            .byte	$2A
02873 0A48                        2A            .byte	$2A
02874                                           ! 636   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02875 0A49                        3F            .byte	$3F
02876 0A4A                        3F            .byte	$3F
02877 0A4B                        3F            .byte	$3F
02878 0A4C                        3F            .byte	$3F
02879 0A4D                        3F            .byte	$3F
02880 0A4E                        3F            .byte	$3F
02881 0A4F                        3F            .byte	$3F
02882 0A50                        3F            .byte	$3F
02883 0A51                        3F            .byte	$3F
02884 0A52                        3F            .byte	$3F
02885 0A53                        3F            .byte	$3F
02886 0A54                        3F            .byte	$3F
02887 0A55                        3F            .byte	$3F
02888 0A56                        3F            .byte	$3F
02889 0A57                        3F            .byte	$3F
02890 0A58                        3F            .byte	$3F
02891 0A59                        3F            .byte	$3F
02892 0A5A                        3F            .byte	$3F
02893 0A5B                        3F            .byte	$3F
02894 0A5C                        3F            .byte	$3F
02895 0A5D                        3F            .byte	$3F
02896 0A5E                        3F            .byte	$3F
02897 0A5F                        3F            .byte	$3F
02898 0A60                        3F            .byte	$3F
02899                                           ! 637   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02900 0A61                        00            .byte	0
02901 0A62                        00            .byte	0
02902 0A63                        00            .byte	0
02903 0A64                        00            .byte	0
02904 0A65                        00            .byte	0
02905 0A66                        00            .byte	0
02906 0A67                        00            .byte	0
02907 0A68                        00            .byte	0
02908 0A69                        00            .byte	0
02909 0A6A                        00            .byte	0
02910 0A6B                        00            .byte	0
02911 0A6C                        00            .byte	0
02912 0A6D                        00            .byte	0
02913 0A6E                        00            .byte	0
02914 0A6F                        00            .byte	0
02915 0A70                        00            .byte	0
02916 0A71                        00            .byte	0
02917 0A72                        00            .byte	0
02918 0A73                        00            .byte	0
02919 0A74                        00            .byte	0
02920 0A75                        00            .byte	0
02921 0A76                        00            .byte	0
02922 0A77                        00            .byte	0
02923 0A78                        00            .byte	0
02924                                           ! 638   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02925 0A79                        2A            .byte	$2A
02926 0A7A                        2A            .byte	$2A
02927 0A7B                        2A            .byte	$2A
02928 0A7C                        2A            .byte	$2A
02929 0A7D                        2A            .byte	$2A
02930 0A7E                        2A            .byte	$2A
02931 0A7F                        2A            .byte	$2A
02932 0A80                        2A            .byte	$2A
02933 0A81                        2A            .byte	$2A
02934 0A82                        2A            .byte	$2A
02935 0A83                        2A            .byte	$2A
02936 0A84                        2A            .byte	$2A
02937 0A85                        2A            .byte	$2A
02938 0A86                        2A            .byte	$2A
02939 0A87                        2A            .byte	$2A
02940 0A88                        2A            .byte	$2A
02941 0A89                        2A            .byte	$2A
02942 0A8A                        2A            .byte	$2A
02943 0A8B                        2A            .byte	$2A
02944 0A8C                        2A            .byte	$2A
02945 0A8D                        2A            .byte	$2A
02946 0A8E                        2A            .byte	$2A
02947 0A8F                        2A            .byte	$2A
02948 0A90                        2A            .byte	$2A
02949                                           ! 639   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02950 0A91                        2A            .byte	$2A
02951 0A92                        2A            .byte	$2A
02952 0A93                        2A            .byte	$2A
02953 0A94                        2A            .byte	$2A
02954 0A95                        2A            .byte	$2A
02955 0A96                        2A            .byte	$2A
02956 0A97                        2A            .byte	$2A
02957 0A98                        2A            .byte	$2A
02958 0A99                        2A            .byte	$2A
02959 0A9A                        2A            .byte	$2A
02960 0A9B                        2A            .byte	$2A
02961 0A9C                        2A            .byte	$2A
02962 0A9D                        2A            .byte	$2A
02963 0A9E                        2A            .byte	$2A
02964 0A9F                        2A            .byte	$2A
02965 0AA0                        2A            .byte	$2A
02966 0AA1                        2A            .byte	$2A
02967 0AA2                        2A            .byte	$2A
02968 0AA3                        2A            .byte	$2A
02969 0AA4                        2A            .byte	$2A
02970 0AA5                        2A            .byte	$2A
02971 0AA6                        2A            .byte	$2A
02972 0AA7                        2A            .byte	$2A
02973 0AA8                        2A            .byte	$2A
02974                                           ! 640   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02975 0AA9                        3F            .byte	$3F
02976 0AAA                        3F            .byte	$3F
02977 0AAB                        3F            .byte	$3F
02978 0AAC                        3F            .byte	$3F
02979 0AAD                        3F            .byte	$3F
02980 0AAE                        3F            .byte	$3F
02981 0AAF                        3F            .byte	$3F
02982 0AB0                        3F            .byte	$3F
02983 0AB1                        3F            .byte	$3F
02984 0AB2                        3F            .byte	$3F
02985 0AB3                        3F            .byte	$3F
02986 0AB4                        3F            .byte	$3F
02987 0AB5                        3F            .byte	$3F
02988 0AB6                        3F            .byte	$3F
02989 0AB7                        3F            .byte	$3F
02990 0AB8                        3F            .byte	$3F
02991 0AB9                        3F            .byte	$3F
02992 0ABA                        3F            .byte	$3F
02993 0ABB                        3F            .byte	$3F
02994 0ABC                        3F            .byte	$3F
02995 0ABD                        3F            .byte	$3F
02996 0ABE                        3F            .byte	$3F
02997 0ABF                        3F            .byte	$3F
02998                                           ! 641 };
02999 0AC0                        3F            .byte	$3F
03000                                           !BCC_EOS
03001                                           ! 642 static Bit8u palette1[63+1][3]=
03002                                           ! 643 {
03003                       00000AC1            _palette1:
03004                                           ! 644   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03005 0AC1                        00            .byte	0
03006 0AC2                        00            .byte	0
03007 0AC3                        00            .byte	0
03008 0AC4                        00            .byte	0
03009 0AC5                        00            .byte	0
03010 0AC6                        2A            .byte	$2A
03011 0AC7                        00            .byte	0
03012 0AC8                        2A            .byte	$2A
03013 0AC9                        00            .byte	0
03014 0ACA                        00            .byte	0
03015 0ACB                        2A            .byte	$2A
03016 0ACC                        2A            .byte	$2A
03017 0ACD                        2A            .byte	$2A
03018 0ACE                        00            .byte	0
03019 0ACF                        00            .byte	0
03020 0AD0                        2A            .byte	$2A
03021 0AD1                        00            .byte	0
03022 0AD2                        2A            .byte	$2A
03023 0AD3                        2A            .byte	$2A
03024 0AD4                        15            .byte	$15
03025 0AD5                        00            .byte	0
03026 0AD6                        2A            .byte	$2A
03027 0AD7                        2A            .byte	$2A
03028 0AD8                        2A            .byte	$2A
03029                                           ! 645   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03030 0AD9                        00            .byte	0
03031 0ADA                        00            .byte	0
03032 0ADB                        00            .byte	0
03033 0ADC                        00            .byte	0
03034 0ADD                        00            .byte	0
03035 0ADE                        2A            .byte	$2A
03036 0ADF                        00            .byte	0
03037 0AE0                        2A            .byte	$2A
03038 0AE1                        00            .byte	0
03039 0AE2                        00            .byte	0
03040 0AE3                        2A            .byte	$2A
03041 0AE4                        2A            .byte	$2A
03042 0AE5                        2A            .byte	$2A
03043 0AE6                        00            .byte	0
03044 0AE7                        00            .byte	0
03045 0AE8                        2A            .byte	$2A
03046 0AE9                        00            .byte	0
03047 0AEA                        2A            .byte	$2A
03048 0AEB                        2A            .byte	$2A
03049 0AEC                        15            .byte	$15
03050 0AED                        00            .byte	0
03051 0AEE                        2A            .byte	$2A
03052 0AEF                        2A            .byte	$2A
03053 0AF0                        2A            .byte	$2A
03054                                           ! 646   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03055 0AF1                        15            .byte	$15
03056 0AF2                        15            .byte	$15
03057 0AF3                        15            .byte	$15
03058 0AF4                        15            .byte	$15
03059 0AF5                        15            .byte	$15
03060 0AF6                        3F            .byte	$3F
03061 0AF7                        15            .byte	$15
03062 0AF8                        3F            .byte	$3F
03063 0AF9                        15            .byte	$15
03064 0AFA                        15            .byte	$15
03065 0AFB                        3F            .byte	$3F
03066 0AFC                        3F            .byte	$3F
03067 0AFD                        3F            .byte	$3F
03068 0AFE                        15            .byte	$15
03069 0AFF                        15            .byte	$15
03070 0B00                        3F            .byte	$3F
03071 0B01                        15            .byte	$15
03072 0B02                        3F            .byte	$3F
03073 0B03                        3F            .byte	$3F
03074 0B04                        3F            .byte	$3F
03075 0B05                        15            .byte	$15
03076 0B06                        3F            .byte	$3F
03077 0B07                        3F            .byte	$3F
03078 0B08                        3F            .byte	$3F
03079                                           ! 647   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03080 0B09                        15            .byte	$15
03081 0B0A                        15            .byte	$15
03082 0B0B                        15            .byte	$15
03083 0B0C                        15            .byte	$15
03084 0B0D                        15            .byte	$15
03085 0B0E                        3F            .byte	$3F
03086 0B0F                        15            .byte	$15
03087 0B10                        3F            .byte	$3F
03088 0B11                        15            .byte	$15
03089 0B12                        15            .byte	$15
03090 0B13                        3F            .byte	$3F
03091 0B14                        3F            .byte	$3F
03092 0B15                        3F            .byte	$3F
03093 0B16                        15            .byte	$15
03094 0B17                        15            .byte	$15
03095 0B18                        3F            .byte	$3F
03096 0B19                        15            .byte	$15
03097 0B1A                        3F            .byte	$3F
03098 0B1B                        3F            .byte	$3F
03099 0B1C                        3F            .byte	$3F
03100 0B1D                        15            .byte	$15
03101 0B1E                        3F            .byte	$3F
03102 0B1F                        3F            .byte	$3F
03103 0B20                        3F            .byte	$3F
03104                                           ! 648   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03105 0B21                        00            .byte	0
03106 0B22                        00            .byte	0
03107 0B23                        00            .byte	0
03108 0B24                        00            .byte	0
03109 0B25                        00            .byte	0
03110 0B26                        2A            .byte	$2A
03111 0B27                        00            .byte	0
03112 0B28                        2A            .byte	$2A
03113 0B29                        00            .byte	0
03114 0B2A                        00            .byte	0
03115 0B2B                        2A            .byte	$2A
03116 0B2C                        2A            .byte	$2A
03117 0B2D                        2A            .byte	$2A
03118 0B2E                        00            .byte	0
03119 0B2F                        00            .byte	0
03120 0B30                        2A            .byte	$2A
03121 0B31                        00            .byte	0
03122 0B32                        2A            .byte	$2A
03123 0B33                        2A            .byte	$2A
03124 0B34                        15            .byte	$15
03125 0B35                        00            .byte	0
03126 0B36                        2A            .byte	$2A
03127 0B37                        2A            .byte	$2A
03128 0B38                        2A            .byte	$2A
03129                                           ! 649   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03130 0B39                        00            .byte	0
03131 0B3A                        00            .byte	0
03132 0B3B                        00            .byte	0
03133 0B3C                        00            .byte	0
03134 0B3D                        00            .byte	0
03135 0B3E                        2A            .byte	$2A
03136 0B3F                        00            .byte	0
03137 0B40                        2A            .byte	$2A
03138 0B41                        00            .byte	0
03139 0B42                        00            .byte	0
03140 0B43                        2A            .byte	$2A
03141 0B44                        2A            .byte	$2A
03142 0B45                        2A            .byte	$2A
03143 0B46                        00            .byte	0
03144 0B47                        00            .byte	0
03145 0B48                        2A            .byte	$2A
03146 0B49                        00            .byte	0
03147 0B4A                        2A            .byte	$2A
03148 0B4B                        2A            .byte	$2A
03149 0B4C                        15            .byte	$15
03150 0B4D                        00            .byte	0
03151 0B4E                        2A            .byte	$2A
03152 0B4F                        2A            .byte	$2A
03153 0B50                        2A            .byte	$2A
03154                                           ! 650   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03155 0B51                        15            .byte	$15
03156 0B52                        15            .byte	$15
03157 0B53                        15            .byte	$15
03158 0B54                        15            .byte	$15
03159 0B55                        15            .byte	$15
03160 0B56                        3F            .byte	$3F
03161 0B57                        15            .byte	$15
03162 0B58                        3F            .byte	$3F
03163 0B59                        15            .byte	$15
03164 0B5A                        15            .byte	$15
03165 0B5B                        3F            .byte	$3F
03166 0B5C                        3F            .byte	$3F
03167 0B5D                        3F            .byte	$3F
03168 0B5E                        15            .byte	$15
03169 0B5F                        15            .byte	$15
03170 0B60                        3F            .byte	$3F
03171 0B61                        15            .byte	$15
03172 0B62                        3F            .byte	$3F
03173 0B63                        3F            .byte	$3F
03174 0B64                        3F            .byte	$3F
03175 0B65                        15            .byte	$15
03176 0B66                        3F            .byte	$3F
03177 0B67                        3F            .byte	$3F
03178 0B68                        3F            .byte	$3F
03179                                           ! 651   0x15,0x15,
03180 0B69                        15            .byte	$15
03181                                           ! 651 0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03182 0B6A                        15            .byte	$15
03183 0B6B                        15            .byte	$15
03184 0B6C                        15            .byte	$15
03185 0B6D                        15            .byte	$15
03186 0B6E                        3F            .byte	$3F
03187 0B6F                        15            .byte	$15
03188 0B70                        3F            .byte	$3F
03189 0B71                        15            .byte	$15
03190 0B72                        15            .byte	$15
03191 0B73                        3F            .byte	$3F
03192 0B74                        3F            .byte	$3F
03193 0B75                        3F            .byte	$3F
03194 0B76                        15            .byte	$15
03195 0B77                        15            .byte	$15
03196 0B78                        3F            .byte	$3F
03197 0B79                        15            .byte	$15
03198 0B7A                        3F            .byte	$3F
03199 0B7B                        3F            .byte	$3F
03200 0B7C                        3F            .byte	$3F
03201 0B7D                        15            .byte	$15
03202 0B7E                        3F            .byte	$3F
03203 0B7F                        3F            .byte	$3F
03204                                           ! 652 };
03205 0B80                        3F            .byte	$3F
03206                                           !BCC_EOS
03207                                           ! 653 static Bit8u palette2[63+1][3]=
03208                                           ! 654 {
03209                       00000B81            _palette2:
03210                                           ! 655   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03211 0B81                        00            .byte	0
03212 0B82                        00            .byte	0
03213 0B83                        00            .byte	0
03214 0B84                        00            .byte	0
03215 0B85                        00            .byte	0
03216 0B86                        2A            .byte	$2A
03217 0B87                        00            .byte	0
03218 0B88                        2A            .byte	$2A
03219 0B89                        00            .byte	0
03220 0B8A                        00            .byte	0
03221 0B8B                        2A            .byte	$2A
03222 0B8C                        2A            .byte	$2A
03223 0B8D                        2A            .byte	$2A
03224 0B8E                        00            .byte	0
03225 0B8F                        00            .byte	0
03226 0B90                        2A            .byte	$2A
03227 0B91                        00            .byte	0
03228 0B92                        2A            .byte	$2A
03229 0B93                        2A            .byte	$2A
03230 0B94                        2A            .byte	$2A
03231 0B95                        00            .byte	0
03232 0B96                        2A            .byte	$2A
03233 0B97                        2A            .byte	$2A
03234 0B98                        2A            .byte	$2A
03235                                           ! 656   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03236 0B99                        00            .byte	0
03237 0B9A                        00            .byte	0
03238 0B9B                        15            .byte	$15
03239 0B9C                        00            .byte	0
03240 0B9D                        00            .byte	0
03241 0B9E                        3F            .byte	$3F
03242 0B9F                        00            .byte	0
03243 0BA0                        2A            .byte	$2A
03244 0BA1                        15            .byte	$15
03245 0BA2                        00            .byte	0
03246 0BA3                        2A            .byte	$2A
03247 0BA4                        3F            .byte	$3F
03248 0BA5                        2A            .byte	$2A
03249 0BA6                        00            .byte	0
03250 0BA7                        15            .byte	$15
03251 0BA8                        2A            .byte	$2A
03252 0BA9                        00            .byte	0
03253 0BAA                        3F            .byte	$3F
03254 0BAB                        2A            .byte	$2A
03255 0BAC                        2A            .byte	$2A
03256 0BAD                        15            .byte	$15
03257 0BAE                        2A            .byte	$2A
03258 0BAF                        2A            .byte	$2A
03259 0BB0                        3F            .byte	$3F
03260                                           ! 657   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03261 0BB1                        00            .byte	0
03262 0BB2                        15            .byte	$15
03263 0BB3                        00            .byte	0
03264 0BB4                        00            .byte	0
03265 0BB5                        15            .byte	$15
03266 0BB6                        2A            .byte	$2A
03267 0BB7                        00            .byte	0
03268 0BB8                        3F            .byte	$3F
03269 0BB9                        00            .byte	0
03270 0BBA                        00            .byte	0
03271 0BBB                        3F            .byte	$3F
03272 0BBC                        2A            .byte	$2A
03273 0BBD                        2A            .byte	$2A
03274 0BBE                        15            .byte	$15
03275 0BBF                        00            .byte	0
03276 0BC0                        2A            .byte	$2A
03277 0BC1                        15            .byte	$15
03278 0BC2                        2A            .byte	$2A
03279 0BC3                        2A            .byte	$2A
03280 0BC4                        3F            .byte	$3F
03281 0BC5                        00            .byte	0
03282 0BC6                        2A            .byte	$2A
03283 0BC7                        3F            .byte	$3F
03284 0BC8                        2A            .byte	$2A
03285                                           ! 658   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03286 0BC9                        00            .byte	0
03287 0BCA                        15            .byte	$15
03288 0BCB                        15            .byte	$15
03289 0BCC                        00            .byte	0
03290 0BCD                        15            .byte	$15
03291 0BCE                        3F            .byte	$3F
03292 0BCF                        00            .byte	0
03293 0BD0                        3F            .byte	$3F
03294 0BD1                        15            .byte	$15
03295 0BD2                        00            .byte	0
03296 0BD3                        3F            .byte	$3F
03297 0BD4                        3F            .byte	$3F
03298 0BD5                        2A            .byte	$2A
03299 0BD6                        15            .byte	$15
03300 0BD7                        15            .byte	$15
03301 0BD8                        2A            .byte	$2A
03302 0BD9                        15            .byte	$15
03303 0BDA                        3F            .byte	$3F
03304 0BDB                        2A            .byte	$2A
03305 0BDC                        3F            .byte	$3F
03306 0BDD                        15            .byte	$15
03307 0BDE                        2A            .byte	$2A
03308 0BDF                        3F            .byte	$3F
03309 0BE0                        3F            .byte	$3F
03310                                           ! 659   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03311 0BE1                        15            .byte	$15
03312 0BE2                        00            .byte	0
03313 0BE3                        00            .byte	0
03314 0BE4                        15            .byte	$15
03315 0BE5                        00            .byte	0
03316 0BE6                        2A            .byte	$2A
03317 0BE7                        15            .byte	$15
03318 0BE8                        2A            .byte	$2A
03319 0BE9                        00            .byte	0
03320 0BEA                        15            .byte	$15
03321 0BEB                        2A            .byte	$2A
03322 0BEC                        2A            .byte	$2A
03323 0BED                        3F            .byte	$3F
03324 0BEE                        00            .byte	0
03325 0BEF                        00            .byte	0
03326 0BF0                        3F            .byte	$3F
03327 0BF1                        00            .byte	0
03328 0BF2                        2A            .byte	$2A
03329 0BF3                        3F            .byte	$3F
03330 0BF4                        2A            .byte	$2A
03331 0BF5                        00            .byte	0
03332 0BF6                        3F            .byte	$3F
03333 0BF7                        2A            .byte	$2A
03334 0BF8                        2A            .byte	$2A
03335                                           ! 660   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03336 0BF9                        15            .byte	$15
03337 0BFA                        00            .byte	0
03338 0BFB                        15            .byte	$15
03339 0BFC                        15            .byte	$15
03340 0BFD                        00            .byte	0
03341 0BFE                        3F            .byte	$3F
03342 0BFF                        15            .byte	$15
03343 0C00                        2A            .byte	$2A
03344 0C01                        15            .byte	$15
03345 0C02                        15            .byte	$15
03346 0C03                        2A            .byte	$2A
03347 0C04                        3F            .byte	$3F
03348 0C05                        3F            .byte	$3F
03349 0C06                        00            .byte	0
03350 0C07                        15            .byte	$15
03351 0C08                        3F            .byte	$3F
03352 0C09                        00            .byte	0
03353 0C0A                        3F            .byte	$3F
03354 0C0B                        3F            .byte	$3F
03355 0C0C                        2A            .byte	$2A
03356 0C0D                        15            .byte	$15
03357 0C0E                        3F            .byte	$3F
03358 0C0F                        2A            .byte	$2A
03359 0C10                        3F            .byte	$3F
03360                                           ! 661   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03361 0C11                        15            .byte	$15
03362 0C12                        15            .byte	$15
03363 0C13                        00            .byte	0
03364 0C14                        15            .byte	$15
03365 0C15                        15            .byte	$15
03366 0C16                        2A            .byte	$2A
03367 0C17                        15            .byte	$15
03368 0C18                        3F            .byte	$3F
03369 0C19                        00            .byte	0
03370 0C1A                        15            .byte	$15
03371 0C1B                        3F            .byte	$3F
03372 0C1C                        2A            .byte	$2A
03373 0C1D                        3F            .byte	$3F
03374 0C1E                        15            .byte	$15
03375 0C1F                        00            .byte	0
03376 0C20                        3F            .byte	$3F
03377 0C21                        15            .byte	$15
03378 0C22                        2A            .byte	$2A
03379 0C23                        3F            .byte	$3F
03380 0C24                        3F            .byte	$3F
03381 0C25                        00            .byte	0
03382 0C26                        3F            .byte	$3F
03383 0C27                        3F            .byte	$3F
03384 0C28                        2A            .byte	$2A
03385                                           ! 662   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03386 0C29                        15            .byte	$15
03387 0C2A                        15            .byte	$15
03388 0C2B                        15            .byte	$15
03389 0C2C                        15            .byte	$15
03390 0C2D                        15            .byte	$15
03391 0C2E                        3F            .byte	$3F
03392 0C2F                        15            .byte	$15
03393 0C30                        3F            .byte	$3F
03394 0C31                        15            .byte	$15
03395 0C32                        15            .byte	$15
03396 0C33                        3F            .byte	$3F
03397 0C34                        3F            .byte	$3F
03398 0C35                        3F            .byte	$3F
03399 0C36                        15            .byte	$15
03400 0C37                        15            .byte	$15
03401 0C38                        3F            .byte	$3F
03402 0C39                        15            .byte	$15
03403 0C3A                        3F            .byte	$3F
03404 0C3B                        3F            .byte	$3F
03405 0C3C                        3F            .byte	$3F
03406 0C3D                        15            .byte	$15
03407 0C3E                        3F            .byte	$3F
03408 0C3F                        3F            .byte	$3F
03409                                           ! 663 };
03410 0C40                        3F            .byte	$3F
03411                                           !BCC_EOS
03412                                           ! 664 static Bit8u palette3[256][3]=
03413                                           ! 665 {
03414                       00000C41            _palette3:
03415                                           ! 666   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03416 0C41                        00            .byte	0
03417 0C42                        00            .byte	0
03418 0C43                        00            .byte	0
03419 0C44                        00            .byte	0
03420 0C45                        00            .byte	0
03421 0C46                        2A            .byte	$2A
03422 0C47                        00            .byte	0
03423 0C48                        2A            .byte	$2A
03424 0C49                        00            .byte	0
03425 0C4A                        00            .byte	0
03426 0C4B                        2A            .byte	$2A
03427 0C4C                        2A            .byte	$2A
03428 0C4D                        2A            .byte	$2A
03429 0C4E                        00            .byte	0
03430 0C4F                        00            .byte	0
03431 0C50                        2A            .byte	$2A
03432 0C51                        00            .byte	0
03433 0C52                        2A            .byte	$2A
03434 0C53                        2A            .byte	$2A
03435 0C54                        15            .byte	$15
03436 0C55                        00            .byte	0
03437 0C56                        2A            .byte	$2A
03438 0C57                        2A            .byte	$2A
03439 0C58                        2A            .byte	$2A
03440                                           ! 667   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03441 0C59                        15            .byte	$15
03442 0C5A                        15            .byte	$15
03443 0C5B                        15            .byte	$15
03444 0C5C                        15            .byte	$15
03445 0C5D                        15            .byte	$15
03446 0C5E                        3F            .byte	$3F
03447 0C5F                        15            .byte	$15
03448 0C60                        3F            .byte	$3F
03449 0C61                        15            .byte	$15
03450 0C62                        15            .byte	$15
03451 0C63                        3F            .byte	$3F
03452 0C64                        3F            .byte	$3F
03453 0C65                        3F            .byte	$3F
03454 0C66                        15            .byte	$15
03455 0C67                        15            .byte	$15
03456 0C68                        3F            .byte	$3F
03457 0C69                        15            .byte	$15
03458 0C6A                        3F            .byte	$3F
03459 0C6B                        3F            .byte	$3F
03460 0C6C                        3F            .byte	$3F
03461 0C6D                        15            .byte	$15
03462 0C6E                        3F            .byte	$3F
03463 0C6F                        3F            .byte	$3F
03464 0C70                        3F            .byte	$3F
03465                                           ! 668   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03466 0C71                        00            .byte	0
03467 0C72                        00            .byte	0
03468 0C73                        00            .byte	0
03469 0C74                        05            .byte	5
03470 0C75                        05            .byte	5
03471 0C76                        05            .byte	5
03472 0C77                        08            .byte	8
03473 0C78                        08            .byte	8
03474 0C79                        08            .byte	8
03475 0C7A                        0B            .byte	$B
03476 0C7B                        0B            .byte	$B
03477 0C7C                        0B            .byte	$B
03478 0C7D                        0E            .byte	$E
03479 0C7E                        0E            .byte	$E
03480 0C7F                        0E            .byte	$E
03481 0C80                        11            .byte	$11
03482 0C81                        11            .byte	$11
03483 0C82                        11            .byte	$11
03484 0C83                        14            .byte	$14
03485 0C84                        14            .byte	$14
03486 0C85                        14            .byte	$14
03487 0C86                        18            .byte	$18
03488 0C87                        18            .byte	$18
03489 0C88                        18            .byte	$18
03490                                           ! 669   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03491 0C89                        1C            .byte	$1C
03492 0C8A                        1C            .byte	$1C
03493 0C8B                        1C            .byte	$1C
03494 0C8C                        20            .byte	$20
03495 0C8D                        20            .byte	$20
03496 0C8E                        20            .byte	$20
03497 0C8F                        24            .byte	$24
03498 0C90                        24            .byte	$24
03499 0C91                        24            .byte	$24
03500 0C92                        28            .byte	$28
03501 0C93                        28            .byte	$28
03502 0C94                        28            .byte	$28
03503 0C95                        2D            .byte	$2D
03504 0C96                        2D            .byte	$2D
03505 0C97                        2D            .byte	$2D
03506 0C98                        32            .byte	$32
03507 0C99                        32            .byte	$32
03508 0C9A                        32            .byte	$32
03509 0C9B                        38            .byte	$38
03510 0C9C                        38            .byte	$38
03511 0C9D                        38            .byte	$38
03512 0C9E                        3F            .byte	$3F
03513 0C9F                        3F            .byte	$3F
03514 0CA0                        3F            .byte	$3F
03515                                           ! 670   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03516 0CA1                        00            .byte	0
03517 0CA2                        00            .byte	0
03518 0CA3                        3F            .byte	$3F
03519 0CA4                        10            .byte	$10
03520 0CA5                        00            .byte	0
03521 0CA6                        3F            .byte	$3F
03522 0CA7                        1F            .byte	$1F
03523 0CA8                        00            .byte	0
03524 0CA9                        3F            .byte	$3F
03525 0CAA                        2F            .byte	$2F
03526 0CAB                        00            .byte	0
03527 0CAC                        3F            .byte	$3F
03528 0CAD                        3F            .byte	$3F
03529 0CAE                        00            .byte	0
03530 0CAF                        3F            .byte	$3F
03531 0CB0                        3F            .byte	$3F
03532 0CB1                        00            .byte	0
03533 0CB2                        2F            .byte	$2F
03534 0CB3                        3F            .byte	$3F
03535 0CB4                        00            .byte	0
03536 0CB5                        1F            .byte	$1F
03537 0CB6                        3F            .byte	$3F
03538 0CB7                        00            .byte	0
03539 0CB8                        10            .byte	$10
03540                                           ! 671   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03541 0CB9                        3F            .byte	$3F
03542 0CBA                        00            .byte	0
03543 0CBB                        00            .byte	0
03544 0CBC                        3F            .byte	$3F
03545 0CBD                        10            .byte	$10
03546 0CBE                        00            .byte	0
03547 0CBF                        3F            .byte	$3F
03548 0CC0                        1F            .byte	$1F
03549 0CC1                        00            .byte	0
03550 0CC2                        3F            .byte	$3F
03551 0CC3                        2F            .byte	$2F
03552 0CC4                        00            .byte	0
03553 0CC5                        3F            .byte	$3F
03554 0CC6                        3F            .byte	$3F
03555 0CC7                        00            .byte	0
03556 0CC8                        2F            .byte	$2F
03557 0CC9                        3F            .byte	$3F
03558 0CCA                        00            .byte	0
03559 0CCB                        1F            .byte	$1F
03560 0CCC                        3F            .byte	$3F
03561 0CCD                        00            .byte	0
03562 0CCE                        10            .byte	$10
03563 0CCF                        3F            .byte	$3F
03564 0CD0                        00            .byte	0
03565                                           ! 672   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,
03566 0CD1                        00            .byte	0
03567 0CD2                        3F            .byte	$3F
03568 0CD3                        00            .byte	0
03569 0CD4                        00            .byte	0
03570 0CD5                        3F            .byte	$3F
03571 0CD6                        10            .byte	$10
03572                                           ! 672 0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03573 0CD7                        00            .byte	0
03574 0CD8                        3F            .byte	$3F
03575 0CD9                        1F            .byte	$1F
03576 0CDA                        00            .byte	0
03577 0CDB                        3F            .byte	$3F
03578 0CDC                        2F            .byte	$2F
03579 0CDD                        00            .byte	0
03580 0CDE                        3F            .byte	$3F
03581 0CDF                        3F            .byte	$3F
03582 0CE0                        00            .byte	0
03583 0CE1                        2F            .byte	$2F
03584 0CE2                        3F            .byte	$3F
03585 0CE3                        00            .byte	0
03586 0CE4                        1F            .byte	$1F
03587 0CE5                        3F            .byte	$3F
03588 0CE6                        00            .byte	0
03589 0CE7                        10            .byte	$10
03590 0CE8                        3F            .byte	$3F
03591                                           ! 673   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03592 0CE9                        1F            .byte	$1F
03593 0CEA                        1F            .byte	$1F
03594 0CEB                        3F            .byte	$3F
03595 0CEC                        27            .byte	$27
03596 0CED                        1F            .byte	$1F
03597 0CEE                        3F            .byte	$3F
03598 0CEF                        2F            .byte	$2F
03599 0CF0                        1F            .byte	$1F
03600 0CF1                        3F            .byte	$3F
03601 0CF2                        37            .byte	$37
03602 0CF3                        1F            .byte	$1F
03603 0CF4                        3F            .byte	$3F
03604 0CF5                        3F            .byte	$3F
03605 0CF6                        1F            .byte	$1F
03606 0CF7                        3F            .byte	$3F
03607 0CF8                        3F            .byte	$3F
03608 0CF9                        1F            .byte	$1F
03609 0CFA                        37            .byte	$37
03610 0CFB                        3F            .byte	$3F
03611 0CFC                        1F            .byte	$1F
03612 0CFD                        2F            .byte	$2F
03613 0CFE                        3F            .byte	$3F
03614 0CFF                        1F            .byte	$1F
03615 0D00                        27            .byte	$27
03616                                           ! 674   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03617 0D01                        3F            .byte	$3F
03618 0D02                        1F            .byte	$1F
03619 0D03                        1F            .byte	$1F
03620 0D04                        3F            .byte	$3F
03621 0D05                        27            .byte	$27
03622 0D06                        1F            .byte	$1F
03623 0D07                        3F            .byte	$3F
03624 0D08                        2F            .byte	$2F
03625 0D09                        1F            .byte	$1F
03626 0D0A                        3F            .byte	$3F
03627 0D0B                        37            .byte	$37
03628 0D0C                        1F            .byte	$1F
03629 0D0D                        3F            .byte	$3F
03630 0D0E                        3F            .byte	$3F
03631 0D0F                        1F            .byte	$1F
03632 0D10                        37            .byte	$37
03633 0D11                        3F            .byte	$3F
03634 0D12                        1F            .byte	$1F
03635 0D13                        2F            .byte	$2F
03636 0D14                        3F            .byte	$3F
03637 0D15                        1F            .byte	$1F
03638 0D16                        27            .byte	$27
03639 0D17                        3F            .byte	$3F
03640 0D18                        1F            .byte	$1F
03641                                           ! 675   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03642 0D19                        1F            .byte	$1F
03643 0D1A                        3F            .byte	$3F
03644 0D1B                        1F            .byte	$1F
03645 0D1C                        1F            .byte	$1F
03646 0D1D                        3F            .byte	$3F
03647 0D1E                        27            .byte	$27
03648 0D1F                        1F            .byte	$1F
03649 0D20                        3F            .byte	$3F
03650 0D21                        2F            .byte	$2F
03651 0D22                        1F            .byte	$1F
03652 0D23                        3F            .byte	$3F
03653 0D24                        37            .byte	$37
03654 0D25                        1F            .byte	$1F
03655 0D26                        3F            .byte	$3F
03656 0D27                        3F            .byte	$3F
03657 0D28                        1F            .byte	$1F
03658 0D29                        37            .byte	$37
03659 0D2A                        3F            .byte	$3F
03660 0D2B                        1F            .byte	$1F
03661 0D2C                        2F            .byte	$2F
03662 0D2D                        3F            .byte	$3F
03663 0D2E                        1F            .byte	$1F
03664 0D2F                        27            .byte	$27
03665 0D30                        3F            .byte	$3F
03666                                           ! 676   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03667 0D31                        2D            .byte	$2D
03668 0D32                        2D            .byte	$2D
03669 0D33                        3F            .byte	$3F
03670 0D34                        31            .byte	$31
03671 0D35                        2D            .byte	$2D
03672 0D36                        3F            .byte	$3F
03673 0D37                        36            .byte	$36
03674 0D38                        2D            .byte	$2D
03675 0D39                        3F            .byte	$3F
03676 0D3A                        3A            .byte	$3A
03677 0D3B                        2D            .byte	$2D
03678 0D3C                        3F            .byte	$3F
03679 0D3D                        3F            .byte	$3F
03680 0D3E                        2D            .byte	$2D
03681 0D3F                        3F            .byte	$3F
03682 0D40                        3F            .byte	$3F
03683 0D41                        2D            .byte	$2D
03684 0D42                        3A            .byte	$3A
03685 0D43                        3F            .byte	$3F
03686 0D44                        2D            .byte	$2D
03687 0D45                        36            .byte	$36
03688 0D46                        3F            .byte	$3F
03689 0D47                        2D            .byte	$2D
03690 0D48                        31            .byte	$31
03691                                           ! 677   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03692 0D49                        3F            .byte	$3F
03693 0D4A                        2D            .byte	$2D
03694 0D4B                        2D            .byte	$2D
03695 0D4C                        3F            .byte	$3F
03696 0D4D                        31            .byte	$31
03697 0D4E                        2D            .byte	$2D
03698 0D4F                        3F            .byte	$3F
03699 0D50                        36            .byte	$36
03700 0D51                        2D            .byte	$2D
03701 0D52                        3F            .byte	$3F
03702 0D53                        3A            .byte	$3A
03703 0D54                        2D            .byte	$2D
03704 0D55                        3F            .byte	$3F
03705 0D56                        3F            .byte	$3F
03706 0D57                        2D            .byte	$2D
03707 0D58                        3A            .byte	$3A
03708 0D59                        3F            .byte	$3F
03709 0D5A                        2D            .byte	$2D
03710 0D5B                        36            .byte	$36
03711 0D5C                        3F            .byte	$3F
03712 0D5D                        2D            .byte	$2D
03713 0D5E                        31            .byte	$31
03714 0D5F                        3F            .byte	$3F
03715 0D60                        2D            .byte	$2D
03716                                           ! 678   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03717 0D61                        2D            .byte	$2D
03718 0D62                        3F            .byte	$3F
03719 0D63                        2D            .byte	$2D
03720 0D64                        2D            .byte	$2D
03721 0D65                        3F            .byte	$3F
03722 0D66                        31            .byte	$31
03723 0D67                        2D            .byte	$2D
03724 0D68                        3F            .byte	$3F
03725 0D69                        36            .byte	$36
03726 0D6A                        2D            .byte	$2D
03727 0D6B                        3F            .byte	$3F
03728 0D6C                        3A            .byte	$3A
03729 0D6D                        2D            .byte	$2D
03730 0D6E                        3F            .byte	$3F
03731 0D6F                        3F            .byte	$3F
03732 0D70                        2D            .byte	$2D
03733 0D71                        3A            .byte	$3A
03734 0D72                        3F            .byte	$3F
03735 0D73                        2D            .byte	$2D
03736 0D74                        36            .byte	$36
03737 0D75                        3F            .byte	$3F
03738 0D76                        2D            .byte	$2D
03739 0D77                        31            .byte	$31
03740 0D78                        3F            .byte	$3F
03741                                           ! 679   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03742 0D79                        00            .byte	0
03743 0D7A                        00            .byte	0
03744 0D7B                        1C            .byte	$1C
03745 0D7C                        07            .byte	7
03746 0D7D                        00            .byte	0
03747 0D7E                        1C            .byte	$1C
03748 0D7F                        0E            .byte	$E
03749 0D80                        00            .byte	0
03750 0D81                        1C            .byte	$1C
03751 0D82                        15            .byte	$15
03752 0D83                        00            .byte	0
03753 0D84                        1C            .byte	$1C
03754 0D85                        1C            .byte	$1C
03755 0D86                        00            .byte	0
03756 0D87                        1C            .byte	$1C
03757 0D88                        1C            .byte	$1C
03758 0D89                        00            .byte	0
03759 0D8A                        15            .byte	$15
03760 0D8B                        1C            .byte	$1C
03761 0D8C                        00            .byte	0
03762 0D8D                        0E            .byte	$E
03763 0D8E                        1C            .byte	$1C
03764 0D8F                        00            .byte	0
03765 0D90                        07            .byte	7
03766                                           ! 680   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03767 0D91                        1C            .byte	$1C
03768 0D92                        00            .byte	0
03769 0D93                        00            .byte	0
03770 0D94                        1C            .byte	$1C
03771 0D95                        07            .byte	7
03772 0D96                        00            .byte	0
03773 0D97                        1C            .byte	$1C
03774 0D98                        0E            .byte	$E
03775 0D99                        00            .byte	0
03776 0D9A                        1C            .byte	$1C
03777 0D9B                        15            .byte	$15
03778 0D9C                        00            .byte	0
03779 0D9D                        1C            .byte	$1C
03780 0D9E                        1C            .byte	$1C
03781 0D9F                        00            .byte	0
03782 0DA0                        15            .byte	$15
03783 0DA1                        1C            .byte	$1C
03784 0DA2                        00            .byte	0
03785 0DA3                        0E            .byte	$E
03786 0DA4                        1C            .byte	$1C
03787 0DA5                        00            .byte	0
03788 0DA6                        07            .byte	7
03789 0DA7                        1C            .byte	$1C
03790 0DA8                        00            .byte	0
03791                                           ! 681   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03792 0DA9                        00            .byte	0
03793 0DAA                        1C            .byte	$1C
03794 0DAB                        00            .byte	0
03795 0DAC                        00            .byte	0
03796 0DAD                        1C            .byte	$1C
03797 0DAE                        07            .byte	7
03798 0DAF                        00            .byte	0
03799 0DB0                        1C            .byte	$1C
03800 0DB1                        0E            .byte	$E
03801 0DB2                        00            .byte	0
03802 0DB3                        1C            .byte	$1C
03803 0DB4                        15            .byte	$15
03804 0DB5                        00            .byte	0
03805 0DB6                        1C            .byte	$1C
03806 0DB7                        1C            .byte	$1C
03807 0DB8                        00            .byte	0
03808 0DB9                        15            .byte	$15
03809 0DBA                        1C            .byte	$1C
03810 0DBB                        00            .byte	0
03811 0DBC                        0E            .byte	$E
03812 0DBD                        1C            .byte	$1C
03813 0DBE                        00            .byte	0
03814 0DBF                        07            .byte	7
03815 0DC0                        1C            .byte	$1C
03816                                           ! 682   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03817 0DC1                        0E            .byte	$E
03818 0DC2                        0E            .byte	$E
03819 0DC3                        1C            .byte	$1C
03820 0DC4                        11            .byte	$11
03821 0DC5                        0E            .byte	$E
03822 0DC6                        1C            .byte	$1C
03823 0DC7                        15            .byte	$15
03824 0DC8                        0E            .byte	$E
03825 0DC9                        1C            .byte	$1C
03826 0DCA                        18            .byte	$18
03827 0DCB                        0E            .byte	$E
03828 0DCC                        1C            .byte	$1C
03829 0DCD                        1C            .byte	$1C
03830 0DCE                        0E            .byte	$E
03831 0DCF                        1C            .byte	$1C
03832 0DD0                        1C            .byte	$1C
03833 0DD1                        0E            .byte	$E
03834 0DD2                        18            .byte	$18
03835 0DD3                        1C            .byte	$1C
03836 0DD4                        0E            .byte	$E
03837 0DD5                        15            .byte	$15
03838 0DD6                        1C            .byte	$1C
03839 0DD7                        0E            .byte	$E
03840 0DD8                        11            .byte	$11
03841                                           ! 683   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03842 0DD9                        1C            .byte	$1C
03843 0DDA                        0E            .byte	$E
03844 0DDB                        0E            .byte	$E
03845 0DDC                        1C            .byte	$1C
03846 0DDD                        11            .byte	$11
03847 0DDE                        0E            .byte	$E
03848 0DDF                        1C            .byte	$1C
03849 0DE0                        15            .byte	$15
03850 0DE1                        0E            .byte	$E
03851 0DE2                        1C            .byte	$1C
03852 0DE3                        18            .byte	$18
03853 0DE4                        0E            .byte	$E
03854 0DE5                        1C            .byte	$1C
03855 0DE6                        1C            .byte	$1C
03856 0DE7                        0E            .byte	$E
03857 0DE8                        18            .byte	$18
03858 0DE9                        1C            .byte	$1C
03859 0DEA                        0E            .byte	$E
03860 0DEB                        15            .byte	$15
03861 0DEC                        1C            .byte	$1C
03862 0DED                        0E            .byte	$E
03863 0DEE                        11            .byte	$11
03864 0DEF                        1C            .byte	$1C
03865 0DF0                        0E            .byte	$E
03866                                           ! 684   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03867 0DF1                        0E            .byte	$E
03868 0DF2                        1C            .byte	$1C
03869 0DF3                        0E            .byte	$E
03870 0DF4                        0E            .byte	$E
03871 0DF5                        1C            .byte	$1C
03872 0DF6                        11            .byte	$11
03873 0DF7                        0E            .byte	$E
03874 0DF8                        1C            .byte	$1C
03875 0DF9                        15            .byte	$15
03876 0DFA                        0E            .byte	$E
03877 0DFB                        1C            .byte	$1C
03878 0DFC                        18            .byte	$18
03879 0DFD                        0E            .byte	$E
03880 0DFE                        1C            .byte	$1C
03881 0DFF                        1C            .byte	$1C
03882 0E00                        0E            .byte	$E
03883 0E01                        18            .byte	$18
03884 0E02                        1C            .byte	$1C
03885 0E03                        0E            .byte	$E
03886 0E04                        15            .byte	$15
03887 0E05                        1C            .byte	$1C
03888 0E06                        0E            .byte	$E
03889 0E07                        11            .byte	$11
03890 0E08                        1C            .byte	$1C
03891                                           ! 685   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03892 0E09                        14            .byte	$14
03893 0E0A                        14            .byte	$14
03894 0E0B                        1C            .byte	$1C
03895 0E0C                        16            .byte	$16
03896 0E0D                        14            .byte	$14
03897 0E0E                        1C            .byte	$1C
03898 0E0F                        18            .byte	$18
03899 0E10                        14            .byte	$14
03900 0E11                        1C            .byte	$1C
03901 0E12                        1A            .byte	$1A
03902 0E13                        14            .byte	$14
03903 0E14                        1C            .byte	$1C
03904 0E15                        1C            .byte	$1C
03905 0E16                        14            .byte	$14
03906 0E17                        1C            .byte	$1C
03907 0E18                        1C            .byte	$1C
03908 0E19                        14            .byte	$14
03909 0E1A                        1A            .byte	$1A
03910 0E1B                        1C            .byte	$1C
03911 0E1C                        14            .byte	$14
03912 0E1D                        18            .byte	$18
03913 0E1E                        1C            .byte	$1C
03914 0E1F                        14            .byte	$14
03915 0E20                        16            .byte	$16
03916                                           ! 686   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03917 0E21                        1C            .byte	$1C
03918 0E22                        14            .byte	$14
03919 0E23                        14            .byte	$14
03920 0E24                        1C            .byte	$1C
03921 0E25                        16            .byte	$16
03922 0E26                        14            .byte	$14
03923 0E27                        1C            .byte	$1C
03924 0E28                        18            .byte	$18
03925 0E29                        14            .byte	$14
03926 0E2A                        1C            .byte	$1C
03927 0E2B                        1A            .byte	$1A
03928 0E2C                        14            .byte	$14
03929 0E2D                        1C            .byte	$1C
03930 0E2E                        1C            .byte	$1C
03931 0E2F                        14            .byte	$14
03932 0E30                        1A            .byte	$1A
03933 0E31                        1C            .byte	$1C
03934 0E32                        14            .byte	$14
03935 0E33                        18            .byte	$18
03936 0E34                        1C            .byte	$1C
03937 0E35                        14            .byte	$14
03938 0E36                        16            .byte	$16
03939 0E37                        1C            .byte	$1C
03940 0E38                        14            .byte	$14
03941                                           ! 687   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03942 0E39                        14            .byte	$14
03943 0E3A                        1C            .byte	$1C
03944 0E3B                        14            .byte	$14
03945 0E3C                        14            .byte	$14
03946 0E3D                        1C            .byte	$1C
03947 0E3E                        16            .byte	$16
03948 0E3F                        14            .byte	$14
03949 0E40                        1C            .byte	$1C
03950 0E41                        18            .byte	$18
03951 0E42                        14            .byte	$14
03952 0E43                        1C            .byte	$1C
03953 0E44                        1A            .byte	$1A
03954 0E45                        14            .byte	$14
03955 0E46                        1C            .byte	$1C
03956 0E47                        1C            .byte	$1C
03957 0E48                        14            .byte	$14
03958 0E49                        1A            .byte	$1A
03959 0E4A                        1C            .byte	$1C
03960 0E4B                        14            .byte	$14
03961 0E4C                        18            .byte	$18
03962 0E4D                        1C            .byte	$1C
03963 0E4E                        14            .byte	$14
03964 0E4F                        16            .byte	$16
03965 0E50                        1C            .byte	$1C
03966                                           ! 688   0x00,
03967                                           ! 688 0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03968 0E51                        00            .byte	0
03969 0E52                        00            .byte	0
03970 0E53                        10            .byte	$10
03971 0E54                        04            .byte	4
03972 0E55                        00            .byte	0
03973 0E56                        10            .byte	$10
03974 0E57                        08            .byte	8
03975 0E58                        00            .byte	0
03976 0E59                        10            .byte	$10
03977 0E5A                        0C            .byte	$C
03978 0E5B                        00            .byte	0
03979 0E5C                        10            .byte	$10
03980 0E5D                        10            .byte	$10
03981 0E5E                        00            .byte	0
03982 0E5F                        10            .byte	$10
03983 0E60                        10            .byte	$10
03984 0E61                        00            .byte	0
03985 0E62                        0C            .byte	$C
03986 0E63                        10            .byte	$10
03987 0E64                        00            .byte	0
03988 0E65                        08            .byte	8
03989 0E66                        10            .byte	$10
03990 0E67                        00            .byte	0
03991 0E68                        04            .byte	4
03992                                           ! 689   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03993 0E69                        10            .byte	$10
03994 0E6A                        00            .byte	0
03995 0E6B                        00            .byte	0
03996 0E6C                        10            .byte	$10
03997 0E6D                        04            .byte	4
03998 0E6E                        00            .byte	0
03999 0E6F                        10            .byte	$10
04000 0E70                        08            .byte	8
04001 0E71                        00            .byte	0
04002 0E72                        10            .byte	$10
04003 0E73                        0C            .byte	$C
04004 0E74                        00            .byte	0
04005 0E75                        10            .byte	$10
04006 0E76                        10            .byte	$10
04007 0E77                        00            .byte	0
04008 0E78                        0C            .byte	$C
04009 0E79                        10            .byte	$10
04010 0E7A                        00            .byte	0
04011 0E7B                        08            .byte	8
04012 0E7C                        10            .byte	$10
04013 0E7D                        00            .byte	0
04014 0E7E                        04            .byte	4
04015 0E7F                        10            .byte	$10
04016 0E80                        00            .byte	0
04017                                           ! 690   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04018 0E81                        00            .byte	0
04019 0E82                        10            .byte	$10
04020 0E83                        00            .byte	0
04021 0E84                        00            .byte	0
04022 0E85                        10            .byte	$10
04023 0E86                        04            .byte	4
04024 0E87                        00            .byte	0
04025 0E88                        10            .byte	$10
04026 0E89                        08            .byte	8
04027 0E8A                        00            .byte	0
04028 0E8B                        10            .byte	$10
04029 0E8C                        0C            .byte	$C
04030 0E8D                        00            .byte	0
04031 0E8E                        10            .byte	$10
04032 0E8F                        10            .byte	$10
04033 0E90                        00            .byte	0
04034 0E91                        0C            .byte	$C
04035 0E92                        10            .byte	$10
04036 0E93                        00            .byte	0
04037 0E94                        08            .byte	8
04038 0E95                        10            .byte	$10
04039 0E96                        00            .byte	0
04040 0E97                        04            .byte	4
04041 0E98                        10            .byte	$10
04042                                           ! 691   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04043 0E99                        08            .byte	8
04044 0E9A                        08            .byte	8
04045 0E9B                        10            .byte	$10
04046 0E9C                        0A            .byte	$A
04047 0E9D                        08            .byte	8
04048 0E9E                        10            .byte	$10
04049 0E9F                        0C            .byte	$C
04050 0EA0                        08            .byte	8
04051 0EA1                        10            .byte	$10
04052 0EA2                        0E            .byte	$E
04053 0EA3                        08            .byte	8
04054 0EA4                        10            .byte	$10
04055 0EA5                        10            .byte	$10
04056 0EA6                        08            .byte	8
04057 0EA7                        10            .byte	$10
04058 0EA8                        10            .byte	$10
04059 0EA9                        08            .byte	8
04060 0EAA                        0E            .byte	$E
04061 0EAB                        10            .byte	$10
04062 0EAC                        08            .byte	8
04063 0EAD                        0C            .byte	$C
04064 0EAE                        10            .byte	$10
04065 0EAF                        08            .byte	8
04066 0EB0                        0A            .byte	$A
04067                                           ! 692   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04068 0EB1                        10            .byte	$10
04069 0EB2                        08            .byte	8
04070 0EB3                        08            .byte	8
04071 0EB4                        10            .byte	$10
04072 0EB5                        0A            .byte	$A
04073 0EB6                        08            .byte	8
04074 0EB7                        10            .byte	$10
04075 0EB8                        0C            .byte	$C
04076 0EB9                        08            .byte	8
04077 0EBA                        10            .byte	$10
04078 0EBB                        0E            .byte	$E
04079 0EBC                        08            .byte	8
04080 0EBD                        10            .byte	$10
04081 0EBE                        10            .byte	$10
04082 0EBF                        08            .byte	8
04083 0EC0                        0E            .byte	$E
04084 0EC1                        10            .byte	$10
04085 0EC2                        08            .byte	8
04086 0EC3                        0C            .byte	$C
04087 0EC4                        10            .byte	$10
04088 0EC5                        08            .byte	8
04089 0EC6                        0A            .byte	$A
04090 0EC7                        10            .byte	$10
04091 0EC8                        08            .byte	8
04092                                           ! 693   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04093 0EC9                        08            .byte	8
04094 0ECA                        10            .byte	$10
04095 0ECB                        08            .byte	8
04096 0ECC                        08            .byte	8
04097 0ECD                        10            .byte	$10
04098 0ECE                        0A            .byte	$A
04099 0ECF                        08            .byte	8
04100 0ED0                        10            .byte	$10
04101 0ED1                        0C            .byte	$C
04102 0ED2                        08            .byte	8
04103 0ED3                        10            .byte	$10
04104 0ED4                        0E            .byte	$E
04105 0ED5                        08            .byte	8
04106 0ED6                        10            .byte	$10
04107 0ED7                        10            .byte	$10
04108 0ED8                        08            .byte	8
04109 0ED9                        0E            .byte	$E
04110 0EDA                        10            .byte	$10
04111 0EDB                        08            .byte	8
04112 0EDC                        0C            .byte	$C
04113 0EDD                        10            .byte	$10
04114 0EDE                        08            .byte	8
04115 0EDF                        0A            .byte	$A
04116 0EE0                        10            .byte	$10
04117                                           ! 694   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04118 0EE1                        0B            .byte	$B
04119 0EE2                        0B            .byte	$B
04120 0EE3                        10            .byte	$10
04121 0EE4                        0C            .byte	$C
04122 0EE5                        0B            .byte	$B
04123 0EE6                        10            .byte	$10
04124 0EE7                        0D            .byte	$D
04125 0EE8                        0B            .byte	$B
04126 0EE9                        10            .byte	$10
04127 0EEA                        0F            .byte	$F
04128 0EEB                        0B            .byte	$B
04129 0EEC                        10            .byte	$10
04130 0EED                        10            .byte	$10
04131 0EEE                        0B            .byte	$B
04132 0EEF                        10            .byte	$10
04133 0EF0                        10            .byte	$10
04134 0EF1                        0B            .byte	$B
04135 0EF2                        0F            .byte	$F
04136 0EF3                        10            .byte	$10
04137 0EF4                        0B            .byte	$B
04138 0EF5                        0D            .byte	$D
04139 0EF6                        10            .byte	$10
04140 0EF7                        0B            .byte	$B
04141 0EF8                        0C            .byte	$C
04142                                           ! 695   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04143 0EF9                        10            .byte	$10
04144 0EFA                        0B            .byte	$B
04145 0EFB                        0B            .byte	$B
04146 0EFC                        10            .byte	$10
04147 0EFD                        0C            .byte	$C
04148 0EFE                        0B            .byte	$B
04149 0EFF                        10            .byte	$10
04150 0F00                        0D            .byte	$D
04151 0F01                        0B            .byte	$B
04152 0F02                        10            .byte	$10
04153 0F03                        0F            .byte	$F
04154 0F04                        0B            .byte	$B
04155 0F05                        10            .byte	$10
04156 0F06                        10            .byte	$10
04157 0F07                        0B            .byte	$B
04158 0F08                        0F            .byte	$F
04159 0F09                        10            .byte	$10
04160 0F0A                        0B            .byte	$B
04161 0F0B                        0D            .byte	$D
04162 0F0C                        10            .byte	$10
04163 0F0D                        0B            .byte	$B
04164 0F0E                        0C            .byte	$C
04165 0F0F                        10            .byte	$10
04166 0F10                        0B            .byte	$B
04167                                           ! 696   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04168 0F11                        0B            .byte	$B
04169 0F12                        10            .byte	$10
04170 0F13                        0B            .byte	$B
04171 0F14                        0B            .byte	$B
04172 0F15                        10            .byte	$10
04173 0F16                        0C            .byte	$C
04174 0F17                        0B            .byte	$B
04175 0F18                        10            .byte	$10
04176 0F19                        0D            .byte	$D
04177 0F1A                        0B            .byte	$B
04178 0F1B                        10            .byte	$10
04179 0F1C                        0F            .byte	$F
04180 0F1D                        0B            .byte	$B
04181 0F1E                        10            .byte	$10
04182 0F1F                        10            .byte	$10
04183 0F20                        0B            .byte	$B
04184 0F21                        0F            .byte	$F
04185 0F22                        10            .byte	$10
04186 0F23                        0B            .byte	$B
04187 0F24                        0D            .byte	$D
04188 0F25                        10            .byte	$10
04189 0F26                        0B            .byte	$B
04190 0F27                        0C            .byte	$C
04191 0F28                        10            .byte	$10
04192                                           ! 697   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04193 0F29                        00            .byte	0
04194 0F2A                        00            .byte	0
04195 0F2B                        00            .byte	0
04196 0F2C                        00            .byte	0
04197 0F2D                        00            .byte	0
04198 0F2E                        00            .byte	0
04199 0F2F                        00            .byte	0
04200 0F30                        00            .byte	0
04201 0F31                        00            .byte	0
04202 0F32                        00            .byte	0
04203 0F33                        00            .byte	0
04204 0F34                        00            .byte	0
04205 0F35                        00            .byte	0
04206 0F36                        00            .byte	0
04207 0F37                        00            .byte	0
04208 0F38                        00            .byte	0
04209 0F39                        00            .byte	0
04210 0F3A                        00            .byte	0
04211 0F3B                        00            .byte	0
04212 0F3C                        00            .byte	0
04213 0F3D                        00            .byte	0
04214 0F3E                        00            .byte	0
04215 0F3F                        00            .byte	0
04216                                           ! 698 };
04217 0F40                        00            .byte	0
04218                                           !BCC_EOS
04219                                           ! 699 static Bit8u static_functionality[0x10]=
04220                                           ! 700 {
04221                       00000F41            _static_functionality:
04222                                           ! 701          0xff,
04223 0F41                        FF            .byte	$FF
04224                                           ! 702          0xe0,
04225 0F42                        E0            .byte	$E0
04226                                           ! 703          0x0f,
04227 0F43                        0F            .byte	$F
04228                                           ! 704          0x00, 0x00, 0x00, 0x00,
04229 0F44                        00            .byte	0
04230 0F45                        00            .byte	0
04231 0F46                        00            .byte	0
04232 0F47                        00            .byte	0
04233                                           ! 705          0x07,
04234 0F48                        07            .byte	7
04235                                           ! 706          0x02,
04236 0F49                        02            .byte	2
04237                                           ! 707          0x08,
04238 0F4A                        08            .byte	8
04239                                           ! 708          0xe7,
04240 0F4B                        E7            .byte	$E7
04241                                           ! 709          0x0c,
04242 0F4C                        0C            .byte	$C
04243                                           ! 710          0x00,
04244 0F4D                        00            .byte	0
04245                                           ! 711          0x00,
04246 0F4E                        00            .byte	0
04247                                           ! 712          0x00,
04248 0F4F                        00            .byte	0
04249                                           ! 713          0x00
04250                                           ! 714 };
04251 0F50                        00            .byte	0
04252                                           !BCC_EOS
04253                                           ! 715 static Bit8u vgafont8[256*8]=
04254                                           ! 716 {
04255                       00000F51            _vgafont8:
04256                                           ! 717  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04257 0F51                        00            .byte	0
04258 0F52                        00            .byte	0
04259 0F53                        00            .byte	0
04260 0F54                        00            .byte	0
04261 0F55                        00            .byte	0
04262 0F56                        00            .byte	0
04263 0F57                        00            .byte	0
04264 0F58                        00            .byte	0
04265                                           ! 718  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04266 0F59                        7E            .byte	$7E
04267 0F5A                        81            .byte	$81
04268 0F5B                        A5            .byte	$A5
04269 0F5C                        81            .byte	$81
04270 0F5D                        BD            .byte	$BD
04271 0F5E                        99            .byte	$99
04272 0F5F                        81            .byte	$81
04273 0F60                        7E            .byte	$7E
04274                                           ! 719  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04275 0F61                        7E            .byte	$7E
04276 0F62                        FF            .byte	$FF
04277 0F63                        DB            .byte	$DB
04278 0F64                        FF            .byte	$FF
04279 0F65                        C3            .byte	$C3
04280 0F66                        E7            .byte	$E7
04281 0F67                        FF            .byte	$FF
04282 0F68                        7E            .byte	$7E
04283                                           ! 720  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04284 0F69                        6C            .byte	$6C
04285 0F6A                        FE            .byte	$FE
04286 0F6B                        FE            .byte	$FE
04287 0F6C                        FE            .byte	$FE
04288 0F6D                        7C            .byte	$7C
04289 0F6E                        38            .byte	$38
04290 0F6F                        10            .byte	$10
04291 0F70                        00            .byte	0
04292                                           ! 721  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04293 0F71                        10            .byte	$10
04294 0F72                        38            .byte	$38
04295 0F73                        7C            .byte	$7C
04296 0F74                        FE            .byte	$FE
04297 0F75                        7C            .byte	$7C
04298 0F76                        38            .byte	$38
04299 0F77                        10            .byte	$10
04300 0F78                        00            .byte	0
04301                                           ! 722  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04302 0F79                        38            .byte	$38
04303 0F7A                        7C            .byte	$7C
04304 0F7B                        38            .byte	$38
04305 0F7C                        FE            .byte	$FE
04306 0F7D                        FE            .byte	$FE
04307 0F7E                        7C            .byte	$7C
04308 0F7F                        38            .byte	$38
04309 0F80                        7C            .byte	$7C
04310                                           ! 723  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04311 0F81                        10            .byte	$10
04312 0F82                        10            .byte	$10
04313 0F83                        38            .byte	$38
04314 0F84                        7C            .byte	$7C
04315 0F85                        FE            .byte	$FE
04316 0F86                        7C            .byte	$7C
04317 0F87                        38            .byte	$38
04318 0F88                        7C            .byte	$7C
04319                                           ! 724  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04320 0F89                        00            .byte	0
04321 0F8A                        00            .byte	0
04322 0F8B                        18            .byte	$18
04323 0F8C                        3C            .byte	$3C
04324 0F8D                        3C            .byte	$3C
04325 0F8E                        18            .byte	$18
04326 0F8F                        00            .byte	0
04327 0F90                        00            .byte	0
04328                                           ! 725  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04329 0F91                        FF            .byte	$FF
04330 0F92                        FF            .byte	$FF
04331 0F93                        E7            .byte	$E7
04332 0F94                        C3            .byte	$C3
04333 0F95                        C3            .byte	$C3
04334 0F96                        E7            .byte	$E7
04335 0F97                        FF            .byte	$FF
04336 0F98                        FF            .byte	$FF
04337                                           ! 726  0x00, 0x3c, 0x66, 0x4
04338 0F99                        00            .byte	0
04339 0F9A                        3C            .byte	$3C
04340 0F9B                        66            .byte	$66
04341                                           ! 726 2, 0x42, 0x66, 0x3c, 0x00,
04342 0F9C                        42            .byte	$42
04343 0F9D                        42            .byte	$42
04344 0F9E                        66            .byte	$66
04345 0F9F                        3C            .byte	$3C
04346 0FA0                        00            .byte	0
04347                                           ! 727  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04348 0FA1                        FF            .byte	$FF
04349 0FA2                        C3            .byte	$C3
04350 0FA3                        99            .byte	$99
04351 0FA4                        BD            .byte	$BD
04352 0FA5                        BD            .byte	$BD
04353 0FA6                        99            .byte	$99
04354 0FA7                        C3            .byte	$C3
04355 0FA8                        FF            .byte	$FF
04356                                           ! 728  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04357 0FA9                        0F            .byte	$F
04358 0FAA                        07            .byte	7
04359 0FAB                        0F            .byte	$F
04360 0FAC                        7D            .byte	$7D
04361 0FAD                        CC            .byte	$CC
04362 0FAE                        CC            .byte	$CC
04363 0FAF                        CC            .byte	$CC
04364 0FB0                        78            .byte	$78
04365                                           ! 729  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04366 0FB1                        3C            .byte	$3C
04367 0FB2                        66            .byte	$66
04368 0FB3                        66            .byte	$66
04369 0FB4                        66            .byte	$66
04370 0FB5                        3C            .byte	$3C
04371 0FB6                        18            .byte	$18
04372 0FB7                        7E            .byte	$7E
04373 0FB8                        18            .byte	$18
04374                                           ! 730  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04375 0FB9                        3F            .byte	$3F
04376 0FBA                        33            .byte	$33
04377 0FBB                        3F            .byte	$3F
04378 0FBC                        30            .byte	$30
04379 0FBD                        30            .byte	$30
04380 0FBE                        70            .byte	$70
04381 0FBF                        F0            .byte	$F0
04382 0FC0                        E0            .byte	$E0
04383                                           ! 731  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04384 0FC1                        7F            .byte	$7F
04385 0FC2                        63            .byte	$63
04386 0FC3                        7F            .byte	$7F
04387 0FC4                        63            .byte	$63
04388 0FC5                        63            .byte	$63
04389 0FC6                        67            .byte	$67
04390 0FC7                        E6            .byte	$E6
04391 0FC8                        C0            .byte	$C0
04392                                           ! 732  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04393 0FC9                        99            .byte	$99
04394 0FCA                        5A            .byte	$5A
04395 0FCB                        3C            .byte	$3C
04396 0FCC                        E7            .byte	$E7
04397 0FCD                        E7            .byte	$E7
04398 0FCE                        3C            .byte	$3C
04399 0FCF                        5A            .byte	$5A
04400 0FD0                        99            .byte	$99
04401                                           ! 733  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04402 0FD1                        80            .byte	$80
04403 0FD2                        E0            .byte	$E0
04404 0FD3                        F8            .byte	$F8
04405 0FD4                        FE            .byte	$FE
04406 0FD5                        F8            .byte	$F8
04407 0FD6                        E0            .byte	$E0
04408 0FD7                        80            .byte	$80
04409 0FD8                        00            .byte	0
04410                                           ! 734  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04411 0FD9                        02            .byte	2
04412 0FDA                        0E            .byte	$E
04413 0FDB                        3E            .byte	$3E
04414 0FDC                        FE            .byte	$FE
04415 0FDD                        3E            .byte	$3E
04416 0FDE                        0E            .byte	$E
04417 0FDF                        02            .byte	2
04418 0FE0                        00            .byte	0
04419                                           ! 735  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04420 0FE1                        18            .byte	$18
04421 0FE2                        3C            .byte	$3C
04422 0FE3                        7E            .byte	$7E
04423 0FE4                        18            .byte	$18
04424 0FE5                        18            .byte	$18
04425 0FE6                        7E            .byte	$7E
04426 0FE7                        3C            .byte	$3C
04427 0FE8                        18            .byte	$18
04428                                           ! 736  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04429 0FE9                        66            .byte	$66
04430 0FEA                        66            .byte	$66
04431 0FEB                        66            .byte	$66
04432 0FEC                        66            .byte	$66
04433 0FED                        66            .byte	$66
04434 0FEE                        00            .byte	0
04435 0FEF                        66            .byte	$66
04436 0FF0                        00            .byte	0
04437                                           ! 737  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04438 0FF1                        7F            .byte	$7F
04439 0FF2                        DB            .byte	$DB
04440 0FF3                        DB            .byte	$DB
04441 0FF4                        7B            .byte	$7B
04442 0FF5                        1B            .byte	$1B
04443 0FF6                        1B            .byte	$1B
04444 0FF7                        1B            .byte	$1B
04445 0FF8                        00            .byte	0
04446                                           ! 738  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04447 0FF9                        3E            .byte	$3E
04448 0FFA                        63            .byte	$63
04449 0FFB                        38            .byte	$38
04450 0FFC                        6C            .byte	$6C
04451 0FFD                        6C            .byte	$6C
04452 0FFE                        38            .byte	$38
04453 0FFF                        CC            .byte	$CC
04454 1000                        78            .byte	$78
04455                                           ! 739  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04456 1001                        00            .byte	0
04457 1002                        00            .byte	0
04458 1003                        00            .byte	0
04459 1004                        00            .byte	0
04460 1005                        7E            .byte	$7E
04461 1006                        7E            .byte	$7E
04462 1007                        7E            .byte	$7E
04463 1008                        00            .byte	0
04464                                           ! 740  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04465 1009                        18            .byte	$18
04466 100A                        3C            .byte	$3C
04467 100B                        7E            .byte	$7E
04468 100C                        18            .byte	$18
04469 100D                        7E            .byte	$7E
04470 100E                        3C            .byte	$3C
04471 100F                        18            .byte	$18
04472 1010                        FF            .byte	$FF
04473                                           ! 741  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04474 1011                        18            .byte	$18
04475 1012                        3C            .byte	$3C
04476 1013                        7E            .byte	$7E
04477 1014                        18            .byte	$18
04478 1015                        18            .byte	$18
04479 1016                        18            .byte	$18
04480 1017                        18            .byte	$18
04481 1018                        00            .byte	0
04482                                           ! 742  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04483 1019                        18            .byte	$18
04484 101A                        18            .byte	$18
04485 101B                        18            .byte	$18
04486 101C                        18            .byte	$18
04487 101D                        7E            .byte	$7E
04488 101E                        3C            .byte	$3C
04489 101F                        18            .byte	$18
04490 1020                        00            .byte	0
04491                                           ! 743  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04492 1021                        00            .byte	0
04493 1022                        18            .byte	$18
04494 1023                        0C            .byte	$C
04495 1024                        FE            .byte	$FE
04496 1025                        0C            .byte	$C
04497 1026                        18            .byte	$18
04498 1027                        00            .byte	0
04499 1028                        00            .byte	0
04500                                           ! 744  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04501 1029                        00            .byte	0
04502 102A                        30            .byte	$30
04503 102B                        60            .byte	$60
04504 102C                        FE            .byte	$FE
04505 102D                        60            .byte	$60
04506 102E                        30            .byte	$30
04507 102F                        00            .byte	0
04508 1030                        00            .byte	0
04509                                           ! 745  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04510 1031                        00            .byte	0
04511 1032                        00            .byte	0
04512 1033                        C0            .byte	$C0
04513 1034                        C0            .byte	$C0
04514 1035                        C0            .byte	$C0
04515 1036                        FE            .byte	$FE
04516 1037                        00            .byte	0
04517 1038                        00            .byte	0
04518                                           ! 746  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04519 1039                        00            .byte	0
04520 103A                        24            .byte	$24
04521 103B                        66            .byte	$66
04522 103C                        FF            .byte	$FF
04523 103D                        66            .byte	$66
04524 103E                        24            .byte	$24
04525 103F                        00            .byte	0
04526 1040                        00            .byte	0
04527                                           ! 747  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04528 1041                        00            .byte	0
04529 1042                        18            .byte	$18
04530 1043                        3C            .byte	$3C
04531 1044                        7E            .byte	$7E
04532 1045                        FF            .byte	$FF
04533 1046                        FF            .byte	$FF
04534 1047                        00            .byte	0
04535 1048                        00            .byte	0
04536                                           ! 748  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04537 1049                        00            .byte	0
04538 104A                        FF            .byte	$FF
04539 104B                        FF            .byte	$FF
04540 104C                        7E            .byte	$7E
04541 104D                        3C            .byte	$3C
04542 104E                        18            .byte	$18
04543 104F                        00            .byte	0
04544 1050                        00            .byte	0
04545                                           ! 749  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04546 1051                        00            .byte	0
04547 1052                        00            .byte	0
04548 1053                        00            .byte	0
04549 1054                        00            .byte	0
04550 1055                        00            .byte	0
04551 1056                        00            .byte	0
04552 1057                        00            .byte	0
04553 1058                        00            .byte	0
04554                                           ! 750  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04555 1059                        30            .byte	$30
04556 105A                        78            .byte	$78
04557 105B                        78            .byte	$78
04558 105C                        30            .byte	$30
04559 105D                        30            .byte	$30
04560 105E                        00            .byte	0
04561 105F                        30            .byte	$30
04562 1060                        00            .byte	0
04563                                           ! 751  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04564 1061                        6C            .byte	$6C
04565 1062                        6C            .byte	$6C
04566 1063                        6C            .byte	$6C
04567 1064                        00            .byte	0
04568 1065                        00            .byte	0
04569 1066                        00            .byte	0
04570 1067                        00            .byte	0
04571 1068                        00            .byte	0
04572                                           ! 752  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04573 1069                        6C            .byte	$6C
04574 106A                        6C            .byte	$6C
04575 106B                        FE            .byte	$FE
04576 106C                        6C            .byte	$6C
04577 106D                        FE            .byte	$FE
04578 106E                        6C            .byte	$6C
04579 106F                        6C            .byte	$6C
04580 1070                        00            .byte	0
04581                                           ! 753  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04582 1071                        30            .byte	$30
04583 1072                        7C            .byte	$7C
04584 1073                        C0            .byte	$C0
04585 1074                        78            .byte	$78
04586 1075                        0C            .byte	$C
04587 1076                        F8            .byte	$F8
04588 1077                        30            .byte	$30
04589 1078                        00            .byte	0
04590                                           ! 754  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04591 1079                        00            .byte	0
04592 107A                        C6            .byte	$C6
04593 107B                        CC            .byte	$CC
04594 107C                        18            .byte	$18
04595 107D                        30            .byte	$30
04596 107E                        66            .byte	$66
04597 107F                        C6            .byte	$C6
04598 1080                        00            .byte	0
04599                                           ! 755  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04600 1081                        38            .byte	$38
04601 1082                        6C            .byte	$6C
04602 1083                        38            .byte	$38
04603 1084                        76            .byte	$76
04604 1085                        DC            .byte	$DC
04605 1086                        CC            .byte	$CC
04606 1087                        76            .byte	$76
04607 1088                        00            .byte	0
04608                                           ! 756  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04609 1089                        60            .byte	$60
04610 108A                        60            .byte	$60
04611 108B                        C0            .byte	$C0
04612 108C                        00            .byte	0
04613 108D                        00            .byte	0
04614 108E                        00            .byte	0
04615 108F                        00            .byte	0
04616 1090                        00            .byte	0
04617                                           ! 757  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04618 1091                        18            .byte	$18
04619 1092                        30            .byte	$30
04620 1093                        60            .byte	$60
04621 1094                        60            .byte	$60
04622 1095                        60            .byte	$60
04623 1096                        30            .byte	$30
04624 1097                        18            .byte	$18
04625 1098                        00            .byte	0
04626                                           ! 758  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04627 1099                        60            .byte	$60
04628 109A                        30            .byte	$30
04629 109B                        18            .byte	$18
04630 109C                        18            .byte	$18
04631 109D                        18            .byte	$18
04632 109E                        30            .byte	$30
04633 109F                        60            .byte	$60
04634 10A0                        00            .byte	0
04635                                           ! 759  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04636 10A1                        00            .byte	0
04637 10A2                        66            .byte	$66
04638 10A3                        3C            .byte	$3C
04639 10A4                        FF            .byte	$FF
04640 10A5                        3C            .byte	$3C
04641 10A6                        66            .byte	$66
04642 10A7                        00            .byte	0
04643 10A8                        00            .byte	0
04644                                           ! 760  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04645 10A9                        00            .byte	0
04646 10AA                        30            .byte	$30
04647 10AB                        30            .byte	$30
04648 10AC                        FC            .byte	$FC
04649 10AD                        30            .byte	$30
04650 10AE                        30            .byte	$30
04651 10AF                        00            .byte	0
04652 10B0                        00            .byte	0
04653                                           ! 761  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04654 10B1                        00            .byte	0
04655 10B2                        00            .byte	0
04656 10B3                        00            .byte	0
04657 10B4                        00            .byte	0
04658 10B5                        00            .byte	0
04659 10B6                        30            .byte	$30
04660 10B7                        30            .byte	$30
04661 10B8                        60            .byte	$60
04662                                           ! 762  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04663 10B9                        00            .byte	0
04664 10BA                        00            .byte	0
04665 10BB                        00            .byte	0
04666 10BC                        FC            .byte	$FC
04667 10BD                        00            .byte	0
04668 10BE                        00            .byte	0
04669 10BF                        00            .byte	0
04670 10C0                        00            .byte	0
04671                                           ! 763  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04672 10C1                        00            .byte	0
04673 10C2                        00            .byte	0
04674 10C3                        00            .byte	0
04675 10C4                        00            .byte	0
04676 10C5                        00            .byte	0
04677 10C6                        30            .byte	$30
04678 10C7                        30            .byte	$30
04679 10C8                        00            .byte	0
04680                                           ! 764  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04681 10C9                        06            .byte	6
04682 10CA                        0C            .byte	$C
04683 10CB                        18            .byte	$18
04684 10CC                        30            .byte	$30
04685 10CD                        60            .byte	$60
04686 10CE                        C0            .byte	$C0
04687 10CF                        80            .byte	$80
04688 10D0                        00            .byte	0
04689                                           ! 765  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04690 10D1                        7C            .byte	$7C
04691 10D2                        C6            .byte	$C6
04692 10D3                        CE            .byte	$CE
04693 10D4                        DE            .byte	$DE
04694 10D5                        F6            .byte	$F6
04695 10D6                        E6            .byte	$E6
04696 10D7                        7C            .byte	$7C
04697 10D8                        00            .byte	0
04698                                           ! 766  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04699 10D9                        30            .byte	$30
04700 10DA                        70            .byte	$70
04701 10DB                        30            .byte	$30
04702 10DC                        30            .byte	$30
04703 10DD                        30            .byte	$30
04704 10DE                        30            .byte	$30
04705 10DF                        FC            .byte	$FC
04706 10E0                        00            .byte	0
04707                                           ! 767  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04708 10E1                        78            .byte	$78
04709 10E2                        CC            .byte	$CC
04710 10E3                        0C            .byte	$C
04711 10E4                        38            .byte	$38
04712 10E5                        60            .byte	$60
04713 10E6                        CC            .byte	$CC
04714 10E7                        FC            .byte	$FC
04715 10E8                        00            .byte	0
04716                                           ! 768  0x78, 0xcc,
04717 10E9                        78            .byte	$78
04718                                           ! 768  0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04719 10EA                        CC            .byte	$CC
04720 10EB                        0C            .byte	$C
04721 10EC                        38            .byte	$38
04722 10ED                        0C            .byte	$C
04723 10EE                        CC            .byte	$CC
04724 10EF                        78            .byte	$78
04725 10F0                        00            .byte	0
04726                                           ! 769  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04727 10F1                        1C            .byte	$1C
04728 10F2                        3C            .byte	$3C
04729 10F3                        6C            .byte	$6C
04730 10F4                        CC            .byte	$CC
04731 10F5                        FE            .byte	$FE
04732 10F6                        0C            .byte	$C
04733 10F7                        1E            .byte	$1E
04734 10F8                        00            .byte	0
04735                                           ! 770  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04736 10F9                        FC            .byte	$FC
04737 10FA                        C0            .byte	$C0
04738 10FB                        F8            .byte	$F8
04739 10FC                        0C            .byte	$C
04740 10FD                        0C            .byte	$C
04741 10FE                        CC            .byte	$CC
04742 10FF                        78            .byte	$78
04743 1100                        00            .byte	0
04744                                           ! 771  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04745 1101                        38            .byte	$38
04746 1102                        60            .byte	$60
04747 1103                        C0            .byte	$C0
04748 1104                        F8            .byte	$F8
04749 1105                        CC            .byte	$CC
04750 1106                        CC            .byte	$CC
04751 1107                        78            .byte	$78
04752 1108                        00            .byte	0
04753                                           ! 772  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04754 1109                        FC            .byte	$FC
04755 110A                        CC            .byte	$CC
04756 110B                        0C            .byte	$C
04757 110C                        18            .byte	$18
04758 110D                        30            .byte	$30
04759 110E                        30            .byte	$30
04760 110F                        30            .byte	$30
04761 1110                        00            .byte	0
04762                                           ! 773  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04763 1111                        78            .byte	$78
04764 1112                        CC            .byte	$CC
04765 1113                        CC            .byte	$CC
04766 1114                        78            .byte	$78
04767 1115                        CC            .byte	$CC
04768 1116                        CC            .byte	$CC
04769 1117                        78            .byte	$78
04770 1118                        00            .byte	0
04771                                           ! 774  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04772 1119                        78            .byte	$78
04773 111A                        CC            .byte	$CC
04774 111B                        CC            .byte	$CC
04775 111C                        7C            .byte	$7C
04776 111D                        0C            .byte	$C
04777 111E                        18            .byte	$18
04778 111F                        70            .byte	$70
04779 1120                        00            .byte	0
04780                                           ! 775  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04781 1121                        00            .byte	0
04782 1122                        30            .byte	$30
04783 1123                        30            .byte	$30
04784 1124                        00            .byte	0
04785 1125                        00            .byte	0
04786 1126                        30            .byte	$30
04787 1127                        30            .byte	$30
04788 1128                        00            .byte	0
04789                                           ! 776  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04790 1129                        00            .byte	0
04791 112A                        30            .byte	$30
04792 112B                        30            .byte	$30
04793 112C                        00            .byte	0
04794 112D                        00            .byte	0
04795 112E                        30            .byte	$30
04796 112F                        30            .byte	$30
04797 1130                        60            .byte	$60
04798                                           ! 777  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04799 1131                        18            .byte	$18
04800 1132                        30            .byte	$30
04801 1133                        60            .byte	$60
04802 1134                        C0            .byte	$C0
04803 1135                        60            .byte	$60
04804 1136                        30            .byte	$30
04805 1137                        18            .byte	$18
04806 1138                        00            .byte	0
04807                                           ! 778  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04808 1139                        00            .byte	0
04809 113A                        00            .byte	0
04810 113B                        FC            .byte	$FC
04811 113C                        00            .byte	0
04812 113D                        00            .byte	0
04813 113E                        FC            .byte	$FC
04814 113F                        00            .byte	0
04815 1140                        00            .byte	0
04816                                           ! 779  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04817 1141                        60            .byte	$60
04818 1142                        30            .byte	$30
04819 1143                        18            .byte	$18
04820 1144                        0C            .byte	$C
04821 1145                        18            .byte	$18
04822 1146                        30            .byte	$30
04823 1147                        60            .byte	$60
04824 1148                        00            .byte	0
04825                                           ! 780  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04826 1149                        78            .byte	$78
04827 114A                        CC            .byte	$CC
04828 114B                        0C            .byte	$C
04829 114C                        18            .byte	$18
04830 114D                        30            .byte	$30
04831 114E                        00            .byte	0
04832 114F                        30            .byte	$30
04833 1150                        00            .byte	0
04834                                           ! 781  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04835 1151                        7C            .byte	$7C
04836 1152                        C6            .byte	$C6
04837 1153                        DE            .byte	$DE
04838 1154                        DE            .byte	$DE
04839 1155                        DE            .byte	$DE
04840 1156                        C0            .byte	$C0
04841 1157                        78            .byte	$78
04842 1158                        00            .byte	0
04843                                           ! 782  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04844 1159                        30            .byte	$30
04845 115A                        78            .byte	$78
04846 115B                        CC            .byte	$CC
04847 115C                        CC            .byte	$CC
04848 115D                        FC            .byte	$FC
04849 115E                        CC            .byte	$CC
04850 115F                        CC            .byte	$CC
04851 1160                        00            .byte	0
04852                                           ! 783  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04853 1161                        FC            .byte	$FC
04854 1162                        66            .byte	$66
04855 1163                        66            .byte	$66
04856 1164                        7C            .byte	$7C
04857 1165                        66            .byte	$66
04858 1166                        66            .byte	$66
04859 1167                        FC            .byte	$FC
04860 1168                        00            .byte	0
04861                                           ! 784  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04862 1169                        3C            .byte	$3C
04863 116A                        66            .byte	$66
04864 116B                        C0            .byte	$C0
04865 116C                        C0            .byte	$C0
04866 116D                        C0            .byte	$C0
04867 116E                        66            .byte	$66
04868 116F                        3C            .byte	$3C
04869 1170                        00            .byte	0
04870                                           ! 785  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04871 1171                        F8            .byte	$F8
04872 1172                        6C            .byte	$6C
04873 1173                        66            .byte	$66
04874 1174                        66            .byte	$66
04875 1175                        66            .byte	$66
04876 1176                        6C            .byte	$6C
04877 1177                        F8            .byte	$F8
04878 1178                        00            .byte	0
04879                                           ! 786  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04880 1179                        FE            .byte	$FE
04881 117A                        62            .byte	$62
04882 117B                        68            .byte	$68
04883 117C                        78            .byte	$78
04884 117D                        68            .byte	$68
04885 117E                        62            .byte	$62
04886 117F                        FE            .byte	$FE
04887 1180                        00            .byte	0
04888                                           ! 787  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04889 1181                        FE            .byte	$FE
04890 1182                        62            .byte	$62
04891 1183                        68            .byte	$68
04892 1184                        78            .byte	$78
04893 1185                        68            .byte	$68
04894 1186                        60            .byte	$60
04895 1187                        F0            .byte	$F0
04896 1188                        00            .byte	0
04897                                           ! 788  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04898 1189                        3C            .byte	$3C
04899 118A                        66            .byte	$66
04900 118B                        C0            .byte	$C0
04901 118C                        C0            .byte	$C0
04902 118D                        CE            .byte	$CE
04903 118E                        66            .byte	$66
04904 118F                        3E            .byte	$3E
04905 1190                        00            .byte	0
04906                                           ! 789  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04907 1191                        CC            .byte	$CC
04908 1192                        CC            .byte	$CC
04909 1193                        CC            .byte	$CC
04910 1194                        FC            .byte	$FC
04911 1195                        CC            .byte	$CC
04912 1196                        CC            .byte	$CC
04913 1197                        CC            .byte	$CC
04914 1198                        00            .byte	0
04915                                           ! 790  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04916 1199                        78            .byte	$78
04917 119A                        30            .byte	$30
04918 119B                        30            .byte	$30
04919 119C                        30            .byte	$30
04920 119D                        30            .byte	$30
04921 119E                        30            .byte	$30
04922 119F                        78            .byte	$78
04923 11A0                        00            .byte	0
04924                                           ! 791  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04925 11A1                        1E            .byte	$1E
04926 11A2                        0C            .byte	$C
04927 11A3                        0C            .byte	$C
04928 11A4                        0C            .byte	$C
04929 11A5                        CC            .byte	$CC
04930 11A6                        CC            .byte	$CC
04931 11A7                        78            .byte	$78
04932 11A8                        00            .byte	0
04933                                           ! 792  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04934 11A9                        E6            .byte	$E6
04935 11AA                        66            .byte	$66
04936 11AB                        6C            .byte	$6C
04937 11AC                        78            .byte	$78
04938 11AD                        6C            .byte	$6C
04939 11AE                        66            .byte	$66
04940 11AF                        E6            .byte	$E6
04941 11B0                        00            .byte	0
04942                                           ! 793  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04943 11B1                        F0            .byte	$F0
04944 11B2                        60            .byte	$60
04945 11B3                        60            .byte	$60
04946 11B4                        60            .byte	$60
04947 11B5                        62            .byte	$62
04948 11B6                        66            .byte	$66
04949 11B7                        FE            .byte	$FE
04950 11B8                        00            .byte	0
04951                                           ! 794  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04952 11B9                        C6            .byte	$C6
04953 11BA                        EE            .byte	$EE
04954 11BB                        FE            .byte	$FE
04955 11BC                        FE            .byte	$FE
04956 11BD                        D6            .byte	$D6
04957 11BE                        C6            .byte	$C6
04958 11BF                        C6            .byte	$C6
04959 11C0                        00            .byte	0
04960                                           ! 795  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04961 11C1                        C6            .byte	$C6
04962 11C2                        E6            .byte	$E6
04963 11C3                        F6            .byte	$F6
04964 11C4                        DE            .byte	$DE
04965 11C5                        CE            .byte	$CE
04966 11C6                        C6            .byte	$C6
04967 11C7                        C6            .byte	$C6
04968 11C8                        00            .byte	0
04969                                           ! 796  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04970 11C9                        38            .byte	$38
04971 11CA                        6C            .byte	$6C
04972 11CB                        C6            .byte	$C6
04973 11CC                        C6            .byte	$C6
04974 11CD                        C6            .byte	$C6
04975 11CE                        6C            .byte	$6C
04976 11CF                        38            .byte	$38
04977 11D0                        00            .byte	0
04978                                           ! 797  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04979 11D1                        FC            .byte	$FC
04980 11D2                        66            .byte	$66
04981 11D3                        66            .byte	$66
04982 11D4                        7C            .byte	$7C
04983 11D5                        60            .byte	$60
04984 11D6                        60            .byte	$60
04985 11D7                        F0            .byte	$F0
04986 11D8                        00            .byte	0
04987                                           ! 798  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04988 11D9                        78            .byte	$78
04989 11DA                        CC            .byte	$CC
04990 11DB                        CC            .byte	$CC
04991 11DC                        CC            .byte	$CC
04992 11DD                        DC            .byte	$DC
04993 11DE                        78            .byte	$78
04994 11DF                        1C            .byte	$1C
04995 11E0                        00            .byte	0
04996                                           ! 799  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04997 11E1                        FC            .byte	$FC
04998 11E2                        66            .byte	$66
04999 11E3                        66            .byte	$66
05000 11E4                        7C            .byte	$7C
05001 11E5                        6C            .byte	$6C
05002 11E6                        66            .byte	$66
05003 11E7                        E6            .byte	$E6
05004 11E8                        00            .byte	0
05005                                           ! 800  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05006 11E9                        78            .byte	$78
05007 11EA                        CC            .byte	$CC
05008 11EB                        E0            .byte	$E0
05009 11EC                        70            .byte	$70
05010 11ED                        1C            .byte	$1C
05011 11EE                        CC            .byte	$CC
05012 11EF                        78            .byte	$78
05013 11F0                        00            .byte	0
05014                                           ! 801  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05015 11F1                        FC            .byte	$FC
05016 11F2                        B4            .byte	$B4
05017 11F3                        30            .byte	$30
05018 11F4                        30            .byte	$30
05019 11F5                        30            .byte	$30
05020 11F6                        30            .byte	$30
05021 11F7                        78            .byte	$78
05022 11F8                        00            .byte	0
05023                                           ! 802  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05024 11F9                        CC            .byte	$CC
05025 11FA                        CC            .byte	$CC
05026 11FB                        CC            .byte	$CC
05027 11FC                        CC            .byte	$CC
05028 11FD                        CC            .byte	$CC
05029 11FE                        CC            .byte	$CC
05030 11FF                        FC            .byte	$FC
05031 1200                        00            .byte	0
05032                                           ! 803  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05033 1201                        CC            .byte	$CC
05034 1202                        CC            .byte	$CC
05035 1203                        CC            .byte	$CC
05036 1204                        CC            .byte	$CC
05037 1205                        CC            .byte	$CC
05038 1206                        78            .byte	$78
05039 1207                        30            .byte	$30
05040 1208                        00            .byte	0
05041                                           ! 804  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05042 1209                        C6            .byte	$C6
05043 120A                        C6            .byte	$C6
05044 120B                        C6            .byte	$C6
05045 120C                        D6            .byte	$D6
05046 120D                        FE            .byte	$FE
05047 120E                        EE            .byte	$EE
05048 120F                        C6            .byte	$C6
05049 1210                        00            .byte	0
05050                                           ! 805  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05051 1211                        C6            .byte	$C6
05052 1212                        C6            .byte	$C6
05053 1213                        6C            .byte	$6C
05054 1214                        38            .byte	$38
05055 1215                        38            .byte	$38
05056 1216                        6C            .byte	$6C
05057 1217                        C6            .byte	$C6
05058 1218                        00            .byte	0
05059                                           ! 806  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05060 1219                        CC            .byte	$CC
05061 121A                        CC            .byte	$CC
05062 121B                        CC            .byte	$CC
05063 121C                        78            .byte	$78
05064 121D                        30            .byte	$30
05065 121E                        30            .byte	$30
05066 121F                        78            .byte	$78
05067 1220                        00            .byte	0
05068                                           ! 807  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05069 1221                        FE            .byte	$FE
05070 1222                        C6            .byte	$C6
05071 1223                        8C            .byte	$8C
05072 1224                        18            .byte	$18
05073 1225                        32            .byte	$32
05074 1226                        66            .byte	$66
05075 1227                        FE            .byte	$FE
05076 1228                        00            .byte	0
05077                                           ! 808  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05078 1229                        78            .byte	$78
05079 122A                        60            .byte	$60
05080 122B                        60            .byte	$60
05081 122C                        60            .byte	$60
05082 122D                        60            .byte	$60
05083 122E                        60            .byte	$60
05084 122F                        78            .byte	$78
05085 1230                        00            .byte	0
05086                                           ! 809  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05087 1231                        C0            .byte	$C0
05088 1232                        60            .byte	$60
05089 1233                        30            .byte	$30
05090 1234                        18            .byte	$18
05091 1235                        0C            .byte	$C
05092 1236                        06            .byte	6
05093 1237                        02            .byte	2
05094 1238                        00            .byte	0
05095                                           ! 810  0
05096                                           ! 810 x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05097 1239                        78            .byte	$78
05098 123A                        18            .byte	$18
05099 123B                        18            .byte	$18
05100 123C                        18            .byte	$18
05101 123D                        18            .byte	$18
05102 123E                        18            .byte	$18
05103 123F                        78            .byte	$78
05104 1240                        00            .byte	0
05105                                           ! 811  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05106 1241                        10            .byte	$10
05107 1242                        38            .byte	$38
05108 1243                        6C            .byte	$6C
05109 1244                        C6            .byte	$C6
05110 1245                        00            .byte	0
05111 1246                        00            .byte	0
05112 1247                        00            .byte	0
05113 1248                        00            .byte	0
05114                                           ! 812  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05115 1249                        00            .byte	0
05116 124A                        00            .byte	0
05117 124B                        00            .byte	0
05118 124C                        00            .byte	0
05119 124D                        00            .byte	0
05120 124E                        00            .byte	0
05121 124F                        00            .byte	0
05122 1250                        FF            .byte	$FF
05123                                           ! 813  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05124 1251                        30            .byte	$30
05125 1252                        30            .byte	$30
05126 1253                        18            .byte	$18
05127 1254                        00            .byte	0
05128 1255                        00            .byte	0
05129 1256                        00            .byte	0
05130 1257                        00            .byte	0
05131 1258                        00            .byte	0
05132                                           ! 814  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05133 1259                        00            .byte	0
05134 125A                        00            .byte	0
05135 125B                        78            .byte	$78
05136 125C                        0C            .byte	$C
05137 125D                        7C            .byte	$7C
05138 125E                        CC            .byte	$CC
05139 125F                        76            .byte	$76
05140 1260                        00            .byte	0
05141                                           ! 815  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05142 1261                        E0            .byte	$E0
05143 1262                        60            .byte	$60
05144 1263                        60            .byte	$60
05145 1264                        7C            .byte	$7C
05146 1265                        66            .byte	$66
05147 1266                        66            .byte	$66
05148 1267                        DC            .byte	$DC
05149 1268                        00            .byte	0
05150                                           ! 816  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05151 1269                        00            .byte	0
05152 126A                        00            .byte	0
05153 126B                        78            .byte	$78
05154 126C                        CC            .byte	$CC
05155 126D                        C0            .byte	$C0
05156 126E                        CC            .byte	$CC
05157 126F                        78            .byte	$78
05158 1270                        00            .byte	0
05159                                           ! 817  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05160 1271                        1C            .byte	$1C
05161 1272                        0C            .byte	$C
05162 1273                        0C            .byte	$C
05163 1274                        7C            .byte	$7C
05164 1275                        CC            .byte	$CC
05165 1276                        CC            .byte	$CC
05166 1277                        76            .byte	$76
05167 1278                        00            .byte	0
05168                                           ! 818  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05169 1279                        00            .byte	0
05170 127A                        00            .byte	0
05171 127B                        78            .byte	$78
05172 127C                        CC            .byte	$CC
05173 127D                        FC            .byte	$FC
05174 127E                        C0            .byte	$C0
05175 127F                        78            .byte	$78
05176 1280                        00            .byte	0
05177                                           ! 819  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05178 1281                        38            .byte	$38
05179 1282                        6C            .byte	$6C
05180 1283                        60            .byte	$60
05181 1284                        F0            .byte	$F0
05182 1285                        60            .byte	$60
05183 1286                        60            .byte	$60
05184 1287                        F0            .byte	$F0
05185 1288                        00            .byte	0
05186                                           ! 820  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05187 1289                        00            .byte	0
05188 128A                        00            .byte	0
05189 128B                        76            .byte	$76
05190 128C                        CC            .byte	$CC
05191 128D                        CC            .byte	$CC
05192 128E                        7C            .byte	$7C
05193 128F                        0C            .byte	$C
05194 1290                        F8            .byte	$F8
05195                                           ! 821  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05196 1291                        E0            .byte	$E0
05197 1292                        60            .byte	$60
05198 1293                        6C            .byte	$6C
05199 1294                        76            .byte	$76
05200 1295                        66            .byte	$66
05201 1296                        66            .byte	$66
05202 1297                        E6            .byte	$E6
05203 1298                        00            .byte	0
05204                                           ! 822  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05205 1299                        30            .byte	$30
05206 129A                        00            .byte	0
05207 129B                        70            .byte	$70
05208 129C                        30            .byte	$30
05209 129D                        30            .byte	$30
05210 129E                        30            .byte	$30
05211 129F                        78            .byte	$78
05212 12A0                        00            .byte	0
05213                                           ! 823  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05214 12A1                        0C            .byte	$C
05215 12A2                        00            .byte	0
05216 12A3                        0C            .byte	$C
05217 12A4                        0C            .byte	$C
05218 12A5                        0C            .byte	$C
05219 12A6                        CC            .byte	$CC
05220 12A7                        CC            .byte	$CC
05221 12A8                        78            .byte	$78
05222                                           ! 824  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05223 12A9                        E0            .byte	$E0
05224 12AA                        60            .byte	$60
05225 12AB                        66            .byte	$66
05226 12AC                        6C            .byte	$6C
05227 12AD                        78            .byte	$78
05228 12AE                        6C            .byte	$6C
05229 12AF                        E6            .byte	$E6
05230 12B0                        00            .byte	0
05231                                           ! 825  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05232 12B1                        70            .byte	$70
05233 12B2                        30            .byte	$30
05234 12B3                        30            .byte	$30
05235 12B4                        30            .byte	$30
05236 12B5                        30            .byte	$30
05237 12B6                        30            .byte	$30
05238 12B7                        78            .byte	$78
05239 12B8                        00            .byte	0
05240                                           ! 826  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05241 12B9                        00            .byte	0
05242 12BA                        00            .byte	0
05243 12BB                        CC            .byte	$CC
05244 12BC                        FE            .byte	$FE
05245 12BD                        FE            .byte	$FE
05246 12BE                        D6            .byte	$D6
05247 12BF                        C6            .byte	$C6
05248 12C0                        00            .byte	0
05249                                           ! 827  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05250 12C1                        00            .byte	0
05251 12C2                        00            .byte	0
05252 12C3                        F8            .byte	$F8
05253 12C4                        CC            .byte	$CC
05254 12C5                        CC            .byte	$CC
05255 12C6                        CC            .byte	$CC
05256 12C7                        CC            .byte	$CC
05257 12C8                        00            .byte	0
05258                                           ! 828  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05259 12C9                        00            .byte	0
05260 12CA                        00            .byte	0
05261 12CB                        78            .byte	$78
05262 12CC                        CC            .byte	$CC
05263 12CD                        CC            .byte	$CC
05264 12CE                        CC            .byte	$CC
05265 12CF                        78            .byte	$78
05266 12D0                        00            .byte	0
05267                                           ! 829  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05268 12D1                        00            .byte	0
05269 12D2                        00            .byte	0
05270 12D3                        DC            .byte	$DC
05271 12D4                        66            .byte	$66
05272 12D5                        66            .byte	$66
05273 12D6                        7C            .byte	$7C
05274 12D7                        60            .byte	$60
05275 12D8                        F0            .byte	$F0
05276                                           ! 830  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05277 12D9                        00            .byte	0
05278 12DA                        00            .byte	0
05279 12DB                        76            .byte	$76
05280 12DC                        CC            .byte	$CC
05281 12DD                        CC            .byte	$CC
05282 12DE                        7C            .byte	$7C
05283 12DF                        0C            .byte	$C
05284 12E0                        1E            .byte	$1E
05285                                           ! 831  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05286 12E1                        00            .byte	0
05287 12E2                        00            .byte	0
05288 12E3                        DC            .byte	$DC
05289 12E4                        76            .byte	$76
05290 12E5                        66            .byte	$66
05291 12E6                        60            .byte	$60
05292 12E7                        F0            .byte	$F0
05293 12E8                        00            .byte	0
05294                                           ! 832  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05295 12E9                        00            .byte	0
05296 12EA                        00            .byte	0
05297 12EB                        7C            .byte	$7C
05298 12EC                        C0            .byte	$C0
05299 12ED                        78            .byte	$78
05300 12EE                        0C            .byte	$C
05301 12EF                        F8            .byte	$F8
05302 12F0                        00            .byte	0
05303                                           ! 833  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05304 12F1                        10            .byte	$10
05305 12F2                        30            .byte	$30
05306 12F3                        7C            .byte	$7C
05307 12F4                        30            .byte	$30
05308 12F5                        30            .byte	$30
05309 12F6                        34            .byte	$34
05310 12F7                        18            .byte	$18
05311 12F8                        00            .byte	0
05312                                           ! 834  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05313 12F9                        00            .byte	0
05314 12FA                        00            .byte	0
05315 12FB                        CC            .byte	$CC
05316 12FC                        CC            .byte	$CC
05317 12FD                        CC            .byte	$CC
05318 12FE                        CC            .byte	$CC
05319 12FF                        76            .byte	$76
05320 1300                        00            .byte	0
05321                                           ! 835  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05322 1301                        00            .byte	0
05323 1302                        00            .byte	0
05324 1303                        CC            .byte	$CC
05325 1304                        CC            .byte	$CC
05326 1305                        CC            .byte	$CC
05327 1306                        78            .byte	$78
05328 1307                        30            .byte	$30
05329 1308                        00            .byte	0
05330                                           ! 836  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05331 1309                        00            .byte	0
05332 130A                        00            .byte	0
05333 130B                        C6            .byte	$C6
05334 130C                        D6            .byte	$D6
05335 130D                        FE            .byte	$FE
05336 130E                        FE            .byte	$FE
05337 130F                        6C            .byte	$6C
05338 1310                        00            .byte	0
05339                                           ! 837  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05340 1311                        00            .byte	0
05341 1312                        00            .byte	0
05342 1313                        C6            .byte	$C6
05343 1314                        6C            .byte	$6C
05344 1315                        38            .byte	$38
05345 1316                        6C            .byte	$6C
05346 1317                        C6            .byte	$C6
05347 1318                        00            .byte	0
05348                                           ! 838  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05349 1319                        00            .byte	0
05350 131A                        00            .byte	0
05351 131B                        CC            .byte	$CC
05352 131C                        CC            .byte	$CC
05353 131D                        CC            .byte	$CC
05354 131E                        7C            .byte	$7C
05355 131F                        0C            .byte	$C
05356 1320                        F8            .byte	$F8
05357                                           ! 839  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05358 1321                        00            .byte	0
05359 1322                        00            .byte	0
05360 1323                        FC            .byte	$FC
05361 1324                        98            .byte	$98
05362 1325                        30            .byte	$30
05363 1326                        64            .byte	$64
05364 1327                        FC            .byte	$FC
05365 1328                        00            .byte	0
05366                                           ! 840  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05367 1329                        1C            .byte	$1C
05368 132A                        30            .byte	$30
05369 132B                        30            .byte	$30
05370 132C                        E0            .byte	$E0
05371 132D                        30            .byte	$30
05372 132E                        30            .byte	$30
05373 132F                        1C            .byte	$1C
05374 1330                        00            .byte	0
05375                                           ! 841  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05376 1331                        18            .byte	$18
05377 1332                        18            .byte	$18
05378 1333                        18            .byte	$18
05379 1334                        00            .byte	0
05380 1335                        18            .byte	$18
05381 1336                        18            .byte	$18
05382 1337                        18            .byte	$18
05383 1338                        00            .byte	0
05384                                           ! 842  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05385 1339                        E0            .byte	$E0
05386 133A                        30            .byte	$30
05387 133B                        30            .byte	$30
05388 133C                        1C            .byte	$1C
05389 133D                        30            .byte	$30
05390 133E                        30            .byte	$30
05391 133F                        E0            .byte	$E0
05392 1340                        00            .byte	0
05393                                           ! 843  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05394 1341                        76            .byte	$76
05395 1342                        DC            .byte	$DC
05396 1343                        00            .byte	0
05397 1344                        00            .byte	0
05398 1345                        00            .byte	0
05399 1346                        00            .byte	0
05400 1347                        00            .byte	0
05401 1348                        00            .byte	0
05402                                           ! 844  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05403 1349                        00            .byte	0
05404 134A                        10            .byte	$10
05405 134B                        38            .byte	$38
05406 134C                        6C            .byte	$6C
05407 134D                        C6            .byte	$C6
05408 134E                        C6            .byte	$C6
05409 134F                        FE            .byte	$FE
05410 1350                        00            .byte	0
05411                                           ! 845  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05412 1351                        78            .byte	$78
05413 1352                        CC            .byte	$CC
05414 1353                        C0            .byte	$C0
05415 1354                        CC            .byte	$CC
05416 1355                        78            .byte	$78
05417 1356                        18            .byte	$18
05418 1357                        0C            .byte	$C
05419 1358                        78            .byte	$78
05420                                           ! 846  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05421 1359                        00            .byte	0
05422 135A                        CC            .byte	$CC
05423 135B                        00            .byte	0
05424 135C                        CC            .byte	$CC
05425 135D                        CC            .byte	$CC
05426 135E                        CC            .byte	$CC
05427 135F                        7E            .byte	$7E
05428 1360                        00            .byte	0
05429                                           ! 847  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05430 1361                        1C            .byte	$1C
05431 1362                        00            .byte	0
05432 1363                        78            .byte	$78
05433 1364                        CC            .byte	$CC
05434 1365                        FC            .byte	$FC
05435 1366                        C0            .byte	$C0
05436 1367                        78            .byte	$78
05437 1368                        00            .byte	0
05438                                           ! 848  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05439 1369                        7E            .byte	$7E
05440 136A                        C3            .byte	$C3
05441 136B                        3C            .byte	$3C
05442 136C                        06            .byte	6
05443 136D                        3E            .byte	$3E
05444 136E                        66            .byte	$66
05445 136F                        3F            .byte	$3F
05446 1370                        00            .byte	0
05447                                           ! 849  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05448 1371                        CC            .byte	$CC
05449 1372                        00            .byte	0
05450 1373                        78            .byte	$78
05451 1374                        0C            .byte	$C
05452 1375                        7C            .byte	$7C
05453 1376                        CC            .byte	$CC
05454 1377                        7E            .byte	$7E
05455 1378                        00            .byte	0
05456                                           ! 850  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05457 1379                        E0            .byte	$E0
05458 137A                        00            .byte	0
05459 137B                        78            .byte	$78
05460 137C                        0C            .byte	$C
05461 137D                        7C            .byte	$7C
05462 137E                        CC            .byte	$CC
05463 137F                        7E            .byte	$7E
05464 1380                        00            .byte	0
05465                                           ! 851  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e
05466 1381                        30            .byte	$30
05467 1382                        30            .byte	$30
05468 1383                        78            .byte	$78
05469 1384                        0C            .byte	$C
05470 1385                        7C            .byte	$7C
05471 1386                        CC            .byte	$CC
05472                                           ! 851 , 0x00,
05473 1387                        7E            .byte	$7E
05474 1388                        00            .byte	0
05475                                           ! 852  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05476 1389                        00            .byte	0
05477 138A                        00            .byte	0
05478 138B                        78            .byte	$78
05479 138C                        C0            .byte	$C0
05480 138D                        C0            .byte	$C0
05481 138E                        78            .byte	$78
05482 138F                        0C            .byte	$C
05483 1390                        38            .byte	$38
05484                                           ! 853  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05485 1391                        7E            .byte	$7E
05486 1392                        C3            .byte	$C3
05487 1393                        3C            .byte	$3C
05488 1394                        66            .byte	$66
05489 1395                        7E            .byte	$7E
05490 1396                        60            .byte	$60
05491 1397                        3C            .byte	$3C
05492 1398                        00            .byte	0
05493                                           ! 854  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05494 1399                        CC            .byte	$CC
05495 139A                        00            .byte	0
05496 139B                        78            .byte	$78
05497 139C                        CC            .byte	$CC
05498 139D                        FC            .byte	$FC
05499 139E                        C0            .byte	$C0
05500 139F                        78            .byte	$78
05501 13A0                        00            .byte	0
05502                                           ! 855  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05503 13A1                        E0            .byte	$E0
05504 13A2                        00            .byte	0
05505 13A3                        78            .byte	$78
05506 13A4                        CC            .byte	$CC
05507 13A5                        FC            .byte	$FC
05508 13A6                        C0            .byte	$C0
05509 13A7                        78            .byte	$78
05510 13A8                        00            .byte	0
05511                                           ! 856  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05512 13A9                        CC            .byte	$CC
05513 13AA                        00            .byte	0
05514 13AB                        70            .byte	$70
05515 13AC                        30            .byte	$30
05516 13AD                        30            .byte	$30
05517 13AE                        30            .byte	$30
05518 13AF                        78            .byte	$78
05519 13B0                        00            .byte	0
05520                                           ! 857  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05521 13B1                        7C            .byte	$7C
05522 13B2                        C6            .byte	$C6
05523 13B3                        38            .byte	$38
05524 13B4                        18            .byte	$18
05525 13B5                        18            .byte	$18
05526 13B6                        18            .byte	$18
05527 13B7                        3C            .byte	$3C
05528 13B8                        00            .byte	0
05529                                           ! 858  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05530 13B9                        E0            .byte	$E0
05531 13BA                        00            .byte	0
05532 13BB                        70            .byte	$70
05533 13BC                        30            .byte	$30
05534 13BD                        30            .byte	$30
05535 13BE                        30            .byte	$30
05536 13BF                        78            .byte	$78
05537 13C0                        00            .byte	0
05538                                           ! 859  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05539 13C1                        C6            .byte	$C6
05540 13C2                        38            .byte	$38
05541 13C3                        6C            .byte	$6C
05542 13C4                        C6            .byte	$C6
05543 13C5                        FE            .byte	$FE
05544 13C6                        C6            .byte	$C6
05545 13C7                        C6            .byte	$C6
05546 13C8                        00            .byte	0
05547                                           ! 860  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05548 13C9                        30            .byte	$30
05549 13CA                        30            .byte	$30
05550 13CB                        00            .byte	0
05551 13CC                        78            .byte	$78
05552 13CD                        CC            .byte	$CC
05553 13CE                        FC            .byte	$FC
05554 13CF                        CC            .byte	$CC
05555 13D0                        00            .byte	0
05556                                           ! 861  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05557 13D1                        1C            .byte	$1C
05558 13D2                        00            .byte	0
05559 13D3                        FC            .byte	$FC
05560 13D4                        60            .byte	$60
05561 13D5                        78            .byte	$78
05562 13D6                        60            .byte	$60
05563 13D7                        FC            .byte	$FC
05564 13D8                        00            .byte	0
05565                                           ! 862  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05566 13D9                        00            .byte	0
05567 13DA                        00            .byte	0
05568 13DB                        7F            .byte	$7F
05569 13DC                        0C            .byte	$C
05570 13DD                        7F            .byte	$7F
05571 13DE                        CC            .byte	$CC
05572 13DF                        7F            .byte	$7F
05573 13E0                        00            .byte	0
05574                                           ! 863  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05575 13E1                        3E            .byte	$3E
05576 13E2                        6C            .byte	$6C
05577 13E3                        CC            .byte	$CC
05578 13E4                        FE            .byte	$FE
05579 13E5                        CC            .byte	$CC
05580 13E6                        CC            .byte	$CC
05581 13E7                        CE            .byte	$CE
05582 13E8                        00            .byte	0
05583                                           ! 864  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05584 13E9                        78            .byte	$78
05585 13EA                        CC            .byte	$CC
05586 13EB                        00            .byte	0
05587 13EC                        78            .byte	$78
05588 13ED                        CC            .byte	$CC
05589 13EE                        CC            .byte	$CC
05590 13EF                        78            .byte	$78
05591 13F0                        00            .byte	0
05592                                           ! 865  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05593 13F1                        00            .byte	0
05594 13F2                        CC            .byte	$CC
05595 13F3                        00            .byte	0
05596 13F4                        78            .byte	$78
05597 13F5                        CC            .byte	$CC
05598 13F6                        CC            .byte	$CC
05599 13F7                        78            .byte	$78
05600 13F8                        00            .byte	0
05601                                           ! 866  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05602 13F9                        00            .byte	0
05603 13FA                        E0            .byte	$E0
05604 13FB                        00            .byte	0
05605 13FC                        78            .byte	$78
05606 13FD                        CC            .byte	$CC
05607 13FE                        CC            .byte	$CC
05608 13FF                        78            .byte	$78
05609 1400                        00            .byte	0
05610                                           ! 867  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05611 1401                        78            .byte	$78
05612 1402                        CC            .byte	$CC
05613 1403                        00            .byte	0
05614 1404                        CC            .byte	$CC
05615 1405                        CC            .byte	$CC
05616 1406                        CC            .byte	$CC
05617 1407                        7E            .byte	$7E
05618 1408                        00            .byte	0
05619                                           ! 868  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05620 1409                        00            .byte	0
05621 140A                        E0            .byte	$E0
05622 140B                        00            .byte	0
05623 140C                        CC            .byte	$CC
05624 140D                        CC            .byte	$CC
05625 140E                        CC            .byte	$CC
05626 140F                        7E            .byte	$7E
05627 1410                        00            .byte	0
05628                                           ! 869  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05629 1411                        00            .byte	0
05630 1412                        CC            .byte	$CC
05631 1413                        00            .byte	0
05632 1414                        CC            .byte	$CC
05633 1415                        CC            .byte	$CC
05634 1416                        7C            .byte	$7C
05635 1417                        0C            .byte	$C
05636 1418                        F8            .byte	$F8
05637                                           ! 870  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05638 1419                        C3            .byte	$C3
05639 141A                        18            .byte	$18
05640 141B                        3C            .byte	$3C
05641 141C                        66            .byte	$66
05642 141D                        66            .byte	$66
05643 141E                        3C            .byte	$3C
05644 141F                        18            .byte	$18
05645 1420                        00            .byte	0
05646                                           ! 871  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05647 1421                        CC            .byte	$CC
05648 1422                        00            .byte	0
05649 1423                        CC            .byte	$CC
05650 1424                        CC            .byte	$CC
05651 1425                        CC            .byte	$CC
05652 1426                        CC            .byte	$CC
05653 1427                        78            .byte	$78
05654 1428                        00            .byte	0
05655                                           ! 872  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05656 1429                        18            .byte	$18
05657 142A                        18            .byte	$18
05658 142B                        7E            .byte	$7E
05659 142C                        C0            .byte	$C0
05660 142D                        C0            .byte	$C0
05661 142E                        7E            .byte	$7E
05662 142F                        18            .byte	$18
05663 1430                        18            .byte	$18
05664                                           ! 873  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05665 1431                        38            .byte	$38
05666 1432                        6C            .byte	$6C
05667 1433                        64            .byte	$64
05668 1434                        F0            .byte	$F0
05669 1435                        60            .byte	$60
05670 1436                        E6            .byte	$E6
05671 1437                        FC            .byte	$FC
05672 1438                        00            .byte	0
05673                                           ! 874  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05674 1439                        CC            .byte	$CC
05675 143A                        CC            .byte	$CC
05676 143B                        78            .byte	$78
05677 143C                        FC            .byte	$FC
05678 143D                        30            .byte	$30
05679 143E                        FC            .byte	$FC
05680 143F                        30            .byte	$30
05681 1440                        30            .byte	$30
05682                                           ! 875  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05683 1441                        F8            .byte	$F8
05684 1442                        CC            .byte	$CC
05685 1443                        CC            .byte	$CC
05686 1444                        FA            .byte	$FA
05687 1445                        C6            .byte	$C6
05688 1446                        CF            .byte	$CF
05689 1447                        C6            .byte	$C6
05690 1448                        C7            .byte	$C7
05691                                           ! 876  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05692 1449                        0E            .byte	$E
05693 144A                        1B            .byte	$1B
05694 144B                        18            .byte	$18
05695 144C                        3C            .byte	$3C
05696 144D                        18            .byte	$18
05697 144E                        18            .byte	$18
05698 144F                        D8            .byte	$D8
05699 1450                        70            .byte	$70
05700                                           ! 877  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05701 1451                        1C            .byte	$1C
05702 1452                        00            .byte	0
05703 1453                        78            .byte	$78
05704 1454                        0C            .byte	$C
05705 1455                        7C            .byte	$7C
05706 1456                        CC            .byte	$CC
05707 1457                        7E            .byte	$7E
05708 1458                        00            .byte	0
05709                                           ! 878  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05710 1459                        38            .byte	$38
05711 145A                        00            .byte	0
05712 145B                        70            .byte	$70
05713 145C                        30            .byte	$30
05714 145D                        30            .byte	$30
05715 145E                        30            .byte	$30
05716 145F                        78            .byte	$78
05717 1460                        00            .byte	0
05718                                           ! 879  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05719 1461                        00            .byte	0
05720 1462                        1C            .byte	$1C
05721 1463                        00            .byte	0
05722 1464                        78            .byte	$78
05723 1465                        CC            .byte	$CC
05724 1466                        CC            .byte	$CC
05725 1467                        78            .byte	$78
05726 1468                        00            .byte	0
05727                                           ! 880  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05728 1469                        00            .byte	0
05729 146A                        1C            .byte	$1C
05730 146B                        00            .byte	0
05731 146C                        CC            .byte	$CC
05732 146D                        CC            .byte	$CC
05733 146E                        CC            .byte	$CC
05734 146F                        7E            .byte	$7E
05735 1470                        00            .byte	0
05736                                           ! 881  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05737 1471                        00            .byte	0
05738 1472                        F8            .byte	$F8
05739 1473                        00            .byte	0
05740 1474                        F8            .byte	$F8
05741 1475                        CC            .byte	$CC
05742 1476                        CC            .byte	$CC
05743 1477                        CC            .byte	$CC
05744 1478                        00            .byte	0
05745                                           ! 882  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05746 1479                        FC            .byte	$FC
05747 147A                        00            .byte	0
05748 147B                        CC            .byte	$CC
05749 147C                        EC            .byte	$EC
05750 147D                        FC            .byte	$FC
05751 147E                        DC            .byte	$DC
05752 147F                        CC            .byte	$CC
05753 1480                        00            .byte	0
05754                                           ! 883  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05755 1481                        3C            .byte	$3C
05756 1482                        6C            .byte	$6C
05757 1483                        6C            .byte	$6C
05758 1484                        3E            .byte	$3E
05759 1485                        00            .byte	0
05760 1486                        7E            .byte	$7E
05761 1487                        00            .byte	0
05762 1488                        00            .byte	0
05763                                           ! 884  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05764 1489                        38            .byte	$38
05765 148A                        6C            .byte	$6C
05766 148B                        6C            .byte	$6C
05767 148C                        38            .byte	$38
05768 148D                        00            .byte	0
05769 148E                        7C            .byte	$7C
05770 148F                        00            .byte	0
05771 1490                        00            .byte	0
05772                                           ! 885  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05773 1491                        30            .byte	$30
05774 1492                        00            .byte	0
05775 1493                        30            .byte	$30
05776 1494                        60            .byte	$60
05777 1495                        C0            .byte	$C0
05778 1496                        CC            .byte	$CC
05779 1497                        78            .byte	$78
05780 1498                        00            .byte	0
05781                                           ! 886  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05782 1499                        00            .byte	0
05783 149A                        00            .byte	0
05784 149B                        00            .byte	0
05785 149C                        FC            .byte	$FC
05786 149D                        C0            .byte	$C0
05787 149E                        C0            .byte	$C0
05788 149F                        00            .byte	0
05789 14A0                        00            .byte	0
05790                                           ! 887  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05791 14A1                        00            .byte	0
05792 14A2                        00            .byte	0
05793 14A3                        00            .byte	0
05794 14A4                        FC            .byte	$FC
05795 14A5                        0C            .byte	$C
05796 14A6                        0C            .byte	$C
05797 14A7                        00            .byte	0
05798 14A8                        00            .byte	0
05799                                           ! 888  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05800 14A9                        C3            .byte	$C3
05801 14AA                        C6            .byte	$C6
05802 14AB                        CC            .byte	$CC
05803 14AC                        DE            .byte	$DE
05804 14AD                        33            .byte	$33
05805 14AE                        66            .byte	$66
05806 14AF                        CC            .byte	$CC
05807 14B0                        0F            .byte	$F
05808                                           ! 889  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05809 14B1                        C3            .byte	$C3
05810 14B2                        C6            .byte	$C6
05811 14B3                        CC            .byte	$CC
05812 14B4                        DB            .byte	$DB
05813 14B5                        37            .byte	$37
05814 14B6                        6F            .byte	$6F
05815 14B7                        CF            .byte	$CF
05816 14B8                        03            .byte	3
05817                                           ! 890  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05818 14B9                        18            .byte	$18
05819 14BA                        18            .byte	$18
05820 14BB                        00            .byte	0
05821 14BC                        18            .byte	$18
05822 14BD                        18            .byte	$18
05823 14BE                        18            .byte	$18
05824 14BF                        18            .byte	$18
05825 14C0                        00            .byte	0
05826                                           ! 891  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05827 14C1                        00            .byte	0
05828 14C2                        33            .byte	$33
05829 14C3                        66            .byte	$66
05830 14C4                        CC            .byte	$CC
05831 14C5                        66            .byte	$66
05832 14C6                        33            .byte	$33
05833 14C7                        00            .byte	0
05834 14C8                        00            .byte	0
05835                                           ! 892  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05836 14C9                        00            .byte	0
05837 14CA                        CC            .byte	$CC
05838 14CB                        66            .byte	$66
05839 14CC                        33            .byte	$33
05840 14CD                        66            .byte	$66
05841 14CE                        CC            .byte	$CC
05842 14CF                        00            .byte	0
05843 14D0                        00            .byte	0
05844                                           ! 893  0x22, 0x88, 0x22, 0x88, 0x22, 
05845 14D1                        22            .byte	$22
05846 14D2                        88            .byte	$88
05847 14D3                        22            .byte	$22
05848 14D4                        88            .byte	$88
05849 14D5                        22            .byte	$22
05850                                           ! 893 0x88, 0x22, 0x88,
05851 14D6                        88            .byte	$88
05852 14D7                        22            .byte	$22
05853 14D8                        88            .byte	$88
05854                                           ! 894  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05855 14D9                        55            .byte	$55
05856 14DA                        AA            .byte	$AA
05857 14DB                        55            .byte	$55
05858 14DC                        AA            .byte	$AA
05859 14DD                        55            .byte	$55
05860 14DE                        AA            .byte	$AA
05861 14DF                        55            .byte	$55
05862 14E0                        AA            .byte	$AA
05863                                           ! 895  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05864 14E1                        DB            .byte	$DB
05865 14E2                        77            .byte	$77
05866 14E3                        DB            .byte	$DB
05867 14E4                        EE            .byte	$EE
05868 14E5                        DB            .byte	$DB
05869 14E6                        77            .byte	$77
05870 14E7                        DB            .byte	$DB
05871 14E8                        EE            .byte	$EE
05872                                           ! 896  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05873 14E9                        18            .byte	$18
05874 14EA                        18            .byte	$18
05875 14EB                        18            .byte	$18
05876 14EC                        18            .byte	$18
05877 14ED                        18            .byte	$18
05878 14EE                        18            .byte	$18
05879 14EF                        18            .byte	$18
05880 14F0                        18            .byte	$18
05881                                           ! 897  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05882 14F1                        18            .byte	$18
05883 14F2                        18            .byte	$18
05884 14F3                        18            .byte	$18
05885 14F4                        18            .byte	$18
05886 14F5                        F8            .byte	$F8
05887 14F6                        18            .byte	$18
05888 14F7                        18            .byte	$18
05889 14F8                        18            .byte	$18
05890                                           ! 898  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05891 14F9                        18            .byte	$18
05892 14FA                        18            .byte	$18
05893 14FB                        F8            .byte	$F8
05894 14FC                        18            .byte	$18
05895 14FD                        F8            .byte	$F8
05896 14FE                        18            .byte	$18
05897 14FF                        18            .byte	$18
05898 1500                        18            .byte	$18
05899                                           ! 899  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05900 1501                        36            .byte	$36
05901 1502                        36            .byte	$36
05902 1503                        36            .byte	$36
05903 1504                        36            .byte	$36
05904 1505                        F6            .byte	$F6
05905 1506                        36            .byte	$36
05906 1507                        36            .byte	$36
05907 1508                        36            .byte	$36
05908                                           ! 900  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05909 1509                        00            .byte	0
05910 150A                        00            .byte	0
05911 150B                        00            .byte	0
05912 150C                        00            .byte	0
05913 150D                        FE            .byte	$FE
05914 150E                        36            .byte	$36
05915 150F                        36            .byte	$36
05916 1510                        36            .byte	$36
05917                                           ! 901  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05918 1511                        00            .byte	0
05919 1512                        00            .byte	0
05920 1513                        F8            .byte	$F8
05921 1514                        18            .byte	$18
05922 1515                        F8            .byte	$F8
05923 1516                        18            .byte	$18
05924 1517                        18            .byte	$18
05925 1518                        18            .byte	$18
05926                                           ! 902  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05927 1519                        36            .byte	$36
05928 151A                        36            .byte	$36
05929 151B                        F6            .byte	$F6
05930 151C                        06            .byte	6
05931 151D                        F6            .byte	$F6
05932 151E                        36            .byte	$36
05933 151F                        36            .byte	$36
05934 1520                        36            .byte	$36
05935                                           ! 903  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05936 1521                        36            .byte	$36
05937 1522                        36            .byte	$36
05938 1523                        36            .byte	$36
05939 1524                        36            .byte	$36
05940 1525                        36            .byte	$36
05941 1526                        36            .byte	$36
05942 1527                        36            .byte	$36
05943 1528                        36            .byte	$36
05944                                           ! 904  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05945 1529                        00            .byte	0
05946 152A                        00            .byte	0
05947 152B                        FE            .byte	$FE
05948 152C                        06            .byte	6
05949 152D                        F6            .byte	$F6
05950 152E                        36            .byte	$36
05951 152F                        36            .byte	$36
05952 1530                        36            .byte	$36
05953                                           ! 905  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05954 1531                        36            .byte	$36
05955 1532                        36            .byte	$36
05956 1533                        F6            .byte	$F6
05957 1534                        06            .byte	6
05958 1535                        FE            .byte	$FE
05959 1536                        00            .byte	0
05960 1537                        00            .byte	0
05961 1538                        00            .byte	0
05962                                           ! 906  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05963 1539                        36            .byte	$36
05964 153A                        36            .byte	$36
05965 153B                        36            .byte	$36
05966 153C                        36            .byte	$36
05967 153D                        FE            .byte	$FE
05968 153E                        00            .byte	0
05969 153F                        00            .byte	0
05970 1540                        00            .byte	0
05971                                           ! 907  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05972 1541                        18            .byte	$18
05973 1542                        18            .byte	$18
05974 1543                        F8            .byte	$F8
05975 1544                        18            .byte	$18
05976 1545                        F8            .byte	$F8
05977 1546                        00            .byte	0
05978 1547                        00            .byte	0
05979 1548                        00            .byte	0
05980                                           ! 908  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05981 1549                        00            .byte	0
05982 154A                        00            .byte	0
05983 154B                        00            .byte	0
05984 154C                        00            .byte	0
05985 154D                        F8            .byte	$F8
05986 154E                        18            .byte	$18
05987 154F                        18            .byte	$18
05988 1550                        18            .byte	$18
05989                                           ! 909  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05990 1551                        18            .byte	$18
05991 1552                        18            .byte	$18
05992 1553                        18            .byte	$18
05993 1554                        18            .byte	$18
05994 1555                        1F            .byte	$1F
05995 1556                        00            .byte	0
05996 1557                        00            .byte	0
05997 1558                        00            .byte	0
05998                                           ! 910  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05999 1559                        18            .byte	$18
06000 155A                        18            .byte	$18
06001 155B                        18            .byte	$18
06002 155C                        18            .byte	$18
06003 155D                        FF            .byte	$FF
06004 155E                        00            .byte	0
06005 155F                        00            .byte	0
06006 1560                        00            .byte	0
06007                                           ! 911  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06008 1561                        00            .byte	0
06009 1562                        00            .byte	0
06010 1563                        00            .byte	0
06011 1564                        00            .byte	0
06012 1565                        FF            .byte	$FF
06013 1566                        18            .byte	$18
06014 1567                        18            .byte	$18
06015 1568                        18            .byte	$18
06016                                           ! 912  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06017 1569                        18            .byte	$18
06018 156A                        18            .byte	$18
06019 156B                        18            .byte	$18
06020 156C                        18            .byte	$18
06021 156D                        1F            .byte	$1F
06022 156E                        18            .byte	$18
06023 156F                        18            .byte	$18
06024 1570                        18            .byte	$18
06025                                           ! 913  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06026 1571                        00            .byte	0
06027 1572                        00            .byte	0
06028 1573                        00            .byte	0
06029 1574                        00            .byte	0
06030 1575                        FF            .byte	$FF
06031 1576                        00            .byte	0
06032 1577                        00            .byte	0
06033 1578                        00            .byte	0
06034                                           ! 914  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06035 1579                        18            .byte	$18
06036 157A                        18            .byte	$18
06037 157B                        18            .byte	$18
06038 157C                        18            .byte	$18
06039 157D                        FF            .byte	$FF
06040 157E                        18            .byte	$18
06041 157F                        18            .byte	$18
06042 1580                        18            .byte	$18
06043                                           ! 915  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06044 1581                        18            .byte	$18
06045 1582                        18            .byte	$18
06046 1583                        1F            .byte	$1F
06047 1584                        18            .byte	$18
06048 1585                        1F            .byte	$1F
06049 1586                        18            .byte	$18
06050 1587                        18            .byte	$18
06051 1588                        18            .byte	$18
06052                                           ! 916  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06053 1589                        36            .byte	$36
06054 158A                        36            .byte	$36
06055 158B                        36            .byte	$36
06056 158C                        36            .byte	$36
06057 158D                        37            .byte	$37
06058 158E                        36            .byte	$36
06059 158F                        36            .byte	$36
06060 1590                        36            .byte	$36
06061                                           ! 917  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06062 1591                        36            .byte	$36
06063 1592                        36            .byte	$36
06064 1593                        37            .byte	$37
06065 1594                        30            .byte	$30
06066 1595                        3F            .byte	$3F
06067 1596                        00            .byte	0
06068 1597                        00            .byte	0
06069 1598                        00            .byte	0
06070                                           ! 918  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06071 1599                        00            .byte	0
06072 159A                        00            .byte	0
06073 159B                        3F            .byte	$3F
06074 159C                        30            .byte	$30
06075 159D                        37            .byte	$37
06076 159E                        36            .byte	$36
06077 159F                        36            .byte	$36
06078 15A0                        36            .byte	$36
06079                                           ! 919  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06080 15A1                        36            .byte	$36
06081 15A2                        36            .byte	$36
06082 15A3                        F7            .byte	$F7
06083 15A4                        00            .byte	0
06084 15A5                        FF            .byte	$FF
06085 15A6                        00            .byte	0
06086 15A7                        00            .byte	0
06087 15A8                        00            .byte	0
06088                                           ! 920  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06089 15A9                        00            .byte	0
06090 15AA                        00            .byte	0
06091 15AB                        FF            .byte	$FF
06092 15AC                        00            .byte	0
06093 15AD                        F7            .byte	$F7
06094 15AE                        36            .byte	$36
06095 15AF                        36            .byte	$36
06096 15B0                        36            .byte	$36
06097                                           ! 921  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06098 15B1                        36            .byte	$36
06099 15B2                        36            .byte	$36
06100 15B3                        37            .byte	$37
06101 15B4                        30            .byte	$30
06102 15B5                        37            .byte	$37
06103 15B6                        36            .byte	$36
06104 15B7                        36            .byte	$36
06105 15B8                        36            .byte	$36
06106                                           ! 922  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06107 15B9                        00            .byte	0
06108 15BA                        00            .byte	0
06109 15BB                        FF            .byte	$FF
06110 15BC                        00            .byte	0
06111 15BD                        FF            .byte	$FF
06112 15BE                        00            .byte	0
06113 15BF                        00            .byte	0
06114 15C0                        00            .byte	0
06115                                           ! 923  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06116 15C1                        36            .byte	$36
06117 15C2                        36            .byte	$36
06118 15C3                        F7            .byte	$F7
06119 15C4                        00            .byte	0
06120 15C5                        F7            .byte	$F7
06121 15C6                        36            .byte	$36
06122 15C7                        36            .byte	$36
06123 15C8                        36            .byte	$36
06124                                           ! 924  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06125 15C9                        18            .byte	$18
06126 15CA                        18            .byte	$18
06127 15CB                        FF            .byte	$FF
06128 15CC                        00            .byte	0
06129 15CD                        FF            .byte	$FF
06130 15CE                        00            .byte	0
06131 15CF                        00            .byte	0
06132 15D0                        00            .byte	0
06133                                           ! 925  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06134 15D1                        36            .byte	$36
06135 15D2                        36            .byte	$36
06136 15D3                        36            .byte	$36
06137 15D4                        36            .byte	$36
06138 15D5                        FF            .byte	$FF
06139 15D6                        00            .byte	0
06140 15D7                        00            .byte	0
06141 15D8                        00            .byte	0
06142                                           ! 926  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06143 15D9                        00            .byte	0
06144 15DA                        00            .byte	0
06145 15DB                        FF            .byte	$FF
06146 15DC                        00            .byte	0
06147 15DD                        FF            .byte	$FF
06148 15DE                        18            .byte	$18
06149 15DF                        18            .byte	$18
06150 15E0                        18            .byte	$18
06151                                           ! 927  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06152 15E1                        00            .byte	0
06153 15E2                        00            .byte	0
06154 15E3                        00            .byte	0
06155 15E4                        00            .byte	0
06156 15E5                        FF            .byte	$FF
06157 15E6                        36            .byte	$36
06158 15E7                        36            .byte	$36
06159 15E8                        36            .byte	$36
06160                                           ! 928  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06161 15E9                        36            .byte	$36
06162 15EA                        36            .byte	$36
06163 15EB                        36            .byte	$36
06164 15EC                        36            .byte	$36
06165 15ED                        3F            .byte	$3F
06166 15EE                        00            .byte	0
06167 15EF                        00            .byte	0
06168 15F0                        00            .byte	0
06169                                           ! 929  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06170 15F1                        18            .byte	$18
06171 15F2                        18            .byte	$18
06172 15F3                        1F            .byte	$1F
06173 15F4                        18            .byte	$18
06174 15F5                        1F            .byte	$1F
06175 15F6                        00            .byte	0
06176 15F7                        00            .byte	0
06177 15F8                        00            .byte	0
06178                                           ! 930  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06179 15F9                        00            .byte	0
06180 15FA                        00            .byte	0
06181 15FB                        1F            .byte	$1F
06182 15FC                        18            .byte	$18
06183 15FD                        1F            .byte	$1F
06184 15FE                        18            .byte	$18
06185 15FF                        18            .byte	$18
06186 1600                        18            .byte	$18
06187                                           ! 931  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06188 1601                        00            .byte	0
06189 1602                        00            .byte	0
06190 1603                        00            .byte	0
06191 1604                        00            .byte	0
06192 1605                        3F            .byte	$3F
06193 1606                        36            .byte	$36
06194 1607                        36            .byte	$36
06195 1608                        36            .byte	$36
06196                                           ! 932  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06197 1609                        36            .byte	$36
06198 160A                        36            .byte	$36
06199 160B                        36            .byte	$36
06200 160C                        36            .byte	$36
06201 160D                        FF            .byte	$FF
06202 160E                        36            .byte	$36
06203 160F                        36            .byte	$36
06204 1610                        36            .byte	$36
06205                                           ! 933  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06206 1611                        18            .byte	$18
06207 1612                        18            .byte	$18
06208 1613                        FF            .byte	$FF
06209 1614                        18            .byte	$18
06210 1615                        FF            .byte	$FF
06211 1616                        18            .byte	$18
06212 1617                        18            .byte	$18
06213 1618                        18            .byte	$18
06214                                           ! 934  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06215 1619                        18            .byte	$18
06216 161A                        18            .byte	$18
06217 161B                        18            .byte	$18
06218 161C                        18            .byte	$18
06219 161D                        F8            .byte	$F8
06220 161E                        00            .byte	0
06221 161F                        00            .byte	0
06222 1620                        00            .byte	0
06223                                           ! 935  0x00, 0x00, 0x00, 0x
06224 1621                        00            .byte	0
06225 1622                        00            .byte	0
06226 1623                        00            .byte	0
06227                                           ! 935 00, 0x1f, 0x18, 0x18, 0x18,
06228 1624                        00            .byte	0
06229 1625                        1F            .byte	$1F
06230 1626                        18            .byte	$18
06231 1627                        18            .byte	$18
06232 1628                        18            .byte	$18
06233                                           ! 936  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06234 1629                        FF            .byte	$FF
06235 162A                        FF            .byte	$FF
06236 162B                        FF            .byte	$FF
06237 162C                        FF            .byte	$FF
06238 162D                        FF            .byte	$FF
06239 162E                        FF            .byte	$FF
06240 162F                        FF            .byte	$FF
06241 1630                        FF            .byte	$FF
06242                                           ! 937  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06243 1631                        00            .byte	0
06244 1632                        00            .byte	0
06245 1633                        00            .byte	0
06246 1634                        00            .byte	0
06247 1635                        FF            .byte	$FF
06248 1636                        FF            .byte	$FF
06249 1637                        FF            .byte	$FF
06250 1638                        FF            .byte	$FF
06251                                           ! 938  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06252 1639                        F0            .byte	$F0
06253 163A                        F0            .byte	$F0
06254 163B                        F0            .byte	$F0
06255 163C                        F0            .byte	$F0
06256 163D                        F0            .byte	$F0
06257 163E                        F0            .byte	$F0
06258 163F                        F0            .byte	$F0
06259 1640                        F0            .byte	$F0
06260                                           ! 939  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06261 1641                        0F            .byte	$F
06262 1642                        0F            .byte	$F
06263 1643                        0F            .byte	$F
06264 1644                        0F            .byte	$F
06265 1645                        0F            .byte	$F
06266 1646                        0F            .byte	$F
06267 1647                        0F            .byte	$F
06268 1648                        0F            .byte	$F
06269                                           ! 940  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06270 1649                        FF            .byte	$FF
06271 164A                        FF            .byte	$FF
06272 164B                        FF            .byte	$FF
06273 164C                        FF            .byte	$FF
06274 164D                        00            .byte	0
06275 164E                        00            .byte	0
06276 164F                        00            .byte	0
06277 1650                        00            .byte	0
06278                                           ! 941  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06279 1651                        00            .byte	0
06280 1652                        00            .byte	0
06281 1653                        76            .byte	$76
06282 1654                        DC            .byte	$DC
06283 1655                        C8            .byte	$C8
06284 1656                        DC            .byte	$DC
06285 1657                        76            .byte	$76
06286 1658                        00            .byte	0
06287                                           ! 942  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06288 1659                        00            .byte	0
06289 165A                        78            .byte	$78
06290 165B                        CC            .byte	$CC
06291 165C                        F8            .byte	$F8
06292 165D                        CC            .byte	$CC
06293 165E                        F8            .byte	$F8
06294 165F                        C0            .byte	$C0
06295 1660                        C0            .byte	$C0
06296                                           ! 943  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06297 1661                        00            .byte	0
06298 1662                        FC            .byte	$FC
06299 1663                        CC            .byte	$CC
06300 1664                        C0            .byte	$C0
06301 1665                        C0            .byte	$C0
06302 1666                        C0            .byte	$C0
06303 1667                        C0            .byte	$C0
06304 1668                        00            .byte	0
06305                                           ! 944  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06306 1669                        00            .byte	0
06307 166A                        FE            .byte	$FE
06308 166B                        6C            .byte	$6C
06309 166C                        6C            .byte	$6C
06310 166D                        6C            .byte	$6C
06311 166E                        6C            .byte	$6C
06312 166F                        6C            .byte	$6C
06313 1670                        00            .byte	0
06314                                           ! 945  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06315 1671                        FC            .byte	$FC
06316 1672                        CC            .byte	$CC
06317 1673                        60            .byte	$60
06318 1674                        30            .byte	$30
06319 1675                        60            .byte	$60
06320 1676                        CC            .byte	$CC
06321 1677                        FC            .byte	$FC
06322 1678                        00            .byte	0
06323                                           ! 946  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06324 1679                        00            .byte	0
06325 167A                        00            .byte	0
06326 167B                        7E            .byte	$7E
06327 167C                        D8            .byte	$D8
06328 167D                        D8            .byte	$D8
06329 167E                        D8            .byte	$D8
06330 167F                        70            .byte	$70
06331 1680                        00            .byte	0
06332                                           ! 947  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06333 1681                        00            .byte	0
06334 1682                        66            .byte	$66
06335 1683                        66            .byte	$66
06336 1684                        66            .byte	$66
06337 1685                        66            .byte	$66
06338 1686                        7C            .byte	$7C
06339 1687                        60            .byte	$60
06340 1688                        C0            .byte	$C0
06341                                           ! 948  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06342 1689                        00            .byte	0
06343 168A                        76            .byte	$76
06344 168B                        DC            .byte	$DC
06345 168C                        18            .byte	$18
06346 168D                        18            .byte	$18
06347 168E                        18            .byte	$18
06348 168F                        18            .byte	$18
06349 1690                        00            .byte	0
06350                                           ! 949  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06351 1691                        FC            .byte	$FC
06352 1692                        30            .byte	$30
06353 1693                        78            .byte	$78
06354 1694                        CC            .byte	$CC
06355 1695                        CC            .byte	$CC
06356 1696                        78            .byte	$78
06357 1697                        30            .byte	$30
06358 1698                        FC            .byte	$FC
06359                                           ! 950  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06360 1699                        38            .byte	$38
06361 169A                        6C            .byte	$6C
06362 169B                        C6            .byte	$C6
06363 169C                        FE            .byte	$FE
06364 169D                        C6            .byte	$C6
06365 169E                        6C            .byte	$6C
06366 169F                        38            .byte	$38
06367 16A0                        00            .byte	0
06368                                           ! 951  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06369 16A1                        38            .byte	$38
06370 16A2                        6C            .byte	$6C
06371 16A3                        C6            .byte	$C6
06372 16A4                        C6            .byte	$C6
06373 16A5                        6C            .byte	$6C
06374 16A6                        6C            .byte	$6C
06375 16A7                        EE            .byte	$EE
06376 16A8                        00            .byte	0
06377                                           ! 952  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06378 16A9                        1C            .byte	$1C
06379 16AA                        30            .byte	$30
06380 16AB                        18            .byte	$18
06381 16AC                        7C            .byte	$7C
06382 16AD                        CC            .byte	$CC
06383 16AE                        CC            .byte	$CC
06384 16AF                        78            .byte	$78
06385 16B0                        00            .byte	0
06386                                           ! 953  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06387 16B1                        00            .byte	0
06388 16B2                        00            .byte	0
06389 16B3                        7E            .byte	$7E
06390 16B4                        DB            .byte	$DB
06391 16B5                        DB            .byte	$DB
06392 16B6                        7E            .byte	$7E
06393 16B7                        00            .byte	0
06394 16B8                        00            .byte	0
06395                                           ! 954  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06396 16B9                        06            .byte	6
06397 16BA                        0C            .byte	$C
06398 16BB                        7E            .byte	$7E
06399 16BC                        DB            .byte	$DB
06400 16BD                        DB            .byte	$DB
06401 16BE                        7E            .byte	$7E
06402 16BF                        60            .byte	$60
06403 16C0                        C0            .byte	$C0
06404                                           ! 955  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06405 16C1                        38            .byte	$38
06406 16C2                        60            .byte	$60
06407 16C3                        C0            .byte	$C0
06408 16C4                        F8            .byte	$F8
06409 16C5                        C0            .byte	$C0
06410 16C6                        60            .byte	$60
06411 16C7                        38            .byte	$38
06412 16C8                        00            .byte	0
06413                                           ! 956  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06414 16C9                        78            .byte	$78
06415 16CA                        CC            .byte	$CC
06416 16CB                        CC            .byte	$CC
06417 16CC                        CC            .byte	$CC
06418 16CD                        CC            .byte	$CC
06419 16CE                        CC            .byte	$CC
06420 16CF                        CC            .byte	$CC
06421 16D0                        00            .byte	0
06422                                           ! 957  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06423 16D1                        00            .byte	0
06424 16D2                        FC            .byte	$FC
06425 16D3                        00            .byte	0
06426 16D4                        FC            .byte	$FC
06427 16D5                        00            .byte	0
06428 16D6                        FC            .byte	$FC
06429 16D7                        00            .byte	0
06430 16D8                        00            .byte	0
06431                                           ! 958  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06432 16D9                        30            .byte	$30
06433 16DA                        30            .byte	$30
06434 16DB                        FC            .byte	$FC
06435 16DC                        30            .byte	$30
06436 16DD                        30            .byte	$30
06437 16DE                        00            .byte	0
06438 16DF                        FC            .byte	$FC
06439 16E0                        00            .byte	0
06440                                           ! 959  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06441 16E1                        60            .byte	$60
06442 16E2                        30            .byte	$30
06443 16E3                        18            .byte	$18
06444 16E4                        30            .byte	$30
06445 16E5                        60            .byte	$60
06446 16E6                        00            .byte	0
06447 16E7                        FC            .byte	$FC
06448 16E8                        00            .byte	0
06449                                           ! 960  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06450 16E9                        18            .byte	$18
06451 16EA                        30            .byte	$30
06452 16EB                        60            .byte	$60
06453 16EC                        30            .byte	$30
06454 16ED                        18            .byte	$18
06455 16EE                        00            .byte	0
06456 16EF                        FC            .byte	$FC
06457 16F0                        00            .byte	0
06458                                           ! 961  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06459 16F1                        0E            .byte	$E
06460 16F2                        1B            .byte	$1B
06461 16F3                        1B            .byte	$1B
06462 16F4                        18            .byte	$18
06463 16F5                        18            .byte	$18
06464 16F6                        18            .byte	$18
06465 16F7                        18            .byte	$18
06466 16F8                        18            .byte	$18
06467                                           ! 962  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06468 16F9                        18            .byte	$18
06469 16FA                        18            .byte	$18
06470 16FB                        18            .byte	$18
06471 16FC                        18            .byte	$18
06472 16FD                        18            .byte	$18
06473 16FE                        D8            .byte	$D8
06474 16FF                        D8            .byte	$D8
06475 1700                        70            .byte	$70
06476                                           ! 963  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06477 1701                        30            .byte	$30
06478 1702                        30            .byte	$30
06479 1703                        00            .byte	0
06480 1704                        FC            .byte	$FC
06481 1705                        00            .byte	0
06482 1706                        30            .byte	$30
06483 1707                        30            .byte	$30
06484 1708                        00            .byte	0
06485                                           ! 964  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06486 1709                        00            .byte	0
06487 170A                        76            .byte	$76
06488 170B                        DC            .byte	$DC
06489 170C                        00            .byte	0
06490 170D                        76            .byte	$76
06491 170E                        DC            .byte	$DC
06492 170F                        00            .byte	0
06493 1710                        00            .byte	0
06494                                           ! 965  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06495 1711                        38            .byte	$38
06496 1712                        6C            .byte	$6C
06497 1713                        6C            .byte	$6C
06498 1714                        38            .byte	$38
06499 1715                        00            .byte	0
06500 1716                        00            .byte	0
06501 1717                        00            .byte	0
06502 1718                        00            .byte	0
06503                                           ! 966  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06504 1719                        00            .byte	0
06505 171A                        00            .byte	0
06506 171B                        00            .byte	0
06507 171C                        18            .byte	$18
06508 171D                        18            .byte	$18
06509 171E                        00            .byte	0
06510 171F                        00            .byte	0
06511 1720                        00            .byte	0
06512                                           ! 967  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06513 1721                        00            .byte	0
06514 1722                        00            .byte	0
06515 1723                        00            .byte	0
06516 1724                        00            .byte	0
06517 1725                        18            .byte	$18
06518 1726                        00            .byte	0
06519 1727                        00            .byte	0
06520 1728                        00            .byte	0
06521                                           ! 968  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06522 1729                        0F            .byte	$F
06523 172A                        0C            .byte	$C
06524 172B                        0C            .byte	$C
06525 172C                        0C            .byte	$C
06526 172D                        EC            .byte	$EC
06527 172E                        6C            .byte	$6C
06528 172F                        3C            .byte	$3C
06529 1730                        1C            .byte	$1C
06530                                           ! 969  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06531 1731                        78            .byte	$78
06532 1732                        6C            .byte	$6C
06533 1733                        6C            .byte	$6C
06534 1734                        6C            .byte	$6C
06535 1735                        6C            .byte	$6C
06536 1736                        00            .byte	0
06537 1737                        00            .byte	0
06538 1738                        00            .byte	0
06539                                           ! 970  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06540 1739                        70            .byte	$70
06541 173A                        18            .byte	$18
06542 173B                        30            .byte	$30
06543 173C                        60            .byte	$60
06544 173D                        78            .byte	$78
06545 173E                        00            .byte	0
06546 173F                        00            .byte	0
06547 1740                        00            .byte	0
06548                                           ! 971  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06549 1741                        00            .byte	0
06550 1742                        00            .byte	0
06551 1743                        3C            .byte	$3C
06552 1744                        3C            .byte	$3C
06553 1745                        3C            .byte	$3C
06554 1746                        3C            .byte	$3C
06555 1747                        00            .byte	0
06556 1748                        00            .byte	0
06557                                           ! 972  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06558 1749                        00            .byte	0
06559 174A                        00            .byte	0
06560 174B                        00            .byte	0
06561 174C                        00            .byte	0
06562 174D                        00            .byte	0
06563 174E                        00            .byte	0
06564 174F                        00            .byte	0
06565                                           ! 973 };
06566 1750                        00            .byte	0
06567                                           !BCC_EOS
06568                                           ! 974 static Bit8u vgafont14[256*14]=
06569                                           ! 975 {
06570                       00001751            _vgafont14:
06571                                           ! 976  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06572 1751                        00            .byte	0
06573 1752                        00            .byte	0
06574 1753                        00            .byte	0
06575 1754                        00            .byte	0
06576 1755                        00            .byte	0
06577 1756                        00            .byte	0
06578 1757                        00            .byte	0
06579 1758                        00            .byte	0
06580 1759                        00            .byte	0
06581 175A                        00            .byte	0
06582 175B                        00            .byte	0
06583 175C                        00            .byte	0
06584 175D                        00            .byte	0
06585 175E                        00            .byte	0
06586                                           ! 977  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06587 175F                        00            .byte	0
06588 1760                        00            .byte	0
06589 1761                        7E            .byte	$7E
06590 1762                        81            .byte	$81
06591 1763                        A5            .byte	$A5
06592 1764                        81            .byte	$81
06593 1765                        81            .byte	$81
06594 1766                        BD            .byte	$BD
06595 1767                        99            .byte	$99
06596 1768                        81            .byte	$81
06597 1769                        7E            .byte	$7E
06598 176A                        00            .byte	0
06599 176B                        00            .byte	0
06600 176C                        00            .byte	0
06601                                           ! 978  
06602                                           ! 978 0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06603 176D                        00            .byte	0
06604 176E                        00            .byte	0
06605 176F                        7E            .byte	$7E
06606 1770                        FF            .byte	$FF
06607 1771                        DB            .byte	$DB
06608 1772                        FF            .byte	$FF
06609 1773                        FF            .byte	$FF
06610 1774                        C3            .byte	$C3
06611 1775                        E7            .byte	$E7
06612 1776                        FF            .byte	$FF
06613 1777                        7E            .byte	$7E
06614 1778                        00            .byte	0
06615 1779                        00            .byte	0
06616 177A                        00            .byte	0
06617                                           ! 979  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06618 177B                        00            .byte	0
06619 177C                        00            .byte	0
06620 177D                        00            .byte	0
06621 177E                        6C            .byte	$6C
06622 177F                        FE            .byte	$FE
06623 1780                        FE            .byte	$FE
06624 1781                        FE            .byte	$FE
06625 1782                        FE            .byte	$FE
06626 1783                        7C            .byte	$7C
06627 1784                        38            .byte	$38
06628 1785                        10            .byte	$10
06629 1786                        00            .byte	0
06630 1787                        00            .byte	0
06631 1788                        00            .byte	0
06632                                           ! 980  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06633 1789                        00            .byte	0
06634 178A                        00            .byte	0
06635 178B                        00            .byte	0
06636 178C                        10            .byte	$10
06637 178D                        38            .byte	$38
06638 178E                        7C            .byte	$7C
06639 178F                        FE            .byte	$FE
06640 1790                        7C            .byte	$7C
06641 1791                        38            .byte	$38
06642 1792                        10            .byte	$10
06643 1793                        00            .byte	0
06644 1794                        00            .byte	0
06645 1795                        00            .byte	0
06646 1796                        00            .byte	0
06647                                           ! 981  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06648 1797                        00            .byte	0
06649 1798                        00            .byte	0
06650 1799                        18            .byte	$18
06651 179A                        3C            .byte	$3C
06652 179B                        3C            .byte	$3C
06653 179C                        E7            .byte	$E7
06654 179D                        E7            .byte	$E7
06655 179E                        E7            .byte	$E7
06656 179F                        18            .byte	$18
06657 17A0                        18            .byte	$18
06658 17A1                        3C            .byte	$3C
06659 17A2                        00            .byte	0
06660 17A3                        00            .byte	0
06661 17A4                        00            .byte	0
06662                                           ! 982  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06663 17A5                        00            .byte	0
06664 17A6                        00            .byte	0
06665 17A7                        18            .byte	$18
06666 17A8                        3C            .byte	$3C
06667 17A9                        7E            .byte	$7E
06668 17AA                        FF            .byte	$FF
06669 17AB                        FF            .byte	$FF
06670 17AC                        7E            .byte	$7E
06671 17AD                        18            .byte	$18
06672 17AE                        18            .byte	$18
06673 17AF                        3C            .byte	$3C
06674 17B0                        00            .byte	0
06675 17B1                        00            .byte	0
06676 17B2                        00            .byte	0
06677                                           ! 983  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06678 17B3                        00            .byte	0
06679 17B4                        00            .byte	0
06680 17B5                        00            .byte	0
06681 17B6                        00            .byte	0
06682 17B7                        00            .byte	0
06683 17B8                        18            .byte	$18
06684 17B9                        3C            .byte	$3C
06685 17BA                        3C            .byte	$3C
06686 17BB                        18            .byte	$18
06687 17BC                        00            .byte	0
06688 17BD                        00            .byte	0
06689 17BE                        00            .byte	0
06690 17BF                        00            .byte	0
06691 17C0                        00            .byte	0
06692                                           ! 984  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06693 17C1                        FF            .byte	$FF
06694 17C2                        FF            .byte	$FF
06695 17C3                        FF            .byte	$FF
06696 17C4                        FF            .byte	$FF
06697 17C5                        FF            .byte	$FF
06698 17C6                        E7            .byte	$E7
06699 17C7                        C3            .byte	$C3
06700 17C8                        C3            .byte	$C3
06701 17C9                        E7            .byte	$E7
06702 17CA                        FF            .byte	$FF
06703 17CB                        FF            .byte	$FF
06704 17CC                        FF            .byte	$FF
06705 17CD                        FF            .byte	$FF
06706 17CE                        FF            .byte	$FF
06707                                           ! 985  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06708 17CF                        00            .byte	0
06709 17D0                        00            .byte	0
06710 17D1                        00            .byte	0
06711 17D2                        00            .byte	0
06712 17D3                        3C            .byte	$3C
06713 17D4                        66            .byte	$66
06714 17D5                        42            .byte	$42
06715 17D6                        42            .byte	$42
06716 17D7                        66            .byte	$66
06717 17D8                        3C            .byte	$3C
06718 17D9                        00            .byte	0
06719 17DA                        00            .byte	0
06720 17DB                        00            .byte	0
06721 17DC                        00            .byte	0
06722                                           ! 986  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06723 17DD                        FF            .byte	$FF
06724 17DE                        FF            .byte	$FF
06725 17DF                        FF            .byte	$FF
06726 17E0                        FF            .byte	$FF
06727 17E1                        C3            .byte	$C3
06728 17E2                        99            .byte	$99
06729 17E3                        BD            .byte	$BD
06730 17E4                        BD            .byte	$BD
06731 17E5                        99            .byte	$99
06732 17E6                        C3            .byte	$C3
06733 17E7                        FF            .byte	$FF
06734 17E8                        FF            .byte	$FF
06735 17E9                        FF            .byte	$FF
06736 17EA                        FF            .byte	$FF
06737                                           ! 987  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06738 17EB                        00            .byte	0
06739 17EC                        00            .byte	0
06740 17ED                        1E            .byte	$1E
06741 17EE                        0E            .byte	$E
06742 17EF                        1A            .byte	$1A
06743 17F0                        32            .byte	$32
06744 17F1                        78            .byte	$78
06745 17F2                        CC            .byte	$CC
06746 17F3                        CC            .byte	$CC
06747 17F4                        CC            .byte	$CC
06748 17F5                        78            .byte	$78
06749 17F6                        00            .byte	0
06750 17F7                        00            .byte	0
06751 17F8                        00            .byte	0
06752                                           ! 988  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06753 17F9                        00            .byte	0
06754 17FA                        00            .byte	0
06755 17FB                        3C            .byte	$3C
06756 17FC                        66            .byte	$66
06757 17FD                        66            .byte	$66
06758 17FE                        66            .byte	$66
06759 17FF                        3C            .byte	$3C
06760 1800                        18            .byte	$18
06761 1801                        7E            .byte	$7E
06762 1802                        18            .byte	$18
06763 1803                        18            .byte	$18
06764 1804                        00            .byte	0
06765 1805                        00            .byte	0
06766 1806                        00            .byte	0
06767                                           ! 989  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06768 1807                        00            .byte	0
06769 1808                        00            .byte	0
06770 1809                        3F            .byte	$3F
06771 180A                        33            .byte	$33
06772 180B                        3F            .byte	$3F
06773 180C                        30            .byte	$30
06774 180D                        30            .byte	$30
06775 180E                        30            .byte	$30
06776 180F                        70            .byte	$70
06777 1810                        F0            .byte	$F0
06778 1811                        E0            .byte	$E0
06779 1812                        00            .byte	0
06780 1813                        00            .byte	0
06781 1814                        00            .byte	0
06782                                           ! 990  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06783 1815                        00            .byte	0
06784 1816                        00            .byte	0
06785 1817                        7F            .byte	$7F
06786 1818                        63            .byte	$63
06787 1819                        7F            .byte	$7F
06788 181A                        63            .byte	$63
06789 181B                        63            .byte	$63
06790 181C                        63            .byte	$63
06791 181D                        67            .byte	$67
06792 181E                        E7            .byte	$E7
06793 181F                        E6            .byte	$E6
06794 1820                        C0            .byte	$C0
06795 1821                        00            .byte	0
06796 1822                        00            .byte	0
06797                                           ! 991  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06798 1823                        00            .byte	0
06799 1824                        00            .byte	0
06800 1825                        18            .byte	$18
06801 1826                        18            .byte	$18
06802 1827                        DB            .byte	$DB
06803 1828                        3C            .byte	$3C
06804 1829                        E7            .byte	$E7
06805 182A                        3C            .byte	$3C
06806 182B                        DB            .byte	$DB
06807 182C                        18            .byte	$18
06808 182D                        18            .byte	$18
06809 182E                        00            .byte	0
06810 182F                        00            .byte	0
06811 1830                        00            .byte	0
06812                                           ! 992  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06813 1831                        00            .byte	0
06814 1832                        00            .byte	0
06815 1833                        80            .byte	$80
06816 1834                        C0            .byte	$C0
06817 1835                        E0            .byte	$E0
06818 1836                        F8            .byte	$F8
06819 1837                        FE            .byte	$FE
06820 1838                        F8            .byte	$F8
06821 1839                        E0            .byte	$E0
06822 183A                        C0            .byte	$C0
06823 183B                        80            .byte	$80
06824 183C                        00            .byte	0
06825 183D                        00            .byte	0
06826 183E                        00            .byte	0
06827                                           ! 993  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06828 183F                        00            .byte	0
06829 1840                        00            .byte	0
06830 1841                        02            .byte	2
06831 1842                        06            .byte	6
06832 1843                        0E            .byte	$E
06833 1844                        3E            .byte	$3E
06834 1845                        FE            .byte	$FE
06835 1846                        3E            .byte	$3E
06836 1847                        0E            .byte	$E
06837 1848                        06            .byte	6
06838 1849                        02            .byte	2
06839 184A                        00            .byte	0
06840 184B                        00            .byte	0
06841 184C                        00            .byte	0
06842                                           ! 994  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06843 184D                        00            .byte	0
06844 184E                        00            .byte	0
06845 184F                        18            .byte	$18
06846 1850                        3C            .byte	$3C
06847 1851                        7E            .byte	$7E
06848 1852                        18            .byte	$18
06849 1853                        18            .byte	$18
06850 1854                        18            .byte	$18
06851 1855                        7E            .byte	$7E
06852 1856                        3C            .byte	$3C
06853 1857                        18            .byte	$18
06854 1858                        00            .byte	0
06855 1859                        00            .byte	0
06856 185A                        00            .byte	0
06857                                           ! 995  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06858 185B                        00            .byte	0
06859 185C                        00            .byte	0
06860 185D                        66            .byte	$66
06861 185E                        66            .byte	$66
06862 185F                        66            .byte	$66
06863 1860                        66            .byte	$66
06864 1861                        66            .byte	$66
06865 1862                        66            .byte	$66
06866 1863                        00            .byte	0
06867 1864                        66            .byte	$66
06868 1865                        66            .byte	$66
06869 1866                        00            .byte	0
06870 1867                        00            .byte	0
06871 1868                        00            .byte	0
06872                                           ! 996  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06873 1869                        00            .byte	0
06874 186A                        00            .byte	0
06875 186B                        7F            .byte	$7F
06876 186C                        DB            .byte	$DB
06877 186D                        DB            .byte	$DB
06878 186E                        DB            .byte	$DB
06879 186F                        7B            .byte	$7B
06880 1870                        1B            .byte	$1B
06881 1871                        1B            .byte	$1B
06882 1872                        1B            .byte	$1B
06883 1873                        1B            .byte	$1B
06884 1874                        00            .byte	0
06885 1875                        00            .byte	0
06886 1876                        00            .byte	0
06887                                           ! 997  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06888 1877                        00            .byte	0
06889 1878                        7C            .byte	$7C
06890 1879                        C6            .byte	$C6
06891 187A                        60            .byte	$60
06892 187B                        38            .byte	$38
06893 187C                        6C            .byte	$6C
06894 187D                        C6            .byte	$C6
06895 187E                        C6            .byte	$C6
06896 187F                        6C            .byte	$6C
06897 1880                        38            .byte	$38
06898 1881                        0C            .byte	$C
06899 1882                        C6            .byte	$C6
06900 1883                        7C            .byte	$7C
06901 1884                        00            .byte	0
06902                                           ! 998  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06903 1885                        00            .byte	0
06904 1886                        00            .byte	0
06905 1887                        00            .byte	0
06906 1888                        00            .byte	0
06907 1889                        00            .byte	0
06908 188A                        00            .byte	0
06909 188B                        00            .byte	0
06910 188C                        00            .byte	0
06911 188D                        FE            .byte	$FE
06912 188E                        FE            .byte	$FE
06913 188F                        FE            .byte	$FE
06914 1890                        00            .byte	0
06915 1891                        00            .byte	0
06916 1892                        00            .byte	0
06917                                           ! 999  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06918 1893                        00            .byte	0
06919 1894                        00            .byte	0
06920 1895                        18            .byte	$18
06921 1896                        3C            .byte	$3C
06922 1897                        7E            .byte	$7E
06923 1898                        18            .byte	$18
06924 1899                        18            .byte	$18
06925 189A                        18            .byte	$18
06926 189B                        7E            .byte	$7E
06927 189C                        3C            .byte	$3C
06928 189D                        18            .byte	$18
06929 189E                        7E            .byte	$7E
06930 189F                        00            .byte	0
06931 18A0                        00            .byte	0
06932                                           ! 1000  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06933 18A1                        00            .byte	0
06934 18A2                        00            .byte	0
06935 18A3                        18            .byte	$18
06936 18A4                        3C            .byte	$3C
06937 18A5                        7E            .byte	$7E
06938 18A6                        18            .byte	$18
06939 18A7                        18            .byte	$18
06940 18A8                        18            .byte	$18
06941 18A9                        18            .byte	$18
06942 18AA                        18            .byte	$18
06943 18AB                        18            .byte	$18
06944 18AC                        00            .byte	0
06945 18AD                        00            .byte	0
06946 18AE                        00            .byte	0
06947                                           ! 1001  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06948 18AF                        00            .byte	0
06949 18B0                        00            .byte	0
06950 18B1                        18            .byte	$18
06951 18B2                        18            .byte	$18
06952 18B3                        18            .byte	$18
06953 18B4                        18            .byte	$18
06954 18B5                        18            .byte	$18
06955 18B6                        18            .byte	$18
06956 18B7                        7E            .byte	$7E
06957 18B8                        3C            .byte	$3C
06958 18B9                        18            .byte	$18
06959 18BA                        00            .byte	0
06960 18BB                        00            .byte	0
06961 18BC                        00            .byte	0
06962                                           ! 1002  0x00, 0x
06963 18BD                        00            .byte	0
06964                                           ! 1002 00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06965 18BE                        00            .byte	0
06966 18BF                        00            .byte	0
06967 18C0                        00            .byte	0
06968 18C1                        18            .byte	$18
06969 18C2                        0C            .byte	$C
06970 18C3                        FE            .byte	$FE
06971 18C4                        0C            .byte	$C
06972 18C5                        18            .byte	$18
06973 18C6                        00            .byte	0
06974 18C7                        00            .byte	0
06975 18C8                        00            .byte	0
06976 18C9                        00            .byte	0
06977 18CA                        00            .byte	0
06978                                           ! 1003  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06979 18CB                        00            .byte	0
06980 18CC                        00            .byte	0
06981 18CD                        00            .byte	0
06982 18CE                        00            .byte	0
06983 18CF                        30            .byte	$30
06984 18D0                        60            .byte	$60
06985 18D1                        FE            .byte	$FE
06986 18D2                        60            .byte	$60
06987 18D3                        30            .byte	$30
06988 18D4                        00            .byte	0
06989 18D5                        00            .byte	0
06990 18D6                        00            .byte	0
06991 18D7                        00            .byte	0
06992 18D8                        00            .byte	0
06993                                           ! 1004  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06994 18D9                        00            .byte	0
06995 18DA                        00            .byte	0
06996 18DB                        00            .byte	0
06997 18DC                        00            .byte	0
06998 18DD                        00            .byte	0
06999 18DE                        C0            .byte	$C0
07000 18DF                        C0            .byte	$C0
07001 18E0                        C0            .byte	$C0
07002 18E1                        FE            .byte	$FE
07003 18E2                        00            .byte	0
07004 18E3                        00            .byte	0
07005 18E4                        00            .byte	0
07006 18E5                        00            .byte	0
07007 18E6                        00            .byte	0
07008                                           ! 1005  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07009 18E7                        00            .byte	0
07010 18E8                        00            .byte	0
07011 18E9                        00            .byte	0
07012 18EA                        00            .byte	0
07013 18EB                        28            .byte	$28
07014 18EC                        6C            .byte	$6C
07015 18ED                        FE            .byte	$FE
07016 18EE                        6C            .byte	$6C
07017 18EF                        28            .byte	$28
07018 18F0                        00            .byte	0
07019 18F1                        00            .byte	0
07020 18F2                        00            .byte	0
07021 18F3                        00            .byte	0
07022 18F4                        00            .byte	0
07023                                           ! 1006  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07024 18F5                        00            .byte	0
07025 18F6                        00            .byte	0
07026 18F7                        00            .byte	0
07027 18F8                        10            .byte	$10
07028 18F9                        38            .byte	$38
07029 18FA                        38            .byte	$38
07030 18FB                        7C            .byte	$7C
07031 18FC                        7C            .byte	$7C
07032 18FD                        FE            .byte	$FE
07033 18FE                        FE            .byte	$FE
07034 18FF                        00            .byte	0
07035 1900                        00            .byte	0
07036 1901                        00            .byte	0
07037 1902                        00            .byte	0
07038                                           ! 1007  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07039 1903                        00            .byte	0
07040 1904                        00            .byte	0
07041 1905                        00            .byte	0
07042 1906                        FE            .byte	$FE
07043 1907                        FE            .byte	$FE
07044 1908                        7C            .byte	$7C
07045 1909                        7C            .byte	$7C
07046 190A                        38            .byte	$38
07047 190B                        38            .byte	$38
07048 190C                        10            .byte	$10
07049 190D                        00            .byte	0
07050 190E                        00            .byte	0
07051 190F                        00            .byte	0
07052 1910                        00            .byte	0
07053                                           ! 1008  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07054 1911                        00            .byte	0
07055 1912                        00            .byte	0
07056 1913                        00            .byte	0
07057 1914                        00            .byte	0
07058 1915                        00            .byte	0
07059 1916                        00            .byte	0
07060 1917                        00            .byte	0
07061 1918                        00            .byte	0
07062 1919                        00            .byte	0
07063 191A                        00            .byte	0
07064 191B                        00            .byte	0
07065 191C                        00            .byte	0
07066 191D                        00            .byte	0
07067 191E                        00            .byte	0
07068                                           ! 1009  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07069 191F                        00            .byte	0
07070 1920                        00            .byte	0
07071 1921                        18            .byte	$18
07072 1922                        3C            .byte	$3C
07073 1923                        3C            .byte	$3C
07074 1924                        3C            .byte	$3C
07075 1925                        18            .byte	$18
07076 1926                        18            .byte	$18
07077 1927                        00            .byte	0
07078 1928                        18            .byte	$18
07079 1929                        18            .byte	$18
07080 192A                        00            .byte	0
07081 192B                        00            .byte	0
07082 192C                        00            .byte	0
07083                                           ! 1010  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07084 192D                        00            .byte	0
07085 192E                        66            .byte	$66
07086 192F                        66            .byte	$66
07087 1930                        66            .byte	$66
07088 1931                        24            .byte	$24
07089 1932                        00            .byte	0
07090 1933                        00            .byte	0
07091 1934                        00            .byte	0
07092 1935                        00            .byte	0
07093 1936                        00            .byte	0
07094 1937                        00            .byte	0
07095 1938                        00            .byte	0
07096 1939                        00            .byte	0
07097 193A                        00            .byte	0
07098                                           ! 1011  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07099 193B                        00            .byte	0
07100 193C                        00            .byte	0
07101 193D                        6C            .byte	$6C
07102 193E                        6C            .byte	$6C
07103 193F                        FE            .byte	$FE
07104 1940                        6C            .byte	$6C
07105 1941                        6C            .byte	$6C
07106 1942                        6C            .byte	$6C
07107 1943                        FE            .byte	$FE
07108 1944                        6C            .byte	$6C
07109 1945                        6C            .byte	$6C
07110 1946                        00            .byte	0
07111 1947                        00            .byte	0
07112 1948                        00            .byte	0
07113                                           ! 1012  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07114 1949                        18            .byte	$18
07115 194A                        18            .byte	$18
07116 194B                        7C            .byte	$7C
07117 194C                        C6            .byte	$C6
07118 194D                        C2            .byte	$C2
07119 194E                        C0            .byte	$C0
07120 194F                        7C            .byte	$7C
07121 1950                        06            .byte	6
07122 1951                        86            .byte	$86
07123 1952                        C6            .byte	$C6
07124 1953                        7C            .byte	$7C
07125 1954                        18            .byte	$18
07126 1955                        18            .byte	$18
07127 1956                        00            .byte	0
07128                                           ! 1013  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07129 1957                        00            .byte	0
07130 1958                        00            .byte	0
07131 1959                        00            .byte	0
07132 195A                        00            .byte	0
07133 195B                        C2            .byte	$C2
07134 195C                        C6            .byte	$C6
07135 195D                        0C            .byte	$C
07136 195E                        18            .byte	$18
07137 195F                        30            .byte	$30
07138 1960                        66            .byte	$66
07139 1961                        C6            .byte	$C6
07140 1962                        00            .byte	0
07141 1963                        00            .byte	0
07142 1964                        00            .byte	0
07143                                           ! 1014  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07144 1965                        00            .byte	0
07145 1966                        00            .byte	0
07146 1967                        38            .byte	$38
07147 1968                        6C            .byte	$6C
07148 1969                        6C            .byte	$6C
07149 196A                        38            .byte	$38
07150 196B                        76            .byte	$76
07151 196C                        DC            .byte	$DC
07152 196D                        CC            .byte	$CC
07153 196E                        CC            .byte	$CC
07154 196F                        76            .byte	$76
07155 1970                        00            .byte	0
07156 1971                        00            .byte	0
07157 1972                        00            .byte	0
07158                                           ! 1015  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07159 1973                        00            .byte	0
07160 1974                        30            .byte	$30
07161 1975                        30            .byte	$30
07162 1976                        30            .byte	$30
07163 1977                        60            .byte	$60
07164 1978                        00            .byte	0
07165 1979                        00            .byte	0
07166 197A                        00            .byte	0
07167 197B                        00            .byte	0
07168 197C                        00            .byte	0
07169 197D                        00            .byte	0
07170 197E                        00            .byte	0
07171 197F                        00            .byte	0
07172 1980                        00            .byte	0
07173                                           ! 1016  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07174 1981                        00            .byte	0
07175 1982                        00            .byte	0
07176 1983                        0C            .byte	$C
07177 1984                        18            .byte	$18
07178 1985                        30            .byte	$30
07179 1986                        30            .byte	$30
07180 1987                        30            .byte	$30
07181 1988                        30            .byte	$30
07182 1989                        30            .byte	$30
07183 198A                        18            .byte	$18
07184 198B                        0C            .byte	$C
07185 198C                        00            .byte	0
07186 198D                        00            .byte	0
07187 198E                        00            .byte	0
07188                                           ! 1017  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07189 198F                        00            .byte	0
07190 1990                        00            .byte	0
07191 1991                        30            .byte	$30
07192 1992                        18            .byte	$18
07193 1993                        0C            .byte	$C
07194 1994                        0C            .byte	$C
07195 1995                        0C            .byte	$C
07196 1996                        0C            .byte	$C
07197 1997                        0C            .byte	$C
07198 1998                        18            .byte	$18
07199 1999                        30            .byte	$30
07200 199A                        00            .byte	0
07201 199B                        00            .byte	0
07202 199C                        00            .byte	0
07203                                           ! 1018  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07204 199D                        00            .byte	0
07205 199E                        00            .byte	0
07206 199F                        00            .byte	0
07207 19A0                        00            .byte	0
07208 19A1                        66            .byte	$66
07209 19A2                        3C            .byte	$3C
07210 19A3                        FF            .byte	$FF
07211 19A4                        3C            .byte	$3C
07212 19A5                        66            .byte	$66
07213 19A6                        00            .byte	0
07214 19A7                        00            .byte	0
07215 19A8                        00            .byte	0
07216 19A9                        00            .byte	0
07217 19AA                        00            .byte	0
07218                                           ! 1019  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07219 19AB                        00            .byte	0
07220 19AC                        00            .byte	0
07221 19AD                        00            .byte	0
07222 19AE                        00            .byte	0
07223 19AF                        18            .byte	$18
07224 19B0                        18            .byte	$18
07225 19B1                        7E            .byte	$7E
07226 19B2                        18            .byte	$18
07227 19B3                        18            .byte	$18
07228 19B4                        00            .byte	0
07229 19B5                        00            .byte	0
07230 19B6                        00            .byte	0
07231 19B7                        00            .byte	0
07232 19B8                        00            .byte	0
07233                                           ! 1020  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07234 19B9                        00            .byte	0
07235 19BA                        00            .byte	0
07236 19BB                        00            .byte	0
07237 19BC                        00            .byte	0
07238 19BD                        00            .byte	0
07239 19BE                        00            .byte	0
07240 19BF                        00            .byte	0
07241 19C0                        00            .byte	0
07242 19C1                        18            .byte	$18
07243 19C2                        18            .byte	$18
07244 19C3                        18            .byte	$18
07245 19C4                        30            .byte	$30
07246 19C5                        00            .byte	0
07247 19C6                        00            .byte	0
07248                                           ! 1021  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07249 19C7                        00            .byte	0
07250 19C8                        00            .byte	0
07251 19C9                        00            .byte	0
07252 19CA                        00            .byte	0
07253 19CB                        00            .byte	0
07254 19CC                        00            .byte	0
07255 19CD                        FE            .byte	$FE
07256 19CE                        00            .byte	0
07257 19CF                        00            .byte	0
07258 19D0                        00            .byte	0
07259 19D1                        00            .byte	0
07260 19D2                        00            .byte	0
07261 19D3                        00            .byte	0
07262 19D4                        00            .byte	0
07263                                           ! 1022  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07264 19D5                        00            .byte	0
07265 19D6                        00            .byte	0
07266 19D7                        00            .byte	0
07267 19D8                        00            .byte	0
07268 19D9                        00            .byte	0
07269 19DA                        00            .byte	0
07270 19DB                        00            .byte	0
07271 19DC                        00            .byte	0
07272 19DD                        00            .byte	0
07273 19DE                        18            .byte	$18
07274 19DF                        18            .byte	$18
07275 19E0                        00            .byte	0
07276 19E1                        00            .byte	0
07277 19E2                        00            .byte	0
07278                                           ! 1023  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07279 19E3                        00            .byte	0
07280 19E4                        00            .byte	0
07281 19E5                        02            .byte	2
07282 19E6                        06            .byte	6
07283 19E7                        0C            .byte	$C
07284 19E8                        18            .byte	$18
07285 19E9                        30            .byte	$30
07286 19EA                        60            .byte	$60
07287 19EB                        C0            .byte	$C0
07288 19EC                        80            .byte	$80
07289 19ED                        00            .byte	0
07290 19EE                        00            .byte	0
07291 19EF                        00            .byte	0
07292 19F0                        00            .byte	0
07293                                           ! 1024  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07294 19F1                        00            .byte	0
07295 19F2                        00            .byte	0
07296 19F3                        7C            .byte	$7C
07297 19F4                        C6            .byte	$C6
07298 19F5                        CE            .byte	$CE
07299 19F6                        DE            .byte	$DE
07300 19F7                        F6            .byte	$F6
07301 19F8                        E6            .byte	$E6
07302 19F9                        C6            .byte	$C6
07303 19FA                        C6            .byte	$C6
07304 19FB                        7C            .byte	$7C
07305 19FC                        00            .byte	0
07306 19FD                        00            .byte	0
07307 19FE                        00            .byte	0
07308                                           ! 1025  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07309 19FF                        00            .byte	0
07310 1A00                        00            .byte	0
07311 1A01                        18            .byte	$18
07312 1A02                        38            .byte	$38
07313 1A03                        78            .byte	$78
07314 1A04                        18            .byte	$18
07315 1A05                        18            .byte	$18
07316 1A06                        18            .byte	$18
07317 1A07                        18            .byte	$18
07318 1A08                        18            .byte	$18
07319 1A09                        7E            .byte	$7E
07320 1A0A                        00            .byte	0
07321 1A0B                        00            .byte	0
07322 1A0C                        00            .byte	0
07323                                           ! 1026  0x00, 0x00, 0x7c
07324 1A0D                        00            .byte	0
07325 1A0E                        00            .byte	0
07326                                           ! 1026 , 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07327 1A0F                        7C            .byte	$7C
07328 1A10                        C6            .byte	$C6
07329 1A11                        06            .byte	6
07330 1A12                        0C            .byte	$C
07331 1A13                        18            .byte	$18
07332 1A14                        30            .byte	$30
07333 1A15                        60            .byte	$60
07334 1A16                        C6            .byte	$C6
07335 1A17                        FE            .byte	$FE
07336 1A18                        00            .byte	0
07337 1A19                        00            .byte	0
07338 1A1A                        00            .byte	0
07339                                           ! 1027  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07340 1A1B                        00            .byte	0
07341 1A1C                        00            .byte	0
07342 1A1D                        7C            .byte	$7C
07343 1A1E                        C6            .byte	$C6
07344 1A1F                        06            .byte	6
07345 1A20                        06            .byte	6
07346 1A21                        3C            .byte	$3C
07347 1A22                        06            .byte	6
07348 1A23                        06            .byte	6
07349 1A24                        C6            .byte	$C6
07350 1A25                        7C            .byte	$7C
07351 1A26                        00            .byte	0
07352 1A27                        00            .byte	0
07353 1A28                        00            .byte	0
07354                                           ! 1028  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07355 1A29                        00            .byte	0
07356 1A2A                        00            .byte	0
07357 1A2B                        0C            .byte	$C
07358 1A2C                        1C            .byte	$1C
07359 1A2D                        3C            .byte	$3C
07360 1A2E                        6C            .byte	$6C
07361 1A2F                        CC            .byte	$CC
07362 1A30                        FE            .byte	$FE
07363 1A31                        0C            .byte	$C
07364 1A32                        0C            .byte	$C
07365 1A33                        1E            .byte	$1E
07366 1A34                        00            .byte	0
07367 1A35                        00            .byte	0
07368 1A36                        00            .byte	0
07369                                           ! 1029  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07370 1A37                        00            .byte	0
07371 1A38                        00            .byte	0
07372 1A39                        FE            .byte	$FE
07373 1A3A                        C0            .byte	$C0
07374 1A3B                        C0            .byte	$C0
07375 1A3C                        C0            .byte	$C0
07376 1A3D                        FC            .byte	$FC
07377 1A3E                        06            .byte	6
07378 1A3F                        06            .byte	6
07379 1A40                        C6            .byte	$C6
07380 1A41                        7C            .byte	$7C
07381 1A42                        00            .byte	0
07382 1A43                        00            .byte	0
07383 1A44                        00            .byte	0
07384                                           ! 1030  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07385 1A45                        00            .byte	0
07386 1A46                        00            .byte	0
07387 1A47                        38            .byte	$38
07388 1A48                        60            .byte	$60
07389 1A49                        C0            .byte	$C0
07390 1A4A                        C0            .byte	$C0
07391 1A4B                        FC            .byte	$FC
07392 1A4C                        C6            .byte	$C6
07393 1A4D                        C6            .byte	$C6
07394 1A4E                        C6            .byte	$C6
07395 1A4F                        7C            .byte	$7C
07396 1A50                        00            .byte	0
07397 1A51                        00            .byte	0
07398 1A52                        00            .byte	0
07399                                           ! 1031  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07400 1A53                        00            .byte	0
07401 1A54                        00            .byte	0
07402 1A55                        FE            .byte	$FE
07403 1A56                        C6            .byte	$C6
07404 1A57                        06            .byte	6
07405 1A58                        0C            .byte	$C
07406 1A59                        18            .byte	$18
07407 1A5A                        30            .byte	$30
07408 1A5B                        30            .byte	$30
07409 1A5C                        30            .byte	$30
07410 1A5D                        30            .byte	$30
07411 1A5E                        00            .byte	0
07412 1A5F                        00            .byte	0
07413 1A60                        00            .byte	0
07414                                           ! 1032  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07415 1A61                        00            .byte	0
07416 1A62                        00            .byte	0
07417 1A63                        7C            .byte	$7C
07418 1A64                        C6            .byte	$C6
07419 1A65                        C6            .byte	$C6
07420 1A66                        C6            .byte	$C6
07421 1A67                        7C            .byte	$7C
07422 1A68                        C6            .byte	$C6
07423 1A69                        C6            .byte	$C6
07424 1A6A                        C6            .byte	$C6
07425 1A6B                        7C            .byte	$7C
07426 1A6C                        00            .byte	0
07427 1A6D                        00            .byte	0
07428 1A6E                        00            .byte	0
07429                                           ! 1033  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07430 1A6F                        00            .byte	0
07431 1A70                        00            .byte	0
07432 1A71                        7C            .byte	$7C
07433 1A72                        C6            .byte	$C6
07434 1A73                        C6            .byte	$C6
07435 1A74                        C6            .byte	$C6
07436 1A75                        7E            .byte	$7E
07437 1A76                        06            .byte	6
07438 1A77                        06            .byte	6
07439 1A78                        0C            .byte	$C
07440 1A79                        78            .byte	$78
07441 1A7A                        00            .byte	0
07442 1A7B                        00            .byte	0
07443 1A7C                        00            .byte	0
07444                                           ! 1034  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07445 1A7D                        00            .byte	0
07446 1A7E                        00            .byte	0
07447 1A7F                        00            .byte	0
07448 1A80                        18            .byte	$18
07449 1A81                        18            .byte	$18
07450 1A82                        00            .byte	0
07451 1A83                        00            .byte	0
07452 1A84                        00            .byte	0
07453 1A85                        18            .byte	$18
07454 1A86                        18            .byte	$18
07455 1A87                        00            .byte	0
07456 1A88                        00            .byte	0
07457 1A89                        00            .byte	0
07458 1A8A                        00            .byte	0
07459                                           ! 1035  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07460 1A8B                        00            .byte	0
07461 1A8C                        00            .byte	0
07462 1A8D                        00            .byte	0
07463 1A8E                        18            .byte	$18
07464 1A8F                        18            .byte	$18
07465 1A90                        00            .byte	0
07466 1A91                        00            .byte	0
07467 1A92                        00            .byte	0
07468 1A93                        18            .byte	$18
07469 1A94                        18            .byte	$18
07470 1A95                        30            .byte	$30
07471 1A96                        00            .byte	0
07472 1A97                        00            .byte	0
07473 1A98                        00            .byte	0
07474                                           ! 1036  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07475 1A99                        00            .byte	0
07476 1A9A                        00            .byte	0
07477 1A9B                        06            .byte	6
07478 1A9C                        0C            .byte	$C
07479 1A9D                        18            .byte	$18
07480 1A9E                        30            .byte	$30
07481 1A9F                        60            .byte	$60
07482 1AA0                        30            .byte	$30
07483 1AA1                        18            .byte	$18
07484 1AA2                        0C            .byte	$C
07485 1AA3                        06            .byte	6
07486 1AA4                        00            .byte	0
07487 1AA5                        00            .byte	0
07488 1AA6                        00            .byte	0
07489                                           ! 1037  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07490 1AA7                        00            .byte	0
07491 1AA8                        00            .byte	0
07492 1AA9                        00            .byte	0
07493 1AAA                        00            .byte	0
07494 1AAB                        00            .byte	0
07495 1AAC                        7E            .byte	$7E
07496 1AAD                        00            .byte	0
07497 1AAE                        00            .byte	0
07498 1AAF                        7E            .byte	$7E
07499 1AB0                        00            .byte	0
07500 1AB1                        00            .byte	0
07501 1AB2                        00            .byte	0
07502 1AB3                        00            .byte	0
07503 1AB4                        00            .byte	0
07504                                           ! 1038  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07505 1AB5                        00            .byte	0
07506 1AB6                        00            .byte	0
07507 1AB7                        60            .byte	$60
07508 1AB8                        30            .byte	$30
07509 1AB9                        18            .byte	$18
07510 1ABA                        0C            .byte	$C
07511 1ABB                        06            .byte	6
07512 1ABC                        0C            .byte	$C
07513 1ABD                        18            .byte	$18
07514 1ABE                        30            .byte	$30
07515 1ABF                        60            .byte	$60
07516 1AC0                        00            .byte	0
07517 1AC1                        00            .byte	0
07518 1AC2                        00            .byte	0
07519                                           ! 1039  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07520 1AC3                        00            .byte	0
07521 1AC4                        00            .byte	0
07522 1AC5                        7C            .byte	$7C
07523 1AC6                        C6            .byte	$C6
07524 1AC7                        C6            .byte	$C6
07525 1AC8                        0C            .byte	$C
07526 1AC9                        18            .byte	$18
07527 1ACA                        18            .byte	$18
07528 1ACB                        00            .byte	0
07529 1ACC                        18            .byte	$18
07530 1ACD                        18            .byte	$18
07531 1ACE                        00            .byte	0
07532 1ACF                        00            .byte	0
07533 1AD0                        00            .byte	0
07534                                           ! 1040  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07535 1AD1                        00            .byte	0
07536 1AD2                        00            .byte	0
07537 1AD3                        7C            .byte	$7C
07538 1AD4                        C6            .byte	$C6
07539 1AD5                        C6            .byte	$C6
07540 1AD6                        DE            .byte	$DE
07541 1AD7                        DE            .byte	$DE
07542 1AD8                        DE            .byte	$DE
07543 1AD9                        DC            .byte	$DC
07544 1ADA                        C0            .byte	$C0
07545 1ADB                        7C            .byte	$7C
07546 1ADC                        00            .byte	0
07547 1ADD                        00            .byte	0
07548 1ADE                        00            .byte	0
07549                                           ! 1041  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07550 1ADF                        00            .byte	0
07551 1AE0                        00            .byte	0
07552 1AE1                        10            .byte	$10
07553 1AE2                        38            .byte	$38
07554 1AE3                        6C            .byte	$6C
07555 1AE4                        C6            .byte	$C6
07556 1AE5                        C6            .byte	$C6
07557 1AE6                        FE            .byte	$FE
07558 1AE7                        C6            .byte	$C6
07559 1AE8                        C6            .byte	$C6
07560 1AE9                        C6            .byte	$C6
07561 1AEA                        00            .byte	0
07562 1AEB                        00            .byte	0
07563 1AEC                        00            .byte	0
07564                                           ! 1042  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07565 1AED                        00            .byte	0
07566 1AEE                        00            .byte	0
07567 1AEF                        FC            .byte	$FC
07568 1AF0                        66            .byte	$66
07569 1AF1                        66            .byte	$66
07570 1AF2                        66            .byte	$66
07571 1AF3                        7C            .byte	$7C
07572 1AF4                        66            .byte	$66
07573 1AF5                        66            .byte	$66
07574 1AF6                        66            .byte	$66
07575 1AF7                        FC            .byte	$FC
07576 1AF8                        00            .byte	0
07577 1AF9                        00            .byte	0
07578 1AFA                        00            .byte	0
07579                                           ! 1043  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07580 1AFB                        00            .byte	0
07581 1AFC                        00            .byte	0
07582 1AFD                        3C            .byte	$3C
07583 1AFE                        66            .byte	$66
07584 1AFF                        C2            .byte	$C2
07585 1B00                        C0            .byte	$C0
07586 1B01                        C0            .byte	$C0
07587 1B02                        C0            .byte	$C0
07588 1B03                        C2            .byte	$C2
07589 1B04                        66            .byte	$66
07590 1B05                        3C            .byte	$3C
07591 1B06                        00            .byte	0
07592 1B07                        00            .byte	0
07593 1B08                        00            .byte	0
07594                                           ! 1044  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07595 1B09                        00            .byte	0
07596 1B0A                        00            .byte	0
07597 1B0B                        F8            .byte	$F8
07598 1B0C                        6C            .byte	$6C
07599 1B0D                        66            .byte	$66
07600 1B0E                        66            .byte	$66
07601 1B0F                        66            .byte	$66
07602 1B10                        66            .byte	$66
07603 1B11                        66            .byte	$66
07604 1B12                        6C            .byte	$6C
07605 1B13                        F8            .byte	$F8
07606 1B14                        00            .byte	0
07607 1B15                        00            .byte	0
07608 1B16                        00            .byte	0
07609                                           ! 1045  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07610 1B17                        00            .byte	0
07611 1B18                        00            .byte	0
07612 1B19                        FE            .byte	$FE
07613 1B1A                        66            .byte	$66
07614 1B1B                        62            .byte	$62
07615 1B1C                        68            .byte	$68
07616 1B1D                        78            .byte	$78
07617 1B1E                        68            .byte	$68
07618 1B1F                        62            .byte	$62
07619 1B20                        66            .byte	$66
07620 1B21                        FE            .byte	$FE
07621 1B22                        00            .byte	0
07622 1B23                        00            .byte	0
07623 1B24                        00            .byte	0
07624                                           ! 1046  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07625 1B25                        00            .byte	0
07626 1B26                        00            .byte	0
07627 1B27                        FE            .byte	$FE
07628 1B28                        66            .byte	$66
07629 1B29                        62            .byte	$62
07630 1B2A                        68            .byte	$68
07631 1B2B                        78            .byte	$78
07632 1B2C                        68            .byte	$68
07633 1B2D                        60            .byte	$60
07634 1B2E                        60            .byte	$60
07635 1B2F                        F0            .byte	$F0
07636 1B30                        00            .byte	0
07637 1B31                        00            .byte	0
07638 1B32                        00            .byte	0
07639                                           ! 1047  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07640 1B33                        00            .byte	0
07641 1B34                        00            .byte	0
07642 1B35                        3C            .byte	$3C
07643 1B36                        66            .byte	$66
07644 1B37                        C2            .byte	$C2
07645 1B38                        C0            .byte	$C0
07646 1B39                        C0            .byte	$C0
07647 1B3A                        DE            .byte	$DE
07648 1B3B                        C6            .byte	$C6
07649 1B3C                        66            .byte	$66
07650 1B3D                        3A            .byte	$3A
07651 1B3E                        00            .byte	0
07652 1B3F                        00            .byte	0
07653 1B40                        00            .byte	0
07654                                           ! 1048  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07655 1B41                        00            .byte	0
07656 1B42                        00            .byte	0
07657 1B43                        C6            .byte	$C6
07658 1B44                        C6            .byte	$C6
07659 1B45                        C6            .byte	$C6
07660 1B46                        C6            .byte	$C6
07661 1B47                        FE            .byte	$FE
07662 1B48                        C6            .byte	$C6
07663 1B49                        C6            .byte	$C6
07664 1B4A                        C6            .byte	$C6
07665 1B4B                        C6            .byte	$C6
07666 1B4C                        00            .byte	0
07667 1B4D                        00            .byte	0
07668 1B4E                        00            .byte	0
07669                                           ! 1049  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07670 1B4F                        00            .byte	0
07671 1B50                        00            .byte	0
07672 1B51                        3C            .byte	$3C
07673 1B52                        18            .byte	$18
07674 1B53                        18            .byte	$18
07675 1B54                        18            .byte	$18
07676 1B55                        18            .byte	$18
07677 1B56                        18            .byte	$18
07678 1B57                        18            .byte	$18
07679 1B58                        18            .byte	$18
07680 1B59                        3C            .byte	$3C
07681 1B5A                        00            .byte	0
07682 1B5B                        00            .byte	0
07683 1B5C                        00            .byte	0
07684                                           ! 1050  0x00, 0x00, 0x1e, 0x0c, 
07685 1B5D                        00            .byte	0
07686 1B5E                        00            .byte	0
07687 1B5F                        1E            .byte	$1E
07688 1B60                        0C            .byte	$C
07689                                           ! 1050 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07690 1B61                        0C            .byte	$C
07691 1B62                        0C            .byte	$C
07692 1B63                        0C            .byte	$C
07693 1B64                        0C            .byte	$C
07694 1B65                        CC            .byte	$CC
07695 1B66                        CC            .byte	$CC
07696 1B67                        78            .byte	$78
07697 1B68                        00            .byte	0
07698 1B69                        00            .byte	0
07699 1B6A                        00            .byte	0
07700                                           ! 1051  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07701 1B6B                        00            .byte	0
07702 1B6C                        00            .byte	0
07703 1B6D                        E6            .byte	$E6
07704 1B6E                        66            .byte	$66
07705 1B6F                        6C            .byte	$6C
07706 1B70                        6C            .byte	$6C
07707 1B71                        78            .byte	$78
07708 1B72                        6C            .byte	$6C
07709 1B73                        6C            .byte	$6C
07710 1B74                        66            .byte	$66
07711 1B75                        E6            .byte	$E6
07712 1B76                        00            .byte	0
07713 1B77                        00            .byte	0
07714 1B78                        00            .byte	0
07715                                           ! 1052  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07716 1B79                        00            .byte	0
07717 1B7A                        00            .byte	0
07718 1B7B                        F0            .byte	$F0
07719 1B7C                        60            .byte	$60
07720 1B7D                        60            .byte	$60
07721 1B7E                        60            .byte	$60
07722 1B7F                        60            .byte	$60
07723 1B80                        60            .byte	$60
07724 1B81                        62            .byte	$62
07725 1B82                        66            .byte	$66
07726 1B83                        FE            .byte	$FE
07727 1B84                        00            .byte	0
07728 1B85                        00            .byte	0
07729 1B86                        00            .byte	0
07730                                           ! 1053  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07731 1B87                        00            .byte	0
07732 1B88                        00            .byte	0
07733 1B89                        C6            .byte	$C6
07734 1B8A                        EE            .byte	$EE
07735 1B8B                        FE            .byte	$FE
07736 1B8C                        FE            .byte	$FE
07737 1B8D                        D6            .byte	$D6
07738 1B8E                        C6            .byte	$C6
07739 1B8F                        C6            .byte	$C6
07740 1B90                        C6            .byte	$C6
07741 1B91                        C6            .byte	$C6
07742 1B92                        00            .byte	0
07743 1B93                        00            .byte	0
07744 1B94                        00            .byte	0
07745                                           ! 1054  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07746 1B95                        00            .byte	0
07747 1B96                        00            .byte	0
07748 1B97                        C6            .byte	$C6
07749 1B98                        E6            .byte	$E6
07750 1B99                        F6            .byte	$F6
07751 1B9A                        FE            .byte	$FE
07752 1B9B                        DE            .byte	$DE
07753 1B9C                        CE            .byte	$CE
07754 1B9D                        C6            .byte	$C6
07755 1B9E                        C6            .byte	$C6
07756 1B9F                        C6            .byte	$C6
07757 1BA0                        00            .byte	0
07758 1BA1                        00            .byte	0
07759 1BA2                        00            .byte	0
07760                                           ! 1055  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07761 1BA3                        00            .byte	0
07762 1BA4                        00            .byte	0
07763 1BA5                        38            .byte	$38
07764 1BA6                        6C            .byte	$6C
07765 1BA7                        C6            .byte	$C6
07766 1BA8                        C6            .byte	$C6
07767 1BA9                        C6            .byte	$C6
07768 1BAA                        C6            .byte	$C6
07769 1BAB                        C6            .byte	$C6
07770 1BAC                        6C            .byte	$6C
07771 1BAD                        38            .byte	$38
07772 1BAE                        00            .byte	0
07773 1BAF                        00            .byte	0
07774 1BB0                        00            .byte	0
07775                                           ! 1056  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07776 1BB1                        00            .byte	0
07777 1BB2                        00            .byte	0
07778 1BB3                        FC            .byte	$FC
07779 1BB4                        66            .byte	$66
07780 1BB5                        66            .byte	$66
07781 1BB6                        66            .byte	$66
07782 1BB7                        7C            .byte	$7C
07783 1BB8                        60            .byte	$60
07784 1BB9                        60            .byte	$60
07785 1BBA                        60            .byte	$60
07786 1BBB                        F0            .byte	$F0
07787 1BBC                        00            .byte	0
07788 1BBD                        00            .byte	0
07789 1BBE                        00            .byte	0
07790                                           ! 1057  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07791 1BBF                        00            .byte	0
07792 1BC0                        00            .byte	0
07793 1BC1                        7C            .byte	$7C
07794 1BC2                        C6            .byte	$C6
07795 1BC3                        C6            .byte	$C6
07796 1BC4                        C6            .byte	$C6
07797 1BC5                        C6            .byte	$C6
07798 1BC6                        D6            .byte	$D6
07799 1BC7                        DE            .byte	$DE
07800 1BC8                        7C            .byte	$7C
07801 1BC9                        0C            .byte	$C
07802 1BCA                        0E            .byte	$E
07803 1BCB                        00            .byte	0
07804 1BCC                        00            .byte	0
07805                                           ! 1058  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07806 1BCD                        00            .byte	0
07807 1BCE                        00            .byte	0
07808 1BCF                        FC            .byte	$FC
07809 1BD0                        66            .byte	$66
07810 1BD1                        66            .byte	$66
07811 1BD2                        66            .byte	$66
07812 1BD3                        7C            .byte	$7C
07813 1BD4                        6C            .byte	$6C
07814 1BD5                        66            .byte	$66
07815 1BD6                        66            .byte	$66
07816 1BD7                        E6            .byte	$E6
07817 1BD8                        00            .byte	0
07818 1BD9                        00            .byte	0
07819 1BDA                        00            .byte	0
07820                                           ! 1059  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07821 1BDB                        00            .byte	0
07822 1BDC                        00            .byte	0
07823 1BDD                        7C            .byte	$7C
07824 1BDE                        C6            .byte	$C6
07825 1BDF                        C6            .byte	$C6
07826 1BE0                        60            .byte	$60
07827 1BE1                        38            .byte	$38
07828 1BE2                        0C            .byte	$C
07829 1BE3                        C6            .byte	$C6
07830 1BE4                        C6            .byte	$C6
07831 1BE5                        7C            .byte	$7C
07832 1BE6                        00            .byte	0
07833 1BE7                        00            .byte	0
07834 1BE8                        00            .byte	0
07835                                           ! 1060  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07836 1BE9                        00            .byte	0
07837 1BEA                        00            .byte	0
07838 1BEB                        7E            .byte	$7E
07839 1BEC                        7E            .byte	$7E
07840 1BED                        5A            .byte	$5A
07841 1BEE                        18            .byte	$18
07842 1BEF                        18            .byte	$18
07843 1BF0                        18            .byte	$18
07844 1BF1                        18            .byte	$18
07845 1BF2                        18            .byte	$18
07846 1BF3                        3C            .byte	$3C
07847 1BF4                        00            .byte	0
07848 1BF5                        00            .byte	0
07849 1BF6                        00            .byte	0
07850                                           ! 1061  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07851 1BF7                        00            .byte	0
07852 1BF8                        00            .byte	0
07853 1BF9                        C6            .byte	$C6
07854 1BFA                        C6            .byte	$C6
07855 1BFB                        C6            .byte	$C6
07856 1BFC                        C6            .byte	$C6
07857 1BFD                        C6            .byte	$C6
07858 1BFE                        C6            .byte	$C6
07859 1BFF                        C6            .byte	$C6
07860 1C00                        C6            .byte	$C6
07861 1C01                        7C            .byte	$7C
07862 1C02                        00            .byte	0
07863 1C03                        00            .byte	0
07864 1C04                        00            .byte	0
07865                                           ! 1062  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07866 1C05                        00            .byte	0
07867 1C06                        00            .byte	0
07868 1C07                        C6            .byte	$C6
07869 1C08                        C6            .byte	$C6
07870 1C09                        C6            .byte	$C6
07871 1C0A                        C6            .byte	$C6
07872 1C0B                        C6            .byte	$C6
07873 1C0C                        C6            .byte	$C6
07874 1C0D                        6C            .byte	$6C
07875 1C0E                        38            .byte	$38
07876 1C0F                        10            .byte	$10
07877 1C10                        00            .byte	0
07878 1C11                        00            .byte	0
07879 1C12                        00            .byte	0
07880                                           ! 1063  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07881 1C13                        00            .byte	0
07882 1C14                        00            .byte	0
07883 1C15                        C6            .byte	$C6
07884 1C16                        C6            .byte	$C6
07885 1C17                        C6            .byte	$C6
07886 1C18                        C6            .byte	$C6
07887 1C19                        D6            .byte	$D6
07888 1C1A                        D6            .byte	$D6
07889 1C1B                        FE            .byte	$FE
07890 1C1C                        7C            .byte	$7C
07891 1C1D                        6C            .byte	$6C
07892 1C1E                        00            .byte	0
07893 1C1F                        00            .byte	0
07894 1C20                        00            .byte	0
07895                                           ! 1064  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07896 1C21                        00            .byte	0
07897 1C22                        00            .byte	0
07898 1C23                        C6            .byte	$C6
07899 1C24                        C6            .byte	$C6
07900 1C25                        6C            .byte	$6C
07901 1C26                        38            .byte	$38
07902 1C27                        38            .byte	$38
07903 1C28                        38            .byte	$38
07904 1C29                        6C            .byte	$6C
07905 1C2A                        C6            .byte	$C6
07906 1C2B                        C6            .byte	$C6
07907 1C2C                        00            .byte	0
07908 1C2D                        00            .byte	0
07909 1C2E                        00            .byte	0
07910                                           ! 1065  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07911 1C2F                        00            .byte	0
07912 1C30                        00            .byte	0
07913 1C31                        66            .byte	$66
07914 1C32                        66            .byte	$66
07915 1C33                        66            .byte	$66
07916 1C34                        66            .byte	$66
07917 1C35                        3C            .byte	$3C
07918 1C36                        18            .byte	$18
07919 1C37                        18            .byte	$18
07920 1C38                        18            .byte	$18
07921 1C39                        3C            .byte	$3C
07922 1C3A                        00            .byte	0
07923 1C3B                        00            .byte	0
07924 1C3C                        00            .byte	0
07925                                           ! 1066  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07926 1C3D                        00            .byte	0
07927 1C3E                        00            .byte	0
07928 1C3F                        FE            .byte	$FE
07929 1C40                        C6            .byte	$C6
07930 1C41                        8C            .byte	$8C
07931 1C42                        18            .byte	$18
07932 1C43                        30            .byte	$30
07933 1C44                        60            .byte	$60
07934 1C45                        C2            .byte	$C2
07935 1C46                        C6            .byte	$C6
07936 1C47                        FE            .byte	$FE
07937 1C48                        00            .byte	0
07938 1C49                        00            .byte	0
07939 1C4A                        00            .byte	0
07940                                           ! 1067  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07941 1C4B                        00            .byte	0
07942 1C4C                        00            .byte	0
07943 1C4D                        3C            .byte	$3C
07944 1C4E                        30            .byte	$30
07945 1C4F                        30            .byte	$30
07946 1C50                        30            .byte	$30
07947 1C51                        30            .byte	$30
07948 1C52                        30            .byte	$30
07949 1C53                        30            .byte	$30
07950 1C54                        30            .byte	$30
07951 1C55                        3C            .byte	$3C
07952 1C56                        00            .byte	0
07953 1C57                        00            .byte	0
07954 1C58                        00            .byte	0
07955                                           ! 1068  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07956 1C59                        00            .byte	0
07957 1C5A                        00            .byte	0
07958 1C5B                        80            .byte	$80
07959 1C5C                        C0            .byte	$C0
07960 1C5D                        E0            .byte	$E0
07961 1C5E                        70            .byte	$70
07962 1C5F                        38            .byte	$38
07963 1C60                        1C            .byte	$1C
07964 1C61                        0E            .byte	$E
07965 1C62                        06            .byte	6
07966 1C63                        02            .byte	2
07967 1C64                        00            .byte	0
07968 1C65                        00            .byte	0
07969 1C66                        00            .byte	0
07970                                           ! 1069  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07971 1C67                        00            .byte	0
07972 1C68                        00            .byte	0
07973 1C69                        3C            .byte	$3C
07974 1C6A                        0C            .byte	$C
07975 1C6B                        0C            .byte	$C
07976 1C6C                        0C            .byte	$C
07977 1C6D                        0C            .byte	$C
07978 1C6E                        0C            .byte	$C
07979 1C6F                        0C            .byte	$C
07980 1C70                        0C            .byte	$C
07981 1C71                        3C            .byte	$3C
07982 1C72                        00            .byte	0
07983 1C73                        00            .byte	0
07984 1C74                        00            .byte	0
07985                                           ! 1070  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07986 1C75                        10            .byte	$10
07987 1C76                        38            .byte	$38
07988 1C77                        6C            .byte	$6C
07989 1C78                        C6            .byte	$C6
07990 1C79                        00            .byte	0
07991 1C7A                        00            .byte	0
07992 1C7B                        00            .byte	0
07993 1C7C                        00            .byte	0
07994 1C7D                        00            .byte	0
07995 1C7E                        00            .byte	0
07996 1C7F                        00            .byte	0
07997 1C80                        00            .byte	0
07998 1C81                        00            .byte	0
07999 1C82                        00            .byte	0
08000                                           ! 1071  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08001 1C83                        00            .byte	0
08002 1C84                        00            .byte	0
08003 1C85                        00            .byte	0
08004 1C86                        00            .byte	0
08005 1C87                        00            .byte	0
08006 1C88                        00            .byte	0
08007 1C89                        00            .byte	0
08008 1C8A                        00            .byte	0
08009 1C8B                        00            .byte	0
08010 1C8C                        00            .byte	0
08011 1C8D                        00            .byte	0
08012 1C8E                        00            .byte	0
08013 1C8F                        FF            .byte	$FF
08014 1C90                        00            .byte	0
08015                                           ! 1072  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08016 1C91                        30            .byte	$30
08017 1C92                        30            .byte	$30
08018 1C93                        18            .byte	$18
08019 1C94                        00            .byte	0
08020 1C95                        00            .byte	0
08021 1C96                        00            .byte	0
08022 1C97                        00            .byte	0
08023 1C98                        00            .byte	0
08024 1C99                        00            .byte	0
08025 1C9A                        00            .byte	0
08026 1C9B                        00            .byte	0
08027 1C9C                        00            .byte	0
08028 1C9D                        00            .byte	0
08029 1C9E                        00            .byte	0
08030                                           ! 1073  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08031 1C9F                        00            .byte	0
08032 1CA0                        00            .byte	0
08033 1CA1                        00            .byte	0
08034 1CA2                        00            .byte	0
08035 1CA3                        00            .byte	0
08036 1CA4                        78            .byte	$78
08037 1CA5                        0C            .byte	$C
08038 1CA6                        7C            .byte	$7C
08039 1CA7                        CC            .byte	$CC
08040 1CA8                        CC            .byte	$CC
08041 1CA9                        76            .byte	$76
08042 1CAA                        00            .byte	0
08043 1CAB                        00            .byte	0
08044 1CAC                        00            .byte	0
08045                                           ! 1074  0x00, 0x00, 0xe0, 0x60, 0x60, 0x
08046 1CAD                        00            .byte	0
08047 1CAE                        00            .byte	0
08048 1CAF                        E0            .byte	$E0
08049 1CB0                        60            .byte	$60
08050 1CB1                        60            .byte	$60
08051                                           ! 1074 78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08052 1CB2                        78            .byte	$78
08053 1CB3                        6C            .byte	$6C
08054 1CB4                        66            .byte	$66
08055 1CB5                        66            .byte	$66
08056 1CB6                        66            .byte	$66
08057 1CB7                        7C            .byte	$7C
08058 1CB8                        00            .byte	0
08059 1CB9                        00            .byte	0
08060 1CBA                        00            .byte	0
08061                                           ! 1075  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08062 1CBB                        00            .byte	0
08063 1CBC                        00            .byte	0
08064 1CBD                        00            .byte	0
08065 1CBE                        00            .byte	0
08066 1CBF                        00            .byte	0
08067 1CC0                        7C            .byte	$7C
08068 1CC1                        C6            .byte	$C6
08069 1CC2                        C0            .byte	$C0
08070 1CC3                        C0            .byte	$C0
08071 1CC4                        C6            .byte	$C6
08072 1CC5                        7C            .byte	$7C
08073 1CC6                        00            .byte	0
08074 1CC7                        00            .byte	0
08075 1CC8                        00            .byte	0
08076                                           ! 1076  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08077 1CC9                        00            .byte	0
08078 1CCA                        00            .byte	0
08079 1CCB                        1C            .byte	$1C
08080 1CCC                        0C            .byte	$C
08081 1CCD                        0C            .byte	$C
08082 1CCE                        3C            .byte	$3C
08083 1CCF                        6C            .byte	$6C
08084 1CD0                        CC            .byte	$CC
08085 1CD1                        CC            .byte	$CC
08086 1CD2                        CC            .byte	$CC
08087 1CD3                        76            .byte	$76
08088 1CD4                        00            .byte	0
08089 1CD5                        00            .byte	0
08090 1CD6                        00            .byte	0
08091                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08092 1CD7                        00            .byte	0
08093 1CD8                        00            .byte	0
08094 1CD9                        00            .byte	0
08095 1CDA                        00            .byte	0
08096 1CDB                        00            .byte	0
08097 1CDC                        7C            .byte	$7C
08098 1CDD                        C6            .byte	$C6
08099 1CDE                        FE            .byte	$FE
08100 1CDF                        C0            .byte	$C0
08101 1CE0                        C6            .byte	$C6
08102 1CE1                        7C            .byte	$7C
08103 1CE2                        00            .byte	0
08104 1CE3                        00            .byte	0
08105 1CE4                        00            .byte	0
08106                                           ! 1078  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08107 1CE5                        00            .byte	0
08108 1CE6                        00            .byte	0
08109 1CE7                        38            .byte	$38
08110 1CE8                        6C            .byte	$6C
08111 1CE9                        64            .byte	$64
08112 1CEA                        60            .byte	$60
08113 1CEB                        F0            .byte	$F0
08114 1CEC                        60            .byte	$60
08115 1CED                        60            .byte	$60
08116 1CEE                        60            .byte	$60
08117 1CEF                        F0            .byte	$F0
08118 1CF0                        00            .byte	0
08119 1CF1                        00            .byte	0
08120 1CF2                        00            .byte	0
08121                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08122 1CF3                        00            .byte	0
08123 1CF4                        00            .byte	0
08124 1CF5                        00            .byte	0
08125 1CF6                        00            .byte	0
08126 1CF7                        00            .byte	0
08127 1CF8                        76            .byte	$76
08128 1CF9                        CC            .byte	$CC
08129 1CFA                        CC            .byte	$CC
08130 1CFB                        CC            .byte	$CC
08131 1CFC                        7C            .byte	$7C
08132 1CFD                        0C            .byte	$C
08133 1CFE                        CC            .byte	$CC
08134 1CFF                        78            .byte	$78
08135 1D00                        00            .byte	0
08136                                           ! 1080  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08137 1D01                        00            .byte	0
08138 1D02                        00            .byte	0
08139 1D03                        E0            .byte	$E0
08140 1D04                        60            .byte	$60
08141 1D05                        60            .byte	$60
08142 1D06                        6C            .byte	$6C
08143 1D07                        76            .byte	$76
08144 1D08                        66            .byte	$66
08145 1D09                        66            .byte	$66
08146 1D0A                        66            .byte	$66
08147 1D0B                        E6            .byte	$E6
08148 1D0C                        00            .byte	0
08149 1D0D                        00            .byte	0
08150 1D0E                        00            .byte	0
08151                                           ! 1081  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08152 1D0F                        00            .byte	0
08153 1D10                        00            .byte	0
08154 1D11                        18            .byte	$18
08155 1D12                        18            .byte	$18
08156 1D13                        00            .byte	0
08157 1D14                        38            .byte	$38
08158 1D15                        18            .byte	$18
08159 1D16                        18            .byte	$18
08160 1D17                        18            .byte	$18
08161 1D18                        18            .byte	$18
08162 1D19                        3C            .byte	$3C
08163 1D1A                        00            .byte	0
08164 1D1B                        00            .byte	0
08165 1D1C                        00            .byte	0
08166                                           ! 1082  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08167 1D1D                        00            .byte	0
08168 1D1E                        00            .byte	0
08169 1D1F                        06            .byte	6
08170 1D20                        06            .byte	6
08171 1D21                        00            .byte	0
08172 1D22                        0E            .byte	$E
08173 1D23                        06            .byte	6
08174 1D24                        06            .byte	6
08175 1D25                        06            .byte	6
08176 1D26                        06            .byte	6
08177 1D27                        66            .byte	$66
08178 1D28                        66            .byte	$66
08179 1D29                        3C            .byte	$3C
08180 1D2A                        00            .byte	0
08181                                           ! 1083  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08182 1D2B                        00            .byte	0
08183 1D2C                        00            .byte	0
08184 1D2D                        E0            .byte	$E0
08185 1D2E                        60            .byte	$60
08186 1D2F                        60            .byte	$60
08187 1D30                        66            .byte	$66
08188 1D31                        6C            .byte	$6C
08189 1D32                        78            .byte	$78
08190 1D33                        6C            .byte	$6C
08191 1D34                        66            .byte	$66
08192 1D35                        E6            .byte	$E6
08193 1D36                        00            .byte	0
08194 1D37                        00            .byte	0
08195 1D38                        00            .byte	0
08196                                           ! 1084  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08197 1D39                        00            .byte	0
08198 1D3A                        00            .byte	0
08199 1D3B                        38            .byte	$38
08200 1D3C                        18            .byte	$18
08201 1D3D                        18            .byte	$18
08202 1D3E                        18            .byte	$18
08203 1D3F                        18            .byte	$18
08204 1D40                        18            .byte	$18
08205 1D41                        18            .byte	$18
08206 1D42                        18            .byte	$18
08207 1D43                        3C            .byte	$3C
08208 1D44                        00            .byte	0
08209 1D45                        00            .byte	0
08210 1D46                        00            .byte	0
08211                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08212 1D47                        00            .byte	0
08213 1D48                        00            .byte	0
08214 1D49                        00            .byte	0
08215 1D4A                        00            .byte	0
08216 1D4B                        00            .byte	0
08217 1D4C                        EC            .byte	$EC
08218 1D4D                        FE            .byte	$FE
08219 1D4E                        D6            .byte	$D6
08220 1D4F                        D6            .byte	$D6
08221 1D50                        D6            .byte	$D6
08222 1D51                        C6            .byte	$C6
08223 1D52                        00            .byte	0
08224 1D53                        00            .byte	0
08225 1D54                        00            .byte	0
08226                                           ! 1086  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08227 1D55                        00            .byte	0
08228 1D56                        00            .byte	0
08229 1D57                        00            .byte	0
08230 1D58                        00            .byte	0
08231 1D59                        00            .byte	0
08232 1D5A                        DC            .byte	$DC
08233 1D5B                        66            .byte	$66
08234 1D5C                        66            .byte	$66
08235 1D5D                        66            .byte	$66
08236 1D5E                        66            .byte	$66
08237 1D5F                        66            .byte	$66
08238 1D60                        00            .byte	0
08239 1D61                        00            .byte	0
08240 1D62                        00            .byte	0
08241                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08242 1D63                        00            .byte	0
08243 1D64                        00            .byte	0
08244 1D65                        00            .byte	0
08245 1D66                        00            .byte	0
08246 1D67                        00            .byte	0
08247 1D68                        7C            .byte	$7C
08248 1D69                        C6            .byte	$C6
08249 1D6A                        C6            .byte	$C6
08250 1D6B                        C6            .byte	$C6
08251 1D6C                        C6            .byte	$C6
08252 1D6D                        7C            .byte	$7C
08253 1D6E                        00            .byte	0
08254 1D6F                        00            .byte	0
08255 1D70                        00            .byte	0
08256                                           ! 1088  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08257 1D71                        00            .byte	0
08258 1D72                        00            .byte	0
08259 1D73                        00            .byte	0
08260 1D74                        00            .byte	0
08261 1D75                        00            .byte	0
08262 1D76                        DC            .byte	$DC
08263 1D77                        66            .byte	$66
08264 1D78                        66            .byte	$66
08265 1D79                        66            .byte	$66
08266 1D7A                        7C            .byte	$7C
08267 1D7B                        60            .byte	$60
08268 1D7C                        60            .byte	$60
08269 1D7D                        F0            .byte	$F0
08270 1D7E                        00            .byte	0
08271                                           ! 1089  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08272 1D7F                        00            .byte	0
08273 1D80                        00            .byte	0
08274 1D81                        00            .byte	0
08275 1D82                        00            .byte	0
08276 1D83                        00            .byte	0
08277 1D84                        76            .byte	$76
08278 1D85                        CC            .byte	$CC
08279 1D86                        CC            .byte	$CC
08280 1D87                        CC            .byte	$CC
08281 1D88                        7C            .byte	$7C
08282 1D89                        0C            .byte	$C
08283 1D8A                        0C            .byte	$C
08284 1D8B                        1E            .byte	$1E
08285 1D8C                        00            .byte	0
08286                                           ! 1090  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08287 1D8D                        00            .byte	0
08288 1D8E                        00            .byte	0
08289 1D8F                        00            .byte	0
08290 1D90                        00            .byte	0
08291 1D91                        00            .byte	0
08292 1D92                        DC            .byte	$DC
08293 1D93                        76            .byte	$76
08294 1D94                        66            .byte	$66
08295 1D95                        60            .byte	$60
08296 1D96                        60            .byte	$60
08297 1D97                        F0            .byte	$F0
08298 1D98                        00            .byte	0
08299 1D99                        00            .byte	0
08300 1D9A                        00            .byte	0
08301                                           ! 1091  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08302 1D9B                        00            .byte	0
08303 1D9C                        00            .byte	0
08304 1D9D                        00            .byte	0
08305 1D9E                        00            .byte	0
08306 1D9F                        00            .byte	0
08307 1DA0                        7C            .byte	$7C
08308 1DA1                        C6            .byte	$C6
08309 1DA2                        70            .byte	$70
08310 1DA3                        1C            .byte	$1C
08311 1DA4                        C6            .byte	$C6
08312 1DA5                        7C            .byte	$7C
08313 1DA6                        00            .byte	0
08314 1DA7                        00            .byte	0
08315 1DA8                        00            .byte	0
08316                                           ! 1092  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08317 1DA9                        00            .byte	0
08318 1DAA                        00            .byte	0
08319 1DAB                        10            .byte	$10
08320 1DAC                        30            .byte	$30
08321 1DAD                        30            .byte	$30
08322 1DAE                        FC            .byte	$FC
08323 1DAF                        30            .byte	$30
08324 1DB0                        30            .byte	$30
08325 1DB1                        30            .byte	$30
08326 1DB2                        36            .byte	$36
08327 1DB3                        1C            .byte	$1C
08328 1DB4                        00            .byte	0
08329 1DB5                        00            .byte	0
08330 1DB6                        00            .byte	0
08331                                           ! 1093  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08332 1DB7                        00            .byte	0
08333 1DB8                        00            .byte	0
08334 1DB9                        00            .byte	0
08335 1DBA                        00            .byte	0
08336 1DBB                        00            .byte	0
08337 1DBC                        CC            .byte	$CC
08338 1DBD                        CC            .byte	$CC
08339 1DBE                        CC            .byte	$CC
08340 1DBF                        CC            .byte	$CC
08341 1DC0                        CC            .byte	$CC
08342 1DC1                        76            .byte	$76
08343 1DC2                        00            .byte	0
08344 1DC3                        00            .byte	0
08345 1DC4                        00            .byte	0
08346                                           ! 1094  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08347 1DC5                        00            .byte	0
08348 1DC6                        00            .byte	0
08349 1DC7                        00            .byte	0
08350 1DC8                        00            .byte	0
08351 1DC9                        00            .byte	0
08352 1DCA                        66            .byte	$66
08353 1DCB                        66            .byte	$66
08354 1DCC                        66            .byte	$66
08355 1DCD                        66            .byte	$66
08356 1DCE                        3C            .byte	$3C
08357 1DCF                        18            .byte	$18
08358 1DD0                        00            .byte	0
08359 1DD1                        00            .byte	0
08360 1DD2                        00            .byte	0
08361                                           ! 1095  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08362 1DD3                        00            .byte	0
08363 1DD4                        00            .byte	0
08364 1DD5                        00            .byte	0
08365 1DD6                        00            .byte	0
08366 1DD7                        00            .byte	0
08367 1DD8                        C6            .byte	$C6
08368 1DD9                        C6            .byte	$C6
08369 1DDA                        D6            .byte	$D6
08370 1DDB                        D6            .byte	$D6
08371 1DDC                        FE            .byte	$FE
08372 1DDD                        6C            .byte	$6C
08373 1DDE                        00            .byte	0
08374 1DDF                        00            .byte	0
08375 1DE0                        00            .byte	0
08376                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08377 1DE1                        00            .byte	0
08378 1DE2                        00            .byte	0
08379 1DE3                        00            .byte	0
08380 1DE4                        00            .byte	0
08381 1DE5                        00            .byte	0
08382 1DE6                        C6            .byte	$C6
08383 1DE7                        6C            .byte	$6C
08384 1DE8                        38            .byte	$38
08385 1DE9                        38            .byte	$38
08386 1DEA                        6C            .byte	$6C
08387 1DEB                        C6            .byte	$C6
08388 1DEC                        00            .byte	0
08389 1DED                        00            .byte	0
08390 1DEE                        00            .byte	0
08391                                           ! 1097  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08392 1DEF                        00            .byte	0
08393 1DF0                        00            .byte	0
08394 1DF1                        00            .byte	0
08395 1DF2                        00            .byte	0
08396 1DF3                        00            .byte	0
08397 1DF4                        C6            .byte	$C6
08398 1DF5                        C6            .byte	$C6
08399 1DF6                        C6            .byte	$C6
08400 1DF7                        C6            .byte	$C6
08401 1DF8                        7E            .byte	$7E
08402 1DF9                        06            .byte	6
08403 1DFA                        0C            .byte	$C
08404 1DFB                        F8            .byte	$F8
08405 1DFC                        00            .byte	0
08406                                           ! 1098  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc
08407 1DFD                        00            .byte	0
08408 1DFE                        00            .byte	0
08409 1DFF                        00            .byte	0
08410 1E00                        00            .byte	0
08411 1E01                        00            .byte	0
08412 1E02                        FE            .byte	$FE
08413                                           ! 1098 , 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08414 1E03                        CC            .byte	$CC
08415 1E04                        18            .byte	$18
08416 1E05                        30            .byte	$30
08417 1E06                        66            .byte	$66
08418 1E07                        FE            .byte	$FE
08419 1E08                        00            .byte	0
08420 1E09                        00            .byte	0
08421 1E0A                        00            .byte	0
08422                                           ! 1099  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08423 1E0B                        00            .byte	0
08424 1E0C                        00            .byte	0
08425 1E0D                        0E            .byte	$E
08426 1E0E                        18            .byte	$18
08427 1E0F                        18            .byte	$18
08428 1E10                        18            .byte	$18
08429 1E11                        70            .byte	$70
08430 1E12                        18            .byte	$18
08431 1E13                        18            .byte	$18
08432 1E14                        18            .byte	$18
08433 1E15                        0E            .byte	$E
08434 1E16                        00            .byte	0
08435 1E17                        00            .byte	0
08436 1E18                        00            .byte	0
08437                                           ! 1100  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08438 1E19                        00            .byte	0
08439 1E1A                        00            .byte	0
08440 1E1B                        18            .byte	$18
08441 1E1C                        18            .byte	$18
08442 1E1D                        18            .byte	$18
08443 1E1E                        18            .byte	$18
08444 1E1F                        00            .byte	0
08445 1E20                        18            .byte	$18
08446 1E21                        18            .byte	$18
08447 1E22                        18            .byte	$18
08448 1E23                        18            .byte	$18
08449 1E24                        00            .byte	0
08450 1E25                        00            .byte	0
08451 1E26                        00            .byte	0
08452                                           ! 1101  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08453 1E27                        00            .byte	0
08454 1E28                        00            .byte	0
08455 1E29                        70            .byte	$70
08456 1E2A                        18            .byte	$18
08457 1E2B                        18            .byte	$18
08458 1E2C                        18            .byte	$18
08459 1E2D                        0E            .byte	$E
08460 1E2E                        18            .byte	$18
08461 1E2F                        18            .byte	$18
08462 1E30                        18            .byte	$18
08463 1E31                        70            .byte	$70
08464 1E32                        00            .byte	0
08465 1E33                        00            .byte	0
08466 1E34                        00            .byte	0
08467                                           ! 1102  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08468 1E35                        00            .byte	0
08469 1E36                        00            .byte	0
08470 1E37                        76            .byte	$76
08471 1E38                        DC            .byte	$DC
08472 1E39                        00            .byte	0
08473 1E3A                        00            .byte	0
08474 1E3B                        00            .byte	0
08475 1E3C                        00            .byte	0
08476 1E3D                        00            .byte	0
08477 1E3E                        00            .byte	0
08478 1E3F                        00            .byte	0
08479 1E40                        00            .byte	0
08480 1E41                        00            .byte	0
08481 1E42                        00            .byte	0
08482                                           ! 1103  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08483 1E43                        00            .byte	0
08484 1E44                        00            .byte	0
08485 1E45                        00            .byte	0
08486 1E46                        00            .byte	0
08487 1E47                        10            .byte	$10
08488 1E48                        38            .byte	$38
08489 1E49                        6C            .byte	$6C
08490 1E4A                        C6            .byte	$C6
08491 1E4B                        C6            .byte	$C6
08492 1E4C                        FE            .byte	$FE
08493 1E4D                        00            .byte	0
08494 1E4E                        00            .byte	0
08495 1E4F                        00            .byte	0
08496 1E50                        00            .byte	0
08497                                           ! 1104  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08498 1E51                        00            .byte	0
08499 1E52                        00            .byte	0
08500 1E53                        3C            .byte	$3C
08501 1E54                        66            .byte	$66
08502 1E55                        C2            .byte	$C2
08503 1E56                        C0            .byte	$C0
08504 1E57                        C0            .byte	$C0
08505 1E58                        C2            .byte	$C2
08506 1E59                        66            .byte	$66
08507 1E5A                        3C            .byte	$3C
08508 1E5B                        0C            .byte	$C
08509 1E5C                        06            .byte	6
08510 1E5D                        7C            .byte	$7C
08511 1E5E                        00            .byte	0
08512                                           ! 1105  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08513 1E5F                        00            .byte	0
08514 1E60                        00            .byte	0
08515 1E61                        CC            .byte	$CC
08516 1E62                        CC            .byte	$CC
08517 1E63                        00            .byte	0
08518 1E64                        CC            .byte	$CC
08519 1E65                        CC            .byte	$CC
08520 1E66                        CC            .byte	$CC
08521 1E67                        CC            .byte	$CC
08522 1E68                        CC            .byte	$CC
08523 1E69                        76            .byte	$76
08524 1E6A                        00            .byte	0
08525 1E6B                        00            .byte	0
08526 1E6C                        00            .byte	0
08527                                           ! 1106  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08528 1E6D                        00            .byte	0
08529 1E6E                        0C            .byte	$C
08530 1E6F                        18            .byte	$18
08531 1E70                        30            .byte	$30
08532 1E71                        00            .byte	0
08533 1E72                        7C            .byte	$7C
08534 1E73                        C6            .byte	$C6
08535 1E74                        FE            .byte	$FE
08536 1E75                        C0            .byte	$C0
08537 1E76                        C6            .byte	$C6
08538 1E77                        7C            .byte	$7C
08539 1E78                        00            .byte	0
08540 1E79                        00            .byte	0
08541 1E7A                        00            .byte	0
08542                                           ! 1107  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08543 1E7B                        00            .byte	0
08544 1E7C                        10            .byte	$10
08545 1E7D                        38            .byte	$38
08546 1E7E                        6C            .byte	$6C
08547 1E7F                        00            .byte	0
08548 1E80                        78            .byte	$78
08549 1E81                        0C            .byte	$C
08550 1E82                        7C            .byte	$7C
08551 1E83                        CC            .byte	$CC
08552 1E84                        CC            .byte	$CC
08553 1E85                        76            .byte	$76
08554 1E86                        00            .byte	0
08555 1E87                        00            .byte	0
08556 1E88                        00            .byte	0
08557                                           ! 1108  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08558 1E89                        00            .byte	0
08559 1E8A                        00            .byte	0
08560 1E8B                        CC            .byte	$CC
08561 1E8C                        CC            .byte	$CC
08562 1E8D                        00            .byte	0
08563 1E8E                        78            .byte	$78
08564 1E8F                        0C            .byte	$C
08565 1E90                        7C            .byte	$7C
08566 1E91                        CC            .byte	$CC
08567 1E92                        CC            .byte	$CC
08568 1E93                        76            .byte	$76
08569 1E94                        00            .byte	0
08570 1E95                        00            .byte	0
08571 1E96                        00            .byte	0
08572                                           ! 1109  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08573 1E97                        00            .byte	0
08574 1E98                        60            .byte	$60
08575 1E99                        30            .byte	$30
08576 1E9A                        18            .byte	$18
08577 1E9B                        00            .byte	0
08578 1E9C                        78            .byte	$78
08579 1E9D                        0C            .byte	$C
08580 1E9E                        7C            .byte	$7C
08581 1E9F                        CC            .byte	$CC
08582 1EA0                        CC            .byte	$CC
08583 1EA1                        76            .byte	$76
08584 1EA2                        00            .byte	0
08585 1EA3                        00            .byte	0
08586 1EA4                        00            .byte	0
08587                                           ! 1110  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08588 1EA5                        00            .byte	0
08589 1EA6                        38            .byte	$38
08590 1EA7                        6C            .byte	$6C
08591 1EA8                        38            .byte	$38
08592 1EA9                        00            .byte	0
08593 1EAA                        78            .byte	$78
08594 1EAB                        0C            .byte	$C
08595 1EAC                        7C            .byte	$7C
08596 1EAD                        CC            .byte	$CC
08597 1EAE                        CC            .byte	$CC
08598 1EAF                        76            .byte	$76
08599 1EB0                        00            .byte	0
08600 1EB1                        00            .byte	0
08601 1EB2                        00            .byte	0
08602                                           ! 1111  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08603 1EB3                        00            .byte	0
08604 1EB4                        00            .byte	0
08605 1EB5                        00            .byte	0
08606 1EB6                        00            .byte	0
08607 1EB7                        3C            .byte	$3C
08608 1EB8                        66            .byte	$66
08609 1EB9                        60            .byte	$60
08610 1EBA                        66            .byte	$66
08611 1EBB                        3C            .byte	$3C
08612 1EBC                        0C            .byte	$C
08613 1EBD                        06            .byte	6
08614 1EBE                        3C            .byte	$3C
08615 1EBF                        00            .byte	0
08616 1EC0                        00            .byte	0
08617                                           ! 1112  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08618 1EC1                        00            .byte	0
08619 1EC2                        10            .byte	$10
08620 1EC3                        38            .byte	$38
08621 1EC4                        6C            .byte	$6C
08622 1EC5                        00            .byte	0
08623 1EC6                        7C            .byte	$7C
08624 1EC7                        C6            .byte	$C6
08625 1EC8                        FE            .byte	$FE
08626 1EC9                        C0            .byte	$C0
08627 1ECA                        C6            .byte	$C6
08628 1ECB                        7C            .byte	$7C
08629 1ECC                        00            .byte	0
08630 1ECD                        00            .byte	0
08631 1ECE                        00            .byte	0
08632                                           ! 1113  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08633 1ECF                        00            .byte	0
08634 1ED0                        00            .byte	0
08635 1ED1                        CC            .byte	$CC
08636 1ED2                        CC            .byte	$CC
08637 1ED3                        00            .byte	0
08638 1ED4                        7C            .byte	$7C
08639 1ED5                        C6            .byte	$C6
08640 1ED6                        FE            .byte	$FE
08641 1ED7                        C0            .byte	$C0
08642 1ED8                        C6            .byte	$C6
08643 1ED9                        7C            .byte	$7C
08644 1EDA                        00            .byte	0
08645 1EDB                        00            .byte	0
08646 1EDC                        00            .byte	0
08647                                           ! 1114  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08648 1EDD                        00            .byte	0
08649 1EDE                        60            .byte	$60
08650 1EDF                        30            .byte	$30
08651 1EE0                        18            .byte	$18
08652 1EE1                        00            .byte	0
08653 1EE2                        7C            .byte	$7C
08654 1EE3                        C6            .byte	$C6
08655 1EE4                        FE            .byte	$FE
08656 1EE5                        C0            .byte	$C0
08657 1EE6                        C6            .byte	$C6
08658 1EE7                        7C            .byte	$7C
08659 1EE8                        00            .byte	0
08660 1EE9                        00            .byte	0
08661 1EEA                        00            .byte	0
08662                                           ! 1115  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08663 1EEB                        00            .byte	0
08664 1EEC                        00            .byte	0
08665 1EED                        66            .byte	$66
08666 1EEE                        66            .byte	$66
08667 1EEF                        00            .byte	0
08668 1EF0                        38            .byte	$38
08669 1EF1                        18            .byte	$18
08670 1EF2                        18            .byte	$18
08671 1EF3                        18            .byte	$18
08672 1EF4                        18            .byte	$18
08673 1EF5                        3C            .byte	$3C
08674 1EF6                        00            .byte	0
08675 1EF7                        00            .byte	0
08676 1EF8                        00            .byte	0
08677                                           ! 1116  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08678 1EF9                        00            .byte	0
08679 1EFA                        18            .byte	$18
08680 1EFB                        3C            .byte	$3C
08681 1EFC                        66            .byte	$66
08682 1EFD                        00            .byte	0
08683 1EFE                        38            .byte	$38
08684 1EFF                        18            .byte	$18
08685 1F00                        18            .byte	$18
08686 1F01                        18            .byte	$18
08687 1F02                        18            .byte	$18
08688 1F03                        3C            .byte	$3C
08689 1F04                        00            .byte	0
08690 1F05                        00            .byte	0
08691 1F06                        00            .byte	0
08692                                           ! 1117  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08693 1F07                        00            .byte	0
08694 1F08                        60            .byte	$60
08695 1F09                        30            .byte	$30
08696 1F0A                        18            .byte	$18
08697 1F0B                        00            .byte	0
08698 1F0C                        38            .byte	$38
08699 1F0D                        18            .byte	$18
08700 1F0E                        18            .byte	$18
08701 1F0F                        18            .byte	$18
08702 1F10                        18            .byte	$18
08703 1F11                        3C            .byte	$3C
08704 1F12                        00            .byte	0
08705 1F13                        00            .byte	0
08706 1F14                        00            .byte	0
08707                                           ! 1118  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08708 1F15                        00            .byte	0
08709 1F16                        C6            .byte	$C6
08710 1F17                        C6            .byte	$C6
08711 1F18                        10            .byte	$10
08712 1F19                        38            .byte	$38
08713 1F1A                        6C            .byte	$6C
08714 1F1B                        C6            .byte	$C6
08715 1F1C                        C6            .byte	$C6
08716 1F1D                        FE            .byte	$FE
08717 1F1E                        C6            .byte	$C6
08718 1F1F                        C6            .byte	$C6
08719 1F20                        00            .byte	0
08720 1F21                        00            .byte	0
08721 1F22                        00            .byte	0
08722                                           ! 1119  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08723 1F23                        38            .byte	$38
08724 1F24                        6C            .byte	$6C
08725 1F25                        38            .byte	$38
08726 1F26                        00            .byte	0
08727 1F27                        38            .byte	$38
08728 1F28                        6C            .byte	$6C
08729 1F29                        C6            .byte	$C6
08730 1F2A                        C6            .byte	$C6
08731 1F2B                        FE            .byte	$FE
08732 1F2C                        C6            .byte	$C6
08733 1F2D                        C6            .byte	$C6
08734 1F2E                        00            .byte	0
08735 1F2F                        00            .byte	0
08736 1F30                        00            .byte	0
08737                                           ! 1120  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08738 1F31                        18            .byte	$18
08739 1F32                        30            .byte	$30
08740 1F33                        60            .byte	$60
08741 1F34                        00            .byte	0
08742 1F35                        FE            .byte	$FE
08743 1F36                        66            .byte	$66
08744 1F37                        60            .byte	$60
08745 1F38                        7C            .byte	$7C
08746 1F39                        60            .byte	$60
08747 1F3A                        66            .byte	$66
08748 1F3B                        FE            .byte	$FE
08749 1F3C                        00            .byte	0
08750 1F3D                        00            .byte	0
08751 1F3E                        00            .byte	0
08752                                           ! 1121  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08753 1F3F                        00            .byte	0
08754 1F40                        00            .byte	0
08755 1F41                        00            .byte	0
08756 1F42                        00            .byte	0
08757 1F43                        CC            .byte	$CC
08758 1F44                        76            .byte	$76
08759 1F45                        36            .byte	$36
08760 1F46                        7E            .byte	$7E
08761 1F47                        D8            .byte	$D8
08762 1F48                        D8            .byte	$D8
08763 1F49                        6E            .byte	$6E
08764 1F4A                        00            .byte	0
08765 1F4B                        00            .byte	0
08766 1F4C                        00            .byte	0
08767                                           ! 1122  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 
08768 1F4D                        00            .byte	0
08769 1F4E                        00            .byte	0
08770 1F4F                        3E            .byte	$3E
08771 1F50                        6C            .byte	$6C
08772 1F51                        CC            .byte	$CC
08773 1F52                        CC            .byte	$CC
08774 1F53                        FE            .byte	$FE
08775 1F54                        CC            .byte	$CC
08776                                           ! 1122 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08777 1F55                        CC            .byte	$CC
08778 1F56                        CC            .byte	$CC
08779 1F57                        CE            .byte	$CE
08780 1F58                        00            .byte	0
08781 1F59                        00            .byte	0
08782 1F5A                        00            .byte	0
08783                                           ! 1123  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08784 1F5B                        00            .byte	0
08785 1F5C                        10            .byte	$10
08786 1F5D                        38            .byte	$38
08787 1F5E                        6C            .byte	$6C
08788 1F5F                        00            .byte	0
08789 1F60                        7C            .byte	$7C
08790 1F61                        C6            .byte	$C6
08791 1F62                        C6            .byte	$C6
08792 1F63                        C6            .byte	$C6
08793 1F64                        C6            .byte	$C6
08794 1F65                        7C            .byte	$7C
08795 1F66                        00            .byte	0
08796 1F67                        00            .byte	0
08797 1F68                        00            .byte	0
08798                                           ! 1124  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08799 1F69                        00            .byte	0
08800 1F6A                        00            .byte	0
08801 1F6B                        C6            .byte	$C6
08802 1F6C                        C6            .byte	$C6
08803 1F6D                        00            .byte	0
08804 1F6E                        7C            .byte	$7C
08805 1F6F                        C6            .byte	$C6
08806 1F70                        C6            .byte	$C6
08807 1F71                        C6            .byte	$C6
08808 1F72                        C6            .byte	$C6
08809 1F73                        7C            .byte	$7C
08810 1F74                        00            .byte	0
08811 1F75                        00            .byte	0
08812 1F76                        00            .byte	0
08813                                           ! 1125  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08814 1F77                        00            .byte	0
08815 1F78                        60            .byte	$60
08816 1F79                        30            .byte	$30
08817 1F7A                        18            .byte	$18
08818 1F7B                        00            .byte	0
08819 1F7C                        7C            .byte	$7C
08820 1F7D                        C6            .byte	$C6
08821 1F7E                        C6            .byte	$C6
08822 1F7F                        C6            .byte	$C6
08823 1F80                        C6            .byte	$C6
08824 1F81                        7C            .byte	$7C
08825 1F82                        00            .byte	0
08826 1F83                        00            .byte	0
08827 1F84                        00            .byte	0
08828                                           ! 1126  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08829 1F85                        00            .byte	0
08830 1F86                        30            .byte	$30
08831 1F87                        78            .byte	$78
08832 1F88                        CC            .byte	$CC
08833 1F89                        00            .byte	0
08834 1F8A                        CC            .byte	$CC
08835 1F8B                        CC            .byte	$CC
08836 1F8C                        CC            .byte	$CC
08837 1F8D                        CC            .byte	$CC
08838 1F8E                        CC            .byte	$CC
08839 1F8F                        76            .byte	$76
08840 1F90                        00            .byte	0
08841 1F91                        00            .byte	0
08842 1F92                        00            .byte	0
08843                                           ! 1127  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08844 1F93                        00            .byte	0
08845 1F94                        60            .byte	$60
08846 1F95                        30            .byte	$30
08847 1F96                        18            .byte	$18
08848 1F97                        00            .byte	0
08849 1F98                        CC            .byte	$CC
08850 1F99                        CC            .byte	$CC
08851 1F9A                        CC            .byte	$CC
08852 1F9B                        CC            .byte	$CC
08853 1F9C                        CC            .byte	$CC
08854 1F9D                        76            .byte	$76
08855 1F9E                        00            .byte	0
08856 1F9F                        00            .byte	0
08857 1FA0                        00            .byte	0
08858                                           ! 1128  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08859 1FA1                        00            .byte	0
08860 1FA2                        00            .byte	0
08861 1FA3                        C6            .byte	$C6
08862 1FA4                        C6            .byte	$C6
08863 1FA5                        00            .byte	0
08864 1FA6                        C6            .byte	$C6
08865 1FA7                        C6            .byte	$C6
08866 1FA8                        C6            .byte	$C6
08867 1FA9                        C6            .byte	$C6
08868 1FAA                        7E            .byte	$7E
08869 1FAB                        06            .byte	6
08870 1FAC                        0C            .byte	$C
08871 1FAD                        78            .byte	$78
08872 1FAE                        00            .byte	0
08873                                           ! 1129  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08874 1FAF                        00            .byte	0
08875 1FB0                        C6            .byte	$C6
08876 1FB1                        C6            .byte	$C6
08877 1FB2                        38            .byte	$38
08878 1FB3                        6C            .byte	$6C
08879 1FB4                        C6            .byte	$C6
08880 1FB5                        C6            .byte	$C6
08881 1FB6                        C6            .byte	$C6
08882 1FB7                        C6            .byte	$C6
08883 1FB8                        6C            .byte	$6C
08884 1FB9                        38            .byte	$38
08885 1FBA                        00            .byte	0
08886 1FBB                        00            .byte	0
08887 1FBC                        00            .byte	0
08888                                           ! 1130  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08889 1FBD                        00            .byte	0
08890 1FBE                        C6            .byte	$C6
08891 1FBF                        C6            .byte	$C6
08892 1FC0                        00            .byte	0
08893 1FC1                        C6            .byte	$C6
08894 1FC2                        C6            .byte	$C6
08895 1FC3                        C6            .byte	$C6
08896 1FC4                        C6            .byte	$C6
08897 1FC5                        C6            .byte	$C6
08898 1FC6                        C6            .byte	$C6
08899 1FC7                        7C            .byte	$7C
08900 1FC8                        00            .byte	0
08901 1FC9                        00            .byte	0
08902 1FCA                        00            .byte	0
08903                                           ! 1131  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08904 1FCB                        00            .byte	0
08905 1FCC                        18            .byte	$18
08906 1FCD                        18            .byte	$18
08907 1FCE                        3C            .byte	$3C
08908 1FCF                        66            .byte	$66
08909 1FD0                        60            .byte	$60
08910 1FD1                        60            .byte	$60
08911 1FD2                        66            .byte	$66
08912 1FD3                        3C            .byte	$3C
08913 1FD4                        18            .byte	$18
08914 1FD5                        18            .byte	$18
08915 1FD6                        00            .byte	0
08916 1FD7                        00            .byte	0
08917 1FD8                        00            .byte	0
08918                                           ! 1132  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08919 1FD9                        00            .byte	0
08920 1FDA                        38            .byte	$38
08921 1FDB                        6C            .byte	$6C
08922 1FDC                        64            .byte	$64
08923 1FDD                        60            .byte	$60
08924 1FDE                        F0            .byte	$F0
08925 1FDF                        60            .byte	$60
08926 1FE0                        60            .byte	$60
08927 1FE1                        60            .byte	$60
08928 1FE2                        E6            .byte	$E6
08929 1FE3                        FC            .byte	$FC
08930 1FE4                        00            .byte	0
08931 1FE5                        00            .byte	0
08932 1FE6                        00            .byte	0
08933                                           ! 1133  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08934 1FE7                        00            .byte	0
08935 1FE8                        00            .byte	0
08936 1FE9                        66            .byte	$66
08937 1FEA                        66            .byte	$66
08938 1FEB                        3C            .byte	$3C
08939 1FEC                        18            .byte	$18
08940 1FED                        7E            .byte	$7E
08941 1FEE                        18            .byte	$18
08942 1FEF                        7E            .byte	$7E
08943 1FF0                        18            .byte	$18
08944 1FF1                        18            .byte	$18
08945 1FF2                        00            .byte	0
08946 1FF3                        00            .byte	0
08947 1FF4                        00            .byte	0
08948                                           ! 1134  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08949 1FF5                        00            .byte	0
08950 1FF6                        F8            .byte	$F8
08951 1FF7                        CC            .byte	$CC
08952 1FF8                        CC            .byte	$CC
08953 1FF9                        F8            .byte	$F8
08954 1FFA                        C4            .byte	$C4
08955 1FFB                        CC            .byte	$CC
08956 1FFC                        DE            .byte	$DE
08957 1FFD                        CC            .byte	$CC
08958 1FFE                        CC            .byte	$CC
08959 1FFF                        C6            .byte	$C6
08960 2000                        00            .byte	0
08961 2001                        00            .byte	0
08962 2002                        00            .byte	0
08963                                           ! 1135  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08964 2003                        00            .byte	0
08965 2004                        0E            .byte	$E
08966 2005                        1B            .byte	$1B
08967 2006                        18            .byte	$18
08968 2007                        18            .byte	$18
08969 2008                        18            .byte	$18
08970 2009                        7E            .byte	$7E
08971 200A                        18            .byte	$18
08972 200B                        18            .byte	$18
08973 200C                        18            .byte	$18
08974 200D                        18            .byte	$18
08975 200E                        D8            .byte	$D8
08976 200F                        70            .byte	$70
08977 2010                        00            .byte	0
08978                                           ! 1136  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08979 2011                        00            .byte	0
08980 2012                        18            .byte	$18
08981 2013                        30            .byte	$30
08982 2014                        60            .byte	$60
08983 2015                        00            .byte	0
08984 2016                        78            .byte	$78
08985 2017                        0C            .byte	$C
08986 2018                        7C            .byte	$7C
08987 2019                        CC            .byte	$CC
08988 201A                        CC            .byte	$CC
08989 201B                        76            .byte	$76
08990 201C                        00            .byte	0
08991 201D                        00            .byte	0
08992 201E                        00            .byte	0
08993                                           ! 1137  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08994 201F                        00            .byte	0
08995 2020                        0C            .byte	$C
08996 2021                        18            .byte	$18
08997 2022                        30            .byte	$30
08998 2023                        00            .byte	0
08999 2024                        38            .byte	$38
09000 2025                        18            .byte	$18
09001 2026                        18            .byte	$18
09002 2027                        18            .byte	$18
09003 2028                        18            .byte	$18
09004 2029                        3C            .byte	$3C
09005 202A                        00            .byte	0
09006 202B                        00            .byte	0
09007 202C                        00            .byte	0
09008                                           ! 1138  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09009 202D                        00            .byte	0
09010 202E                        18            .byte	$18
09011 202F                        30            .byte	$30
09012 2030                        60            .byte	$60
09013 2031                        00            .byte	0
09014 2032                        7C            .byte	$7C
09015 2033                        C6            .byte	$C6
09016 2034                        C6            .byte	$C6
09017 2035                        C6            .byte	$C6
09018 2036                        C6            .byte	$C6
09019 2037                        7C            .byte	$7C
09020 2038                        00            .byte	0
09021 2039                        00            .byte	0
09022 203A                        00            .byte	0
09023                                           ! 1139  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09024 203B                        00            .byte	0
09025 203C                        18            .byte	$18
09026 203D                        30            .byte	$30
09027 203E                        60            .byte	$60
09028 203F                        00            .byte	0
09029 2040                        CC            .byte	$CC
09030 2041                        CC            .byte	$CC
09031 2042                        CC            .byte	$CC
09032 2043                        CC            .byte	$CC
09033 2044                        CC            .byte	$CC
09034 2045                        76            .byte	$76
09035 2046                        00            .byte	0
09036 2047                        00            .byte	0
09037 2048                        00            .byte	0
09038                                           ! 1140  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09039 2049                        00            .byte	0
09040 204A                        00            .byte	0
09041 204B                        76            .byte	$76
09042 204C                        DC            .byte	$DC
09043 204D                        00            .byte	0
09044 204E                        DC            .byte	$DC
09045 204F                        66            .byte	$66
09046 2050                        66            .byte	$66
09047 2051                        66            .byte	$66
09048 2052                        66            .byte	$66
09049 2053                        66            .byte	$66
09050 2054                        00            .byte	0
09051 2055                        00            .byte	0
09052 2056                        00            .byte	0
09053                                           ! 1141  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09054 2057                        76            .byte	$76
09055 2058                        DC            .byte	$DC
09056 2059                        00            .byte	0
09057 205A                        C6            .byte	$C6
09058 205B                        E6            .byte	$E6
09059 205C                        F6            .byte	$F6
09060 205D                        FE            .byte	$FE
09061 205E                        DE            .byte	$DE
09062 205F                        CE            .byte	$CE
09063 2060                        C6            .byte	$C6
09064 2061                        C6            .byte	$C6
09065 2062                        00            .byte	0
09066 2063                        00            .byte	0
09067 2064                        00            .byte	0
09068                                           ! 1142  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09069 2065                        00            .byte	0
09070 2066                        3C            .byte	$3C
09071 2067                        6C            .byte	$6C
09072 2068                        6C            .byte	$6C
09073 2069                        3E            .byte	$3E
09074 206A                        00            .byte	0
09075 206B                        7E            .byte	$7E
09076 206C                        00            .byte	0
09077 206D                        00            .byte	0
09078 206E                        00            .byte	0
09079 206F                        00            .byte	0
09080 2070                        00            .byte	0
09081 2071                        00            .byte	0
09082 2072                        00            .byte	0
09083                                           ! 1143  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09084 2073                        00            .byte	0
09085 2074                        38            .byte	$38
09086 2075                        6C            .byte	$6C
09087 2076                        6C            .byte	$6C
09088 2077                        38            .byte	$38
09089 2078                        00            .byte	0
09090 2079                        7C            .byte	$7C
09091 207A                        00            .byte	0
09092 207B                        00            .byte	0
09093 207C                        00            .byte	0
09094 207D                        00            .byte	0
09095 207E                        00            .byte	0
09096 207F                        00            .byte	0
09097 2080                        00            .byte	0
09098                                           ! 1144  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09099 2081                        00            .byte	0
09100 2082                        00            .byte	0
09101 2083                        30            .byte	$30
09102 2084                        30            .byte	$30
09103 2085                        00            .byte	0
09104 2086                        30            .byte	$30
09105 2087                        30            .byte	$30
09106 2088                        60            .byte	$60
09107 2089                        C6            .byte	$C6
09108 208A                        C6            .byte	$C6
09109 208B                        7C            .byte	$7C
09110 208C                        00            .byte	0
09111 208D                        00            .byte	0
09112 208E                        00            .byte	0
09113                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09114 208F                        00            .byte	0
09115 2090                        00            .byte	0
09116 2091                        00            .byte	0
09117 2092                        00            .byte	0
09118 2093                        00            .byte	0
09119 2094                        00            .byte	0
09120 2095                        FE            .byte	$FE
09121 2096                        C0            .byte	$C0
09122 2097                        C0            .byte	$C0
09123 2098                        C0            .byte	$C0
09124 2099                        00            .byte	0
09125 209A                        00            .byte	0
09126 209B                        00            .byte	0
09127 209C                        00            .byte	0
09128                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x
09129 209D                        00            .byte	0
09130 209E                        00            .byte	0
09131 209F                        00            .byte	0
09132 20A0                        00            .byte	0
09133 20A1                        00            .byte	0
09134 20A2                        00            .byte	0
09135 20A3                        FE            .byte	$FE
09136 20A4                        06            .byte	6
09137 20A5                        06            .byte	6
09138                                           ! 1146 06, 0x00, 0x00, 0x00, 0x00,
09139 20A6                        06            .byte	6
09140 20A7                        00            .byte	0
09141 20A8                        00            .byte	0
09142 20A9                        00            .byte	0
09143 20AA                        00            .byte	0
09144                                           ! 1147  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09145 20AB                        00            .byte	0
09146 20AC                        C0            .byte	$C0
09147 20AD                        C0            .byte	$C0
09148 20AE                        C6            .byte	$C6
09149 20AF                        CC            .byte	$CC
09150 20B0                        D8            .byte	$D8
09151 20B1                        30            .byte	$30
09152 20B2                        60            .byte	$60
09153 20B3                        DC            .byte	$DC
09154 20B4                        86            .byte	$86
09155 20B5                        0C            .byte	$C
09156 20B6                        18            .byte	$18
09157 20B7                        3E            .byte	$3E
09158 20B8                        00            .byte	0
09159                                           ! 1148  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09160 20B9                        00            .byte	0
09161 20BA                        C0            .byte	$C0
09162 20BB                        C0            .byte	$C0
09163 20BC                        C6            .byte	$C6
09164 20BD                        CC            .byte	$CC
09165 20BE                        D8            .byte	$D8
09166 20BF                        30            .byte	$30
09167 20C0                        66            .byte	$66
09168 20C1                        CE            .byte	$CE
09169 20C2                        9E            .byte	$9E
09170 20C3                        3E            .byte	$3E
09171 20C4                        06            .byte	6
09172 20C5                        06            .byte	6
09173 20C6                        00            .byte	0
09174                                           ! 1149  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09175 20C7                        00            .byte	0
09176 20C8                        00            .byte	0
09177 20C9                        18            .byte	$18
09178 20CA                        18            .byte	$18
09179 20CB                        00            .byte	0
09180 20CC                        18            .byte	$18
09181 20CD                        18            .byte	$18
09182 20CE                        3C            .byte	$3C
09183 20CF                        3C            .byte	$3C
09184 20D0                        3C            .byte	$3C
09185 20D1                        18            .byte	$18
09186 20D2                        00            .byte	0
09187 20D3                        00            .byte	0
09188 20D4                        00            .byte	0
09189                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09190 20D5                        00            .byte	0
09191 20D6                        00            .byte	0
09192 20D7                        00            .byte	0
09193 20D8                        00            .byte	0
09194 20D9                        36            .byte	$36
09195 20DA                        6C            .byte	$6C
09196 20DB                        D8            .byte	$D8
09197 20DC                        6C            .byte	$6C
09198 20DD                        36            .byte	$36
09199 20DE                        00            .byte	0
09200 20DF                        00            .byte	0
09201 20E0                        00            .byte	0
09202 20E1                        00            .byte	0
09203 20E2                        00            .byte	0
09204                                           ! 1151  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09205 20E3                        00            .byte	0
09206 20E4                        00            .byte	0
09207 20E5                        00            .byte	0
09208 20E6                        00            .byte	0
09209 20E7                        D8            .byte	$D8
09210 20E8                        6C            .byte	$6C
09211 20E9                        36            .byte	$36
09212 20EA                        6C            .byte	$6C
09213 20EB                        D8            .byte	$D8
09214 20EC                        00            .byte	0
09215 20ED                        00            .byte	0
09216 20EE                        00            .byte	0
09217 20EF                        00            .byte	0
09218 20F0                        00            .byte	0
09219                                           ! 1152  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09220 20F1                        11            .byte	$11
09221 20F2                        44            .byte	$44
09222 20F3                        11            .byte	$11
09223 20F4                        44            .byte	$44
09224 20F5                        11            .byte	$11
09225 20F6                        44            .byte	$44
09226 20F7                        11            .byte	$11
09227 20F8                        44            .byte	$44
09228 20F9                        11            .byte	$11
09229 20FA                        44            .byte	$44
09230 20FB                        11            .byte	$11
09231 20FC                        44            .byte	$44
09232 20FD                        11            .byte	$11
09233 20FE                        44            .byte	$44
09234                                           ! 1153  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09235 20FF                        55            .byte	$55
09236 2100                        AA            .byte	$AA
09237 2101                        55            .byte	$55
09238 2102                        AA            .byte	$AA
09239 2103                        55            .byte	$55
09240 2104                        AA            .byte	$AA
09241 2105                        55            .byte	$55
09242 2106                        AA            .byte	$AA
09243 2107                        55            .byte	$55
09244 2108                        AA            .byte	$AA
09245 2109                        55            .byte	$55
09246 210A                        AA            .byte	$AA
09247 210B                        55            .byte	$55
09248 210C                        AA            .byte	$AA
09249                                           ! 1154  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09250 210D                        DD            .byte	$DD
09251 210E                        77            .byte	$77
09252 210F                        DD            .byte	$DD
09253 2110                        77            .byte	$77
09254 2111                        DD            .byte	$DD
09255 2112                        77            .byte	$77
09256 2113                        DD            .byte	$DD
09257 2114                        77            .byte	$77
09258 2115                        DD            .byte	$DD
09259 2116                        77            .byte	$77
09260 2117                        DD            .byte	$DD
09261 2118                        77            .byte	$77
09262 2119                        DD            .byte	$DD
09263 211A                        77            .byte	$77
09264                                           ! 1155  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09265 211B                        18            .byte	$18
09266 211C                        18            .byte	$18
09267 211D                        18            .byte	$18
09268 211E                        18            .byte	$18
09269 211F                        18            .byte	$18
09270 2120                        18            .byte	$18
09271 2121                        18            .byte	$18
09272 2122                        18            .byte	$18
09273 2123                        18            .byte	$18
09274 2124                        18            .byte	$18
09275 2125                        18            .byte	$18
09276 2126                        18            .byte	$18
09277 2127                        18            .byte	$18
09278 2128                        18            .byte	$18
09279                                           ! 1156  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09280 2129                        18            .byte	$18
09281 212A                        18            .byte	$18
09282 212B                        18            .byte	$18
09283 212C                        18            .byte	$18
09284 212D                        18            .byte	$18
09285 212E                        18            .byte	$18
09286 212F                        18            .byte	$18
09287 2130                        F8            .byte	$F8
09288 2131                        18            .byte	$18
09289 2132                        18            .byte	$18
09290 2133                        18            .byte	$18
09291 2134                        18            .byte	$18
09292 2135                        18            .byte	$18
09293 2136                        18            .byte	$18
09294                                           ! 1157  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09295 2137                        18            .byte	$18
09296 2138                        18            .byte	$18
09297 2139                        18            .byte	$18
09298 213A                        18            .byte	$18
09299 213B                        18            .byte	$18
09300 213C                        F8            .byte	$F8
09301 213D                        18            .byte	$18
09302 213E                        F8            .byte	$F8
09303 213F                        18            .byte	$18
09304 2140                        18            .byte	$18
09305 2141                        18            .byte	$18
09306 2142                        18            .byte	$18
09307 2143                        18            .byte	$18
09308 2144                        18            .byte	$18
09309                                           ! 1158  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09310 2145                        36            .byte	$36
09311 2146                        36            .byte	$36
09312 2147                        36            .byte	$36
09313 2148                        36            .byte	$36
09314 2149                        36            .byte	$36
09315 214A                        36            .byte	$36
09316 214B                        36            .byte	$36
09317 214C                        F6            .byte	$F6
09318 214D                        36            .byte	$36
09319 214E                        36            .byte	$36
09320 214F                        36            .byte	$36
09321 2150                        36            .byte	$36
09322 2151                        36            .byte	$36
09323 2152                        36            .byte	$36
09324                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09325 2153                        00            .byte	0
09326 2154                        00            .byte	0
09327 2155                        00            .byte	0
09328 2156                        00            .byte	0
09329 2157                        00            .byte	0
09330 2158                        00            .byte	0
09331 2159                        00            .byte	0
09332 215A                        FE            .byte	$FE
09333 215B                        36            .byte	$36
09334 215C                        36            .byte	$36
09335 215D                        36            .byte	$36
09336 215E                        36            .byte	$36
09337 215F                        36            .byte	$36
09338 2160                        36            .byte	$36
09339                                           ! 1160  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09340 2161                        00            .byte	0
09341 2162                        00            .byte	0
09342 2163                        00            .byte	0
09343 2164                        00            .byte	0
09344 2165                        00            .byte	0
09345 2166                        F8            .byte	$F8
09346 2167                        18            .byte	$18
09347 2168                        F8            .byte	$F8
09348 2169                        18            .byte	$18
09349 216A                        18            .byte	$18
09350 216B                        18            .byte	$18
09351 216C                        18            .byte	$18
09352 216D                        18            .byte	$18
09353 216E                        18            .byte	$18
09354                                           ! 1161  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09355 216F                        36            .byte	$36
09356 2170                        36            .byte	$36
09357 2171                        36            .byte	$36
09358 2172                        36            .byte	$36
09359 2173                        36            .byte	$36
09360 2174                        F6            .byte	$F6
09361 2175                        06            .byte	6
09362 2176                        F6            .byte	$F6
09363 2177                        36            .byte	$36
09364 2178                        36            .byte	$36
09365 2179                        36            .byte	$36
09366 217A                        36            .byte	$36
09367 217B                        36            .byte	$36
09368 217C                        36            .byte	$36
09369                                           ! 1162  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09370 217D                        36            .byte	$36
09371 217E                        36            .byte	$36
09372 217F                        36            .byte	$36
09373 2180                        36            .byte	$36
09374 2181                        36            .byte	$36
09375 2182                        36            .byte	$36
09376 2183                        36            .byte	$36
09377 2184                        36            .byte	$36
09378 2185                        36            .byte	$36
09379 2186                        36            .byte	$36
09380 2187                        36            .byte	$36
09381 2188                        36            .byte	$36
09382 2189                        36            .byte	$36
09383 218A                        36            .byte	$36
09384                                           ! 1163  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09385 218B                        00            .byte	0
09386 218C                        00            .byte	0
09387 218D                        00            .byte	0
09388 218E                        00            .byte	0
09389 218F                        00            .byte	0
09390 2190                        FE            .byte	$FE
09391 2191                        06            .byte	6
09392 2192                        F6            .byte	$F6
09393 2193                        36            .byte	$36
09394 2194                        36            .byte	$36
09395 2195                        36            .byte	$36
09396 2196                        36            .byte	$36
09397 2197                        36            .byte	$36
09398 2198                        36            .byte	$36
09399                                           ! 1164  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09400 2199                        36            .byte	$36
09401 219A                        36            .byte	$36
09402 219B                        36            .byte	$36
09403 219C                        36            .byte	$36
09404 219D                        36            .byte	$36
09405 219E                        F6            .byte	$F6
09406 219F                        06            .byte	6
09407 21A0                        FE            .byte	$FE
09408 21A1                        00            .byte	0
09409 21A2                        00            .byte	0
09410 21A3                        00            .byte	0
09411 21A4                        00            .byte	0
09412 21A5                        00            .byte	0
09413 21A6                        00            .byte	0
09414                                           ! 1165  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09415 21A7                        36            .byte	$36
09416 21A8                        36            .byte	$36
09417 21A9                        36            .byte	$36
09418 21AA                        36            .byte	$36
09419 21AB                        36            .byte	$36
09420 21AC                        36            .byte	$36
09421 21AD                        36            .byte	$36
09422 21AE                        FE            .byte	$FE
09423 21AF                        00            .byte	0
09424 21B0                        00            .byte	0
09425 21B1                        00            .byte	0
09426 21B2                        00            .byte	0
09427 21B3                        00            .byte	0
09428 21B4                        00            .byte	0
09429                                           ! 1166  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09430 21B5                        18            .byte	$18
09431 21B6                        18            .byte	$18
09432 21B7                        18            .byte	$18
09433 21B8                        18            .byte	$18
09434 21B9                        18            .byte	$18
09435 21BA                        F8            .byte	$F8
09436 21BB                        18            .byte	$18
09437 21BC                        F8            .byte	$F8
09438 21BD                        00            .byte	0
09439 21BE                        00            .byte	0
09440 21BF                        00            .byte	0
09441 21C0                        00            .byte	0
09442 21C1                        00            .byte	0
09443 21C2                        00            .byte	0
09444                                           ! 1167  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09445 21C3                        00            .byte	0
09446 21C4                        00            .byte	0
09447 21C5                        00            .byte	0
09448 21C6                        00            .byte	0
09449 21C7                        00            .byte	0
09450 21C8                        00            .byte	0
09451 21C9                        00            .byte	0
09452 21CA                        F8            .byte	$F8
09453 21CB                        18            .byte	$18
09454 21CC                        18            .byte	$18
09455 21CD                        18            .byte	$18
09456 21CE                        18            .byte	$18
09457 21CF                        18            .byte	$18
09458 21D0                        18            .byte	$18
09459                                           ! 1168  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09460 21D1                        18            .byte	$18
09461 21D2                        18            .byte	$18
09462 21D3                        18            .byte	$18
09463 21D4                        18            .byte	$18
09464 21D5                        18            .byte	$18
09465 21D6                        18            .byte	$18
09466 21D7                        18            .byte	$18
09467 21D8                        1F            .byte	$1F
09468 21D9                        00            .byte	0
09469 21DA                        00            .byte	0
09470 21DB                        00            .byte	0
09471 21DC                        00            .byte	0
09472 21DD                        00            .byte	0
09473 21DE                        00            .byte	0
09474                                           ! 1169  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09475 21DF                        18            .byte	$18
09476 21E0                        18            .byte	$18
09477 21E1                        18            .byte	$18
09478 21E2                        18            .byte	$18
09479 21E3                        18            .byte	$18
09480 21E4                        18            .byte	$18
09481 21E5                        18            .byte	$18
09482 21E6                        FF            .byte	$FF
09483 21E7                        00            .byte	0
09484 21E8                        00            .byte	0
09485 21E9                        00            .byte	0
09486 21EA                        00            .byte	0
09487 21EB                        00            .byte	0
09488 21EC                        00            .byte	0
09489                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18
09490 21ED                        00            .byte	0
09491 21EE                        00            .byte	0
09492 21EF                        00            .byte	0
09493 21F0                        00            .byte	0
09494 21F1                        00            .byte	0
09495 21F2                        00            .byte	0
09496 21F3                        00            .byte	0
09497 21F4                        FF            .byte	$FF
09498 21F5                        18            .byte	$18
09499 21F6                        18            .byte	$18
09500                                           ! 1170 , 0x18, 0x18, 0x18,
09501 21F7                        18            .byte	$18
09502 21F8                        18            .byte	$18
09503 21F9                        18            .byte	$18
09504 21FA                        18            .byte	$18
09505                                           ! 1171  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09506 21FB                        18            .byte	$18
09507 21FC                        18            .byte	$18
09508 21FD                        18            .byte	$18
09509 21FE                        18            .byte	$18
09510 21FF                        18            .byte	$18
09511 2200                        18            .byte	$18
09512 2201                        18            .byte	$18
09513 2202                        1F            .byte	$1F
09514 2203                        18            .byte	$18
09515 2204                        18            .byte	$18
09516 2205                        18            .byte	$18
09517 2206                        18            .byte	$18
09518 2207                        18            .byte	$18
09519 2208                        18            .byte	$18
09520                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09521 2209                        00            .byte	0
09522 220A                        00            .byte	0
09523 220B                        00            .byte	0
09524 220C                        00            .byte	0
09525 220D                        00            .byte	0
09526 220E                        00            .byte	0
09527 220F                        00            .byte	0
09528 2210                        FF            .byte	$FF
09529 2211                        00            .byte	0
09530 2212                        00            .byte	0
09531 2213                        00            .byte	0
09532 2214                        00            .byte	0
09533 2215                        00            .byte	0
09534 2216                        00            .byte	0
09535                                           ! 1173  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09536 2217                        18            .byte	$18
09537 2218                        18            .byte	$18
09538 2219                        18            .byte	$18
09539 221A                        18            .byte	$18
09540 221B                        18            .byte	$18
09541 221C                        18            .byte	$18
09542 221D                        18            .byte	$18
09543 221E                        FF            .byte	$FF
09544 221F                        18            .byte	$18
09545 2220                        18            .byte	$18
09546 2221                        18            .byte	$18
09547 2222                        18            .byte	$18
09548 2223                        18            .byte	$18
09549 2224                        18            .byte	$18
09550                                           ! 1174  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09551 2225                        18            .byte	$18
09552 2226                        18            .byte	$18
09553 2227                        18            .byte	$18
09554 2228                        18            .byte	$18
09555 2229                        18            .byte	$18
09556 222A                        1F            .byte	$1F
09557 222B                        18            .byte	$18
09558 222C                        1F            .byte	$1F
09559 222D                        18            .byte	$18
09560 222E                        18            .byte	$18
09561 222F                        18            .byte	$18
09562 2230                        18            .byte	$18
09563 2231                        18            .byte	$18
09564 2232                        18            .byte	$18
09565                                           ! 1175  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09566 2233                        36            .byte	$36
09567 2234                        36            .byte	$36
09568 2235                        36            .byte	$36
09569 2236                        36            .byte	$36
09570 2237                        36            .byte	$36
09571 2238                        36            .byte	$36
09572 2239                        36            .byte	$36
09573 223A                        37            .byte	$37
09574 223B                        36            .byte	$36
09575 223C                        36            .byte	$36
09576 223D                        36            .byte	$36
09577 223E                        36            .byte	$36
09578 223F                        36            .byte	$36
09579 2240                        36            .byte	$36
09580                                           ! 1176  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09581 2241                        36            .byte	$36
09582 2242                        36            .byte	$36
09583 2243                        36            .byte	$36
09584 2244                        36            .byte	$36
09585 2245                        36            .byte	$36
09586 2246                        37            .byte	$37
09587 2247                        30            .byte	$30
09588 2248                        3F            .byte	$3F
09589 2249                        00            .byte	0
09590 224A                        00            .byte	0
09591 224B                        00            .byte	0
09592 224C                        00            .byte	0
09593 224D                        00            .byte	0
09594 224E                        00            .byte	0
09595                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09596 224F                        00            .byte	0
09597 2250                        00            .byte	0
09598 2251                        00            .byte	0
09599 2252                        00            .byte	0
09600 2253                        00            .byte	0
09601 2254                        3F            .byte	$3F
09602 2255                        30            .byte	$30
09603 2256                        37            .byte	$37
09604 2257                        36            .byte	$36
09605 2258                        36            .byte	$36
09606 2259                        36            .byte	$36
09607 225A                        36            .byte	$36
09608 225B                        36            .byte	$36
09609 225C                        36            .byte	$36
09610                                           ! 1178  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09611 225D                        36            .byte	$36
09612 225E                        36            .byte	$36
09613 225F                        36            .byte	$36
09614 2260                        36            .byte	$36
09615 2261                        36            .byte	$36
09616 2262                        F7            .byte	$F7
09617 2263                        00            .byte	0
09618 2264                        FF            .byte	$FF
09619 2265                        00            .byte	0
09620 2266                        00            .byte	0
09621 2267                        00            .byte	0
09622 2268                        00            .byte	0
09623 2269                        00            .byte	0
09624 226A                        00            .byte	0
09625                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09626 226B                        00            .byte	0
09627 226C                        00            .byte	0
09628 226D                        00            .byte	0
09629 226E                        00            .byte	0
09630 226F                        00            .byte	0
09631 2270                        FF            .byte	$FF
09632 2271                        00            .byte	0
09633 2272                        F7            .byte	$F7
09634 2273                        36            .byte	$36
09635 2274                        36            .byte	$36
09636 2275                        36            .byte	$36
09637 2276                        36            .byte	$36
09638 2277                        36            .byte	$36
09639 2278                        36            .byte	$36
09640                                           ! 1180  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09641 2279                        36            .byte	$36
09642 227A                        36            .byte	$36
09643 227B                        36            .byte	$36
09644 227C                        36            .byte	$36
09645 227D                        36            .byte	$36
09646 227E                        37            .byte	$37
09647 227F                        30            .byte	$30
09648 2280                        37            .byte	$37
09649 2281                        36            .byte	$36
09650 2282                        36            .byte	$36
09651 2283                        36            .byte	$36
09652 2284                        36            .byte	$36
09653 2285                        36            .byte	$36
09654 2286                        36            .byte	$36
09655                                           ! 1181  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09656 2287                        00            .byte	0
09657 2288                        00            .byte	0
09658 2289                        00            .byte	0
09659 228A                        00            .byte	0
09660 228B                        00            .byte	0
09661 228C                        FF            .byte	$FF
09662 228D                        00            .byte	0
09663 228E                        FF            .byte	$FF
09664 228F                        00            .byte	0
09665 2290                        00            .byte	0
09666 2291                        00            .byte	0
09667 2292                        00            .byte	0
09668 2293                        00            .byte	0
09669 2294                        00            .byte	0
09670                                           ! 1182  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09671 2295                        36            .byte	$36
09672 2296                        36            .byte	$36
09673 2297                        36            .byte	$36
09674 2298                        36            .byte	$36
09675 2299                        36            .byte	$36
09676 229A                        F7            .byte	$F7
09677 229B                        00            .byte	0
09678 229C                        F7            .byte	$F7
09679 229D                        36            .byte	$36
09680 229E                        36            .byte	$36
09681 229F                        36            .byte	$36
09682 22A0                        36            .byte	$36
09683 22A1                        36            .byte	$36
09684 22A2                        36            .byte	$36
09685                                           ! 1183  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09686 22A3                        18            .byte	$18
09687 22A4                        18            .byte	$18
09688 22A5                        18            .byte	$18
09689 22A6                        18            .byte	$18
09690 22A7                        18            .byte	$18
09691 22A8                        FF            .byte	$FF
09692 22A9                        00            .byte	0
09693 22AA                        FF            .byte	$FF
09694 22AB                        00            .byte	0
09695 22AC                        00            .byte	0
09696 22AD                        00            .byte	0
09697 22AE                        00            .byte	0
09698 22AF                        00            .byte	0
09699 22B0                        00            .byte	0
09700                                           ! 1184  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09701 22B1                        36            .byte	$36
09702 22B2                        36            .byte	$36
09703 22B3                        36            .byte	$36
09704 22B4                        36            .byte	$36
09705 22B5                        36            .byte	$36
09706 22B6                        36            .byte	$36
09707 22B7                        36            .byte	$36
09708 22B8                        FF            .byte	$FF
09709 22B9                        00            .byte	0
09710 22BA                        00            .byte	0
09711 22BB                        00            .byte	0
09712 22BC                        00            .byte	0
09713 22BD                        00            .byte	0
09714 22BE                        00            .byte	0
09715                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09716 22BF                        00            .byte	0
09717 22C0                        00            .byte	0
09718 22C1                        00            .byte	0
09719 22C2                        00            .byte	0
09720 22C3                        00            .byte	0
09721 22C4                        FF            .byte	$FF
09722 22C5                        00            .byte	0
09723 22C6                        FF            .byte	$FF
09724 22C7                        18            .byte	$18
09725 22C8                        18            .byte	$18
09726 22C9                        18            .byte	$18
09727 22CA                        18            .byte	$18
09728 22CB                        18            .byte	$18
09729 22CC                        18            .byte	$18
09730                                           ! 1186  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09731 22CD                        00            .byte	0
09732 22CE                        00            .byte	0
09733 22CF                        00            .byte	0
09734 22D0                        00            .byte	0
09735 22D1                        00            .byte	0
09736 22D2                        00            .byte	0
09737 22D3                        00            .byte	0
09738 22D4                        FF            .byte	$FF
09739 22D5                        36            .byte	$36
09740 22D6                        36            .byte	$36
09741 22D7                        36            .byte	$36
09742 22D8                        36            .byte	$36
09743 22D9                        36            .byte	$36
09744 22DA                        36            .byte	$36
09745                                           ! 1187  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09746 22DB                        36            .byte	$36
09747 22DC                        36            .byte	$36
09748 22DD                        36            .byte	$36
09749 22DE                        36            .byte	$36
09750 22DF                        36            .byte	$36
09751 22E0                        36            .byte	$36
09752 22E1                        36            .byte	$36
09753 22E2                        3F            .byte	$3F
09754 22E3                        00            .byte	0
09755 22E4                        00            .byte	0
09756 22E5                        00            .byte	0
09757 22E6                        00            .byte	0
09758 22E7                        00            .byte	0
09759 22E8                        00            .byte	0
09760                                           ! 1188  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09761 22E9                        18            .byte	$18
09762 22EA                        18            .byte	$18
09763 22EB                        18            .byte	$18
09764 22EC                        18            .byte	$18
09765 22ED                        18            .byte	$18
09766 22EE                        1F            .byte	$1F
09767 22EF                        18            .byte	$18
09768 22F0                        1F            .byte	$1F
09769 22F1                        00            .byte	0
09770 22F2                        00            .byte	0
09771 22F3                        00            .byte	0
09772 22F4                        00            .byte	0
09773 22F5                        00            .byte	0
09774 22F6                        00            .byte	0
09775                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09776 22F7                        00            .byte	0
09777 22F8                        00            .byte	0
09778 22F9                        00            .byte	0
09779 22FA                        00            .byte	0
09780 22FB                        00            .byte	0
09781 22FC                        1F            .byte	$1F
09782 22FD                        18            .byte	$18
09783 22FE                        1F            .byte	$1F
09784 22FF                        18            .byte	$18
09785 2300                        18            .byte	$18
09786 2301                        18            .byte	$18
09787 2302                        18            .byte	$18
09788 2303                        18            .byte	$18
09789 2304                        18            .byte	$18
09790                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09791 2305                        00            .byte	0
09792 2306                        00            .byte	0
09793 2307                        00            .byte	0
09794 2308                        00            .byte	0
09795 2309                        00            .byte	0
09796 230A                        00            .byte	0
09797 230B                        00            .byte	0
09798 230C                        3F            .byte	$3F
09799 230D                        36            .byte	$36
09800 230E                        36            .byte	$36
09801 230F                        36            .byte	$36
09802 2310                        36            .byte	$36
09803 2311                        36            .byte	$36
09804 2312                        36            .byte	$36
09805                                           ! 1191  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09806 2313                        36            .byte	$36
09807 2314                        36            .byte	$36
09808 2315                        36            .byte	$36
09809 2316                        36            .byte	$36
09810 2317                        36            .byte	$36
09811 2318                        36            .byte	$36
09812 2319                        36            .byte	$36
09813 231A                        FF            .byte	$FF
09814 231B                        36            .byte	$36
09815 231C                        36            .byte	$36
09816 231D                        36            .byte	$36
09817 231E                        36            .byte	$36
09818 231F                        36            .byte	$36
09819 2320                        36            .byte	$36
09820                                           ! 1192  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09821 2321                        18            .byte	$18
09822 2322                        18            .byte	$18
09823 2323                        18            .byte	$18
09824 2324                        18            .byte	$18
09825 2325                        18            .byte	$18
09826 2326                        FF            .byte	$FF
09827 2327                        18            .byte	$18
09828 2328                        FF            .byte	$FF
09829 2329                        18            .byte	$18
09830 232A                        18            .byte	$18
09831 232B                        18            .byte	$18
09832 232C                        18            .byte	$18
09833 232D                        18            .byte	$18
09834 232E                        18            .byte	$18
09835                                           ! 1193  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09836 232F                        18            .byte	$18
09837 2330                        18            .byte	$18
09838 2331                        18            .byte	$18
09839 2332                        18            .byte	$18
09840 2333                        18            .byte	$18
09841 2334                        18            .byte	$18
09842 2335                        18            .byte	$18
09843 2336                        F8            .byte	$F8
09844 2337                        00            .byte	0
09845 2338                        00            .byte	0
09846 2339                        00            .byte	0
09847 233A                        00            .byte	0
09848 233B                        00            .byte	0
09849 233C                        00            .byte	0
09850                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 
09851 233D                        00            .byte	0
09852 233E                        00            .byte	0
09853 233F                        00            .byte	0
09854 2340                        00            .byte	0
09855 2341                        00            .byte	0
09856 2342                        00            .byte	0
09857 2343                        00            .byte	0
09858 2344                        1F            .byte	$1F
09859 2345                        18            .byte	$18
09860 2346                        18            .byte	$18
09861 2347                        18            .byte	$18
09862 2348                        18            .byte	$18
09863                                           ! 1194 0x18, 0x18,
09864 2349                        18            .byte	$18
09865 234A                        18            .byte	$18
09866                                           ! 1195  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09867 234B                        FF            .byte	$FF
09868 234C                        FF            .byte	$FF
09869 234D                        FF            .byte	$FF
09870 234E                        FF            .byte	$FF
09871 234F                        FF            .byte	$FF
09872 2350                        FF            .byte	$FF
09873 2351                        FF            .byte	$FF
09874 2352                        FF            .byte	$FF
09875 2353                        FF            .byte	$FF
09876 2354                        FF            .byte	$FF
09877 2355                        FF            .byte	$FF
09878 2356                        FF            .byte	$FF
09879 2357                        FF            .byte	$FF
09880 2358                        FF            .byte	$FF
09881                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09882 2359                        00            .byte	0
09883 235A                        00            .byte	0
09884 235B                        00            .byte	0
09885 235C                        00            .byte	0
09886 235D                        00            .byte	0
09887 235E                        00            .byte	0
09888 235F                        00            .byte	0
09889 2360                        FF            .byte	$FF
09890 2361                        FF            .byte	$FF
09891 2362                        FF            .byte	$FF
09892 2363                        FF            .byte	$FF
09893 2364                        FF            .byte	$FF
09894 2365                        FF            .byte	$FF
09895 2366                        FF            .byte	$FF
09896                                           ! 1197  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09897 2367                        F0            .byte	$F0
09898 2368                        F0            .byte	$F0
09899 2369                        F0            .byte	$F0
09900 236A                        F0            .byte	$F0
09901 236B                        F0            .byte	$F0
09902 236C                        F0            .byte	$F0
09903 236D                        F0            .byte	$F0
09904 236E                        F0            .byte	$F0
09905 236F                        F0            .byte	$F0
09906 2370                        F0            .byte	$F0
09907 2371                        F0            .byte	$F0
09908 2372                        F0            .byte	$F0
09909 2373                        F0            .byte	$F0
09910 2374                        F0            .byte	$F0
09911                                           ! 1198  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09912 2375                        0F            .byte	$F
09913 2376                        0F            .byte	$F
09914 2377                        0F            .byte	$F
09915 2378                        0F            .byte	$F
09916 2379                        0F            .byte	$F
09917 237A                        0F            .byte	$F
09918 237B                        0F            .byte	$F
09919 237C                        0F            .byte	$F
09920 237D                        0F            .byte	$F
09921 237E                        0F            .byte	$F
09922 237F                        0F            .byte	$F
09923 2380                        0F            .byte	$F
09924 2381                        0F            .byte	$F
09925 2382                        0F            .byte	$F
09926                                           ! 1199  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09927 2383                        FF            .byte	$FF
09928 2384                        FF            .byte	$FF
09929 2385                        FF            .byte	$FF
09930 2386                        FF            .byte	$FF
09931 2387                        FF            .byte	$FF
09932 2388                        FF            .byte	$FF
09933 2389                        FF            .byte	$FF
09934 238A                        00            .byte	0
09935 238B                        00            .byte	0
09936 238C                        00            .byte	0
09937 238D                        00            .byte	0
09938 238E                        00            .byte	0
09939 238F                        00            .byte	0
09940 2390                        00            .byte	0
09941                                           ! 1200  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09942 2391                        00            .byte	0
09943 2392                        00            .byte	0
09944 2393                        00            .byte	0
09945 2394                        00            .byte	0
09946 2395                        00            .byte	0
09947 2396                        76            .byte	$76
09948 2397                        DC            .byte	$DC
09949 2398                        D8            .byte	$D8
09950 2399                        D8            .byte	$D8
09951 239A                        DC            .byte	$DC
09952 239B                        76            .byte	$76
09953 239C                        00            .byte	0
09954 239D                        00            .byte	0
09955 239E                        00            .byte	0
09956                                           ! 1201  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09957 239F                        00            .byte	0
09958 23A0                        00            .byte	0
09959 23A1                        00            .byte	0
09960 23A2                        00            .byte	0
09961 23A3                        7C            .byte	$7C
09962 23A4                        C6            .byte	$C6
09963 23A5                        FC            .byte	$FC
09964 23A6                        C6            .byte	$C6
09965 23A7                        C6            .byte	$C6
09966 23A8                        FC            .byte	$FC
09967 23A9                        C0            .byte	$C0
09968 23AA                        C0            .byte	$C0
09969 23AB                        40            .byte	$40
09970 23AC                        00            .byte	0
09971                                           ! 1202  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09972 23AD                        00            .byte	0
09973 23AE                        00            .byte	0
09974 23AF                        FE            .byte	$FE
09975 23B0                        C6            .byte	$C6
09976 23B1                        C6            .byte	$C6
09977 23B2                        C0            .byte	$C0
09978 23B3                        C0            .byte	$C0
09979 23B4                        C0            .byte	$C0
09980 23B5                        C0            .byte	$C0
09981 23B6                        C0            .byte	$C0
09982 23B7                        C0            .byte	$C0
09983 23B8                        00            .byte	0
09984 23B9                        00            .byte	0
09985 23BA                        00            .byte	0
09986                                           ! 1203  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09987 23BB                        00            .byte	0
09988 23BC                        00            .byte	0
09989 23BD                        00            .byte	0
09990 23BE                        00            .byte	0
09991 23BF                        FE            .byte	$FE
09992 23C0                        6C            .byte	$6C
09993 23C1                        6C            .byte	$6C
09994 23C2                        6C            .byte	$6C
09995 23C3                        6C            .byte	$6C
09996 23C4                        6C            .byte	$6C
09997 23C5                        6C            .byte	$6C
09998 23C6                        00            .byte	0
09999 23C7                        00            .byte	0
10000 23C8                        00            .byte	0
10001                                           ! 1204  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10002 23C9                        00            .byte	0
10003 23CA                        00            .byte	0
10004 23CB                        FE            .byte	$FE
10005 23CC                        C6            .byte	$C6
10006 23CD                        60            .byte	$60
10007 23CE                        30            .byte	$30
10008 23CF                        18            .byte	$18
10009 23D0                        30            .byte	$30
10010 23D1                        60            .byte	$60
10011 23D2                        C6            .byte	$C6
10012 23D3                        FE            .byte	$FE
10013 23D4                        00            .byte	0
10014 23D5                        00            .byte	0
10015 23D6                        00            .byte	0
10016                                           ! 1205  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10017 23D7                        00            .byte	0
10018 23D8                        00            .byte	0
10019 23D9                        00            .byte	0
10020 23DA                        00            .byte	0
10021 23DB                        00            .byte	0
10022 23DC                        7E            .byte	$7E
10023 23DD                        D8            .byte	$D8
10024 23DE                        D8            .byte	$D8
10025 23DF                        D8            .byte	$D8
10026 23E0                        D8            .byte	$D8
10027 23E1                        70            .byte	$70
10028 23E2                        00            .byte	0
10029 23E3                        00            .byte	0
10030 23E4                        00            .byte	0
10031                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10032 23E5                        00            .byte	0
10033 23E6                        00            .byte	0
10034 23E7                        00            .byte	0
10035 23E8                        00            .byte	0
10036 23E9                        66            .byte	$66
10037 23EA                        66            .byte	$66
10038 23EB                        66            .byte	$66
10039 23EC                        66            .byte	$66
10040 23ED                        7C            .byte	$7C
10041 23EE                        60            .byte	$60
10042 23EF                        60            .byte	$60
10043 23F0                        C0            .byte	$C0
10044 23F1                        00            .byte	0
10045 23F2                        00            .byte	0
10046                                           ! 1207  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10047 23F3                        00            .byte	0
10048 23F4                        00            .byte	0
10049 23F5                        00            .byte	0
10050 23F6                        00            .byte	0
10051 23F7                        76            .byte	$76
10052 23F8                        DC            .byte	$DC
10053 23F9                        18            .byte	$18
10054 23FA                        18            .byte	$18
10055 23FB                        18            .byte	$18
10056 23FC                        18            .byte	$18
10057 23FD                        18            .byte	$18
10058 23FE                        00            .byte	0
10059 23FF                        00            .byte	0
10060 2400                        00            .byte	0
10061                                           ! 1208  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10062 2401                        00            .byte	0
10063 2402                        00            .byte	0
10064 2403                        7E            .byte	$7E
10065 2404                        18            .byte	$18
10066 2405                        3C            .byte	$3C
10067 2406                        66            .byte	$66
10068 2407                        66            .byte	$66
10069 2408                        66            .byte	$66
10070 2409                        3C            .byte	$3C
10071 240A                        18            .byte	$18
10072 240B                        7E            .byte	$7E
10073 240C                        00            .byte	0
10074 240D                        00            .byte	0
10075 240E                        00            .byte	0
10076                                           ! 1209  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10077 240F                        00            .byte	0
10078 2410                        00            .byte	0
10079 2411                        38            .byte	$38
10080 2412                        6C            .byte	$6C
10081 2413                        C6            .byte	$C6
10082 2414                        C6            .byte	$C6
10083 2415                        FE            .byte	$FE
10084 2416                        C6            .byte	$C6
10085 2417                        C6            .byte	$C6
10086 2418                        6C            .byte	$6C
10087 2419                        38            .byte	$38
10088 241A                        00            .byte	0
10089 241B                        00            .byte	0
10090 241C                        00            .byte	0
10091                                           ! 1210  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10092 241D                        00            .byte	0
10093 241E                        00            .byte	0
10094 241F                        38            .byte	$38
10095 2420                        6C            .byte	$6C
10096 2421                        C6            .byte	$C6
10097 2422                        C6            .byte	$C6
10098 2423                        C6            .byte	$C6
10099 2424                        6C            .byte	$6C
10100 2425                        6C            .byte	$6C
10101 2426                        6C            .byte	$6C
10102 2427                        EE            .byte	$EE
10103 2428                        00            .byte	0
10104 2429                        00            .byte	0
10105 242A                        00            .byte	0
10106                                           ! 1211  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10107 242B                        00            .byte	0
10108 242C                        00            .byte	0
10109 242D                        1E            .byte	$1E
10110 242E                        30            .byte	$30
10111 242F                        18            .byte	$18
10112 2430                        0C            .byte	$C
10113 2431                        3E            .byte	$3E
10114 2432                        66            .byte	$66
10115 2433                        66            .byte	$66
10116 2434                        66            .byte	$66
10117 2435                        3C            .byte	$3C
10118 2436                        00            .byte	0
10119 2437                        00            .byte	0
10120 2438                        00            .byte	0
10121                                           ! 1212  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10122 2439                        00            .byte	0
10123 243A                        00            .byte	0
10124 243B                        00            .byte	0
10125 243C                        00            .byte	0
10126 243D                        00            .byte	0
10127 243E                        7E            .byte	$7E
10128 243F                        DB            .byte	$DB
10129 2440                        DB            .byte	$DB
10130 2441                        7E            .byte	$7E
10131 2442                        00            .byte	0
10132 2443                        00            .byte	0
10133 2444                        00            .byte	0
10134 2445                        00            .byte	0
10135 2446                        00            .byte	0
10136                                           ! 1213  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10137 2447                        00            .byte	0
10138 2448                        00            .byte	0
10139 2449                        03            .byte	3
10140 244A                        06            .byte	6
10141 244B                        7E            .byte	$7E
10142 244C                        DB            .byte	$DB
10143 244D                        DB            .byte	$DB
10144 244E                        F3            .byte	$F3
10145 244F                        7E            .byte	$7E
10146 2450                        60            .byte	$60
10147 2451                        C0            .byte	$C0
10148 2452                        00            .byte	0
10149 2453                        00            .byte	0
10150 2454                        00            .byte	0
10151                                           ! 1214  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10152 2455                        00            .byte	0
10153 2456                        00            .byte	0
10154 2457                        1C            .byte	$1C
10155 2458                        30            .byte	$30
10156 2459                        60            .byte	$60
10157 245A                        60            .byte	$60
10158 245B                        7C            .byte	$7C
10159 245C                        60            .byte	$60
10160 245D                        60            .byte	$60
10161 245E                        30            .byte	$30
10162 245F                        1C            .byte	$1C
10163 2460                        00            .byte	0
10164 2461                        00            .byte	0
10165 2462                        00            .byte	0
10166                                           ! 1215  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10167 2463                        00            .byte	0
10168 2464                        00            .byte	0
10169 2465                        00            .byte	0
10170 2466                        7C            .byte	$7C
10171 2467                        C6            .byte	$C6
10172 2468                        C6            .byte	$C6
10173 2469                        C6            .byte	$C6
10174 246A                        C6            .byte	$C6
10175 246B                        C6            .byte	$C6
10176 246C                        C6            .byte	$C6
10177 246D                        C6            .byte	$C6
10178 246E                        00            .byte	0
10179 246F                        00            .byte	0
10180 2470                        00            .byte	0
10181                                           ! 1216  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10182 2471                        00            .byte	0
10183 2472                        00            .byte	0
10184 2473                        00            .byte	0
10185 2474                        FE            .byte	$FE
10186 2475                        00            .byte	0
10187 2476                        00            .byte	0
10188 2477                        FE            .byte	$FE
10189 2478                        00            .byte	0
10190 2479                        00            .byte	0
10191 247A                        FE            .byte	$FE
10192 247B                        00            .byte	0
10193 247C                        00            .byte	0
10194 247D                        00            .byte	0
10195 247E                        00            .byte	0
10196                                           ! 1217  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10197 247F                        00            .byte	0
10198 2480                        00            .byte	0
10199 2481                        00            .byte	0
10200 2482                        18            .byte	$18
10201 2483                        18            .byte	$18
10202 2484                        7E            .byte	$7E
10203 2485                        18            .byte	$18
10204 2486                        18            .byte	$18
10205 2487                        00            .byte	0
10206 2488                        00            .byte	0
10207 2489                        FF            .byte	$FF
10208 248A                        00            .byte	0
10209 248B                        00            .byte	0
10210 248C                        00            .byte	0
10211                                           ! 1218  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x
10212 248D                        00            .byte	0
10213 248E                        00            .byte	0
10214 248F                        30            .byte	$30
10215 2490                        18            .byte	$18
10216 2491                        0C            .byte	$C
10217 2492                        06            .byte	6
10218 2493                        0C            .byte	$C
10219 2494                        18            .byte	$18
10220 2495                        30            .byte	$30
10221 2496                        00            .byte	0
10222 2497                        7E            .byte	$7E
10223 2498                        00            .byte	0
10224 2499                        00            .byte	0
10225                                           ! 1218 00,
10226 249A                        00            .byte	0
10227                                           ! 1219  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10228 249B                        00            .byte	0
10229 249C                        00            .byte	0
10230 249D                        0C            .byte	$C
10231 249E                        18            .byte	$18
10232 249F                        30            .byte	$30
10233 24A0                        60            .byte	$60
10234 24A1                        30            .byte	$30
10235 24A2                        18            .byte	$18
10236 24A3                        0C            .byte	$C
10237 24A4                        00            .byte	0
10238 24A5                        7E            .byte	$7E
10239 24A6                        00            .byte	0
10240 24A7                        00            .byte	0
10241 24A8                        00            .byte	0
10242                                           ! 1220  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10243 24A9                        00            .byte	0
10244 24AA                        00            .byte	0
10245 24AB                        0E            .byte	$E
10246 24AC                        1B            .byte	$1B
10247 24AD                        1B            .byte	$1B
10248 24AE                        18            .byte	$18
10249 24AF                        18            .byte	$18
10250 24B0                        18            .byte	$18
10251 24B1                        18            .byte	$18
10252 24B2                        18            .byte	$18
10253 24B3                        18            .byte	$18
10254 24B4                        18            .byte	$18
10255 24B5                        18            .byte	$18
10256 24B6                        18            .byte	$18
10257                                           ! 1221  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10258 24B7                        18            .byte	$18
10259 24B8                        18            .byte	$18
10260 24B9                        18            .byte	$18
10261 24BA                        18            .byte	$18
10262 24BB                        18            .byte	$18
10263 24BC                        18            .byte	$18
10264 24BD                        18            .byte	$18
10265 24BE                        18            .byte	$18
10266 24BF                        D8            .byte	$D8
10267 24C0                        D8            .byte	$D8
10268 24C1                        70            .byte	$70
10269 24C2                        00            .byte	0
10270 24C3                        00            .byte	0
10271 24C4                        00            .byte	0
10272                                           ! 1222  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10273 24C5                        00            .byte	0
10274 24C6                        00            .byte	0
10275 24C7                        00            .byte	0
10276 24C8                        18            .byte	$18
10277 24C9                        18            .byte	$18
10278 24CA                        00            .byte	0
10279 24CB                        7E            .byte	$7E
10280 24CC                        00            .byte	0
10281 24CD                        18            .byte	$18
10282 24CE                        18            .byte	$18
10283 24CF                        00            .byte	0
10284 24D0                        00            .byte	0
10285 24D1                        00            .byte	0
10286 24D2                        00            .byte	0
10287                                           ! 1223  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10288 24D3                        00            .byte	0
10289 24D4                        00            .byte	0
10290 24D5                        00            .byte	0
10291 24D6                        00            .byte	0
10292 24D7                        76            .byte	$76
10293 24D8                        DC            .byte	$DC
10294 24D9                        00            .byte	0
10295 24DA                        76            .byte	$76
10296 24DB                        DC            .byte	$DC
10297 24DC                        00            .byte	0
10298 24DD                        00            .byte	0
10299 24DE                        00            .byte	0
10300 24DF                        00            .byte	0
10301 24E0                        00            .byte	0
10302                                           ! 1224  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10303 24E1                        00            .byte	0
10304 24E2                        38            .byte	$38
10305 24E3                        6C            .byte	$6C
10306 24E4                        6C            .byte	$6C
10307 24E5                        38            .byte	$38
10308 24E6                        00            .byte	0
10309 24E7                        00            .byte	0
10310 24E8                        00            .byte	0
10311 24E9                        00            .byte	0
10312 24EA                        00            .byte	0
10313 24EB                        00            .byte	0
10314 24EC                        00            .byte	0
10315 24ED                        00            .byte	0
10316 24EE                        00            .byte	0
10317                                           ! 1225  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10318 24EF                        00            .byte	0
10319 24F0                        00            .byte	0
10320 24F1                        00            .byte	0
10321 24F2                        00            .byte	0
10322 24F3                        00            .byte	0
10323 24F4                        00            .byte	0
10324 24F5                        18            .byte	$18
10325 24F6                        18            .byte	$18
10326 24F7                        00            .byte	0
10327 24F8                        00            .byte	0
10328 24F9                        00            .byte	0
10329 24FA                        00            .byte	0
10330 24FB                        00            .byte	0
10331 24FC                        00            .byte	0
10332                                           ! 1226  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10333 24FD                        00            .byte	0
10334 24FE                        00            .byte	0
10335 24FF                        00            .byte	0
10336 2500                        00            .byte	0
10337 2501                        00            .byte	0
10338 2502                        00            .byte	0
10339 2503                        00            .byte	0
10340 2504                        18            .byte	$18
10341 2505                        00            .byte	0
10342 2506                        00            .byte	0
10343 2507                        00            .byte	0
10344 2508                        00            .byte	0
10345 2509                        00            .byte	0
10346 250A                        00            .byte	0
10347                                           ! 1227  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10348 250B                        00            .byte	0
10349 250C                        0F            .byte	$F
10350 250D                        0C            .byte	$C
10351 250E                        0C            .byte	$C
10352 250F                        0C            .byte	$C
10353 2510                        0C            .byte	$C
10354 2511                        0C            .byte	$C
10355 2512                        EC            .byte	$EC
10356 2513                        6C            .byte	$6C
10357 2514                        3C            .byte	$3C
10358 2515                        1C            .byte	$1C
10359 2516                        00            .byte	0
10360 2517                        00            .byte	0
10361 2518                        00            .byte	0
10362                                           ! 1228  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10363 2519                        00            .byte	0
10364 251A                        D8            .byte	$D8
10365 251B                        6C            .byte	$6C
10366 251C                        6C            .byte	$6C
10367 251D                        6C            .byte	$6C
10368 251E                        6C            .byte	$6C
10369 251F                        6C            .byte	$6C
10370 2520                        00            .byte	0
10371 2521                        00            .byte	0
10372 2522                        00            .byte	0
10373 2523                        00            .byte	0
10374 2524                        00            .byte	0
10375 2525                        00            .byte	0
10376 2526                        00            .byte	0
10377                                           ! 1229  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10378 2527                        00            .byte	0
10379 2528                        70            .byte	$70
10380 2529                        D8            .byte	$D8
10381 252A                        30            .byte	$30
10382 252B                        60            .byte	$60
10383 252C                        C8            .byte	$C8
10384 252D                        F8            .byte	$F8
10385 252E                        00            .byte	0
10386 252F                        00            .byte	0
10387 2530                        00            .byte	0
10388 2531                        00            .byte	0
10389 2532                        00            .byte	0
10390 2533                        00            .byte	0
10391 2534                        00            .byte	0
10392                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10393 2535                        00            .byte	0
10394 2536                        00            .byte	0
10395 2537                        00            .byte	0
10396 2538                        00            .byte	0
10397 2539                        7C            .byte	$7C
10398 253A                        7C            .byte	$7C
10399 253B                        7C            .byte	$7C
10400 253C                        7C            .byte	$7C
10401 253D                        7C            .byte	$7C
10402 253E                        7C            .byte	$7C
10403 253F                        00            .byte	0
10404 2540                        00            .byte	0
10405 2541                        00            .byte	0
10406 2542                        00            .byte	0
10407                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10408 2543                        00            .byte	0
10409 2544                        00            .byte	0
10410 2545                        00            .byte	0
10411 2546                        00            .byte	0
10412 2547                        00            .byte	0
10413 2548                        00            .byte	0
10414 2549                        00            .byte	0
10415 254A                        00            .byte	0
10416 254B                        00            .byte	0
10417 254C                        00            .byte	0
10418 254D                        00            .byte	0
10419 254E                        00            .byte	0
10420 254F                        00            .byte	0
10421                                           ! 1232 };
10422 2550                        00            .byte	0
10423                                           !BCC_EOS
10424                                           ! 1233 static Bit8u vgafont16[256*16]=
10425                                           ! 1234 {
10426                       00002551            _vgafont16:
10427                                           ! 1235  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10428 2551                        00            .byte	0
10429 2552                        00            .byte	0
10430 2553                        00            .byte	0
10431 2554                        00            .byte	0
10432 2555                        00            .byte	0
10433 2556                        00            .byte	0
10434 2557                        00            .byte	0
10435 2558                        00            .byte	0
10436 2559                        00            .byte	0
10437 255A                        00            .byte	0
10438 255B                        00            .byte	0
10439 255C                        00            .byte	0
10440 255D                        00            .byte	0
10441 255E                        00            .byte	0
10442 255F                        00            .byte	0
10443 2560                        00            .byte	0
10444                                           ! 1236  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10445 2561                        00            .byte	0
10446 2562                        00            .byte	0
10447 2563                        7E            .byte	$7E
10448 2564                        81            .byte	$81
10449 2565                        A5            .byte	$A5
10450 2566                        81            .byte	$81
10451 2567                        81            .byte	$81
10452 2568                        BD            .byte	$BD
10453 2569                        99            .byte	$99
10454 256A                        81            .byte	$81
10455 256B                        81            .byte	$81
10456 256C                        7E            .byte	$7E
10457 256D                        00            .byte	0
10458 256E                        00            .byte	0
10459 256F                        00            .byte	0
10460 2570                        00            .byte	0
10461                                           ! 1237  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10462 2571                        00            .byte	0
10463 2572                        00            .byte	0
10464 2573                        7E            .byte	$7E
10465 2574                        FF            .byte	$FF
10466 2575                        DB            .byte	$DB
10467 2576                        FF            .byte	$FF
10468 2577                        FF            .byte	$FF
10469 2578                        C3            .byte	$C3
10470 2579                        E7            .byte	$E7
10471 257A                        FF            .byte	$FF
10472 257B                        FF            .byte	$FF
10473 257C                        7E            .byte	$7E
10474 257D                        00            .byte	0
10475 257E                        00            .byte	0
10476 257F                        00            .byte	0
10477 2580                        00            .byte	0
10478                                           ! 1238  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10479 2581                        00            .byte	0
10480 2582                        00            .byte	0
10481 2583                        00            .byte	0
10482 2584                        00            .byte	0
10483 2585                        6C            .byte	$6C
10484 2586                        FE            .byte	$FE
10485 2587                        FE            .byte	$FE
10486 2588                        FE            .byte	$FE
10487 2589                        FE            .byte	$FE
10488 258A                        7C            .byte	$7C
10489 258B                        38            .byte	$38
10490 258C                        10            .byte	$10
10491 258D                        00            .byte	0
10492 258E                        00            .byte	0
10493 258F                        00            .byte	0
10494 2590                        00            .byte	0
10495                                           ! 1239  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10496 2591                        00            .byte	0
10497 2592                        00            .byte	0
10498 2593                        00            .byte	0
10499 2594                        00            .byte	0
10500 2595                        10            .byte	$10
10501 2596                        38            .byte	$38
10502 2597                        7C            .byte	$7C
10503 2598                        FE            .byte	$FE
10504 2599                        7C            .byte	$7C
10505 259A                        38            .byte	$38
10506 259B                        10            .byte	$10
10507 259C                        00            .byte	0
10508 259D                        00            .byte	0
10509 259E                        00            .byte	0
10510 259F                        00            .byte	0
10511 25A0                        00            .byte	0
10512                                           ! 1240  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10513 25A1                        00            .byte	0
10514 25A2                        00            .byte	0
10515 25A3                        00            .byte	0
10516 25A4                        18            .byte	$18
10517 25A5                        3C            .byte	$3C
10518 25A6                        3C            .byte	$3C
10519 25A7                        E7            .byte	$E7
10520 25A8                        E7            .byte	$E7
10521 25A9                        E7            .byte	$E7
10522 25AA                        18            .byte	$18
10523 25AB                        18            .byte	$18
10524 25AC                        3C            .byte	$3C
10525 25AD                        00            .byte	0
10526 25AE                        00            .byte	0
10527 25AF                        00            .byte	0
10528 25B0                        00            .byte	0
10529                                           ! 1241  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10530 25B1                        00            .byte	0
10531 25B2                        00            .byte	0
10532 25B3                        00            .byte	0
10533 25B4                        18            .byte	$18
10534 25B5                        3C            .byte	$3C
10535 25B6                        7E            .byte	$7E
10536 25B7                        FF            .byte	$FF
10537 25B8                        FF            .byte	$FF
10538 25B9                        7E            .byte	$7E
10539 25BA                        18            .byte	$18
10540 25BB                        18            .byte	$18
10541 25BC                        3C            .byte	$3C
10542 25BD                        00            .byte	0
10543 25BE                        00            .byte	0
10544 25BF                        00            .byte	0
10545 25C0                        00            .byte	0
10546                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10547 25C1                        00            .byte	0
10548 25C2                        00            .byte	0
10549 25C3                        00            .byte	0
10550 25C4                        00            .byte	0
10551 25C5                        00            .byte	0
10552 25C6                        00            .byte	0
10553 25C7                        18            .byte	$18
10554 25C8                        3C            .byte	$3C
10555 25C9                        3C            .byte	$3C
10556 25CA                        18            .byte	$18
10557 25CB                        00            .byte	0
10558 25CC                        00            .byte	0
10559 25CD                        00            .byte	0
10560 25CE                        00            .byte	0
10561 25CF                        00            .byte	0
10562 25D0                        00            .byte	0
10563                                           ! 1243  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10564 25D1                        FF            .byte	$FF
10565 25D2                        FF            .byte	$FF
10566 25D3                        FF            .byte	$FF
10567 25D4                        FF            .byte	$FF
10568 25D5                        FF            .byte	$FF
10569 25D6                        FF            .byte	$FF
10570 25D7                        E7            .byte	$E7
10571 25D8                        C3            .byte	$C3
10572 25D9                        C3            .byte	$C3
10573 25DA                        E7            .byte	$E7
10574 25DB                        FF            .byte	$FF
10575 25DC                        FF            .byte	$FF
10576 25DD                        FF            .byte	$FF
10577 25DE                        FF            .byte	$FF
10578 25DF                        FF            .byte	$FF
10579 25E0                        FF            .byte	$FF
10580                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x00,
10581 25E1                        00            .byte	0
10582 25E2                        00            .byte	0
10583 25E3                        00            .byte	0
10584 25E4                        00            .byte	0
10585                                           ! 1244  0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10586 25E5                        00            .byte	0
10587 25E6                        3C            .byte	$3C
10588 25E7                        66            .byte	$66
10589 25E8                        42            .byte	$42
10590 25E9                        42            .byte	$42
10591 25EA                        66            .byte	$66
10592 25EB                        3C            .byte	$3C
10593 25EC                        00            .byte	0
10594 25ED                        00            .byte	0
10595 25EE                        00            .byte	0
10596 25EF                        00            .byte	0
10597 25F0                        00            .byte	0
10598                                           ! 1245  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10599 25F1                        FF            .byte	$FF
10600 25F2                        FF            .byte	$FF
10601 25F3                        FF            .byte	$FF
10602 25F4                        FF            .byte	$FF
10603 25F5                        FF            .byte	$FF
10604 25F6                        C3            .byte	$C3
10605 25F7                        99            .byte	$99
10606 25F8                        BD            .byte	$BD
10607 25F9                        BD            .byte	$BD
10608 25FA                        99            .byte	$99
10609 25FB                        C3            .byte	$C3
10610 25FC                        FF            .byte	$FF
10611 25FD                        FF            .byte	$FF
10612 25FE                        FF            .byte	$FF
10613 25FF                        FF            .byte	$FF
10614 2600                        FF            .byte	$FF
10615                                           ! 1246  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10616 2601                        00            .byte	0
10617 2602                        00            .byte	0
10618 2603                        1E            .byte	$1E
10619 2604                        0E            .byte	$E
10620 2605                        1A            .byte	$1A
10621 2606                        32            .byte	$32
10622 2607                        78            .byte	$78
10623 2608                        CC            .byte	$CC
10624 2609                        CC            .byte	$CC
10625 260A                        CC            .byte	$CC
10626 260B                        CC            .byte	$CC
10627 260C                        78            .byte	$78
10628 260D                        00            .byte	0
10629 260E                        00            .byte	0
10630 260F                        00            .byte	0
10631 2610                        00            .byte	0
10632                                           ! 1247  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10633 2611                        00            .byte	0
10634 2612                        00            .byte	0
10635 2613                        3C            .byte	$3C
10636 2614                        66            .byte	$66
10637 2615                        66            .byte	$66
10638 2616                        66            .byte	$66
10639 2617                        66            .byte	$66
10640 2618                        3C            .byte	$3C
10641 2619                        18            .byte	$18
10642 261A                        7E            .byte	$7E
10643 261B                        18            .byte	$18
10644 261C                        18            .byte	$18
10645 261D                        00            .byte	0
10646 261E                        00            .byte	0
10647 261F                        00            .byte	0
10648 2620                        00            .byte	0
10649                                           ! 1248  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10650 2621                        00            .byte	0
10651 2622                        00            .byte	0
10652 2623                        3F            .byte	$3F
10653 2624                        33            .byte	$33
10654 2625                        3F            .byte	$3F
10655 2626                        30            .byte	$30
10656 2627                        30            .byte	$30
10657 2628                        30            .byte	$30
10658 2629                        30            .byte	$30
10659 262A                        70            .byte	$70
10660 262B                        F0            .byte	$F0
10661 262C                        E0            .byte	$E0
10662 262D                        00            .byte	0
10663 262E                        00            .byte	0
10664 262F                        00            .byte	0
10665 2630                        00            .byte	0
10666                                           ! 1249  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10667 2631                        00            .byte	0
10668 2632                        00            .byte	0
10669 2633                        7F            .byte	$7F
10670 2634                        63            .byte	$63
10671 2635                        7F            .byte	$7F
10672 2636                        63            .byte	$63
10673 2637                        63            .byte	$63
10674 2638                        63            .byte	$63
10675 2639                        63            .byte	$63
10676 263A                        67            .byte	$67
10677 263B                        E7            .byte	$E7
10678 263C                        E6            .byte	$E6
10679 263D                        C0            .byte	$C0
10680 263E                        00            .byte	0
10681 263F                        00            .byte	0
10682 2640                        00            .byte	0
10683                                           ! 1250  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10684 2641                        00            .byte	0
10685 2642                        00            .byte	0
10686 2643                        00            .byte	0
10687 2644                        18            .byte	$18
10688 2645                        18            .byte	$18
10689 2646                        DB            .byte	$DB
10690 2647                        3C            .byte	$3C
10691 2648                        E7            .byte	$E7
10692 2649                        3C            .byte	$3C
10693 264A                        DB            .byte	$DB
10694 264B                        18            .byte	$18
10695 264C                        18            .byte	$18
10696 264D                        00            .byte	0
10697 264E                        00            .byte	0
10698 264F                        00            .byte	0
10699 2650                        00            .byte	0
10700                                           ! 1251  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10701 2651                        00            .byte	0
10702 2652                        80            .byte	$80
10703 2653                        C0            .byte	$C0
10704 2654                        E0            .byte	$E0
10705 2655                        F0            .byte	$F0
10706 2656                        F8            .byte	$F8
10707 2657                        FE            .byte	$FE
10708 2658                        F8            .byte	$F8
10709 2659                        F0            .byte	$F0
10710 265A                        E0            .byte	$E0
10711 265B                        C0            .byte	$C0
10712 265C                        80            .byte	$80
10713 265D                        00            .byte	0
10714 265E                        00            .byte	0
10715 265F                        00            .byte	0
10716 2660                        00            .byte	0
10717                                           ! 1252  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10718 2661                        00            .byte	0
10719 2662                        02            .byte	2
10720 2663                        06            .byte	6
10721 2664                        0E            .byte	$E
10722 2665                        1E            .byte	$1E
10723 2666                        3E            .byte	$3E
10724 2667                        FE            .byte	$FE
10725 2668                        3E            .byte	$3E
10726 2669                        1E            .byte	$1E
10727 266A                        0E            .byte	$E
10728 266B                        06            .byte	6
10729 266C                        02            .byte	2
10730 266D                        00            .byte	0
10731 266E                        00            .byte	0
10732 266F                        00            .byte	0
10733 2670                        00            .byte	0
10734                                           ! 1253  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10735 2671                        00            .byte	0
10736 2672                        00            .byte	0
10737 2673                        18            .byte	$18
10738 2674                        3C            .byte	$3C
10739 2675                        7E            .byte	$7E
10740 2676                        18            .byte	$18
10741 2677                        18            .byte	$18
10742 2678                        18            .byte	$18
10743 2679                        7E            .byte	$7E
10744 267A                        3C            .byte	$3C
10745 267B                        18            .byte	$18
10746 267C                        00            .byte	0
10747 267D                        00            .byte	0
10748 267E                        00            .byte	0
10749 267F                        00            .byte	0
10750 2680                        00            .byte	0
10751                                           ! 1254  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10752 2681                        00            .byte	0
10753 2682                        00            .byte	0
10754 2683                        66            .byte	$66
10755 2684                        66            .byte	$66
10756 2685                        66            .byte	$66
10757 2686                        66            .byte	$66
10758 2687                        66            .byte	$66
10759 2688                        66            .byte	$66
10760 2689                        66            .byte	$66
10761 268A                        00            .byte	0
10762 268B                        66            .byte	$66
10763 268C                        66            .byte	$66
10764 268D                        00            .byte	0
10765 268E                        00            .byte	0
10766 268F                        00            .byte	0
10767 2690                        00            .byte	0
10768                                           ! 1255  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10769 2691                        00            .byte	0
10770 2692                        00            .byte	0
10771 2693                        7F            .byte	$7F
10772 2694                        DB            .byte	$DB
10773 2695                        DB            .byte	$DB
10774 2696                        DB            .byte	$DB
10775 2697                        7B            .byte	$7B
10776 2698                        1B            .byte	$1B
10777 2699                        1B            .byte	$1B
10778 269A                        1B            .byte	$1B
10779 269B                        1B            .byte	$1B
10780 269C                        1B            .byte	$1B
10781 269D                        00            .byte	0
10782 269E                        00            .byte	0
10783 269F                        00            .byte	0
10784 26A0                        00            .byte	0
10785                                           ! 1256  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10786 26A1                        00            .byte	0
10787 26A2                        7C            .byte	$7C
10788 26A3                        C6            .byte	$C6
10789 26A4                        60            .byte	$60
10790 26A5                        38            .byte	$38
10791 26A6                        6C            .byte	$6C
10792 26A7                        C6            .byte	$C6
10793 26A8                        C6            .byte	$C6
10794 26A9                        6C            .byte	$6C
10795 26AA                        38            .byte	$38
10796 26AB                        0C            .byte	$C
10797 26AC                        C6            .byte	$C6
10798 26AD                        7C            .byte	$7C
10799 26AE                        00            .byte	0
10800 26AF                        00            .byte	0
10801 26B0                        00            .byte	0
10802                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10803 26B1                        00            .byte	0
10804 26B2                        00            .byte	0
10805 26B3                        00            .byte	0
10806 26B4                        00            .byte	0
10807 26B5                        00            .byte	0
10808 26B6                        00            .byte	0
10809 26B7                        00            .byte	0
10810 26B8                        00            .byte	0
10811 26B9                        FE            .byte	$FE
10812 26BA                        FE            .byte	$FE
10813 26BB                        FE            .byte	$FE
10814 26BC                        FE            .byte	$FE
10815 26BD                        00            .byte	0
10816 26BE                        00            .byte	0
10817 26BF                        00            .byte	0
10818 26C0                        00            .byte	0
10819                                           ! 1258  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10820 26C1                        00            .byte	0
10821 26C2                        00            .byte	0
10822 26C3                        18            .byte	$18
10823 26C4                        3C            .byte	$3C
10824 26C5                        7E            .byte	$7E
10825 26C6                        18            .byte	$18
10826 26C7                        18            .byte	$18
10827 26C8                        18            .byte	$18
10828 26C9                        7E            .byte	$7E
10829 26CA                        3C            .byte	$3C
10830 26CB                        18            .byte	$18
10831 26CC                        7E            .byte	$7E
10832 26CD                        00            .byte	0
10833 26CE                        00            .byte	0
10834 26CF                        00            .byte	0
10835 26D0                        00            .byte	0
10836                                           ! 1259  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10837 26D1                        00            .byte	0
10838 26D2                        00            .byte	0
10839 26D3                        18            .byte	$18
10840 26D4                        3C            .byte	$3C
10841 26D5                        7E            .byte	$7E
10842 26D6                        18            .byte	$18
10843 26D7                        18            .byte	$18
10844 26D8                        18            .byte	$18
10845 26D9                        18            .byte	$18
10846 26DA                        18            .byte	$18
10847 26DB                        18            .byte	$18
10848 26DC                        18            .byte	$18
10849 26DD                        00            .byte	0
10850 26DE                        00            .byte	0
10851 26DF                        00            .byte	0
10852 26E0                        00            .byte	0
10853                                           ! 1260  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10854 26E1                        00            .byte	0
10855 26E2                        00            .byte	0
10856 26E3                        18            .byte	$18
10857 26E4                        18            .byte	$18
10858 26E5                        18            .byte	$18
10859 26E6                        18            .byte	$18
10860 26E7                        18            .byte	$18
10861 26E8                        18            .byte	$18
10862 26E9                        18            .byte	$18
10863 26EA                        7E            .byte	$7E
10864 26EB                        3C            .byte	$3C
10865 26EC                        18            .byte	$18
10866 26ED                        00            .byte	0
10867 26EE                        00            .byte	0
10868 26EF                        00            .byte	0
10869 26F0                        00            .byte	0
10870                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10871 26F1                        00            .byte	0
10872 26F2                        00            .byte	0
10873 26F3                        00            .byte	0
10874 26F4                        00            .byte	0
10875 26F5                        00            .byte	0
10876 26F6                        18            .byte	$18
10877 26F7                        0C            .byte	$C
10878 26F8                        FE            .byte	$FE
10879 26F9                        0C            .byte	$C
10880 26FA                        18            .byte	$18
10881 26FB                        00            .byte	0
10882 26FC                        00            .byte	0
10883 26FD                        00            .byte	0
10884 26FE                        00            .byte	0
10885 26FF                        00            .byte	0
10886 2700                        00            .byte	0
10887                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10888 2701                        00            .byte	0
10889 2702                        00            .byte	0
10890 2703                        00            .byte	0
10891 2704                        00            .byte	0
10892 2705                        00            .byte	0
10893 2706                        30            .byte	$30
10894 2707                        60            .byte	$60
10895 2708                        FE            .byte	$FE
10896 2709                        60            .byte	$60
10897 270A                        30            .byte	$30
10898 270B                        00            .byte	0
10899 270C                        00            .byte	0
10900 270D                        00            .byte	0
10901 270E                        00            .byte	0
10902 270F                        00            .byte	0
10903 2710                        00            .byte	0
10904                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10905 2711                        00            .byte	0
10906 2712                        00            .byte	0
10907 2713                        00            .byte	0
10908 2714                        00            .byte	0
10909 2715                        00            .byte	0
10910 2716                        00            .byte	0
10911 2717                        C0            .byte	$C0
10912 2718                        C0            .byte	$C0
10913 2719                        C0            .byte	$C0
10914 271A                        FE            .byte	$FE
10915 271B                        00            .byte	0
10916 271C                        00            .byte	0
10917 271D                        00            .byte	0
10918 271E                        00            .byte	0
10919 271F                        00            .byte	0
10920 2720                        00            .byte	0
10921                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10922 2721                        00            .byte	0
10923 2722                        00            .byte	0
10924 2723                        00            .byte	0
10925 2724                        00            .byte	0
10926 2725                        00            .byte	0
10927 2726                        24            .byte	$24
10928 2727                        66            .byte	$66
10929 2728                        FF            .byte	$FF
10930 2729                        66            .byte	$66
10931 272A                        24            .byte	$24
10932 272B                        00            .byte	0
10933 272C                        00            .byte	0
10934 272D                        00            .byte	0
10935 272E                        00            .byte	0
10936 272F                        00            .byte	0
10937 2730                        00            .byte	0
10938                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38
10939 2731                        00            .byte	0
10940 2732                        00            .byte	0
10941 2733                        00            .byte	0
10942 2734                        00            .byte	0
10943 2735                        10            .byte	$10
10944 2736                        38            .byte	$38
10945                                           ! 1265 , 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10946 2737                        38            .byte	$38
10947 2738                        7C            .byte	$7C
10948 2739                        7C            .byte	$7C
10949 273A                        FE            .byte	$FE
10950 273B                        FE            .byte	$FE
10951 273C                        00            .byte	0
10952 273D                        00            .byte	0
10953 273E                        00            .byte	0
10954 273F                        00            .byte	0
10955 2740                        00            .byte	0
10956                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10957 2741                        00            .byte	0
10958 2742                        00            .byte	0
10959 2743                        00            .byte	0
10960 2744                        00            .byte	0
10961 2745                        FE            .byte	$FE
10962 2746                        FE            .byte	$FE
10963 2747                        7C            .byte	$7C
10964 2748                        7C            .byte	$7C
10965 2749                        38            .byte	$38
10966 274A                        38            .byte	$38
10967 274B                        10            .byte	$10
10968 274C                        00            .byte	0
10969 274D                        00            .byte	0
10970 274E                        00            .byte	0
10971 274F                        00            .byte	0
10972 2750                        00            .byte	0
10973                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10974 2751                        00            .byte	0
10975 2752                        00            .byte	0
10976 2753                        00            .byte	0
10977 2754                        00            .byte	0
10978 2755                        00            .byte	0
10979 2756                        00            .byte	0
10980 2757                        00            .byte	0
10981 2758                        00            .byte	0
10982 2759                        00            .byte	0
10983 275A                        00            .byte	0
10984 275B                        00            .byte	0
10985 275C                        00            .byte	0
10986 275D                        00            .byte	0
10987 275E                        00            .byte	0
10988 275F                        00            .byte	0
10989 2760                        00            .byte	0
10990                                           ! 1268  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10991 2761                        00            .byte	0
10992 2762                        00            .byte	0
10993 2763                        18            .byte	$18
10994 2764                        3C            .byte	$3C
10995 2765                        3C            .byte	$3C
10996 2766                        3C            .byte	$3C
10997 2767                        18            .byte	$18
10998 2768                        18            .byte	$18
10999 2769                        18            .byte	$18
11000 276A                        00            .byte	0
11001 276B                        18            .byte	$18
11002 276C                        18            .byte	$18
11003 276D                        00            .byte	0
11004 276E                        00            .byte	0
11005 276F                        00            .byte	0
11006 2770                        00            .byte	0
11007                                           ! 1269  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11008 2771                        00            .byte	0
11009 2772                        66            .byte	$66
11010 2773                        66            .byte	$66
11011 2774                        66            .byte	$66
11012 2775                        24            .byte	$24
11013 2776                        00            .byte	0
11014 2777                        00            .byte	0
11015 2778                        00            .byte	0
11016 2779                        00            .byte	0
11017 277A                        00            .byte	0
11018 277B                        00            .byte	0
11019 277C                        00            .byte	0
11020 277D                        00            .byte	0
11021 277E                        00            .byte	0
11022 277F                        00            .byte	0
11023 2780                        00            .byte	0
11024                                           ! 1270  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11025 2781                        00            .byte	0
11026 2782                        00            .byte	0
11027 2783                        00            .byte	0
11028 2784                        6C            .byte	$6C
11029 2785                        6C            .byte	$6C
11030 2786                        FE            .byte	$FE
11031 2787                        6C            .byte	$6C
11032 2788                        6C            .byte	$6C
11033 2789                        6C            .byte	$6C
11034 278A                        FE            .byte	$FE
11035 278B                        6C            .byte	$6C
11036 278C                        6C            .byte	$6C
11037 278D                        00            .byte	0
11038 278E                        00            .byte	0
11039 278F                        00            .byte	0
11040 2790                        00            .byte	0
11041                                           ! 1271  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11042 2791                        18            .byte	$18
11043 2792                        18            .byte	$18
11044 2793                        7C            .byte	$7C
11045 2794                        C6            .byte	$C6
11046 2795                        C2            .byte	$C2
11047 2796                        C0            .byte	$C0
11048 2797                        7C            .byte	$7C
11049 2798                        06            .byte	6
11050 2799                        06            .byte	6
11051 279A                        86            .byte	$86
11052 279B                        C6            .byte	$C6
11053 279C                        7C            .byte	$7C
11054 279D                        18            .byte	$18
11055 279E                        18            .byte	$18
11056 279F                        00            .byte	0
11057 27A0                        00            .byte	0
11058                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11059 27A1                        00            .byte	0
11060 27A2                        00            .byte	0
11061 27A3                        00            .byte	0
11062 27A4                        00            .byte	0
11063 27A5                        C2            .byte	$C2
11064 27A6                        C6            .byte	$C6
11065 27A7                        0C            .byte	$C
11066 27A8                        18            .byte	$18
11067 27A9                        30            .byte	$30
11068 27AA                        60            .byte	$60
11069 27AB                        C6            .byte	$C6
11070 27AC                        86            .byte	$86
11071 27AD                        00            .byte	0
11072 27AE                        00            .byte	0
11073 27AF                        00            .byte	0
11074 27B0                        00            .byte	0
11075                                           ! 1273  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11076 27B1                        00            .byte	0
11077 27B2                        00            .byte	0
11078 27B3                        38            .byte	$38
11079 27B4                        6C            .byte	$6C
11080 27B5                        6C            .byte	$6C
11081 27B6                        38            .byte	$38
11082 27B7                        76            .byte	$76
11083 27B8                        DC            .byte	$DC
11084 27B9                        CC            .byte	$CC
11085 27BA                        CC            .byte	$CC
11086 27BB                        CC            .byte	$CC
11087 27BC                        76            .byte	$76
11088 27BD                        00            .byte	0
11089 27BE                        00            .byte	0
11090 27BF                        00            .byte	0
11091 27C0                        00            .byte	0
11092                                           ! 1274  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11093 27C1                        00            .byte	0
11094 27C2                        30            .byte	$30
11095 27C3                        30            .byte	$30
11096 27C4                        30            .byte	$30
11097 27C5                        60            .byte	$60
11098 27C6                        00            .byte	0
11099 27C7                        00            .byte	0
11100 27C8                        00            .byte	0
11101 27C9                        00            .byte	0
11102 27CA                        00            .byte	0
11103 27CB                        00            .byte	0
11104 27CC                        00            .byte	0
11105 27CD                        00            .byte	0
11106 27CE                        00            .byte	0
11107 27CF                        00            .byte	0
11108 27D0                        00            .byte	0
11109                                           ! 1275  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11110 27D1                        00            .byte	0
11111 27D2                        00            .byte	0
11112 27D3                        0C            .byte	$C
11113 27D4                        18            .byte	$18
11114 27D5                        30            .byte	$30
11115 27D6                        30            .byte	$30
11116 27D7                        30            .byte	$30
11117 27D8                        30            .byte	$30
11118 27D9                        30            .byte	$30
11119 27DA                        30            .byte	$30
11120 27DB                        18            .byte	$18
11121 27DC                        0C            .byte	$C
11122 27DD                        00            .byte	0
11123 27DE                        00            .byte	0
11124 27DF                        00            .byte	0
11125 27E0                        00            .byte	0
11126                                           ! 1276  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11127 27E1                        00            .byte	0
11128 27E2                        00            .byte	0
11129 27E3                        30            .byte	$30
11130 27E4                        18            .byte	$18
11131 27E5                        0C            .byte	$C
11132 27E6                        0C            .byte	$C
11133 27E7                        0C            .byte	$C
11134 27E8                        0C            .byte	$C
11135 27E9                        0C            .byte	$C
11136 27EA                        0C            .byte	$C
11137 27EB                        18            .byte	$18
11138 27EC                        30            .byte	$30
11139 27ED                        00            .byte	0
11140 27EE                        00            .byte	0
11141 27EF                        00            .byte	0
11142 27F0                        00            .byte	0
11143                                           ! 1277  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11144 27F1                        00            .byte	0
11145 27F2                        00            .byte	0
11146 27F3                        00            .byte	0
11147 27F4                        00            .byte	0
11148 27F5                        00            .byte	0
11149 27F6                        66            .byte	$66
11150 27F7                        3C            .byte	$3C
11151 27F8                        FF            .byte	$FF
11152 27F9                        3C            .byte	$3C
11153 27FA                        66            .byte	$66
11154 27FB                        00            .byte	0
11155 27FC                        00            .byte	0
11156 27FD                        00            .byte	0
11157 27FE                        00            .byte	0
11158 27FF                        00            .byte	0
11159 2800                        00            .byte	0
11160                                           ! 1278  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11161 2801                        00            .byte	0
11162 2802                        00            .byte	0
11163 2803                        00            .byte	0
11164 2804                        00            .byte	0
11165 2805                        00            .byte	0
11166 2806                        18            .byte	$18
11167 2807                        18            .byte	$18
11168 2808                        7E            .byte	$7E
11169 2809                        18            .byte	$18
11170 280A                        18            .byte	$18
11171 280B                        00            .byte	0
11172 280C                        00            .byte	0
11173 280D                        00            .byte	0
11174 280E                        00            .byte	0
11175 280F                        00            .byte	0
11176 2810                        00            .byte	0
11177                                           ! 1279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11178 2811                        00            .byte	0
11179 2812                        00            .byte	0
11180 2813                        00            .byte	0
11181 2814                        00            .byte	0
11182 2815                        00            .byte	0
11183 2816                        00            .byte	0
11184 2817                        00            .byte	0
11185 2818                        00            .byte	0
11186 2819                        00            .byte	0
11187 281A                        18            .byte	$18
11188 281B                        18            .byte	$18
11189 281C                        18            .byte	$18
11190 281D                        30            .byte	$30
11191 281E                        00            .byte	0
11192 281F                        00            .byte	0
11193 2820                        00            .byte	0
11194                                           ! 1280  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11195 2821                        00            .byte	0
11196 2822                        00            .byte	0
11197 2823                        00            .byte	0
11198 2824                        00            .byte	0
11199 2825                        00            .byte	0
11200 2826                        00            .byte	0
11201 2827                        00            .byte	0
11202 2828                        FE            .byte	$FE
11203 2829                        00            .byte	0
11204 282A                        00            .byte	0
11205 282B                        00            .byte	0
11206 282C                        00            .byte	0
11207 282D                        00            .byte	0
11208 282E                        00            .byte	0
11209 282F                        00            .byte	0
11210 2830                        00            .byte	0
11211                                           ! 1281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11212 2831                        00            .byte	0
11213 2832                        00            .byte	0
11214 2833                        00            .byte	0
11215 2834                        00            .byte	0
11216 2835                        00            .byte	0
11217 2836                        00            .byte	0
11218 2837                        00            .byte	0
11219 2838                        00            .byte	0
11220 2839                        00            .byte	0
11221 283A                        00            .byte	0
11222 283B                        18            .byte	$18
11223 283C                        18            .byte	$18
11224 283D                        00            .byte	0
11225 283E                        00            .byte	0
11226 283F                        00            .byte	0
11227 2840                        00            .byte	0
11228                                           ! 1282  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11229 2841                        00            .byte	0
11230 2842                        00            .byte	0
11231 2843                        00            .byte	0
11232 2844                        00            .byte	0
11233 2845                        02            .byte	2
11234 2846                        06            .byte	6
11235 2847                        0C            .byte	$C
11236 2848                        18            .byte	$18
11237 2849                        30            .byte	$30
11238 284A                        60            .byte	$60
11239 284B                        C0            .byte	$C0
11240 284C                        80            .byte	$80
11241 284D                        00            .byte	0
11242 284E                        00            .byte	0
11243 284F                        00            .byte	0
11244 2850                        00            .byte	0
11245                                           ! 1283  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11246 2851                        00            .byte	0
11247 2852                        00            .byte	0
11248 2853                        3C            .byte	$3C
11249 2854                        66            .byte	$66
11250 2855                        C3            .byte	$C3
11251 2856                        C3            .byte	$C3
11252 2857                        DB            .byte	$DB
11253 2858                        DB            .byte	$DB
11254 2859                        C3            .byte	$C3
11255 285A                        C3            .byte	$C3
11256 285B                        66            .byte	$66
11257 285C                        3C            .byte	$3C
11258 285D                        00            .byte	0
11259 285E                        00            .byte	0
11260 285F                        00            .byte	0
11261 2860                        00            .byte	0
11262                                           ! 1284  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11263 2861                        00            .byte	0
11264 2862                        00            .byte	0
11265 2863                        18            .byte	$18
11266 2864                        38            .byte	$38
11267 2865                        78            .byte	$78
11268 2866                        18            .byte	$18
11269 2867                        18            .byte	$18
11270 2868                        18            .byte	$18
11271 2869                        18            .byte	$18
11272 286A                        18            .byte	$18
11273 286B                        18            .byte	$18
11274 286C                        7E            .byte	$7E
11275 286D                        00            .byte	0
11276 286E                        00            .byte	0
11277 286F                        00            .byte	0
11278 2870                        00            .byte	0
11279                                           ! 1285  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11280 2871                        00            .byte	0
11281 2872                        00            .byte	0
11282 2873                        7C            .byte	$7C
11283 2874                        C6            .byte	$C6
11284 2875                        06            .byte	6
11285 2876                        0C            .byte	$C
11286 2877                        18            .byte	$18
11287 2878                        30            .byte	$30
11288 2879                        60            .byte	$60
11289 287A                        C0            .byte	$C0
11290 287B                        C6            .byte	$C6
11291 287C                        FE            .byte	$FE
11292 287D                        00            .byte	0
11293 287E                        00            .byte	0
11294 287F                        00            .byte	0
11295 2880                        00            .byte	0
11296                                           ! 1286  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x0
11297 2881                        00            .byte	0
11298 2882                        00            .byte	0
11299 2883                        7C            .byte	$7C
11300 2884                        C6            .byte	$C6
11301 2885                        06            .byte	6
11302 2886                        06            .byte	6
11303 2887                        3C            .byte	$3C
11304 2888                        06            .byte	6
11305                                           ! 1286 6, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11306 2889                        06            .byte	6
11307 288A                        06            .byte	6
11308 288B                        C6            .byte	$C6
11309 288C                        7C            .byte	$7C
11310 288D                        00            .byte	0
11311 288E                        00            .byte	0
11312 288F                        00            .byte	0
11313 2890                        00            .byte	0
11314                                           ! 1287  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11315 2891                        00            .byte	0
11316 2892                        00            .byte	0
11317 2893                        0C            .byte	$C
11318 2894                        1C            .byte	$1C
11319 2895                        3C            .byte	$3C
11320 2896                        6C            .byte	$6C
11321 2897                        CC            .byte	$CC
11322 2898                        FE            .byte	$FE
11323 2899                        0C            .byte	$C
11324 289A                        0C            .byte	$C
11325 289B                        0C            .byte	$C
11326 289C                        1E            .byte	$1E
11327 289D                        00            .byte	0
11328 289E                        00            .byte	0
11329 289F                        00            .byte	0
11330 28A0                        00            .byte	0
11331                                           ! 1288  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11332 28A1                        00            .byte	0
11333 28A2                        00            .byte	0
11334 28A3                        FE            .byte	$FE
11335 28A4                        C0            .byte	$C0
11336 28A5                        C0            .byte	$C0
11337 28A6                        C0            .byte	$C0
11338 28A7                        FC            .byte	$FC
11339 28A8                        06            .byte	6
11340 28A9                        06            .byte	6
11341 28AA                        06            .byte	6
11342 28AB                        C6            .byte	$C6
11343 28AC                        7C            .byte	$7C
11344 28AD                        00            .byte	0
11345 28AE                        00            .byte	0
11346 28AF                        00            .byte	0
11347 28B0                        00            .byte	0
11348                                           ! 1289  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11349 28B1                        00            .byte	0
11350 28B2                        00            .byte	0
11351 28B3                        38            .byte	$38
11352 28B4                        60            .byte	$60
11353 28B5                        C0            .byte	$C0
11354 28B6                        C0            .byte	$C0
11355 28B7                        FC            .byte	$FC
11356 28B8                        C6            .byte	$C6
11357 28B9                        C6            .byte	$C6
11358 28BA                        C6            .byte	$C6
11359 28BB                        C6            .byte	$C6
11360 28BC                        7C            .byte	$7C
11361 28BD                        00            .byte	0
11362 28BE                        00            .byte	0
11363 28BF                        00            .byte	0
11364 28C0                        00            .byte	0
11365                                           ! 1290  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11366 28C1                        00            .byte	0
11367 28C2                        00            .byte	0
11368 28C3                        FE            .byte	$FE
11369 28C4                        C6            .byte	$C6
11370 28C5                        06            .byte	6
11371 28C6                        06            .byte	6
11372 28C7                        0C            .byte	$C
11373 28C8                        18            .byte	$18
11374 28C9                        30            .byte	$30
11375 28CA                        30            .byte	$30
11376 28CB                        30            .byte	$30
11377 28CC                        30            .byte	$30
11378 28CD                        00            .byte	0
11379 28CE                        00            .byte	0
11380 28CF                        00            .byte	0
11381 28D0                        00            .byte	0
11382                                           ! 1291  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11383 28D1                        00            .byte	0
11384 28D2                        00            .byte	0
11385 28D3                        7C            .byte	$7C
11386 28D4                        C6            .byte	$C6
11387 28D5                        C6            .byte	$C6
11388 28D6                        C6            .byte	$C6
11389 28D7                        7C            .byte	$7C
11390 28D8                        C6            .byte	$C6
11391 28D9                        C6            .byte	$C6
11392 28DA                        C6            .byte	$C6
11393 28DB                        C6            .byte	$C6
11394 28DC                        7C            .byte	$7C
11395 28DD                        00            .byte	0
11396 28DE                        00            .byte	0
11397 28DF                        00            .byte	0
11398 28E0                        00            .byte	0
11399                                           ! 1292  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11400 28E1                        00            .byte	0
11401 28E2                        00            .byte	0
11402 28E3                        7C            .byte	$7C
11403 28E4                        C6            .byte	$C6
11404 28E5                        C6            .byte	$C6
11405 28E6                        C6            .byte	$C6
11406 28E7                        7E            .byte	$7E
11407 28E8                        06            .byte	6
11408 28E9                        06            .byte	6
11409 28EA                        06            .byte	6
11410 28EB                        0C            .byte	$C
11411 28EC                        78            .byte	$78
11412 28ED                        00            .byte	0
11413 28EE                        00            .byte	0
11414 28EF                        00            .byte	0
11415 28F0                        00            .byte	0
11416                                           ! 1293  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11417 28F1                        00            .byte	0
11418 28F2                        00            .byte	0
11419 28F3                        00            .byte	0
11420 28F4                        00            .byte	0
11421 28F5                        18            .byte	$18
11422 28F6                        18            .byte	$18
11423 28F7                        00            .byte	0
11424 28F8                        00            .byte	0
11425 28F9                        00            .byte	0
11426 28FA                        18            .byte	$18
11427 28FB                        18            .byte	$18
11428 28FC                        00            .byte	0
11429 28FD                        00            .byte	0
11430 28FE                        00            .byte	0
11431 28FF                        00            .byte	0
11432 2900                        00            .byte	0
11433                                           ! 1294  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11434 2901                        00            .byte	0
11435 2902                        00            .byte	0
11436 2903                        00            .byte	0
11437 2904                        00            .byte	0
11438 2905                        18            .byte	$18
11439 2906                        18            .byte	$18
11440 2907                        00            .byte	0
11441 2908                        00            .byte	0
11442 2909                        00            .byte	0
11443 290A                        18            .byte	$18
11444 290B                        18            .byte	$18
11445 290C                        30            .byte	$30
11446 290D                        00            .byte	0
11447 290E                        00            .byte	0
11448 290F                        00            .byte	0
11449 2910                        00            .byte	0
11450                                           ! 1295  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11451 2911                        00            .byte	0
11452 2912                        00            .byte	0
11453 2913                        00            .byte	0
11454 2914                        06            .byte	6
11455 2915                        0C            .byte	$C
11456 2916                        18            .byte	$18
11457 2917                        30            .byte	$30
11458 2918                        60            .byte	$60
11459 2919                        30            .byte	$30
11460 291A                        18            .byte	$18
11461 291B                        0C            .byte	$C
11462 291C                        06            .byte	6
11463 291D                        00            .byte	0
11464 291E                        00            .byte	0
11465 291F                        00            .byte	0
11466 2920                        00            .byte	0
11467                                           ! 1296  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11468 2921                        00            .byte	0
11469 2922                        00            .byte	0
11470 2923                        00            .byte	0
11471 2924                        00            .byte	0
11472 2925                        00            .byte	0
11473 2926                        7E            .byte	$7E
11474 2927                        00            .byte	0
11475 2928                        00            .byte	0
11476 2929                        7E            .byte	$7E
11477 292A                        00            .byte	0
11478 292B                        00            .byte	0
11479 292C                        00            .byte	0
11480 292D                        00            .byte	0
11481 292E                        00            .byte	0
11482 292F                        00            .byte	0
11483 2930                        00            .byte	0
11484                                           ! 1297  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11485 2931                        00            .byte	0
11486 2932                        00            .byte	0
11487 2933                        00            .byte	0
11488 2934                        60            .byte	$60
11489 2935                        30            .byte	$30
11490 2936                        18            .byte	$18
11491 2937                        0C            .byte	$C
11492 2938                        06            .byte	6
11493 2939                        0C            .byte	$C
11494 293A                        18            .byte	$18
11495 293B                        30            .byte	$30
11496 293C                        60            .byte	$60
11497 293D                        00            .byte	0
11498 293E                        00            .byte	0
11499 293F                        00            .byte	0
11500 2940                        00            .byte	0
11501                                           ! 1298  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11502 2941                        00            .byte	0
11503 2942                        00            .byte	0
11504 2943                        7C            .byte	$7C
11505 2944                        C6            .byte	$C6
11506 2945                        C6            .byte	$C6
11507 2946                        0C            .byte	$C
11508 2947                        18            .byte	$18
11509 2948                        18            .byte	$18
11510 2949                        18            .byte	$18
11511 294A                        00            .byte	0
11512 294B                        18            .byte	$18
11513 294C                        18            .byte	$18
11514 294D                        00            .byte	0
11515 294E                        00            .byte	0
11516 294F                        00            .byte	0
11517 2950                        00            .byte	0
11518                                           ! 1299  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11519 2951                        00            .byte	0
11520 2952                        00            .byte	0
11521 2953                        00            .byte	0
11522 2954                        7C            .byte	$7C
11523 2955                        C6            .byte	$C6
11524 2956                        C6            .byte	$C6
11525 2957                        DE            .byte	$DE
11526 2958                        DE            .byte	$DE
11527 2959                        DE            .byte	$DE
11528 295A                        DC            .byte	$DC
11529 295B                        C0            .byte	$C0
11530 295C                        7C            .byte	$7C
11531 295D                        00            .byte	0
11532 295E                        00            .byte	0
11533 295F                        00            .byte	0
11534 2960                        00            .byte	0
11535                                           ! 1300  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11536 2961                        00            .byte	0
11537 2962                        00            .byte	0
11538 2963                        10            .byte	$10
11539 2964                        38            .byte	$38
11540 2965                        6C            .byte	$6C
11541 2966                        C6            .byte	$C6
11542 2967                        C6            .byte	$C6
11543 2968                        FE            .byte	$FE
11544 2969                        C6            .byte	$C6
11545 296A                        C6            .byte	$C6
11546 296B                        C6            .byte	$C6
11547 296C                        C6            .byte	$C6
11548 296D                        00            .byte	0
11549 296E                        00            .byte	0
11550 296F                        00            .byte	0
11551 2970                        00            .byte	0
11552                                           ! 1301  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11553 2971                        00            .byte	0
11554 2972                        00            .byte	0
11555 2973                        FC            .byte	$FC
11556 2974                        66            .byte	$66
11557 2975                        66            .byte	$66
11558 2976                        66            .byte	$66
11559 2977                        7C            .byte	$7C
11560 2978                        66            .byte	$66
11561 2979                        66            .byte	$66
11562 297A                        66            .byte	$66
11563 297B                        66            .byte	$66
11564 297C                        FC            .byte	$FC
11565 297D                        00            .byte	0
11566 297E                        00            .byte	0
11567 297F                        00            .byte	0
11568 2980                        00            .byte	0
11569                                           ! 1302  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11570 2981                        00            .byte	0
11571 2982                        00            .byte	0
11572 2983                        3C            .byte	$3C
11573 2984                        66            .byte	$66
11574 2985                        C2            .byte	$C2
11575 2986                        C0            .byte	$C0
11576 2987                        C0            .byte	$C0
11577 2988                        C0            .byte	$C0
11578 2989                        C0            .byte	$C0
11579 298A                        C2            .byte	$C2
11580 298B                        66            .byte	$66
11581 298C                        3C            .byte	$3C
11582 298D                        00            .byte	0
11583 298E                        00            .byte	0
11584 298F                        00            .byte	0
11585 2990                        00            .byte	0
11586                                           ! 1303  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11587 2991                        00            .byte	0
11588 2992                        00            .byte	0
11589 2993                        F8            .byte	$F8
11590 2994                        6C            .byte	$6C
11591 2995                        66            .byte	$66
11592 2996                        66            .byte	$66
11593 2997                        66            .byte	$66
11594 2998                        66            .byte	$66
11595 2999                        66            .byte	$66
11596 299A                        66            .byte	$66
11597 299B                        6C            .byte	$6C
11598 299C                        F8            .byte	$F8
11599 299D                        00            .byte	0
11600 299E                        00            .byte	0
11601 299F                        00            .byte	0
11602 29A0                        00            .byte	0
11603                                           ! 1304  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11604 29A1                        00            .byte	0
11605 29A2                        00            .byte	0
11606 29A3                        FE            .byte	$FE
11607 29A4                        66            .byte	$66
11608 29A5                        62            .byte	$62
11609 29A6                        68            .byte	$68
11610 29A7                        78            .byte	$78
11611 29A8                        68            .byte	$68
11612 29A9                        60            .byte	$60
11613 29AA                        62            .byte	$62
11614 29AB                        66            .byte	$66
11615 29AC                        FE            .byte	$FE
11616 29AD                        00            .byte	0
11617 29AE                        00            .byte	0
11618 29AF                        00            .byte	0
11619 29B0                        00            .byte	0
11620                                           ! 1305  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11621 29B1                        00            .byte	0
11622 29B2                        00            .byte	0
11623 29B3                        FE            .byte	$FE
11624 29B4                        66            .byte	$66
11625 29B5                        62            .byte	$62
11626 29B6                        68            .byte	$68
11627 29B7                        78            .byte	$78
11628 29B8                        68            .byte	$68
11629 29B9                        60            .byte	$60
11630 29BA                        60            .byte	$60
11631 29BB                        60            .byte	$60
11632 29BC                        F0            .byte	$F0
11633 29BD                        00            .byte	0
11634 29BE                        00            .byte	0
11635 29BF                        00            .byte	0
11636 29C0                        00            .byte	0
11637                                           ! 1306  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11638 29C1                        00            .byte	0
11639 29C2                        00            .byte	0
11640 29C3                        3C            .byte	$3C
11641 29C4                        66            .byte	$66
11642 29C5                        C2            .byte	$C2
11643 29C6                        C0            .byte	$C0
11644 29C7                        C0            .byte	$C0
11645 29C8                        DE            .byte	$DE
11646 29C9                        C6            .byte	$C6
11647 29CA                        C6            .byte	$C6
11648 29CB                        66            .byte	$66
11649 29CC                        3A            .byte	$3A
11650 29CD                        00            .byte	0
11651 29CE                        00            .byte	0
11652 29CF                        00            .byte	0
11653 29D0                        00            .byte	0
11654                                           ! 1307  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x
11655 29D1                        00            .byte	0
11656 29D2                        00            .byte	0
11657 29D3                        C6            .byte	$C6
11658 29D4                        C6            .byte	$C6
11659 29D5                        C6            .byte	$C6
11660 29D6                        C6            .byte	$C6
11661 29D7                        FE            .byte	$FE
11662 29D8                        C6            .byte	$C6
11663 29D9                        C6            .byte	$C6
11664 29DA                        C6            .byte	$C6
11665                                           ! 1307 c6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11666 29DB                        C6            .byte	$C6
11667 29DC                        C6            .byte	$C6
11668 29DD                        00            .byte	0
11669 29DE                        00            .byte	0
11670 29DF                        00            .byte	0
11671 29E0                        00            .byte	0
11672                                           ! 1308  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11673 29E1                        00            .byte	0
11674 29E2                        00            .byte	0
11675 29E3                        3C            .byte	$3C
11676 29E4                        18            .byte	$18
11677 29E5                        18            .byte	$18
11678 29E6                        18            .byte	$18
11679 29E7                        18            .byte	$18
11680 29E8                        18            .byte	$18
11681 29E9                        18            .byte	$18
11682 29EA                        18            .byte	$18
11683 29EB                        18            .byte	$18
11684 29EC                        3C            .byte	$3C
11685 29ED                        00            .byte	0
11686 29EE                        00            .byte	0
11687 29EF                        00            .byte	0
11688 29F0                        00            .byte	0
11689                                           ! 1309  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11690 29F1                        00            .byte	0
11691 29F2                        00            .byte	0
11692 29F3                        1E            .byte	$1E
11693 29F4                        0C            .byte	$C
11694 29F5                        0C            .byte	$C
11695 29F6                        0C            .byte	$C
11696 29F7                        0C            .byte	$C
11697 29F8                        0C            .byte	$C
11698 29F9                        CC            .byte	$CC
11699 29FA                        CC            .byte	$CC
11700 29FB                        CC            .byte	$CC
11701 29FC                        78            .byte	$78
11702 29FD                        00            .byte	0
11703 29FE                        00            .byte	0
11704 29FF                        00            .byte	0
11705 2A00                        00            .byte	0
11706                                           ! 1310  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11707 2A01                        00            .byte	0
11708 2A02                        00            .byte	0
11709 2A03                        E6            .byte	$E6
11710 2A04                        66            .byte	$66
11711 2A05                        66            .byte	$66
11712 2A06                        6C            .byte	$6C
11713 2A07                        78            .byte	$78
11714 2A08                        78            .byte	$78
11715 2A09                        6C            .byte	$6C
11716 2A0A                        66            .byte	$66
11717 2A0B                        66            .byte	$66
11718 2A0C                        E6            .byte	$E6
11719 2A0D                        00            .byte	0
11720 2A0E                        00            .byte	0
11721 2A0F                        00            .byte	0
11722 2A10                        00            .byte	0
11723                                           ! 1311  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11724 2A11                        00            .byte	0
11725 2A12                        00            .byte	0
11726 2A13                        F0            .byte	$F0
11727 2A14                        60            .byte	$60
11728 2A15                        60            .byte	$60
11729 2A16                        60            .byte	$60
11730 2A17                        60            .byte	$60
11731 2A18                        60            .byte	$60
11732 2A19                        60            .byte	$60
11733 2A1A                        62            .byte	$62
11734 2A1B                        66            .byte	$66
11735 2A1C                        FE            .byte	$FE
11736 2A1D                        00            .byte	0
11737 2A1E                        00            .byte	0
11738 2A1F                        00            .byte	0
11739 2A20                        00            .byte	0
11740                                           ! 1312  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11741 2A21                        00            .byte	0
11742 2A22                        00            .byte	0
11743 2A23                        C3            .byte	$C3
11744 2A24                        E7            .byte	$E7
11745 2A25                        FF            .byte	$FF
11746 2A26                        FF            .byte	$FF
11747 2A27                        DB            .byte	$DB
11748 2A28                        C3            .byte	$C3
11749 2A29                        C3            .byte	$C3
11750 2A2A                        C3            .byte	$C3
11751 2A2B                        C3            .byte	$C3
11752 2A2C                        C3            .byte	$C3
11753 2A2D                        00            .byte	0
11754 2A2E                        00            .byte	0
11755 2A2F                        00            .byte	0
11756 2A30                        00            .byte	0
11757                                           ! 1313  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11758 2A31                        00            .byte	0
11759 2A32                        00            .byte	0
11760 2A33                        C6            .byte	$C6
11761 2A34                        E6            .byte	$E6
11762 2A35                        F6            .byte	$F6
11763 2A36                        FE            .byte	$FE
11764 2A37                        DE            .byte	$DE
11765 2A38                        CE            .byte	$CE
11766 2A39                        C6            .byte	$C6
11767 2A3A                        C6            .byte	$C6
11768 2A3B                        C6            .byte	$C6
11769 2A3C                        C6            .byte	$C6
11770 2A3D                        00            .byte	0
11771 2A3E                        00            .byte	0
11772 2A3F                        00            .byte	0
11773 2A40                        00            .byte	0
11774                                           ! 1314  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11775 2A41                        00            .byte	0
11776 2A42                        00            .byte	0
11777 2A43                        7C            .byte	$7C
11778 2A44                        C6            .byte	$C6
11779 2A45                        C6            .byte	$C6
11780 2A46                        C6            .byte	$C6
11781 2A47                        C6            .byte	$C6
11782 2A48                        C6            .byte	$C6
11783 2A49                        C6            .byte	$C6
11784 2A4A                        C6            .byte	$C6
11785 2A4B                        C6            .byte	$C6
11786 2A4C                        7C            .byte	$7C
11787 2A4D                        00            .byte	0
11788 2A4E                        00            .byte	0
11789 2A4F                        00            .byte	0
11790 2A50                        00            .byte	0
11791                                           ! 1315  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11792 2A51                        00            .byte	0
11793 2A52                        00            .byte	0
11794 2A53                        FC            .byte	$FC
11795 2A54                        66            .byte	$66
11796 2A55                        66            .byte	$66
11797 2A56                        66            .byte	$66
11798 2A57                        7C            .byte	$7C
11799 2A58                        60            .byte	$60
11800 2A59                        60            .byte	$60
11801 2A5A                        60            .byte	$60
11802 2A5B                        60            .byte	$60
11803 2A5C                        F0            .byte	$F0
11804 2A5D                        00            .byte	0
11805 2A5E                        00            .byte	0
11806 2A5F                        00            .byte	0
11807 2A60                        00            .byte	0
11808                                           ! 1316  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11809 2A61                        00            .byte	0
11810 2A62                        00            .byte	0
11811 2A63                        7C            .byte	$7C
11812 2A64                        C6            .byte	$C6
11813 2A65                        C6            .byte	$C6
11814 2A66                        C6            .byte	$C6
11815 2A67                        C6            .byte	$C6
11816 2A68                        C6            .byte	$C6
11817 2A69                        C6            .byte	$C6
11818 2A6A                        D6            .byte	$D6
11819 2A6B                        DE            .byte	$DE
11820 2A6C                        7C            .byte	$7C
11821 2A6D                        0C            .byte	$C
11822 2A6E                        0E            .byte	$E
11823 2A6F                        00            .byte	0
11824 2A70                        00            .byte	0
11825                                           ! 1317  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11826 2A71                        00            .byte	0
11827 2A72                        00            .byte	0
11828 2A73                        FC            .byte	$FC
11829 2A74                        66            .byte	$66
11830 2A75                        66            .byte	$66
11831 2A76                        66            .byte	$66
11832 2A77                        7C            .byte	$7C
11833 2A78                        6C            .byte	$6C
11834 2A79                        66            .byte	$66
11835 2A7A                        66            .byte	$66
11836 2A7B                        66            .byte	$66
11837 2A7C                        E6            .byte	$E6
11838 2A7D                        00            .byte	0
11839 2A7E                        00            .byte	0
11840 2A7F                        00            .byte	0
11841 2A80                        00            .byte	0
11842                                           ! 1318  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11843 2A81                        00            .byte	0
11844 2A82                        00            .byte	0
11845 2A83                        7C            .byte	$7C
11846 2A84                        C6            .byte	$C6
11847 2A85                        C6            .byte	$C6
11848 2A86                        60            .byte	$60
11849 2A87                        38            .byte	$38
11850 2A88                        0C            .byte	$C
11851 2A89                        06            .byte	6
11852 2A8A                        C6            .byte	$C6
11853 2A8B                        C6            .byte	$C6
11854 2A8C                        7C            .byte	$7C
11855 2A8D                        00            .byte	0
11856 2A8E                        00            .byte	0
11857 2A8F                        00            .byte	0
11858 2A90                        00            .byte	0
11859                                           ! 1319  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11860 2A91                        00            .byte	0
11861 2A92                        00            .byte	0
11862 2A93                        FF            .byte	$FF
11863 2A94                        DB            .byte	$DB
11864 2A95                        99            .byte	$99
11865 2A96                        18            .byte	$18
11866 2A97                        18            .byte	$18
11867 2A98                        18            .byte	$18
11868 2A99                        18            .byte	$18
11869 2A9A                        18            .byte	$18
11870 2A9B                        18            .byte	$18
11871 2A9C                        3C            .byte	$3C
11872 2A9D                        00            .byte	0
11873 2A9E                        00            .byte	0
11874 2A9F                        00            .byte	0
11875 2AA0                        00            .byte	0
11876                                           ! 1320  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11877 2AA1                        00            .byte	0
11878 2AA2                        00            .byte	0
11879 2AA3                        C6            .byte	$C6
11880 2AA4                        C6            .byte	$C6
11881 2AA5                        C6            .byte	$C6
11882 2AA6                        C6            .byte	$C6
11883 2AA7                        C6            .byte	$C6
11884 2AA8                        C6            .byte	$C6
11885 2AA9                        C6            .byte	$C6
11886 2AAA                        C6            .byte	$C6
11887 2AAB                        C6            .byte	$C6
11888 2AAC                        7C            .byte	$7C
11889 2AAD                        00            .byte	0
11890 2AAE                        00            .byte	0
11891 2AAF                        00            .byte	0
11892 2AB0                        00            .byte	0
11893                                           ! 1321  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11894 2AB1                        00            .byte	0
11895 2AB2                        00            .byte	0
11896 2AB3                        C3            .byte	$C3
11897 2AB4                        C3            .byte	$C3
11898 2AB5                        C3            .byte	$C3
11899 2AB6                        C3            .byte	$C3
11900 2AB7                        C3            .byte	$C3
11901 2AB8                        C3            .byte	$C3
11902 2AB9                        C3            .byte	$C3
11903 2ABA                        66            .byte	$66
11904 2ABB                        3C            .byte	$3C
11905 2ABC                        18            .byte	$18
11906 2ABD                        00            .byte	0
11907 2ABE                        00            .byte	0
11908 2ABF                        00            .byte	0
11909 2AC0                        00            .byte	0
11910                                           ! 1322  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11911 2AC1                        00            .byte	0
11912 2AC2                        00            .byte	0
11913 2AC3                        C3            .byte	$C3
11914 2AC4                        C3            .byte	$C3
11915 2AC5                        C3            .byte	$C3
11916 2AC6                        C3            .byte	$C3
11917 2AC7                        C3            .byte	$C3
11918 2AC8                        DB            .byte	$DB
11919 2AC9                        DB            .byte	$DB
11920 2ACA                        FF            .byte	$FF
11921 2ACB                        66            .byte	$66
11922 2ACC                        66            .byte	$66
11923 2ACD                        00            .byte	0
11924 2ACE                        00            .byte	0
11925 2ACF                        00            .byte	0
11926 2AD0                        00            .byte	0
11927                                           ! 1323  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11928 2AD1                        00            .byte	0
11929 2AD2                        00            .byte	0
11930 2AD3                        C3            .byte	$C3
11931 2AD4                        C3            .byte	$C3
11932 2AD5                        66            .byte	$66
11933 2AD6                        3C            .byte	$3C
11934 2AD7                        18            .byte	$18
11935 2AD8                        18            .byte	$18
11936 2AD9                        3C            .byte	$3C
11937 2ADA                        66            .byte	$66
11938 2ADB                        C3            .byte	$C3
11939 2ADC                        C3            .byte	$C3
11940 2ADD                        00            .byte	0
11941 2ADE                        00            .byte	0
11942 2ADF                        00            .byte	0
11943 2AE0                        00            .byte	0
11944                                           ! 1324  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11945 2AE1                        00            .byte	0
11946 2AE2                        00            .byte	0
11947 2AE3                        C3            .byte	$C3
11948 2AE4                        C3            .byte	$C3
11949 2AE5                        C3            .byte	$C3
11950 2AE6                        66            .byte	$66
11951 2AE7                        3C            .byte	$3C
11952 2AE8                        18            .byte	$18
11953 2AE9                        18            .byte	$18
11954 2AEA                        18            .byte	$18
11955 2AEB                        18            .byte	$18
11956 2AEC                        3C            .byte	$3C
11957 2AED                        00            .byte	0
11958 2AEE                        00            .byte	0
11959 2AEF                        00            .byte	0
11960 2AF0                        00            .byte	0
11961                                           ! 1325  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11962 2AF1                        00            .byte	0
11963 2AF2                        00            .byte	0
11964 2AF3                        FF            .byte	$FF
11965 2AF4                        C3            .byte	$C3
11966 2AF5                        86            .byte	$86
11967 2AF6                        0C            .byte	$C
11968 2AF7                        18            .byte	$18
11969 2AF8                        30            .byte	$30
11970 2AF9                        60            .byte	$60
11971 2AFA                        C1            .byte	$C1
11972 2AFB                        C3            .byte	$C3
11973 2AFC                        FF            .byte	$FF
11974 2AFD                        00            .byte	0
11975 2AFE                        00            .byte	0
11976 2AFF                        00            .byte	0
11977 2B00                        00            .byte	0
11978                                           ! 1326  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11979 2B01                        00            .byte	0
11980 2B02                        00            .byte	0
11981 2B03                        3C            .byte	$3C
11982 2B04                        30            .byte	$30
11983 2B05                        30            .byte	$30
11984 2B06                        30            .byte	$30
11985 2B07                        30            .byte	$30
11986 2B08                        30            .byte	$30
11987 2B09                        30            .byte	$30
11988 2B0A                        30            .byte	$30
11989 2B0B                        30            .byte	$30
11990 2B0C                        3C            .byte	$3C
11991 2B0D                        00            .byte	0
11992 2B0E                        00            .byte	0
11993 2B0F                        00            .byte	0
11994 2B10                        00            .byte	0
11995                                           ! 1327  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11996 2B11                        00            .byte	0
11997 2B12                        00            .byte	0
11998 2B13                        00            .byte	0
11999 2B14                        80            .byte	$80
12000 2B15                        C0            .byte	$C0
12001 2B16                        E0            .byte	$E0
12002 2B17                        70            .byte	$70
12003 2B18                        38            .byte	$38
12004 2B19                        1C            .byte	$1C
12005 2B1A                        0E            .byte	$E
12006 2B1B                        06            .byte	6
12007 2B1C                        02            .byte	2
12008 2B1D                        00            .byte	0
12009 2B1E                        00            .byte	0
12010 2B1F                        00            .byte	0
12011 2B20                        00            .byte	0
12012                                           ! 1328  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0
12013 2B21                        00            .byte	0
12014 2B22                        00            .byte	0
12015 2B23                        3C            .byte	$3C
12016 2B24                        0C            .byte	$C
12017 2B25                        0C            .byte	$C
12018 2B26                        0C            .byte	$C
12019 2B27                        0C            .byte	$C
12020 2B28                        0C            .byte	$C
12021 2B29                        0C            .byte	$C
12022 2B2A                        0C            .byte	$C
12023 2B2B                        0C            .byte	$C
12024 2B2C                        3C            .byte	$3C
12025                                           ! 1328 x00, 0x00, 0x00, 0x00,
12026 2B2D                        00            .byte	0
12027 2B2E                        00            .byte	0
12028 2B2F                        00            .byte	0
12029 2B30                        00            .byte	0
12030                                           ! 1329  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12031 2B31                        10            .byte	$10
12032 2B32                        38            .byte	$38
12033 2B33                        6C            .byte	$6C
12034 2B34                        C6            .byte	$C6
12035 2B35                        00            .byte	0
12036 2B36                        00            .byte	0
12037 2B37                        00            .byte	0
12038 2B38                        00            .byte	0
12039 2B39                        00            .byte	0
12040 2B3A                        00            .byte	0
12041 2B3B                        00            .byte	0
12042 2B3C                        00            .byte	0
12043 2B3D                        00            .byte	0
12044 2B3E                        00            .byte	0
12045 2B3F                        00            .byte	0
12046 2B40                        00            .byte	0
12047                                           ! 1330  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12048 2B41                        00            .byte	0
12049 2B42                        00            .byte	0
12050 2B43                        00            .byte	0
12051 2B44                        00            .byte	0
12052 2B45                        00            .byte	0
12053 2B46                        00            .byte	0
12054 2B47                        00            .byte	0
12055 2B48                        00            .byte	0
12056 2B49                        00            .byte	0
12057 2B4A                        00            .byte	0
12058 2B4B                        00            .byte	0
12059 2B4C                        00            .byte	0
12060 2B4D                        00            .byte	0
12061 2B4E                        FF            .byte	$FF
12062 2B4F                        00            .byte	0
12063 2B50                        00            .byte	0
12064                                           ! 1331  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12065 2B51                        30            .byte	$30
12066 2B52                        30            .byte	$30
12067 2B53                        18            .byte	$18
12068 2B54                        00            .byte	0
12069 2B55                        00            .byte	0
12070 2B56                        00            .byte	0
12071 2B57                        00            .byte	0
12072 2B58                        00            .byte	0
12073 2B59                        00            .byte	0
12074 2B5A                        00            .byte	0
12075 2B5B                        00            .byte	0
12076 2B5C                        00            .byte	0
12077 2B5D                        00            .byte	0
12078 2B5E                        00            .byte	0
12079 2B5F                        00            .byte	0
12080 2B60                        00            .byte	0
12081                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12082 2B61                        00            .byte	0
12083 2B62                        00            .byte	0
12084 2B63                        00            .byte	0
12085 2B64                        00            .byte	0
12086 2B65                        00            .byte	0
12087 2B66                        78            .byte	$78
12088 2B67                        0C            .byte	$C
12089 2B68                        7C            .byte	$7C
12090 2B69                        CC            .byte	$CC
12091 2B6A                        CC            .byte	$CC
12092 2B6B                        CC            .byte	$CC
12093 2B6C                        76            .byte	$76
12094 2B6D                        00            .byte	0
12095 2B6E                        00            .byte	0
12096 2B6F                        00            .byte	0
12097 2B70                        00            .byte	0
12098                                           ! 1333  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12099 2B71                        00            .byte	0
12100 2B72                        00            .byte	0
12101 2B73                        E0            .byte	$E0
12102 2B74                        60            .byte	$60
12103 2B75                        60            .byte	$60
12104 2B76                        78            .byte	$78
12105 2B77                        6C            .byte	$6C
12106 2B78                        66            .byte	$66
12107 2B79                        66            .byte	$66
12108 2B7A                        66            .byte	$66
12109 2B7B                        66            .byte	$66
12110 2B7C                        7C            .byte	$7C
12111 2B7D                        00            .byte	0
12112 2B7E                        00            .byte	0
12113 2B7F                        00            .byte	0
12114 2B80                        00            .byte	0
12115                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12116 2B81                        00            .byte	0
12117 2B82                        00            .byte	0
12118 2B83                        00            .byte	0
12119 2B84                        00            .byte	0
12120 2B85                        00            .byte	0
12121 2B86                        7C            .byte	$7C
12122 2B87                        C6            .byte	$C6
12123 2B88                        C0            .byte	$C0
12124 2B89                        C0            .byte	$C0
12125 2B8A                        C0            .byte	$C0
12126 2B8B                        C6            .byte	$C6
12127 2B8C                        7C            .byte	$7C
12128 2B8D                        00            .byte	0
12129 2B8E                        00            .byte	0
12130 2B8F                        00            .byte	0
12131 2B90                        00            .byte	0
12132                                           ! 1335  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12133 2B91                        00            .byte	0
12134 2B92                        00            .byte	0
12135 2B93                        1C            .byte	$1C
12136 2B94                        0C            .byte	$C
12137 2B95                        0C            .byte	$C
12138 2B96                        3C            .byte	$3C
12139 2B97                        6C            .byte	$6C
12140 2B98                        CC            .byte	$CC
12141 2B99                        CC            .byte	$CC
12142 2B9A                        CC            .byte	$CC
12143 2B9B                        CC            .byte	$CC
12144 2B9C                        76            .byte	$76
12145 2B9D                        00            .byte	0
12146 2B9E                        00            .byte	0
12147 2B9F                        00            .byte	0
12148 2BA0                        00            .byte	0
12149                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12150 2BA1                        00            .byte	0
12151 2BA2                        00            .byte	0
12152 2BA3                        00            .byte	0
12153 2BA4                        00            .byte	0
12154 2BA5                        00            .byte	0
12155 2BA6                        7C            .byte	$7C
12156 2BA7                        C6            .byte	$C6
12157 2BA8                        FE            .byte	$FE
12158 2BA9                        C0            .byte	$C0
12159 2BAA                        C0            .byte	$C0
12160 2BAB                        C6            .byte	$C6
12161 2BAC                        7C            .byte	$7C
12162 2BAD                        00            .byte	0
12163 2BAE                        00            .byte	0
12164 2BAF                        00            .byte	0
12165 2BB0                        00            .byte	0
12166                                           ! 1337  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12167 2BB1                        00            .byte	0
12168 2BB2                        00            .byte	0
12169 2BB3                        38            .byte	$38
12170 2BB4                        6C            .byte	$6C
12171 2BB5                        64            .byte	$64
12172 2BB6                        60            .byte	$60
12173 2BB7                        F0            .byte	$F0
12174 2BB8                        60            .byte	$60
12175 2BB9                        60            .byte	$60
12176 2BBA                        60            .byte	$60
12177 2BBB                        60            .byte	$60
12178 2BBC                        F0            .byte	$F0
12179 2BBD                        00            .byte	0
12180 2BBE                        00            .byte	0
12181 2BBF                        00            .byte	0
12182 2BC0                        00            .byte	0
12183                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12184 2BC1                        00            .byte	0
12185 2BC2                        00            .byte	0
12186 2BC3                        00            .byte	0
12187 2BC4                        00            .byte	0
12188 2BC5                        00            .byte	0
12189 2BC6                        76            .byte	$76
12190 2BC7                        CC            .byte	$CC
12191 2BC8                        CC            .byte	$CC
12192 2BC9                        CC            .byte	$CC
12193 2BCA                        CC            .byte	$CC
12194 2BCB                        CC            .byte	$CC
12195 2BCC                        7C            .byte	$7C
12196 2BCD                        0C            .byte	$C
12197 2BCE                        CC            .byte	$CC
12198 2BCF                        78            .byte	$78
12199 2BD0                        00            .byte	0
12200                                           ! 1339  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12201 2BD1                        00            .byte	0
12202 2BD2                        00            .byte	0
12203 2BD3                        E0            .byte	$E0
12204 2BD4                        60            .byte	$60
12205 2BD5                        60            .byte	$60
12206 2BD6                        6C            .byte	$6C
12207 2BD7                        76            .byte	$76
12208 2BD8                        66            .byte	$66
12209 2BD9                        66            .byte	$66
12210 2BDA                        66            .byte	$66
12211 2BDB                        66            .byte	$66
12212 2BDC                        E6            .byte	$E6
12213 2BDD                        00            .byte	0
12214 2BDE                        00            .byte	0
12215 2BDF                        00            .byte	0
12216 2BE0                        00            .byte	0
12217                                           ! 1340  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12218 2BE1                        00            .byte	0
12219 2BE2                        00            .byte	0
12220 2BE3                        18            .byte	$18
12221 2BE4                        18            .byte	$18
12222 2BE5                        00            .byte	0
12223 2BE6                        38            .byte	$38
12224 2BE7                        18            .byte	$18
12225 2BE8                        18            .byte	$18
12226 2BE9                        18            .byte	$18
12227 2BEA                        18            .byte	$18
12228 2BEB                        18            .byte	$18
12229 2BEC                        3C            .byte	$3C
12230 2BED                        00            .byte	0
12231 2BEE                        00            .byte	0
12232 2BEF                        00            .byte	0
12233 2BF0                        00            .byte	0
12234                                           ! 1341  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12235 2BF1                        00            .byte	0
12236 2BF2                        00            .byte	0
12237 2BF3                        06            .byte	6
12238 2BF4                        06            .byte	6
12239 2BF5                        00            .byte	0
12240 2BF6                        0E            .byte	$E
12241 2BF7                        06            .byte	6
12242 2BF8                        06            .byte	6
12243 2BF9                        06            .byte	6
12244 2BFA                        06            .byte	6
12245 2BFB                        06            .byte	6
12246 2BFC                        06            .byte	6
12247 2BFD                        66            .byte	$66
12248 2BFE                        66            .byte	$66
12249 2BFF                        3C            .byte	$3C
12250 2C00                        00            .byte	0
12251                                           ! 1342  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12252 2C01                        00            .byte	0
12253 2C02                        00            .byte	0
12254 2C03                        E0            .byte	$E0
12255 2C04                        60            .byte	$60
12256 2C05                        60            .byte	$60
12257 2C06                        66            .byte	$66
12258 2C07                        6C            .byte	$6C
12259 2C08                        78            .byte	$78
12260 2C09                        78            .byte	$78
12261 2C0A                        6C            .byte	$6C
12262 2C0B                        66            .byte	$66
12263 2C0C                        E6            .byte	$E6
12264 2C0D                        00            .byte	0
12265 2C0E                        00            .byte	0
12266 2C0F                        00            .byte	0
12267 2C10                        00            .byte	0
12268                                           ! 1343  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12269 2C11                        00            .byte	0
12270 2C12                        00            .byte	0
12271 2C13                        38            .byte	$38
12272 2C14                        18            .byte	$18
12273 2C15                        18            .byte	$18
12274 2C16                        18            .byte	$18
12275 2C17                        18            .byte	$18
12276 2C18                        18            .byte	$18
12277 2C19                        18            .byte	$18
12278 2C1A                        18            .byte	$18
12279 2C1B                        18            .byte	$18
12280 2C1C                        3C            .byte	$3C
12281 2C1D                        00            .byte	0
12282 2C1E                        00            .byte	0
12283 2C1F                        00            .byte	0
12284 2C20                        00            .byte	0
12285                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12286 2C21                        00            .byte	0
12287 2C22                        00            .byte	0
12288 2C23                        00            .byte	0
12289 2C24                        00            .byte	0
12290 2C25                        00            .byte	0
12291 2C26                        E6            .byte	$E6
12292 2C27                        FF            .byte	$FF
12293 2C28                        DB            .byte	$DB
12294 2C29                        DB            .byte	$DB
12295 2C2A                        DB            .byte	$DB
12296 2C2B                        DB            .byte	$DB
12297 2C2C                        DB            .byte	$DB
12298 2C2D                        00            .byte	0
12299 2C2E                        00            .byte	0
12300 2C2F                        00            .byte	0
12301 2C30                        00            .byte	0
12302                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12303 2C31                        00            .byte	0
12304 2C32                        00            .byte	0
12305 2C33                        00            .byte	0
12306 2C34                        00            .byte	0
12307 2C35                        00            .byte	0
12308 2C36                        DC            .byte	$DC
12309 2C37                        66            .byte	$66
12310 2C38                        66            .byte	$66
12311 2C39                        66            .byte	$66
12312 2C3A                        66            .byte	$66
12313 2C3B                        66            .byte	$66
12314 2C3C                        66            .byte	$66
12315 2C3D                        00            .byte	0
12316 2C3E                        00            .byte	0
12317 2C3F                        00            .byte	0
12318 2C40                        00            .byte	0
12319                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12320 2C41                        00            .byte	0
12321 2C42                        00            .byte	0
12322 2C43                        00            .byte	0
12323 2C44                        00            .byte	0
12324 2C45                        00            .byte	0
12325 2C46                        7C            .byte	$7C
12326 2C47                        C6            .byte	$C6
12327 2C48                        C6            .byte	$C6
12328 2C49                        C6            .byte	$C6
12329 2C4A                        C6            .byte	$C6
12330 2C4B                        C6            .byte	$C6
12331 2C4C                        7C            .byte	$7C
12332 2C4D                        00            .byte	0
12333 2C4E                        00            .byte	0
12334 2C4F                        00            .byte	0
12335 2C50                        00            .byte	0
12336                                           ! 1347  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12337 2C51                        00            .byte	0
12338 2C52                        00            .byte	0
12339 2C53                        00            .byte	0
12340 2C54                        00            .byte	0
12341 2C55                        00            .byte	0
12342 2C56                        DC            .byte	$DC
12343 2C57                        66            .byte	$66
12344 2C58                        66            .byte	$66
12345 2C59                        66            .byte	$66
12346 2C5A                        66            .byte	$66
12347 2C5B                        66            .byte	$66
12348 2C5C                        7C            .byte	$7C
12349 2C5D                        60            .byte	$60
12350 2C5E                        60            .byte	$60
12351 2C5F                        F0            .byte	$F0
12352 2C60                        00            .byte	0
12353                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12354 2C61                        00            .byte	0
12355 2C62                        00            .byte	0
12356 2C63                        00            .byte	0
12357 2C64                        00            .byte	0
12358 2C65                        00            .byte	0
12359 2C66                        76            .byte	$76
12360 2C67                        CC            .byte	$CC
12361 2C68                        CC            .byte	$CC
12362 2C69                        CC            .byte	$CC
12363 2C6A                        CC            .byte	$CC
12364 2C6B                        CC            .byte	$CC
12365 2C6C                        7C            .byte	$7C
12366 2C6D                        0C            .byte	$C
12367 2C6E                        0C            .byte	$C
12368 2C6F                        1E            .byte	$1E
12369 2C70                        00            .byte	0
12370                                           ! 1349  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 
12371 2C71                        00            .byte	0
12372 2C72                        00            .byte	0
12373 2C73                        00            .byte	0
12374 2C74                        00            .byte	0
12375 2C75                        00            .byte	0
12376 2C76                        DC            .byte	$DC
12377 2C77                        76            .byte	$76
12378 2C78                        66            .byte	$66
12379 2C79                        60            .byte	$60
12380 2C7A                        60            .byte	$60
12381 2C7B                        60            .byte	$60
12382 2C7C                        F0            .byte	$F0
12383 2C7D                        00            .byte	0
12384 2C7E                        00            .byte	0
12385                                           ! 1349 0x00, 0x00,
12386 2C7F                        00            .byte	0
12387 2C80                        00            .byte	0
12388                                           ! 1350  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12389 2C81                        00            .byte	0
12390 2C82                        00            .byte	0
12391 2C83                        00            .byte	0
12392 2C84                        00            .byte	0
12393 2C85                        00            .byte	0
12394 2C86                        7C            .byte	$7C
12395 2C87                        C6            .byte	$C6
12396 2C88                        60            .byte	$60
12397 2C89                        38            .byte	$38
12398 2C8A                        0C            .byte	$C
12399 2C8B                        C6            .byte	$C6
12400 2C8C                        7C            .byte	$7C
12401 2C8D                        00            .byte	0
12402 2C8E                        00            .byte	0
12403 2C8F                        00            .byte	0
12404 2C90                        00            .byte	0
12405                                           ! 1351  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12406 2C91                        00            .byte	0
12407 2C92                        00            .byte	0
12408 2C93                        10            .byte	$10
12409 2C94                        30            .byte	$30
12410 2C95                        30            .byte	$30
12411 2C96                        FC            .byte	$FC
12412 2C97                        30            .byte	$30
12413 2C98                        30            .byte	$30
12414 2C99                        30            .byte	$30
12415 2C9A                        30            .byte	$30
12416 2C9B                        36            .byte	$36
12417 2C9C                        1C            .byte	$1C
12418 2C9D                        00            .byte	0
12419 2C9E                        00            .byte	0
12420 2C9F                        00            .byte	0
12421 2CA0                        00            .byte	0
12422                                           ! 1352  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12423 2CA1                        00            .byte	0
12424 2CA2                        00            .byte	0
12425 2CA3                        00            .byte	0
12426 2CA4                        00            .byte	0
12427 2CA5                        00            .byte	0
12428 2CA6                        CC            .byte	$CC
12429 2CA7                        CC            .byte	$CC
12430 2CA8                        CC            .byte	$CC
12431 2CA9                        CC            .byte	$CC
12432 2CAA                        CC            .byte	$CC
12433 2CAB                        CC            .byte	$CC
12434 2CAC                        76            .byte	$76
12435 2CAD                        00            .byte	0
12436 2CAE                        00            .byte	0
12437 2CAF                        00            .byte	0
12438 2CB0                        00            .byte	0
12439                                           ! 1353  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12440 2CB1                        00            .byte	0
12441 2CB2                        00            .byte	0
12442 2CB3                        00            .byte	0
12443 2CB4                        00            .byte	0
12444 2CB5                        00            .byte	0
12445 2CB6                        C3            .byte	$C3
12446 2CB7                        C3            .byte	$C3
12447 2CB8                        C3            .byte	$C3
12448 2CB9                        C3            .byte	$C3
12449 2CBA                        66            .byte	$66
12450 2CBB                        3C            .byte	$3C
12451 2CBC                        18            .byte	$18
12452 2CBD                        00            .byte	0
12453 2CBE                        00            .byte	0
12454 2CBF                        00            .byte	0
12455 2CC0                        00            .byte	0
12456                                           ! 1354  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12457 2CC1                        00            .byte	0
12458 2CC2                        00            .byte	0
12459 2CC3                        00            .byte	0
12460 2CC4                        00            .byte	0
12461 2CC5                        00            .byte	0
12462 2CC6                        C3            .byte	$C3
12463 2CC7                        C3            .byte	$C3
12464 2CC8                        C3            .byte	$C3
12465 2CC9                        DB            .byte	$DB
12466 2CCA                        DB            .byte	$DB
12467 2CCB                        FF            .byte	$FF
12468 2CCC                        66            .byte	$66
12469 2CCD                        00            .byte	0
12470 2CCE                        00            .byte	0
12471 2CCF                        00            .byte	0
12472 2CD0                        00            .byte	0
12473                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12474 2CD1                        00            .byte	0
12475 2CD2                        00            .byte	0
12476 2CD3                        00            .byte	0
12477 2CD4                        00            .byte	0
12478 2CD5                        00            .byte	0
12479 2CD6                        C3            .byte	$C3
12480 2CD7                        66            .byte	$66
12481 2CD8                        3C            .byte	$3C
12482 2CD9                        18            .byte	$18
12483 2CDA                        3C            .byte	$3C
12484 2CDB                        66            .byte	$66
12485 2CDC                        C3            .byte	$C3
12486 2CDD                        00            .byte	0
12487 2CDE                        00            .byte	0
12488 2CDF                        00            .byte	0
12489 2CE0                        00            .byte	0
12490                                           ! 1356  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12491 2CE1                        00            .byte	0
12492 2CE2                        00            .byte	0
12493 2CE3                        00            .byte	0
12494 2CE4                        00            .byte	0
12495 2CE5                        00            .byte	0
12496 2CE6                        C6            .byte	$C6
12497 2CE7                        C6            .byte	$C6
12498 2CE8                        C6            .byte	$C6
12499 2CE9                        C6            .byte	$C6
12500 2CEA                        C6            .byte	$C6
12501 2CEB                        C6            .byte	$C6
12502 2CEC                        7E            .byte	$7E
12503 2CED                        06            .byte	6
12504 2CEE                        0C            .byte	$C
12505 2CEF                        F8            .byte	$F8
12506 2CF0                        00            .byte	0
12507                                           ! 1357  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12508 2CF1                        00            .byte	0
12509 2CF2                        00            .byte	0
12510 2CF3                        00            .byte	0
12511 2CF4                        00            .byte	0
12512 2CF5                        00            .byte	0
12513 2CF6                        FE            .byte	$FE
12514 2CF7                        CC            .byte	$CC
12515 2CF8                        18            .byte	$18
12516 2CF9                        30            .byte	$30
12517 2CFA                        60            .byte	$60
12518 2CFB                        C6            .byte	$C6
12519 2CFC                        FE            .byte	$FE
12520 2CFD                        00            .byte	0
12521 2CFE                        00            .byte	0
12522 2CFF                        00            .byte	0
12523 2D00                        00            .byte	0
12524                                           ! 1358  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12525 2D01                        00            .byte	0
12526 2D02                        00            .byte	0
12527 2D03                        0E            .byte	$E
12528 2D04                        18            .byte	$18
12529 2D05                        18            .byte	$18
12530 2D06                        18            .byte	$18
12531 2D07                        70            .byte	$70
12532 2D08                        18            .byte	$18
12533 2D09                        18            .byte	$18
12534 2D0A                        18            .byte	$18
12535 2D0B                        18            .byte	$18
12536 2D0C                        0E            .byte	$E
12537 2D0D                        00            .byte	0
12538 2D0E                        00            .byte	0
12539 2D0F                        00            .byte	0
12540 2D10                        00            .byte	0
12541                                           ! 1359  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12542 2D11                        00            .byte	0
12543 2D12                        00            .byte	0
12544 2D13                        18            .byte	$18
12545 2D14                        18            .byte	$18
12546 2D15                        18            .byte	$18
12547 2D16                        18            .byte	$18
12548 2D17                        00            .byte	0
12549 2D18                        18            .byte	$18
12550 2D19                        18            .byte	$18
12551 2D1A                        18            .byte	$18
12552 2D1B                        18            .byte	$18
12553 2D1C                        18            .byte	$18
12554 2D1D                        00            .byte	0
12555 2D1E                        00            .byte	0
12556 2D1F                        00            .byte	0
12557 2D20                        00            .byte	0
12558                                           ! 1360  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12559 2D21                        00            .byte	0
12560 2D22                        00            .byte	0
12561 2D23                        70            .byte	$70
12562 2D24                        18            .byte	$18
12563 2D25                        18            .byte	$18
12564 2D26                        18            .byte	$18
12565 2D27                        0E            .byte	$E
12566 2D28                        18            .byte	$18
12567 2D29                        18            .byte	$18
12568 2D2A                        18            .byte	$18
12569 2D2B                        18            .byte	$18
12570 2D2C                        70            .byte	$70
12571 2D2D                        00            .byte	0
12572 2D2E                        00            .byte	0
12573 2D2F                        00            .byte	0
12574 2D30                        00            .byte	0
12575                                           ! 1361  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12576 2D31                        00            .byte	0
12577 2D32                        00            .byte	0
12578 2D33                        76            .byte	$76
12579 2D34                        DC            .byte	$DC
12580 2D35                        00            .byte	0
12581 2D36                        00            .byte	0
12582 2D37                        00            .byte	0
12583 2D38                        00            .byte	0
12584 2D39                        00            .byte	0
12585 2D3A                        00            .byte	0
12586 2D3B                        00            .byte	0
12587 2D3C                        00            .byte	0
12588 2D3D                        00            .byte	0
12589 2D3E                        00            .byte	0
12590 2D3F                        00            .byte	0
12591 2D40                        00            .byte	0
12592                                           ! 1362  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12593 2D41                        00            .byte	0
12594 2D42                        00            .byte	0
12595 2D43                        00            .byte	0
12596 2D44                        00            .byte	0
12597 2D45                        10            .byte	$10
12598 2D46                        38            .byte	$38
12599 2D47                        6C            .byte	$6C
12600 2D48                        C6            .byte	$C6
12601 2D49                        C6            .byte	$C6
12602 2D4A                        C6            .byte	$C6
12603 2D4B                        FE            .byte	$FE
12604 2D4C                        00            .byte	0
12605 2D4D                        00            .byte	0
12606 2D4E                        00            .byte	0
12607 2D4F                        00            .byte	0
12608 2D50                        00            .byte	0
12609                                           ! 1363  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12610 2D51                        00            .byte	0
12611 2D52                        00            .byte	0
12612 2D53                        3C            .byte	$3C
12613 2D54                        66            .byte	$66
12614 2D55                        C2            .byte	$C2
12615 2D56                        C0            .byte	$C0
12616 2D57                        C0            .byte	$C0
12617 2D58                        C0            .byte	$C0
12618 2D59                        C2            .byte	$C2
12619 2D5A                        66            .byte	$66
12620 2D5B                        3C            .byte	$3C
12621 2D5C                        0C            .byte	$C
12622 2D5D                        06            .byte	6
12623 2D5E                        7C            .byte	$7C
12624 2D5F                        00            .byte	0
12625 2D60                        00            .byte	0
12626                                           ! 1364  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12627 2D61                        00            .byte	0
12628 2D62                        00            .byte	0
12629 2D63                        CC            .byte	$CC
12630 2D64                        00            .byte	0
12631 2D65                        00            .byte	0
12632 2D66                        CC            .byte	$CC
12633 2D67                        CC            .byte	$CC
12634 2D68                        CC            .byte	$CC
12635 2D69                        CC            .byte	$CC
12636 2D6A                        CC            .byte	$CC
12637 2D6B                        CC            .byte	$CC
12638 2D6C                        76            .byte	$76
12639 2D6D                        00            .byte	0
12640 2D6E                        00            .byte	0
12641 2D6F                        00            .byte	0
12642 2D70                        00            .byte	0
12643                                           ! 1365  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12644 2D71                        00            .byte	0
12645 2D72                        0C            .byte	$C
12646 2D73                        18            .byte	$18
12647 2D74                        30            .byte	$30
12648 2D75                        00            .byte	0
12649 2D76                        7C            .byte	$7C
12650 2D77                        C6            .byte	$C6
12651 2D78                        FE            .byte	$FE
12652 2D79                        C0            .byte	$C0
12653 2D7A                        C0            .byte	$C0
12654 2D7B                        C6            .byte	$C6
12655 2D7C                        7C            .byte	$7C
12656 2D7D                        00            .byte	0
12657 2D7E                        00            .byte	0
12658 2D7F                        00            .byte	0
12659 2D80                        00            .byte	0
12660                                           ! 1366  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12661 2D81                        00            .byte	0
12662 2D82                        10            .byte	$10
12663 2D83                        38            .byte	$38
12664 2D84                        6C            .byte	$6C
12665 2D85                        00            .byte	0
12666 2D86                        78            .byte	$78
12667 2D87                        0C            .byte	$C
12668 2D88                        7C            .byte	$7C
12669 2D89                        CC            .byte	$CC
12670 2D8A                        CC            .byte	$CC
12671 2D8B                        CC            .byte	$CC
12672 2D8C                        76            .byte	$76
12673 2D8D                        00            .byte	0
12674 2D8E                        00            .byte	0
12675 2D8F                        00            .byte	0
12676 2D90                        00            .byte	0
12677                                           ! 1367  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12678 2D91                        00            .byte	0
12679 2D92                        00            .byte	0
12680 2D93                        CC            .byte	$CC
12681 2D94                        00            .byte	0
12682 2D95                        00            .byte	0
12683 2D96                        78            .byte	$78
12684 2D97                        0C            .byte	$C
12685 2D98                        7C            .byte	$7C
12686 2D99                        CC            .byte	$CC
12687 2D9A                        CC            .byte	$CC
12688 2D9B                        CC            .byte	$CC
12689 2D9C                        76            .byte	$76
12690 2D9D                        00            .byte	0
12691 2D9E                        00            .byte	0
12692 2D9F                        00            .byte	0
12693 2DA0                        00            .byte	0
12694                                           ! 1368  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12695 2DA1                        00            .byte	0
12696 2DA2                        60            .byte	$60
12697 2DA3                        30            .byte	$30
12698 2DA4                        18            .byte	$18
12699 2DA5                        00            .byte	0
12700 2DA6                        78            .byte	$78
12701 2DA7                        0C            .byte	$C
12702 2DA8                        7C            .byte	$7C
12703 2DA9                        CC            .byte	$CC
12704 2DAA                        CC            .byte	$CC
12705 2DAB                        CC            .byte	$CC
12706 2DAC                        76            .byte	$76
12707 2DAD                        00            .byte	0
12708 2DAE                        00            .byte	0
12709 2DAF                        00            .byte	0
12710 2DB0                        00            .byte	0
12711                                           ! 1369  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12712 2DB1                        00            .byte	0
12713 2DB2                        38            .byte	$38
12714 2DB3                        6C            .byte	$6C
12715 2DB4                        38            .byte	$38
12716 2DB5                        00            .byte	0
12717 2DB6                        78            .byte	$78
12718 2DB7                        0C            .byte	$C
12719 2DB8                        7C            .byte	$7C
12720 2DB9                        CC            .byte	$CC
12721 2DBA                        CC            .byte	$CC
12722 2DBB                        CC            .byte	$CC
12723 2DBC                        76            .byte	$76
12724 2DBD                        00            .byte	0
12725 2DBE                        00            .byte	0
12726 2DBF                        00            .byte	0
12727 2DC0                        00            .byte	0
12728                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12729 2DC1                        00            .byte	0
12730 2DC2                        00            .byte	0
12731 2DC3                        00            .byte	0
12732 2DC4                        00            .byte	0
12733 2DC5                        3C            .byte	$3C
12734 2DC6                        66            .byte	$66
12735 2DC7                        60            .byte	$60
12736 2DC8                        60            .byte	$60
12737 2DC9                        66            .byte	$66
12738 2DCA                        3C            .byte	$3C
12739 2DCB                        0C            .byte	$C
12740 2DCC                        06            .byte	6
12741 2DCD                        3C            .byte	$3C
12742 2DCE                        00            .byte	0
12743 2DCF                        00            .byte	0
12744                                           ! 1370 
12745 2DD0                        00            .byte	0
12746                                           ! 1371  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12747 2DD1                        00            .byte	0
12748 2DD2                        10            .byte	$10
12749 2DD3                        38            .byte	$38
12750 2DD4                        6C            .byte	$6C
12751 2DD5                        00            .byte	0
12752 2DD6                        7C            .byte	$7C
12753 2DD7                        C6            .byte	$C6
12754 2DD8                        FE            .byte	$FE
12755 2DD9                        C0            .byte	$C0
12756 2DDA                        C0            .byte	$C0
12757 2DDB                        C6            .byte	$C6
12758 2DDC                        7C            .byte	$7C
12759 2DDD                        00            .byte	0
12760 2DDE                        00            .byte	0
12761 2DDF                        00            .byte	0
12762 2DE0                        00            .byte	0
12763                                           ! 1372  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12764 2DE1                        00            .byte	0
12765 2DE2                        00            .byte	0
12766 2DE3                        C6            .byte	$C6
12767 2DE4                        00            .byte	0
12768 2DE5                        00            .byte	0
12769 2DE6                        7C            .byte	$7C
12770 2DE7                        C6            .byte	$C6
12771 2DE8                        FE            .byte	$FE
12772 2DE9                        C0            .byte	$C0
12773 2DEA                        C0            .byte	$C0
12774 2DEB                        C6            .byte	$C6
12775 2DEC                        7C            .byte	$7C
12776 2DED                        00            .byte	0
12777 2DEE                        00            .byte	0
12778 2DEF                        00            .byte	0
12779 2DF0                        00            .byte	0
12780                                           ! 1373  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12781 2DF1                        00            .byte	0
12782 2DF2                        60            .byte	$60
12783 2DF3                        30            .byte	$30
12784 2DF4                        18            .byte	$18
12785 2DF5                        00            .byte	0
12786 2DF6                        7C            .byte	$7C
12787 2DF7                        C6            .byte	$C6
12788 2DF8                        FE            .byte	$FE
12789 2DF9                        C0            .byte	$C0
12790 2DFA                        C0            .byte	$C0
12791 2DFB                        C6            .byte	$C6
12792 2DFC                        7C            .byte	$7C
12793 2DFD                        00            .byte	0
12794 2DFE                        00            .byte	0
12795 2DFF                        00            .byte	0
12796 2E00                        00            .byte	0
12797                                           ! 1374  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12798 2E01                        00            .byte	0
12799 2E02                        00            .byte	0
12800 2E03                        66            .byte	$66
12801 2E04                        00            .byte	0
12802 2E05                        00            .byte	0
12803 2E06                        38            .byte	$38
12804 2E07                        18            .byte	$18
12805 2E08                        18            .byte	$18
12806 2E09                        18            .byte	$18
12807 2E0A                        18            .byte	$18
12808 2E0B                        18            .byte	$18
12809 2E0C                        3C            .byte	$3C
12810 2E0D                        00            .byte	0
12811 2E0E                        00            .byte	0
12812 2E0F                        00            .byte	0
12813 2E10                        00            .byte	0
12814                                           ! 1375  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12815 2E11                        00            .byte	0
12816 2E12                        18            .byte	$18
12817 2E13                        3C            .byte	$3C
12818 2E14                        66            .byte	$66
12819 2E15                        00            .byte	0
12820 2E16                        38            .byte	$38
12821 2E17                        18            .byte	$18
12822 2E18                        18            .byte	$18
12823 2E19                        18            .byte	$18
12824 2E1A                        18            .byte	$18
12825 2E1B                        18            .byte	$18
12826 2E1C                        3C            .byte	$3C
12827 2E1D                        00            .byte	0
12828 2E1E                        00            .byte	0
12829 2E1F                        00            .byte	0
12830 2E20                        00            .byte	0
12831                                           ! 1376  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12832 2E21                        00            .byte	0
12833 2E22                        60            .byte	$60
12834 2E23                        30            .byte	$30
12835 2E24                        18            .byte	$18
12836 2E25                        00            .byte	0
12837 2E26                        38            .byte	$38
12838 2E27                        18            .byte	$18
12839 2E28                        18            .byte	$18
12840 2E29                        18            .byte	$18
12841 2E2A                        18            .byte	$18
12842 2E2B                        18            .byte	$18
12843 2E2C                        3C            .byte	$3C
12844 2E2D                        00            .byte	0
12845 2E2E                        00            .byte	0
12846 2E2F                        00            .byte	0
12847 2E30                        00            .byte	0
12848                                           ! 1377  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12849 2E31                        00            .byte	0
12850 2E32                        C6            .byte	$C6
12851 2E33                        00            .byte	0
12852 2E34                        10            .byte	$10
12853 2E35                        38            .byte	$38
12854 2E36                        6C            .byte	$6C
12855 2E37                        C6            .byte	$C6
12856 2E38                        C6            .byte	$C6
12857 2E39                        FE            .byte	$FE
12858 2E3A                        C6            .byte	$C6
12859 2E3B                        C6            .byte	$C6
12860 2E3C                        C6            .byte	$C6
12861 2E3D                        00            .byte	0
12862 2E3E                        00            .byte	0
12863 2E3F                        00            .byte	0
12864 2E40                        00            .byte	0
12865                                           ! 1378  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12866 2E41                        38            .byte	$38
12867 2E42                        6C            .byte	$6C
12868 2E43                        38            .byte	$38
12869 2E44                        00            .byte	0
12870 2E45                        38            .byte	$38
12871 2E46                        6C            .byte	$6C
12872 2E47                        C6            .byte	$C6
12873 2E48                        C6            .byte	$C6
12874 2E49                        FE            .byte	$FE
12875 2E4A                        C6            .byte	$C6
12876 2E4B                        C6            .byte	$C6
12877 2E4C                        C6            .byte	$C6
12878 2E4D                        00            .byte	0
12879 2E4E                        00            .byte	0
12880 2E4F                        00            .byte	0
12881 2E50                        00            .byte	0
12882                                           ! 1379  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12883 2E51                        18            .byte	$18
12884 2E52                        30            .byte	$30
12885 2E53                        60            .byte	$60
12886 2E54                        00            .byte	0
12887 2E55                        FE            .byte	$FE
12888 2E56                        66            .byte	$66
12889 2E57                        60            .byte	$60
12890 2E58                        7C            .byte	$7C
12891 2E59                        60            .byte	$60
12892 2E5A                        60            .byte	$60
12893 2E5B                        66            .byte	$66
12894 2E5C                        FE            .byte	$FE
12895 2E5D                        00            .byte	0
12896 2E5E                        00            .byte	0
12897 2E5F                        00            .byte	0
12898 2E60                        00            .byte	0
12899                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12900 2E61                        00            .byte	0
12901 2E62                        00            .byte	0
12902 2E63                        00            .byte	0
12903 2E64                        00            .byte	0
12904 2E65                        00            .byte	0
12905 2E66                        6E            .byte	$6E
12906 2E67                        3B            .byte	$3B
12907 2E68                        1B            .byte	$1B
12908 2E69                        7E            .byte	$7E
12909 2E6A                        D8            .byte	$D8
12910 2E6B                        DC            .byte	$DC
12911 2E6C                        77            .byte	$77
12912 2E6D                        00            .byte	0
12913 2E6E                        00            .byte	0
12914 2E6F                        00            .byte	0
12915 2E70                        00            .byte	0
12916                                           ! 1381  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12917 2E71                        00            .byte	0
12918 2E72                        00            .byte	0
12919 2E73                        3E            .byte	$3E
12920 2E74                        6C            .byte	$6C
12921 2E75                        CC            .byte	$CC
12922 2E76                        CC            .byte	$CC
12923 2E77                        FE            .byte	$FE
12924 2E78                        CC            .byte	$CC
12925 2E79                        CC            .byte	$CC
12926 2E7A                        CC            .byte	$CC
12927 2E7B                        CC            .byte	$CC
12928 2E7C                        CE            .byte	$CE
12929 2E7D                        00            .byte	0
12930 2E7E                        00            .byte	0
12931 2E7F                        00            .byte	0
12932 2E80                        00            .byte	0
12933                                           ! 1382  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12934 2E81                        00            .byte	0
12935 2E82                        10            .byte	$10
12936 2E83                        38            .byte	$38
12937 2E84                        6C            .byte	$6C
12938 2E85                        00            .byte	0
12939 2E86                        7C            .byte	$7C
12940 2E87                        C6            .byte	$C6
12941 2E88                        C6            .byte	$C6
12942 2E89                        C6            .byte	$C6
12943 2E8A                        C6            .byte	$C6
12944 2E8B                        C6            .byte	$C6
12945 2E8C                        7C            .byte	$7C
12946 2E8D                        00            .byte	0
12947 2E8E                        00            .byte	0
12948 2E8F                        00            .byte	0
12949 2E90                        00            .byte	0
12950                                           ! 1383  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12951 2E91                        00            .byte	0
12952 2E92                        00            .byte	0
12953 2E93                        C6            .byte	$C6
12954 2E94                        00            .byte	0
12955 2E95                        00            .byte	0
12956 2E96                        7C            .byte	$7C
12957 2E97                        C6            .byte	$C6
12958 2E98                        C6            .byte	$C6
12959 2E99                        C6            .byte	$C6
12960 2E9A                        C6            .byte	$C6
12961 2E9B                        C6            .byte	$C6
12962 2E9C                        7C            .byte	$7C
12963 2E9D                        00            .byte	0
12964 2E9E                        00            .byte	0
12965 2E9F                        00            .byte	0
12966 2EA0                        00            .byte	0
12967                                           ! 1384  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12968 2EA1                        00            .byte	0
12969 2EA2                        60            .byte	$60
12970 2EA3                        30            .byte	$30
12971 2EA4                        18            .byte	$18
12972 2EA5                        00            .byte	0
12973 2EA6                        7C            .byte	$7C
12974 2EA7                        C6            .byte	$C6
12975 2EA8                        C6            .byte	$C6
12976 2EA9                        C6            .byte	$C6
12977 2EAA                        C6            .byte	$C6
12978 2EAB                        C6            .byte	$C6
12979 2EAC                        7C            .byte	$7C
12980 2EAD                        00            .byte	0
12981 2EAE                        00            .byte	0
12982 2EAF                        00            .byte	0
12983 2EB0                        00            .byte	0
12984                                           ! 1385  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12985 2EB1                        00            .byte	0
12986 2EB2                        30            .byte	$30
12987 2EB3                        78            .byte	$78
12988 2EB4                        CC            .byte	$CC
12989 2EB5                        00            .byte	0
12990 2EB6                        CC            .byte	$CC
12991 2EB7                        CC            .byte	$CC
12992 2EB8                        CC            .byte	$CC
12993 2EB9                        CC            .byte	$CC
12994 2EBA                        CC            .byte	$CC
12995 2EBB                        CC            .byte	$CC
12996 2EBC                        76            .byte	$76
12997 2EBD                        00            .byte	0
12998 2EBE                        00            .byte	0
12999 2EBF                        00            .byte	0
13000 2EC0                        00            .byte	0
13001                                           ! 1386  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13002 2EC1                        00            .byte	0
13003 2EC2                        60            .byte	$60
13004 2EC3                        30            .byte	$30
13005 2EC4                        18            .byte	$18
13006 2EC5                        00            .byte	0
13007 2EC6                        CC            .byte	$CC
13008 2EC7                        CC            .byte	$CC
13009 2EC8                        CC            .byte	$CC
13010 2EC9                        CC            .byte	$CC
13011 2ECA                        CC            .byte	$CC
13012 2ECB                        CC            .byte	$CC
13013 2ECC                        76            .byte	$76
13014 2ECD                        00            .byte	0
13015 2ECE                        00            .byte	0
13016 2ECF                        00            .byte	0
13017 2ED0                        00            .byte	0
13018                                           ! 1387  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13019 2ED1                        00            .byte	0
13020 2ED2                        00            .byte	0
13021 2ED3                        C6            .byte	$C6
13022 2ED4                        00            .byte	0
13023 2ED5                        00            .byte	0
13024 2ED6                        C6            .byte	$C6
13025 2ED7                        C6            .byte	$C6
13026 2ED8                        C6            .byte	$C6
13027 2ED9                        C6            .byte	$C6
13028 2EDA                        C6            .byte	$C6
13029 2EDB                        C6            .byte	$C6
13030 2EDC                        7E            .byte	$7E
13031 2EDD                        06            .byte	6
13032 2EDE                        0C            .byte	$C
13033 2EDF                        78            .byte	$78
13034 2EE0                        00            .byte	0
13035                                           ! 1388  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13036 2EE1                        00            .byte	0
13037 2EE2                        C6            .byte	$C6
13038 2EE3                        00            .byte	0
13039 2EE4                        7C            .byte	$7C
13040 2EE5                        C6            .byte	$C6
13041 2EE6                        C6            .byte	$C6
13042 2EE7                        C6            .byte	$C6
13043 2EE8                        C6            .byte	$C6
13044 2EE9                        C6            .byte	$C6
13045 2EEA                        C6            .byte	$C6
13046 2EEB                        C6            .byte	$C6
13047 2EEC                        7C            .byte	$7C
13048 2EED                        00            .byte	0
13049 2EEE                        00            .byte	0
13050 2EEF                        00            .byte	0
13051 2EF0                        00            .byte	0
13052                                           ! 1389  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13053 2EF1                        00            .byte	0
13054 2EF2                        C6            .byte	$C6
13055 2EF3                        00            .byte	0
13056 2EF4                        C6            .byte	$C6
13057 2EF5                        C6            .byte	$C6
13058 2EF6                        C6            .byte	$C6
13059 2EF7                        C6            .byte	$C6
13060 2EF8                        C6            .byte	$C6
13061 2EF9                        C6            .byte	$C6
13062 2EFA                        C6            .byte	$C6
13063 2EFB                        C6            .byte	$C6
13064 2EFC                        7C            .byte	$7C
13065 2EFD                        00            .byte	0
13066 2EFE                        00            .byte	0
13067 2EFF                        00            .byte	0
13068 2F00                        00            .byte	0
13069                                           ! 1390  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13070 2F01                        00            .byte	0
13071 2F02                        18            .byte	$18
13072 2F03                        18            .byte	$18
13073 2F04                        7E            .byte	$7E
13074 2F05                        C3            .byte	$C3
13075 2F06                        C0            .byte	$C0
13076 2F07                        C0            .byte	$C0
13077 2F08                        C0            .byte	$C0
13078 2F09                        C3            .byte	$C3
13079 2F0A                        7E            .byte	$7E
13080 2F0B                        18            .byte	$18
13081 2F0C                        18            .byte	$18
13082 2F0D                        00            .byte	0
13083 2F0E                        00            .byte	0
13084 2F0F                        00            .byte	0
13085 2F10                        00            .byte	0
13086                                           ! 1391  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13087 2F11                        00            .byte	0
13088 2F12                        38            .byte	$38
13089 2F13                        6C            .byte	$6C
13090 2F14                        64            .byte	$64
13091 2F15                        60            .byte	$60
13092 2F16                        F0            .byte	$F0
13093 2F17                        60            .byte	$60
13094 2F18                        60            .byte	$60
13095 2F19                        60            .byte	$60
13096 2F1A                        60            .byte	$60
13097 2F1B                        E6            .byte	$E6
13098 2F1C                        FC            .byte	$FC
13099 2F1D                        00            .byte	0
13100 2F1E                        00            .byte	0
13101 2F1F                        00            .byte	0
13102 2F20                        00            .byte	0
13103                                           ! 1392  0x00, 0x0
13104 2F21                        00            .byte	0
13105                                           ! 1392 0, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13106 2F22                        00            .byte	0
13107 2F23                        C3            .byte	$C3
13108 2F24                        66            .byte	$66
13109 2F25                        3C            .byte	$3C
13110 2F26                        18            .byte	$18
13111 2F27                        FF            .byte	$FF
13112 2F28                        18            .byte	$18
13113 2F29                        FF            .byte	$FF
13114 2F2A                        18            .byte	$18
13115 2F2B                        18            .byte	$18
13116 2F2C                        18            .byte	$18
13117 2F2D                        00            .byte	0
13118 2F2E                        00            .byte	0
13119 2F2F                        00            .byte	0
13120 2F30                        00            .byte	0
13121                                           ! 1393  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13122 2F31                        00            .byte	0
13123 2F32                        FC            .byte	$FC
13124 2F33                        66            .byte	$66
13125 2F34                        66            .byte	$66
13126 2F35                        7C            .byte	$7C
13127 2F36                        62            .byte	$62
13128 2F37                        66            .byte	$66
13129 2F38                        6F            .byte	$6F
13130 2F39                        66            .byte	$66
13131 2F3A                        66            .byte	$66
13132 2F3B                        66            .byte	$66
13133 2F3C                        F3            .byte	$F3
13134 2F3D                        00            .byte	0
13135 2F3E                        00            .byte	0
13136 2F3F                        00            .byte	0
13137 2F40                        00            .byte	0
13138                                           ! 1394  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13139 2F41                        00            .byte	0
13140 2F42                        0E            .byte	$E
13141 2F43                        1B            .byte	$1B
13142 2F44                        18            .byte	$18
13143 2F45                        18            .byte	$18
13144 2F46                        18            .byte	$18
13145 2F47                        7E            .byte	$7E
13146 2F48                        18            .byte	$18
13147 2F49                        18            .byte	$18
13148 2F4A                        18            .byte	$18
13149 2F4B                        18            .byte	$18
13150 2F4C                        18            .byte	$18
13151 2F4D                        D8            .byte	$D8
13152 2F4E                        70            .byte	$70
13153 2F4F                        00            .byte	0
13154 2F50                        00            .byte	0
13155                                           ! 1395  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13156 2F51                        00            .byte	0
13157 2F52                        18            .byte	$18
13158 2F53                        30            .byte	$30
13159 2F54                        60            .byte	$60
13160 2F55                        00            .byte	0
13161 2F56                        78            .byte	$78
13162 2F57                        0C            .byte	$C
13163 2F58                        7C            .byte	$7C
13164 2F59                        CC            .byte	$CC
13165 2F5A                        CC            .byte	$CC
13166 2F5B                        CC            .byte	$CC
13167 2F5C                        76            .byte	$76
13168 2F5D                        00            .byte	0
13169 2F5E                        00            .byte	0
13170 2F5F                        00            .byte	0
13171 2F60                        00            .byte	0
13172                                           ! 1396  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13173 2F61                        00            .byte	0
13174 2F62                        0C            .byte	$C
13175 2F63                        18            .byte	$18
13176 2F64                        30            .byte	$30
13177 2F65                        00            .byte	0
13178 2F66                        38            .byte	$38
13179 2F67                        18            .byte	$18
13180 2F68                        18            .byte	$18
13181 2F69                        18            .byte	$18
13182 2F6A                        18            .byte	$18
13183 2F6B                        18            .byte	$18
13184 2F6C                        3C            .byte	$3C
13185 2F6D                        00            .byte	0
13186 2F6E                        00            .byte	0
13187 2F6F                        00            .byte	0
13188 2F70                        00            .byte	0
13189                                           ! 1397  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13190 2F71                        00            .byte	0
13191 2F72                        18            .byte	$18
13192 2F73                        30            .byte	$30
13193 2F74                        60            .byte	$60
13194 2F75                        00            .byte	0
13195 2F76                        7C            .byte	$7C
13196 2F77                        C6            .byte	$C6
13197 2F78                        C6            .byte	$C6
13198 2F79                        C6            .byte	$C6
13199 2F7A                        C6            .byte	$C6
13200 2F7B                        C6            .byte	$C6
13201 2F7C                        7C            .byte	$7C
13202 2F7D                        00            .byte	0
13203 2F7E                        00            .byte	0
13204 2F7F                        00            .byte	0
13205 2F80                        00            .byte	0
13206                                           ! 1398  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13207 2F81                        00            .byte	0
13208 2F82                        18            .byte	$18
13209 2F83                        30            .byte	$30
13210 2F84                        60            .byte	$60
13211 2F85                        00            .byte	0
13212 2F86                        CC            .byte	$CC
13213 2F87                        CC            .byte	$CC
13214 2F88                        CC            .byte	$CC
13215 2F89                        CC            .byte	$CC
13216 2F8A                        CC            .byte	$CC
13217 2F8B                        CC            .byte	$CC
13218 2F8C                        76            .byte	$76
13219 2F8D                        00            .byte	0
13220 2F8E                        00            .byte	0
13221 2F8F                        00            .byte	0
13222 2F90                        00            .byte	0
13223                                           ! 1399  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13224 2F91                        00            .byte	0
13225 2F92                        00            .byte	0
13226 2F93                        76            .byte	$76
13227 2F94                        DC            .byte	$DC
13228 2F95                        00            .byte	0
13229 2F96                        DC            .byte	$DC
13230 2F97                        66            .byte	$66
13231 2F98                        66            .byte	$66
13232 2F99                        66            .byte	$66
13233 2F9A                        66            .byte	$66
13234 2F9B                        66            .byte	$66
13235 2F9C                        66            .byte	$66
13236 2F9D                        00            .byte	0
13237 2F9E                        00            .byte	0
13238 2F9F                        00            .byte	0
13239 2FA0                        00            .byte	0
13240                                           ! 1400  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13241 2FA1                        76            .byte	$76
13242 2FA2                        DC            .byte	$DC
13243 2FA3                        00            .byte	0
13244 2FA4                        C6            .byte	$C6
13245 2FA5                        E6            .byte	$E6
13246 2FA6                        F6            .byte	$F6
13247 2FA7                        FE            .byte	$FE
13248 2FA8                        DE            .byte	$DE
13249 2FA9                        CE            .byte	$CE
13250 2FAA                        C6            .byte	$C6
13251 2FAB                        C6            .byte	$C6
13252 2FAC                        C6            .byte	$C6
13253 2FAD                        00            .byte	0
13254 2FAE                        00            .byte	0
13255 2FAF                        00            .byte	0
13256 2FB0                        00            .byte	0
13257                                           ! 1401  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13258 2FB1                        00            .byte	0
13259 2FB2                        3C            .byte	$3C
13260 2FB3                        6C            .byte	$6C
13261 2FB4                        6C            .byte	$6C
13262 2FB5                        3E            .byte	$3E
13263 2FB6                        00            .byte	0
13264 2FB7                        7E            .byte	$7E
13265 2FB8                        00            .byte	0
13266 2FB9                        00            .byte	0
13267 2FBA                        00            .byte	0
13268 2FBB                        00            .byte	0
13269 2FBC                        00            .byte	0
13270 2FBD                        00            .byte	0
13271 2FBE                        00            .byte	0
13272 2FBF                        00            .byte	0
13273 2FC0                        00            .byte	0
13274                                           ! 1402  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13275 2FC1                        00            .byte	0
13276 2FC2                        38            .byte	$38
13277 2FC3                        6C            .byte	$6C
13278 2FC4                        6C            .byte	$6C
13279 2FC5                        38            .byte	$38
13280 2FC6                        00            .byte	0
13281 2FC7                        7C            .byte	$7C
13282 2FC8                        00            .byte	0
13283 2FC9                        00            .byte	0
13284 2FCA                        00            .byte	0
13285 2FCB                        00            .byte	0
13286 2FCC                        00            .byte	0
13287 2FCD                        00            .byte	0
13288 2FCE                        00            .byte	0
13289 2FCF                        00            .byte	0
13290 2FD0                        00            .byte	0
13291                                           ! 1403  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13292 2FD1                        00            .byte	0
13293 2FD2                        00            .byte	0
13294 2FD3                        30            .byte	$30
13295 2FD4                        30            .byte	$30
13296 2FD5                        00            .byte	0
13297 2FD6                        30            .byte	$30
13298 2FD7                        30            .byte	$30
13299 2FD8                        60            .byte	$60
13300 2FD9                        C0            .byte	$C0
13301 2FDA                        C6            .byte	$C6
13302 2FDB                        C6            .byte	$C6
13303 2FDC                        7C            .byte	$7C
13304 2FDD                        00            .byte	0
13305 2FDE                        00            .byte	0
13306 2FDF                        00            .byte	0
13307 2FE0                        00            .byte	0
13308                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13309 2FE1                        00            .byte	0
13310 2FE2                        00            .byte	0
13311 2FE3                        00            .byte	0
13312 2FE4                        00            .byte	0
13313 2FE5                        00            .byte	0
13314 2FE6                        00            .byte	0
13315 2FE7                        FE            .byte	$FE
13316 2FE8                        C0            .byte	$C0
13317 2FE9                        C0            .byte	$C0
13318 2FEA                        C0            .byte	$C0
13319 2FEB                        C0            .byte	$C0
13320 2FEC                        00            .byte	0
13321 2FED                        00            .byte	0
13322 2FEE                        00            .byte	0
13323 2FEF                        00            .byte	0
13324 2FF0                        00            .byte	0
13325                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13326 2FF1                        00            .byte	0
13327 2FF2                        00            .byte	0
13328 2FF3                        00            .byte	0
13329 2FF4                        00            .byte	0
13330 2FF5                        00            .byte	0
13331 2FF6                        00            .byte	0
13332 2FF7                        FE            .byte	$FE
13333 2FF8                        06            .byte	6
13334 2FF9                        06            .byte	6
13335 2FFA                        06            .byte	6
13336 2FFB                        06            .byte	6
13337 2FFC                        00            .byte	0
13338 2FFD                        00            .byte	0
13339 2FFE                        00            .byte	0
13340 2FFF                        00            .byte	0
13341 3000                        00            .byte	0
13342                                           ! 1406  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13343 3001                        00            .byte	0
13344 3002                        C0            .byte	$C0
13345 3003                        C0            .byte	$C0
13346 3004                        C2            .byte	$C2
13347 3005                        C6            .byte	$C6
13348 3006                        CC            .byte	$CC
13349 3007                        18            .byte	$18
13350 3008                        30            .byte	$30
13351 3009                        60            .byte	$60
13352 300A                        CE            .byte	$CE
13353 300B                        9B            .byte	$9B
13354 300C                        06            .byte	6
13355 300D                        0C            .byte	$C
13356 300E                        1F            .byte	$1F
13357 300F                        00            .byte	0
13358 3010                        00            .byte	0
13359                                           ! 1407  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13360 3011                        00            .byte	0
13361 3012                        C0            .byte	$C0
13362 3013                        C0            .byte	$C0
13363 3014                        C2            .byte	$C2
13364 3015                        C6            .byte	$C6
13365 3016                        CC            .byte	$CC
13366 3017                        18            .byte	$18
13367 3018                        30            .byte	$30
13368 3019                        66            .byte	$66
13369 301A                        CE            .byte	$CE
13370 301B                        96            .byte	$96
13371 301C                        3E            .byte	$3E
13372 301D                        06            .byte	6
13373 301E                        06            .byte	6
13374 301F                        00            .byte	0
13375 3020                        00            .byte	0
13376                                           ! 1408  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13377 3021                        00            .byte	0
13378 3022                        00            .byte	0
13379 3023                        18            .byte	$18
13380 3024                        18            .byte	$18
13381 3025                        00            .byte	0
13382 3026                        18            .byte	$18
13383 3027                        18            .byte	$18
13384 3028                        18            .byte	$18
13385 3029                        3C            .byte	$3C
13386 302A                        3C            .byte	$3C
13387 302B                        3C            .byte	$3C
13388 302C                        18            .byte	$18
13389 302D                        00            .byte	0
13390 302E                        00            .byte	0
13391 302F                        00            .byte	0
13392 3030                        00            .byte	0
13393                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13394 3031                        00            .byte	0
13395 3032                        00            .byte	0
13396 3033                        00            .byte	0
13397 3034                        00            .byte	0
13398 3035                        00            .byte	0
13399 3036                        36            .byte	$36
13400 3037                        6C            .byte	$6C
13401 3038                        D8            .byte	$D8
13402 3039                        6C            .byte	$6C
13403 303A                        36            .byte	$36
13404 303B                        00            .byte	0
13405 303C                        00            .byte	0
13406 303D                        00            .byte	0
13407 303E                        00            .byte	0
13408 303F                        00            .byte	0
13409 3040                        00            .byte	0
13410                                           ! 1410  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13411 3041                        00            .byte	0
13412 3042                        00            .byte	0
13413 3043                        00            .byte	0
13414 3044                        00            .byte	0
13415 3045                        00            .byte	0
13416 3046                        D8            .byte	$D8
13417 3047                        6C            .byte	$6C
13418 3048                        36            .byte	$36
13419 3049                        6C            .byte	$6C
13420 304A                        D8            .byte	$D8
13421 304B                        00            .byte	0
13422 304C                        00            .byte	0
13423 304D                        00            .byte	0
13424 304E                        00            .byte	0
13425 304F                        00            .byte	0
13426 3050                        00            .byte	0
13427                                           ! 1411  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13428 3051                        11            .byte	$11
13429 3052                        44            .byte	$44
13430 3053                        11            .byte	$11
13431 3054                        44            .byte	$44
13432 3055                        11            .byte	$11
13433 3056                        44            .byte	$44
13434 3057                        11            .byte	$11
13435 3058                        44            .byte	$44
13436 3059                        11            .byte	$11
13437 305A                        44            .byte	$44
13438 305B                        11            .byte	$11
13439 305C                        44            .byte	$44
13440 305D                        11            .byte	$11
13441 305E                        44            .byte	$44
13442 305F                        11            .byte	$11
13443 3060                        44            .byte	$44
13444                                           ! 1412  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13445 3061                        55            .byte	$55
13446 3062                        AA            .byte	$AA
13447 3063                        55            .byte	$55
13448 3064                        AA            .byte	$AA
13449 3065                        55            .byte	$55
13450 3066                        AA            .byte	$AA
13451 3067                        55            .byte	$55
13452 3068                        AA            .byte	$AA
13453 3069                        55            .byte	$55
13454 306A                        AA            .byte	$AA
13455 306B                        55            .byte	$55
13456 306C                        AA            .byte	$AA
13457 306D                        55            .byte	$55
13458 306E                        AA            .byte	$AA
13459 306F                        55            .byte	$55
13460 3070                        AA            .byte	$AA
13461                                           ! 1413  0xdd, 0x77, 0xdd, 0x
13462 3071                        DD            .byte	$DD
13463 3072                        77            .byte	$77
13464 3073                        DD            .byte	$DD
13465                                           ! 1413 77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13466 3074                        77            .byte	$77
13467 3075                        DD            .byte	$DD
13468 3076                        77            .byte	$77
13469 3077                        DD            .byte	$DD
13470 3078                        77            .byte	$77
13471 3079                        DD            .byte	$DD
13472 307A                        77            .byte	$77
13473 307B                        DD            .byte	$DD
13474 307C                        77            .byte	$77
13475 307D                        DD            .byte	$DD
13476 307E                        77            .byte	$77
13477 307F                        DD            .byte	$DD
13478 3080                        77            .byte	$77
13479                                           ! 1414  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13480 3081                        18            .byte	$18
13481 3082                        18            .byte	$18
13482 3083                        18            .byte	$18
13483 3084                        18            .byte	$18
13484 3085                        18            .byte	$18
13485 3086                        18            .byte	$18
13486 3087                        18            .byte	$18
13487 3088                        18            .byte	$18
13488 3089                        18            .byte	$18
13489 308A                        18            .byte	$18
13490 308B                        18            .byte	$18
13491 308C                        18            .byte	$18
13492 308D                        18            .byte	$18
13493 308E                        18            .byte	$18
13494 308F                        18            .byte	$18
13495 3090                        18            .byte	$18
13496                                           ! 1415  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13497 3091                        18            .byte	$18
13498 3092                        18            .byte	$18
13499 3093                        18            .byte	$18
13500 3094                        18            .byte	$18
13501 3095                        18            .byte	$18
13502 3096                        18            .byte	$18
13503 3097                        18            .byte	$18
13504 3098                        F8            .byte	$F8
13505 3099                        18            .byte	$18
13506 309A                        18            .byte	$18
13507 309B                        18            .byte	$18
13508 309C                        18            .byte	$18
13509 309D                        18            .byte	$18
13510 309E                        18            .byte	$18
13511 309F                        18            .byte	$18
13512 30A0                        18            .byte	$18
13513                                           ! 1416  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13514 30A1                        18            .byte	$18
13515 30A2                        18            .byte	$18
13516 30A3                        18            .byte	$18
13517 30A4                        18            .byte	$18
13518 30A5                        18            .byte	$18
13519 30A6                        F8            .byte	$F8
13520 30A7                        18            .byte	$18
13521 30A8                        F8            .byte	$F8
13522 30A9                        18            .byte	$18
13523 30AA                        18            .byte	$18
13524 30AB                        18            .byte	$18
13525 30AC                        18            .byte	$18
13526 30AD                        18            .byte	$18
13527 30AE                        18            .byte	$18
13528 30AF                        18            .byte	$18
13529 30B0                        18            .byte	$18
13530                                           ! 1417  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13531 30B1                        36            .byte	$36
13532 30B2                        36            .byte	$36
13533 30B3                        36            .byte	$36
13534 30B4                        36            .byte	$36
13535 30B5                        36            .byte	$36
13536 30B6                        36            .byte	$36
13537 30B7                        36            .byte	$36
13538 30B8                        F6            .byte	$F6
13539 30B9                        36            .byte	$36
13540 30BA                        36            .byte	$36
13541 30BB                        36            .byte	$36
13542 30BC                        36            .byte	$36
13543 30BD                        36            .byte	$36
13544 30BE                        36            .byte	$36
13545 30BF                        36            .byte	$36
13546 30C0                        36            .byte	$36
13547                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13548 30C1                        00            .byte	0
13549 30C2                        00            .byte	0
13550 30C3                        00            .byte	0
13551 30C4                        00            .byte	0
13552 30C5                        00            .byte	0
13553 30C6                        00            .byte	0
13554 30C7                        00            .byte	0
13555 30C8                        FE            .byte	$FE
13556 30C9                        36            .byte	$36
13557 30CA                        36            .byte	$36
13558 30CB                        36            .byte	$36
13559 30CC                        36            .byte	$36
13560 30CD                        36            .byte	$36
13561 30CE                        36            .byte	$36
13562 30CF                        36            .byte	$36
13563 30D0                        36            .byte	$36
13564                                           ! 1419  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13565 30D1                        00            .byte	0
13566 30D2                        00            .byte	0
13567 30D3                        00            .byte	0
13568 30D4                        00            .byte	0
13569 30D5                        00            .byte	0
13570 30D6                        F8            .byte	$F8
13571 30D7                        18            .byte	$18
13572 30D8                        F8            .byte	$F8
13573 30D9                        18            .byte	$18
13574 30DA                        18            .byte	$18
13575 30DB                        18            .byte	$18
13576 30DC                        18            .byte	$18
13577 30DD                        18            .byte	$18
13578 30DE                        18            .byte	$18
13579 30DF                        18            .byte	$18
13580 30E0                        18            .byte	$18
13581                                           ! 1420  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13582 30E1                        36            .byte	$36
13583 30E2                        36            .byte	$36
13584 30E3                        36            .byte	$36
13585 30E4                        36            .byte	$36
13586 30E5                        36            .byte	$36
13587 30E6                        F6            .byte	$F6
13588 30E7                        06            .byte	6
13589 30E8                        F6            .byte	$F6
13590 30E9                        36            .byte	$36
13591 30EA                        36            .byte	$36
13592 30EB                        36            .byte	$36
13593 30EC                        36            .byte	$36
13594 30ED                        36            .byte	$36
13595 30EE                        36            .byte	$36
13596 30EF                        36            .byte	$36
13597 30F0                        36            .byte	$36
13598                                           ! 1421  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13599 30F1                        36            .byte	$36
13600 30F2                        36            .byte	$36
13601 30F3                        36            .byte	$36
13602 30F4                        36            .byte	$36
13603 30F5                        36            .byte	$36
13604 30F6                        36            .byte	$36
13605 30F7                        36            .byte	$36
13606 30F8                        36            .byte	$36
13607 30F9                        36            .byte	$36
13608 30FA                        36            .byte	$36
13609 30FB                        36            .byte	$36
13610 30FC                        36            .byte	$36
13611 30FD                        36            .byte	$36
13612 30FE                        36            .byte	$36
13613 30FF                        36            .byte	$36
13614 3100                        36            .byte	$36
13615                                           ! 1422  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13616 3101                        00            .byte	0
13617 3102                        00            .byte	0
13618 3103                        00            .byte	0
13619 3104                        00            .byte	0
13620 3105                        00            .byte	0
13621 3106                        FE            .byte	$FE
13622 3107                        06            .byte	6
13623 3108                        F6            .byte	$F6
13624 3109                        36            .byte	$36
13625 310A                        36            .byte	$36
13626 310B                        36            .byte	$36
13627 310C                        36            .byte	$36
13628 310D                        36            .byte	$36
13629 310E                        36            .byte	$36
13630 310F                        36            .byte	$36
13631 3110                        36            .byte	$36
13632                                           ! 1423  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13633 3111                        36            .byte	$36
13634 3112                        36            .byte	$36
13635 3113                        36            .byte	$36
13636 3114                        36            .byte	$36
13637 3115                        36            .byte	$36
13638 3116                        F6            .byte	$F6
13639 3117                        06            .byte	6
13640 3118                        FE            .byte	$FE
13641 3119                        00            .byte	0
13642 311A                        00            .byte	0
13643 311B                        00            .byte	0
13644 311C                        00            .byte	0
13645 311D                        00            .byte	0
13646 311E                        00            .byte	0
13647 311F                        00            .byte	0
13648 3120                        00            .byte	0
13649                                           ! 1424  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13650 3121                        36            .byte	$36
13651 3122                        36            .byte	$36
13652 3123                        36            .byte	$36
13653 3124                        36            .byte	$36
13654 3125                        36            .byte	$36
13655 3126                        36            .byte	$36
13656 3127                        36            .byte	$36
13657 3128                        FE            .byte	$FE
13658 3129                        00            .byte	0
13659 312A                        00            .byte	0
13660 312B                        00            .byte	0
13661 312C                        00            .byte	0
13662 312D                        00            .byte	0
13663 312E                        00            .byte	0
13664 312F                        00            .byte	0
13665 3130                        00            .byte	0
13666                                           ! 1425  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13667 3131                        18            .byte	$18
13668 3132                        18            .byte	$18
13669 3133                        18            .byte	$18
13670 3134                        18            .byte	$18
13671 3135                        18            .byte	$18
13672 3136                        F8            .byte	$F8
13673 3137                        18            .byte	$18
13674 3138                        F8            .byte	$F8
13675 3139                        00            .byte	0
13676 313A                        00            .byte	0
13677 313B                        00            .byte	0
13678 313C                        00            .byte	0
13679 313D                        00            .byte	0
13680 313E                        00            .byte	0
13681 313F                        00            .byte	0
13682 3140                        00            .byte	0
13683                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13684 3141                        00            .byte	0
13685 3142                        00            .byte	0
13686 3143                        00            .byte	0
13687 3144                        00            .byte	0
13688 3145                        00            .byte	0
13689 3146                        00            .byte	0
13690 3147                        00            .byte	0
13691 3148                        F8            .byte	$F8
13692 3149                        18            .byte	$18
13693 314A                        18            .byte	$18
13694 314B                        18            .byte	$18
13695 314C                        18            .byte	$18
13696 314D                        18            .byte	$18
13697 314E                        18            .byte	$18
13698 314F                        18            .byte	$18
13699 3150                        18            .byte	$18
13700                                           ! 1427  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13701 3151                        18            .byte	$18
13702 3152                        18            .byte	$18
13703 3153                        18            .byte	$18
13704 3154                        18            .byte	$18
13705 3155                        18            .byte	$18
13706 3156                        18            .byte	$18
13707 3157                        18            .byte	$18
13708 3158                        1F            .byte	$1F
13709 3159                        00            .byte	0
13710 315A                        00            .byte	0
13711 315B                        00            .byte	0
13712 315C                        00            .byte	0
13713 315D                        00            .byte	0
13714 315E                        00            .byte	0
13715 315F                        00            .byte	0
13716 3160                        00            .byte	0
13717                                           ! 1428  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13718 3161                        18            .byte	$18
13719 3162                        18            .byte	$18
13720 3163                        18            .byte	$18
13721 3164                        18            .byte	$18
13722 3165                        18            .byte	$18
13723 3166                        18            .byte	$18
13724 3167                        18            .byte	$18
13725 3168                        FF            .byte	$FF
13726 3169                        00            .byte	0
13727 316A                        00            .byte	0
13728 316B                        00            .byte	0
13729 316C                        00            .byte	0
13730 316D                        00            .byte	0
13731 316E                        00            .byte	0
13732 316F                        00            .byte	0
13733 3170                        00            .byte	0
13734                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13735 3171                        00            .byte	0
13736 3172                        00            .byte	0
13737 3173                        00            .byte	0
13738 3174                        00            .byte	0
13739 3175                        00            .byte	0
13740 3176                        00            .byte	0
13741 3177                        00            .byte	0
13742 3178                        FF            .byte	$FF
13743 3179                        18            .byte	$18
13744 317A                        18            .byte	$18
13745 317B                        18            .byte	$18
13746 317C                        18            .byte	$18
13747 317D                        18            .byte	$18
13748 317E                        18            .byte	$18
13749 317F                        18            .byte	$18
13750 3180                        18            .byte	$18
13751                                           ! 1430  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13752 3181                        18            .byte	$18
13753 3182                        18            .byte	$18
13754 3183                        18            .byte	$18
13755 3184                        18            .byte	$18
13756 3185                        18            .byte	$18
13757 3186                        18            .byte	$18
13758 3187                        18            .byte	$18
13759 3188                        1F            .byte	$1F
13760 3189                        18            .byte	$18
13761 318A                        18            .byte	$18
13762 318B                        18            .byte	$18
13763 318C                        18            .byte	$18
13764 318D                        18            .byte	$18
13765 318E                        18            .byte	$18
13766 318F                        18            .byte	$18
13767 3190                        18            .byte	$18
13768                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13769 3191                        00            .byte	0
13770 3192                        00            .byte	0
13771 3193                        00            .byte	0
13772 3194                        00            .byte	0
13773 3195                        00            .byte	0
13774 3196                        00            .byte	0
13775 3197                        00            .byte	0
13776 3198                        FF            .byte	$FF
13777 3199                        00            .byte	0
13778 319A                        00            .byte	0
13779 319B                        00            .byte	0
13780 319C                        00            .byte	0
13781 319D                        00            .byte	0
13782 319E                        00            .byte	0
13783 319F                        00            .byte	0
13784 31A0                        00            .byte	0
13785                                           ! 1432  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13786 31A1                        18            .byte	$18
13787 31A2                        18            .byte	$18
13788 31A3                        18            .byte	$18
13789 31A4                        18            .byte	$18
13790 31A5                        18            .byte	$18
13791 31A6                        18            .byte	$18
13792 31A7                        18            .byte	$18
13793 31A8                        FF            .byte	$FF
13794 31A9                        18            .byte	$18
13795 31AA                        18            .byte	$18
13796 31AB                        18            .byte	$18
13797 31AC                        18            .byte	$18
13798 31AD                        18            .byte	$18
13799 31AE                        18            .byte	$18
13800 31AF                        18            .byte	$18
13801 31B0                        18            .byte	$18
13802                                           ! 1433  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13803 31B1                        18            .byte	$18
13804 31B2                        18            .byte	$18
13805 31B3                        18            .byte	$18
13806 31B4                        18            .byte	$18
13807 31B5                        18            .byte	$18
13808 31B6                        1F            .byte	$1F
13809 31B7                        18            .byte	$18
13810 31B8                        1F            .byte	$1F
13811 31B9                        18            .byte	$18
13812 31BA                        18            .byte	$18
13813 31BB                        18            .byte	$18
13814 31BC                        18            .byte	$18
13815 31BD                        18            .byte	$18
13816 31BE                        18            .byte	$18
13817 31BF                        18            .byte	$18
13818 31C0                        18            .byte	$18
13819                                           ! 1434  0x36, 0x36, 0x36, 0x36, 0x36, 0
13820 31C1                        36            .byte	$36
13821 31C2                        36            .byte	$36
13822 31C3                        36            .byte	$36
13823 31C4                        36            .byte	$36
13824 31C5                        36            .byte	$36
13825                                           ! 1434 x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13826 31C6                        36            .byte	$36
13827 31C7                        36            .byte	$36
13828 31C8                        37            .byte	$37
13829 31C9                        36            .byte	$36
13830 31CA                        36            .byte	$36
13831 31CB                        36            .byte	$36
13832 31CC                        36            .byte	$36
13833 31CD                        36            .byte	$36
13834 31CE                        36            .byte	$36
13835 31CF                        36            .byte	$36
13836 31D0                        36            .byte	$36
13837                                           ! 1435  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13838 31D1                        36            .byte	$36
13839 31D2                        36            .byte	$36
13840 31D3                        36            .byte	$36
13841 31D4                        36            .byte	$36
13842 31D5                        36            .byte	$36
13843 31D6                        37            .byte	$37
13844 31D7                        30            .byte	$30
13845 31D8                        3F            .byte	$3F
13846 31D9                        00            .byte	0
13847 31DA                        00            .byte	0
13848 31DB                        00            .byte	0
13849 31DC                        00            .byte	0
13850 31DD                        00            .byte	0
13851 31DE                        00            .byte	0
13852 31DF                        00            .byte	0
13853 31E0                        00            .byte	0
13854                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13855 31E1                        00            .byte	0
13856 31E2                        00            .byte	0
13857 31E3                        00            .byte	0
13858 31E4                        00            .byte	0
13859 31E5                        00            .byte	0
13860 31E6                        3F            .byte	$3F
13861 31E7                        30            .byte	$30
13862 31E8                        37            .byte	$37
13863 31E9                        36            .byte	$36
13864 31EA                        36            .byte	$36
13865 31EB                        36            .byte	$36
13866 31EC                        36            .byte	$36
13867 31ED                        36            .byte	$36
13868 31EE                        36            .byte	$36
13869 31EF                        36            .byte	$36
13870 31F0                        36            .byte	$36
13871                                           ! 1437  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13872 31F1                        36            .byte	$36
13873 31F2                        36            .byte	$36
13874 31F3                        36            .byte	$36
13875 31F4                        36            .byte	$36
13876 31F5                        36            .byte	$36
13877 31F6                        F7            .byte	$F7
13878 31F7                        00            .byte	0
13879 31F8                        FF            .byte	$FF
13880 31F9                        00            .byte	0
13881 31FA                        00            .byte	0
13882 31FB                        00            .byte	0
13883 31FC                        00            .byte	0
13884 31FD                        00            .byte	0
13885 31FE                        00            .byte	0
13886 31FF                        00            .byte	0
13887 3200                        00            .byte	0
13888                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13889 3201                        00            .byte	0
13890 3202                        00            .byte	0
13891 3203                        00            .byte	0
13892 3204                        00            .byte	0
13893 3205                        00            .byte	0
13894 3206                        FF            .byte	$FF
13895 3207                        00            .byte	0
13896 3208                        F7            .byte	$F7
13897 3209                        36            .byte	$36
13898 320A                        36            .byte	$36
13899 320B                        36            .byte	$36
13900 320C                        36            .byte	$36
13901 320D                        36            .byte	$36
13902 320E                        36            .byte	$36
13903 320F                        36            .byte	$36
13904 3210                        36            .byte	$36
13905                                           ! 1439  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13906 3211                        36            .byte	$36
13907 3212                        36            .byte	$36
13908 3213                        36            .byte	$36
13909 3214                        36            .byte	$36
13910 3215                        36            .byte	$36
13911 3216                        37            .byte	$37
13912 3217                        30            .byte	$30
13913 3218                        37            .byte	$37
13914 3219                        36            .byte	$36
13915 321A                        36            .byte	$36
13916 321B                        36            .byte	$36
13917 321C                        36            .byte	$36
13918 321D                        36            .byte	$36
13919 321E                        36            .byte	$36
13920 321F                        36            .byte	$36
13921 3220                        36            .byte	$36
13922                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13923 3221                        00            .byte	0
13924 3222                        00            .byte	0
13925 3223                        00            .byte	0
13926 3224                        00            .byte	0
13927 3225                        00            .byte	0
13928 3226                        FF            .byte	$FF
13929 3227                        00            .byte	0
13930 3228                        FF            .byte	$FF
13931 3229                        00            .byte	0
13932 322A                        00            .byte	0
13933 322B                        00            .byte	0
13934 322C                        00            .byte	0
13935 322D                        00            .byte	0
13936 322E                        00            .byte	0
13937 322F                        00            .byte	0
13938 3230                        00            .byte	0
13939                                           ! 1441  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13940 3231                        36            .byte	$36
13941 3232                        36            .byte	$36
13942 3233                        36            .byte	$36
13943 3234                        36            .byte	$36
13944 3235                        36            .byte	$36
13945 3236                        F7            .byte	$F7
13946 3237                        00            .byte	0
13947 3238                        F7            .byte	$F7
13948 3239                        36            .byte	$36
13949 323A                        36            .byte	$36
13950 323B                        36            .byte	$36
13951 323C                        36            .byte	$36
13952 323D                        36            .byte	$36
13953 323E                        36            .byte	$36
13954 323F                        36            .byte	$36
13955 3240                        36            .byte	$36
13956                                           ! 1442  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13957 3241                        18            .byte	$18
13958 3242                        18            .byte	$18
13959 3243                        18            .byte	$18
13960 3244                        18            .byte	$18
13961 3245                        18            .byte	$18
13962 3246                        FF            .byte	$FF
13963 3247                        00            .byte	0
13964 3248                        FF            .byte	$FF
13965 3249                        00            .byte	0
13966 324A                        00            .byte	0
13967 324B                        00            .byte	0
13968 324C                        00            .byte	0
13969 324D                        00            .byte	0
13970 324E                        00            .byte	0
13971 324F                        00            .byte	0
13972 3250                        00            .byte	0
13973                                           ! 1443  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13974 3251                        36            .byte	$36
13975 3252                        36            .byte	$36
13976 3253                        36            .byte	$36
13977 3254                        36            .byte	$36
13978 3255                        36            .byte	$36
13979 3256                        36            .byte	$36
13980 3257                        36            .byte	$36
13981 3258                        FF            .byte	$FF
13982 3259                        00            .byte	0
13983 325A                        00            .byte	0
13984 325B                        00            .byte	0
13985 325C                        00            .byte	0
13986 325D                        00            .byte	0
13987 325E                        00            .byte	0
13988 325F                        00            .byte	0
13989 3260                        00            .byte	0
13990                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13991 3261                        00            .byte	0
13992 3262                        00            .byte	0
13993 3263                        00            .byte	0
13994 3264                        00            .byte	0
13995 3265                        00            .byte	0
13996 3266                        FF            .byte	$FF
13997 3267                        00            .byte	0
13998 3268                        FF            .byte	$FF
13999 3269                        18            .byte	$18
14000 326A                        18            .byte	$18
14001 326B                        18            .byte	$18
14002 326C                        18            .byte	$18
14003 326D                        18            .byte	$18
14004 326E                        18            .byte	$18
14005 326F                        18            .byte	$18
14006 3270                        18            .byte	$18
14007                                           ! 1445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14008 3271                        00            .byte	0
14009 3272                        00            .byte	0
14010 3273                        00            .byte	0
14011 3274                        00            .byte	0
14012 3275                        00            .byte	0
14013 3276                        00            .byte	0
14014 3277                        00            .byte	0
14015 3278                        FF            .byte	$FF
14016 3279                        36            .byte	$36
14017 327A                        36            .byte	$36
14018 327B                        36            .byte	$36
14019 327C                        36            .byte	$36
14020 327D                        36            .byte	$36
14021 327E                        36            .byte	$36
14022 327F                        36            .byte	$36
14023 3280                        36            .byte	$36
14024                                           ! 1446  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14025 3281                        36            .byte	$36
14026 3282                        36            .byte	$36
14027 3283                        36            .byte	$36
14028 3284                        36            .byte	$36
14029 3285                        36            .byte	$36
14030 3286                        36            .byte	$36
14031 3287                        36            .byte	$36
14032 3288                        3F            .byte	$3F
14033 3289                        00            .byte	0
14034 328A                        00            .byte	0
14035 328B                        00            .byte	0
14036 328C                        00            .byte	0
14037 328D                        00            .byte	0
14038 328E                        00            .byte	0
14039 328F                        00            .byte	0
14040 3290                        00            .byte	0
14041                                           ! 1447  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14042 3291                        18            .byte	$18
14043 3292                        18            .byte	$18
14044 3293                        18            .byte	$18
14045 3294                        18            .byte	$18
14046 3295                        18            .byte	$18
14047 3296                        1F            .byte	$1F
14048 3297                        18            .byte	$18
14049 3298                        1F            .byte	$1F
14050 3299                        00            .byte	0
14051 329A                        00            .byte	0
14052 329B                        00            .byte	0
14053 329C                        00            .byte	0
14054 329D                        00            .byte	0
14055 329E                        00            .byte	0
14056 329F                        00            .byte	0
14057 32A0                        00            .byte	0
14058                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14059 32A1                        00            .byte	0
14060 32A2                        00            .byte	0
14061 32A3                        00            .byte	0
14062 32A4                        00            .byte	0
14063 32A5                        00            .byte	0
14064 32A6                        1F            .byte	$1F
14065 32A7                        18            .byte	$18
14066 32A8                        1F            .byte	$1F
14067 32A9                        18            .byte	$18
14068 32AA                        18            .byte	$18
14069 32AB                        18            .byte	$18
14070 32AC                        18            .byte	$18
14071 32AD                        18            .byte	$18
14072 32AE                        18            .byte	$18
14073 32AF                        18            .byte	$18
14074 32B0                        18            .byte	$18
14075                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14076 32B1                        00            .byte	0
14077 32B2                        00            .byte	0
14078 32B3                        00            .byte	0
14079 32B4                        00            .byte	0
14080 32B5                        00            .byte	0
14081 32B6                        00            .byte	0
14082 32B7                        00            .byte	0
14083 32B8                        3F            .byte	$3F
14084 32B9                        36            .byte	$36
14085 32BA                        36            .byte	$36
14086 32BB                        36            .byte	$36
14087 32BC                        36            .byte	$36
14088 32BD                        36            .byte	$36
14089 32BE                        36            .byte	$36
14090 32BF                        36            .byte	$36
14091 32C0                        36            .byte	$36
14092                                           ! 1450  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14093 32C1                        36            .byte	$36
14094 32C2                        36            .byte	$36
14095 32C3                        36            .byte	$36
14096 32C4                        36            .byte	$36
14097 32C5                        36            .byte	$36
14098 32C6                        36            .byte	$36
14099 32C7                        36            .byte	$36
14100 32C8                        FF            .byte	$FF
14101 32C9                        36            .byte	$36
14102 32CA                        36            .byte	$36
14103 32CB                        36            .byte	$36
14104 32CC                        36            .byte	$36
14105 32CD                        36            .byte	$36
14106 32CE                        36            .byte	$36
14107 32CF                        36            .byte	$36
14108 32D0                        36            .byte	$36
14109                                           ! 1451  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14110 32D1                        18            .byte	$18
14111 32D2                        18            .byte	$18
14112 32D3                        18            .byte	$18
14113 32D4                        18            .byte	$18
14114 32D5                        18            .byte	$18
14115 32D6                        FF            .byte	$FF
14116 32D7                        18            .byte	$18
14117 32D8                        FF            .byte	$FF
14118 32D9                        18            .byte	$18
14119 32DA                        18            .byte	$18
14120 32DB                        18            .byte	$18
14121 32DC                        18            .byte	$18
14122 32DD                        18            .byte	$18
14123 32DE                        18            .byte	$18
14124 32DF                        18            .byte	$18
14125 32E0                        18            .byte	$18
14126                                           ! 1452  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14127 32E1                        18            .byte	$18
14128 32E2                        18            .byte	$18
14129 32E3                        18            .byte	$18
14130 32E4                        18            .byte	$18
14131 32E5                        18            .byte	$18
14132 32E6                        18            .byte	$18
14133 32E7                        18            .byte	$18
14134 32E8                        F8            .byte	$F8
14135 32E9                        00            .byte	0
14136 32EA                        00            .byte	0
14137 32EB                        00            .byte	0
14138 32EC                        00            .byte	0
14139 32ED                        00            .byte	0
14140 32EE                        00            .byte	0
14141 32EF                        00            .byte	0
14142 32F0                        00            .byte	0
14143                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14144 32F1                        00            .byte	0
14145 32F2                        00            .byte	0
14146 32F3                        00            .byte	0
14147 32F4                        00            .byte	0
14148 32F5                        00            .byte	0
14149 32F6                        00            .byte	0
14150 32F7                        00            .byte	0
14151 32F8                        1F            .byte	$1F
14152 32F9                        18            .byte	$18
14153 32FA                        18            .byte	$18
14154 32FB                        18            .byte	$18
14155 32FC                        18            .byte	$18
14156 32FD                        18            .byte	$18
14157 32FE                        18            .byte	$18
14158 32FF                        18            .byte	$18
14159 3300                        18            .byte	$18
14160                                           ! 1454  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14161 3301                        FF            .byte	$FF
14162 3302                        FF            .byte	$FF
14163 3303                        FF            .byte	$FF
14164 3304                        FF            .byte	$FF
14165 3305                        FF            .byte	$FF
14166 3306                        FF            .byte	$FF
14167 3307                        FF            .byte	$FF
14168 3308                        FF            .byte	$FF
14169 3309                        FF            .byte	$FF
14170 330A                        FF            .byte	$FF
14171 330B                        FF            .byte	$FF
14172 330C                        FF            .byte	$FF
14173 330D                        FF            .byte	$FF
14174 330E                        FF            .byte	$FF
14175 330F                        FF            .byte	$FF
14176 3310                        FF            .byte	$FF
14177                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
14178 3311                        00            .byte	0
14179 3312                        00            .byte	0
14180 3313                        00            .byte	0
14181 3314                        00            .byte	0
14182 3315                        00            .byte	0
14183 3316                        00            .byte	0
14184 3317                        00            .byte	0
14185                                           ! 1455 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14186 3318                        FF            .byte	$FF
14187 3319                        FF            .byte	$FF
14188 331A                        FF            .byte	$FF
14189 331B                        FF            .byte	$FF
14190 331C                        FF            .byte	$FF
14191 331D                        FF            .byte	$FF
14192 331E                        FF            .byte	$FF
14193 331F                        FF            .byte	$FF
14194 3320                        FF            .byte	$FF
14195                                           ! 1456  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14196 3321                        F0            .byte	$F0
14197 3322                        F0            .byte	$F0
14198 3323                        F0            .byte	$F0
14199 3324                        F0            .byte	$F0
14200 3325                        F0            .byte	$F0
14201 3326                        F0            .byte	$F0
14202 3327                        F0            .byte	$F0
14203 3328                        F0            .byte	$F0
14204 3329                        F0            .byte	$F0
14205 332A                        F0            .byte	$F0
14206 332B                        F0            .byte	$F0
14207 332C                        F0            .byte	$F0
14208 332D                        F0            .byte	$F0
14209 332E                        F0            .byte	$F0
14210 332F                        F0            .byte	$F0
14211 3330                        F0            .byte	$F0
14212                                           ! 1457  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14213 3331                        0F            .byte	$F
14214 3332                        0F            .byte	$F
14215 3333                        0F            .byte	$F
14216 3334                        0F            .byte	$F
14217 3335                        0F            .byte	$F
14218 3336                        0F            .byte	$F
14219 3337                        0F            .byte	$F
14220 3338                        0F            .byte	$F
14221 3339                        0F            .byte	$F
14222 333A                        0F            .byte	$F
14223 333B                        0F            .byte	$F
14224 333C                        0F            .byte	$F
14225 333D                        0F            .byte	$F
14226 333E                        0F            .byte	$F
14227 333F                        0F            .byte	$F
14228 3340                        0F            .byte	$F
14229                                           ! 1458  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14230 3341                        FF            .byte	$FF
14231 3342                        FF            .byte	$FF
14232 3343                        FF            .byte	$FF
14233 3344                        FF            .byte	$FF
14234 3345                        FF            .byte	$FF
14235 3346                        FF            .byte	$FF
14236 3347                        FF            .byte	$FF
14237 3348                        00            .byte	0
14238 3349                        00            .byte	0
14239 334A                        00            .byte	0
14240 334B                        00            .byte	0
14241 334C                        00            .byte	0
14242 334D                        00            .byte	0
14243 334E                        00            .byte	0
14244 334F                        00            .byte	0
14245 3350                        00            .byte	0
14246                                           ! 1459  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14247 3351                        00            .byte	0
14248 3352                        00            .byte	0
14249 3353                        00            .byte	0
14250 3354                        00            .byte	0
14251 3355                        00            .byte	0
14252 3356                        76            .byte	$76
14253 3357                        DC            .byte	$DC
14254 3358                        D8            .byte	$D8
14255 3359                        D8            .byte	$D8
14256 335A                        D8            .byte	$D8
14257 335B                        DC            .byte	$DC
14258 335C                        76            .byte	$76
14259 335D                        00            .byte	0
14260 335E                        00            .byte	0
14261 335F                        00            .byte	0
14262 3360                        00            .byte	0
14263                                           ! 1460  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14264 3361                        00            .byte	0
14265 3362                        00            .byte	0
14266 3363                        78            .byte	$78
14267 3364                        CC            .byte	$CC
14268 3365                        CC            .byte	$CC
14269 3366                        CC            .byte	$CC
14270 3367                        D8            .byte	$D8
14271 3368                        CC            .byte	$CC
14272 3369                        C6            .byte	$C6
14273 336A                        C6            .byte	$C6
14274 336B                        C6            .byte	$C6
14275 336C                        CC            .byte	$CC
14276 336D                        00            .byte	0
14277 336E                        00            .byte	0
14278 336F                        00            .byte	0
14279 3370                        00            .byte	0
14280                                           ! 1461  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14281 3371                        00            .byte	0
14282 3372                        00            .byte	0
14283 3373                        FE            .byte	$FE
14284 3374                        C6            .byte	$C6
14285 3375                        C6            .byte	$C6
14286 3376                        C0            .byte	$C0
14287 3377                        C0            .byte	$C0
14288 3378                        C0            .byte	$C0
14289 3379                        C0            .byte	$C0
14290 337A                        C0            .byte	$C0
14291 337B                        C0            .byte	$C0
14292 337C                        C0            .byte	$C0
14293 337D                        00            .byte	0
14294 337E                        00            .byte	0
14295 337F                        00            .byte	0
14296 3380                        00            .byte	0
14297                                           ! 1462  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14298 3381                        00            .byte	0
14299 3382                        00            .byte	0
14300 3383                        00            .byte	0
14301 3384                        00            .byte	0
14302 3385                        FE            .byte	$FE
14303 3386                        6C            .byte	$6C
14304 3387                        6C            .byte	$6C
14305 3388                        6C            .byte	$6C
14306 3389                        6C            .byte	$6C
14307 338A                        6C            .byte	$6C
14308 338B                        6C            .byte	$6C
14309 338C                        6C            .byte	$6C
14310 338D                        00            .byte	0
14311 338E                        00            .byte	0
14312 338F                        00            .byte	0
14313 3390                        00            .byte	0
14314                                           ! 1463  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14315 3391                        00            .byte	0
14316 3392                        00            .byte	0
14317 3393                        00            .byte	0
14318 3394                        FE            .byte	$FE
14319 3395                        C6            .byte	$C6
14320 3396                        60            .byte	$60
14321 3397                        30            .byte	$30
14322 3398                        18            .byte	$18
14323 3399                        30            .byte	$30
14324 339A                        60            .byte	$60
14325 339B                        C6            .byte	$C6
14326 339C                        FE            .byte	$FE
14327 339D                        00            .byte	0
14328 339E                        00            .byte	0
14329 339F                        00            .byte	0
14330 33A0                        00            .byte	0
14331                                           ! 1464  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14332 33A1                        00            .byte	0
14333 33A2                        00            .byte	0
14334 33A3                        00            .byte	0
14335 33A4                        00            .byte	0
14336 33A5                        00            .byte	0
14337 33A6                        7E            .byte	$7E
14338 33A7                        D8            .byte	$D8
14339 33A8                        D8            .byte	$D8
14340 33A9                        D8            .byte	$D8
14341 33AA                        D8            .byte	$D8
14342 33AB                        D8            .byte	$D8
14343 33AC                        70            .byte	$70
14344 33AD                        00            .byte	0
14345 33AE                        00            .byte	0
14346 33AF                        00            .byte	0
14347 33B0                        00            .byte	0
14348                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14349 33B1                        00            .byte	0
14350 33B2                        00            .byte	0
14351 33B3                        00            .byte	0
14352 33B4                        00            .byte	0
14353 33B5                        66            .byte	$66
14354 33B6                        66            .byte	$66
14355 33B7                        66            .byte	$66
14356 33B8                        66            .byte	$66
14357 33B9                        66            .byte	$66
14358 33BA                        7C            .byte	$7C
14359 33BB                        60            .byte	$60
14360 33BC                        60            .byte	$60
14361 33BD                        C0            .byte	$C0
14362 33BE                        00            .byte	0
14363 33BF                        00            .byte	0
14364 33C0                        00            .byte	0
14365                                           ! 1466  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14366 33C1                        00            .byte	0
14367 33C2                        00            .byte	0
14368 33C3                        00            .byte	0
14369 33C4                        00            .byte	0
14370 33C5                        76            .byte	$76
14371 33C6                        DC            .byte	$DC
14372 33C7                        18            .byte	$18
14373 33C8                        18            .byte	$18
14374 33C9                        18            .byte	$18
14375 33CA                        18            .byte	$18
14376 33CB                        18            .byte	$18
14377 33CC                        18            .byte	$18
14378 33CD                        00            .byte	0
14379 33CE                        00            .byte	0
14380 33CF                        00            .byte	0
14381 33D0                        00            .byte	0
14382                                           ! 1467  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14383 33D1                        00            .byte	0
14384 33D2                        00            .byte	0
14385 33D3                        00            .byte	0
14386 33D4                        7E            .byte	$7E
14387 33D5                        18            .byte	$18
14388 33D6                        3C            .byte	$3C
14389 33D7                        66            .byte	$66
14390 33D8                        66            .byte	$66
14391 33D9                        66            .byte	$66
14392 33DA                        3C            .byte	$3C
14393 33DB                        18            .byte	$18
14394 33DC                        7E            .byte	$7E
14395 33DD                        00            .byte	0
14396 33DE                        00            .byte	0
14397 33DF                        00            .byte	0
14398 33E0                        00            .byte	0
14399                                           ! 1468  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14400 33E1                        00            .byte	0
14401 33E2                        00            .byte	0
14402 33E3                        00            .byte	0
14403 33E4                        38            .byte	$38
14404 33E5                        6C            .byte	$6C
14405 33E6                        C6            .byte	$C6
14406 33E7                        C6            .byte	$C6
14407 33E8                        FE            .byte	$FE
14408 33E9                        C6            .byte	$C6
14409 33EA                        C6            .byte	$C6
14410 33EB                        6C            .byte	$6C
14411 33EC                        38            .byte	$38
14412 33ED                        00            .byte	0
14413 33EE                        00            .byte	0
14414 33EF                        00            .byte	0
14415 33F0                        00            .byte	0
14416                                           ! 1469  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14417 33F1                        00            .byte	0
14418 33F2                        00            .byte	0
14419 33F3                        38            .byte	$38
14420 33F4                        6C            .byte	$6C
14421 33F5                        C6            .byte	$C6
14422 33F6                        C6            .byte	$C6
14423 33F7                        C6            .byte	$C6
14424 33F8                        6C            .byte	$6C
14425 33F9                        6C            .byte	$6C
14426 33FA                        6C            .byte	$6C
14427 33FB                        6C            .byte	$6C
14428 33FC                        EE            .byte	$EE
14429 33FD                        00            .byte	0
14430 33FE                        00            .byte	0
14431 33FF                        00            .byte	0
14432 3400                        00            .byte	0
14433                                           ! 1470  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14434 3401                        00            .byte	0
14435 3402                        00            .byte	0
14436 3403                        1E            .byte	$1E
14437 3404                        30            .byte	$30
14438 3405                        18            .byte	$18
14439 3406                        0C            .byte	$C
14440 3407                        3E            .byte	$3E
14441 3408                        66            .byte	$66
14442 3409                        66            .byte	$66
14443 340A                        66            .byte	$66
14444 340B                        66            .byte	$66
14445 340C                        3C            .byte	$3C
14446 340D                        00            .byte	0
14447 340E                        00            .byte	0
14448 340F                        00            .byte	0
14449 3410                        00            .byte	0
14450                                           ! 1471  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14451 3411                        00            .byte	0
14452 3412                        00            .byte	0
14453 3413                        00            .byte	0
14454 3414                        00            .byte	0
14455 3415                        00            .byte	0
14456 3416                        7E            .byte	$7E
14457 3417                        DB            .byte	$DB
14458 3418                        DB            .byte	$DB
14459 3419                        DB            .byte	$DB
14460 341A                        7E            .byte	$7E
14461 341B                        00            .byte	0
14462 341C                        00            .byte	0
14463 341D                        00            .byte	0
14464 341E                        00            .byte	0
14465 341F                        00            .byte	0
14466 3420                        00            .byte	0
14467                                           ! 1472  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14468 3421                        00            .byte	0
14469 3422                        00            .byte	0
14470 3423                        00            .byte	0
14471 3424                        03            .byte	3
14472 3425                        06            .byte	6
14473 3426                        7E            .byte	$7E
14474 3427                        DB            .byte	$DB
14475 3428                        DB            .byte	$DB
14476 3429                        F3            .byte	$F3
14477 342A                        7E            .byte	$7E
14478 342B                        60            .byte	$60
14479 342C                        C0            .byte	$C0
14480 342D                        00            .byte	0
14481 342E                        00            .byte	0
14482 342F                        00            .byte	0
14483 3430                        00            .byte	0
14484                                           ! 1473  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14485 3431                        00            .byte	0
14486 3432                        00            .byte	0
14487 3433                        1C            .byte	$1C
14488 3434                        30            .byte	$30
14489 3435                        60            .byte	$60
14490 3436                        60            .byte	$60
14491 3437                        7C            .byte	$7C
14492 3438                        60            .byte	$60
14493 3439                        60            .byte	$60
14494 343A                        60            .byte	$60
14495 343B                        30            .byte	$30
14496 343C                        1C            .byte	$1C
14497 343D                        00            .byte	0
14498 343E                        00            .byte	0
14499 343F                        00            .byte	0
14500 3440                        00            .byte	0
14501                                           ! 1474  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14502 3441                        00            .byte	0
14503 3442                        00            .byte	0
14504 3443                        00            .byte	0
14505 3444                        7C            .byte	$7C
14506 3445                        C6            .byte	$C6
14507 3446                        C6            .byte	$C6
14508 3447                        C6            .byte	$C6
14509 3448                        C6            .byte	$C6
14510 3449                        C6            .byte	$C6
14511 344A                        C6            .byte	$C6
14512 344B                        C6            .byte	$C6
14513 344C                        C6            .byte	$C6
14514 344D                        00            .byte	0
14515 344E                        00            .byte	0
14516 344F                        00            .byte	0
14517 3450                        00            .byte	0
14518                                           ! 1475  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14519 3451                        00            .byte	0
14520 3452                        00            .byte	0
14521 3453                        00            .byte	0
14522 3454                        00            .byte	0
14523 3455                        FE            .byte	$FE
14524 3456                        00            .byte	0
14525 3457                        00            .byte	0
14526 3458                        FE            .byte	$FE
14527 3459                        00            .byte	0
14528 345A                        00            .byte	0
14529 345B                        FE            .byte	$FE
14530 345C                        00            .byte	0
14531 345D                        00            .byte	0
14532 345E                        00            .byte	0
14533 345F                        00            .byte	0
14534 3460                        00            .byte	0
14535                                           ! 1476  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18,
14536 3461                        00            .byte	0
14537 3462                        00            .byte	0
14538 3463                        00            .byte	0
14539 3464                        00            .byte	0
14540 3465                        18            .byte	$18
14541 3466                        18            .byte	$18
14542 3467                        7E            .byte	$7E
14543 3468                        18            .byte	$18
14544                                           ! 1476  0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14545 3469                        18            .byte	$18
14546 346A                        00            .byte	0
14547 346B                        00            .byte	0
14548 346C                        FF            .byte	$FF
14549 346D                        00            .byte	0
14550 346E                        00            .byte	0
14551 346F                        00            .byte	0
14552 3470                        00            .byte	0
14553                                           ! 1477  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14554 3471                        00            .byte	0
14555 3472                        00            .byte	0
14556 3473                        00            .byte	0
14557 3474                        30            .byte	$30
14558 3475                        18            .byte	$18
14559 3476                        0C            .byte	$C
14560 3477                        06            .byte	6
14561 3478                        0C            .byte	$C
14562 3479                        18            .byte	$18
14563 347A                        30            .byte	$30
14564 347B                        00            .byte	0
14565 347C                        7E            .byte	$7E
14566 347D                        00            .byte	0
14567 347E                        00            .byte	0
14568 347F                        00            .byte	0
14569 3480                        00            .byte	0
14570                                           ! 1478  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14571 3481                        00            .byte	0
14572 3482                        00            .byte	0
14573 3483                        00            .byte	0
14574 3484                        0C            .byte	$C
14575 3485                        18            .byte	$18
14576 3486                        30            .byte	$30
14577 3487                        60            .byte	$60
14578 3488                        30            .byte	$30
14579 3489                        18            .byte	$18
14580 348A                        0C            .byte	$C
14581 348B                        00            .byte	0
14582 348C                        7E            .byte	$7E
14583 348D                        00            .byte	0
14584 348E                        00            .byte	0
14585 348F                        00            .byte	0
14586 3490                        00            .byte	0
14587                                           ! 1479  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14588 3491                        00            .byte	0
14589 3492                        00            .byte	0
14590 3493                        0E            .byte	$E
14591 3494                        1B            .byte	$1B
14592 3495                        1B            .byte	$1B
14593 3496                        18            .byte	$18
14594 3497                        18            .byte	$18
14595 3498                        18            .byte	$18
14596 3499                        18            .byte	$18
14597 349A                        18            .byte	$18
14598 349B                        18            .byte	$18
14599 349C                        18            .byte	$18
14600 349D                        18            .byte	$18
14601 349E                        18            .byte	$18
14602 349F                        18            .byte	$18
14603 34A0                        18            .byte	$18
14604                                           ! 1480  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14605 34A1                        18            .byte	$18
14606 34A2                        18            .byte	$18
14607 34A3                        18            .byte	$18
14608 34A4                        18            .byte	$18
14609 34A5                        18            .byte	$18
14610 34A6                        18            .byte	$18
14611 34A7                        18            .byte	$18
14612 34A8                        18            .byte	$18
14613 34A9                        D8            .byte	$D8
14614 34AA                        D8            .byte	$D8
14615 34AB                        D8            .byte	$D8
14616 34AC                        70            .byte	$70
14617 34AD                        00            .byte	0
14618 34AE                        00            .byte	0
14619 34AF                        00            .byte	0
14620 34B0                        00            .byte	0
14621                                           ! 1481  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14622 34B1                        00            .byte	0
14623 34B2                        00            .byte	0
14624 34B3                        00            .byte	0
14625 34B4                        00            .byte	0
14626 34B5                        18            .byte	$18
14627 34B6                        18            .byte	$18
14628 34B7                        00            .byte	0
14629 34B8                        7E            .byte	$7E
14630 34B9                        00            .byte	0
14631 34BA                        18            .byte	$18
14632 34BB                        18            .byte	$18
14633 34BC                        00            .byte	0
14634 34BD                        00            .byte	0
14635 34BE                        00            .byte	0
14636 34BF                        00            .byte	0
14637 34C0                        00            .byte	0
14638                                           ! 1482  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14639 34C1                        00            .byte	0
14640 34C2                        00            .byte	0
14641 34C3                        00            .byte	0
14642 34C4                        00            .byte	0
14643 34C5                        00            .byte	0
14644 34C6                        76            .byte	$76
14645 34C7                        DC            .byte	$DC
14646 34C8                        00            .byte	0
14647 34C9                        76            .byte	$76
14648 34CA                        DC            .byte	$DC
14649 34CB                        00            .byte	0
14650 34CC                        00            .byte	0
14651 34CD                        00            .byte	0
14652 34CE                        00            .byte	0
14653 34CF                        00            .byte	0
14654 34D0                        00            .byte	0
14655                                           ! 1483  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14656 34D1                        00            .byte	0
14657 34D2                        38            .byte	$38
14658 34D3                        6C            .byte	$6C
14659 34D4                        6C            .byte	$6C
14660 34D5                        38            .byte	$38
14661 34D6                        00            .byte	0
14662 34D7                        00            .byte	0
14663 34D8                        00            .byte	0
14664 34D9                        00            .byte	0
14665 34DA                        00            .byte	0
14666 34DB                        00            .byte	0
14667 34DC                        00            .byte	0
14668 34DD                        00            .byte	0
14669 34DE                        00            .byte	0
14670 34DF                        00            .byte	0
14671 34E0                        00            .byte	0
14672                                           ! 1484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14673 34E1                        00            .byte	0
14674 34E2                        00            .byte	0
14675 34E3                        00            .byte	0
14676 34E4                        00            .byte	0
14677 34E5                        00            .byte	0
14678 34E6                        00            .byte	0
14679 34E7                        00            .byte	0
14680 34E8                        18            .byte	$18
14681 34E9                        18            .byte	$18
14682 34EA                        00            .byte	0
14683 34EB                        00            .byte	0
14684 34EC                        00            .byte	0
14685 34ED                        00            .byte	0
14686 34EE                        00            .byte	0
14687 34EF                        00            .byte	0
14688 34F0                        00            .byte	0
14689                                           ! 1485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14690 34F1                        00            .byte	0
14691 34F2                        00            .byte	0
14692 34F3                        00            .byte	0
14693 34F4                        00            .byte	0
14694 34F5                        00            .byte	0
14695 34F6                        00            .byte	0
14696 34F7                        00            .byte	0
14697 34F8                        00            .byte	0
14698 34F9                        18            .byte	$18
14699 34FA                        00            .byte	0
14700 34FB                        00            .byte	0
14701 34FC                        00            .byte	0
14702 34FD                        00            .byte	0
14703 34FE                        00            .byte	0
14704 34FF                        00            .byte	0
14705 3500                        00            .byte	0
14706                                           ! 1486  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14707 3501                        00            .byte	0
14708 3502                        0F            .byte	$F
14709 3503                        0C            .byte	$C
14710 3504                        0C            .byte	$C
14711 3505                        0C            .byte	$C
14712 3506                        0C            .byte	$C
14713 3507                        0C            .byte	$C
14714 3508                        EC            .byte	$EC
14715 3509                        6C            .byte	$6C
14716 350A                        6C            .byte	$6C
14717 350B                        3C            .byte	$3C
14718 350C                        1C            .byte	$1C
14719 350D                        00            .byte	0
14720 350E                        00            .byte	0
14721 350F                        00            .byte	0
14722 3510                        00            .byte	0
14723                                           ! 1487  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14724 3511                        00            .byte	0
14725 3512                        D8            .byte	$D8
14726 3513                        6C            .byte	$6C
14727 3514                        6C            .byte	$6C
14728 3515                        6C            .byte	$6C
14729 3516                        6C            .byte	$6C
14730 3517                        6C            .byte	$6C
14731 3518                        00            .byte	0
14732 3519                        00            .byte	0
14733 351A                        00            .byte	0
14734 351B                        00            .byte	0
14735 351C                        00            .byte	0
14736 351D                        00            .byte	0
14737 351E                        00            .byte	0
14738 351F                        00            .byte	0
14739 3520                        00            .byte	0
14740                                           ! 1488  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14741 3521                        00            .byte	0
14742 3522                        70            .byte	$70
14743 3523                        D8            .byte	$D8
14744 3524                        30            .byte	$30
14745 3525                        60            .byte	$60
14746 3526                        C8            .byte	$C8
14747 3527                        F8            .byte	$F8
14748 3528                        00            .byte	0
14749 3529                        00            .byte	0
14750 352A                        00            .byte	0
14751 352B                        00            .byte	0
14752 352C                        00            .byte	0
14753 352D                        00            .byte	0
14754 352E                        00            .byte	0
14755 352F                        00            .byte	0
14756 3530                        00            .byte	0
14757                                           ! 1489  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14758 3531                        00            .byte	0
14759 3532                        00            .byte	0
14760 3533                        00            .byte	0
14761 3534                        00            .byte	0
14762 3535                        7C            .byte	$7C
14763 3536                        7C            .byte	$7C
14764 3537                        7C            .byte	$7C
14765 3538                        7C            .byte	$7C
14766 3539                        7C            .byte	$7C
14767 353A                        7C            .byte	$7C
14768 353B                        7C            .byte	$7C
14769 353C                        00            .byte	0
14770 353D                        00            .byte	0
14771 353E                        00            .byte	0
14772 353F                        00            .byte	0
14773 3540                        00            .byte	0
14774                                           ! 1490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14775 3541                        00            .byte	0
14776 3542                        00            .byte	0
14777 3543                        00            .byte	0
14778 3544                        00            .byte	0
14779 3545                        00            .byte	0
14780 3546                        00            .byte	0
14781 3547                        00            .byte	0
14782 3548                        00            .byte	0
14783 3549                        00            .byte	0
14784 354A                        00            .byte	0
14785 354B                        00            .byte	0
14786 354C                        00            .byte	0
14787 354D                        00            .byte	0
14788 354E                        00            .byte	0
14789 354F                        00            .byte	0
14790                                           ! 1491 };
14791 3550                        00            .byte	0
14792                                           !BCC_EOS
14793                                           ! 1492 static Bit8u vgafont14alt[1]={0x00};
14794                       00003551            _vgafont14alt:
14795 3551                        00            .byte	0
14796                                           !BCC_EOS
14797                                           ! 1493 static Bit8u vgafont16alt[1]={0x00};
14798                       00003552            _vgafont16alt:
14799 3552                        00            .byte	0
14800                                           !BCC_EOS
14801                                           ! 1494 #asm
14802                                           !BCC_ASM
14803                       00003553            init_vga_card:
14804                                           ;; switch to color mode and enable CPU access 480 lines
14805 3553           BA                   03C2    mov dx, #0x3C2
14806 3556           B0                     C3    mov al, #0xC3
14807 3558           EE                           outb dx,al
14808                                           ;; more than 64k 3C4/04
14809 3559           BA                   03C4    mov dx, #0x3C4
14810 355C           B0                     04    mov al, #0x04
14811 355E           EE                           outb dx,al
14812 355F           BA                   03C5    mov dx, #0x3C5
14813 3562           B0                     02    mov al, #0x02
14814 3564           EE                           outb dx,al
14815 3565           BB                   356F    mov bx, #msg_vga_init
14816 3568           53                           push bx
14817 3569           E8         486E              call _printf
14818 356C           44                           inc sp
14819 356D           44                           inc sp
14820 356E           C3                           ret
14821                       0000356F            msg_vga_init:
14822 356F                        56            .ascii "VGABios $Id: vgabios.c,v 1.75 2011/10/15 14:07:21 vruppert Exp $"
14823 35AF                        0D            .byte 0x0d,0x0a,0x00
14824                                           ! 1516 endasm
14825                                           !BCC_ENDASM
14826                                           ! 1517 #asm
14827                                           !BCC_ASM
14828                       000035B2            init_bios_area:
14829 35B2           1E                           push ds
14830 35B3           B8                   0040    mov ax, # 0x40
14831 35B6           8ED8                         mov ds, ax
14832                                           ;; init detected hardware BIOS Area
14833 35B8           BB                   0010    mov bx, # 0x10
14834 35BB           8B07                         mov ax, [bx]
14835 35BD           25                   FFCF    and ax, #0xffcf
14836                                           ;; set 80x25 color (not clear from RBIL but usual)
14837 35C0           0D                   0020    or ax, #0x0020
14838 35C3           8907                         mov [bx], ax
14839                                           ;; Just for the first int10 find its children
14840                                           ;; the default char height
14841 35C5           BB                   0085    mov bx, # 0x85
14842 35C8           B0                     10    mov al, #0x10
14843 35CA           8807                         mov [bx], al
14844                                           ;; Clear the screen
14845 35CC           BB                   0087    mov bx, # 0x87
14846 35CF           B0                     60    mov al, #0x60
14847 35D1           8807                         mov [bx], al
14848                                           ;; Set the basic screen we have
14849 35D3           BB                   0088    mov bx, # 0x88
14850 35D6           B0                     F9    mov al, #0xf9
14851 35D8           8807                         mov [bx], al
14852                                           ;; Set the basic modeset options
14853 35DA           BB                   0089    mov bx, # 0x89
14854 35DD           B0                     51    mov al, #0x51
14855 35DF           8807                         mov [bx], al
14856                                           ;; Set the default MSR
14857 35E1           BB                   0065    mov bx, # 0x65
14858 35E4           B0                     09    mov al, #0x09
14859 35E6           8807                         mov [bx], al
14860 35E8           1F                           pop ds
14861 35E9           C3                           ret
14862                       000035EA            _video_save_pointer_table:
14863 35EA                      0281              .word _video_param_table
14864 35EC                      C000              .word 0xc000
14865 35EE                      0000              .word 0
14866 35F0                      0000              .word 0
14867 35F2                      0000              .word 0
14868 35F4                      0000              .word 0
14869 35F6                      0000              .word 0
14870 35F8                      0000              .word 0
14871 35FA                      0000              .word 0
14872 35FC                      0000              .word 0
14873 35FE                      0000              .word 0
14874 3600                      0000              .word 0
14875 3602                      0000              .word 0
14876 3604                      0000              .word 0
14877                                           ! 1567 endasm
14878                                           !BCC_ENDASM
14879                                           ! 1568 static void display_splash_screen()
14880                                           ! 1569 {
14881                                           
14882                       00003606            _display_splash_screen:
14883                                           ! 1570 }
14884 3606           C3                         ret
14885                                           ! 1571 static void display_info()
14886                                           ! 1572 {
14887                       00003607            _display_info:
14888                                           ! 1573 #asm
14889                                           !BCC_ASM
14890 3607           B8                   C000   mov ax,#0xc000
14891 360A           8ED8                        mov ds,ax
14892 360C           BE                   0022   mov si,#vgabios_name
14893 360F           E8         0013             call _display_string
14894 3612           BE                   003E   mov si,#vgabios_version
14895 3615           E8         000D             call _display_string
14896                                            ;;mov si,#vgabios_copyright
14897                                            ;;call _display_string
14898                                            ;;mov si,#crlf
14899                                            ;;call _display_string
14900 3618           BE                   0084   mov si,#vgabios_license
14901 361B           E8         0007             call _display_string
14902 361E           BE                   00B9   mov si,#vgabios_website
14903 3621           E8         0001             call _display_string
14904                                           ! 1588 endasm
14905                                           !BCC_ENDASM
14906                                           ! 1589 }
14907 3624           C3                         ret
14908                                           ! 1590 static void display_string()
14909                                           ! 1591 {
14910                       00003625            _display_string:
14911                                           ! 1592 #asm
14912                                           !BCC_ASM
14913 3625           8CD8                        mov ax,ds
14914 3627           8EC0                        mov es,ax
14915 3629           89F7                        mov di,si
14916 362B           31C9                        xor cx,cx
14917 362D           F7D1                        not cx
14918 362F           30C0                        xor al,al
14919 3631           FC                          cld
14920 3632           F2                          repne
14921 3633           AE                           scasb
14922 3634           F7D1                        not cx
14923 3636           49                          dec cx
14924 3637           51                          push cx
14925 3638           B8                   0300   mov ax,#0x0300
14926 363B           BB                   0000   mov bx,#0x0000
14927 363E           CD                     10   int #0x10
14928 3640           59                          pop cx
14929 3641           B8                   1301   mov ax,#0x1301
14930 3644           BB                   000B   mov bx,#0x000b
14931 3647           89F5                        mov bp,si
14932 3649           CD                     10   int #0x10
14933                                           ! 1613 endasm
14934                                           !BCC_ENDASM
14935                                           ! 1614 }
14936 364B           C3                         ret
14937                                           ! 1615 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14938                                           ! 1616   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14939                       0000364C            _int10_func:
14940                                           !BCC_EOS
14941                                           ! 1617 {
14942                                           ! 1618  switch(( AX >> 8 ))
14943 364C           55                         push	bp
14944 364D           89E5                       mov	bp,sp
14945                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14946 364F           8B46         12            mov	ax,$12[bp]
14947 3652           88E0                       mov	al,ah
14948 3654           30E4                       xor	ah,ah
14949                                           ! 1619   {
14950 3656           E9         0425            br 	.3
14951                                           ! 1620    case 0x00:
14952                                           ! 1621      biosfn_set_video_mode(( AX & 0x00ff ));
14953                       00003659            .4:
14954                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14955 3659           8A46         12            mov	al,$12[bp]
14956                                           ! Debug: list unsigned char = al+0 (used reg = )
14957 365C           30E4                       xor	ah,ah
14958 365E           50                         push	ax
14959                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14960 365F           E8         0567            call	_biosfn_set_video_mode
14961 3662           44                         inc	sp
14962 3663           44                         inc	sp
14963                                           !BCC_EOS
14964                                           ! 1622      switch(( AX & 0x00ff )&0x7F)
14965                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14966 3664           8A46         12            mov	al,$12[bp]
14967                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14968 3667           24                     7F  and	al,*$7F
14969                                           ! 1623       {case 6:
14970 3669           EB           24            jmp .7
14971                                           ! 1624         AX = ((AX & 0xff00) | (0x3F));
14972                       0000366B            .8:
14973                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14974 366B           8B46         12            mov	ax,$12[bp]
14975 366E           30C0                       xor	al,al
14976                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14977 3670           0C                     3F  or	al,*$3F
14978                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14979 3672           8946         12            mov	$12[bp],ax
14980                                           !BCC_EOS
14981                                           ! 1625         break;
14982 3675           EB           3D            jmp .5
14983                                           !BCC_EOS
14984                                           ! 1626        case 0:
14985                                           ! 1627        case 1:
14986                       00003677            .9:
14987                                           ! 1628        case 2:
14988                       00003677            .A:
14989                                           ! 1629        case 3:
14990                       00003677            .B:
14991                                           ! 1630        case 4:
14992                       00003677            .C:
14993                                           ! 1631        case 5:
14994                       00003677            .D:
14995                                           ! 1632        case 7:
14996                       00003677            .E:
14997                                           ! 1633         AX = ((AX & 0xff00) | (0x30));
14998                       00003677            .F:
14999                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15000 3677           8B46         12            mov	ax,$12[bp]
15001 367A           30C0                       xor	al,al
15002                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15003 367C           0C                     30  or	al,*$30
15004                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15005 367E           8946         12            mov	$12[bp],ax
15006                                           !BCC_EOS
15007                                           ! 1634         break;
15008 3681           EB           31            jmp .5
15009                                           !BCC_EOS
15010                                           ! 1635       default:
15011                                           ! 1636         AX = ((AX & 0xff00) | (0x20));
15012                       00003683            .10:
15013                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15014 3683           8B46         12            mov	ax,$12[bp]
15015 3686           30C0                       xor	al,al
15016                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15017 3688           0C                     20  or	al,*$20
15018                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15019 368A           8946         12            mov	$12[bp],ax
15020                                           !BCC_EOS
15021                                           ! 1637       }
15022                                           ! 1638      break;
15023 368D           EB           25            jmp .5
15024                       0000368F            .7:
15025 368F           2C                     00  sub	al,*0
15026 3691           72           F0            jb 	.10
15027 3693           3C                     07  cmp	al,*7
15028 3695           77           1B            ja  	.11
15029 3697           30E4                       xor	ah,ah
15030 3699           D1E0                       shl	ax,*1
15031 369B           89C3                       mov	bx,ax
15032 369D           2E                         seg	cs
15033 369E           FFA7       36A2            br	.12[bx]
15034                       000036A2            .12:
15035 36A2                      3677            .word	.9
15036 36A4                      3677            .word	.A
15037 36A6                      3677            .word	.B
15038 36A8                      3677            .word	.C
15039 36AA                      3677            .word	.D
15040 36AC                      3677            .word	.E
15041 36AE                      366B            .word	.8
15042 36B0                      3677            .word	.F
15043                       000036B2            .11:
15044 36B2           EB           CF            jmp	.10
15045                       000036B4            .5:
15046 36B4           E9         0414            br 	.1
15047                                           !BCC_EOS
15048                                           ! 1639    case 0x01:
15049                                           ! 1640      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15050                       000036B7            .13:
15051                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15052 36B7           8A46         10            mov	al,$10[bp]
15053                                           ! Debug: list unsigned char = al+0 (used reg = )
15054 36BA           30E4                       xor	ah,ah
15055 36BC           50                         push	ax
15056                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15057 36BD           8B46         10            mov	ax,$10[bp]
15058 36C0           88E0                       mov	al,ah
15059 36C2           30E4                       xor	ah,ah
15060                                           ! Debug: list unsigned int = ax+0 (used reg = )
15061 36C4           50                         push	ax
15062                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15063 36C5           E8         0A91            call	_biosfn_set_cursor_shape
15064 36C8           83C4                   04  add	sp,*4
15065                                           !BCC_EOS
15066                                           ! 1641      break;
15067 36CB           E9         03FD            br 	.1
15068                                           !BCC_EOS
15069                                           ! 1642    case 0x02:
15070                                           ! 1643      biosfn_set_cursor_pos(( BX >
15071                       000036CE            .14:
15072                                           ! 1643 > 8 ),DX);
15073                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15074 36CE           FF76         0E            push	$E[bp]
15075                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15076 36D1           8B46         0C            mov	ax,$C[bp]
15077 36D4           88E0                       mov	al,ah
15078 36D6           30E4                       xor	ah,ah
15079                                           ! Debug: list unsigned int = ax+0 (used reg = )
15080 36D8           50                         push	ax
15081                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15082 36D9           E8         0B98            call	_biosfn_set_cursor_pos
15083 36DC           83C4                   04  add	sp,*4
15084                                           !BCC_EOS
15085                                           ! 1644      break;
15086 36DF           E9         03E9            br 	.1
15087                                           !BCC_EOS
15088                                           ! 1645    case 0x03:
15089                                           ! 1646      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15090                       000036E2            .15:
15091                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15092 36E2           8D5E         0E            lea	bx,$E[bp]
15093 36E5           53                         push	bx
15094                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15095 36E6           8D5E         10            lea	bx,$10[bp]
15096 36E9           53                         push	bx
15097                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15098 36EA           8B46         0C            mov	ax,$C[bp]
15099 36ED           88E0                       mov	al,ah
15100 36EF           30E4                       xor	ah,ah
15101                                           ! Debug: list unsigned int = ax+0 (used reg = )
15102 36F1           50                         push	ax
15103                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15104 36F2           E8         0C7F            call	_biosfn_get_cursor_pos
15105 36F5           83C4                   06  add	sp,*6
15106                                           !BCC_EOS
15107                                           ! 1647      break;
15108 36F8           E9         03D0            br 	.1
15109                                           !BCC_EOS
15110                                           ! 1648    case 0x04:
15111                                           ! 1649      AX=0x00;
15112                       000036FB            .16:
15113                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15114 36FB           31C0                       xor	ax,ax
15115 36FD           8946         12            mov	$12[bp],ax
15116                                           !BCC_EOS
15117                                           ! 1650      BX=0x00;
15118                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15119 3700           31C0                       xor	ax,ax
15120 3702           8946         0C            mov	$C[bp],ax
15121                                           !BCC_EOS
15122                                           ! 1651      CX=0x00;
15123                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15124 3705           31C0                       xor	ax,ax
15125 3707           8946         10            mov	$10[bp],ax
15126                                           !BCC_EOS
15127                                           ! 1652      DX=0x00;
15128                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15129 370A           31C0                       xor	ax,ax
15130 370C           8946         0E            mov	$E[bp],ax
15131                                           !BCC_EOS
15132                                           ! 1653      break;
15133 370F           E9         03B9            br 	.1
15134                                           !BCC_EOS
15135                                           ! 1654    case 0x05:
15136                                           ! 1655      biosfn_set_active_page(( AX & 0x00ff ));
15137                       00003712            .17:
15138                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15139 3712           8A46         12            mov	al,$12[bp]
15140                                           ! Debug: list unsigned char = al+0 (used reg = )
15141 3715           30E4                       xor	ah,ah
15142 3717           50                         push	ax
15143                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15144 3718           E8         0CCE            call	_biosfn_set_active_page
15145 371B           44                         inc	sp
15146 371C           44                         inc	sp
15147                                           !BCC_EOS
15148                                           ! 1656      break;
15149 371D           E9         03AB            br 	.1
15150                                           !BCC_EOS
15151                                           ! 1657    case 0x06:
15152                                           ! 1658      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15153                       00003720            .18:
15154                                           ! Debug: list int = const 1 (used reg = )
15155 3720           B8                   0001  mov	ax,*1
15156 3723           50                         push	ax
15157                                           ! Debug: list int = const $FF (used reg = )
15158 3724           B8                   00FF  mov	ax,#$FF
15159 3727           50                         push	ax
15160                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15161 3728           8A46         0E            mov	al,$E[bp]
15162                                           ! Debug: list unsigned char = al+0 (used reg = )
15163 372B           30E4                       xor	ah,ah
15164 372D           50                         push	ax
15165                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15166 372E           8B46         0E            mov	ax,$E[bp]
15167 3731           88E0                       mov	al,ah
15168 3733           30E4                       xor	ah,ah
15169                                           ! Debug: list unsigned int = ax+0 (used reg = )
15170 3735           50                         push	ax
15171                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15172 3736           8A46         10            mov	al,$10[bp]
15173                                           ! Debug: list unsigned char = al+0 (used reg = )
15174 3739           30E4                       xor	ah,ah
15175 373B           50                         push	ax
15176                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15177 373C           8B46         10            mov	ax,$10[bp]
15178 373F           88E0                       mov	al,ah
15179 3741           30E4                       xor	ah,ah
15180                                           ! Debug: list unsigned int = ax+0 (used reg = )
15181 3743           50                         push	ax
15182                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15183 3744           8B46         0C            mov	ax,$C[bp]
15184 3747           88E0                       mov	al,ah
15185 3749           30E4                       xor	ah,ah
15186                                           ! Debug: list unsigned int = ax+0 (used reg = )
15187 374B           50                         push	ax
15188                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15189 374C           8A46         12            mov	al,$12[bp]
15190                                           ! Debug: list unsigned char = al+0 (used reg = )
15191 374F           30E4                       xor	ah,ah
15192 3751           50                         push	ax
15193                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15194 3752           E8         1117            call	_biosfn_scroll
15195 3755           83C4                   10  add	sp,*$10
15196                                           !BCC_EOS
15197                                           ! 1659      break;
15198 3758           E9         0370            br 	.1
15199                                           !BCC_EOS
15200                                           ! 1660    case 0x07:
15201                                           ! 1661      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15202                       0000375B            .19:
15203                                           ! Debug: list int = const 0 (used reg = )
15204 375B           31C0                       xor	ax,ax
15205 375D           50                         push	ax
15206                                           ! Debug: list int = const $FF (used reg = )
15207 375E           B8                   00FF  mov	ax,#$FF
15208 3761           50                         push	ax
15209                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15210 3762           8A46         0E            mov	al,$E[bp]
15211                                           ! Debug: list unsigned char = al+0 (used reg = )
15212 3765           30E4                       xor	ah,ah
15213 3767           50                         push	ax
15214                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15215 3768           8B46         0E            mov	ax,$E[bp]
15216 376B           88E0                       mov	al,ah
15217 376D           30E4                       xor	ah,ah
15218                                           ! Debug: list unsigned int = ax+0 (used reg = )
15219 376F           50                         push	ax
15220                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15221 3770           8A46         10            mov	al,$10[bp]
15222                                           ! Debug: list unsigned char = al+0 (used reg = )
15223 3773           30E4                       xor	ah,ah
15224 3775           50                         push	ax
15225                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15226 3776           8B46         10            mov	ax,$10[bp]
15227 3779           88E0                       mov	al,ah
15228 377B           30E4                       xor	ah,ah
15229                                           ! Debug: list unsigned int = ax+0 (used reg = )
15230 377D           50                         push	ax
15231                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15232 377E           8B46         0C            mov	ax,$C[bp]
15233 3781           88E0                       mov	al,ah
15234 3783           30E4                       xor	ah,ah
15235                                           ! Debug: list unsigned int = ax+0 (used reg = )
15236 3785           50                         push	ax
15237                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15238 3786           8A46         12            mov	al,$12[bp]
15239                                           ! Debug: list unsigned char = al+0 (used reg = )
15240 3789           30E4                       xor	ah,ah
15241 378B           50                         push	ax
15242                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15243 378C           E8         10DD            call	_biosfn_scroll
15244 378F           83C4                   10  add	sp,*$10
15245                                           !BCC_EOS
15246                                           ! 1662      break;
15247 3792           E9         0336            br 	.1
15248                                           !BCC_EOS
15249                                           ! 1663    case 0x08:
15250                                           ! 1664      biosfn_read_char_attr(( BX >> 8 ),&AX);
15251                       00003795            .1A:
15252                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15253 3795           8D5E         12            lea	bx,$12[bp]
15254 3798           53                         push	bx
15255                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15256 3799           8B46         0C            mov	ax,$C[bp]
15257 379C           88E0                       mov	al,ah
15258 379E           30E4                       xor	ah,ah
15259                                           ! Debug: list unsigned int = ax+0 (used reg = )
15260 37A0           50                         push	ax
15261                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15262 37A1           E8         17C2            call	_biosfn_read_char_attr
15263 37A4           83C4                   04  add	sp,*4
15264                                           !BCC_EOS
15265                                           ! 1665      break;
15266 37A7           E9         0321            br 	.1
15267                                           !BCC_EOS
15268                                           ! 1666    case 0x09:
15269                                           ! 1667      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15270                       000037AA            .1B:
15271                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15272 37AA           FF76         10            push	$10[bp]
15273                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15274 37AD           8A46         0C            mov	al,$C[bp]
15275                                           ! Debug: list unsigned char = al+0 (used reg = )
15276 37B0           30E4                       xor	ah,ah
15277 37B2           50                         push	ax
15278                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15279 37B3           8B46         0C            mov	ax,$C[bp]
15280 37B6           88E0                       mov	al,ah
15281 37B8           30E4                       xor	ah,ah
15282                                           ! Debug: list unsigned int = ax+0 (used reg = )
15283 37BA           50                         push	ax
15284                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15285 37BB           8A46         12            mov	al,$12[bp]
15286                                           ! Debug: list unsigned char = al+0 (used reg = )
15287 37BE           30E4                       xor	ah,ah
15288 37C0           50                         push	ax
15289                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15290 37C1           E8         1CE7            call	_biosfn_write_char_attr
15291 37C4           83C4                   08  add	sp,*8
15292                                           !BCC_EOS
15293                                           ! 1668      break;
15294 37C7           E9         0301            br 	.1
15295                                           !BCC_EOS
15296                                           ! 1669    case 0x0A:
15297                                           ! 1670      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15298                       000037CA            .1C:
15299                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15300 37CA           FF76         10            push	$10[bp]
15301                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15302 37CD           8A46         0C            mov	al,$C[bp]
15303                                           ! Debug: list unsigned char = al+0 (used reg = )
15304 37D0           30E4                       xor	ah,ah
15305 37D2           50                         push	ax
15306                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15307 37D3           8B46         0C            mov	ax,$C[bp]
15308 37D6           88E0                       mov	al,ah
15309 37D8           30E4                       xor	ah,ah
15310                                           ! Debug: list unsigned int = ax+0 (used reg = )
15311 37DA           50                         push	ax
15312                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15313 37DB           8A46         12            mov	al,$12[bp]
15314                                           ! Debug: list unsigned char = al+0 (used reg = )
15315 37DE           30E4                       xor	ah,ah
15316 37E0           50                         push	ax
15317                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15318 37E1           E8         1EAE            call	_biosfn_write_char_only
15319 37E4           83C4                   08  add	sp,*8
15320                                           !BCC_EOS
15321                                           ! 1671      break;
15322 37E7           E9         02E1            br 	.1
15323                                           !BCC_EOS
15324                                           ! 1672    case 0x0C:
15325                                           ! 1673      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15326                       000037EA            .1D:
15327                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15328 37EA           FF76         0E            push	$E[bp]
15329                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15330 37ED           FF76         10            push	$10[bp]
15331                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15332 37F0           8A46         12            mov	al,$12[bp]
15333                                           ! Debug: list unsigned char = al+0 (used reg = )
15334 37F3           30E4                       xor	ah,ah
15335 37F5           50                         push	ax
15336                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15337 37F6           8B46         0C            mov	ax,$C[bp]
15338 37F9           88E0                       mov	al,ah
15339 37FB           30E4                       xor	ah,ah
15340                                           ! Debug: list unsigned int = ax+0 (used reg = )
15341 37FD           50                         push	ax
15342                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15343 37FE           E8         20F3            call	_biosfn_write_pixel
15344 3801           83C4                   08  add	sp,*8
15345                                           !BCC_EOS
15346                                           ! 1674      break;
15347 3804           E9         02C4            br 	.1
15348                                           !BCC_EOS
15349                                           ! 1675    case 0x0D:
15350                                           ! 1676      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15351                       00003807            .1E:
15352                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15353 3807           8D5E         12            lea	bx,$12[bp]
15354 380A           53                         push	bx
15355                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15356 380B           FF76         0E            push	$E[bp]
15357                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15358 380E           FF76         10            push	$10[bp]
15359                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15360 3811           8B46         0C            mov	ax,$C[bp]
15361 3814           88E0                       mov	al,ah
15362 3816           30E4                       xor	ah,ah
15363                                           ! Debug: list unsigned int = ax+0 (used reg = )
15364 3818           50                         push	ax
15365                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15366 3819           E8         2374            call	_biosfn_read_pixel
15367 381C           83C4                   08  add	sp,*8
15368                                           !BCC_EOS
15369                                           ! 1677      break;
15370 381F           E9         02A9            br 	.1
15371                                           !BCC_EOS
15372                                           ! 1678    case 0x0E:
15373                                           ! 1679      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15374                       00003822            .1F:
15375                                           ! Debug: list int = const 2 (used reg = )
15376 3822           B8                   0002  mov	ax,*2
15377 3825           50                         push	ax
15378                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15379 3826           8A46         0C            mov	al,$C[bp]
15380                                           ! Debug: list unsigned char = al+0 (used reg = )
15381 3829           30E4                       xor	ah,ah
15382 382B           50                         push	ax
15383                                           ! Debug: list int = const $FF (used reg = )
15384 382C           B8                   00FF  mov	ax,#$FF
15385 382F           50                         push	ax
15386                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15387 3830           8A46         12            mov	al,$12[bp]
15388                                           ! Debug: list unsigned char = al+0 (used reg = )
15389 3833           30E4                       xor	ah,ah
15390 3835           50                         push	ax
15391                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15392 3836           E8         255D            call	_biosfn_write_teletype
15393 3839           83C4                   08  add	sp,*8
15394                                           !BCC_EOS
15395                                           ! 1680      break;
15396 383C           E9         028C            br 	.1
15397                                           !BCC_EOS
15398                                           ! 1681    case 0x10:
15399                                           ! 1682      biosfn_perform_gray_scale_summing(BX,CX);
15400                       0000383F            .20:
15401                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15402 383F           FF76         10            push	$10[bp]
15403                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15404 3842           FF76         0C            push	$C[bp]
15405                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15406 3845           E8         2B92            call	_biosfn_perform_gray_scale_summing
15407 3848           83C4                   04  add	sp,*4
15408                                           !BCC_EOS
15409                                           ! 1683      break;
15410 384B           E9         027D            br 	.1
15411                                           !BCC_EOS
15412                                           ! 1684    case 0x11:
15413                                           ! 1685      switch(( AX & 0x00ff ))
15414                       0000384E            .21:
15415                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15416 384E           8A46         12            mov	al,$12[bp]
15417                                           ! 1686       {
15418 3851           E9         00E1            br 	.24
15419                                           ! 1687        case 0x00:
15420                                           ! 1688        case 0x10:
15421                       00003854            .25:
15422                                           ! 1689         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15423                       00003854            .26:
15424                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15425 3854           8B46         0C            mov	ax,$C[bp]
15426 3857           88E0                       mov	al,ah
15427 3859           30E4                       xor	ah,ah
15428                                           ! Debug: list unsigned int = ax+0 (used reg = )
15429 385B           50                         push	ax
15430                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15431 385C           8A46         0C            mov	al,$C[bp]
15432                                           ! Debug: list unsigned char = al+0 (used reg = )
15433 385F           30E4                       xor	ah,ah
15434 3861           50                         push	ax
15435                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15436 3862           FF76         0E            push	$E[bp]
15437                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15438 3865           FF76         10            push	$10[bp]
15439                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15440 3868           FF76         08            push	8[bp]
15441                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15442 386B           FF76         16            push	$16[bp]
15443                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15444 386E           8A46         12            mov	al,$12[bp]
15445                                           ! Debug: list unsigned char = al+0 (used reg = )
15446 3871           30E4                       xor	ah,ah
15447 3873           50                         push	ax
15448                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15449 3874           E8         2E0A            call	_biosfn_load_text_user_pat
15450 3877           83C4                   0E  add	sp,*$E
15451                                           !BCC_EOS
15452                                           ! 1690         break;
15453 387A           E9         010C            br 	.22
15454                                           !BCC_EOS
15455                                           ! 1691        case 0x01:
15456                                           ! 1692        case 0x11:
15457                       0000387D            .27:
15458                                           ! 1693         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15459                       0000387D            .28:
15460                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15461 387D           8A46         0C            mov	al,$C[bp]
15462                                           ! Debug: list unsigned char = al+0 (used reg = )
15463 3880           30E4                       xor	ah,ah
15464 3882           50                         push	ax
15465                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15466 3883           8A46         12            mov	al,$12[bp]
15467                                           ! Debug: list unsigned char = al+0 (used reg = )
15468 3886           30E4                       xor	ah,ah
15469 3888           50                         push	ax
15470                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15471 3889           E8         2E91            call	_biosfn_load_text_8_14_pat
15472 388C           83C4                   04  add	sp,*4
15473                                           !BCC_EOS
15474                                           ! 1694         break;
15475 388F           E9         00F7            br 	.22
15476                                           !BCC_EOS
15477                                           ! 1695        case 0x02:
15478                                           ! 1696        case 0x12:
15479                       00003892            .29:
15480                                           ! 1697         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15481                       00003892            .2A:
15482                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15483 3892           8A46         0C            mov	al,$C[bp]
15484                                           ! Debug: list unsigned char = al+0 (used reg = )
15485 3895           30E4                       xor	ah,ah
15486 3897           50                         push	ax
15487                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15488 3898           8A46         12            mov	al,$12[bp]
15489                                           ! Debug: list unsigned char = al+0 (used reg = )
15490 389B           30E4                       xor	ah,ah
15491 389D           50                         push	ax
15492                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15493 389E           E8         2F13            call	_biosfn_load_text_8_8_pat
15494 38A1           83C4                   04  add	sp,*4
15495                                           !BCC_EOS
15496                                           ! 1698         break;
15497 38A4           E9         00E2            br 	.22
15498                                           !BCC_EOS
15499                                           ! 1699        case 0x04:
15500                                           ! 1700        case 0x14:
15501                       000038A7            .2B:
15502                                           ! 1701         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15503                       000038A7            .2C:
15504                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15505 38A7           8A46         0C            mov	al,$C[bp]
15506                                           ! Debug: list unsigned char = al+0 (used reg = )
15507 38AA           30E4                       xor	ah,ah
15508 38AC           50                         push	ax
15509                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15510 38AD           8A46         12            mov	al,$12[bp]
15511                                           ! Debug: list unsigned char = al+0 (used reg = )
15512 38B0           30E4                       xor	ah,ah
15513 38B2           50                         push	ax
15514                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15515 38B3           E8         2F9C            call	_biosfn_load_text_8_16_pat
15516 38B6           83C4                   04  add	sp,*4
15517                                           !BCC_EOS
15518                                           ! 1702         break;
15519 38B9           E9         00CD            br 	.22
15520                                           !BCC_EOS
15521                                           ! 1703        case 0x20:
15522                                           ! 1704         biosfn_load_gfx_8_8_chars(ES,BP);
15523                       000038BC            .2D:
15524                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15525 38BC           FF76         08            push	8[bp]
15526                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15527 38BF           FF76         16            push	$16[bp]
15528                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15529 38C2           E8         301E            call	_biosfn_load_gfx_8_8_chars
15530 38C5           83C4                   04  add	sp,*4
15531                                           !BCC_EOS
15532                                           ! 1705         break;
15533 38C8           E9         00BE            br 	.22
15534                                           !BCC_EOS
15535                                           ! 1706        case 0x21:
15536                                           ! 1707         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15537                       000038CB            .2E:
15538                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15539 38CB           8A46         0E            mov	al,$E[bp]
15540                                           ! Debug: list unsigned char = al+0 (used reg = )
15541 38CE           30E4                       xor	ah,ah
15542 38D0           50                         push	ax
15543                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15544 38D1           8A46         0C            mov	al,$C[bp]
15545                                           ! Debug: list unsigned char = al+0 (used reg = )
15546 38D4           30E4                       xor	ah,ah
15547 38D6           50                         push	ax
15548                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15549 38D7           FF76         10            push	$10[bp]
15550                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15551 38DA           FF76         08            push	8[bp]
15552                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15553 38DD           FF76         16            push	$16[bp]
15554                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15555 38E0           E8         3034            call	_biosfn_load_gfx_user_chars
15556 38E3           83C4                   0A  add	sp,*$A
15557                                           !BCC_EOS
15558                                           ! 1708         break;
15559 38E6           E9         00A0            br 	.22
15560                                           !BCC_EOS
15561                                           ! 1709        case 0x22:
15562                                           ! 1710         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15563                       000038E9            .2F:
15564                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15565 38E9           8A46         0C            mov	al,$C[bp]
15566                                           ! Debug: list unsigned char = al+0 (used reg = )
15567 38EC           30E4                       xor	ah,ah
15568 38EE           50                         push	ax
15569                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15570 38EF           E8         30CB            call	_biosfn_load_gfx_8_14_chars
15571 38F2           44                         inc	sp
15572 38F3           44                         inc	sp
15573                                           !BCC_EOS
15574                                           ! 1711         break;
15575 38F4           E9         0092            br 	.22
15576                                           !BCC_EOS
15577                                           ! 1712        case 0x23:
15578                                           ! 1713         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15579                       000038F7            .30:
15580                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15581 38F7           8A46         0C            mov	al,$C[bp]
15582                                           ! Debug: list unsigned char = al+0 (used reg = )
15583 38FA           30E4                       xor	ah,ah
15584 38FC           50                         push	ax
15585                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15586 38FD           E8         3144            call	_biosfn_load_gfx_8_8_dd_chars
15587 3900           44                         inc	sp
15588 3901           44                         inc	sp
15589                                           !BCC_EOS
15590                                           ! 1714         break;
15591 3902           E9         0084            br 	.22
15592                                           !BCC_EOS
15593                                           ! 1715        
15594                                           ! 1715 case 0x24:
15595                                           ! 1716         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15596                       00003905            .31:
15597                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15598 3905           8A46         0C            mov	al,$C[bp]
15599                                           ! Debug: list unsigned char = al+0 (used reg = )
15600 3908           30E4                       xor	ah,ah
15601 390A           50                         push	ax
15602                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15603 390B           E8         31BD            call	_biosfn_load_gfx_8_16_chars
15604 390E           44                         inc	sp
15605 390F           44                         inc	sp
15606                                           !BCC_EOS
15607                                           ! 1717         break;
15608 3910           E9         0076            br 	.22
15609                                           !BCC_EOS
15610                                           ! 1718        case 0x30:
15611                                           ! 1719         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15612                       00003913            .32:
15613                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15614 3913           8D5E         0E            lea	bx,$E[bp]
15615 3916           53                         push	bx
15616                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15617 3917           8D5E         10            lea	bx,$10[bp]
15618 391A           53                         push	bx
15619                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15620 391B           8D5E         08            lea	bx,8[bp]
15621 391E           53                         push	bx
15622                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15623 391F           8D5E         16            lea	bx,$16[bp]
15624 3922           53                         push	bx
15625                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15626 3923           8B46         0C            mov	ax,$C[bp]
15627 3926           88E0                       mov	al,ah
15628 3928           30E4                       xor	ah,ah
15629                                           ! Debug: list unsigned int = ax+0 (used reg = )
15630 392A           50                         push	ax
15631                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15632 392B           E8         3224            call	_biosfn_get_font_info
15633 392E           83C4                   0A  add	sp,*$A
15634                                           !BCC_EOS
15635                                           ! 1720         break;
15636 3931           EB           56            jmp .22
15637                                           !BCC_EOS
15638                                           ! 1721       }
15639                                           ! 1722      break;
15640 3933           EB           54            jmp .22
15641                       00003935            .24:
15642 3935           2C                     00  sub	al,*0
15643 3937         0F84         FF19            beq 	.25
15644 393B           2C                     01  sub	al,*1
15645 393D         0F84         FF3C            beq 	.27
15646 3941           2C                     01  sub	al,*1
15647 3943         0F84         FF4B            beq 	.29
15648 3947           2C                     02  sub	al,*2
15649 3949         0F84         FF5A            beq 	.2B
15650 394D           2C                     0C  sub	al,*$C
15651 394F         0F84         FF01            beq 	.26
15652 3953           2C                     01  sub	al,*1
15653 3955         0F84         FF24            beq 	.28
15654 3959           2C                     01  sub	al,*1
15655 395B         0F84         FF33            beq 	.2A
15656 395F           2C                     02  sub	al,*2
15657 3961         0F84         FF42            beq 	.2C
15658 3965           2C                     0C  sub	al,*$C
15659 3967         0F84         FF51            beq 	.2D
15660 396B           2C                     01  sub	al,*1
15661 396D         0F84         FF5A            beq 	.2E
15662 3971           2C                     01  sub	al,*1
15663 3973         0F84         FF72            beq 	.2F
15664 3977           2C                     01  sub	al,*1
15665 3979         0F84         FF7A            beq 	.30
15666 397D           2C                     01  sub	al,*1
15667 397F         0F84         FF82            beq 	.31
15668 3983           2C                     0C  sub	al,*$C
15669 3985         0F84         FF8A            beq 	.32
15670                       00003989            .22:
15671 3989           E9         013F            br 	.1
15672                                           !BCC_EOS
15673                                           ! 1723    case 0x12:
15674                                           ! 1724      switch(( BX & 0x00ff ))
15675                       0000398C            .33:
15676                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15677 398C           8A46         0C            mov	al,$C[bp]
15678                                           ! 1725       {
15679 398F           EB           3C            jmp .36
15680                                           ! 1726        case 0x20:
15681                                           ! 1727         biosfn_alternate_prtsc();
15682                       00003991            .37:
15683                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15684 3991           E8         3398            call	_biosfn_alternate_prtsc
15685                                           !BCC_EOS
15686                                           ! 1728         break;
15687 3994           EB           43            jmp .34
15688                                           !BCC_EOS
15689                                           ! 1729        case 0x35:
15690                                           ! 1730         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15691                       00003996            .38:
15692                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15693 3996           FF76         0E            push	$E[bp]
15694                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15695 3999           FF76         16            push	$16[bp]
15696                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15697 399C           8A46         12            mov	al,$12[bp]
15698                                           ! Debug: list unsigned char = al+0 (used reg = )
15699 399F           30E4                       xor	ah,ah
15700 39A1           50                         push	ax
15701                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15702 39A2           E8         3461            call	_biosfn_switch_video_interface
15703 39A5           83C4                   06  add	sp,*6
15704                                           !BCC_EOS
15705                                           ! 1731         AX = ((AX & 0xff00) | (0x12));
15706                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15707 39A8           8B46         12            mov	ax,$12[bp]
15708 39AB           30C0                       xor	al,al
15709                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15710 39AD           0C                     12  or	al,*$12
15711                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15712 39AF           8946         12            mov	$12[bp],ax
15713                                           !BCC_EOS
15714                                           ! 1732         break;
15715 39B2           EB           25            jmp .34
15716                                           !BCC_EOS
15717                                           ! 1733        case 0x36:
15718                                           ! 1734         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15719                       000039B4            .39:
15720                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15721 39B4           8A46         12            mov	al,$12[bp]
15722                                           ! Debug: list unsigned char = al+0 (used reg = )
15723 39B7           30E4                       xor	ah,ah
15724 39B9           50                         push	ax
15725                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15726 39BA           E8         344A            call	_biosfn_enable_video_refresh_control
15727 39BD           44                         inc	sp
15728 39BE           44                         inc	sp
15729                                           !BCC_EOS
15730                                           ! 1735         AX = ((AX & 0xff00) | (0x12));
15731                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15732 39BF           8B46         12            mov	ax,$12[bp]
15733 39C2           30C0                       xor	al,al
15734                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15735 39C4           0C                     12  or	al,*$12
15736                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15737 39C6           8946         12            mov	$12[bp],ax
15738                                           !BCC_EOS
15739                                           ! 1736         break;
15740 39C9           EB           0E            jmp .34
15741                                           !BCC_EOS
15742                                           ! 1737       }
15743                                           ! 1738      break;
15744 39CB           EB           0C            jmp .34
15745                       000039CD            .36:
15746 39CD           2C                     20  sub	al,*$20
15747 39CF           74           C0            je 	.37
15748 39D1           2C                     15  sub	al,*$15
15749 39D3           74           C1            je 	.38
15750 39D5           2C                     01  sub	al,*1
15751 39D7           74           DB            je 	.39
15752                       000039D9            .34:
15753 39D9           E9         00EF            br 	.1
15754                                           !BCC_EOS
15755                                           ! 1739    case 0x13:
15756                                           ! 1740      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15757                       000039DC            .3A:
15758                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15759 39DC           FF76         08            push	8[bp]
15760                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15761 39DF           FF76         16            push	$16[bp]
15762                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15763 39E2           8A46         0E            mov	al,$E[bp]
15764                                           ! Debug: list unsigned char = al+0 (used reg = )
15765 39E5           30E4                       xor	ah,ah
15766 39E7           50                         push	ax
15767                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15768 39E8           8B46         0E            mov	ax,$E[bp]
15769 39EB           88E0                       mov	al,ah
15770 39ED           30E4                       xor	ah,ah
15771                                           ! Debug: list unsigned int = ax+0 (used reg = )
15772 39EF           50                         push	ax
15773                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15774 39F0           FF76         10            push	$10[bp]
15775                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15776 39F3           8A46         0C            mov	al,$C[bp]
15777                                           ! Debug: list unsigned char = al+0 (used reg = )
15778 39F6           30E4                       xor	ah,ah
15779 39F8           50                         push	ax
15780                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15781 39F9           8B46         0C            mov	ax,$C[bp]
15782 39FC           88E0                       mov	al,ah
15783 39FE           30E4                       xor	ah,ah
15784                                           ! Debug: list unsigned int = ax+0 (used reg = )
15785 3A00           50                         push	ax
15786                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15787 3A01           8A46         12            mov	al,$12[bp]
15788                                           ! Debug: list unsigned char = al+0 (used reg = )
15789 3A04           30E4                       xor	ah,ah
15790 3A06           50                         push	ax
15791                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15792 3A07           E8         33FE            call	_biosfn_write_string
15793 3A0A           83C4                   10  add	sp,*$10
15794                                           !BCC_EOS
15795                                           ! 1741      break;
15796 3A0D           E9         00BB            br 	.1
15797                                           !BCC_EOS
15798                                           ! 1742    case 0x1B:
15799                                           ! 1743      biosfn_read_state_info(BX,ES,DI);
15800                       00003A10            .3B:
15801                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15802 3A10           FF76         04            push	4[bp]
15803                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15804 3A13           FF76         16            push	$16[bp]
15805                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15806 3A16           FF76         0C            push	$C[bp]
15807                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15808 3A19           E8         34F8            call	_biosfn_read_state_info
15809 3A1C           83C4                   06  add	sp,*6
15810                                           !BCC_EOS
15811                                           ! 1744      AX = ((AX & 0xff00) | (0x1B));
15812                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15813 3A1F           8B46         12            mov	ax,$12[bp]
15814 3A22           30C0                       xor	al,al
15815                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15816 3A24           0C                     1B  or	al,*$1B
15817                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15818 3A26           8946         12            mov	$12[bp],ax
15819                                           !BCC_EOS
15820                                           ! 1745      break;
15821 3A29           E9         009F            br 	.1
15822                                           !BCC_EOS
15823                                           ! 1746    case 0x1C:
15824                                           ! 1747      switch(( AX & 0x00ff ))
15825                       00003A2C            .3C:
15826                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15827 3A2C           8A46         12            mov	al,$12[bp]
15828                                           ! 1748       {
15829 3A2F           EB           33            jmp .3F
15830                                           ! 1749        case 0x00:
15831                                           ! 1750         biosfn_read_video_state_size(CX,&BX);
15832                       00003A31            .40:
15833                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15834 3A31           8D5E         0C            lea	bx,$C[bp]
15835 3A34           53                         push	bx
15836                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15837 3A35           FF76         10            push	$10[bp]
15838                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15839 3A38           E8         3658            call	_biosfn_read_video_state_size
15840 3A3B           83C4                   04  add	sp,*4
15841                                           !BCC_EOS
15842                                           ! 1751         break;
15843 3A3E           EB           30            jmp .3D
15844                                           !BCC_EOS
15845                                           ! 1752        case 0x01:
15846                                           ! 1753         biosfn_save_video_state(CX,ES,BX);
15847                       00003A40            .41:
15848                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15849 3A40           FF76         0C            push	$C[bp]
15850                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15851 3A43           FF76         16            push	$16[bp]
15852                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15853 3A46           FF76         10            push	$10[bp]
15854                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15855 3A49           E8         366B            call	_biosfn_save_video_state
15856 3A4C           83C4                   06  add	sp,*6
15857                                           !BCC_EOS
15858                                           ! 1754         break;
15859 3A4F           EB           1F            jmp .3D
15860                                           !BCC_EOS
15861                                           ! 1755        case 0x02:
15862                                           ! 1756         biosfn_restore_video_state(CX,ES,BX);
15863                       00003A51            .42:
15864                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15865 3A51           FF76         0C            push	$C[bp]
15866                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15867 3A54           FF76         16            push	$16[bp]
15868                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15869 3A57           FF76         10            push	$10[bp]
15870                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15871 3A5A           E8         3C24            call	_biosfn_restore_video_state
15872 3A5D           83C4                   06  add	sp,*6
15873                                           !BCC_EOS
15874                                           ! 1757         break;
15875 3A60           EB           0E            jmp .3D
15876                                           !BCC_EOS
15877                                           ! 1758       }
15878                                           ! 1759      AX = ((AX & 0xff00) | (0x1C));
15879 3A62           EB           0C            jmp .3D
15880                       00003A64            .3F:
15881 3A64           2C                     00  sub	al,*0
15882 3A66           74           C9            je 	.40
15883 3A68           2C                     01  sub	al,*1
15884 3A6A           74           D4            je 	.41
15885 3A6C           2C                     01  sub	al,*1
15886 3A6E           74           E1            je 	.42
15887                       00003A70            .3D:
15888                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15889 3A70           8B46         12            mov	ax,$12[bp]
15890 3A73           30C0                       xor	al,al
15891                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15892 3A75           0C                     1C  or	al,*$1C
15893                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15894 3A77           8946         12            mov	$12[bp],ax
15895                                           !BCC_EOS
15896                                           ! 1760      break;
15897 3A7A           EB           4F            jmp .1
15898                                           !BCC_EOS
15899                                           ! 1761   }
15900                                           ! 1762 }
15901 3A7C           EB           4D            jmp .1
15902                       00003A7E            .3:
15903 3A7E           2D                   0000  sub	ax,*0
15904 3A81           7C           48            jl  	.1
15905 3A83           3D                   001C  cmp	ax,*$1C
15906 3A86           77           43            ja  	.43
15907 3A88           D1E0                       shl	ax,*1
15908 3A8A           89C3                       mov	bx,ax
15909 3A8C           2E                         seg	cs
15910 3A8D           FFA7       3A91            br	.44[bx]
15911                       00003A91            .44:
15912 3A91                      3659            .word	.4
15913 3A93                      36B7            .word	.13
15914 3A95                      36CE            .word	.14
15915 3A97                      36E2            .word	.15
15916 3A99                      36FB            .word	.16
15917 3A9B                      3712            .word	.17
15918 3A9D                      3720            .word	.18
15919 3A9F                      375B            .word	.19
15920 3AA1                      3795            .word	.1A
15921 3AA3                      37AA            .word	.1B
15922 3AA5                      37CA            .word	.1C
15923 3AA7                      3ACB            .word	.1
15924 3AA9                      37EA            .word	.1D
15925 3AAB                      3807            .word	.1E
15926 3AAD                      3822            .word	.1F
15927 3AAF                      3ACB            .word	.1
15928 3AB1                      383F            .word	.20
15929 3AB3                      384E            .word	.21
15930 3AB5                      398C            .word	.33
15931 3AB7                      39DC            .word	.3A
15932 3AB9                      3ACB            .word	.1
15933 3ABB                      3ACB            .word	.1
15934 3ABD                      3ACB            .word	.1
15935 3ABF                      3ACB            .word	.1
15936 3AC1                      3ACB            .word	.1
15937 3AC3                      3ACB            .word	.1
15938 3AC5                      3ACB            .word	.1
15939 3AC7                      3A10            .word	.3B
15940 3AC9                      3A2C            .word	.3C
15941                       00003ACB            .43:
15942                       00003ACB            .1:
15943                       FFFFFFFE            ..FFFF	=	-2
15944 3ACB           5D                         pop	bp
15945 3ACC           C3                         ret
15946                                           ! 1763 static void load_dac_palette(num) Bit8u num;
15947                                           ! Register BX used in function int10_func
15948                       00003ACD            _load_dac_palette:
15949                                           !BCC_EOS
15950                                           ! 1764 {
15951                                           ! 1765   Bit8u *palette;
15952                                           !BCC_EOS
15953                                           ! 1766   Bit16u i;
15954                                           !BCC_EOS
15955                                           ! 1767   outb(0x3c8,0x00);
15956 3ACD           55                         push	bp
15957 3ACE           89E5                       mov	bp,sp
15958 3AD0           83C4                   FC  add	sp,*-4
15959                                           ! Debug: list int = const 0 (used reg = )
15960 3AD3           31C0                       xor	ax,ax
15961 3AD5           50                         push	ax
15962                                           ! Debug: list int = const $3C8 (used reg = )
15963 3AD6           B8                   03C8  mov	ax,#$3C8
15964 3AD9           50                         push	ax
15965                                           ! Debug: func () void = outb+0 (used reg = )
15966 3ADA           E8         42DA            call	_outb
15967 3ADD           83C4                   04  add	sp,*4
15968                                           !BCC_EOS
15969                                           ! 1768   switch (num)
15970 3AE0           8A46         04            mov	al,4[bp]
15971                                           ! 1769   {
15972 3AE3           EB           22            jmp .47
15973                                           ! 1770     case 0:
15974                                           ! 1771       palette=&palette0;
15975                       00003AE5            .48:
15976                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+6-4] (used reg = )
15977 3AE5           BB                   0A01  mov	bx,#_palette0
15978 3AE8           895E         FE            mov	-2[bp],bx
15979                                           !BCC_EOS
15980                                           ! 1772       break;
15981 3AEB           EB           2A            jmp .45
15982                                           !BCC_EOS
15983                                           ! 1773     case 1:
15984                                           ! 1774       palette=&palette1;
15985                       00003AED            .49:
15986                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+6-4] (used reg = )
15987 3AED           BB                   0AC1  mov	bx,#_palette1
15988 3AF0           895E         FE            mov	-2[bp],bx
15989                                           !BCC_EOS
15990                                           ! 1775       break;
15991 3AF3           EB           22            jmp .45
15992                                           !BCC_EOS
15993                                           ! 1776     case 2:
15994                                           ! 1777       palette=&palette2;
15995                       00003AF5            .4A:
15996                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+6-4] (used reg = )
15997 3AF5           BB                   0B81  mov	bx,#_palette2
15998 3AF8           895E         FE            mov	-2[bp],bx
15999                                           !BCC_EOS
16000                                           ! 1778       break;
16001 3AFB           EB           1A            jmp .45
16002                                           !BCC_EOS
16003                                           ! 1779     case 3:
16004                                           ! 1780       palette=&palette3;
16005                       00003AFD            .4B:
16006                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+6-4] (used reg = )
16007 3AFD           BB                   0C41  mov	bx,#_palette3
16008 3B00           895E         FE            mov	-2[bp],bx
16009                                           !BCC_EOS
16010                                           ! 1781       break;
16011 3B03           EB           12            jmp .45
16012                                           !BCC_EOS
16013                                           ! 1782   }
16014                                           ! 1783   for (i=0;i<0x0100;i++)
16015 3B05           EB           10            jmp .45
16016                       00003B07            .47:
16017 3B07           2C                     00  sub	al,*0
16018 3B09           74           DA            je 	.48
16019 3B0B           2C                     01  sub	al,*1
16020 3B0D           74           DE            je 	.49
16021 3B0F           2C                     01  sub	al,*1
16022 3B11           74           E2            je 	.4A
16023 3B13           2C                     01  sub	al,*1
16024 3B15           74           E6            je 	.4B
16025                       00003B17            .45:
16026                       FFFFFFFA            ..FFFE	=	-6
16027                                           ! Debug: eq int = const 0 to unsigned short i = [S+6-6] (used reg = )
16028 3B17           31C0                       xor	ax,ax
16029 3B19           8946         FC            mov	-4[bp],ax
16030                                           !BCC_EOS
16031                                           !BCC_EOS
16032                                           ! 1784   {
16033 3B1C           E9         009C            br 	.4E
16034                       00003B1F            .4F:
16035                                           ! 1785     if(i<=dac_regs[num])
16036                                           ! Debug: ptradd unsigned char num = [S+6+2] to [4] unsigned char = dac_regs+0 (used reg = )
16037 3B1F           8A46         04            mov	al,4[bp]
16038 3B22           30E4                       xor	ah,ah
16039 3B24           89C3                       mov	bx,ax
16040                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+6-6] (used reg = )
16041 3B26           8A87       027D            mov	al,_dac_regs[bx]
16042 3B2A           30E4                       xor	ah,ah
16043 3B2C           3B46         FC            cmp	ax,-4[bp]
16044 3B2F           72           5C            jb  	.50
16045                       00003B31            .51:
16046                                           ! 1786     {
16047                                           ! 1787       outb(0x3c9,palette[(i*3)+0]);
16048                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16049 3B31           8B46         FC            mov	ax,-4[bp]
16050 3B34           89C2                       mov	dx,ax
16051 3B36           D1E0                       shl	ax,*1
16052 3B38           01D0                       add	ax,dx
16053                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16054                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+6-4] (used reg = )
16055 3B3A           0346         FE            add	ax,-2[bp]
16056 3B3D           89C3                       mov	bx,ax
16057                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16058 3B3F           8A07                       mov	al,[bx]
16059 3B41           30E4                       xor	ah,ah
16060 3B43           50                         push	ax
16061                                           ! Debug: list int = const $3C9 (used reg = )
16062 3B44           B8                   03C9  mov	ax,#$3C9
16063 3B47           50                         push	ax
16064                                           ! Debug: func () void = outb+0 (used reg = )
16065 3B48           E8         426C            call	_outb
16066 3B4B           83C4                   04  add	sp,*4
16067                                           !BCC_EOS
16068                                           ! 1788       outb(0x3c9,palette[(i*3)+1]);
16069                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16070 3B4E           8B46         FC            mov	ax,-4[bp]
16071 3B51           89C2                       mov	dx,ax
16072 3B53           D1E0                       shl	ax,*1
16073 3B55           01D0                       add	ax,dx
16074                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16075                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+6-4] (used reg = )
16076 3B57           40                         inc	ax
16077 3B58           0346         FE            add	ax,-2[bp]
16078 3B5B           89C3                       mov	bx,ax
16079                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16080 3B5D           8A07                       mov	al,[bx]
16081 3B5F           30E4                       xor	ah,ah
16082 3B61           50                         push	ax
16083                                           ! Debug: list int = const $3C9 (used reg = )
16084 3B62           B8                   03C9  mov	ax,#$3C9
16085 3B65           50                         push	ax
16086                                           ! Debug: func () void = outb+0 (used reg = )
16087 3B66           E8         424E            call	_outb
16088 3B69           83C4                   04  add	sp,*4
16089                                           !BCC_EOS
16090                                           ! 1789       outb(0x3c9,palette[(i*3)+2]);
16091                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16092 3B6C           8B46         FC            mov	ax,-4[bp]
16093 3B6F           89C2                       mov	dx,ax
16094 3B71           D1E0                       shl	ax,*1
16095 3B73           01D0                       add	ax,dx
16096                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16097                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+6-4] (used reg = )
16098 3B75           40                         inc	ax
16099 3B76           40                         inc	ax
16100 3B77           0346         FE            add	ax,-2[bp]
16101 3B7A           89C3                       mov	bx,ax
16102                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16103 3B7C           8A07                       mov	al,[bx]
16104 3B7E           30E4                       xor	ah,ah
16105 3B80           50                         push	ax
16106                                           ! Debug: list int = const $3C9 (used reg = )
16107 3B81           B8                   03C9  mov	ax,#$3C9
16108 3B84           50                         push	ax
16109                                           ! Debug: func () void = outb+0 (used reg = )
16110 3B85           E8         422F            call	_outb
16111 3B88           83C4                   04  add	sp,*4
16112                                           !BCC_EOS
16113                                           ! 1790     }
16114                                           ! 1791     else
16115                                           ! 1792     {
16116 3B8B           EB           27            jmp .52
16117                       00003B8D            .50:
16118                                           ! 1793       outb(0x3c9,0);
16119                                           ! Debug: list int = const 0 (used reg = )
16120 3B8D           31C0                       xor	ax,ax
16121 3B8F           50                         push	ax
16122                                           ! Debug: list int = const $3C9 (used reg = )
16123 3B90           B8                   03C9  mov	ax,#$3C9
16124 3B93           50                         push	ax
16125                                           ! Debug: func () void = outb+0 (used reg = )
16126 3B94           E8         4220            call	_outb
16127 3B97           83C4                   04  add	sp,*4
16128                                           !BCC_EOS
16129                                           ! 1794       outb(0x3c9,0);
16130                                           ! Debug: list int = const 0 (used reg = )
16131 3B9A           31C0                       xor	ax,ax
16132 3B9C           50                         push	ax
16133                                           ! Debug: list int = const $3C9 (used reg = )
16134 3B9D           B8                   03C9  mov	ax,#$3C9
16135 3BA0           50                         push	ax
16136                                           ! Debug: func () void = outb+0 (used reg = )
16137 3BA1           E8         4213            call	_outb
16138 3BA4           83C4                   04  add	sp,*4
16139                                           !BCC_EOS
16140                                           ! 1795       outb(0x3c9,0);
16141                                           ! Debug: list int = const 0 (used reg = )
16142 3BA7           31C0                       xor	ax,ax
16143 3BA9           50                         push	ax
16144                                           ! Debug: list int = const $3C9 (used reg = )
16145 3BAA           B8                   03C9  mov	ax,#$3C9
16146 3BAD           50                         push	ax
16147                                           ! Debug: func () void = outb+0 (used reg = )
16148 3BAE           E8         4206            call	_outb
16149 3BB1           83C4                   04  add	sp,*4
16150                                           !BCC_EOS
16151                                           ! 1796     }
16152                                           ! 1797   }
16153                       00003BB4            .52:
16154                                           ! 1798 }
16155                       00003BB4            .4D:
16156                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
16157 3BB4           8B46         FC            mov	ax,-4[bp]
16158 3BB7           40                         inc	ax
16159 3BB8           8946         FC            mov	-4[bp],ax
16160                       00003BBB            .4E:
16161                                           ! Debug: lt int = const $100 to unsigned short i = [S+6-6] (used reg = )
16162 3BBB           8B46         FC            mov	ax,-4[bp]
16163 3BBE           3D                   0100  cmp	ax,#$100
16164 3BC1         0F82         FF5A            blo 	.4F
16165                       00003BC5            .53:
16166                       00003BC5            .4C:
16167 3BC5           89EC                       mov	sp,bp
16168 3BC7           5D                         pop	bp
16169 3BC8           C3                         ret
16170                                           ! 1799 static void biosfn_set_video_mode(mode) Bit8u mode;
16171                                           ! Register BX used in function load_dac_palette
16172                       00003BC9            _biosfn_set_video_mode:
16173                                           !BCC_EOS
16174                                           ! 1800 {
16175                                           ! 1801   Bit8u noclearmem=mode&0x80;
16176 3BC9           55                         push	bp
16177 3BCA           89E5                       mov	bp,sp
16178 3BCC           4C                         dec	sp
16179                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16180 3BCD           8A46         04            mov	al,4[bp]
16181 3BD0           24                     80  and	al,#$80
16182                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16183 3BD2           8846         FF            mov	-1[bp],al
16184                                           !BCC_EOS
16185                                           ! 1802   Bit8u line,mmask,*palette,vpti;
16186                                           !BCC_EOS
16187                                           ! 1803   Bit16u i,twidth,theightm1,cheight;
16188                                           !BCC_EOS
16189                                           ! 1804   Bit8u modeset_ctl,video_ctl,vga_switches;
16190                                           !BCC_EOS
16191                                           ! 1805   Bit16u crtc_addr;
16192                                           !BCC_EOS
16193                                           ! 1806   mode=mode&0x7f;
16194 3BD5           83C4                   EB  add	sp,*-$15
16195                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16196 3BD8           8A46         04            mov	al,4[bp]
16197 3BDB           24                     7F  and	al,*$7F
16198                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16199 3BDD           8846         04            mov	4[bp],al
16200                                           !BCC_EOS
16201                                           ! 1807   line=find_vga_entry(mode);
16202                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16203 3BE0           8A46         04            mov	al,4[bp]
16204 3BE3           30E4                       xor	ah,ah
16205 3BE5           50                         push	ax
16206                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16207 3BE6           E8         4076            call	_find_vga_entry
16208 3BE9           44                         inc	sp
16209 3BEA           44                         inc	sp
16210                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16211 3BEB           8846         FE            mov	-2[bp],al
16212                                           !BCC_EOS
16213                                           ! 1808   if(line==0xFF)
16214                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16215 3BEE           8A46         FE            mov	al,-2[bp]
16216 3BF1           3C                     FF  cmp	al,#$FF
16217 3BF3           75           04            jne 	.54
16218                       00003BF5            .55:
16219                                           ! 1809   
16220                                           ! 1809   return;
16221 3BF5           89EC                       mov	sp,bp
16222 3BF7           5D                         pop	bp
16223 3BF8           C3                         ret
16224                                           !BCC_EOS
16225                                           ! 1810   vpti=line_to_vpti[line];
16226                       00003BF9            .54:
16227                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] unsigned char = line_to_vpti+0 (used reg = )
16228 3BF9           8A46         FE            mov	al,-2[bp]
16229 3BFC           30E4                       xor	ah,ah
16230 3BFE           89C3                       mov	bx,ax
16231                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16232 3C00           8A87       026B            mov	al,_line_to_vpti[bx]
16233 3C04           8846         F9            mov	-7[bp],al
16234                                           !BCC_EOS
16235                                           ! 1811   twidth=video_param_table[vpti].twidth;
16236                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16237 3C07           8A46         F9            mov	al,-7[bp]
16238 3C0A           30E4                       xor	ah,ah
16239 3C0C           B1                     06  mov	cl,*6
16240 3C0E           D3E0                       shl	ax,cl
16241 3C10           89C3                       mov	bx,ax
16242                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16243 3C12           8A87       0281            mov	al,_video_param_table[bx]
16244 3C16           30E4                       xor	ah,ah
16245 3C18           8946         F4            mov	-$C[bp],ax
16246                                           !BCC_EOS
16247                                           ! 1812   theightm1=video_param_table[vpti].theightm1;
16248                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16249 3C1B           8A46         F9            mov	al,-7[bp]
16250 3C1E           30E4                       xor	ah,ah
16251 3C20           B1                     06  mov	cl,*6
16252 3C22           D3E0                       shl	ax,cl
16253 3C24           89C3                       mov	bx,ax
16254 3C26           81C3                 0281  add	bx,#_video_param_table
16255                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16256 3C2A           8A47         01            mov	al,1[bx]
16257 3C2D           30E4                       xor	ah,ah
16258 3C2F           8946         F2            mov	-$E[bp],ax
16259                                           !BCC_EOS
16260                                           ! 1813   cheight=video_param_table[vpti].cheight;
16261                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16262 3C32           8A46         F9            mov	al,-7[bp]
16263 3C35           30E4                       xor	ah,ah
16264 3C37           B1                     06  mov	cl,*6
16265 3C39           D3E0                       shl	ax,cl
16266 3C3B           89C3                       mov	bx,ax
16267 3C3D           81C3                 0281  add	bx,#_video_param_table
16268                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16269 3C41           8A47         02            mov	al,2[bx]
16270 3C44           30E4                       xor	ah,ah
16271 3C46           8946         F0            mov	-$10[bp],ax
16272                                           !BCC_EOS
16273                                           ! 1814   video_ctl=read_byte(0x40,0x87);
16274                                           ! Debug: list int = const $87 (used reg = )
16275 3C49           B8                   0087  mov	ax,#$87
16276 3C4C           50                         push	ax
16277                                           ! Debug: list int = const $40 (used reg = )
16278 3C4D           B8                   0040  mov	ax,*$40
16279 3C50           50                         push	ax
16280                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16281 3C51           E8         40F7            call	_read_byte
16282 3C54           83C4                   04  add	sp,*4
16283                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16284 3C57           8846         EE            mov	-$12[bp],al
16285                                           !BCC_EOS
16286                                           ! 1815   vga_switches=read_byte(0x40,0x88);
16287                                           ! Debug: list int = const $88 (used reg = )
16288 3C5A           B8                   0088  mov	ax,#$88
16289 3C5D           50                         push	ax
16290                                           ! Debug: list int = const $40 (used reg = )
16291 3C5E           B8                   0040  mov	ax,*$40
16292 3C61           50                         push	ax
16293                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16294 3C62           E8         40E6            call	_read_byte
16295 3C65           83C4                   04  add	sp,*4
16296                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16297 3C68           8846         ED            mov	-$13[bp],al
16298                                           !BCC_EOS
16299                                           ! 1816   modeset_ctl=read_byte(0x40,0x89);
16300                                           ! Debug: list int = const $89 (used reg = )
16301 3C6B           B8                   0089  mov	ax,#$89
16302 3C6E           50                         push	ax
16303                                           ! Debug: list int = const $40 (used reg = )
16304 3C6F           B8                   0040  mov	ax,*$40
16305 3C72           50                         push	ax
16306                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16307 3C73           E8         40D5            call	_read_byte
16308 3C76           83C4                   04  add	sp,*4
16309                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16310 3C79           8846         EF            mov	-$11[bp],al
16311                                           !BCC_EOS
16312                                           ! 1817   if((modeset_ctl&0x08)==0)
16313                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16314 3C7C           8A46         EF            mov	al,-$11[bp]
16315 3C7F           24                     08  and	al,*8
16316                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16317 3C81           84C0                       test	al,al
16318 3C83           75           4F            jne 	.56
16319                       00003C85            .57:
16320                                           ! 1818   {
16321                                           ! 1819     outb(0x3c6,vga_modes[line].pelmask);
16322                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16323 3C85           8A46         FE            mov	al,-2[bp]
16324 3C88           30E4                       xor	ah,ah
16325 3C8A           B1                     03  mov	cl,*3
16326 3C8C           D3E0                       shl	ax,cl
16327 3C8E           89C3                       mov	bx,ax
16328 3C90           81C3                 01DB  add	bx,#_vga_modes
16329                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16330 3C94           8A47         06            mov	al,6[bx]
16331 3C97           30E4                       xor	ah,ah
16332 3C99           50                         push	ax
16333                                           ! Debug: list int = const $3C6 (used reg = )
16334 3C9A           B8                   03C6  mov	ax,#$3C6
16335 3C9D           50                         push	ax
16336                                           ! Debug: func () void = outb+0 (used reg = )
16337 3C9E           E8         4116            call	_outb
16338 3CA1           83C4                   04  add	sp,*4
16339                                           !BCC_EOS
16340                                           ! 1820     load_dac_palette(vga_modes[line].dacmodel);
16341                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16342 3CA4           8A46         FE            mov	al,-2[bp]
16343 3CA7           30E4                       xor	ah,ah
16344 3CA9           B1                     03  mov	cl,*3
16345 3CAB           D3E0                       shl	ax,cl
16346 3CAD           89C3                       mov	bx,ax
16347 3CAF           81C3                 01DB  add	bx,#_vga_modes
16348                                           ! Debug: list unsigned char = [bx+7] (used reg = )
16349 3CB3           8A47         07            mov	al,7[bx]
16350 3CB6           30E4                       xor	ah,ah
16351 3CB8           50                         push	ax
16352                                           ! Debug: func () void = load_dac_palette+0 (used reg = )
16353 3CB9           E8         FE11            call	_load_dac_palette
16354 3CBC           44                         inc	sp
16355 3CBD           44                         inc	sp
16356                                           !BCC_EOS
16357                                           ! 1821     if((modeset_ctl&0x02)==0x02)
16358                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16359 3CBE           8A46         EF            mov	al,-$11[bp]
16360 3CC1           24                     02  and	al,*2
16361                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16362 3CC3           3C                     02  cmp	al,*2
16363 3CC5           75           0D            jne 	.58
16364                       00003CC7            .59:
16365                                           ! 1822     {
16366                                           ! 1823       biosfn_perform_gray_scale_summing(0x00, 0x100);
16367                                           ! Debug: list int = const $100 (used reg = )
16368 3CC7           B8                   0100  mov	ax,#$100
16369 3CCA           50                         push	ax
16370                                           ! Debug: list int = const 0 (used reg = )
16371 3CCB           31C0                       xor	ax,ax
16372 3CCD           50                         push	ax
16373                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16374 3CCE           E8         2709            call	_biosfn_perform_gray_scale_summing
16375 3CD1           83C4                   04  add	sp,*4
16376                                           !BCC_EOS
16377                                           ! 1824     }
16378                                           ! 1825   }
16379                       00003CD4            .58:
16380                                           ! 1826   inb(0x3da);
16381                       00003CD4            .56:
16382                                           ! Debug: list int = const $3DA (used reg = )
16383 3CD4           B8                   03DA  mov	ax,#$3DA
16384 3CD7           50                         push	ax
16385                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16386 3CD8           E8         40C6            call	_inb
16387 3CDB           44                         inc	sp
16388 3CDC           44                         inc	sp
16389                                           !BCC_EOS
16390                                           ! 1827  for(i=0;i<=0x13;i++)
16391                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16392 3CDD           31C0                       xor	ax,ax
16393 3CDF           8946         F6            mov	-$A[bp],ax
16394                                           !BCC_EOS
16395                                           !BCC_EOS
16396                                           ! 1828   {outb(0x3c0,i);
16397 3CE2           EB           38            jmp .5C
16398                       00003CE4            .5D:
16399                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16400 3CE4           FF76         F6            push	-$A[bp]
16401                                           ! Debug: list int = const $3C0 (used reg = )
16402 3CE7           B8                   03C0  mov	ax,#$3C0
16403 3CEA           50                         push	ax
16404                                           ! Debug: func () void = outb+0 (used reg = )
16405 3CEB           E8         40C9            call	_outb
16406 3CEE           83C4                   04  add	sp,*4
16407                                           !BCC_EOS
16408                                           ! 1829    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16409                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16410 3CF1           8A46         F9            mov	al,-7[bp]
16411 3CF4           30E4                       xor	ah,ah
16412 3CF6           B1                     06  mov	cl,*6
16413 3CF8           D3E0                       shl	ax,cl
16414 3CFA           89C3                       mov	bx,ax
16415 3CFC           81C3                 0281  add	bx,#_video_param_table
16416                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16417 3D00           8B46         F6            mov	ax,-$A[bp]
16418 3D03           01C3                       add	bx,ax
16419                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16420 3D05           8A47         23            mov	al,$23[bx]
16421 3D08           30E4                       xor	ah,ah
16422 3D0A           50                         push	ax
16423                                           ! Debug: list int = const $3C0 (used reg = )
16424 3D0B           B8                   03C0  mov	ax,#$3C0
16425 3D0E           50                         push	ax
16426                                           ! Debug: func () void = outb+0 (used reg = )
16427 3D0F           E8         40A5            call	_outb
16428 3D12           83C4                   04  add	sp,*4
16429                                           !BCC_EOS
16430                                           ! 1830   }
16431                                           ! 1831  outb(0x3c0,0x14);
16432                       00003D15            .5B:
16433                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16434 3D15           8B46         F6            mov	ax,-$A[bp]
16435 3D18           40                         inc	ax
16436 3D19           8946         F6            mov	-$A[bp],ax
16437                       00003D1C            .5C:
16438                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16439 3D1C           8B46         F6            mov	ax,-$A[bp]
16440 3D1F           3D                   0013  cmp	ax,*$13
16441 3D22           76           C0            jbe	.5D
16442                       00003D24            .5E:
16443                       00003D24            .5A:
16444                                           ! Debug: list int = const $14 (used reg = )
16445 3D24           B8                   0014  mov	ax,*$14
16446 3D27           50                         push	ax
16447                                           ! Debug: list int = const $3C0 (used reg = )
16448 3D28           B8                   03C0  mov	ax,#$3C0
16449 3D2B           50                         push	ax
16450                                           ! Debug: func () void = outb+0 (used reg = )
16451 3D2C           E8         4088            call	_outb
16452 3D2F           83C4                   04  add	sp,*4
16453                                           !BCC_EOS
16454                                           ! 1832  outb(0x3c0,0x00);
16455                                           ! Debug: list int = const 0 (used reg = )
16456 3D32           31C0                       xor	ax,ax
16457 3D34           50                         push	ax
16458                                           ! Debug: list int = const $3C0 (used reg = )
16459 3D35           B8                   03C0  mov	ax,#$3C0
16460 3D38           50                         push	ax
16461                                           ! Debug: func () void = outb+0 (used reg = )
16462 3D39           E8         407B            call	_outb
16463 3D3C           83C4                   04  add	sp,*4
16464                                           !BCC_EOS
16465                                           ! 1833  outb(0x3c4,0);
16466                                           ! Debug: list int = const 0 (used reg = )
16467 3D3F           31C0                       xor	ax,ax
16468 3D41           50                         push	ax
16469                                           ! Debug: list int = const $3C4 (used reg = )
16470 3D42           B8                   03C4  mov	ax,#$3C4
16471 3D45           50                         push	ax
16472                                           ! Debug: func () void = outb+0 (used reg = )
16473 3D46           E8         406E            call	_outb
16474 3D49           83C4                   04  add	sp,*4
16475                                           !BCC_EOS
16476                                           ! 1834  outb(0x3c5,0x03);
16477                                           ! Debug: list int = const 3 (used reg = )
16478 3D4C           B8                   0003  mov	ax,*3
16479 3D4F           50                         push	ax
16480                                           ! Debug: list int = const $3C5 (used reg = )
16481 3D50           B8                   03C5  mov	ax,#$3C5
16482 3D53           50                         push	ax
16483                                           ! Debug: func () void = outb+0 (used reg = )
16484 3D54           E8         4060            call	_outb
16485 3D57           83C4                   04  add	sp,*4
16486                                           !BCC_EOS
16487                                           ! 1835  for(i=1;i<=4;i++)
16488                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16489 3D5A           B8                   0001  mov	ax,*1
16490 3D5D           8946         F6            mov	-$A[bp],ax
16491                                           !BCC_EOS
16492                                           !BCC_EOS
16493                                           ! 1836   {outb(0x3c4,i);
16494 3D60           EB           3F            jmp .61
16495                       00003D62            .62:
16496                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16497 3D62           FF76         F6            push	-$A[bp]
16498                                           ! Debug: list int = const $3C4 (used reg = )
16499 3D65           B8                   03C4  mov	ax,#$3C4
16500 3D68           50                         push	ax
16501                                           ! Debug: func () void = outb+0 (used reg = )
16502 3D69           E8         404B            call	_outb
16503 3D6C           83C4                   04  add	sp,*4
16504                                           !BCC_EOS
16505                                           ! 1837    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16506                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16507 3D6F           8B46         F6            mov	ax,-$A[bp]
16508 3D72           48                         dec	ax
16509 3D73           50                         push	ax
16510                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16511 3D74           8A46         F9            mov	al,-7[bp]
16512 3D77           30E4                       xor	ah,ah
16513 3D79           B1                     06  mov	cl,*6
16514 3D7B           D3E0                       shl	ax,cl
16515 3D7D           89C3                       mov	bx,ax
16516 3D7F           81C3                 0281  add	bx,#_video_param_table
16517                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16518 3D83           8B46         E8            mov	ax,-$18[bp]
16519 3D86           01C3                       add	bx,ax
16520 3D88           44                         inc	sp
16521 3D89           44                         inc	sp
16522                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16523 3D8A           8A47         05            mov	al,5[bx]
16524 3D8D           30E4                       xor	ah,ah
16525 3D8F           50                         push	ax
16526                                           ! Debug: list int = const $3C5 (used reg = )
16527 3D90           B8                   03C5  mov	ax,#$3C5
16528 3D93           50                         push	ax
16529                                           ! Debug: func () void = outb+0 (used reg = )
16530 3D94           E8         4020            call	_outb
16531 3D97           83C4                   04  add	sp,*4
16532                                           !BCC_EOS
16533                                           ! 1838   }
16534                                           ! 1839  for(i=0;i<=8;i++)
16535                       00003D9A            .60:
16536                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16537 3D9A           8B46         F6            mov	ax,-$A[bp]
16538 3D9D           40                         inc	ax
16539 3D9E           8946         F6            mov	-$A[bp],ax
16540                       00003DA1            .61:
16541                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16542 3DA1           8B46         F6            mov	ax,-$A[bp]
16543 3DA4           3D                   0004  cmp	ax,*4
16544 3DA7           76           B9            jbe	.62
16545                       00003DA9            .63:
16546                       00003DA9            .5F:
16547                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16548 3DA9           31C0                       xor	ax,ax
16549 3DAB           8946         F6            mov	-$A[bp],ax
16550                                           !BCC_EOS
16551                                           !BCC_EOS
16552                                           ! 1840   {outb(0x3ce,i);
16553 3DAE           EB           38            jmp .66
16554                       00003DB0            .67:
16555                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16556 3DB0           FF76         F6            push	-$A[bp]
16557                                           ! Debug: list int = const $3CE (used reg = )
16558 3DB3           B8                   03CE  mov	ax,#$3CE
16559 3DB6           50                         push	ax
16560                                           ! Debug: func () void = outb+0 (used reg = )
16561 3DB7           E8         3FFD            call	_outb
16562 3DBA           83C4                   04  add	sp,*4
16563                                           !BCC_EOS
16564                                           ! 1841    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16565                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16566 3DBD           8A46         F9            mov	al,-7[bp]
16567 3DC0           30E4                       xor	ah,ah
16568 3DC2           B1                     06  mov	cl,*6
16569 3DC4           D3E0                       shl	ax,cl
16570 3DC6           89C3                       mov	bx,ax
16571 3DC8           81C3                 0281  add	bx,#_video_param_table
16572                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16573 3DCC           8B46         F6            mov	ax,-$A[bp]
16574 3DCF           01C3                       add	bx,ax
16575                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16576 3DD1           8A47         37            mov	al,$37[bx]
16577 3DD4           30E4                       xor	ah,ah
16578 3DD6           50                         push	ax
16579                                           ! Debug: list int = const $3CF (used reg = )
16580 3DD7           B8                   03CF  mov	ax,#$3CF
16581 3DDA           50                         push	ax
16582                                           ! Debug: func () void = outb+0 (used reg = )
16583 3DDB           E8         3FD9            call	_outb
16584 3DDE           83C4                   04  add	sp,*4
16585                                           !BCC_EOS
16586                                           ! 1842   }
16587                                           ! 1843  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16588                       00003DE1            .65:
16589                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16590 3DE1           8B46         F6            mov	ax,-$A[bp]
16591 3DE4           40                         inc	ax
16592 3DE5           8946         F6            mov	-$A[bp],ax
16593                       00003DE8            .66:
16594                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16595 3DE8           8B46         F6            mov	ax,-$A[bp]
16596 3DEB           3D                   0008  cmp	ax,*8
16597 3DEE           76           C0            jbe	.67
16598                       00003DF0            .68:
16599                       00003DF0            .64:
16600                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16601 3DF0           8A46         FE            mov	al,-2[bp]
16602 3DF3           30E4                       xor	ah,ah
16603 3DF5           B1                     03  mov	cl,*3
16604 3DF7           D3E0                       shl	ax,cl
16605 3DF9           89C3                       mov	bx,ax
16606 3DFB           81C3                 01DB  add	bx,#_vga_modes
16607                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16608 3DFF           8A47         02            mov	al,2[bx]
16609 3E02           3C                     01  cmp	al,*1
16610 3E04           75           05            jne 	.69
16611                       00003E06            .6A:
16612 3E06           B8                   03B4  mov	ax,#$3B4
16613 3E09           EB           03            jmp .6B
16614                       00003E0B            .69:
16615 3E0B           B8                   03D4  mov	ax,#$3D4
16616                       00003E0E            .6B:
16617                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16618 3E0E           8946         EA            mov	-$16[bp],ax
16619                                           !BCC_EOS
16620                                           ! 1844  outw(crtc_addr,0x0011);
16621                                           ! Debug: list int = const $11 (used reg = )
16622 3E11           B8                   0011  mov	ax,*$11
16623 3E14           50                         push	ax
16624                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16625 3E15           FF76         EA            push	-$16[bp]
16626                                           ! Debug: func () void = outw+0 (used reg = )
16627 3E18           E8         3FAC            call	_outw
16628 3E1B           83C4                   04  add	sp,*4
16629                                           !BCC_EOS
16630                                           ! 1845  for(i=0;i<=0x18;i++)
16631                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16632 3E1E           31C0                       xor	ax,ax
16633 3E20           8946         F6            mov	-$A[bp],ax
16634                                           !BCC_EOS
16635                                           !BCC_EOS
16636                                           ! 1846   {outb(crtc_addr,i);
16637 3E23           EB           38            jmp .6E
16638                       00003E25            .6F:
16639                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16640 3E25           FF76         F6            push	-$A[bp]
16641                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16642 3E28           FF76         EA            push	-$16[bp]
16643                                           ! Debug: func () void = outb+0 (used reg = )
16644 3E2B           E8         3F89            call	_outb
16645 3E2E           83C4                   04  add	sp,*4
16646                                           !BCC_EOS
16647                                           ! 1847    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16648                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16649 3E31           8A46         F9            mov	al,-7[bp]
16650 3E34           30E4                       xor	ah,ah
16651 3E36           B1                     06  mov	cl,*6
16652 3E38           D3E0                       shl	ax,cl
16653 3E3A           89C3                       mov	bx,ax
16654 3E3C           81C3                 0281  add	bx,#_video_param_table
16655                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16656 3E40           8B46         F6            mov	ax,-$A[bp]
16657 3E43           01C3                       add	bx,ax
16658                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16659 3E45           8A47         0A            mov	al,$A[bx]
16660 3E48           30E4                       xor	ah,ah
16661 3E4A           50                         push	ax
16662                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16663 3E4B           8B46         EA            mov	ax,-$16[bp]
16664                                           ! Debug: list unsigned int = ax+1 (used reg = )
16665 3E4E           40                         inc	ax
16666 3E4F           50                         push	ax
16667                                           ! Debug: func () void = outb+0 (used reg = )
16668 3E50           E8         3F64            call	_outb
16669 3E53           83C4                   04  add	sp,*4
16670                                           !BCC_EOS
16671                                           ! 1848   }
16672                                           ! 1849  outb(0x3c2,video_param_table[vpti].miscreg);
16673                       00003E56            .6D:
16674                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16675 3E56           8B46         F6            mov	ax,-$A[bp]
16676 3E59           40                         inc	ax
16677 3E5A           8946         F6            mov	-$A[bp],ax
16678                       00003E5D            .6E:
16679                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16680 3E5D           8B46         F6            mov	ax,-$A[bp]
16681 3E60           3D                   0018  cmp	ax,*$18
16682 3E63           76           C0            jbe	.6F
16683                       00003E65            .70:
16684                       00003E65            .6C:
16685                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16686 3E65           8A46         F9            mov	al,-7[bp]
16687 3E68           30E4                       xor	ah,ah
16688 3E6A           B1                     06  mov	cl,*6
16689 3E6C           D3E0                       shl	ax,cl
16690 3E6E           89C3                       mov	bx,ax
16691 3E70           81C3                 0281  add	bx,#_video_param_table
16692                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16693 3E74           8A47         09            mov	al,9[bx]
16694 3E77           30E4                       xor	ah,ah
16695 3E79           50                         push	ax
16696                                           ! Debug: list int = const $3C2 (used reg = )
16697 3E7A           B8                   03C2  mov	ax,#$3C2
16698 3E7D           50                         push	ax
16699                                           ! Debug: func () void = outb+0 (used reg = )
16700 3E7E           E8         3F36            call	_outb
16701 3E81           83C4                   04  add	sp,*4
16702                                           !BCC_EOS
16703                                           ! 1850  outb(0x3c0,0x20);
16704                                           ! Debug: list int = const $20 (used reg = )
16705 3E84           B8                   0020  mov	ax,*$20
16706 3E87           50                         push	ax
16707                                           ! Debug: list int = const $3C0 (used reg = )
16708 3E88           B8                   03C0  mov	ax,#$3C0
16709 3E8B           50                         push	ax
16710                                           ! Debug: func () void = outb+0 (used reg = )
16711 3E8C           E8         3F28            call	_outb
16712 3E8F           83C4                   04  add	sp,*4
16713                                           !BCC_EOS
16714                                           ! 1851  inb(0x3da);
16715                                           ! Debug: list int = const $3DA (used reg = )
16716 3E92           B8                   03DA  mov	ax,#$3DA
16717 3E95           50                         push	ax
16718                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16719 3E96           E8         3F08            call	_inb
16720 3E99           44                         inc	sp
16721 3E9A           44                         inc	sp
16722                                           !BCC_EOS
16723                                           ! 1852  if(noclearmem==0x00)
16724                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16725 3E9B           8A46         FF            mov	al,-1[bp]
16726 3E9E           84C0                       test	al,al
16727 3EA0         0F85         00C1            bne 	.71
16728                       00003EA4            .72:
16729                                           ! 1853   {
16730                                           ! 1854    if(vga_modes[line].class==0x00)
16731                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16732 3EA4           8A46         FE            mov	al,-2[bp]
16733 3EA7           30E4                       xor	ah,ah
16734 3EA9           B1                     03  mov	cl,*3
16735 3EAB           D3E0                       shl	ax,cl
16736 3EAD           89C3                       mov	bx,ax
16737 3EAF           81C3                 01DB  add	bx,#_vga_modes
16738                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16739 3EB3           8A47         01            mov	al,1[bx]
16740 3EB6           84C0                       test	al,al
16741 3EB8           75           26            jne 	.73
16742                       00003EBA            .74:
16743                                           ! 1855     {
16744                                           ! 1856      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16745                                           ! Debug: list int = const $4000 (used reg = )
16746 3EBA           B8                   4000  mov	ax,#$4000
16747 3EBD           50                         push	ax
16748                                           ! Debug: list int = const $720 (used reg = )
16749 3EBE           B8                   0720  mov	ax,#$720
16750 3EC1           50                         push	ax
16751                                           ! Debug: list int = const 0 (used reg = )
16752 3EC2           31C0                       xor	ax,ax
16753 3EC4           50                         push	ax
16754                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
16755 3EC5           8A46         FE            mov	al,-2[bp]
16756 3EC8           30E4                       xor	ah,ah
16757 3ECA           B1                     03  mov	cl,*3
16758 3ECC           D3E0                       shl	ax,cl
16759 3ECE           89C3                       mov	bx,ax
16760 3ED0           81C3                 01DB  add	bx,#_vga_modes
16761                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16762 3ED4           FF77         04            push	4[bx]
16763                                           ! Debug: func () void = memsetw+0 (used reg = )
16764 3ED7           E8         3DEC            call	_memsetw
16765 3EDA           83C4                   08  add	sp,*8
16766                                           !BCC_EOS
16767                                           ! 1857     }
16768                                           ! 1858    else
16769                                           ! 1859     {
16770 3EDD           E9         0085            br 	.75
16771                       00003EE0            .73:
16772                                           ! 1860      if(mode<0x0d)
16773                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16774 3EE0           8A46         04            mov	al,4[bp]
16775 3EE3           3C                     0D  cmp	al,*$D
16776 3EE5           73           24            jae 	.76
16777                       00003EE7            .77:
16778                                           ! 1861       {
16779                                           ! 1862        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16780                                           ! Debug: list int = const $4000 (used reg = )
16781 3EE7           B8                   4000  mov	ax,#$4000
16782 3EEA           50                         push	ax
16783                                           ! Debug: list int = const 0 (used reg = )
16784 3EEB           31C0                       xor	ax,ax
16785 3EED           50                         push	ax
16786                                           ! Debug: list int = const 0 (used reg = )
16787 3EEE           31C0                       xor	ax,ax
16788 3EF0           50                         push	ax
16789                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
16790 3EF1           8A46         FE            mov	al,-2[bp]
16791 3EF4           30E4                       xor	ah,ah
16792 3EF6           B1                     03  mov	cl,*3
16793 3EF8           D3E0                       shl	ax,cl
16794 3EFA           89C3                       mov	bx,ax
16795 3EFC           81C3                 01DB  add	bx,#_vga_modes
16796                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16797 3F00           FF77         04            push	4[bx]
16798                                           ! Debug: func () void = memsetw+0 (used reg = )
16799 3F03           E8         3DC0            call	_memsetw
16800 3F06           83C4                   08  add	sp,*8
16801                                           !BCC_EOS
16802                                           ! 1863       }
16803                                           ! 1864      else
16804                                           ! 1865       {
16805 3F09           EB           5A            jmp .78
16806                       00003F0B            .76:
16807                                           ! 1866        outb( 0x3c4, 0x02 );
16808                                           ! Debug: list int = const 2 (used reg = )
16809 3F0B           B8                   0002  mov	ax,*2
16810 3F0E           50                         push	ax
16811                                           ! Debug: list int = const $3C4 (used reg = )
16812 3F0F           B8                   03C4  mov	ax,#$3C4
16813 3F12           50                         push	ax
16814                                           ! Debug: func () void = outb+0 (used reg = )
16815 3F13           E8         3EA1            call	_outb
16816 3F16           83C4                   04  add	sp,*4
16817                                           !BCC_EOS
16818                                           ! 1867        mmask = inb( 0x3c5 );
16819                                           ! Debug: list int = const $3C5 (used reg = )
16820 3F19           B8                   03C5  mov	ax,#$3C5
16821 3F1C           50                         push	ax
16822                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16823 3F1D           E8         3E81            call	_inb
16824 3F20           44                         inc	sp
16825 3F21           44                         inc	sp
16826                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16827 3F22           8846         FD            mov	-3[bp],al
16828                                           !BCC_EOS
16829                                           ! 1868        outb( 0x3c5, 0x0f );
16830                                           ! Debug: list int = const $F (used reg = )
16831 3F25           B8                   000F  mov	ax,*$F
16832 3F28           50                         push	ax
16833                                           ! Debug: list int = const $3C5 (used reg = )
16834 3F29           B8                   03C5  mov	ax,#$3C5
16835 3F2C           50                         push	ax
16836                                           ! Debug: func () void = outb+0 (used reg = )
16837 3F2D           E8         3E87            call	_outb
16838 3F30           83C4                   04  add	sp,*4
16839                                           !BCC_EOS
16840                                           ! 1869        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16841                                           ! Debug: list unsigned int = const $8000 (used reg = )
16842 3F33           B8                   8000  mov	ax,#$8000
16843 3F36           50                         push	ax
16844                                           ! Debug: list int = const 0 (used reg = )
16845 3F37           31C0                       xor	ax,ax
16846 3F39           50                         push	ax
16847                                           ! Debug: list int = const 0 (used reg = )
16848 3F3A           31C0                       xor	ax,ax
16849 3F3C           50                         push	ax
16850                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
16851 3F3D           8A46         FE            mov	al,-2[bp]
16852 3F40           30E4                       xor	ah,ah
16853 3F42           B1                     03  mov	cl,*3
16854 3F44           D3E0                       shl	ax,cl
16855 3F46           89C3                       mov	bx,ax
16856 3F48           81C3                 01DB  add	bx,#_vga_modes
16857                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16858 3F4C           FF77         04            push	4[bx]
16859                                           ! Debug: func () void = memsetw+0 (used reg = )
16860 3F4F           E8         3D74            call	_memsetw
16861 3F52           83C4                   08  add	sp,*8
16862                                           !BCC_EOS
16863                                           ! 1870        outb( 0x3c5, mmask );
16864                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16865 3F55           8A46         FD            mov	al,-3[bp]
16866 3F58           30E4                       xor	ah,ah
16867 3F5A           50                         push	ax
16868                                           ! Debug: list int = const $3C5 (used reg = )
16869 3F5B           B8                   03C5  mov	ax,#$3C5
16870 3F5E           50                         push	ax
16871                                           ! Debug: func () void = outb+0 (used reg = )
16872 3F5F           E8         3E55            call	_outb
16873 3F62           83C4                   04  add	sp,*4
16874                                           !BCC_EOS
16875                                           ! 1871       }
16876                                           ! 1872     }
16877                       00003F65            .78:
16878                                           ! 1873   }
16879                       00003F65            .75:
16880                                           ! 1874  write_byte(0x40,0x49,mode);
16881                       00003F65            .71:
16882                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16883 3F65           8A46         04            mov	al,4[bp]
16884 3F68           30E4                       xor	ah,ah
16885 3F6A           50                         push	ax
16886                                           ! Debug: list int = const $49 (used reg = )
16887 3F6B           B8                   0049  mov	ax,*$49
16888 3F6E           50                         push	ax
16889                                           ! Debug: list int = const $40 (used reg = )
16890 3F6F           B8                   0040  mov	ax,*$40
16891 3F72           50                         push	ax
16892                                           ! Debug: func () void = write_byte+0 (used reg = )
16893 3F73           E8         3DFB            call	_write_byte
16894 3F76           83C4                   06  add	sp,*6
16895                                           !BCC_EOS
16896                                           ! 1875  write_word(0x40,0x4A,twidth);
16897                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16898 3F79           FF76         F4            push	-$C[bp]
16899                                           ! Debug: list int = const $4A (used reg = )
16900 3F7C           B8                   004A  mov	ax,*$4A
16901 3F7F           50                         push	ax
16902                                           ! Debug: list int = const $40 (used reg = )
16903 3F80           B8                   0040  mov	ax,*$40
16904 3F83           50                         push	ax
16905                                           ! Debug: func () void = write_word+0 (used reg = )
16906 3F84           E8         3E02            call	_write_word
16907 3F87           83C4                   06  add	sp,*6
16908                                           !BCC_EOS
16909                                           ! 1876  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16910                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16911 3F8A           8A46         F9            mov	al,-7[bp]
16912 3F8D           30E4                       xor	ah,ah
16913 3F8F           B1                     06  mov	cl,*6
16914 3F91           D3E0                       shl	ax,cl
16915 3F93           89C3                       mov	bx,ax
16916 3F95           81C3                 0281  add	bx,#_video_param_table
16917                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16918                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16919                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16920 3F99           FF77         03            push	3[bx]
16921                                           ! Debug: list int = const $4C (used reg = )
16922 3F9C           B8                   004C  mov	ax,*$4C
16923 3F9F           50                         push	ax
16924                                           ! Debug: list int = const $40 (used reg = )
16925 3FA0           B8                   0040  mov	ax,*$40
16926 3FA3           50                         push	ax
16927                                           ! Debug: func () void = write_word+0 (used reg = )
16928 3FA4           E8         3DE2            call	_write_word
16929 3FA7           83C4                   06  add	sp,*6
16930                                           !BCC_EOS
16931                                           ! 1877  write_word(0x40,0x63,crtc_addr);
16932                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16933 3FAA           FF76         EA            push	-$16[bp]
16934                                           ! Debug: list int = const $63 (used reg = )
16935 3FAD           B8                   0063  mov	ax,*$63
16936 3FB0           50                         push	ax
16937                                           ! Debug: list int = const $40 (used reg = )
16938 3FB1           B8                   0040  mov	ax,*$40
16939 3FB4           50                         push	ax
16940                                           ! Debug: func () void = write_word+0 (used reg = )
16941 3FB5           E8         3DD1            call	_write_word
16942 3FB8           83C4                   06  add	sp,*6
16943                                           !BCC_EOS
16944                                           ! 1878  write_byte(0x40,0x84,theightm1);
16945                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16946 3FBB           FF76         F2            push	-$E[bp]
16947                                           ! Debug: list int = const $84 (used reg = )
16948 3FBE           B8                   0084  mov	ax,#$84
16949 3FC1           50                         push	ax
16950                                           ! Debug: list int = const $40 (used reg = )
16951 3FC2           B8                   0040  mov	ax,*$40
16952 3FC5           50                         push	ax
16953                                           ! Debug: func () void = write_byte+0 (used reg = )
16954 3FC6           E8         3DA8            call	_write_byte
16955 3FC9           83C4                   06  add	sp,*6
16956                                           !BCC_EOS
16957                                           ! 1879  write_word(0x40,0x85,cheight);
16958                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16959 3FCC           FF76         F0            push	-$10[bp]
16960                                           ! Debug: list int = const $85 (used reg = )
16961 3FCF           B8                   0085  mov	ax,#$85
16962 3FD2           50                         push	ax
16963                                           ! Debug: list int = const $40 (used reg = )
16964 3FD3           B8                   0040  mov	ax,*$40
16965 3FD6           50                         push	ax
16966                                           ! Debug: func () void = write_word+0 (used reg = )
16967 3FD7           E8         3DAF            call	_write_word
16968 3FDA           83C4                   06  add	sp,*6
16969                                           !BCC_EOS
16970                                           ! 1880  write_byte(0x40,0x87,(0x60|noclearmem));
16971                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
16972                                           ! Debug: expression subtree swapping
16973 3FDD           8A46         FF            mov	al,-1[bp]
16974 3FE0           0C                     60  or	al,*$60
16975                                           ! Debug: list unsigned char = al+0 (used reg = )
16976 3FE2           30E4                       xor	ah,ah
16977 3FE4           50                         push	ax
16978                                           ! Debug: list int = const $87 (used reg = )
16979 3FE5           B8                   0087  mov	ax,#$87
16980 3FE8           50                         push	ax
16981                                           ! Debug: list int = const $40 (used reg = )
16982 3FE9           B8                   0040  mov	ax,*$40
16983 3FEC           50                         push	ax
16984                                           ! Debug: func () void = write_byte+0 (used reg = )
16985 3FED           E8         3D81            call	_write_byte
16986 3FF0           83C4                   06  add	sp,*6
16987                                           !BCC_EOS
16988                                           ! 1881  write_byte(0x40,0x88,0xF9);
16989                                           ! Debug: list int = const $F9 (used reg = )
16990 3FF3           B8                   00F9  mov	ax,#$F9
16991 3FF6           50                         push	ax
16992                                           ! Debug: list int = const $88 (used reg = )
16993 3FF7           B8                   0088  mov	ax,#$88
16994 3FFA           50                         push	ax
16995                                           ! Debug: list int = const $40 (used reg = )
16996 3FFB           B8                   0040  mov	ax,*$40
16997 3FFE           50                         push	ax
16998                                           ! Debug: func () void = write_byte+0 (used reg = )
16999 3FFF           E8         3D6F            call	_write_byte
17000 4002           83C4                   06  add	sp,*6
17001                                           !BCC_EOS
17002                                           ! 1882  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17003                                           ! Debug: list int = const $89 (used reg = )
17004 4005           B8                   0089  mov	ax,#$89
17005 4008           50                         push	ax
17006                                           ! Debug: list int = const $40 (used reg = )
17007 4009           B8                   0040  mov	ax,*$40
17008 400C           50                         push	ax
17009                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17010 400D           E8         3D3B            call	_read_byte
17011 4010           83C4                   04  add	sp,*4
17012                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17013 4013           24                     7F  and	al,*$7F
17014                                           ! Debug: list unsigned char = al+0 (used reg = )
17015 4015           30E4                       xor	ah,ah
17016 4017           50                         push	ax
17017                                           ! Debug: list int = const $89 (used reg = )
17018 4018           B8                   0089  mov	ax,#$89
17019 401B           50                         push	ax
17020                                           ! Debug: list int = const $40 (used reg = )
17021 401C           B8                   0040  mov	ax,*$40
17022 401F           50                         push	ax
17023                                           ! Debug: func () void = write_byte+0 (used reg = )
17024 4020           E8         3D4E            call	_write_byte
17025 4023           83C4                   06  add	sp,*6
17026                                           !BCC_EOS
17027                                           ! 1883  write_byte(0x40,0x8A,0x08);
17028                                           ! Debug: list int = const 8 (used reg = )
17029 4026           B8                   0008  mov	ax,*8
17030 4029           50                         push	ax
17031                                           ! Debug: list int = const $8A (used reg = )
17032 402A           B8                   008A  mov	ax,#$8A
17033 402D           50                         push	ax
17034                                           ! Debug: list int = const $40 (used reg = )
17035 402E           B8                   0040  mov	ax,*$40
17036 4031           50                         push	ax
17037                                           ! Debug: func () void = write_byte+0 (used reg = )
17038 4032           E8         3D3C            call	_write_byte
17039 4035           83C4                   06  add	sp,*6
17040                                           !BCC_EOS
17041                                           ! 1884  write_word(0x40,0xA8, video_save_pointer_table);
17042                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17043 4038           BB                   35EA  mov	bx,#_video_save_pointer_table
17044 403B           53                         push	bx
17045                                           ! Debug: list int = const $A8 (used reg = )
17046 403C           B8                   00A8  mov	ax,#$A8
17047 403F           50                         push	ax
17048                                           ! Debug: list int = const $40 (used reg = )
17049 4040           B8                   0040  mov	ax,*$40
17050 4043           50                         push	ax
17051                                           ! Debug: func () void = write_word+0 (used reg = )
17052 4044           E8         3D42            call	_write_word
17053 4047           83C4                   06  add	sp,*6
17054                                           !BCC_EOS
17055                                           ! 1885  write_word(0x40,0xA8 +2, 0xc000);
17056                                           ! Debug: list unsigned int = const $C000 (used reg = )
17057 404A           B8                   C000  mov	ax,#$C000
17058 404D           50                         push	ax
17059                                           ! Debug: list int = const $AA (used reg = )
17060 404E           B8                   00AA  mov	ax,#$AA
17061 4051           50                         push	ax
17062                                           ! Debug: list int = const $40 (used reg = )
17063 4052           B8                   0040  mov	ax,*$40
17064 4055           50                         push	ax
17065                                           ! Debug: func () void = write_word+0 (used reg = )
17066 4056           E8         3D30            call	_write_word
17067 4059           83C4                   06  add	sp,*6
17068                                           !BCC_EOS
17069                                           ! 1886  writ
17070                                           ! 1886 e_byte(0x40,0x65,0x00);
17071                                           ! Debug: list int = const 0 (used reg = )
17072 405C           31C0                       xor	ax,ax
17073 405E           50                         push	ax
17074                                           ! Debug: list int = const $65 (used reg = )
17075 405F           B8                   0065  mov	ax,*$65
17076 4062           50                         push	ax
17077                                           ! Debug: list int = const $40 (used reg = )
17078 4063           B8                   0040  mov	ax,*$40
17079 4066           50                         push	ax
17080                                           ! Debug: func () void = write_byte+0 (used reg = )
17081 4067           E8         3D07            call	_write_byte
17082 406A           83C4                   06  add	sp,*6
17083                                           !BCC_EOS
17084                                           ! 1887  write_byte(0x40,0x66,0x00);
17085                                           ! Debug: list int = const 0 (used reg = )
17086 406D           31C0                       xor	ax,ax
17087 406F           50                         push	ax
17088                                           ! Debug: list int = const $66 (used reg = )
17089 4070           B8                   0066  mov	ax,*$66
17090 4073           50                         push	ax
17091                                           ! Debug: list int = const $40 (used reg = )
17092 4074           B8                   0040  mov	ax,*$40
17093 4077           50                         push	ax
17094                                           ! Debug: func () void = write_byte+0 (used reg = )
17095 4078           E8         3CF6            call	_write_byte
17096 407B           83C4                   06  add	sp,*6
17097                                           !BCC_EOS
17098                                           ! 1888  if(vga_modes[line].class==0x00)
17099                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17100 407E           8A46         FE            mov	al,-2[bp]
17101 4081           30E4                       xor	ah,ah
17102 4083           B1                     03  mov	cl,*3
17103 4085           D3E0                       shl	ax,cl
17104 4087           89C3                       mov	bx,ax
17105 4089           81C3                 01DB  add	bx,#_vga_modes
17106                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17107 408D           8A47         01            mov	al,1[bx]
17108 4090           84C0                       test	al,al
17109 4092           75           0E            jne 	.79
17110                       00004094            .7A:
17111                                           ! 1889   {
17112                                           ! 1890    biosfn_set_cursor_shape(0x06,0x07);
17113                                           ! Debug: list int = const 7 (used reg = )
17114 4094           B8                   0007  mov	ax,*7
17115 4097           50                         push	ax
17116                                           ! Debug: list int = const 6 (used reg = )
17117 4098           B8                   0006  mov	ax,*6
17118 409B           50                         push	ax
17119                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17120 409C           E8         00BA            call	_biosfn_set_cursor_shape
17121 409F           83C4                   04  add	sp,*4
17122                                           !BCC_EOS
17123                                           ! 1891   }
17124                                           ! 1892  for(i=0;i<8;i++)
17125                       000040A2            .79:
17126                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17127 40A2           31C0                       xor	ax,ax
17128 40A4           8946         F6            mov	-$A[bp],ax
17129                                           !BCC_EOS
17130                                           !BCC_EOS
17131                                           ! 1893   biosfn_set_cursor_pos(i,0x0000);
17132 40A7           EB           13            jmp .7D
17133                       000040A9            .7E:
17134                                           ! Debug: list int = const 0 (used reg = )
17135 40A9           31C0                       xor	ax,ax
17136 40AB           50                         push	ax
17137                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17138 40AC           FF76         F6            push	-$A[bp]
17139                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17140 40AF           E8         01C2            call	_biosfn_set_cursor_pos
17141 40B2           83C4                   04  add	sp,*4
17142                                           !BCC_EOS
17143                                           ! 1894  biosfn_set_active_page(0x00);
17144                       000040B5            .7C:
17145                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17146 40B5           8B46         F6            mov	ax,-$A[bp]
17147 40B8           40                         inc	ax
17148 40B9           8946         F6            mov	-$A[bp],ax
17149                       000040BC            .7D:
17150                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17151 40BC           8B46         F6            mov	ax,-$A[bp]
17152 40BF           3D                   0008  cmp	ax,*8
17153 40C2           72           E5            jb 	.7E
17154                       000040C4            .7F:
17155                       000040C4            .7B:
17156                                           ! Debug: list int = const 0 (used reg = )
17157 40C4           31C0                       xor	ax,ax
17158 40C6           50                         push	ax
17159                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17160 40C7           E8         031F            call	_biosfn_set_active_page
17161 40CA           44                         inc	sp
17162 40CB           44                         inc	sp
17163                                           !BCC_EOS
17164                                           ! 1895  if(vga_modes[line].class==0x00)
17165                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17166 40CC           8A46         FE            mov	al,-2[bp]
17167 40CF           30E4                       xor	ah,ah
17168 40D1           B1                     03  mov	cl,*3
17169 40D3           D3E0                       shl	ax,cl
17170 40D5           89C3                       mov	bx,ax
17171 40D7           81C3                 01DB  add	bx,#_vga_modes
17172                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17173 40DB           8A47         01            mov	al,1[bx]
17174 40DE           84C0                       test	al,al
17175 40E0           75           0E            jne 	.80
17176                       000040E2            .81:
17177                                           ! 1896   {
17178                                           ! 1897 #asm
17179                                           !BCC_EOS
17180                                           !BCC_ASM
17181                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17182                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17183                       00000008            _biosfn_set_video_mode.theightm1	set	8
17184                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17185                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17186                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17187                       00000014            _biosfn_set_video_mode.line	set	$14
17188                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17189                       00000006            _biosfn_set_video_mode.cheight	set	6
17190                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17191                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17192                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17193                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17194                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17195                       0000000C            _biosfn_set_video_mode.i	set	$C
17196                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17197                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17198                       00000004            .biosfn_set_video_mode.mode	set	4
17199                       00000010            _biosfn_set_video_mode.palette	set	$10
17200                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17201                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17202                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17203                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17204                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17205                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17206                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17207                       00000013            _biosfn_set_video_mode.mmask	set	$13
17208                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17209                                             ;; copy and activate 8x16 font
17210 40E2           B8                   1104    mov ax, #0x1104
17211 40E5           B3                     00    mov bl, #0x00
17212 40E7           CD                     10    int #0x10
17213 40E9           B8                   1103    mov ax, #0x1103
17214 40EC           B3                     00    mov bl, #0x00
17215 40EE           CD                     10    int #0x10
17216                                           ! 1905 endasm
17217                                           !BCC_ENDASM
17218                                           !BCC_EOS
17219                                           ! 1906   }
17220                                           ! 1907 #asm
17221                       000040F0            .80:
17222                                           !BCC_EOS
17223                                           !BCC_ASM
17224                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17225                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17226                       00000008            _biosfn_set_video_mode.theightm1	set	8
17227                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17228                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17229                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17230                       00000014            _biosfn_set_video_mode.line	set	$14
17231                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17232                       00000006            _biosfn_set_video_mode.cheight	set	6
17233                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17234                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17235                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17236                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17237                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17238                       0000000C            _biosfn_set_video_mode.i	set	$C
17239                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17240                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17241                       00000004            .biosfn_set_video_mode.mode	set	4
17242                       00000010            _biosfn_set_video_mode.palette	set	$10
17243                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17244                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17245                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17246                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17247                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17248                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17249                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17250                       00000013            _biosfn_set_video_mode.mmask	set	$13
17251                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17252                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   40F0           1E                           push ds
 +a   40F1           31C0                         xor ax, ax
 +a   40F3           8ED8                         mov ds, ax
 +a   40F5           B8                   1351    mov ax,  #_vgafont8+128*8
 +a   40F8           A3         007C              mov 0x1f*4, ax
 +a   40FB           B8                   C000    mov ax,  #0xC000
 +a   40FE           A3         007E              mov 0x1f*4+2, ax
 +a   4101           1F                           pop ds
17253                                           ! 1909 endasm
17254                                           !BCC_ENDASM
17255                                           !BCC_EOS
17256                                           ! 1910   switch(cheight)
17257 4102           8B46         F0            mov	ax,-$10[bp]
17258                                           ! 1911    {case 8:
17259 4105           E9         003E            br 	.84
17260                                           ! 1912 #asm
17261                       00004108            .85:
17262                                           !BCC_EOS
17263                                           !BCC_ASM
17264                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17265                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17266                       00000008            _biosfn_set_video_mode.theightm1	set	8
17267                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17268                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17269                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17270                       00000014            _biosfn_set_video_mode.line	set	$14
17271                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17272                       00000006            _biosfn_set_video_mode.cheight	set	6
17273                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17274                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17275                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17276                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17277                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17278                       0000000C            _biosfn_set_video_mode.i	set	$C
17279                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17280                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17281                       00000004            .biosfn_set_video_mode.mode	set	4
17282                       00000010            _biosfn_set_video_mode.palette	set	$10
17283                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17284                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17285                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17286                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17287                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17288                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17289                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17290                       00000013            _biosfn_set_video_mode.mmask	set	$13
17291                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17292                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   4108           1E                           push ds
 +a   4109           31C0                         xor ax, ax
 +a   410B           8ED8                         mov ds, ax
 +a   410D           B8                   0F51    mov ax,  #_vgafont8
 +a   4110           A3         010C              mov 0x43*4, ax
 +a   4113           B8                   C000    mov ax,  #0xC000
 +a   4116           A3         010E              mov 0x43*4+2, ax
 +a   4119           1F                           pop ds
17293                                           ! 1914 endasm
17294                                           !BCC_ENDASM
17295                                           !BCC_EOS
17296                                           ! 1915      break;
17297 411A           EB           39            jmp .82
17298                                           !BCC_EOS
17299                                           ! 1916     case 14:
17300                                           ! 1917 #asm
17301                       0000411C            .86:
17302                                           !BCC_EOS
17303                                           !BCC_ASM
17304                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17305                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17306                       00000008            _biosfn_set_video_mode.theightm1	set	8
17307                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17308                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17309                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17310                       00000014            _biosfn_set_video_mode.line	set	$14
17311                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17312                       00000006            _biosfn_set_video_mode.cheight	set	6
17313                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17314                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17315                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17316                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17317                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17318                       0000000C            _biosfn_set_video_mode.i	set	$C
17319                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17320                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17321                       00000004            .biosfn_set_video_mode.mode	set	4
17322                       00000010            _biosfn_set_video_mode.palette	set	$10
17323                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17324                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17325                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17326                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17327                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17328                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17329                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17330                       00000013            _biosfn_set_video_mode.mmask	set	$13
17331                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17332                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   411C           1E                           push ds
 +a   411D           31C0                         xor ax, ax
 +a   411F           8ED8                         mov ds, ax
 +a   4121           B8                   1751    mov ax,  #_vgafont14
 +a   4124           A3         010C              mov 0x43*4, ax
 +a   4127           B8                   C000    mov ax,  #0xC000
 +a   412A           A3         010E              mov 0x43*4+2, ax
 +a   412D           1F                           pop ds
17333                                           ! 1919 endasm
17334                                           !BCC_ENDASM
17335                                           !BCC_EOS
17336                                           ! 1920      break;
17337 412E           EB           25            jmp .82
17338                                           !BCC_EOS
17339                                           ! 1921     case 16:
17340                                           ! 1922 #asm
17341                       00004130            .87:
17342                                           !BCC_EOS
17343                                           !BCC_ASM
17344                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17345                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17346                       00000008            _biosfn_set_video_mode.theightm1	set	8
17347                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17348                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17349                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17350                       00000014            _biosfn_set_video_mode.line	set	$14
17351                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17352                       00000006            _biosfn_set_video_mode.cheight	set	6
17353                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17354                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17355                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17356                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17357                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17358                       0000000C            _biosfn_set_video_mode.i	set	$C
17359                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17360                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17361                       00000004            .biosfn_set_video_mode.mode	set	4
17362                       00000010            _biosfn_set_video_mode.palette	set	$10
17363                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17364                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17365                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17366                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17367                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17368                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17369                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17370                       00000013            _biosfn_set_video_mode.mmask	set	$13
17371                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17372                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4130           1E                           push ds
 +a   4131           31C0                         xor ax, ax
 +a   4133           8ED8                         mov ds, ax
 +a   4135           B8                   2551    mov ax,  #_vgafont16
 +a   4138           A3         010C              mov 0x43*4, ax
 +a   413B           B8                   C000    mov ax,  #0xC000
 +a   413E           A3         010E              mov 0x43*4+2, ax
 +a   4141           1F                           pop ds
17373                                           ! 1924 endasm
17374                                           !BCC_ENDASM
17375                                           !BCC_EOS
17376                                           ! 1925      break;
17377 4142           EB           11            jmp .82
17378                                           !BCC_EOS
17379                                           ! 1926    }
17380                                           ! 1927 }
17381 4144           EB           0F            jmp .82
17382                       00004146            .84:
17383 4146           2D                   0008  sub	ax,*8
17384 4149           74           BD            je 	.85
17385 414B           2D                   0006  sub	ax,*6
17386 414E           74           CC            je 	.86
17387 4150           2D                   0002  sub	ax,*2
17388 4153           74           DB            je 	.87
17389                       00004155            .82:
17390                       FFFFFFE8            ..FFFD	=	-$18
17391 4155           89EC                       mov	sp,bp
17392 4157           5D                         pop	bp
17393 4158           C3                         ret
17394                                           ! 1928 static void biosfn_set_cursor_shape (CH,CL)
17395                                           ! Register BX used in function biosfn_set_video_mode
17396                                           ! 1929 Bit8u CH;Bit8u CL;
17397                       00004159            _biosfn_set_cursor_shape:
17398                                           !BCC_EOS
17399                                           !BCC_EOS
17400                                           ! 1930 {Bit16u cheight,curs,crtc_addr;
17401                                           !BCC_EOS
17402                                           ! 1931  Bit8u modeset_ctl;
17403                                           !BCC_EOS
17404                                           ! 1932  CH&=0x3f;
17405 4159           55                         push	bp
17406 415A           89E5                       mov	bp,sp
17407 415C           83C4                   F8  add	sp,*-8
17408                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17409 415F           8A46         04            mov	al,4[bp]
17410 4162           24                     3F  and	al,*$3F
17411 4164           8846         04            mov	4[bp],al
17412                                           !BCC_EOS
17413                                           ! 1933  CL&=0x1f;
17414                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17415 4167           8A46         06            mov	al,6[bp]
17416 416A           24                     1F  and	al,*$1F
17417 416C           8846         06            mov	6[bp],al
17418                                           !BCC_EOS
17419                                           ! 1934  curs=(CH<<8)+CL;
17420                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17421 416F           8A46         04            mov	al,4[bp]
17422 4172           30E4                       xor	ah,ah
17423 4174           88C4                       mov	ah,al
17424 4176           30C0                       xor	al,al
17425                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17426 4178           0246         06            add	al,6[bp]
17427 417B           80D4                   00  adc	ah,*0
17428                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17429 417E           8946         FC            mov	-4[bp],ax
17430                                           !BCC_EOS
17431                                           ! 1935  write_word(0x40,0x60,curs);
17432                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17433 4181           FF76         FC            push	-4[bp]
17434                                           ! Debug: list int = const $60 (used reg = )
17435 4184           B8                   0060  mov	ax,*$60
17436 4187           50                         push	ax
17437                                           ! Debug: list int = const $40 (used reg = )
17438 4188           B8                   0040  mov	ax,*$40
17439 418B           50                         push	ax
17440                                           ! Debug: func () void = write_word+0 (used reg = )
17441 418C           E8         3BFA            call	_write_word
17442 418F           83C4                   06  add	sp,*6
17443                                           !BCC_EOS
17444                                           ! 1936  modeset_ctl=read_byte(0x40,0x89);
17445                                           ! Debug: list int = const $89 (used reg = )
17446 4192           B8                   0089  mov	ax,#$89
17447 4195           50                         push	ax
17448                                           ! Debug: list int = const $40 (used reg = )
17449 4196           B8                   0040  mov	ax,*$40
17450 4199           50                         push	ax
17451                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17452 419A           E8         3BAE            call	_read_byte
17453 419D           83C4                   04  add	sp,*4
17454                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17455 41A0           8846         F9            mov	-7[bp],al
17456                                           !BCC_EOS
17457                                           ! 1937  cheight = read_word(0x40,0x85);
17458                                           ! Debug: list int = const $85 (used reg = )
17459 41A3           B8                   0085  mov	ax,#$85
17460 41A6           50                         push	ax
17461                                           ! Debug: list int = const $40 (used reg = )
17462 41A7           B8                   0040  mov	ax,*$40
17463 41AA           50                         push	ax
17464                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17465 41AB           E8         3BB0            call	_read_word
17466 41AE           83C4                   04  add	sp,*4
17467                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17468 41B1           8946         FE            mov	-2[bp],ax
17469                                           !BCC_EOS
17470                                           ! 1938  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17471                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17472 41B4           8A46         F9            mov	al,-7[bp]
17473 41B7           24                     01  and	al,*1
17474 41B9           84C0                       test	al,al
17475 41BB           74           66            je  	.88
17476                       000041BD            .8C:
17477                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17478 41BD           8B46         FE            mov	ax,-2[bp]
17479 41C0           3D                   0008  cmp	ax,*8
17480 41C3           76           5E            jbe 	.88
17481                       000041C5            .8B:
17482                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17483 41C5           8A46         06            mov	al,6[bp]
17484 41C8           3C                     08  cmp	al,*8
17485 41CA           73           57            jae 	.88
17486                       000041CC            .8A:
17487                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17488 41CC           8A46         04            mov	al,4[bp]
17489 41CF           3C                     20  cmp	al,*$20
17490 41D1           73           50            jae 	.88
17491                       000041D3            .89:
17492                                           ! 1939   {
17493                                           ! 1940    if(CL!=(CH+1))
17494                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17495 41D3           8A46         04            mov	al,4[bp]
17496 41D6           30E4                       xor	ah,ah
17497                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17498                                           ! Debug: expression subtree swapping
17499 41D8           40                         inc	ax
17500 41D9           50                         push	ax
17501 41DA           8A46         06            mov	al,6[bp]
17502 41DD           30E4                       xor	ah,ah
17503 41DF           3B46         F6            cmp	ax,-$A[bp]
17504 41E2           8D66         F8            lea	sp,-8[bp]
17505 41E5           74           15            je  	.8D
17506                       000041E7            .8E:
17507                                           ! 1941     {
17508                                           ! 1942      CH = ((CH+1) * cheight / 8) -1;
17509                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17510 41E7           8A46         04            mov	al,4[bp]
17511 41EA           30E4                       xor	ah,ah
17512                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17513 41EC           40                         inc	ax
17514 41ED           8B4E         FE            mov	cx,-2[bp]
17515 41F0           F7E9                       imul	cx
17516                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17517 41F2           B1                     03  mov	cl,*3
17518 41F4           D3E8                       shr	ax,cl
17519                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17520                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17521 41F6           48                         dec	ax
17522 41F7           8846         04            mov	4[bp],al
17523                                           !BCC_EOS
17524                                           ! 1943     }
17525                                           ! 1944    else
17526                                           ! 1945     {
17527 41FA           EB           14            jmp .8F
17528                       000041FC            .8D:
17529                                           ! 1946      CH = ((CL+1) * cheight / 8) - 2;
17530                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17531 41FC           8A46         06            mov	al,6[bp]
17532 41FF           30E4                       xor	ah,ah
17533                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17534 4201           40                         inc	ax
17535 4202           8B4E         FE            mov	cx,-2[bp]
17536 4205           F7E9                       imul	cx
17537                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17538 4207           B1                     03  mov	cl,*3
17539 4209           D3E8                       shr	ax,cl
17540                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17541                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17542 420B           48                         dec	ax
17543 420C           48                         dec	ax
17544 420D           8846         04            mov	4[bp],al
17545                                           !BCC_EOS
17546                                           ! 1947     }
17547                                           ! 1948    CL = ((CL+1) * cheight / 8) - 1;
17548                       00004210            .8F:
17549                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17550 4210           8A46         06            mov	al,6[bp]
17551 4213           30E4                       xor	ah,ah
17552                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17553 4215           40                         inc	ax
17554 4216           8B4E         FE            mov	cx,-2[bp]
17555 4219           F7E9                       imul	cx
17556                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17557 421B           B1                     03  mov	cl,*3
17558 421D           D3E8                       shr	ax,cl
17559                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17560                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17561 421F           48                         dec	ax
17562 4220           8846         06            mov	6[bp],al
17563                                           !BCC_EOS
17564                                           ! 1949   }
17565                                           ! 1950  crtc_addr=read_word(0x40,0x63);
17566                       00004223            .88:
17567                                           ! Debug: list int = const $63 (used reg = )
17568 4223           B8                   0063  mov	ax,*$63
17569 4226           50                         push	ax
17570                                           ! Debug: list int = const $40 (used reg = )
17571 4227           B8                   0040  mov	ax,*$40
17572 422A           50                         push	ax
17573                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17574 422B           E8         3B30            call	_read_word
17575 422E           83C4                   04  add	sp,*4
17576                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17577 4231           8946         FA            mov	-6[bp],ax
17578                                           !BCC_EOS
17579                                           ! 1951  outb(crtc_addr,0x0a);
17580                                           ! Debug: list int = const $A (used reg = )
17581 4234           B8                   000A  mov	ax,*$A
17582 4237           50                         push	ax
17583                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17584 4238           FF76         FA            push	-6[bp]
17585                                           ! Debug: func () void = outb+0 (used reg = )
17586 423B           E8         3B79            call	_outb
17587 423E           83C4                   04  add	sp,*4
17588                                           !BCC_EOS
17589                                           ! 1952  outb(crtc_addr+1,CH);
17590                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17591 4241           8A46         04            mov	al,4[bp]
17592 4244           30E4                       xor	ah,ah
17593 4246           50                         push	ax
17594                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17595 4247           8B46         FA            mov	ax,-6[bp]
17596                                           ! Debug: list unsigned int = ax+1 (used reg = )
17597 424A           40                         inc	ax
17598 424B           50                         push	ax
17599                                           ! Debug: func () void = outb+0 (used reg = )
17600 424C           E8         3B68            call	_outb
17601 424F           83C4                   04  add	sp,*4
17602                                           !BCC_EOS
17603                                           ! 1953  outb(crtc_addr,0x0b);
17604                                           ! Debug: list int = const $B (used reg = )
17605 4252           B8                   000B  mov	ax,*$B
17606 4255           50                         push	ax
17607                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17608 4256           FF76         FA            push	-6[bp]
17609                                           ! Debug: func () void = outb+0 (used reg = )
17610 4259           E8         3B5B            call	_outb
17611 425C           83C4                   04  add	sp,*4
17612                                           !BCC_EOS
17613                                           ! 1954  outb(crtc_addr+1,CL);
17614                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17615 425F           8A46         06            mov	al,6[bp]
17616 4262           30E4                       xor	ah,ah
17617 4264           50                         push	ax
17618                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17619 4265           8B46         FA            mov	ax,-6[bp]
17620                                           ! Debug: list unsigned int = ax+1 (used reg = )
17621 4268           40                         inc	ax
17622 4269           50                         push	ax
17623                                           ! Debug: func () void = outb+0 (used reg = )
17624 426A           E8         3B4A            call	_outb
17625 426D           83C4                   04  add	sp,*4
17626                                           !BCC_EOS
17627                                           ! 1955 }
17628 4270           89EC                       mov	sp,bp
17629 4272           5D                         pop	bp
17630 4273           C3                         ret
17631                                           ! 1956 static void biosfn_set_cursor_pos (page, cursor)
17632                                           ! 1957 Bit8u page;Bit16u cursor;
17633                       00004274            _biosfn_set_cursor_pos:
17634                                           !BCC_EOS
17635                                           !BCC_EOS
17636                                           ! 1958 {
17637                                           ! 1959  Bit8u xcurs,ycurs,current;
17638                                           !BCC_EOS
17639                                           ! 1960  Bit16u nbcols,nbrows,address,crtc_addr;
17640                                           !BCC_EOS
17641                                           ! 1961  if(page>7)return;
17642 4274           55                         push	bp
17643 4275           89E5                       mov	bp,sp
17644 4277           83C4                   F4  add	sp,*-$C
17645                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17646 427A           8A46         04            mov	al,4[bp]
17647 427D           3C                     07  cmp	al,*7
17648 427F           76           04            jbe 	.90
17649                       00004281            .91:
17650 4281           89EC                       mov	sp,bp
17651 4283           5D                         pop	bp
17652 4284           C3                         ret
17653                                           !BCC_EOS
17654                                           ! 1962  write_word(0x40, 0x50 +2*page, cursor);
17655                       00004285            .90:
17656                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17657 4285           FF76         06            push	6[bp]
17658                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17659                                           ! Debug: expression subtree swapping
17660 4288           8A46         04            mov	al,4[bp]
17661 428B           30E4                       xor	ah,ah
17662 428D           D1E0                       shl	ax,*1
17663                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17664                                           ! Debug: expression subtree swapping
17665                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17666 428F           05                   0050  add	ax,*$50
17667 4292           50                         push	ax
17668                                           ! Debug: list int = const $40 (used reg = )
17669 4293           B8                   0040  mov	ax,*$40
17670 4296           50                         push	ax
17671                                           ! Debug: func () void = write_word+0 (used reg = )
17672 4297           E8         3AEF            call	_write_word
17673 429A           83C4                   06  add	sp,*6
17674                                           !BCC_EOS
17675                                           ! 1963  current=read_byte(0x40,0x62);
17676                                           ! Debug: list int = const $62 (used reg = )
17677 429D           B8                   0062  mov	ax,*$62
17678 42A0           50                         push	ax
17679                                           ! Debug: list int = const $40 (used reg = )
17680 42A1           B8                   0040  mov	ax,*$40
17681 42A4           50                         push	ax
17682                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17683 42A5           E8         3AA3            call	_read_byte
17684 42A8           83C4                   04  add	sp,*4
17685                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17686 42AB           8846         FD            mov	-3[bp],al
17687                                           !BCC_EOS
17688                                           ! 1964  if(page==current)
17689                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17690 42AE           8A46         04            mov	al,4[bp]
17691 42B1           3A46         FD            cmp	al,-3[bp]
17692 42B4         0F85         00B8            bne 	.92
17693                       000042B8            .93:
17694                                           ! 1965   {
17695                                           ! 1966    nbcols=read_word(0x40,0x4A);
17696                                           ! Debug: list int = const $4A (used reg = )
17697 42B8           B8                   004A  mov	ax,*$4A
17698 42BB           50                         push	ax
17699                                           ! Debug: list int = const $40 (used reg = )
17700 42BC           B8                   0040  mov	ax,*$40
17701 42BF           50                         push	ax
17702                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17703 42C0           E8         3A9B            call	_read_word
17704 42C3           83C4                   04  add	sp,*4
17705                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17706 42C6           8946         FA            mov	-6[bp],ax
17707                                           !BCC_EOS
17708                                           ! 1967    nbrows=read_byte(0x40,0x84)+1;
17709                                           ! Debug: list int = const $84 (used reg = )
17710 42C9           B8                   0084  mov	ax,#$84
17711 42CC           50                         push	ax
17712                                           ! Debug: list int = const $40 (used reg = )
17713 42CD           B8                   0040  mov	ax,*$40
17714 42D0           50                         push	ax
17715                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17716 42D1           E8         3A77            call	_read_byte
17717 42D4           83C4                   04  add	sp,*4
17718                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17719 42D7           30E4                       xor	ah,ah
17720                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17721 42D9           40                         inc	ax
17722 42DA           8946         F8            mov	-8[bp],ax
17723                                           !BCC_EOS
17724                                           ! 1968    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17725                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17726 42DD           8A46         06            mov	al,6[bp]
17727                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17728 42E0           8846         FF            mov	-1[bp],al
17729                                           !BCC_EOS
17730                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17731 42E3           8B46         06            mov	ax,6[bp]
17732 42E6           30C0                       xor	al,al
17733                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17734 42E8           88E0                       mov	al,ah
17735 42EA           30E4                       xor	ah,ah
17736                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17737 42EC           8846         FE            mov	-2[bp],al
17738                                           !BCC_EOS
17739                                           ! 1969    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17740                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17741 42EF           8A46         FE            mov	al,-2[bp]
17742 42F2           30E4                       xor	ah,ah
17743 42F4           8B4E         FA            mov	cx,-6[bp]
17744 42F7           F7E9                       imul	cx
17745 42F9           50                         push	ax
17746                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17747 42FA           8B46         FA            mov	ax,-6[bp]
17748 42FD           8B4E         F8            mov	cx,-8[bp]
17749 4300           F7E9                       imul	cx
17750                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17751 4302           0C                     FF  or	al,#$FF
17752                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17753                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17754 4304           89C3                       mov	bx,ax
17755 4306           8A46         04            mov	al,4[bp]
17756 4309           30E4                       xor	ah,ah
17757 430B           93                         xchg	ax,bx
17758 430C           40                         inc	ax
17759 430D           89D9                       mov	cx,bx
17760 430F           F7E9                       imul	cx
17761                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17762 4311           0246         FF            add	al,-1[bp]
17763 4314           80D4                   00  adc	ah,*0
17764                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17765 4317           0346         F2            add	ax,-$E[bp]
17766 431A           44                         inc	sp
17767 431B           44                         inc	sp
17768                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17769 431C           8946         F6            mov	-$A[bp],ax
17770                                           !BCC_EOS
17771                                           ! 1970    crtc_addr=read_word(0x40,0x63);
17772                                           ! Debug: list int = const $63 (used reg = )
17773 431F           B8                   0063  mov	ax,*$63
17774 4322           50                         push	ax
17775                                           ! Debug: list int = const $40 (used reg = )
17776 4323           B8                   0040  mov	ax,*$40
17777 4326           50                         push	ax
17778                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17779 4327           E8         3A34            call	_read_word
17780 432A           83C4                   04  add	sp,*4
17781                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17782 432D           8946         F4            mov	-$C[bp],ax
17783                                           !BCC_EOS
17784                                           ! 1971    outb(crtc_addr,0x0e);
17785                                           ! Debug: list int = const $E (used reg = )
17786 4330           B8                   000E  mov	ax,*$E
17787 4333           50                         push	ax
17788                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17789 4334           FF76         F4            push	-$C[bp]
17790                                           ! Debug: func () void = outb+0 (used reg = )
17791 4337           E8         3A7D            call	_outb
17792 433A           83C4                   04  add	sp,*4
17793                                           !BCC_EOS
17794                                           ! 1972    outb(crtc_addr+1,(address&0xff00)>>8);
17795                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17796 433D           8B46         F6            mov	ax,-$A[bp]
17797 4340           30C0                       xor	al,al
17798                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17799 4342           88E0                       mov	al,ah
17800 4344           30E4                       xor	ah,ah
17801                                           ! Debug: list unsigned int = ax+0 (used reg = )
17802 4346           50                         push	ax
17803                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17804 4347           8B46         F4            mov	ax,-$C[bp]
17805                                           ! Debug: list unsigned int = ax+1 (used reg = )
17806 434A           40                         inc	ax
17807 434B           50                         push	ax
17808                                           ! Debug: func () void = outb+0 (used reg = )
17809 434C           E8         3A68            call	_outb
17810 434F           83C4                   04  add	sp,*4
17811                                           !BCC_EOS
17812                                           ! 1973    outb(crtc_addr,0x0f);
17813                                           ! Debug: list int = const $F (used reg = )
17814 4352           B8                   000F  mov	ax,*$F
17815 4355           50                         push	ax
17816                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17817 4356           FF76         F4            push	-$C[bp]
17818                                           ! Debug: func () void = outb+0 (used reg = )
17819 4359           E8         3A5B            call	_outb
17820 435C           83C4                   04  add	sp,*4
17821                                           !BCC_EOS
17822                                           ! 1974    outb(crtc_addr+1,address&0x00ff);
17823                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17824 435F           8A46         F6            mov	al,-$A[bp]
17825                                           ! Debug: list unsigned char = al+0 (used reg = )
17826 4362           30E4                       xor	ah,ah
17827 4364           50                         push	ax
17828                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17829 4365           8B46         F4            mov	ax,-$C[bp]
17830                                           ! Debug: list unsigned int = ax+1 (used reg = )
17831 4368           40                         inc	ax
17832 4369           50                         push	ax
17833                                           ! Debug: func () void = outb+0 (used reg = )
17834 436A           E8         3A4A            call	_outb
17835 436D           83C4                   04  add	sp,*4
17836                                           !BCC_EOS
17837                                           ! 1975   }
17838                                           ! 1976 }
17839                       00004370            .92:
17840 4370           89EC                       mov	sp,bp
17841 4372           5D                         pop	bp
17842 4373           C3                         ret
17843                                           ! 1977 static void biosfn_get_cursor_pos (page,shape, pos)
17844                                           ! Register BX used in function biosfn_set_cursor_pos
17845                                           ! 1978 Bit8u page;Bit16u *shape;Bit16u *po
17846                       00004374            _biosfn_get_cursor_pos:
17847                                           !BCC_EOS
17848                                           !BCC_EOS
17849                                           ! 1978 s;
17850                                           !BCC_EOS
17851                                           ! 1979 {
17852                                           ! 1980  Bit16u ss=get_SS();
17853 4374           55                         push	bp
17854 4375           89E5                       mov	bp,sp
17855 4377           4C                         dec	sp
17856 4378           4C                         dec	sp
17857                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17858 4379           E8         3A5B            call	_get_SS
17859                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17860 437C           8946         FE            mov	-2[bp],ax
17861                                           !BCC_EOS
17862                                           ! 1981  write_word(ss, shape, 0);
17863                                           ! Debug: list int = const 0 (used reg = )
17864 437F           31C0                       xor	ax,ax
17865 4381           50                         push	ax
17866                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17867 4382           FF76         06            push	6[bp]
17868                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17869 4385           FF76         FE            push	-2[bp]
17870                                           ! Debug: func () void = write_word+0 (used reg = )
17871 4388           E8         39FE            call	_write_word
17872 438B           83C4                   06  add	sp,*6
17873                                           !BCC_EOS
17874                                           ! 1982  write_word(ss, pos, 0);
17875                                           ! Debug: list int = const 0 (used reg = )
17876 438E           31C0                       xor	ax,ax
17877 4390           50                         push	ax
17878                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17879 4391           FF76         08            push	8[bp]
17880                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17881 4394           FF76         FE            push	-2[bp]
17882                                           ! Debug: func () void = write_word+0 (used reg = )
17883 4397           E8         39EF            call	_write_word
17884 439A           83C4                   06  add	sp,*6
17885                                           !BCC_EOS
17886                                           ! 1983  if(page>7)return;
17887                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17888 439D           8A46         04            mov	al,4[bp]
17889 43A0           3C                     07  cmp	al,*7
17890 43A2           76           04            jbe 	.94
17891                       000043A4            .95:
17892 43A4           89EC                       mov	sp,bp
17893 43A6           5D                         pop	bp
17894 43A7           C3                         ret
17895                                           !BCC_EOS
17896                                           ! 1984  write_word(ss,shape,read_word(0x40,0x60));
17897                       000043A8            .94:
17898                                           ! Debug: list int = const $60 (used reg = )
17899 43A8           B8                   0060  mov	ax,*$60
17900 43AB           50                         push	ax
17901                                           ! Debug: list int = const $40 (used reg = )
17902 43AC           B8                   0040  mov	ax,*$40
17903 43AF           50                         push	ax
17904                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17905 43B0           E8         39AB            call	_read_word
17906 43B3           83C4                   04  add	sp,*4
17907                                           ! Debug: list unsigned short = ax+0 (used reg = )
17908 43B6           50                         push	ax
17909                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17910 43B7           FF76         06            push	6[bp]
17911                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17912 43BA           FF76         FE            push	-2[bp]
17913                                           ! Debug: func () void = write_word+0 (used reg = )
17914 43BD           E8         39C9            call	_write_word
17915 43C0           83C4                   06  add	sp,*6
17916                                           !BCC_EOS
17917                                           ! 1985  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17918                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17919 43C3           8A46         04            mov	al,4[bp]
17920 43C6           30E4                       xor	ah,ah
17921 43C8           D1E0                       shl	ax,*1
17922                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17923                                           ! Debug: expression subtree swapping
17924                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17925 43CA           05                   0050  add	ax,*$50
17926 43CD           50                         push	ax
17927                                           ! Debug: list int = const $40 (used reg = )
17928 43CE           B8                   0040  mov	ax,*$40
17929 43D1           50                         push	ax
17930                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17931 43D2           E8         3989            call	_read_word
17932 43D5           83C4                   04  add	sp,*4
17933                                           ! Debug: list unsigned short = ax+0 (used reg = )
17934 43D8           50                         push	ax
17935                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17936 43D9           FF76         08            push	8[bp]
17937                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17938 43DC           FF76         FE            push	-2[bp]
17939                                           ! Debug: func () void = write_word+0 (used reg = )
17940 43DF           E8         39A7            call	_write_word
17941 43E2           83C4                   06  add	sp,*6
17942                                           !BCC_EOS
17943                                           ! 1986 }
17944 43E5           89EC                       mov	sp,bp
17945 43E7           5D                         pop	bp
17946 43E8           C3                         ret
17947                                           ! 1987 static void biosfn_set_active_page (page)
17948                                           ! 1988 Bit8u page;
17949                       000043E9            _biosfn_set_active_page:
17950                                           !BCC_EOS
17951                                           ! 1989 {
17952                                           ! 1990  Bit16u cursor,dummy,crtc_addr;
17953                                           !BCC_EOS
17954                                           ! 1991  Bit16u nbcols,nbrows,address;
17955                                           !BCC_EOS
17956                                           ! 1992  Bit8u mode,line;
17957                                           !BCC_EOS
17958                                           ! 1993  if(page>7)return;
17959 43E9           55                         push	bp
17960 43EA           89E5                       mov	bp,sp
17961 43EC           83C4                   F2  add	sp,*-$E
17962                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17963 43EF           8A46         04            mov	al,4[bp]
17964 43F2           3C                     07  cmp	al,*7
17965 43F4           76           04            jbe 	.96
17966                       000043F6            .97:
17967 43F6           89EC                       mov	sp,bp
17968 43F8           5D                         pop	bp
17969 43F9           C3                         ret
17970                                           !BCC_EOS
17971                                           ! 1994  mode=read_byte(0x40,0x49);
17972                       000043FA            .96:
17973                                           ! Debug: list int = const $49 (used reg = )
17974 43FA           B8                   0049  mov	ax,*$49
17975 43FD           50                         push	ax
17976                                           ! Debug: list int = const $40 (used reg = )
17977 43FE           B8                   0040  mov	ax,*$40
17978 4401           50                         push	ax
17979                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17980 4402           E8         3946            call	_read_byte
17981 4405           83C4                   04  add	sp,*4
17982                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
17983 4408           8846         F3            mov	-$D[bp],al
17984                                           !BCC_EOS
17985                                           ! 1995  line=find_vga_entry(mode);
17986                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
17987 440B           8A46         F3            mov	al,-$D[bp]
17988 440E           30E4                       xor	ah,ah
17989 4410           50                         push	ax
17990                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
17991 4411           E8         384B            call	_find_vga_entry
17992 4414           44                         inc	sp
17993 4415           44                         inc	sp
17994                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
17995 4416           8846         F2            mov	-$E[bp],al
17996                                           !BCC_EOS
17997                                           ! 1996  if(line==0xFF)return;
17998                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
17999 4419           8A46         F2            mov	al,-$E[bp]
18000 441C           3C                     FF  cmp	al,#$FF
18001 441E           75           04            jne 	.98
18002                       00004420            .99:
18003 4420           89EC                       mov	sp,bp
18004 4422           5D                         pop	bp
18005 4423           C3                         ret
18006                                           !BCC_EOS
18007                                           ! 1997  biosfn_get_cursor_pos(page,&dummy,&cursor);
18008                       00004424            .98:
18009                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18010 4424           8D5E         FE            lea	bx,-2[bp]
18011 4427           53                         push	bx
18012                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18013 4428           8D5E         FC            lea	bx,-4[bp]
18014 442B           53                         push	bx
18015                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18016 442C           8A46         04            mov	al,4[bp]
18017 442F           30E4                       xor	ah,ah
18018 4431           50                         push	ax
18019                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18020 4432           E8         FF3F            call	_biosfn_get_cursor_pos
18021 4435           83C4                   06  add	sp,*6
18022                                           !BCC_EOS
18023                                           ! 1998  if(vga_modes[line].class==0x00)
18024                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$12] struct  = vga_modes+0 (used reg = )
18025 4438           8A46         F2            mov	al,-$E[bp]
18026 443B           30E4                       xor	ah,ah
18027 443D           B1                     03  mov	cl,*3
18028 443F           D3E0                       shl	ax,cl
18029 4441           89C3                       mov	bx,ax
18030 4443           81C3                 01DB  add	bx,#_vga_modes
18031                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18032 4447           8A47         01            mov	al,1[bx]
18033 444A           84C0                       test	al,al
18034 444C           75           6E            jne 	.9A
18035                       0000444E            .9B:
18036                                           ! 1999   {
18037                                           ! 2000    nbcols=read_word(0x40,0x4A);
18038                                           ! Debug: list int = const $4A (used reg = )
18039 444E           B8                   004A  mov	ax,*$4A
18040 4451           50                         push	ax
18041                                           ! Debug: list int = const $40 (used reg = )
18042 4452           B8                   0040  mov	ax,*$40
18043 4455           50                         push	ax
18044                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18045 4456           E8         3905            call	_read_word
18046 4459           83C4                   04  add	sp,*4
18047                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18048 445C           8946         F8            mov	-8[bp],ax
18049                                           !BCC_EOS
18050                                           ! 2001    nbrows=read_byte(0x40,0x84)+1;
18051                                           ! Debug: list int = const $84 (used reg = )
18052 445F           B8                   0084  mov	ax,#$84
18053 4462           50                         push	ax
18054                                           ! Debug: list int = const $40 (used reg = )
18055 4463           B8                   0040  mov	ax,*$40
18056 4466           50                         push	ax
18057                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18058 4467           E8         38E1            call	_read_byte
18059 446A           83C4                   04  add	sp,*4
18060                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18061 446D           30E4                       xor	ah,ah
18062                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18063 446F           40                         inc	ax
18064 4470           8946         F6            mov	-$A[bp],ax
18065                                           !BCC_EOS
18066                                           ! 2002    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18067                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18068 4473           8B46         F8            mov	ax,-8[bp]
18069 4476           8B4E         F6            mov	cx,-$A[bp]
18070 4479           F7E9                       imul	cx
18071                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18072 447B           D1E0                       shl	ax,*1
18073                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18074 447D           0C                     FF  or	al,#$FF
18075                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18076                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18077 447F           89C3                       mov	bx,ax
18078 4481           8A46         04            mov	al,4[bp]
18079 4484           30E4                       xor	ah,ah
18080 4486           93                         xchg	ax,bx
18081 4487           40                         inc	ax
18082 4488           89D9                       mov	cx,bx
18083 448A           F7E9                       imul	cx
18084                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18085 448C           8946         F4            mov	-$C[bp],ax
18086                                           !BCC_EOS
18087                                           ! 2003    write_word(0x40,0x4E,address);
18088                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18089 448F           FF76         F4            push	-$C[bp]
18090                                           ! Debug: list int = const $4E (used reg = )
18091 4492           B8                   004E  mov	ax,*$4E
18092 4495           50                         push	ax
18093                                           ! Debug: list int = const $40 (used reg = )
18094 4496           B8                   0040  mov	ax,*$40
18095 4499           50                         push	ax
18096                                           ! Debug: func () void = write_word+0 (used reg = )
18097 449A           E8         38EC            call	_write_word
18098 449D           83C4                   06  add	sp,*6
18099                                           !BCC_EOS
18100                                           ! 2004    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18101                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18102 44A0           8B46         F8            mov	ax,-8[bp]
18103 44A3           8B4E         F6            mov	cx,-$A[bp]
18104 44A6           F7E9                       imul	cx
18105                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18106 44A8           0C                     FF  or	al,#$FF
18107                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18108                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18109 44AA           89C3                       mov	bx,ax
18110 44AC           8A46         04            mov	al,4[bp]
18111 44AF           30E4                       xor	ah,ah
18112 44B1           93                         xchg	ax,bx
18113 44B2           40                         inc	ax
18114 44B3           89D9                       mov	cx,bx
18115 44B5           F7E9                       imul	cx
18116                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18117 44B7           8946         F4            mov	-$C[bp],ax
18118                                           !BCC_EOS
18119                                           ! 2005   }
18120                                           ! 2006  else
18121                                           ! 2007   {
18122 44BA           EB           24            jmp .9C
18123                       000044BC            .9A:
18124                                           ! 2008    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18125                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$12] unsigned char = line_to_vpti+0 (used reg = )
18126 44BC           8A46         F2            mov	al,-$E[bp]
18127 44BF           30E4                       xor	ah,ah
18128 44C1           89C3                       mov	bx,ax
18129                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18130 44C3           8A87       026B            mov	al,_line_to_vpti[bx]
18131 44C7           30E4                       xor	ah,ah
18132 44C9           B1                     06  mov	cl,*6
18133 44CB           D3E0                       shl	ax,cl
18134 44CD           89C3                       mov	bx,ax
18135 44CF           81C3                 0281  add	bx,#_video_param_table
18136                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18137                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18138                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18139 44D3           8A46         04            mov	al,4[bp]
18140 44D6           30E4                       xor	ah,ah
18141 44D8           8B4F         03            mov	cx,3[bx]
18142 44DB           F7E9                       imul	cx
18143                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18144 44DD           8946         F4            mov	-$C[bp],ax
18145                                           !BCC_EOS
18146                                           ! 2009   }
18147                                           ! 2010  crtc_addr=read_word(0x40,0x63);
18148                       000044E0            .9C:
18149                                           ! Debug: list int = const $63 (used reg = )
18150 44E0           B8                   0063  mov	ax,*$63
18151 44E3           50                         push	ax
18152                                           ! Debug: list int = const $40 (used reg = )
18153 44E4           B8                   0040  mov	ax,*$40
18154 44E7           50                         push	ax
18155                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18156 44E8           E8         3873            call	_read_word
18157 44EB           83C4                   04  add	sp,*4
18158                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18159 44EE           8946         FA            mov	-6[bp],ax
18160                                           !BCC_EOS
18161                                           ! 2011  outb(crtc_addr,0x0c);
18162                                           ! Debug: list int = const $C (used reg = )
18163 44F1           B8                   000C  mov	ax,*$C
18164 44F4           50                         push	ax
18165                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18166 44F5           FF76         FA            push	-6[bp]
18167                                           ! Debug: func () void = outb+0 (used reg = )
18168 44F8           E8         38BC            call	_outb
18169 44FB           83C4                   04  add	sp,*4
18170                                           !BCC_EOS
18171                                           ! 2012  outb(crtc_addr+1,(address&0xff00)>>8);
18172                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18173 44FE           8B46         F4            mov	ax,-$C[bp]
18174 4501           30C0                       xor	al,al
18175                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18176 4503           88E0                       mov	al,ah
18177 4505           30E4                       xor	ah,ah
18178                                           ! Debug: list unsigned int = ax+0 (used reg = )
18179 4507           50                         push	ax
18180                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18181 4508           8B46         FA            mov	ax,-6[bp]
18182                                           ! Debug: list unsigned int = ax+1 (used reg = )
18183 450B           40                         inc	ax
18184 450C           50                         push	ax
18185                                           ! Debug: func () void = outb+0 (used reg = )
18186 450D           E8         38A7            call	_outb
18187 4510           83C4                   04  add	sp,*4
18188                                           !BCC_EOS
18189                                           ! 2013  outb(crtc_addr,0x0d);
18190                                           ! Debug: list int = const $D (used reg = )
18191 4513           B8                   000D  mov	ax,*$D
18192 4516           50                         push	ax
18193                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18194 4517           FF76         FA            push	-6[bp]
18195                                           ! Debug: func () void = outb+0 (used reg = )
18196 451A           E8         389A            call	_outb
18197 451D           83C4                   04  add	sp,*4
18198                                           !BCC_EOS
18199                                           ! 2014  outb(crtc_addr+1,address&0x00ff);
18200                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18201 4520           8A46         F4            mov	al,-$C[bp]
18202                                           ! Debug: list unsigned char = al+0 (used reg = )
18203 4523           30E4                       xor	ah,ah
18204 4525           50                         push	ax
18205                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18206 4526           8B46         FA            mov	ax,-6[bp]
18207                                           ! Debug: list unsigned int = ax+1 (used reg = )
18208 4529           40                         inc	ax
18209 452A           50                         push	ax
18210                                           ! Debug: func () void = outb+0 (used reg = )
18211 452B           E8         3889            call	_outb
18212 452E           83C4                   04  add	sp,*4
18213                                           !BCC_EOS
18214                                           ! 2015  write_byte(0x40,0x62,page);
18215                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18216 4531           8A46         04            mov	al,4[bp]
18217 4534           30E4                       xor	ah,ah
18218 4536           50                         push	ax
18219                                           ! Debug: list int = const $62 (used reg = )
18220 4537           B8                   0062  mov	ax,*$62
18221 453A           50                         push	ax
18222                                           ! Debug: list int = const $40 (used reg = )
18223 453B           B8                   0040  mov	ax,*$40
18224 453E           50                         push	ax
18225                                           ! Debug: func () void = write_byte+0 (used reg = )
18226 453F           E8         382F            call	_write_byte
18227 4542           83C4                   06  add	sp,*6
18228                                           !BCC_EOS
18229                                           ! 2016  biosfn_set_cursor_pos(page,cursor);
18230                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18231 4545           FF76         FE            push	-2[bp]
18232                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18233 4548           8A46         04            mov	al,4[bp]
18234 454B           30E4                       xor	ah,ah
18235 454D           50                         push	ax
18236                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18237 454E           E8         FD23            call	_biosfn_set_cursor_pos
18238 4551           83C4                   04  add	sp,*4
18239                                           !BCC_EOS
18240                                           ! 2017 }
18241 4554           89EC                       mov	sp,bp
18242 4556           5D                         pop	bp
18243 4557           C3                         ret
18244                                           ! 2018 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18245                                           ! Register BX used in function biosfn_set_active_page
18246                                           ! 2019 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18247                       00004558            _vgamem_copy_pl4:
18248                                           !BCC_EOS
18249                                           !BCC_EOS
18250                                           !BCC_EOS
18251                                           !BCC_EOS
18252                                           !BCC_EOS
18253                                           !BCC_EOS
18254                                           ! 2020 {
18255                                           ! 2021  Bit16u src,dest;
18256                                           !BCC_EOS
18257                                           ! 2022  Bit8u i;
18258                                           !BCC_EOS
18259                                           ! 2023  src=ysrc*cheight*nbcols+xstart;
18260 4558           55                         push	bp
18261 4559           89E5                       mov	bp,sp
18262 455B           83C4                   FA  add	sp,*-6
18263                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18264 455E           8A46         0E            mov	al,$E[bp]
18265 4561           30E4                       xor	ah,ah
18266 4563           89C3                       mov	bx,ax
18267 4565           8A46         06            mov	al,6[bp]
18268 4568           30E4                       xor	ah,ah
18269 456A           89D9                       mov	cx,bx
18270 456C           F7E9                       imul	cx
18271                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18272 456E           89C3                       mov	bx,ax
18273 4570           8A46         0C            mov	al,$C[bp]
18274 4573           30E4                       xor	ah,ah
18275 4575           93                         xchg	ax,bx
18276 4576           89D9                       mov	cx,bx
18277 4578           F7E9                       imul	cx
18278                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18279 457A           0246         04            add	al,4[bp]
18280 457D           80D4                   00  adc	ah,*0
18281                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18282 4580           8946         FE            mov	-2[bp],ax
18283                                           !BCC_EOS
18284                                           ! 2024  dest=ydest*cheight*nbcols+xstart;
18285                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18286 4583           8A46         0E            mov	al,$E[bp]
18287 4586           30E4                       xor	ah,ah
18288 4588           89C3                       mov	bx,ax
18289 458A           8A46         08            mov	al,8[bp]
18290 458D           30E4                       xor	ah,ah
18291 458F           89D9                       mov	cx,bx
18292 4591           F7E9                       imul	cx
18293                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18294 4593           89C3                       mov	bx,ax
18295 4595           8A46         0C            mov	al,$C[bp]
18296 4598           30E4                       xor	ah,ah
18297 459A           93                         xchg	ax,bx
18298 459B           89D9                       mov	cx,bx
18299 459D           F7E9                       imul	cx
18300                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18301 459F           0246         04            add	al,4[bp]
18302 45A2           80D4                   00  adc	ah,*0
18303                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18304 45A5           8946         FC            mov	-4[bp],ax
18305                                           !BCC_EOS
18306                                           ! 2025  outw(0x3ce, 0x0105);
18307                                           ! Debug: list int = const $105 (used reg = )
18308 45A8           B8                   0105  mov	ax,#$105
18309 45AB           50                         push	ax
18310                                           ! Debug: list int = const $3CE (used reg = )
18311 45AC           B8                   03CE  mov	ax,#$3CE
18312 45AF           50                         push	ax
18313                                           ! Debug: func () void = outw+0 (used reg = )
18314 45B0           E8         3814            call	_outw
18315 45B3           83C4                   04  add	sp,*4
18316                                           !BCC_EOS
18317                                           ! 2026  for(i=0;i<cheight;i++)
18318                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18319 45B6           30C0                       xor	al,al
18320 45B8           8846         FB            mov	-5[bp],al
18321                                           !BCC_EOS
18322                                           !BCC_EOS
18323                                           ! 2027   {
18324 45BB           EB           43            jmp .9F
18325                       000045BD            .A0:
18326                                           ! 2028    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18327                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18328 45BD           8A46         0A            mov	al,$A[bp]
18329 45C0           30E4                       xor	ah,ah
18330 45C2           50                         push	ax
18331                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18332 45C3           8A46         0C            mov	al,$C[bp]
18333 45C6           30E4                       xor	ah,ah
18334 45C8           89C3                       mov	bx,ax
18335 45CA           8A46         FB            mov	al,-5[bp]
18336 45CD           30E4                       xor	ah,ah
18337 45CF           89D9                       mov	cx,bx
18338 45D1           F7E9                       imul	cx
18339                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18340                                           ! Debug: expression subtree swapping
18341 45D3           0346         FE            add	ax,-2[bp]
18342                                           ! Debug: list unsigned int = ax+0 (used reg = )
18343 45D6           50                         push	ax
18344                                           ! Debug: list unsigned int = const $A000 (used reg = )
18345 45D7           B8                   A000  mov	ax,#$A000
18346 45DA           50                         push	ax
18347                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18348 45DB           8A46         0C            mov	al,$C[bp]
18349 45DE           30E4                       xor	ah,ah
18350 45E0           89C3                       mov	bx,ax
18351 45E2           8A46         FB            mov	al,-5[bp]
18352 45E5           30E4                       xor	ah,ah
18353 45E7           89D9                       mov	cx,bx
18354 45E9           F7E9                       imul	cx
18355                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18356                                           ! Debug: expression subtree swapping
18357 45EB           0346         FC            add	ax,-4[bp]
18358                                           ! Debug: list unsigned int = ax+0 (used reg = )
18359 45EE           50                         push	ax
18360                                           ! Debug: list unsigned int = const $A000 (used reg = )
18361 45EF           B8                   A000  mov	ax,#$A000
18362 45F2           50                         push	ax
18363                                           ! Debug: func () void = memcpyb+0 (used reg = )
18364 45F3           E8         36F5            call	_memcpyb
18365 45F6           83C4                   0A  add	sp,*$A
18366                                           !BCC_EOS
18367                                           ! 2029   }
18368                                           ! 2030  outw(0x3ce, 0x0005);
18369                       000045F9            .9E:
18370                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18371 45F9           8A46         FB            mov	al,-5[bp]
18372 45FC           40                         inc	ax
18373 45FD           8846         FB            mov	-5[bp],al
18374                       00004600            .9F:
18375                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18376 4600           8A46         FB            mov	al,-5[bp]
18377 4603           3A46         0E            cmp	al,$E[bp]
18378 4606           72           B5            jb 	.A0
18379                       00004608            .A1:
18380                       00004608            .9D:
18381                                           ! Debug: list int = const 5 (used reg = )
18382 4608           B8                   0005  mov	ax,*5
18383 460B           50                         push	ax
18384                                           ! Debug: list int = const $3CE (used reg = )
18385 460C           B8                   03CE  mov	ax,#$3CE
18386 460F           50                         push	ax
18387                                           ! Debug: func () void = outw+0 (used reg = )
18388 4610           E8         37B4            call	_outw
18389 4613           83C4                   04  add	sp,*4
18390                                           !BCC_EOS
18391                                           ! 2031 }
18392 4616           89EC                       mov	sp,bp
18393 4618           5D                         pop	bp
18394 4619           C3                         ret
18395                                           ! 2032 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18396                                           ! Register BX used in function vgamem_copy_pl4
18397                                           ! 2033 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18398                       0000461A            _vgamem_fill_pl4:
18399                                           !BCC_EOS
18400                                           !BCC_EOS
18401                                           !BCC_EOS
18402                                           !BCC_EOS
18403                                           !BCC_EOS
18404                                           !BCC_EOS
18405                                           ! 2034 {
18406                                           ! 2035  Bit16u dest;
18407                                           !BCC_EOS
18408                                           ! 2036  Bit8u i;
18409                                           !BCC_EOS
18410                                           ! 2037  dest=ystart*cheight*nbcols+xstart;
18411 461A           55                         push	bp
18412 461B           89E5                       mov	bp,sp
18413 461D           83C4                   FC  add	sp,*-4
18414                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18415 4620           8A46         0C            mov	al,$C[bp]
18416 4623           30E4                       xor	ah,ah
18417 4625           89C3                       mov	bx,ax
18418 4627           8A46         06            mov	al,6[bp]
18419 462A           30E4                       xor	ah,ah
18420 462C           89D9                       mov	cx,bx
18421 462E           F7E9                       imul	cx
18422                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18423 4630           89C3                       mov	bx,ax
18424 4632           8A46         0A            mov	al,$A[bp]
18425 4635           30E4                       xor	ah,ah
18426 4637           93                         xchg	ax,bx
18427 4638           89D9                       mov	cx,bx
18428 463A           F7E9                       imul	cx
18429                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18430 463C           0246         04            add	al,4[bp]
18431 463F           80D4                   00  adc	ah,*0
18432                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18433 4642           8946         FE            mov	-2[bp],ax
18434                                           !BCC_EOS
18435                                           ! 2038  outw(0x3ce, 0x0205);
18436                                           ! Debug: list int = const $205 (used reg = )
18437 4645           B8                   0205  mov	ax,#$205
18438 4648           50                         push	ax
18439                                           ! Debug: list int = const $3CE (used reg = )
18440 4649           B8                   03CE  mov	ax,#$3CE
18441 464C           50                         push	ax
18442                                           ! Debug: func () void = outw+0 (used reg = )
18443 464D           E8         3777            call	_outw
18444 4650           83C4                   04  add	sp,*4
18445                                           !BCC_EOS
18446                                           ! 2039  for(i=0;i<cheight;i++)
18447                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18448 4653           30C0                       xor	al,al
18449 4655           8846         FD            mov	-3[bp],al
18450                                           !BCC_EOS
18451                                           !BCC_EOS
18452                                           ! 2040   {
18453 4658           EB           31            jmp .A4
18454                       0000465A            .A5:
18455                                           ! 2041    memsetb(0xa000,dest+i*nbcols,attr,cols);
18456                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18457 465A           8A46         08            mov	al,8[bp]
18458 465D           30E4                       xor	ah,ah
18459 465F           50                         push	ax
18460                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18461 4660           8A46         0E            mov	al,$E[bp]
18462 4663           30E4                       xor	ah,ah
18463 4665           50                         push	ax
18464                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18465 4666           8A46         0A            mov	al,$A[bp]
18466 4669           30E4                       xor	ah,ah
18467 466B           89C3                       mov	bx,ax
18468 466D           8A46         FD            mov	al,-3[bp]
18469 4670           30E4                       xor	ah,ah
18470 4672           89D9                       mov	cx,bx
18471 4674           F7E9                       imul	cx
18472                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18473                                           ! Debug: expression subtree swapping
18474 4676           0346         FE            add	ax,-2[bp]
18475                                           ! Debug: list unsigned int = ax+0 (used reg = )
18476 4679           50                         push	ax
18477                                           ! Debug: list unsigned int = const $A000 (used reg = )
18478 467A           B8                   A000  mov	ax,#$A000
18479 467D           50                         push	ax
18480                                           ! Debug: func () void = memsetb+0 (used reg = )
18481 467E           E8         3620            call	_memsetb
18482 4681           83C4                   08  add	sp,*8
18483                                           !BCC_EOS
18484                                           ! 2042   }
18485                                           ! 2043  outw(0x3ce, 0x0005);
18486                       00004684            .A3:
18487                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18488 4684           8A46         FD            mov	al,-3[bp]
18489 4687           40                         inc	ax
18490 4688           8846         FD            mov	-3[bp],al
18491                       0000468B            .A4:
18492                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18493 468B           8A46         FD            mov	al,-3[bp]
18494 468E           3A46         0C            cmp	al,$C[bp]
18495 4691           72           C7            jb 	.A5
18496                       00004693            .A6:
18497                       00004693            .A2:
18498                                           ! Debug: list int = const 5 (used reg = )
18499 4693           B8                   0005  mov	ax,*5
18500 4696           50                         push	ax
18501                                           ! Debug: list int = const $3CE (used reg = )
18502 4697           B8                   03CE  mov	ax,#$3CE
18503 469A           50                         push	ax
18504                                           ! Debug: func () void = outw+0 (used reg = )
18505 469B           E8         3729            call	_outw
18506 469E           83C4                   04  add	sp,*4
18507                                           !BCC_EOS
18508                                           ! 2044 }
18509 46A1           89EC                       mov	sp,bp
18510 46A3           5D                         pop	bp
18511 46A4           C3                         ret
18512                                           ! 2045 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18513                                           ! Register BX used in function vgamem_fill_pl4
18514                                           ! 2046 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18515                       000046A5            _vgamem_copy_cga:
18516                                           !BCC_EOS
18517                                           !BCC_EOS
18518                                           !BCC_EOS
18519                                           !BCC_EOS
18520                                           !BCC_EOS
18521                                           !BCC_EOS
18522                                           ! 2047 {
18523                                           ! 2048  Bit16u src,dest;
18524                                           !BCC_EOS
18525                                           ! 2049  Bit8u i;
18526                                           !BCC_EOS
18527                                           ! 2050  src=((ysrc*cheight*nbcols)>>1)+xstart;
18528 46A5           55                         push	bp
18529 46A6           89E5                       mov	bp,sp
18530 46A8           83C4                   FA  add	sp,*-6
18531                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18532 46AB           8A46         0E            mov	al,$E[bp]
18533 46AE           30E4                       xor	ah,ah
18534 46B0           89C3                       mov	bx,ax
18535 46B2           8A46         06            mov	al,6[bp]
18536 46B5           30E4                       xor	ah,ah
18537 46B7           89D9                       mov	cx,bx
18538 46B9           F7E9                       imul	cx
18539                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18540 46BB           89C3                       mov	bx,ax
18541 46BD           8A46         0C            mov	al,$C[bp]
18542 46C0           30E4                       xor	ah,ah
18543 46C2           93                         xchg	ax,bx
18544 46C3           89D9                       mov	cx,bx
18545 46C5           F7E9                       imul	cx
18546                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18547 46C7           D1E8                       shr	ax,*1
18548                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18549 46C9           0246         04            add	al,4[bp]
18550 46CC           80D4                   00  adc	ah,*0
18551                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18552 46CF           8946         FE            mov	-2[bp],ax
18553                                           !BCC_EOS
18554                                           ! 2051  dest=((ydest*cheight*nbcols)>>1)+xstart;
18555                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18556 46D2           8A46         0E            mov	al,$E[bp]
18557 46D5           30E4                       xor	ah,ah
18558 46D7           89C3                       mov	bx,ax
18559 46D9           8A46         08            mov	al,8[bp]
18560 46DC           30E4                       xor	ah,ah
18561 46DE           89D9                       mov	cx,bx
18562 46E0           F7E9                       imul	cx
18563                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18564 46E2           89C3                       mov	bx,ax
18565 46E4           8A46         0C            mov	al,$C[bp]
18566 46E7           30E4                       xor	ah,ah
18567 46E9           93                         xchg	ax,bx
18568 46EA           89D9                       mov	cx,bx
18569 46EC           F7E9                       imul	cx
18570                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18571 46EE           D1E8                       shr	ax,*1
18572                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18573 46F0           0246         04            add	al,4[bp]
18574 46F3           80D4                   00  adc	ah,*0
18575                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18576 46F6           8946         FC            mov	-4[bp],ax
18577                                           !BCC_EOS
18578                                           ! 2052  for(i=0;i<cheight;i++)
18579                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18580 46F9           30C0                       xor	al,al
18581 46FB           8846         FB            mov	-5[bp],al
18582                                           !BCC_EOS
18583                                           !BCC_EOS
18584                                           ! 2053   {
18585 46FE           E9         00A8            br 	.A9
18586                       00004701            .AA:
18587                                           ! 2054    if (i & 1)
18588                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18589 4701           8A46         FB            mov	al,-5[bp]
18590 4704           24                     01  and	al,*1
18591 4706           84C0                       test	al,al
18592 4708           74           56            je  	.AB
18593                       0000470A            .AC:
18594                                           ! 2055      memcpyb(0xb
18595                                           ! 2055 800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18596                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18597 470A           8A46         0A            mov	al,$A[bp]
18598 470D           30E4                       xor	ah,ah
18599 470F           50                         push	ax
18600                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18601 4710           8A46         FB            mov	al,-5[bp]
18602 4713           30E4                       xor	ah,ah
18603 4715           D1E8                       shr	ax,*1
18604                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18605 4717           89C3                       mov	bx,ax
18606 4719           8A46         0C            mov	al,$C[bp]
18607 471C           30E4                       xor	ah,ah
18608 471E           93                         xchg	ax,bx
18609 471F           89D9                       mov	cx,bx
18610 4721           F7E9                       imul	cx
18611 4723           50                         push	ax
18612                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18613                                           ! Debug: expression subtree swapping
18614 4724           8B46         FE            mov	ax,-2[bp]
18615                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18616 4727           05                   2000  add	ax,#$2000
18617 472A           0346         F6            add	ax,-$A[bp]
18618 472D           44                         inc	sp
18619 472E           44                         inc	sp
18620                                           ! Debug: list unsigned int = ax+0 (used reg = )
18621 472F           50                         push	ax
18622                                           ! Debug: list unsigned int = const $B800 (used reg = )
18623 4730           B8                   B800  mov	ax,#$B800
18624 4733           50                         push	ax
18625                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18626 4734           8A46         FB            mov	al,-5[bp]
18627 4737           30E4                       xor	ah,ah
18628 4739           D1E8                       shr	ax,*1
18629                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18630 473B           89C3                       mov	bx,ax
18631 473D           8A46         0C            mov	al,$C[bp]
18632 4740           30E4                       xor	ah,ah
18633 4742           93                         xchg	ax,bx
18634 4743           89D9                       mov	cx,bx
18635 4745           F7E9                       imul	cx
18636 4747           50                         push	ax
18637                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18638                                           ! Debug: expression subtree swapping
18639 4748           8B46         FC            mov	ax,-4[bp]
18640                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18641 474B           05                   2000  add	ax,#$2000
18642 474E           0346         F2            add	ax,-$E[bp]
18643 4751           44                         inc	sp
18644 4752           44                         inc	sp
18645                                           ! Debug: list unsigned int = ax+0 (used reg = )
18646 4753           50                         push	ax
18647                                           ! Debug: list unsigned int = const $B800 (used reg = )
18648 4754           B8                   B800  mov	ax,#$B800
18649 4757           50                         push	ax
18650                                           ! Debug: func () void = memcpyb+0 (used reg = )
18651 4758           E8         3590            call	_memcpyb
18652 475B           83C4                   0A  add	sp,*$A
18653                                           !BCC_EOS
18654                                           ! 2056    else
18655                                           ! 2057      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18656 475E           EB           42            jmp .AD
18657                       00004760            .AB:
18658                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18659 4760           8A46         0A            mov	al,$A[bp]
18660 4763           30E4                       xor	ah,ah
18661 4765           50                         push	ax
18662                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18663 4766           8A46         FB            mov	al,-5[bp]
18664 4769           30E4                       xor	ah,ah
18665 476B           D1E8                       shr	ax,*1
18666                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18667 476D           89C3                       mov	bx,ax
18668 476F           8A46         0C            mov	al,$C[bp]
18669 4772           30E4                       xor	ah,ah
18670 4774           93                         xchg	ax,bx
18671 4775           89D9                       mov	cx,bx
18672 4777           F7E9                       imul	cx
18673                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18674                                           ! Debug: expression subtree swapping
18675 4779           0346         FE            add	ax,-2[bp]
18676                                           ! Debug: list unsigned int = ax+0 (used reg = )
18677 477C           50                         push	ax
18678                                           ! Debug: list unsigned int = const $B800 (used reg = )
18679 477D           B8                   B800  mov	ax,#$B800
18680 4780           50                         push	ax
18681                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18682 4781           8A46         FB            mov	al,-5[bp]
18683 4784           30E4                       xor	ah,ah
18684 4786           D1E8                       shr	ax,*1
18685                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18686 4788           89C3                       mov	bx,ax
18687 478A           8A46         0C            mov	al,$C[bp]
18688 478D           30E4                       xor	ah,ah
18689 478F           93                         xchg	ax,bx
18690 4790           89D9                       mov	cx,bx
18691 4792           F7E9                       imul	cx
18692                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18693                                           ! Debug: expression subtree swapping
18694 4794           0346         FC            add	ax,-4[bp]
18695                                           ! Debug: list unsigned int = ax+0 (used reg = )
18696 4797           50                         push	ax
18697                                           ! Debug: list unsigned int = const $B800 (used reg = )
18698 4798           B8                   B800  mov	ax,#$B800
18699 479B           50                         push	ax
18700                                           ! Debug: func () void = memcpyb+0 (used reg = )
18701 479C           E8         354C            call	_memcpyb
18702 479F           83C4                   0A  add	sp,*$A
18703                                           !BCC_EOS
18704                                           ! 2058   }
18705                       000047A2            .AD:
18706                                           ! 2059 }
18707                       000047A2            .A8:
18708                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18709 47A2           8A46         FB            mov	al,-5[bp]
18710 47A5           40                         inc	ax
18711 47A6           8846         FB            mov	-5[bp],al
18712                       000047A9            .A9:
18713                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18714 47A9           8A46         FB            mov	al,-5[bp]
18715 47AC           3A46         0E            cmp	al,$E[bp]
18716 47AF         0F82         FF4E            blo 	.AA
18717                       000047B3            .AE:
18718                       000047B3            .A7:
18719 47B3           89EC                       mov	sp,bp
18720 47B5           5D                         pop	bp
18721 47B6           C3                         ret
18722                                           ! 2060 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18723                                           ! Register BX used in function vgamem_copy_cga
18724                                           ! 2061 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18725                       000047B7            _vgamem_fill_cga:
18726                                           !BCC_EOS
18727                                           !BCC_EOS
18728                                           !BCC_EOS
18729                                           !BCC_EOS
18730                                           !BCC_EOS
18731                                           !BCC_EOS
18732                                           ! 2062 {
18733                                           ! 2063  Bit16u dest;
18734                                           !BCC_EOS
18735                                           ! 2064  Bit8u i;
18736                                           !BCC_EOS
18737                                           ! 2065  dest=((ystart*cheight*nbcols)>>1)+xstart;
18738 47B7           55                         push	bp
18739 47B8           89E5                       mov	bp,sp
18740 47BA           83C4                   FC  add	sp,*-4
18741                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18742 47BD           8A46         0C            mov	al,$C[bp]
18743 47C0           30E4                       xor	ah,ah
18744 47C2           89C3                       mov	bx,ax
18745 47C4           8A46         06            mov	al,6[bp]
18746 47C7           30E4                       xor	ah,ah
18747 47C9           89D9                       mov	cx,bx
18748 47CB           F7E9                       imul	cx
18749                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18750 47CD           89C3                       mov	bx,ax
18751 47CF           8A46         0A            mov	al,$A[bp]
18752 47D2           30E4                       xor	ah,ah
18753 47D4           93                         xchg	ax,bx
18754 47D5           89D9                       mov	cx,bx
18755 47D7           F7E9                       imul	cx
18756                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18757 47D9           D1E8                       shr	ax,*1
18758                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18759 47DB           0246         04            add	al,4[bp]
18760 47DE           80D4                   00  adc	ah,*0
18761                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18762 47E1           8946         FE            mov	-2[bp],ax
18763                                           !BCC_EOS
18764                                           ! 2066  for(i=0;i<cheight;i++)
18765                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18766 47E4           30C0                       xor	al,al
18767 47E6           8846         FD            mov	-3[bp],al
18768                                           !BCC_EOS
18769                                           !BCC_EOS
18770                                           ! 2067   {
18771 47E9           EB           75            jmp .B1
18772                       000047EB            .B2:
18773                                           ! 2068    if (i & 1)
18774                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18775 47EB           8A46         FD            mov	al,-3[bp]
18776 47EE           24                     01  and	al,*1
18777 47F0           84C0                       test	al,al
18778 47F2           74           38            je  	.B3
18779                       000047F4            .B4:
18780                                           ! 2069      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18781                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18782 47F4           8A46         08            mov	al,8[bp]
18783 47F7           30E4                       xor	ah,ah
18784 47F9           50                         push	ax
18785                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18786 47FA           8A46         0E            mov	al,$E[bp]
18787 47FD           30E4                       xor	ah,ah
18788 47FF           50                         push	ax
18789                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18790 4800           8A46         FD            mov	al,-3[bp]
18791 4803           30E4                       xor	ah,ah
18792 4805           D1E8                       shr	ax,*1
18793                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18794 4807           89C3                       mov	bx,ax
18795 4809           8A46         0A            mov	al,$A[bp]
18796 480C           30E4                       xor	ah,ah
18797 480E           93                         xchg	ax,bx
18798 480F           89D9                       mov	cx,bx
18799 4811           F7E9                       imul	cx
18800 4813           50                         push	ax
18801                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18802                                           ! Debug: expression subtree swapping
18803 4814           8B46         FE            mov	ax,-2[bp]
18804                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18805 4817           05                   2000  add	ax,#$2000
18806 481A           0346         F6            add	ax,-$A[bp]
18807 481D           44                         inc	sp
18808 481E           44                         inc	sp
18809                                           ! Debug: list unsigned int = ax+0 (used reg = )
18810 481F           50                         push	ax
18811                                           ! Debug: list unsigned int = const $B800 (used reg = )
18812 4820           B8                   B800  mov	ax,#$B800
18813 4823           50                         push	ax
18814                                           ! Debug: func () void = memsetb+0 (used reg = )
18815 4824           E8         347A            call	_memsetb
18816 4827           83C4                   08  add	sp,*8
18817                                           !BCC_EOS
18818                                           ! 2070    else
18819                                           ! 2071      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18820 482A           EB           2D            jmp .B5
18821                       0000482C            .B3:
18822                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18823 482C           8A46         08            mov	al,8[bp]
18824 482F           30E4                       xor	ah,ah
18825 4831           50                         push	ax
18826                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18827 4832           8A46         0E            mov	al,$E[bp]
18828 4835           30E4                       xor	ah,ah
18829 4837           50                         push	ax
18830                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18831 4838           8A46         FD            mov	al,-3[bp]
18832 483B           30E4                       xor	ah,ah
18833 483D           D1E8                       shr	ax,*1
18834                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18835 483F           89C3                       mov	bx,ax
18836 4841           8A46         0A            mov	al,$A[bp]
18837 4844           30E4                       xor	ah,ah
18838 4846           93                         xchg	ax,bx
18839 4847           89D9                       mov	cx,bx
18840 4849           F7E9                       imul	cx
18841                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18842                                           ! Debug: expression subtree swapping
18843 484B           0346         FE            add	ax,-2[bp]
18844                                           ! Debug: list unsigned int = ax+0 (used reg = )
18845 484E           50                         push	ax
18846                                           ! Debug: list unsigned int = const $B800 (used reg = )
18847 484F           B8                   B800  mov	ax,#$B800
18848 4852           50                         push	ax
18849                                           ! Debug: func () void = memsetb+0 (used reg = )
18850 4853           E8         344B            call	_memsetb
18851 4856           83C4                   08  add	sp,*8
18852                                           !BCC_EOS
18853                                           ! 2072   }
18854                       00004859            .B5:
18855                                           ! 2073 }
18856                       00004859            .B0:
18857                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18858 4859           8A46         FD            mov	al,-3[bp]
18859 485C           40                         inc	ax
18860 485D           8846         FD            mov	-3[bp],al
18861                       00004860            .B1:
18862                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18863 4860           8A46         FD            mov	al,-3[bp]
18864 4863           3A46         0C            cmp	al,$C[bp]
18865 4866           72           83            jb 	.B2
18866                       00004868            .B6:
18867                       00004868            .AF:
18868 4868           89EC                       mov	sp,bp
18869 486A           5D                         pop	bp
18870 486B           C3                         ret
18871                                           ! 2074 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18872                                           ! Register BX used in function vgamem_fill_cga
18873                                           ! 2075 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18874                       0000486C            _biosfn_scroll:
18875                                           !BCC_EOS
18876                                           !BCC_EOS
18877                                           !BCC_EOS
18878                                           !BCC_EOS
18879                                           !BCC_EOS
18880                                           !BCC_EOS
18881                                           !BCC_EOS
18882                                           !BCC_EOS
18883                                           ! 2076 {
18884                                           ! 2077  Bit8u mode,line,cheight,bpp,cols;
18885                                           !BCC_EOS
18886                                           ! 2078  Bit16u nbcols,nbrows,i;
18887                                           !BCC_EOS
18888                                           ! 2079  Bit16u address;
18889                                           !BCC_EOS
18890                                           ! 2080  if(rul>rlr)return;
18891 486C           55                         push	bp
18892 486D           89E5                       mov	bp,sp
18893 486F           83C4                   F2  add	sp,*-$E
18894                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18895 4872           8A46         08            mov	al,8[bp]
18896 4875           3A46         0C            cmp	al,$C[bp]
18897 4878           76           04            jbe 	.B7
18898                       0000487A            .B8:
18899 487A           89EC                       mov	sp,bp
18900 487C           5D                         pop	bp
18901 487D           C3                         ret
18902                                           !BCC_EOS
18903                                           ! 2081  if(cul>clr)return;
18904                       0000487E            .B7:
18905                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18906 487E           8A46         0A            mov	al,$A[bp]
18907 4881           3A46         0E            cmp	al,$E[bp]
18908 4884           76           04            jbe 	.B9
18909                       00004886            .BA:
18910 4886           89EC                       mov	sp,bp
18911 4888           5D                         pop	bp
18912 4889           C3                         ret
18913                                           !BCC_EOS
18914                                           ! 2082  mode=read_byte(0x40,0x49);
18915                       0000488A            .B9:
18916                                           ! Debug: list int = const $49 (used reg = )
18917 488A           B8                   0049  mov	ax,*$49
18918 488D           50                         push	ax
18919                                           ! Debug: list int = const $40 (used reg = )
18920 488E           B8                   0040  mov	ax,*$40
18921 4891           50                         push	ax
18922                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18923 4892           E8         34B6            call	_read_byte
18924 4895           83C4                   04  add	sp,*4
18925                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18926 4898           8846         FF            mov	-1[bp],al
18927                                           !BCC_EOS
18928                                           ! 2083  line=find_vga_entry(mode);
18929                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18930 489B           8A46         FF            mov	al,-1[bp]
18931 489E           30E4                       xor	ah,ah
18932 48A0           50                         push	ax
18933                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18934 48A1           E8         33BB            call	_find_vga_entry
18935 48A4           44                         inc	sp
18936 48A5           44                         inc	sp
18937                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18938 48A6           8846         FE            mov	-2[bp],al
18939                                           !BCC_EOS
18940                                           ! 2084  if(line==0xFF)return;
18941                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18942 48A9           8A46         FE            mov	al,-2[bp]
18943 48AC           3C                     FF  cmp	al,#$FF
18944 48AE           75           04            jne 	.BB
18945                       000048B0            .BC:
18946 48B0           89EC                       mov	sp,bp
18947 48B2           5D                         pop	bp
18948 48B3           C3                         ret
18949                                           !BCC_EOS
18950                                           ! 2085  nbrows=read_byte(0x40,0x84)+1;
18951                       000048B4            .BB:
18952                                           ! Debug: list int = const $84 (used reg = )
18953 48B4           B8                   0084  mov	ax,#$84
18954 48B7           50                         push	ax
18955                                           ! Debug: list int = const $40 (used reg = )
18956 48B8           B8                   0040  mov	ax,*$40
18957 48BB           50                         push	ax
18958                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18959 48BC           E8         348C            call	_read_byte
18960 48BF           83C4                   04  add	sp,*4
18961                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18962 48C2           30E4                       xor	ah,ah
18963                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18964 48C4           40                         inc	ax
18965 48C5           8946         F6            mov	-$A[bp],ax
18966                                           !BCC_EOS
18967                                           ! 2086  nbcols=read_word(0x40,0x4A);
18968                                           ! Debug: list int = const $4A (used reg = )
18969 48C8           B8                   004A  mov	ax,*$4A
18970 48CB           50                         push	ax
18971                                           ! Debug: list int = const $40 (used reg = )
18972 48CC           B8                   0040  mov	ax,*$40
18973 48CF           50                         push	ax
18974                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18975 48D0           E8         348B            call	_read_word
18976 48D3           83C4                   04  add	sp,*4
18977                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18978 48D6           8946         F8            mov	-8[bp],ax
18979                                           !BCC_EOS
18980                                           ! 2087  if(page==0xFF)
18981                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
18982 48D9           8A46         10            mov	al,$10[bp]
18983 48DC           3C                     FF  cmp	al,#$FF
18984 48DE           75           11            jne 	.BD
18985                       000048E0            .BE:
18986                                           ! 2088   page=read_byte(0x40,0x62);
18987                                           ! Debug: list int = const $62 (used reg = )
18988 48E0           B8                   0062  mov	ax,*$62
18989 48E3           50                         push	ax
18990                                           ! Debug: list int = const $40 (used reg = )
18991 48E4           B8                   0040  mov	ax,*$40
18992 48E7           50                         push	ax
18993                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18994 48E8           E8         3460            call	_read_byte
18995 48EB           83C4                   04  add	sp,*4
18996                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
18997 48EE           8846         10            mov	$10[bp],al
18998                                           !BCC_EOS
18999                                           ! 2089  if(rlr>=nbrows)rlr=nbrows-1;
19000                       000048F1            .BD:
19001                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19002 48F1           8A46         0C            mov	al,$C[bp]
19003 48F4           30E4                       xor	ah,ah
19004 48F6           3B46         F6            cmp	ax,-$A[bp]
19005 48F9           72           07            jb  	.BF
19006                       000048FB            .C0:
19007                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19008 48FB           8B46         F6            mov	ax,-$A[bp]
19009                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19010 48FE           48                         dec	ax
19011 48FF           8846         0C            mov	$C[bp],al
19012                                           !BCC_EOS
19013                                           ! 2090  if(clr>=nbcols)clr=nbcols-1;
19014                       00004902            .BF:
19015                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19016 4902           8A46         0E            mov	al,$E[bp]
19017 4905           30E4                       xor	ah,ah
19018 4907           3B46         F8            cmp	ax,-8[bp]
19019 490A           72           07            jb  	.C1
19020                       0000490C            .C2:
19021                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19022 490C           8B46         F8            mov	ax,-8[bp]
19023                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19024 490F           48                         dec	ax
19025 4910           8846         0E            mov	$E[bp],al
19026                                           !BCC_EOS
19027                                           ! 2091  if(nblines>nbrows)nblines=0;
19028                       00004913            .C1:
19029                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19030 4913           8A46         04            mov	al,4[bp]
19031 4916           30E4                       xor	ah,ah
19032 4918           3B46         F6            cmp	ax,-$A[bp]
19033 491B           76           05            jbe 	.C3
19034                       0000491D            .C4:
19035                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19036 491D           30C0                       xor	al,al
19037 491F           8846         04            mov	4[bp],al
19038                                           !BCC_EOS
19039                                           ! 2092  cols=clr-cul+1;
19040                       00004922            .C3:
19041                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19042 4922           8A46         0E            mov	al,$E[bp]
19043 4925           30E4                       xor	ah,ah
19044 4927           2A46         0A            sub	al,$A[bp]
19045 492A           80DC                   00  sbb	ah,*0
19046                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19047                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19048 492D           40                         inc	ax
19049 492E           8846         FB            mov	-5[bp],al
19050                                           !BCC_EOS
19051                                           ! 2093  if(vga_modes[line].class==0x00)
19052                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
19053 4931           8A46         FE            mov	al,-2[bp]
19054 4934           30E4                       xor	ah,ah
19055 4936           B1                     03  mov	cl,*3
19056 4938           D3E0                       shl	ax,cl
19057 493A           89C3                       mov	bx,ax
19058 493C           81C3                 01DB  add	bx,#_vga_modes
19059                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19060 4940           8A47         01            mov	al,1[bx]
19061 4943           84C0                       test	al,al
19062 4945         0F85         0250            bne 	.C5
19063                       00004949            .C6:
19064                                           ! 2094   {
19065                                           ! 2095    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19066                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19067 4949           8B46         F8            mov	ax,-8[bp]
19068 494C           8B4E         F6            mov	cx,-$A[bp]
19069 494F           F7E9                       imul	cx
19070                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19071 4951           D1E0                       shl	ax,*1
19072                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19073 4953           0C                     FF  or	al,#$FF
19074                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19075                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19076 4955           89C3                       mov	bx,ax
19077 4957           8A46         10            mov	al,$10[bp]
19078 495A           30E4                       xor	ah,ah
19079 495C           93                         xchg	ax,bx
19080 495D           40                         inc	ax
19081 495E           89D9                       mov	cx,bx
19082 4960           F7E9                       imul	cx
19083                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19084 4962           8946         F2            mov	-$E[bp],ax
19085                                           !BCC_EOS
19086                                           ! 2096    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19087                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19088 4965           8A46         04            mov	al,4[bp]
19089 4968           84C0                       test	al,al
19090 496A           75           67            jne 	.C7
19091                       0000496C            .CC:
19092                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19093 496C           8A46         08            mov	al,8[bp]
19094 496F           84C0                       test	al,al
19095 4971           75           60            jne 	.C7
19096                       00004973            .CB:
19097                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19098 4973           8A46         0A            mov	al,$A[bp]
19099 4976           84C0                       test	al,al
19100 4978           75           59            jne 	.C7
19101                       0000497A            .CA:
19102                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19103 497A           8B46         F6            mov	ax,-$A[bp]
19104                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19105                                           ! Debug: expression subtree swapping
19106 497D           48                         dec	ax
19107 497E           50                         push	ax
19108 497F           8A46         0C            mov	al,$C[bp]
19109 4982           30E4                       xor	ah,ah
19110 4984           3B46         F0            cmp	ax,-$10[bp]
19111 4987           8D66         F2            lea	sp,-$E[bp]
19112 498A           75           47            jne 	.C7
19113                       0000498C            .C9:
19114                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19115 498C           8B46         F8            mov	ax,-8[bp]
19116                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19117                                           ! Debug: expression subtree swapping
19118 498F           48                         dec	ax
19119 4990           50                         push	ax
19120 4991           8A46         0E            mov	al,$E[bp]
19121 4994           30E4                       xor	ah,ah
19122 4996           3B46         F0            cmp	ax,-$10[bp]
19123 4999           8D66         F2            lea	sp,-$E[bp]
19124 499C           75           35            jne 	.C7
19125                       0000499E            .C8:
19126                                           ! 2097     {
19127                                           ! 2098      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19128                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19129 499E           8B46         F6            mov	ax,-$A[bp]
19130 49A1           8B4E         F8            mov	cx,-8[bp]
19131 49A4           F7E9                       imul	cx
19132                                           ! Debug: list unsigned int = ax+0 (used reg = )
19133 49A6           50                         push	ax
19134                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19135 49A7           8A46         06            mov	al,6[bp]
19136 49AA           30E4                       xor	ah,ah
19137                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19138 49AC           B9                   0100  mov	cx,#$100
19139 49AF           F7E9                       imul	cx
19140                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19141                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19142 49B1           05                   0020  add	ax,*$20
19143 49B4           50                         push	ax
19144                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19145 49B5           FF76         F2            push	-$E[bp]
19146                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19147 49B8           8A46         FE            mov	al,-2[bp]
19148 49BB           30E4                       xor	ah,ah
19149 49BD           B1                     03  mov	cl,*3
19150 49BF           D3E0                       shl	ax,cl
19151 49C1           89C3                       mov	bx,ax
19152 49C3           81C3                 01DB  add	bx,#_vga_modes
19153                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19154 49C7           FF77         04            push	4[bx]
19155                                           ! Debug: func () void = memsetw+0 (used reg = )
19156 49CA           E8         32F9            call	_memsetw
19157 49CD           83C4                   08  add	sp,*8
19158                                           !BCC_EOS
19159                                           ! 2099     }
19160                                           ! 2100    else
19161                                           ! 2101     {
19162 49D0           E9         01C3            br 	.CD
19163                       000049D3            .C7:
19164                                           ! 2102      if(dir==1)
19165                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19166 49D3           8A46         12            mov	al,$12[bp]
19167 49D6           3C                     01  cmp	al,*1
19168 49D8         0F85         00DC            bne 	.CE
19169                       000049DC            .CF:
19170                                           ! 2103       {for(i=rul;i<=rlr;i++)
19171                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19172 49DC           8A46         08            mov	al,8[bp]
19173 49DF           30E4                       xor	ah,ah
19174 49E1           8946         F4            mov	-$C[bp],ax
19175                                           !BCC_EOS
19176                                           !BCC_EOS
19177                                           ! 2104         {
19178 49E4           E9         00C2            br 	.D2
19179                       000049E7            .D3:
19180                                           ! 2105          if((i+nblines>rlr)||(nblines==0))
19181                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19182 49E7           8B46         F4            mov	ax,-$C[bp]
19183 49EA           0246         04            add	al,4[bp]
19184 49ED           80D4                   00  adc	ah,*0
19185                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19186 49F0           50                         push	ax
19187 49F1           8A46         0C            mov	al,$C[bp]
19188 49F4           30E4                       xor	ah,ah
19189 49F6           3B46         F0            cmp	ax,-$10[bp]
19190 49F9           8D66         F2            lea	sp,-$E[bp]
19191 49FC           72           07            jb  	.D5
19192                       000049FE            .D6:
19193                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19194 49FE           8A46         04            mov	al,4[bp]
19195 4A01           84C0                       test	al,al
19196 4A03           75           42            jne 	.D4
19197                       00004A05            .D5:
19198                                           ! 2106           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19199                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19200 4A05           8A46         FB            mov	al,-5[bp]
19201 4A08           30E4                       xor	ah,ah
19202 4A0A           50                         push	ax
19203                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19204 4A0B           8A46         06            mov	al,6[bp]
19205 4A0E           30E4                       xor	ah,ah
19206                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19207 4A10           B9                   0100  mov	cx,#$100
19208 4A13           F7E9                       imul	cx
19209                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19210                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19211 4A15           05                   0020  add	ax,*$20
19212 4A18           50                         push	ax
19213                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19214 4A19           8B46         F4            mov	ax,-$C[bp]
19215 4A1C           8B4E         F8            mov	cx,-8[bp]
19216 4A1F           F7E9                       imul	cx
19217                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19218 4A21           0246         0A            add	al,$A[bp]
19219 4A24           80D4                   00  adc	ah,*0
19220                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19221 4A27           D1E0                       shl	ax,*1
19222                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19223                                           ! Debug: expression subtree swapping
19224 4A29           0346         F2            add	ax,-$E[bp]
19225                                           ! Debug: list unsigned int = ax+0 (used reg = )
19226 4A2C           50                         push	ax
19227                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19228 4A2D           8A46         FE            mov	al,-2[bp]
19229 4A30           30E4                       xor	ah,ah
19230 4A32           B1                     03  mov	cl,*3
19231 4A34           D3E0                       shl	ax,cl
19232 4A36           89C3                       mov	bx,ax
19233 4A38           81C3                 01DB  add	bx,#_vga_modes
19234                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19235 4A3C           FF77         04            push	4[bx]
19236                                           ! Debug: func () void = memsetw+0 (used reg = )
19237 4A3F           E8         3284            call	_memsetw
19238 4A42           83C4                   08  add	sp,*8
19239                                           !BCC_EOS
19240                                           ! 2107          else
19241                                           ! 2108           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19242 4A45           EB           5B            jmp .D7
19243                       00004A47            .D4:
19244                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19245 4A47           8A46         FB            mov	al,-5[bp]
19246 4A4A           30E4                       xor	ah,ah
19247 4A4C           50                         push	ax
19248                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19249 4A4D           8B46         F4            mov	ax,-$C[bp]
19250 4A50           0246         04            add	al,4[bp]
19251 4A53           80D4                   00  adc	ah,*0
19252                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19253 4A56           8B4E         F8            mov	cx,-8[bp]
19254 4A59           F7E9                       imul	cx
19255                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19256 4A5B           0246         0A            add	al,$A[bp]
19257 4A5E           80D4                   00  adc	ah,*0
19258                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19259 4A61           D1E0                       shl	ax,*1
19260                                           ! Debug: list unsigned int = ax+0 (used reg = )
19261 4A63           50                         push	ax
19262                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$12] struct  = vga_modes+0 (used reg = )
19263 4A64           8A46         FE            mov	al,-2[bp]
19264 4A67           30E4                       xor	ah,ah
19265 4A69           B1                     03  mov	cl,*3
19266 4A6B           D3E0                       shl	ax,cl
19267 4A6D           89C3                       mov	bx,ax
19268 4A6F           81C3                 01DB  add	bx,#_vga_modes
19269                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19270 4A73           FF77         04            push	4[bx]
19271                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19272 4A76           8B46         F4            mov	ax,-$C[bp]
19273 4A79           8B4E         F8            mov	cx,-8[bp]
19274 4A7C           F7E9                       imul	cx
19275                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19276 4A7E           0246         0A            add	al,$A[bp]
19277 4A81           80D4                   00  adc	ah,*0
19278                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19279 4A84           D1E0                       shl	ax,*1
19280                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19281                                           ! Debug: expression subtree swapping
19282 4A86           0346         F2            add	ax,-$E[bp]
19283                                           ! Debug: list unsigned int = ax+0 (used reg = )
19284 4A89           50                         push	ax
19285                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
19286 4A8A           8A46         FE            mov	al,-2[bp]
19287 4A8D           30E4                       xor	ah,ah
19288 4A8F           B1                     03  mov	cl,*3
19289 4A91           D3E0                       shl	ax,cl
19290 4A93           89C3                       mov	bx,ax
19291 4A95           81C3                 01DB  add	bx,#_vga_modes
19292                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19293 4A99           FF77         04            push	4[bx]
19294                                           ! Debug: func () void = memcpyw+0 (used reg = )
19295 4A9C           E8         327C            call	_memcpyw
19296 4A9F           83C4                   0A  add	sp,*$A
19297                                           !BCC_EOS
19298                                           ! 2109         }
19299                       00004AA2            .D7:
19300                                           ! 2110       }
19301                       00004AA2            .D1:
19302                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19303 4AA2           8B46         F4            mov	ax,-$C[bp]
19304 4AA5           40                         inc	ax
19305 4AA6           8946         F4            mov	-$C[bp],ax
19306                       00004AA9            .D2:
19307                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19308 4AA9           8A46         0C            mov	al,$C[bp]
19309 4AAC           30E4                       xor	ah,ah
19310 4AAE           3B46         F4            cmp	ax,-$C[bp]
19311 4AB1         0F83         FF32            bhis	.D3
19312                       00004AB5            .D8:
19313                       00004AB5            .D0:
19314                                           ! 2111      else
19315                                           ! 2112       {for(i=rlr;i>=rul;i--)
19316 4AB5           E9         00DE            br 	.D9
19317                       00004AB8            .CE:
19318                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19319 4AB8           8A46         0C            mov	al,$C[bp]
19320 4ABB           30E4                       xor	ah,ah
19321 4ABD           8946         F4            mov	-$C[bp],ax
19322                                           !BCC_EOS
19323                                           !BCC_EOS
19324                                           ! 2113         {
19325 4AC0           E9         00C7            br 	.DC
19326                       00004AC3            .DD:
19327                                           ! 2114          if((i<rul+nblines)||(nblines==0))
19328                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19329 4AC3           8A46         08            mov	al,8[bp]
19330 4AC6           30E4                       xor	ah,ah
19331 4AC8           0246         04            add	al,4[bp]
19332 4ACB           80D4                   00  adc	ah,*0
19333                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19334 4ACE           3B46         F4            cmp	ax,-$C[bp]
19335 4AD1           77           07            ja  	.DF
19336                       00004AD3            .E0:
19337                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19338 4AD3           8A46         04            mov	al,4[bp]
19339 4AD6           84C0                       test	al,al
19340 4AD8           75           42            jne 	.DE
19341                       00004ADA            .DF:
19342                                           ! 2115           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19343                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19344 4ADA           8A46         FB            mov	al,-5[bp]
19345 4ADD           30E4                       xor	ah,ah
19346 4ADF           50                         push	ax
19347                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19348 4AE0           8A46         06            mov	al,6[bp]
19349 4AE3           30E4                       xor	ah,ah
19350                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19351 4AE5           B9                   0100  mov	cx,#$100
19352 4AE8           F7E9                       imul	cx
19353                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19354                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19355 4AEA           05                   0020  add	ax,*$20
19356 4AED           50                         push	ax
19357                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19358 4AEE           8B46         F4            mov	ax,-$C[bp]
19359 4AF1           8B4E         F8            mov	cx,-8[bp]
19360 4AF4           F7E9                       imul	cx
19361                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19362 4AF6           0246         0A            add	al,$A[bp]
19363 4AF9           80D4                   00  adc	ah,*0
19364                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19365 4AFC           D1E0                       shl	ax,*1
19366                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19367                                           ! Debug: expression subtree swapping
19368 4AFE           0346         F2            add	ax,-$E[bp]
19369                                           ! Debug: list unsigned int = ax+0 (used reg = )
19370 4B01           50                         push	ax
19371                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19372 4B02           8A46         FE            mov	al,-2[bp]
19373 4B05           30E4                       xor	ah,ah
19374 4B07           B1                     03  mov	cl,*3
19375 4B09           D3E0                       shl	ax,cl
19376 4B0B           89C3                       mov	bx,ax
19377 4B0D           81C3                 01DB  add	bx,#_vga_modes
19378                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19379 4B11           FF77         04            push	4[bx]
19380                                           ! Debug: func () void = memsetw+0 (used reg = )
19381 4B14           E8         31AF            call	_memsetw
19382 4B17           83C4                   08  add	sp,*8
19383                                           !BCC_EOS
19384                                           ! 2116          else
19385                                           ! 2117           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19386 4B1A           EB           5B            jmp .E1
19387                       00004B1C            .DE:
19388                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19389 4B1C           8A46         FB            mov	al,-5[bp]
19390 4B1F           30E4                       xor	ah,ah
19391 4B21           50                         push	ax
19392                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19393 4B22           8B46         F4            mov	ax,-$C[bp]
19394 4B25           2A46         04            sub	al,4[bp]
19395 4B28           80DC                   00  sbb	ah,*0
19396                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19397 4B2B           8B4E         F8            mov	cx,-8[bp]
19398 4B2E           F7E9                       imul	cx
19399                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19400 4B30           0246         0A            add	al,$A[bp]
19401 4B33           80D4                   00  adc	ah,*0
19402                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19403 4B36           D1E0                       shl	ax,*1
19404                                           ! Debug: list unsigned int = ax+0 (used reg = )
19405 4B38           50                         push	ax
19406                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$12] struct  = vga_modes+0 (used reg = )
19407 4B39           8A46         FE            mov	al,-2[bp]
19408 4B3C           30E4                       xor	ah,ah
19409 4B3E           B1                     03  mov	cl,*3
19410 4B40           D3E0                       shl	ax,cl
19411 4B42           89C3                       mov	bx,ax
19412 4B44           81C3                 01DB  add	bx,#_vga_modes
19413                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19414 4B48           FF77         04            push	4[bx]
19415                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19416 4B4B           8B46         F4            mov	ax,-$C[bp]
19417 4B4E           8B4E         F8            mov	cx,-8[bp]
19418 4B51           F7E9                       imul	cx
19419                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19420 4B53           0246         0A            add	al,$A[bp]
19421 4B56           80D4                   00  adc	ah,*0
19422                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19423 4B59           D1E0                       shl	ax,*1
19424                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19425                                           ! Debug: expression subtree swapping
19426 4B5B           0346         F2            add	ax,-$E[bp]
19427                                           ! Debug: list unsigned int = ax+0 (used reg = )
19428 4B5E           50                         push	ax
19429                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
19430 4B5F           8A46         FE            mov	al,-2[bp]
19431 4B62           30E4                       xor	ah,ah
19432 4B64           B1                     03  mov	cl,*3
19433 4B66           D3E0                       shl	ax,cl
19434 4B68           89C3                       mov	bx,ax
19435 4B6A           81C3                 01DB  add	bx,#_vga_modes
19436                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19437 4B6E           FF77         04            push	4[bx]
19438                                           ! Debug: func () void = memcpyw+0 (used reg = )
19439 4B71           E8         31A7            call	_memcpyw
19440 4B74           83C4                   0A  add	sp,*$A
19441                                           !BCC_EOS
19442                                           ! 2118          if (i>rl
19443                       00004B77            .E1:
19444                                           ! 2118 r) break;
19445                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19446 4B77           8A46         0C            mov	al,$C[bp]
19447 4B7A           30E4                       xor	ah,ah
19448 4B7C           3B46         F4            cmp	ax,-$C[bp]
19449 4B7F           73           02            jae 	.E2
19450                       00004B81            .E3:
19451 4B81           EB           13            jmp .DA
19452                                           !BCC_EOS
19453                                           ! 2119         }
19454                       00004B83            .E2:
19455                                           ! 2120       }
19456                       00004B83            .DB:
19457                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19458 4B83           8B46         F4            mov	ax,-$C[bp]
19459 4B86           48                         dec	ax
19460 4B87           8946         F4            mov	-$C[bp],ax
19461                       00004B8A            .DC:
19462                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19463 4B8A           8A46         08            mov	al,8[bp]
19464 4B8D           30E4                       xor	ah,ah
19465 4B8F           3B46         F4            cmp	ax,-$C[bp]
19466 4B92         0F86         FF2D            blos	.DD
19467                       00004B96            .E4:
19468                       00004B96            .DA:
19469                                           ! 2121     }
19470                       00004B96            .D9:
19471                                           ! 2122   }
19472                       00004B96            .CD:
19473                                           ! 2123  else
19474                                           ! 2124   {
19475 4B96           E9         03C9            br 	.E5
19476                       00004B99            .C5:
19477                                           ! 2125    cheight=read_byte(0x40,0x85);
19478                                           ! Debug: list int = const $85 (used reg = )
19479 4B99           B8                   0085  mov	ax,#$85
19480 4B9C           50                         push	ax
19481                                           ! Debug: list int = const $40 (used reg = )
19482 4B9D           B8                   0040  mov	ax,*$40
19483 4BA0           50                         push	ax
19484                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19485 4BA1           E8         31A7            call	_read_byte
19486 4BA4           83C4                   04  add	sp,*4
19487                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$10-5] (used reg = )
19488 4BA7           8846         FD            mov	-3[bp],al
19489                                           !BCC_EOS
19490                                           ! 2126    switch(vga_modes[line].memmodel)
19491                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
19492 4BAA           8A46         FE            mov	al,-2[bp]
19493 4BAD           30E4                       xor	ah,ah
19494 4BAF           B1                     03  mov	cl,*3
19495 4BB1           D3E0                       shl	ax,cl
19496 4BB3           89C3                       mov	bx,ax
19497 4BB5           81C3                 01DB  add	bx,#_vga_modes
19498 4BB9           8A47         02            mov	al,2[bx]
19499                                           ! 2127     {
19500 4BBC           E9         0391            br 	.E8
19501                                           ! 2128      case 0x04:
19502                                           ! 2129      case 0x03:
19503                       00004BBF            .E9:
19504                                           ! 2130        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19505                       00004BBF            .EA:
19506                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19507 4BBF           8A46         04            mov	al,4[bp]
19508 4BC2           84C0                       test	al,al
19509 4BC4         0F85         0089            bne 	.EB
19510                       00004BC8            .F0:
19511                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19512 4BC8           8A46         08            mov	al,8[bp]
19513 4BCB           84C0                       test	al,al
19514 4BCD         0F85         0080            bne 	.EB
19515                       00004BD1            .EF:
19516                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19517 4BD1           8A46         0A            mov	al,$A[bp]
19518 4BD4           84C0                       test	al,al
19519 4BD6           75           79            jne 	.EB
19520                       00004BD8            .EE:
19521                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19522 4BD8           8B46         F6            mov	ax,-$A[bp]
19523                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19524                                           ! Debug: expression subtree swapping
19525 4BDB           48                         dec	ax
19526 4BDC           50                         push	ax
19527 4BDD           8A46         0C            mov	al,$C[bp]
19528 4BE0           30E4                       xor	ah,ah
19529 4BE2           3B46         F0            cmp	ax,0+..FFFC[bp]
19530 4BE5           8D66         F2            lea	sp,2+..FFFC[bp]
19531 4BE8           75           67            jne 	.EB
19532                       00004BEA            .ED:
19533                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19534 4BEA           8B46         F8            mov	ax,-8[bp]
19535                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19536                                           ! Debug: expression subtree swapping
19537 4BED           48                         dec	ax
19538 4BEE           50                         push	ax
19539 4BEF           8A46         0E            mov	al,$E[bp]
19540 4BF2           30E4                       xor	ah,ah
19541 4BF4           3B46         F0            cmp	ax,0+..FFFC[bp]
19542 4BF7           8D66         F2            lea	sp,2+..FFFC[bp]
19543 4BFA           75           55            jne 	.EB
19544                       00004BFC            .EC:
19545                                           ! 2131         {
19546                                           ! 2132          outw(0x3ce, 0x0205);
19547                                           ! Debug: list int = const $205 (used reg = )
19548 4BFC           B8                   0205  mov	ax,#$205
19549 4BFF           50                         push	ax
19550                                           ! Debug: list int = const $3CE (used reg = )
19551 4C00           B8                   03CE  mov	ax,#$3CE
19552 4C03           50                         push	ax
19553                                           ! Debug: func () void = outw+0 (used reg = )
19554 4C04           E8         31C0            call	_outw
19555 4C07           83C4                   04  add	sp,*4
19556                                           !BCC_EOS
19557                                           ! 2133          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19558                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19559 4C0A           8B46         F6            mov	ax,-$A[bp]
19560 4C0D           8B4E         F8            mov	cx,-8[bp]
19561 4C10           F7E9                       imul	cx
19562                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19563 4C12           89C3                       mov	bx,ax
19564 4C14           8A46         FD            mov	al,-3[bp]
19565 4C17           30E4                       xor	ah,ah
19566 4C19           93                         xchg	ax,bx
19567 4C1A           89D9                       mov	cx,bx
19568 4C1C           F7E9                       imul	cx
19569                                           ! Debug: list unsigned int = ax+0 (used reg = )
19570 4C1E           50                         push	ax
19571                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19572 4C1F           8A46         06            mov	al,6[bp]
19573 4C22           30E4                       xor	ah,ah
19574 4C24           50                         push	ax
19575                                           ! Debug: list int = const 0 (used reg = )
19576 4C25           31C0                       xor	ax,ax
19577 4C27           50                         push	ax
19578                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19579 4C28           8A46         FE            mov	al,-2[bp]
19580 4C2B           30E4                       xor	ah,ah
19581 4C2D           B1                     03  mov	cl,*3
19582 4C2F           D3E0                       shl	ax,cl
19583 4C31           89C3                       mov	bx,ax
19584 4C33           81C3                 01DB  add	bx,#_vga_modes
19585                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19586 4C37           FF77         04            push	4[bx]
19587                                           ! Debug: func () void = memsetb+0 (used reg = )
19588 4C3A           E8         3064            call	_memsetb
19589 4C3D           83C4                   08  add	sp,*8
19590                                           !BCC_EOS
19591                                           ! 2134          outw(0x3ce, 0x0005);
19592                                           ! Debug: list int = const 5 (used reg = )
19593 4C40           B8                   0005  mov	ax,*5
19594 4C43           50                         push	ax
19595                                           ! Debug: list int = const $3CE (used reg = )
19596 4C44           B8                   03CE  mov	ax,#$3CE
19597 4C47           50                         push	ax
19598                                           ! Debug: func () void = outw+0 (used reg = )
19599 4C48           E8         317C            call	_outw
19600 4C4B           83C4                   04  add	sp,*4
19601                                           !BCC_EOS
19602                                           ! 2135         }
19603                                           ! 2136        else
19604                                           ! 2137         {
19605 4C4E           E9         0121            br 	.F1
19606                       00004C51            .EB:
19607                                           ! 2138          if(dir==1)
19608                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19609 4C51           8A46         12            mov	al,$12[bp]
19610 4C54           3C                     01  cmp	al,*1
19611 4C56         0F85         008A            bne 	.F2
19612                       00004C5A            .F3:
19613                                           ! 2139           {for(i=rul;i<=rlr;i++)
19614                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19615 4C5A           8A46         08            mov	al,8[bp]
19616 4C5D           30E4                       xor	ah,ah
19617 4C5F           8946         F4            mov	-$C[bp],ax
19618                                           !BCC_EOS
19619                                           !BCC_EOS
19620                                           ! 2140             {
19621 4C62           EB           73            jmp .F6
19622                       00004C64            .F7:
19623                                           ! 2141              if((i+nblines>rlr)||(nblines==0))
19624                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19625 4C64           8B46         F4            mov	ax,-$C[bp]
19626 4C67           0246         04            add	al,4[bp]
19627 4C6A           80D4                   00  adc	ah,*0
19628                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19629 4C6D           50                         push	ax
19630 4C6E           8A46         0C            mov	al,$C[bp]
19631 4C71           30E4                       xor	ah,ah
19632 4C73           3B46         F0            cmp	ax,0+..FFFC[bp]
19633 4C76           8D66         F2            lea	sp,2+..FFFC[bp]
19634 4C79           72           07            jb  	.F9
19635                       00004C7B            .FA:
19636                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19637 4C7B           8A46         04            mov	al,4[bp]
19638 4C7E           84C0                       test	al,al
19639 4C80           75           26            jne 	.F8
19640                       00004C82            .F9:
19641                                           ! 2142               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19642                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19643 4C82           8A46         06            mov	al,6[bp]
19644 4C85           30E4                       xor	ah,ah
19645 4C87           50                         push	ax
19646                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19647 4C88           8A46         FD            mov	al,-3[bp]
19648 4C8B           30E4                       xor	ah,ah
19649 4C8D           50                         push	ax
19650                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19651 4C8E           FF76         F8            push	-8[bp]
19652                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19653 4C91           8A46         FB            mov	al,-5[bp]
19654 4C94           30E4                       xor	ah,ah
19655 4C96           50                         push	ax
19656                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19657 4C97           FF76         F4            push	-$C[bp]
19658                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19659 4C9A           8A46         0A            mov	al,$A[bp]
19660 4C9D           30E4                       xor	ah,ah
19661 4C9F           50                         push	ax
19662                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19663 4CA0           E8         F977            call	_vgamem_fill_pl4
19664 4CA3           83C4                   0C  add	sp,*$C
19665                                           !BCC_EOS
19666                                           ! 2143              else
19667                                           ! 2144               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19668 4CA6           EB           28            jmp .FB
19669                       00004CA8            .F8:
19670                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19671 4CA8           8A46         FD            mov	al,-3[bp]
19672 4CAB           30E4                       xor	ah,ah
19673 4CAD           50                         push	ax
19674                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19675 4CAE           FF76         F8            push	-8[bp]
19676                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19677 4CB1           8A46         FB            mov	al,-5[bp]
19678 4CB4           30E4                       xor	ah,ah
19679 4CB6           50                         push	ax
19680                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19681 4CB7           FF76         F4            push	-$C[bp]
19682                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19683 4CBA           8B46         F4            mov	ax,-$C[bp]
19684 4CBD           0246         04            add	al,4[bp]
19685 4CC0           80D4                   00  adc	ah,*0
19686                                           ! Debug: list unsigned int = ax+0 (used reg = )
19687 4CC3           50                         push	ax
19688                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19689 4CC4           8A46         0A            mov	al,$A[bp]
19690 4CC7           30E4                       xor	ah,ah
19691 4CC9           50                         push	ax
19692                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19693 4CCA           E8         F88B            call	_vgamem_copy_pl4
19694 4CCD           83C4                   0C  add	sp,*$C
19695                                           !BCC_EOS
19696                                           ! 2145             }
19697                       00004CD0            .FB:
19698                                           ! 2146           }
19699                       00004CD0            .F5:
19700                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19701 4CD0           8B46         F4            mov	ax,-$C[bp]
19702 4CD3           40                         inc	ax
19703 4CD4           8946         F4            mov	-$C[bp],ax
19704                       00004CD7            .F6:
19705                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19706 4CD7           8A46         0C            mov	al,$C[bp]
19707 4CDA           30E4                       xor	ah,ah
19708 4CDC           3B46         F4            cmp	ax,-$C[bp]
19709 4CDF           73           83            jae	.F7
19710                       00004CE1            .FC:
19711                       00004CE1            .F4:
19712                                           ! 2147          else
19713                                           ! 2148           {for(i=rlr;i>=rul;i--)
19714 4CE1           E9         008E            br 	.FD
19715                       00004CE4            .F2:
19716                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19717 4CE4           8A46         0C            mov	al,$C[bp]
19718 4CE7           30E4                       xor	ah,ah
19719 4CE9           8946         F4            mov	-$C[bp],ax
19720                                           !BCC_EOS
19721                                           !BCC_EOS
19722                                           ! 2149             {
19723 4CEC           EB           78            jmp .100
19724                       00004CEE            .101:
19725                                           ! 2150              if((i<rul+nblines)||(nblines==0))
19726                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19727 4CEE           8A46         08            mov	al,8[bp]
19728 4CF1           30E4                       xor	ah,ah
19729 4CF3           0246         04            add	al,4[bp]
19730 4CF6           80D4                   00  adc	ah,*0
19731                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19732 4CF9           3B46         F4            cmp	ax,-$C[bp]
19733 4CFC           77           07            ja  	.103
19734                       00004CFE            .104:
19735                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19736 4CFE           8A46         04            mov	al,4[bp]
19737 4D01           84C0                       test	al,al
19738 4D03           75           26            jne 	.102
19739                       00004D05            .103:
19740                                           ! 2151               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19741                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19742 4D05           8A46         06            mov	al,6[bp]
19743 4D08           30E4                       xor	ah,ah
19744 4D0A           50                         push	ax
19745                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19746 4D0B           8A46         FD            mov	al,-3[bp]
19747 4D0E           30E4                       xor	ah,ah
19748 4D10           50                         push	ax
19749                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19750 4D11           FF76         F8            push	-8[bp]
19751                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19752 4D14           8A46         FB            mov	al,-5[bp]
19753 4D17           30E4                       xor	ah,ah
19754 4D19           50                         push	ax
19755                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19756 4D1A           FF76         F4            push	-$C[bp]
19757                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19758 4D1D           8A46         0A            mov	al,$A[bp]
19759 4D20           30E4                       xor	ah,ah
19760 4D22           50                         push	ax
19761                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19762 4D23           E8         F8F4            call	_vgamem_fill_pl4
19763 4D26           83C4                   0C  add	sp,*$C
19764                                           !BCC_EOS
19765                                           ! 2152              else
19766                                           ! 2153               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19767 4D29           EB           28            jmp .105
19768                       00004D2B            .102:
19769                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19770 4D2B           8A46         FD            mov	al,-3[bp]
19771 4D2E           30E4                       xor	ah,ah
19772 4D30           50                         push	ax
19773                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19774 4D31           FF76         F8            push	-8[bp]
19775                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19776 4D34           8A46         FB            mov	al,-5[bp]
19777 4D37           30E4                       xor	ah,ah
19778 4D39           50                         push	ax
19779                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19780 4D3A           8B46         F4            mov	ax,-$C[bp]
19781 4D3D           2A46         04            sub	al,4[bp]
19782 4D40           80DC                   00  sbb	ah,*0
19783                                           ! Debug: list unsigned int = ax+0 (used reg = )
19784 4D43           50                         push	ax
19785                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19786 4D44           FF76         F4            push	-$C[bp]
19787                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19788 4D47           8A46         0A            mov	al,$A[bp]
19789 4D4A           30E4                       xor	ah,ah
19790 4D4C           50                         push	ax
19791                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19792 4D4D           E8         F808            call	_vgamem_copy_pl4
19793 4D50           83C4                   0C  add	sp,*$C
19794                                           !BCC_EOS
19795                                           ! 2154              if (i>rlr) break;
19796                       00004D53            .105:
19797                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19798 4D53           8A46         0C            mov	al,$C[bp]
19799 4D56           30E4                       xor	ah,ah
19800 4D58           3B46         F4            cmp	ax,-$C[bp]
19801 4D5B           73           02            jae 	.106
19802                       00004D5D            .107:
19803 4D5D           EB           13            jmp .FE
19804                                           !BCC_EOS
19805                                           ! 2155             }
19806                       00004D5F            .106:
19807                                           ! 2156           }
19808                       00004D5F            .FF:
19809                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19810 4D5F           8B46         F4            mov	ax,-$C[bp]
19811 4D62           48                         dec	ax
19812 4D63           8946         F4            mov	-$C[bp],ax
19813                       00004D66            .100:
19814                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19815 4D66           8A46         08            mov	al,8[bp]
19816 4D69           30E4                       xor	ah,ah
19817 4D6B           3B46         F4            cmp	ax,-$C[bp]
19818 4D6E         0F86         FF7C            blos	.101
19819                       00004D72            .108:
19820                       00004D72            .FE:
19821                                           ! 2157         }
19822                       00004D72            .FD:
19823                                           ! 2158        break;
19824                       00004D72            .F1:
19825 4D72           E9         01ED            br 	.E6
19826                                           !BCC_EOS
19827                                           ! 2159      case 0x02:
19828                                           ! 2160        bpp=vga_modes[line].pixbits;
19829                       00004D75            .109:
19830                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
19831 4D75           8A46         FE            mov	al,-2[bp]
19832 4D78           30E4                       xor	ah,ah
19833 4D7A           B1                     03  mov	cl,*3
19834 4D7C           D3E0                       shl	ax,cl
19835 4D7E           89C3                       mov	bx,ax
19836 4D80           81C3                 01DB  add	bx,#_vga_modes
19837                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19838 4D84           8A47         03            mov	al,3[bx]
19839 4D87           8846         FC            mov	-4[bp],al
19840                                           !BCC_EOS
19841                                           ! 2161        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19842                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19843 4D8A           8A46         04            mov	al,4[bp]
19844 4D8D           84C0                       test	al,al
19845 4D8F           75           77            jne 	.10A
19846                       00004D91            .10F:
19847                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19848 4D91           8A46         08            mov	al,8[bp]
19849 4D94           84C0                       test	al,al
19850 4D96           75           70            jne 	.10A
19851                       00004D98            .10E:
19852                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19853 4D98           8A46         0A            mov	al,$A[bp]
19854 4D9B           84C0                       test	al,al
19855 4D9D           75           69            jne 	.10A
19856                       00004D9F            .10D:
19857                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19858 4D9F           8B46         F6            mov	ax,-$A[bp]
19859                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19860                                           ! Debug: expression subtree swapping
19861 4DA2           48                         dec	ax
19862 4DA3           50                         push	ax
19863 4DA4           8A46         0C            mov	al,$C[bp]
19864 4DA7           30E4                       xor	ah,ah
19865 4DA9           3B46         F0            cmp	ax,0+..FFFC[bp]
19866 4DAC           8D66         F2            lea	sp,2+..FFFC[bp]
19867 4DAF           75           57            jne 	.10A
19868                       00004DB1            .10C:
19869                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19870 4DB1           8B46         F8            mov	ax,-8[bp]
19871                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19872                                           ! Debug: expression subtree swapping
19873 4DB4           48                         dec	ax
19874 4DB5           50                         push	ax
19875 4DB6           8A46         0E            mov	al,$E[bp]
19876 4DB9           30E4                       xor	ah,ah
19877 4DBB           3B46         F0            cmp	ax,0+..FFFC[bp]
19878 4DBE           8D66         F2            lea	sp,2+..FFFC[bp]
19879 4DC1           75           45            jne 	.10A
19880                       00004DC3            .10B:
19881                                           ! 2162         {
19882                                           ! 2163          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19883                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19884 4DC3           8B46         F6            mov	ax,-$A[bp]
19885 4DC6           8B4E         F8            mov	cx,-8[bp]
19886 4DC9           F7E9                       imul	cx
19887                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19888 4DCB           89C3                       mov	bx,ax
19889 4DCD           8A46         FD            mov	al,-3[bp]
19890 4DD0           30E4                       xor	ah,ah
19891 4DD2           93                         xchg	ax,bx
19892 4DD3           89D9                       mov	cx,bx
19893 4DD5           F7E9                       imul	cx
19894                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19895 4DD7           89C3                       mov	bx,ax
19896 4DD9           8A46         FC            mov	al,-4[bp]
19897 4DDC           30E4                       xor	ah,ah
19898 4DDE           93                         xchg	ax,bx
19899 4DDF           89D9                       mov	cx,bx
19900 4DE1           F7E9                       imul	cx
19901                                           ! Debug: list unsigned int = ax+0 (used reg = )
19902 4DE3           50                         push	ax
19903                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19904 4DE4           8A46         06            mov	al,6[bp]
19905 4DE7           30E4                       xor	ah,ah
19906 4DE9           50                         push	ax
19907                                           ! Debug: list int = const 0 (used reg = )
19908 4DEA           31C0                       xor	ax,ax
19909 4DEC           50                         push	ax
19910                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19911 4DED           8A46         FE            mov	al,-2[bp]
19912 4DF0           30E4                       xor	ah,ah
19913 4DF2           B1                     03  mov	cl,*3
19914 4DF4           D3E0                       shl	ax,cl
19915 4DF6           89C3                       mov	bx,ax
19916 4DF8           81C3                 01DB  add	bx,#_vga_modes
19917                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19918 4DFC           FF77         04            push	4[bx]
19919                                           ! Debug: func () void = memsetb+0 (used reg = )
19920 4DFF           E8         2E9F            call	_memsetb
19921 4E02           83C4                   08  add	sp,*8
19922                                           !BCC_EOS
19923                                           ! 2164         }
19924                                           ! 2165        else
19925                                           ! 2166         {
19926 4E05           E9         0144            br 	.110
19927                       00004E08            .10A:
19928                                           ! 2167          if(bpp==2)
19929                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19930 4E08           8A46         FC            mov	al,-4[bp]
19931 4E0B           3C                     02  cmp	al,*2
19932 4E0D           75           1C            jne 	.111
19933                       00004E0F            .112:
19934                                           ! 2168           {
19935                                           ! 2169            cul<<=1;
19936                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
19937 4E0F           8A46         0A            mov	al,$A[bp]
19938 4E12           30E4                       xor	ah,ah
19939 4E14           D1E0                       shl	ax,*1
19940 4E16           8846         0A            mov	$A[bp],al
19941                                           !BCC_EOS
19942                                           ! 2170            cols<<=1;
19943                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
19944 4E19           8A46         FB            mov	al,-5[bp]
19945 4E1C           30E4                       xor	ah,ah
19946 4E1E           D1E0                       shl	ax,*1
19947 4E20           8846         FB            mov	-5[bp],al
19948                                           !BCC_EOS
19949                                           ! 2171            nbcols<<=1;
19950                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19951 4E23           8B46         F8            mov	ax,-8[bp]
19952 4E26           D1E0                       shl	ax,*1
19953 4E28           8946         F8            mov	-8[bp],ax
19954                                           !BCC_EOS
19955                                           ! 2172           }
19956                                           ! 2173          if(dir==1)
19957                       00004E2B            .111:
19958                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19959 4E2B           8A46         12            mov	al,$12[bp]
19960 4E2E           3C                     01  cmp	al,*1
19961 4E30         0F85         008A            bne 	.113
19962                       00004E34            .114:
19963                                           ! 2174           {for(i=rul;i<=rlr;i++)
19964                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19965 4E34           8A46         08            mov	al,8[bp]
19966 4E37           30E4                       xor	ah,ah
19967 4E39           8946         F4            mov	-$C[bp],ax
19968                                           !BCC_EOS
19969                                           !BCC_EOS
19970                                           ! 2175             {
19971 4E3C           EB           73            jmp .117
19972                       00004E3E            .118:
19973                                           ! 2176              if((i+nblines>rlr)||(nblines==0))
19974                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19975 4E3E           8B46         F4            mov	ax,-$C[bp]
19976 4E41           0246         04            add	al,4[bp]
19977 4E44           80D4                   00  adc	ah,*0
19978                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19979 4E47           50                         push	ax
19980 4E48           8A46         0C            mov	al,$C[bp]
19981 4E4B           30E4                       xor	ah,ah
19982 4E4D           3B46         F0            cmp	ax,0+..FFFC[bp]
19983 4E50           8D66         F2            lea	sp,2+..FFFC[bp]
19984 4E53           72           07            jb  	.11A
19985                       00004E55            .11B:
19986                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19987 4E55           8A46         04            mov	al,4[bp]
19988 4E58           84C0                       test	al,al
19989 4E5A           75           26            jne 	.119
19990                       00004E5C            .11A:
19991                                           ! 2177               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
19992                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19993 4E5C           8A46         06            mov	al,6[bp]
19994 4E5F           30E4                       xor	ah,ah
19995 4E61           50                         push	ax
19996                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19997 4E62           8A46         FD            mov	al,-3[bp]
19998 4E65           30E4                       xor	ah,ah
19999 4E67           50                         push	ax
20000                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20001 4E68           FF76         F8            push	-8[bp]
20002                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20003 4E6B           8A46         FB            mov	al,-5[bp]
20004 4E6E           30E4                       xor	ah,ah
20005 4E70           50                         push	ax
20006                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20007 4E71           FF76         F4            push	-$C[bp]
20008                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20009 4E74           8A46         0A            mov	al,$A[bp]
20010 4E77           30E4                       xor	ah,ah
20011 4E79           50                         push	ax
20012                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20013 4E7A           E8         F93A            call	_vgamem_fill_cga
20014 4E7D           83C4                   0C  add	sp,*$C
20015                                           !BCC_EOS
20016                                           ! 2178              else
20017                                           ! 2179               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20018 4E80           EB           28            jmp .11C
20019                       00004E82            .119:
20020                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20021 4E82           8A46         FD            mov	al,-3[bp]
20022 4E85           30E4                       xor	ah,ah
20023 4E87           50                         push	ax
20024                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20025 4E88           FF76         F8            push	-8[bp]
20026                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20027 4E8B           8A46         FB            mov	al,-5[bp]
20028 4E8E           30E4                       xor	ah,ah
20029 4E90           50                         push	ax
20030                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20031 4E91           FF76         F4            push	-$C[bp]
20032                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20033 4E94           8B46         F4            mov	ax,-$C[bp]
20034 4E97           0246         04            add	al,4[bp]
20035 4E9A           80D4                   00  adc	ah,*0
20036                                           ! Debug: list unsigned int = ax+0 (used reg = )
20037 4E9D           50                         push	ax
20038                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20039 4E9E           8A46         0A            mov	al,$A[bp]
20040 4EA1           30E4                       xor	ah,ah
20041 4EA3           50                         push	ax
20042                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20043 4EA4           E8         F7FE            call	_vgamem_copy_cga
20044 4EA7           83C4                   0C  add	sp,*$C
20045                                           !BCC_EOS
20046                                           ! 2180             }
20047                       00004EAA            .11C:
20048                                           ! 2181           }
20049                       00004EAA            .116:
20050                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20051 4EAA           8B46         F4            mov	ax,-$C[bp]
20052 4EAD           40                         inc	ax
20053 4EAE           8946         F4            mov	-$C[bp],ax
20054                       00004EB1            .117:
20055                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20056 4EB1           8A46         0C            mov	al,$C[bp]
20057 4EB4           30E4                       xor	ah,ah
20058 4EB6           3B46         F4            cmp	ax,-$C[bp]
20059 4EB9           73           83            jae	.118
20060                       00004EBB            .11D:
20061                       00004EBB            .115:
20062                                           ! 2182          else
20063                                           ! 2183           {for(i=rlr;i>=rul;i--)
20064 4EBB           E9         008E            br 	.11E
20065                       00004EBE            .113:
20066                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20067 4EBE           8A46         0C            mov	al,$C[bp]
20068 4EC1           30E4                       xor	ah,ah
20069 4EC3           8946         F4            mov	-$C[bp],ax
20070                                           !BCC_EOS
20071                                           !BCC_EOS
20072                                           ! 2184             {
20073 4EC6           EB           78            jmp .121
20074                       00004EC8            .122:
20075                                           ! 2185              if((i<rul+nblines)||(nblines==0))
20076                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20077 4EC8           8A46         08            mov	al,8[bp]
20078 4ECB           30E4                       xor	ah,ah
20079 4ECD           0246         04            add	al,4[bp]
20080 4ED0           80D4                   00  adc	ah,*0
20081                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20082 4ED3           3B46         F4            cmp	ax,-$C[bp]
20083 4ED6           77           07            ja  	.124
20084                       00004ED8            .125:
20085                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20086 4ED8           8A46         04            mov	al,4[bp]
20087 4EDB           84C0                       test	al,al
20088 4EDD           75           26            jne 	.123
20089                       00004EDF            .124:
20090                                           ! 2186               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20091                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20092 4EDF           8A46         06            mov	al,6[bp]
20093 4EE2           30E4                       xor	ah,ah
20094 4EE4           50                         push	ax
20095                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20096 4EE5           8A46         FD            mov	al,-3[bp]
20097 4EE8           30E4                       xor	ah,ah
20098 4EEA           50                         push	ax
20099                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20100 4EEB           FF76         F8            push	-8[bp]
20101                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20102 4EEE           8A46         FB            mov	al,-5[bp]
20103 4EF1           30E4                       xor	ah,ah
20104 4EF3           50                         push	ax
20105                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20106 4EF4           FF76         F4            push	-$C[bp]
20107                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20108 4EF7           8A46         0A            mov	al,$A[bp]
20109 4EFA           30E4                       xor	ah,ah
20110 4EFC           50                         push	ax
20111                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20112 4EFD           E8         F8B7            call	_vgamem_fill_cga
20113 4F00           83C4                   0C  add	sp,*$C
20114                                           !BCC_EOS
20115                                           ! 2187              else
20116                                           ! 2188               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20117 4F03           EB           28            jmp .126
20118                       00004F05            .123:
20119                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20120 4F05           8A46         FD            mov	al,-3[bp]
20121 4F08           30E4                       xor	ah,ah
20122 4F0A           50                         push	ax
20123                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20124 4F0B           FF76         F8            push	-8[bp]
20125                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20126 4F0E           8A46         FB            mov	al,-5[bp]
20127 4F11           30E4                       xor	ah,ah
20128 4F13           50                         push	ax
20129                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20130 4F14           8B46         F4            mov	ax,-$C[bp]
20131 4F17           2A46         04            sub	al,4[bp]
20132 4F1A           80DC                   00  sbb	ah,*0
20133                                           ! Debug: list unsigned int = ax+0 (used reg = )
20134 4F1D           50                         push	ax
20135                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20136 4F1E           FF76         F4            push	-$C[bp]
20137                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20138 4F21           8A46         0A            mov	al,$A[bp]
20139 4F24           30E4                       xor	ah,ah
20140 4F26           50                         push	ax
20141                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20142 4F27           E8         F77B            call	_vgamem_copy_cga
20143 4F2A           83C4                   0C  add	sp,*$C
20144                                           !BCC_EOS
20145                                           ! 2189              if (i>rlr) break;
20146                       00004F2D            .126:
20147                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20148 4F2D           8A46         0C            mov	al,$C[bp]
20149 4F30           30E4                       xor	ah,ah
20150 4F32           3B46         F4            cmp	ax,-$C[bp]
20151 4F35           73           02            jae 	.127
20152                       00004F37            .128:
20153 4F37           EB           13            jmp .11F
20154                                           !BCC_EOS
20155                                           ! 2190             }
20156                       00004F39            .127:
20157                                           ! 2191           }
20158                       00004F39            .120:
20159                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20160 4F39           8B46         F4            mov	ax,-$C[bp]
20161 4F3C           48                         dec	ax
20162 4F3D           8946         F4            mov	-$C[bp],ax
20163                       00004F40            .121:
20164                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20165 4F40           8A46         08            mov	al,8[bp]
20166 4F43           30E4                       xor	ah,ah
20167 4F45           3B46         F4            cmp	ax,-$C[bp]
20168 4F48         0F86         FF7C            blos	.122
20169                       00004F4C            .129:
20170                       00004F4C            .11F:
20171                                           ! 2192         }
20172                       00004F4C            .11E:
20173                                           ! 2193        break;
20174                       00004F4C            .110:
20175 4F4C           EB           14            jmp .E6
20176                                           !BCC_EOS
20177                                           ! 2194     }
20178                                           ! 2195   }
20179 4F4E           EB           12            jmp .E6
20180                       00004F50            .E8:
20181 4F50           2C                     02  sub	al,*2
20182 4F52         0F84         FE1F            beq 	.109
20183 4F56           2C                     01  sub	al,*1
20184 4F58         0F84         FC63            beq 	.EA
20185 4F5C           2C                     01  sub	al,*1
20186 4F5E         0F84         FC5D            beq 	.E9
20187                       00004F62            .E6:
20188                       FFFFFFF0            ..FFFC	=	-$10
20189                                           ! 2196 }
20190                       00004F62            .E5:
20191 4F62           89EC                       mov	sp,bp
20192 4F64           5D                         pop	bp
20193 4F65           C3                         ret
20194                                           ! 2197 static void biosfn_read_char_attr (page,c
20195                                           ! Register BX used in function biosfn_scroll
20196                                           ! 2197 ar)
20197                                           ! 2198 Bit8u page;Bit16u *car;
20198                       00004F66            _biosfn_read_char_attr:
20199                                           !BCC_EOS
20200                                           !BCC_EOS
20201                                           ! 2199 {Bit16u ss=get_SS();
20202 4F66           55                         push	bp
20203 4F67           89E5                       mov	bp,sp
20204 4F69           4C                         dec	sp
20205 4F6A           4C                         dec	sp
20206                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20207 4F6B           E8         2E69            call	_get_SS
20208                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20209 4F6E           8946         FE            mov	-2[bp],ax
20210                                           !BCC_EOS
20211                                           ! 2200  Bit8u xcurs,ycurs,mode,line;
20212                                           !BCC_EOS
20213                                           ! 2201  Bit16u nbcols,nbrows,address;
20214                                           !BCC_EOS
20215                                           ! 2202  Bit16u cursor,dummy;
20216                                           !BCC_EOS
20217                                           ! 2203  mode=read_byte(0x40,0x49);
20218 4F71           83C4                   F2  add	sp,*-$E
20219                                           ! Debug: list int = const $49 (used reg = )
20220 4F74           B8                   0049  mov	ax,*$49
20221 4F77           50                         push	ax
20222                                           ! Debug: list int = const $40 (used reg = )
20223 4F78           B8                   0040  mov	ax,*$40
20224 4F7B           50                         push	ax
20225                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20226 4F7C           E8         2DCC            call	_read_byte
20227 4F7F           83C4                   04  add	sp,*4
20228                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20229 4F82           8846         FB            mov	-5[bp],al
20230                                           !BCC_EOS
20231                                           ! 2204  line=find_vga_entry(mode);
20232                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20233 4F85           8A46         FB            mov	al,-5[bp]
20234 4F88           30E4                       xor	ah,ah
20235 4F8A           50                         push	ax
20236                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20237 4F8B           E8         2CD1            call	_find_vga_entry
20238 4F8E           44                         inc	sp
20239 4F8F           44                         inc	sp
20240                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20241 4F90           8846         FA            mov	-6[bp],al
20242                                           !BCC_EOS
20243                                           ! 2205  if(line==0xFF)return;
20244                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20245 4F93           8A46         FA            mov	al,-6[bp]
20246 4F96           3C                     FF  cmp	al,#$FF
20247 4F98           75           04            jne 	.12A
20248                       00004F9A            .12B:
20249 4F9A           89EC                       mov	sp,bp
20250 4F9C           5D                         pop	bp
20251 4F9D           C3                         ret
20252                                           !BCC_EOS
20253                                           ! 2206  biosfn_get_cursor_pos(page,&dummy,&cursor);
20254                       00004F9E            .12A:
20255                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20256 4F9E           8D5E         F2            lea	bx,-$E[bp]
20257 4FA1           53                         push	bx
20258                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20259 4FA2           8D5E         F0            lea	bx,-$10[bp]
20260 4FA5           53                         push	bx
20261                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20262 4FA6           8A46         04            mov	al,4[bp]
20263 4FA9           30E4                       xor	ah,ah
20264 4FAB           50                         push	ax
20265                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20266 4FAC           E8         F3C5            call	_biosfn_get_cursor_pos
20267 4FAF           83C4                   06  add	sp,*6
20268                                           !BCC_EOS
20269                                           ! 2207  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20270                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20271 4FB2           8A46         F2            mov	al,-$E[bp]
20272                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20273 4FB5           8846         FD            mov	-3[bp],al
20274                                           !BCC_EOS
20275                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20276 4FB8           8B46         F2            mov	ax,-$E[bp]
20277 4FBB           30C0                       xor	al,al
20278                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20279 4FBD           88E0                       mov	al,ah
20280 4FBF           30E4                       xor	ah,ah
20281                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20282 4FC1           8846         FC            mov	-4[bp],al
20283                                           !BCC_EOS
20284                                           ! 2208  nbrows=read_byte(0x40,0x84)+1;
20285                                           ! Debug: list int = const $84 (used reg = )
20286 4FC4           B8                   0084  mov	ax,#$84
20287 4FC7           50                         push	ax
20288                                           ! Debug: list int = const $40 (used reg = )
20289 4FC8           B8                   0040  mov	ax,*$40
20290 4FCB           50                         push	ax
20291                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20292 4FCC           E8         2D7C            call	_read_byte
20293 4FCF           83C4                   04  add	sp,*4
20294                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20295 4FD2           30E4                       xor	ah,ah
20296                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20297 4FD4           40                         inc	ax
20298 4FD5           8946         F6            mov	-$A[bp],ax
20299                                           !BCC_EOS
20300                                           ! 2209  nbcols=read_word(0x40,0x4A);
20301                                           ! Debug: list int = const $4A (used reg = )
20302 4FD8           B8                   004A  mov	ax,*$4A
20303 4FDB           50                         push	ax
20304                                           ! Debug: list int = const $40 (used reg = )
20305 4FDC           B8                   0040  mov	ax,*$40
20306 4FDF           50                         push	ax
20307                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20308 4FE0           E8         2D7B            call	_read_word
20309 4FE3           83C4                   04  add	sp,*4
20310                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20311 4FE6           8946         F8            mov	-8[bp],ax
20312                                           !BCC_EOS
20313                                           ! 2210  if(vga_modes[line].class==0x00)
20314                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$12] struct  = vga_modes+0 (used reg = )
20315 4FE9           8A46         FA            mov	al,-6[bp]
20316 4FEC           30E4                       xor	ah,ah
20317 4FEE           B1                     03  mov	cl,*3
20318 4FF0           D3E0                       shl	ax,cl
20319 4FF2           89C3                       mov	bx,ax
20320 4FF4           81C3                 01DB  add	bx,#_vga_modes
20321                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20322 4FF8           8A47         01            mov	al,1[bx]
20323 4FFB           84C0                       test	al,al
20324 4FFD           75           5E            jne 	.12C
20325                       00004FFF            .12D:
20326                                           ! 2211   {
20327                                           ! 2212    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20328                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20329 4FFF           8A46         FC            mov	al,-4[bp]
20330 5002           30E4                       xor	ah,ah
20331 5004           8B4E         F8            mov	cx,-8[bp]
20332 5007           F7E9                       imul	cx
20333                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20334                                           ! Debug: expression subtree swapping
20335 5009           0246         FD            add	al,-3[bp]
20336 500C           80D4                   00  adc	ah,*0
20337                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20338 500F           D1E0                       shl	ax,*1
20339 5011           50                         push	ax
20340                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20341 5012           8B46         F8            mov	ax,-8[bp]
20342 5015           8B4E         F6            mov	cx,-$A[bp]
20343 5018           F7E9                       imul	cx
20344                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20345 501A           D1E0                       shl	ax,*1
20346                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20347 501C           0C                     FF  or	al,#$FF
20348                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20349                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20350 501E           89C3                       mov	bx,ax
20351 5020           8A46         04            mov	al,4[bp]
20352 5023           30E4                       xor	ah,ah
20353 5025           93                         xchg	ax,bx
20354 5026           40                         inc	ax
20355 5027           89D9                       mov	cx,bx
20356 5029           F7E9                       imul	cx
20357                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20358 502B           0346         EE            add	ax,-$12[bp]
20359 502E           44                         inc	sp
20360 502F           44                         inc	sp
20361                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20362 5030           8946         F4            mov	-$C[bp],ax
20363                                           !BCC_EOS
20364                                           ! 2213    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20365                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20366 5033           FF76         F4            push	-$C[bp]
20367                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$12] struct  = vga_modes+0 (used reg = )
20368 5036           8A46         FA            mov	al,-6[bp]
20369 5039           30E4                       xor	ah,ah
20370 503B           B1                     03  mov	cl,*3
20371 503D           D3E0                       shl	ax,cl
20372 503F           89C3                       mov	bx,ax
20373 5041           81C3                 01DB  add	bx,#_vga_modes
20374                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20375 5045           FF77         04            push	4[bx]
20376                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20377 5048           E8         2D13            call	_read_word
20378 504B           83C4                   04  add	sp,*4
20379                                           ! Debug: list unsigned short = ax+0 (used reg = )
20380 504E           50                         push	ax
20381                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20382 504F           FF76         06            push	6[bp]
20383                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20384 5052           FF76         FE            push	-2[bp]
20385                                           ! Debug: func () void = write_word+0 (used reg = )
20386 5055           E8         2D31            call	_write_word
20387 5058           83C4                   06  add	sp,*6
20388                                           !BCC_EOS
20389                                           ! 2214   }
20390                                           ! 2215  else
20391                                           ! 2216   {
20392 505B           EB           00            jmp .12E
20393                       0000505D            .12C:
20394                                           ! 2217   }
20395                                           ! 2218 }
20396                       0000505D            .12E:
20397 505D           89EC                       mov	sp,bp
20398 505F           5D                         pop	bp
20399 5060           C3                         ret
20400                                           ! 2219 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20401                                           ! Register BX used in function biosfn_read_char_attr
20402                                           ! 2220 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20403                       00005061            _write_gfx_char_pl4:
20404                                           !BCC_EOS
20405                                           !BCC_EOS
20406                                           !BCC_EOS
20407                                           !BCC_EOS
20408                                           !BCC_EOS
20409                                           !BCC_EOS
20410                                           ! 2221 {
20411                                           ! 2222  Bit8u i,j,mask;
20412                                           !BCC_EOS
20413                                           ! 2223  Bit8u *fdata;
20414                                           !BCC_EOS
20415                                           ! 2224  Bit16u addr,dest,src;
20416                                           !BCC_EOS
20417                                           ! 2225  switch(cheight)
20418 5061           55                         push	bp
20419 5062           89E5                       mov	bp,sp
20420 5064           83C4                   F4  add	sp,*-$C
20421 5067           8A46         0E            mov	al,$E[bp]
20422                                           ! 2226   {case 14:
20423 506A           EB           18            jmp .131
20424                                           ! 2227     fdata = &vgafont14;
20425                       0000506C            .132:
20426                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20427 506C           BB                   1751  mov	bx,#_vgafont14
20428 506F           895E         FA            mov	-6[bp],bx
20429                                           !BCC_EOS
20430                                           ! 2228     break;
20431 5072           EB           1A            jmp .12F
20432                                           !BCC_EOS
20433                                           ! 2229    case 16:
20434                                           ! 2230     fdata = &vgafont16;
20435                       00005074            .133:
20436                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20437 5074           BB                   2551  mov	bx,#_vgafont16
20438 5077           895E         FA            mov	-6[bp],bx
20439                                           !BCC_EOS
20440                                           ! 2231     break;
20441 507A           EB           12            jmp .12F
20442                                           !BCC_EOS
20443                                           ! 2232    default:
20444                                           ! 2233     fdata = &vgafont8;
20445                       0000507C            .134:
20446                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20447 507C           BB                   0F51  mov	bx,#_vgafont8
20448 507F           895E         FA            mov	-6[bp],bx
20449                                           !BCC_EOS
20450                                           ! 2234   }
20451                                           ! 2235  addr=xcurs+ycurs*cheight*nbcols;
20452 5082           EB           0A            jmp .12F
20453                       00005084            .131:
20454 5084           2C                     0E  sub	al,*$E
20455 5086           74           E4            je 	.132
20456 5088           2C                     02  sub	al,*2
20457 508A           74           E8            je 	.133
20458 508C           EB           EE            jmp	.134
20459                       0000508E            .12F:
20460                       FFFFFFF2            ..FFFB	=	-$E
20461                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20462 508E           8A46         0E            mov	al,$E[bp]
20463 5091           30E4                       xor	ah,ah
20464 5093           89C3                       mov	bx,ax
20465 5095           8A46         0A            mov	al,$A[bp]
20466 5098           30E4                       xor	ah,ah
20467 509A           89D9                       mov	cx,bx
20468 509C           F7E9                       imul	cx
20469                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20470 509E           89C3                       mov	bx,ax
20471 50A0           8A46         0C            mov	al,$C[bp]
20472 50A3           30E4                       xor	ah,ah
20473 50A5           93                         xchg	ax,bx
20474 50A6           89D9                       mov	cx,bx
20475 50A8           F7E9                       imul	cx
20476                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20477                                           ! Debug: expression subtree swapping
20478 50AA           0246         08            add	al,8[bp]
20479 50AD           80D4                   00  adc	ah,*0
20480                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20481 50B0           8946         F8            mov	-8[bp],ax
20482                                           !BCC_EOS
20483                                           ! 2236  src = car * cheight;
20484                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20485 50B3           8A46         0E            mov	al,$E[bp]
20486 50B6           30E4                       xor	ah,ah
20487 50B8           89C3                       mov	bx,ax
20488 50BA           8A46         04            mov	al,4[bp]
20489 50BD           30E4                       xor	ah,ah
20490 50BF           89D9                       mov	cx,bx
20491 50C1           F7E9                       imul	cx
20492                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20493 50C3           8946         F4            mov	-$C[bp],ax
20494                                           !BCC_EOS
20495                                           ! 2237  outw(0x3c4, 0x0f02);
20496                                           ! Debug: list int = const $F02 (used reg = )
20497 50C6           B8                   0F02  mov	ax,#$F02
20498 50C9           50                         push	ax
20499                                           ! Debug: list int = const $3C4 (used reg = )
20500 50CA           B8                   03C4  mov	ax,#$3C4
20501 50CD           50                         push	ax
20502                                           ! Debug: func () void = outw+0 (used reg = )
20503 50CE           E8         2CF6            call	_outw
20504 50D1           83C4                   04  add	sp,*4
20505                                           !BCC_EOS
20506                                           ! 2238  outw(0x3ce, 0x0205);
20507                                           ! Debug: list int = const $205 (used reg = )
20508 50D4           B8                   0205  mov	ax,#$205
20509 50D7           50                         push	ax
20510                                           ! Debug: list int = const $3CE (used reg = )
20511 50D8           B8                   03CE  mov	ax,#$3CE
20512 50DB           50                         push	ax
20513                                           ! Debug: func () void = outw+0 (used reg = )
20514 50DC           E8         2CE8            call	_outw
20515 50DF           83C4                   04  add	sp,*4
20516                                           !BCC_EOS
20517                                           ! 2239  if(attr&0x80)
20518                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20519 50E2           8A46         06            mov	al,6[bp]
20520 50E5           24                     80  and	al,#$80
20521 50E7           84C0                       test	al,al
20522 50E9           74           10            je  	.135
20523                       000050EB            .136:
20524                                           ! 2240   {
20525                                           ! 2241    outw(0x3ce, 0x1803);
20526                                           ! Debug: list int = const $1803 (used reg = )
20527 50EB           B8                   1803  mov	ax,#$1803
20528 50EE           50                         push	ax
20529                                           ! Debug: list int = const $3CE (used reg = )
20530 50EF           B8                   03CE  mov	ax,#$3CE
20531 50F2           50                         push	ax
20532                                           ! Debug: func () void = outw+0 (used reg = )
20533 50F3           E8         2CD1            call	_outw
20534 50F6           83C4                   04  add	sp,*4
20535                                           !BCC_EOS
20536                                           ! 2242   }
20537                                           ! 2243  else
20538                                           ! 2244   {
20539 50F9           EB           0E            jmp .137
20540                       000050FB            .135:
20541                                           ! 2245    outw(0x3ce, 0x0003);
20542                                           ! Debug: list int = const 3 (used reg = )
20543 50FB           B8                   0003  mov	ax,*3
20544 50FE           50                         push	ax
20545                                           ! Debug: list int = const $3CE (used reg = )
20546 50FF           B8                   03CE  mov	ax,#$3CE
20547 5102           50                         push	ax
20548                                           ! Debug: func () void = outw+0 (used reg = )
20549 5103           E8         2CC1            call	_outw
20550 5106           83C4                   04  add	sp,*4
20551                                           !BCC_EOS
20552                                           ! 2246   }
20553                                           ! 2247  for(i=0;i<cheight;i++)
20554                       00005109            .137:
20555                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20556 5109           30C0                       xor	al,al
20557 510B           8846         FF            mov	-1[bp],al
20558                                           !BCC_EOS
20559                                           !BCC_EOS
20560                                           ! 2248   {
20561 510E           E9         00A6            br 	.13A
20562                       00005111            .13B:
20563                                           ! 2249    dest=addr+i*nbcols;
20564                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20565 5111           8A46         0C            mov	al,$C[bp]
20566 5114           30E4                       xor	ah,ah
20567 5116           89C3                       mov	bx,ax
20568 5118           8A46         FF            mov	al,-1[bp]
20569 511B           30E4                       xor	ah,ah
20570 511D           89D9                       mov	cx,bx
20571 511F           F7E9                       imul	cx
20572                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20573                                           ! Debug: expression subtree swapping
20574 5121           0346         F8            add	ax,-8[bp]
20575                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20576 5124           8946         F6            mov	-$A[bp],ax
20577                                           !BCC_EOS
20578                                           ! 2250    for(j=0;j<8;j++)
20579                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20580 5127           30C0                       xor	al,al
20581 5129           8846         FE            mov	-2[bp],al
20582                                           !BCC_EOS
20583                                           !BCC_EOS
20584                                           ! 2251     {
20585 512C           EB           79            jmp .13E
20586                       0000512E            .13F:
20587                                           ! 2252      mask=0x80>>j;
20588                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20589 512E           8A46         FE            mov	al,-2[bp]
20590 5131           30E4                       xor	ah,ah
20591 5133           89C3                       mov	bx,ax
20592 5135           B8                   0080  mov	ax,#$80
20593 5138           89D9                       mov	cx,bx
20594 513A           D3F8                       sar	ax,cl
20595                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20596 513C           8846         FD            mov	-3[bp],al
20597                                           !BCC_EOS
20598                                           ! 2253      outw(0x3ce, (mask << 8) | 0x08);
20599                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20600 513F           8A46         FD            mov	al,-3[bp]
20601 5142           30E4                       xor	ah,ah
20602 5144           88C4                       mov	ah,al
20603 5146           30C0                       xor	al,al
20604                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20605 5148           0C                     08  or	al,*8
20606                                           ! Debug: list unsigned int = ax+0 (used reg = )
20607 514A           50                         push	ax
20608                                           ! Debug: list int = const $3CE (used reg = )
20609 514B           B8                   03CE  mov	ax,#$3CE
20610 514E           50                         push	ax
20611                                           ! Debug: func () void = outw+0 (used reg = )
20612 514F           E8         2C75            call	_outw
20613 5152           83C4                   04  add	sp,*4
20614                                           !BCC_EOS
20615                                           ! 2254      read_byte(0xa000,dest);
20616                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20617 5155           FF76         F6            push	-$A[bp]
20618                                           ! Debug: list unsigned int = const $A000 (used reg = )
20619 5158           B8                   A000  mov	ax,#$A000
20620 515B           50                         push	ax
20621                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20622 515C           E8         2BEC            call	_read_byte
20623 515F           83C4                   04  add	sp,*4
20624                                           !BCC_EOS
20625                                           ! 2255      if(fdata[src+i]&mask)
20626                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20627 5162           8B46         F4            mov	ax,-$C[bp]
20628 5165           0246         FF            add	al,-1[bp]
20629 5168           80D4                   00  adc	ah,*0
20630                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20631 516B           0346         FA            add	ax,-6[bp]
20632 516E           89C3                       mov	bx,ax
20633                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20634 5170           8A07                       mov	al,[bx]
20635 5172           2246         FD            and	al,-3[bp]
20636 5175           84C0                       test	al,al
20637 5177           74           17            je  	.140
20638                       00005179            .141:
20639                                           ! 2256       {
20640                                           ! 2257        write_byte(0xa000,dest,attr&0x0f);
20641                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20642 5179           8A46         06            mov	al,6[bp]
20643 517C           24                     0F  and	al,*$F
20644                                           ! Debug: list unsigned char = al+0 (used reg = )
20645 517E           30E4                       xor	ah,ah
20646 5180           50                         push	ax
20647                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20648 5181           FF76         F6            push	-$A[bp]
20649                                           ! Debug: list unsigned int = const $A000 (used reg = )
20650 5184           B8                   A000  mov	ax,#$A000
20651 5187           50                         push	ax
20652                                           ! Debug: func () void = write_byte+0 (used reg = )
20653 5188           E8         2BE6            call	_write_byte
20654 518B           83C4                   06  add	sp,*6
20655                                           !BCC_EOS
20656                                           ! 2258       }
20657                                           ! 2259      else
20658                                           ! 2260       {
20659 518E           EB           10            jmp .142
20660                       00005190            .140:
20661                                           ! 2261        write_byte(0xa000,dest,0x00);
20662                                           ! Debug: list int = const 0 (used reg = )
20663 5190           31C0                       xor	ax,ax
20664 5192           50                         push	ax
20665                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20666 5193           FF76         F6            push	-$A[bp]
20667                                           ! Debug: list unsigned int = const $A000 (used reg = )
20668 5196           B8                   A000  mov	ax,#$A000
20669 5199           50                         push	ax
20670                                           ! Debug: func () void = write_byte+0 (used reg = )
20671 519A           E8         2BD4            call	_write_byte
20672 519D           83C4                   06  add	sp,*6
20673                                           !BCC_EOS
20674                                           ! 2262       }
20675                                           ! 2263     }
20676                       000051A0            .142:
20677                                           ! 2264   }
20678                       000051A0            .13D:
20679                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20680 51A0           8A46         FE            mov	al,-2[bp]
20681 51A3           40                         inc	ax
20682 51A4           8846         FE            mov	-2[bp],al
20683                       000051A7            .13E:
20684                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20685 51A7           8A46         FE            mov	al,-2[bp]
20686 51AA           3C                     08  cmp	al,*8
20687 51AC         0F82         FF7E            blo 	.13F
20688                       000051B0            .143:
20689                       000051B0            .13C:
20690                                           ! 2265 #asm
20691                       000051B0            .139:
20692                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20693 51B0           8A46         FF            mov	al,-1[bp]
20694 51B3           40                         inc	ax
20695 51B4           8846         FF            mov	-1[bp],al
20696                       000051B7            .13A:
20697                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20698 51B7           8A46         FF            mov	al,-1[bp]
20699 51BA           3A46         0E            cmp	al,$E[bp]
20700 51BD         0F82         FF50            blo 	.13B
20701                       000051C1            .144:
20702                       000051C1            .138:
20703                                           !BCC_EOS
20704                                           !BCC_ASM
20705                       0000000A            _write_gfx_char_pl4.j	set	$A
20706                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20707                       00000006            _write_gfx_char_pl4.fdata	set	6
20708                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20709                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20710                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20711                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20712                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20713                       0000000B            _write_gfx_char_pl4.i	set	$B
20714                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20715                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20716                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20717                       00000009            _write_gfx_char_pl4.mask	set	9
20718                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20719                       00000002            _write_gfx_char_pl4.dest	set	2
20720                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20721                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20722                       00000008            .write_gfx_char_pl4.xcurs	set	8
20723                       00000000            _write_gfx_char_pl4.src	set	0
20724                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20725                       00000012            _write_gfx_char_pl4.attr	set	$12
20726                       00000006            .write_gfx_char_pl4.attr	set	6
20727                       00000010            _write_gfx_char_pl4.car	set	$10
20728                       00000004            .write_gfx_char_pl4.car	set	4
20729                       00000004            _write_gfx_char_pl4.addr	set	4
20730                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20731 51C1           BA                   03CE    mov dx, # 0x3ce
20732 51C4           B8                   FF08    mov ax, #0xff08
20733 51C7           EF                           out dx, ax
20734 51C8           B8                   0005    mov ax, #0x0005
20735 51CB           EF                           out dx, ax
20736 51CC           B8                   0003    mov ax, #0x0003
20737 51CF           EF                           out dx, ax
20738                                           ! 2273 endasm
20739                                           !BCC_ENDASM
20740                                           !BCC_EOS
20741                                           ! 2274 }
20742 51D0           89EC                       mov	sp,bp
20743 51D2           5D                         pop	bp
20744 51D3           C3                         ret
20745                                           ! 2275 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20746                                           ! Register BX used in function write_gfx_char_pl4
20747                                           ! 2276 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20748                       000051D4            _write_gfx_char_cga:
20749                                           !BCC_EOS
20750                                           !BCC_EOS
20751                                           !BCC_EOS
20752                                           !BCC_EOS
20753                                           !BCC_EOS
20754                                           !BCC_EOS
20755                                           ! 2277 {
20756                                           ! 2278  Bit8u i,j,mask,data;
20757                                           !BCC_EOS
20758                                           ! 2279  Bit8u *fdata;
20759                                           !BCC_EOS
20760                                           ! 2280  Bit16u addr,dest,src;
20761                                           !BCC_EOS
20762                                           ! 2281  fdata = &vgafont8;
20763 51D4           55                         push	bp
20764 51D5           89E5                       mov	bp,sp
20765 51D7           83C4                   F4  add	sp,*-$C
20766                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20767 51DA           BB                   0F51  mov	bx,#_vgafont8
20768 51DD           895E         FA            mov	-6[bp],bx
20769                                           !BCC_EOS
20770                                           ! 2282  addr=(xcurs*bpp)+ycurs*320;
20771                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20772 51E0           8A46         0A            mov	al,$A[bp]
20773 51E3           30E4                       xor	ah,ah
20774 51E5           B9                   0140  mov	cx,#$140
20775 51E8           F7E9                       imul	cx
20776 51EA           50                         push	ax
20777                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20778 51EB           8A46         0E            mov	al,$E[bp]
20779 51EE           30E4                       xor	ah,ah
20780 51F0           89C3                       mov	bx,ax
20781 51F2           8A46         08            mov	al,8[bp]
20782 51F5           30E4                       xor	ah,ah
20783 51F7           89D9                       mov	cx,bx
20784 51F9           F7E9                       imul	cx
20785                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20786 51FB           0346         F2            add	ax,-$E[bp]
20787 51FE           44                         inc	sp
20788 51FF           44                         inc	sp
20789                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20790 5200           8946         F8            mov	-8[bp],ax
20791                                           !BCC_EOS
20792                                           ! 2283  src = car * 8;
20793                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20794 5203           8A46         04            mov	al,4[bp]
20795 5206           30E4                       xor	ah,ah
20796 5208           B1                     03  mov	cl,*3
20797 520A           D3E0                       shl	ax,cl
20798                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20799 520C           8946         F4            mov	-$C[bp],ax
20800                                           !BCC_EOS
20801                                           ! 2284  for(i=0;i<8;i++)
20802                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20803 520F           30C0                       xor	al,al
20804 5211           8846         FF            mov	-1[bp],al
20805                                           !BCC_EOS
20806                                           !BCC_EOS
20807                                           ! 2285   {
20808 5214           E9         01B3            br 	.147
20809                       00005217            .148:
20810                                           ! 2286    dest=addr+(i>>1)*80;
20811                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20812 5217           8A46         FF            mov	al,-1[bp]
20813 521A           30E4                       xor	ah,ah
20814 521C           D1E8                       shr	ax,*1
20815                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20816 521E           B9                   0050  mov	cx,*$50
20817 5221           F7E9                       imul	cx
20818                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20819                                           ! Debug: expression subtree swapping
20820 5223           0346         F8            add	ax,-8[bp]
20821                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20822 5226           8946         F6            mov	-$A[bp],ax
20823                                           !BCC_EOS
20824                                           ! 2287    if (i & 1) dest += 0x2000;
20825                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20826 5229           8A46         FF            mov	al,-1[bp]
20827 522C           24                     01  and	al,*1
20828 522E           84C0                       test	al,al
20829 5230           74           09            je  	.149
20830                       00005232            .14A:
20831                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20832 5232           8B46         F6            mov	ax,-$A[bp]
20833 5235           05                   2000  add	ax,#$2000
20834 5238           8946         F6            mov	-$A[bp],ax
20835                                           !BCC_EOS
20836                                           ! 2288    mask = 0x80;
20837                       0000523B            .149:
20838                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20839 523B           B0                     80  mov	al,#$80
20840 523D           8846         FD            mov	-3[bp],al
20841                                           !BCC_EOS
20842                                           ! 2289    if (bpp == 1)
20843                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20844 5240           8A46         0E            mov	al,$E[bp]
20845 5243           3C                     01  cmp	al,*1
20846 5245         0F85         00B3            bne 	.14B
20847                       00005249            .14C:
20848                                           ! 2290     {
20849                                           ! 2291      if (attr & 0x80)
20850                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20851 5249           8A46         06            mov	al,6[bp]
20852 524C           24                     80  and	al,#$80
20853 524E           84C0                       test	al,al
20854 5250           74           12            je  	.14D
20855                       00005252            .14E:
20856                                           ! 2292       {
20857                                           ! 2293        data = read_byte(0xb800,dest);
20858                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20859 5252           FF76         F6            push	-$A[bp]
20860                                           ! Debug: list unsigned int = const $B800 (used reg = )
20861 5255           B8                   B800  mov	ax,#$B800
20862 5258           50                         push	ax
20863                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20864 5259           E8         2AEF            call	_read_byte
20865 525C           83C4                   04  add	sp,*4
20866                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20867 525F           8846         FC            mov	-4[bp],al
20868                                           !BCC_EOS
20869                                           ! 2294       }
20870                                           ! 2295      else
20871                                           ! 2296       {
20872 5262           EB           05            jmp .14F
20873                       00005264            .14D:
20874                                           ! 2297        data = 0x00;
20875                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20876 5264           30C0                       xor	al,al
20877 5266           8846         FC            mov	-4[bp],al
20878                                           !BCC_EOS
20879                                           ! 2298       }
20880                                           ! 2299      for(j=
20881                       00005269            .14F:
20882                                           ! 2299 0;j<8;j++)
20883                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20884 5269           30C0                       xor	al,al
20885 526B           8846         FE            mov	-2[bp],al
20886                                           !BCC_EOS
20887                                           !BCC_EOS
20888                                           ! 2300       {
20889 526E           EB           6F            jmp .152
20890                       00005270            .153:
20891                                           ! 2301        if (fdata[src+i] & mask)
20892                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20893 5270           8B46         F4            mov	ax,-$C[bp]
20894 5273           0246         FF            add	al,-1[bp]
20895 5276           80D4                   00  adc	ah,*0
20896                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20897 5279           0346         FA            add	ax,-6[bp]
20898 527C           89C3                       mov	bx,ax
20899                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20900 527E           8A07                       mov	al,[bx]
20901 5280           2246         FD            and	al,-3[bp]
20902 5283           84C0                       test	al,al
20903 5285           74           47            je  	.154
20904                       00005287            .155:
20905                                           ! 2302         {
20906                                           ! 2303          if (attr & 0x80)
20907                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20908 5287           8A46         06            mov	al,6[bp]
20909 528A           24                     80  and	al,#$80
20910 528C           84C0                       test	al,al
20911 528E           74           20            je  	.156
20912                       00005290            .157:
20913                                           ! 2304           {
20914                                           ! 2305            data ^= (attr & 0x01) << (7-j);
20915                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20916 5290           B8                   0007  mov	ax,*7
20917 5293           2A46         FE            sub	al,-2[bp]
20918 5296           80DC                   00  sbb	ah,*0
20919 5299           50                         push	ax
20920                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20921 529A           8A46         06            mov	al,6[bp]
20922 529D           24                     01  and	al,*1
20923                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20924 529F           30E4                       xor	ah,ah
20925 52A1           8B4E         F2            mov	cx,-$E[bp]
20926 52A4           D3E0                       shl	ax,cl
20927 52A6           44                         inc	sp
20928 52A7           44                         inc	sp
20929                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20930 52A8           3246         FC            xor	al,-4[bp]
20931 52AB           8846         FC            mov	-4[bp],al
20932                                           !BCC_EOS
20933                                           ! 2306           }
20934                                           ! 2307          else
20935                                           ! 2308           {
20936 52AE           EB           1E            jmp .158
20937                       000052B0            .156:
20938                                           ! 2309            data |= (attr & 0x01) << (7-j);
20939                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
20940 52B0           B8                   0007  mov	ax,*7
20941 52B3           2A46         FE            sub	al,-2[bp]
20942 52B6           80DC                   00  sbb	ah,*0
20943 52B9           50                         push	ax
20944                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
20945 52BA           8A46         06            mov	al,6[bp]
20946 52BD           24                     01  and	al,*1
20947                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
20948 52BF           30E4                       xor	ah,ah
20949 52C1           8B4E         F2            mov	cx,-$E[bp]
20950 52C4           D3E0                       shl	ax,cl
20951 52C6           44                         inc	sp
20952 52C7           44                         inc	sp
20953                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
20954 52C8           0A46         FC            or	al,-4[bp]
20955 52CB           8846         FC            mov	-4[bp],al
20956                                           !BCC_EOS
20957                                           ! 2310           }
20958                                           ! 2311         }
20959                       000052CE            .158:
20960                                           ! 2312        mask >>= 1;
20961                       000052CE            .154:
20962                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
20963 52CE           8A46         FD            mov	al,-3[bp]
20964 52D1           30E4                       xor	ah,ah
20965 52D3           D1E8                       shr	ax,*1
20966 52D5           8846         FD            mov	-3[bp],al
20967                                           !BCC_EOS
20968                                           ! 2313       }
20969                                           ! 2314      write_byte(0xb800,dest,data);
20970                       000052D8            .151:
20971                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20972 52D8           8A46         FE            mov	al,-2[bp]
20973 52DB           40                         inc	ax
20974 52DC           8846         FE            mov	-2[bp],al
20975                       000052DF            .152:
20976                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20977 52DF           8A46         FE            mov	al,-2[bp]
20978 52E2           3C                     08  cmp	al,*8
20979 52E4           72           8A            jb 	.153
20980                       000052E6            .159:
20981                       000052E6            .150:
20982                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
20983 52E6           8A46         FC            mov	al,-4[bp]
20984 52E9           30E4                       xor	ah,ah
20985 52EB           50                         push	ax
20986                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20987 52EC           FF76         F6            push	-$A[bp]
20988                                           ! Debug: list unsigned int = const $B800 (used reg = )
20989 52EF           B8                   B800  mov	ax,#$B800
20990 52F2           50                         push	ax
20991                                           ! Debug: func () void = write_byte+0 (used reg = )
20992 52F3           E8         2A7B            call	_write_byte
20993 52F6           83C4                   06  add	sp,*6
20994                                           !BCC_EOS
20995                                           ! 2315     }
20996                                           ! 2316    else
20997                                           ! 2317     {
20998 52F9           E9         00C7            br 	.15A
20999                       000052FC            .14B:
21000                                           ! 2318      while (mask > 0)
21001                                           ! 2319       {
21002 52FC           E9         00BB            br 	.15C
21003                       000052FF            .15D:
21004                                           ! 2320        if (attr & 0x80)
21005                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21006 52FF           8A46         06            mov	al,6[bp]
21007 5302           24                     80  and	al,#$80
21008 5304           84C0                       test	al,al
21009 5306           74           12            je  	.15E
21010                       00005308            .15F:
21011                                           ! 2321         {
21012                                           ! 2322          data = read_byte(0xb800,dest);
21013                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21014 5308           FF76         F6            push	-$A[bp]
21015                                           ! Debug: list unsigned int = const $B800 (used reg = )
21016 530B           B8                   B800  mov	ax,#$B800
21017 530E           50                         push	ax
21018                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21019 530F           E8         2A39            call	_read_byte
21020 5312           83C4                   04  add	sp,*4
21021                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21022 5315           8846         FC            mov	-4[bp],al
21023                                           !BCC_EOS
21024                                           ! 2323         }
21025                                           ! 2324        else
21026                                           ! 2325         {
21027 5318           EB           05            jmp .160
21028                       0000531A            .15E:
21029                                           ! 2326          data = 0x00;
21030                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21031 531A           30C0                       xor	al,al
21032 531C           8846         FC            mov	-4[bp],al
21033                                           !BCC_EOS
21034                                           ! 2327         }
21035                                           ! 2328        for(j=0;j<4;j++)
21036                       0000531F            .160:
21037                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21038 531F           30C0                       xor	al,al
21039 5321           8846         FE            mov	-2[bp],al
21040                                           !BCC_EOS
21041                                           !BCC_EOS
21042                                           ! 2329         {
21043 5324           EB           73            jmp .163
21044                       00005326            .164:
21045                                           ! 2330          if (fdata[src+i] & mask)
21046                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21047 5326           8B46         F4            mov	ax,-$C[bp]
21048 5329           0246         FF            add	al,-1[bp]
21049 532C           80D4                   00  adc	ah,*0
21050                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21051 532F           0346         FA            add	ax,-6[bp]
21052 5332           89C3                       mov	bx,ax
21053                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21054 5334           8A07                       mov	al,[bx]
21055 5336           2246         FD            and	al,-3[bp]
21056 5339           84C0                       test	al,al
21057 533B           74           4B            je  	.165
21058                       0000533D            .166:
21059                                           ! 2331           {
21060                                           ! 2332            if (attr & 0x80)
21061                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21062 533D           8A46         06            mov	al,6[bp]
21063 5340           24                     80  and	al,#$80
21064 5342           84C0                       test	al,al
21065 5344           74           22            je  	.167
21066                       00005346            .168:
21067                                           ! 2333             {
21068                                           ! 2334              data ^= (attr & 0x03) << ((3-j)*2);
21069                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21070 5346           B8                   0003  mov	ax,*3
21071 5349           2A46         FE            sub	al,-2[bp]
21072 534C           80DC                   00  sbb	ah,*0
21073                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21074 534F           D1E0                       shl	ax,*1
21075 5351           50                         push	ax
21076                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21077 5352           8A46         06            mov	al,6[bp]
21078 5355           24                     03  and	al,*3
21079                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21080 5357           30E4                       xor	ah,ah
21081 5359           8B4E         F2            mov	cx,-$E[bp]
21082 535C           D3E0                       shl	ax,cl
21083 535E           44                         inc	sp
21084 535F           44                         inc	sp
21085                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21086 5360           3246         FC            xor	al,-4[bp]
21087 5363           8846         FC            mov	-4[bp],al
21088                                           !BCC_EOS
21089                                           ! 2335             }
21090                                           ! 2336            else
21091                                           ! 2337             {
21092 5366           EB           20            jmp .169
21093                       00005368            .167:
21094                                           ! 2338              data |= (attr & 0x03) << ((3-j)*2);
21095                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21096 5368           B8                   0003  mov	ax,*3
21097 536B           2A46         FE            sub	al,-2[bp]
21098 536E           80DC                   00  sbb	ah,*0
21099                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21100 5371           D1E0                       shl	ax,*1
21101 5373           50                         push	ax
21102                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21103 5374           8A46         06            mov	al,6[bp]
21104 5377           24                     03  and	al,*3
21105                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21106 5379           30E4                       xor	ah,ah
21107 537B           8B4E         F2            mov	cx,-$E[bp]
21108 537E           D3E0                       shl	ax,cl
21109 5380           44                         inc	sp
21110 5381           44                         inc	sp
21111                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21112 5382           0A46         FC            or	al,-4[bp]
21113 5385           8846         FC            mov	-4[bp],al
21114                                           !BCC_EOS
21115                                           ! 2339             }
21116                                           ! 2340           }
21117                       00005388            .169:
21118                                           ! 2341          mask >>= 1;
21119                       00005388            .165:
21120                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21121 5388           8A46         FD            mov	al,-3[bp]
21122 538B           30E4                       xor	ah,ah
21123 538D           D1E8                       shr	ax,*1
21124 538F           8846         FD            mov	-3[bp],al
21125                                           !BCC_EOS
21126                                           ! 2342         }
21127                                           ! 2343        write_byte(0xb800,dest,data);
21128                       00005392            .162:
21129                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21130 5392           8A46         FE            mov	al,-2[bp]
21131 5395           40                         inc	ax
21132 5396           8846         FE            mov	-2[bp],al
21133                       00005399            .163:
21134                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21135 5399           8A46         FE            mov	al,-2[bp]
21136 539C           3C                     04  cmp	al,*4
21137 539E           72           86            jb 	.164
21138                       000053A0            .16A:
21139                       000053A0            .161:
21140                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21141 53A0           8A46         FC            mov	al,-4[bp]
21142 53A3           30E4                       xor	ah,ah
21143 53A5           50                         push	ax
21144                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21145 53A6           FF76         F6            push	-$A[bp]
21146                                           ! Debug: list unsigned int = const $B800 (used reg = )
21147 53A9           B8                   B800  mov	ax,#$B800
21148 53AC           50                         push	ax
21149                                           ! Debug: func () void = write_byte+0 (used reg = )
21150 53AD           E8         29C1            call	_write_byte
21151 53B0           83C4                   06  add	sp,*6
21152                                           !BCC_EOS
21153                                           ! 2344        dest += 1;
21154                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21155 53B3           8B46         F6            mov	ax,-$A[bp]
21156 53B6           40                         inc	ax
21157 53B7           8946         F6            mov	-$A[bp],ax
21158                                           !BCC_EOS
21159                                           ! 2345       }
21160                                           ! 2346     }
21161                       000053BA            .15C:
21162                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21163 53BA           8A46         FD            mov	al,-3[bp]
21164 53BD           84C0                       test	al,al
21165 53BF         0F85         FF3C            bne 	.15D
21166                       000053C3            .16B:
21167                       000053C3            .15B:
21168                                           ! 2347   }
21169                       000053C3            .15A:
21170                                           ! 2348 }
21171                       000053C3            .146:
21172                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21173 53C3           8A46         FF            mov	al,-1[bp]
21174 53C6           40                         inc	ax
21175 53C7           8846         FF            mov	-1[bp],al
21176                       000053CA            .147:
21177                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21178 53CA           8A46         FF            mov	al,-1[bp]
21179 53CD           3C                     08  cmp	al,*8
21180 53CF         0F82         FE44            blo 	.148
21181                       000053D3            .16C:
21182                       000053D3            .145:
21183 53D3           89EC                       mov	sp,bp
21184 53D5           5D                         pop	bp
21185 53D6           C3                         ret
21186                                           ! 2349 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21187                                           ! Register BX used in function write_gfx_char_cga
21188                                           ! 2350 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21189                       000053D7            _write_gfx_char_lin:
21190                                           !BCC_EOS
21191                                           !BCC_EOS
21192                                           !BCC_EOS
21193                                           !BCC_EOS
21194                                           !BCC_EOS
21195                                           ! 2351 {
21196                                           ! 2352  Bit8u i,j,mask,data;
21197                                           !BCC_EOS
21198                                           ! 2353  Bit8u *fdata;
21199                                           !BCC_EOS
21200                                           ! 2354  Bit16u addr,dest,src;
21201                                           !BCC_EOS
21202                                           ! 2355  fdata = &vgafont8;
21203 53D7           55                         push	bp
21204 53D8           89E5                       mov	bp,sp
21205 53DA           83C4                   F4  add	sp,*-$C
21206                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21207 53DD           BB                   0F51  mov	bx,#_vgafont8
21208 53E0           895E         FA            mov	-6[bp],bx
21209                                           !BCC_EOS
21210                                           ! 2356  addr=xcurs*8+ycurs*nbcols*64;
21211                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21212 53E3           8A46         0C            mov	al,$C[bp]
21213 53E6           30E4                       xor	ah,ah
21214 53E8           89C3                       mov	bx,ax
21215 53EA           8A46         0A            mov	al,$A[bp]
21216 53ED           30E4                       xor	ah,ah
21217 53EF           89D9                       mov	cx,bx
21218 53F1           F7E9                       imul	cx
21219                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21220 53F3           B1                     06  mov	cl,*6
21221 53F5           D3E0                       shl	ax,cl
21222 53F7           50                         push	ax
21223                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21224 53F8           8A46         08            mov	al,8[bp]
21225 53FB           30E4                       xor	ah,ah
21226 53FD           B1                     03  mov	cl,*3
21227 53FF           D3E0                       shl	ax,cl
21228                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21229 5401           0346         F2            add	ax,-$E[bp]
21230 5404           44                         inc	sp
21231 5405           44                         inc	sp
21232                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21233 5406           8946         F8            mov	-8[bp],ax
21234                                           !BCC_EOS
21235                                           ! 2357  src = car * 8;
21236                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21237 5409           8A46         04            mov	al,4[bp]
21238 540C           30E4                       xor	ah,ah
21239 540E           B1                     03  mov	cl,*3
21240 5410           D3E0                       shl	ax,cl
21241                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21242 5412           8946         F4            mov	-$C[bp],ax
21243                                           !BCC_EOS
21244                                           ! 2358  for(i=0;i<8;i++)
21245                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21246 5415           30C0                       xor	al,al
21247 5417           8846         FF            mov	-1[bp],al
21248                                           !BCC_EOS
21249                                           !BCC_EOS
21250                                           ! 2359   {
21251 541A           E9         0081            br 	.16F
21252                       0000541D            .170:
21253                                           ! 2360    dest=addr+i*nbcols*8;
21254                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21255 541D           8A46         0C            mov	al,$C[bp]
21256 5420           30E4                       xor	ah,ah
21257 5422           89C3                       mov	bx,ax
21258 5424           8A46         FF            mov	al,-1[bp]
21259 5427           30E4                       xor	ah,ah
21260 5429           89D9                       mov	cx,bx
21261 542B           F7E9                       imul	cx
21262                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21263 542D           B1                     03  mov	cl,*3
21264 542F           D3E0                       shl	ax,cl
21265                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21266                                           ! Debug: expression subtree swapping
21267 5431           0346         F8            add	ax,-8[bp]
21268                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21269 5434           8946         F6            mov	-$A[bp],ax
21270                                           !BCC_EOS
21271                                           ! 2361    mask = 0x80;
21272                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21273 5437           B0                     80  mov	al,#$80
21274 5439           8846         FD            mov	-3[bp],al
21275                                           !BCC_EOS
21276                                           ! 2362    for(j=0;j<8;j++)
21277                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21278 543C           30C0                       xor	al,al
21279 543E           8846         FE            mov	-2[bp],al
21280                                           !BCC_EOS
21281                                           !BCC_EOS
21282                                           ! 2363     {
21283 5441           EB           4D            jmp .173
21284                       00005443            .174:
21285                                           ! 2364      data = 0x00;
21286                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21287 5443           30C0                       xor	al,al
21288 5445           8846         FC            mov	-4[bp],al
21289                                           !BCC_EOS
21290                                           ! 2365      if (fdata[src+i] & mask)
21291                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21292 5448           8B46         F4            mov	ax,-$C[bp]
21293 544B           0246         FF            add	al,-1[bp]
21294 544E           80D4                   00  adc	ah,*0
21295                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21296 5451           0346         FA            add	ax,-6[bp]
21297 5454           89C3                       mov	bx,ax
21298                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21299 5456           8A07                       mov	al,[bx]
21300 5458           2246         FD            and	al,-3[bp]
21301 545B           84C0                       test	al,al
21302 545D           74           06            je  	.175
21303                       0000545F            .176:
21304                                           ! 2366       {
21305                                           ! 2367        data = attr;
21306                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21307 545F           8A46         06            mov	al,6[bp]
21308 5462           8846         FC            mov	-4[bp],al
21309                                           !BCC_EOS
21310                                           ! 2368       }
21311                                           ! 2369      write_byte(0xa000,dest+j,data);
21312                       00005465            .175:
21313                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21314 5465           8A46         FC            mov	al,-4[bp]
21315 5468           30E4                       xor	ah,ah
21316 546A           50                         push	ax
21317                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21318 546B           8B46         F6            mov	ax,-$A[bp]
21319 546E           0246         FE            add	al,-2[bp]
21320 5471           80D4                   00  adc	ah,*0
21321                                           ! Debug: list unsigned int = ax+0 (used reg = )
21322 5474           50                         push	ax
21323                                           ! Debug: list unsigned int = const $A000 (used reg = )
21324 5475           B8                   A000  mov	ax,#$A000
21325 5478           50                         push	ax
21326                                           ! Debug: func () void = write_byte+0 (used reg = )
21327 5479           E8         28F5            call	_write_byte
21328 547C           83C4                   06  add	sp,*6
21329                                           !BCC_EOS
21330                                           ! 2370      mask >>= 1;
21331                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21332 547F           8A46         FD            mov	al,-3[bp]
21333 5482           30E4                       xor	ah,ah
21334 5484           D1E8                       shr	ax,*1
21335 5486           8846         FD            mov	-3[bp],al
21336                                           !BCC_EOS
21337                                           ! 2371     }
21338                                           ! 2372   }
21339                       00005489            .172:
21340                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21341 5489           8A46         FE            mov	al,-2[bp]
21342 548C           40                         inc	ax
21343 548D           8846         FE            mov	-2[bp],al
21344                       00005490            .173:
21345                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21346 5490           8A46         FE            mov	al,-2[bp]
21347 5493           3C                     08  cmp	al,*8
21348 5495           72           AC            jb 	.174
21349                       00005497            .177:
21350                       00005497            .171:
21351                                           ! 2373 }
21352                       00005497            .16E:
21353                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21354 5497           8A46         FF            mov	al,-1[bp]
21355 549A           40                         inc	ax
21356 549B           8846         FF            mov	-1[bp],al
21357                       0000549E            .16F:
21358                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21359 549E           8A46         FF            mov	al,-1[bp]
21360 54A1           3C                     08  cmp	al,*8
21361 54A3         0F82         FF76            blo 	.170
21362                       000054A7            .178:
21363                       000054A7            .16D:
21364 54A7           89EC                       mov	sp,bp
21365 54A9           5D                         pop	bp
21366 54AA           C3                         ret
21367                                           ! 2374 static void biosfn_write_char_attr (car,page,attr,count)
21368                                           ! Register BX used in function write_gfx_char_lin
21369                                           ! 2375 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21370                       000054AB            _biosfn_write_char_attr:
21371                                           !BCC_EOS
21372                                           !BCC_EOS
21373                                           !BCC_EOS
21374                                           !BCC_EOS
21375                                           ! 2376 {
21376                                           ! 2377  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21377                                           !BCC_EOS
21378                                           ! 2378  Bit16u nbcols,nbrows,address;
21379                                           !BCC_EOS
21380                                           ! 2379  Bit16u cursor,dummy;
21381                                           !BCC_EOS
21382                                           ! 2380  mode=read_byte(0x40,0x49);
21383 54AB           55                         push	bp
21384 54AC           89E5                       mov	bp,sp
21385 54AE           83C4                   F0  add	sp,*-$10
21386                                           ! Debug: list int = const $49 (used reg = )
21387 54B1           B8                   0049  mov	ax,*$49
21388 54B4           50                         push	ax
21389                                           ! Debug: list int = const $40 (used reg = )
21390 54B5           B8                   0040  mov	ax,*$40
21391 54B8           50                         push	ax
21392                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21393 54B9           E8         288F            call	_read_byte
21394 54BC           83C4                   04  add	sp,*4
21395                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21396 54BF           8846         FC            mov	-4[bp],al
21397                                           !BCC_EOS
21398                                           ! 2381  line=find_vga_entry(mode);
21399                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21400 54C2           8A46         FC            mov	al,-4[bp]
21401 54C5           30E4                       xor	ah,ah
21402 54C7           50                         push	ax
21403                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21404 54C8           E8         2794            call	_find_vga_entry
21405 54CB           44                         inc	sp
21406 54CC           44                         inc	sp
21407                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21408 54CD           8846         FB            mov	-5[bp],al
21409                                           !BCC_EOS
21410                                           ! 2382  if(line==0xFF)return;
21411                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21412 54D0           8A46         FB            mov	al,-5[bp]
21413 54D3           3C                     FF  cmp	al,#$FF
21414 54D5           75           04            jne 	.179
21415                       000054D7            .17A:
21416 54D7           89EC                       mov	sp,bp
21417 54D9           5D                         pop	bp
21418 54DA           C3                         ret
21419                                           !BCC_EOS
21420                                           ! 2383  biosfn_get_cursor_pos(page,&dummy,&cursor);
21421                       000054DB            .179:
21422                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21423 54DB           8D5E         F2            lea	bx,-$E[bp]
21424 54DE           53                         push	bx
21425                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21426 54DF           8D5E         F0            lea	bx,-$10[bp]
21427 54E2           53                         push	bx
21428                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21429 54E3           8A46         06            mov	al,6[bp]
21430 54E6           30E4                       xor	ah,ah
21431 54E8           50                         push	ax
21432                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21433 54E9           E8         EE88            call	_biosfn_get_cursor_pos
21434 54EC           83C4                   06  add	sp,*6
21435                                           !BCC_EOS
21436                                           ! 2384  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21437                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21438 54EF           8A46         F2            mov	al,-$E[bp]
21439                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21440 54F2           8846         FE            mov	-2[bp],al
21441                                           !BCC_EOS
21442                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21443 54F5           8B46         F2            mov	ax,-$E[bp]
21444 54F8           30C0                       xor	al,al
21445                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21446 54FA           88E0                       mov	al,ah
21447 54FC           30E4                       xor	ah,ah
21448                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21449 54FE           8846         FD            mov	-3[bp],al
21450                                           !BCC_EOS
21451                                           ! 2385  nbrows=read_byte(0x40,0x84)+1;
21452                                           ! Debug: list int = const $84 (used reg = )
21453 5501           B8                   0084  mov	ax,#$84
21454 5504           50                         push	ax
21455                                           ! Debug: list int = const $40 (used reg = )
21456 5505           B8                   0040  mov	ax,*$40
21457 5508           50                         push	ax
21458                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21459 5509           E8         283F            call	_read_byte
21460 550C           83C4                   04  add	sp,*4
21461                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21462 550F           30E4                       xor	ah,ah
21463                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21464 5511           40                         inc	ax
21465 5512           8946         F6            mov	-$A[bp],ax
21466                                           !BCC_EOS
21467                                           ! 2386  nbcols=read_word(0x40,0x4A);
21468                                           ! Debug: list int = const $4A (used reg = )
21469 5515           B8                   004A  mov	ax,*$4A
21470 5518           50                         push	ax
21471                                           ! Debug: list int = const $40 (used reg = )
21472 5519           B8                   0040  mov	ax,*$40
21473 551C           50                         push	ax
21474                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21475 551D           E8         283E            call	_read_word
21476 5520           83C4                   04  add	sp,*4
21477                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21478 5523           8946         F8            mov	-8[bp],ax
21479                                           !BCC_EOS
21480                                           ! 2387  if(vga_modes[line].class==0x00)
21481                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
21482 5526           8A46         FB            mov	al,-5[bp]
21483 5529           30E4                       xor	ah,ah
21484 552B           B1                     03  mov	cl,*3
21485 552D           D3E0                       shl	ax,cl
21486 552F           89C3                       mov	bx,ax
21487 5531           81C3                 01DB  add	bx,#_vga_modes
21488                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21489 5535           8A47         01            mov	al,1[bx]
21490 5538           84C0                       test	al,al
21491 553A           75           6A            jne 	.17B
21492                       0000553C            .17C:
21493                                           ! 2388   {
21494                                           ! 2389    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21495                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21496 553C           8A46         FD            mov	al,-3[bp]
21497 553F           30E4                       xor	ah,ah
21498 5541           8B4E         F8            mov	cx,-8[bp]
21499 5544           F7E9                       imul	cx
21500                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21501                                           ! Debug: expression subtree swapping
21502 5546           0246         FE            add	al,-2[bp]
21503 5549           80D4                   00  adc	ah,*0
21504                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21505 554C           D1E0                       shl	ax,*1
21506 554E           50                         push	ax
21507                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21508 554F           8B46         F8            mov	ax,-8[bp]
21509 5552           8B4E         F6            mov	cx,-$A[bp]
21510 5555           F7E9                       imul	cx
21511                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21512 5557           D1E0                       shl	ax,*1
21513                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21514 5559           0C                     FF  or	al,#$FF
21515                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21516                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21517 555B           89C3                       mov	bx,ax
21518 555D           8A46         06            mov	al,6[bp]
21519 5560           30E4                       xor	ah,ah
21520 5562           93                         xchg	ax,bx
21521 5563           40                         inc	ax
21522 5564           89D9                       mov	cx,bx
21523 5566           F7E9                       imul	cx
21524                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21525 5568           0346         EE            add	ax,-$12[bp]
21526 556B           44                         inc	sp
21527 556C           44                         inc	sp
21528                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21529 556D           8946         F4            mov	-$C[bp],ax
21530                                           !BCC_EOS
21531                                           ! 2390    dummy=((Bit16u)attr<<8)+car;
21532                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21533 5570           8A46         08            mov	al,8[bp]
21534 5573           30E4                       xor	ah,ah
21535                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21536 5575           88C4                       mov	ah,al
21537 5577           30C0                       xor	al,al
21538                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21539 5579           0246         04            add	al,4[bp]
21540 557C           80D4                   00  adc	ah,*0
21541                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21542 557F           8946         F0            mov	-$10[bp],ax
21543                                           !BCC_EOS
21544                                           ! 2391    memsetw(vga_modes[line].sstart,address,dummy,count);
21545                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21546 5582           FF76         0A            push	$A[bp]
21547                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21548 5585           FF76         F0            push	-$10[bp]
21549                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21550 5588           FF76         F4            push	-$C[bp]
21551                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$12] struct  = vga_modes+0 (used reg = )
21552 558B           8A46         FB            mov	al,-5[bp]
21553 558E           30E4                       xor	ah,ah
21554 5590           B1                     03  mov	cl,*3
21555 5592           D3E0                       shl	ax,cl
21556 5594           89C3                       mov	bx,ax
21557 5596           81C3                 01DB  add	bx,#_vga_modes
21558                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21559 559A           FF77         04            push	4[bx]
21560                                           ! Debug: func () void = memsetw+0 (used reg = )
21561 559D           E8         2726            call	_memsetw
21562 55A0           83C4                   08  add	sp,*8
21563                                           !BCC_EOS
21564                                           ! 2392   }
21565                                           ! 2393  else
21566                                           ! 2394   {
21567 55A3           E9         00E8            br 	.17D
21568                       000055A6            .17B:
21569                                           ! 2395    cheight=read_byte(0x40
21570                                           ! 2395 ,0x85);
21571                                           ! Debug: list int = const $85 (used reg = )
21572 55A6           B8                   0085  mov	ax,#$85
21573 55A9           50                         push	ax
21574                                           ! Debug: list int = const $40 (used reg = )
21575 55AA           B8                   0040  mov	ax,*$40
21576 55AD           50                         push	ax
21577                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21578 55AE           E8         279A            call	_read_byte
21579 55B1           83C4                   04  add	sp,*4
21580                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
21581 55B4           8846         FF            mov	-1[bp],al
21582                                           !BCC_EOS
21583                                           ! 2396    bpp=vga_modes[line].pixbits;
21584                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
21585 55B7           8A46         FB            mov	al,-5[bp]
21586 55BA           30E4                       xor	ah,ah
21587 55BC           B1                     03  mov	cl,*3
21588 55BE           D3E0                       shl	ax,cl
21589 55C0           89C3                       mov	bx,ax
21590 55C2           81C3                 01DB  add	bx,#_vga_modes
21591                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21592 55C6           8A47         03            mov	al,3[bx]
21593 55C9           8846         FA            mov	-6[bp],al
21594                                           !BCC_EOS
21595                                           ! 2397    while((count-->0) && (xcurs<nbcols))
21596                                           ! 2398     {
21597 55CC           E9         00A7            br 	.17F
21598                       000055CF            .180:
21599                                           ! 2399      switch(vga_modes[line].memmodel)
21600                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
21601 55CF           8A46         FB            mov	al,-5[bp]
21602 55D2           30E4                       xor	ah,ah
21603 55D4           B1                     03  mov	cl,*3
21604 55D6           D3E0                       shl	ax,cl
21605 55D8           89C3                       mov	bx,ax
21606 55DA           81C3                 01DB  add	bx,#_vga_modes
21607 55DE           8A47         02            mov	al,2[bx]
21608                                           ! 2400       {
21609 55E1           E9         0077            br 	.183
21610                                           ! 2401        case 0x04:
21611                                           ! 2402        case 0x03:
21612                       000055E4            .184:
21613                                           ! 2403          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21614                       000055E4            .185:
21615                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21616 55E4           8A46         FF            mov	al,-1[bp]
21617 55E7           30E4                       xor	ah,ah
21618 55E9           50                         push	ax
21619                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21620 55EA           FF76         F8            push	-8[bp]
21621                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21622 55ED           8A46         FD            mov	al,-3[bp]
21623 55F0           30E4                       xor	ah,ah
21624 55F2           50                         push	ax
21625                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21626 55F3           8A46         FE            mov	al,-2[bp]
21627 55F6           30E4                       xor	ah,ah
21628 55F8           50                         push	ax
21629                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21630 55F9           8A46         08            mov	al,8[bp]
21631 55FC           30E4                       xor	ah,ah
21632 55FE           50                         push	ax
21633                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21634 55FF           8A46         04            mov	al,4[bp]
21635 5602           30E4                       xor	ah,ah
21636 5604           50                         push	ax
21637                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21638 5605           E8         FA59            call	_write_gfx_char_pl4
21639 5608           83C4                   0C  add	sp,*$C
21640                                           !BCC_EOS
21641                                           ! 2404          break;
21642 560B           EB           62            jmp .181
21643                                           !BCC_EOS
21644                                           ! 2405        case 0x02:
21645                                           ! 2406          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21646                       0000560D            .186:
21647                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21648 560D           8A46         FA            mov	al,-6[bp]
21649 5610           30E4                       xor	ah,ah
21650 5612           50                         push	ax
21651                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21652 5613           FF76         F8            push	-8[bp]
21653                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21654 5616           8A46         FD            mov	al,-3[bp]
21655 5619           30E4                       xor	ah,ah
21656 561B           50                         push	ax
21657                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21658 561C           8A46         FE            mov	al,-2[bp]
21659 561F           30E4                       xor	ah,ah
21660 5621           50                         push	ax
21661                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21662 5622           8A46         08            mov	al,8[bp]
21663 5625           30E4                       xor	ah,ah
21664 5627           50                         push	ax
21665                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21666 5628           8A46         04            mov	al,4[bp]
21667 562B           30E4                       xor	ah,ah
21668 562D           50                         push	ax
21669                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21670 562E           E8         FBA3            call	_write_gfx_char_cga
21671 5631           83C4                   0C  add	sp,*$C
21672                                           !BCC_EOS
21673                                           ! 2407          break;
21674 5634           EB           39            jmp .181
21675                                           !BCC_EOS
21676                                           ! 2408        case 0x05:
21677                                           ! 2409          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21678                       00005636            .187:
21679                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21680 5636           FF76         F8            push	-8[bp]
21681                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21682 5639           8A46         FD            mov	al,-3[bp]
21683 563C           30E4                       xor	ah,ah
21684 563E           50                         push	ax
21685                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21686 563F           8A46         FE            mov	al,-2[bp]
21687 5642           30E4                       xor	ah,ah
21688 5644           50                         push	ax
21689                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21690 5645           8A46         08            mov	al,8[bp]
21691 5648           30E4                       xor	ah,ah
21692 564A           50                         push	ax
21693                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21694 564B           8A46         04            mov	al,4[bp]
21695 564E           30E4                       xor	ah,ah
21696 5650           50                         push	ax
21697                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21698 5651           E8         FD83            call	_write_gfx_char_lin
21699 5654           83C4                   0A  add	sp,*$A
21700                                           !BCC_EOS
21701                                           ! 2410          break;
21702 5657           EB           16            jmp .181
21703                                           !BCC_EOS
21704                                           ! 2411       }
21705                                           ! 2412      xcurs++;
21706 5659           EB           14            jmp .181
21707                       0000565B            .183:
21708 565B           2C                     02  sub	al,*2
21709 565D           74           AE            je 	.186
21710 565F           2C                     01  sub	al,*1
21711 5661         0F84         FF7F            beq 	.185
21712 5665           2C                     01  sub	al,*1
21713 5667         0F84         FF79            beq 	.184
21714 566B           2C                     01  sub	al,*1
21715 566D           74           C7            je 	.187
21716                       0000566F            .181:
21717                       FFFFFFEE            ..FFFA	=	-$12
21718                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21719 566F           8A46         FE            mov	al,-2[bp]
21720 5672           40                         inc	ax
21721 5673           8846         FE            mov	-2[bp],al
21722                                           !BCC_EOS
21723                                           ! 2413     }
21724                                           ! 2414   }
21725                       00005676            .17F:
21726                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21727 5676           8B46         0A            mov	ax,$A[bp]
21728 5679           48                         dec	ax
21729 567A           8946         0A            mov	$A[bp],ax
21730                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21731 567D           3D                   FFFF  cmp	ax,*-1
21732 5680           74           0C            je  	.188
21733                       00005682            .189:
21734                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21735 5682           8A46         FE            mov	al,-2[bp]
21736 5685           30E4                       xor	ah,ah
21737 5687           3B46         F8            cmp	ax,-8[bp]
21738 568A         0F82         FF41            blo 	.180
21739                       0000568E            .188:
21740                       0000568E            .17E:
21741                                           ! 2415 }
21742                       0000568E            .17D:
21743 568E           89EC                       mov	sp,bp
21744 5690           5D                         pop	bp
21745 5691           C3                         ret
21746                                           ! 2416 static void biosfn_write_char_only (car,page,attr,count)
21747                                           ! Register BX used in function biosfn_write_char_attr
21748                                           ! 2417 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21749                       00005692            _biosfn_write_char_only:
21750                                           !BCC_EOS
21751                                           !BCC_EOS
21752                                           !BCC_EOS
21753                                           !BCC_EOS
21754                                           ! 2418 {
21755                                           ! 2419  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21756                                           !BCC_EOS
21757                                           ! 2420  Bit16u nbcols,nbrows,address;
21758                                           !BCC_EOS
21759                                           ! 2421  Bit16u cursor,dummy;
21760                                           !BCC_EOS
21761                                           ! 2422  mode=read_byte(0x40,0x49);
21762 5692           55                         push	bp
21763 5693           89E5                       mov	bp,sp
21764 5695           83C4                   F0  add	sp,*-$10
21765                                           ! Debug: list int = const $49 (used reg = )
21766 5698           B8                   0049  mov	ax,*$49
21767 569B           50                         push	ax
21768                                           ! Debug: list int = const $40 (used reg = )
21769 569C           B8                   0040  mov	ax,*$40
21770 569F           50                         push	ax
21771                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21772 56A0           E8         26A8            call	_read_byte
21773 56A3           83C4                   04  add	sp,*4
21774                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21775 56A6           8846         FC            mov	-4[bp],al
21776                                           !BCC_EOS
21777                                           ! 2423  line=find_vga_entry(mode);
21778                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21779 56A9           8A46         FC            mov	al,-4[bp]
21780 56AC           30E4                       xor	ah,ah
21781 56AE           50                         push	ax
21782                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21783 56AF           E8         25AD            call	_find_vga_entry
21784 56B2           44                         inc	sp
21785 56B3           44                         inc	sp
21786                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21787 56B4           8846         FB            mov	-5[bp],al
21788                                           !BCC_EOS
21789                                           ! 2424  if(line==0xFF)return;
21790                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21791 56B7           8A46         FB            mov	al,-5[bp]
21792 56BA           3C                     FF  cmp	al,#$FF
21793 56BC           75           04            jne 	.18A
21794                       000056BE            .18B:
21795 56BE           89EC                       mov	sp,bp
21796 56C0           5D                         pop	bp
21797 56C1           C3                         ret
21798                                           !BCC_EOS
21799                                           ! 2425  biosfn_get_cursor_pos(page,&dummy,&cursor);
21800                       000056C2            .18A:
21801                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21802 56C2           8D5E         F2            lea	bx,-$E[bp]
21803 56C5           53                         push	bx
21804                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21805 56C6           8D5E         F0            lea	bx,-$10[bp]
21806 56C9           53                         push	bx
21807                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21808 56CA           8A46         06            mov	al,6[bp]
21809 56CD           30E4                       xor	ah,ah
21810 56CF           50                         push	ax
21811                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21812 56D0           E8         ECA1            call	_biosfn_get_cursor_pos
21813 56D3           83C4                   06  add	sp,*6
21814                                           !BCC_EOS
21815                                           ! 2426  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21816                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21817 56D6           8A46         F2            mov	al,-$E[bp]
21818                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21819 56D9           8846         FE            mov	-2[bp],al
21820                                           !BCC_EOS
21821                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21822 56DC           8B46         F2            mov	ax,-$E[bp]
21823 56DF           30C0                       xor	al,al
21824                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21825 56E1           88E0                       mov	al,ah
21826 56E3           30E4                       xor	ah,ah
21827                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21828 56E5           8846         FD            mov	-3[bp],al
21829                                           !BCC_EOS
21830                                           ! 2427  nbrows=read_byte(0x40,0x84)+1;
21831                                           ! Debug: list int = const $84 (used reg = )
21832 56E8           B8                   0084  mov	ax,#$84
21833 56EB           50                         push	ax
21834                                           ! Debug: list int = const $40 (used reg = )
21835 56EC           B8                   0040  mov	ax,*$40
21836 56EF           50                         push	ax
21837                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21838 56F0           E8         2658            call	_read_byte
21839 56F3           83C4                   04  add	sp,*4
21840                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21841 56F6           30E4                       xor	ah,ah
21842                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21843 56F8           40                         inc	ax
21844 56F9           8946         F6            mov	-$A[bp],ax
21845                                           !BCC_EOS
21846                                           ! 2428  nbcols=read_word(0x40,0x4A);
21847                                           ! Debug: list int = const $4A (used reg = )
21848 56FC           B8                   004A  mov	ax,*$4A
21849 56FF           50                         push	ax
21850                                           ! Debug: list int = const $40 (used reg = )
21851 5700           B8                   0040  mov	ax,*$40
21852 5703           50                         push	ax
21853                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21854 5704           E8         2657            call	_read_word
21855 5707           83C4                   04  add	sp,*4
21856                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21857 570A           8946         F8            mov	-8[bp],ax
21858                                           !BCC_EOS
21859                                           ! 2429  if(vga_modes[line].class==0x00)
21860                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
21861 570D           8A46         FB            mov	al,-5[bp]
21862 5710           30E4                       xor	ah,ah
21863 5712           B1                     03  mov	cl,*3
21864 5714           D3E0                       shl	ax,cl
21865 5716           89C3                       mov	bx,ax
21866 5718           81C3                 01DB  add	bx,#_vga_modes
21867                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21868 571C           8A47         01            mov	al,1[bx]
21869 571F           84C0                       test	al,al
21870 5721           75           6E            jne 	.18C
21871                       00005723            .18D:
21872                                           ! 2430   {
21873                                           ! 2431    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21874                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21875 5723           8A46         FD            mov	al,-3[bp]
21876 5726           30E4                       xor	ah,ah
21877 5728           8B4E         F8            mov	cx,-8[bp]
21878 572B           F7E9                       imul	cx
21879                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21880                                           ! Debug: expression subtree swapping
21881 572D           0246         FE            add	al,-2[bp]
21882 5730           80D4                   00  adc	ah,*0
21883                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21884 5733           D1E0                       shl	ax,*1
21885 5735           50                         push	ax
21886                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21887 5736           8B46         F8            mov	ax,-8[bp]
21888 5739           8B4E         F6            mov	cx,-$A[bp]
21889 573C           F7E9                       imul	cx
21890                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21891 573E           D1E0                       shl	ax,*1
21892                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21893 5740           0C                     FF  or	al,#$FF
21894                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21895                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21896 5742           89C3                       mov	bx,ax
21897 5744           8A46         06            mov	al,6[bp]
21898 5747           30E4                       xor	ah,ah
21899 5749           93                         xchg	ax,bx
21900 574A           40                         inc	ax
21901 574B           89D9                       mov	cx,bx
21902 574D           F7E9                       imul	cx
21903                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21904 574F           0346         EE            add	ax,-$12[bp]
21905 5752           44                         inc	sp
21906 5753           44                         inc	sp
21907                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21908 5754           8946         F4            mov	-$C[bp],ax
21909                                           !BCC_EOS
21910                                           ! 2432    while(count-->0)
21911                                           ! 2433     {write_byte(vga_modes[line].sstart,address,car);
21912 5757           EB           29            jmp .18F
21913                       00005759            .190:
21914                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
21915 5759           8A46         04            mov	al,4[bp]
21916 575C           30E4                       xor	ah,ah
21917 575E           50                         push	ax
21918                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
21919 575F           FF76         F4            push	-$C[bp]
21920                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
21921 5762           8A46         FB            mov	al,-5[bp]
21922 5765           30E4                       xor	ah,ah
21923 5767           B1                     03  mov	cl,*3
21924 5769           D3E0                       shl	ax,cl
21925 576B           89C3                       mov	bx,ax
21926 576D           81C3                 01DB  add	bx,#_vga_modes
21927                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21928 5771           FF77         04            push	4[bx]
21929                                           ! Debug: func () void = write_byte+0 (used reg = )
21930 5774           E8         25FA            call	_write_byte
21931 5777           83C4                   06  add	sp,*6
21932                                           !BCC_EOS
21933                                           ! 2434      address+=2;
21934                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
21935 577A           8B46         F4            mov	ax,-$C[bp]
21936 577D           40                         inc	ax
21937 577E           40                         inc	ax
21938 577F           8946         F4            mov	-$C[bp],ax
21939                                           !BCC_EOS
21940                                           ! 2435     }
21941                                           ! 2436   }
21942                       00005782            .18F:
21943                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21944 5782           8B46         0A            mov	ax,$A[bp]
21945 5785           48                         dec	ax
21946 5786           8946         0A            mov	$A[bp],ax
21947                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21948 5789           3D                   FFFF  cmp	ax,*-1
21949 578C           75           CB            jne	.190
21950                       0000578E            .191:
21951                       0000578E            .18E:
21952                                           ! 2437  else
21953                                           ! 2438   {
21954 578E           E9         00E7            br 	.192
21955                       00005791            .18C:
21956                                           ! 2439    cheight=read_byte(0x40,0x85);
21957                                           ! Debug: list int = const $85 (used reg = )
21958 5791           B8                   0085  mov	ax,#$85
21959 5794           50                         push	ax
21960                                           ! Debug: list int = const $40 (used reg = )
21961 5795           B8                   0040  mov	ax,*$40
21962 5798           50                         push	ax
21963                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21964 5799           E8         25AF            call	_read_byte
21965 579C           83C4                   04  add	sp,*4
21966                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
21967 579F           8846         FF            mov	-1[bp],al
21968                                           !BCC_EOS
21969                                           ! 2440    bpp=vga_modes[line].pixbits;
21970                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
21971 57A2           8A46         FB            mov	al,-5[bp]
21972 57A5           30E4                       xor	ah,ah
21973 57A7           B1                     03  mov	cl,*3
21974 57A9           D3E0                       shl	ax,cl
21975 57AB           89C3                       mov	bx,ax
21976 57AD           81C3                 01DB  add	bx,#_vga_modes
21977                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21978 57B1           8A47         03            mov	al,3[bx]
21979 57B4           8846         FA            mov	-6[bp],al
21980                                           !BCC_EOS
21981                                           ! 2441    while((count-->0) && (xcurs<nbcols))
21982                                           ! 2442     {
21983 57B7           E9         00A6            br 	.194
21984                       000057BA            .195:
21985                                           ! 2443      switch(vga_modes[line].memmodel)
21986                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
21987 57BA           8A46         FB            mov	al,-5[bp]
21988 57BD           30E4                       xor	ah,ah
21989 57BF           B1                     03  mov	cl,*3
21990 57C1           D3E0                       shl	ax,cl
21991 57C3           89C3                       mov	bx,ax
21992 57C5           81C3                 01DB  add	bx,#_vga_modes
21993 57C9           8A47         02            mov	al,2[bx]
21994                                           ! 2444       {
21995 57CC           EB           77            jmp .198
21996                                           ! 2445        case 0x04:
21997                                           ! 2446        case 0x03:
21998                       000057CE            .199:
21999                                           ! 2447          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22000                       000057CE            .19A:
22001                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22002 57CE           8A46         FF            mov	al,-1[bp]
22003 57D1           30E4                       xor	ah,ah
22004 57D3           50                         push	ax
22005                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22006 57D4           FF76         F8            push	-8[bp]
22007                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22008 57D7           8A46         FD            mov	al,-3[bp]
22009 57DA           30E4                       xor	ah,ah
22010 57DC           50                         push	ax
22011                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22012 57DD           8A46         FE            mov	al,-2[bp]
22013 57E0           30E4                       xor	ah,ah
22014 57E2           50                         push	ax
22015                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22016 57E3           8A46         08            mov	al,8[bp]
22017 57E6           30E4                       xor	ah,ah
22018 57E8           50                         push	ax
22019                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22020 57E9           8A46         04            mov	al,4[bp]
22021 57EC           30E4                       xor	ah,ah
22022 57EE           50                         push	ax
22023                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22024 57EF           E8         F86F            call	_write_gfx_char_pl4
22025 57F2           83C4                   0C  add	sp,*$C
22026                                           !BCC_EOS
22027                                           ! 2448          break;
22028 57F5           EB           62            jmp .196
22029                                           !BCC_EOS
22030                                           ! 2449        case 0x02:
22031                                           ! 2450          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22032                       000057F7            .19B:
22033                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22034 57F7           8A46         FA            mov	al,-6[bp]
22035 57FA           30E4                       xor	ah,ah
22036 57FC           50                         push	ax
22037                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22038 57FD           FF76         F8            push	-8[bp]
22039                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22040 5800           8A46         FD            mov	al,-3[bp]
22041 5803           30E4                       xor	ah,ah
22042 5805           50                         push	ax
22043                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22044 5806           8A46         FE            mov	al,-2[bp]
22045 5809           30E4                       xor	ah,ah
22046 580B           50                         push	ax
22047                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22048 580C           8A46         08            mov	al,8[bp]
22049 580F           30E4                       xor	ah,ah
22050 5811           50                         push	ax
22051                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22052 5812           8A46         04            mov	al,4[bp]
22053 5815           30E4                       xor	ah,ah
22054 5817           50                         push	ax
22055                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22056 5818           E8         F9B9            call	_write_gfx_char_cga
22057 581B           83C4                   0C  add	sp,*$C
22058                                           !BCC_EOS
22059                                           ! 2451          break;
22060 581E           EB           39            jmp .196
22061                                           !BCC_EOS
22062                                           ! 2452        case 0x05:
22063                                           ! 2453          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22064                       00005820            .19C:
22065                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22066 5820           FF76         F8            push	-8[bp]
22067                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22068 5823           8A46         FD            mov	al,-3[bp]
22069 5826           30E4                       xor	ah,ah
22070 5828           50                         push	ax
22071                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22072 5829           8A46         FE            mov	al,-2[bp]
22073 582C           30E4                       xor	ah,ah
22074 582E           50                         push	ax
22075                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22076 582F           8A46         08            mov	al,8[bp]
22077 5832           30E4                       xor	ah,ah
22078 5834           50                         push	ax
22079                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22080 5835           8A46         04            mov	al,4[bp]
22081 5838           30E4                       xor	ah,ah
22082 583A           50                         push	ax
22083                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22084 583B           E8         FB99            call	_write_gfx_char_lin
22085 583E           83C4                   0A  add	sp,*$A
22086                                           !BCC_EOS
22087                                           ! 2454          break;
22088 5841           EB           16            jmp .196
22089                                           !BCC_EOS
22090                                           ! 2455       }
22091                                           ! 2456      xcurs++;
22092 5843           EB           14            jmp .196
22093                       00005845            .198:
22094 5845           2C                     02  sub	al,*2
22095 5847           74           AE            je 	.19B
22096 5849           2C                     01  sub	al,*1
22097 584B         0F84         FF7F            beq 	.19A
22098 584F           2C                     01  sub	al,*1
22099 5851         0F84         FF79            beq 	.199
22100 5855           2C                     01  sub	al,*1
22101 5857           74           C7            je 	.19C
22102                       00005859            .196:
22103                       FFFFFFEE            ..FFF9	=	-$12
22104                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22105 5859           8A46         FE            mov	al,-2[bp]
22106 585C           40                         inc	ax
22107 585D           8846         FE            mov	-2[bp],al
22108                                           !BCC_EOS
22109                                           ! 2457     }
22110                                           ! 2458   }
22111                       00005860            .194:
22112                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22113 5860           8B46         0A            mov	ax,$A[bp]
22114 5863           48                         dec	ax
22115 5864           8946         0A            mov	$A[bp],ax
22116                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22117 5867           3D                   FFFF  cmp	ax,*-1
22118 586A           74           0C            je  	.19D
22119                       0000586C            .19E:
22120                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22121 586C           8A46         FE            mov	al,-2[bp]
22122 586F           30E4                       xor	ah,ah
22123 5871           3B46         F8            cmp	ax,-8[bp]
22124 5874         0F82         FF42            blo 	.195
22125                       00005878            .19D:
22126                       00005878            .193:
22127                                           ! 2459 }
22128                       00005878            .192:
22129 5878           89EC                       mov	sp,bp
22130 587A           5D                         pop	bp
22131 587B           C3                         ret
22132                                           ! 2460 #asm
22133                                           !BCC_ASM
22134                       00000008            _biosfn_write_char_only.count	set	8
22135                       00000006            _biosfn_write_char_only.attr	set	6
22136                       00000004            _biosfn_write_char_only.page	set	4
22137                       00000002            _biosfn_write_char_only.car	set	2
22138                       0000587C            biosfn_group_0B:
22139 587C           80FF                   00    cmp bh, #0x00
22140 587F           74           06              je biosfn_set_border_color
22141 5881           80FF                   01    cmp bh, #0x01
22142 5884           74           40              je biosfn_set_palette
22143 5886           C3                           ret
22144                       00005887            biosfn_set_border_color:
22145 5887           50                           push ax
22146 5888           53                           push bx
22147 5889           51                           push cx
22148 588A           52                           push dx
22149 588B           BA                   03DA    mov dx, # 0x3da
22150 588E           EC                           in al, dx
22151 588F           BA                   03C0    mov dx, # 0x3c0
22152 5892           B0                     00    mov al, #0x00
22153 5894           EE                           out dx, al
22154 5895           88D8                         mov al, bl
22155 5897           24                     0F    and al, #0x0f
22156 5899           A8                     08    test al, #0x08
22157 589B           74           02              jz set_low_border
22158 589D           04                     08    add al, #0x08
22159                       0000589F            set_low_border:
22160 589F           EE                           out dx, al
22161 58A0           B1                     01    mov cl, #0x01
22162 58A2           80E3                   10    and bl, #0x10
22163                       000058A5            set_intensity_loop:
22164 58A5           BA                   03C0    mov dx, # 0x3c0
22165 58A8           88C8                         mov al, cl
22166 58AA           EE                           out dx, al
22167 58AB           BA                   03C1    mov dx, # 0x3c1
22168 58AE           EC                           in al, dx
22169 58AF           24                     EF    and al, #0xef
22170 58B1           08D8                         or al, bl
22171 58B3           BA                   03C0    mov dx, # 0x3c0
22172 58B6           EE                           out dx, al
22173 58B7           FEC1                         inc cl
22174 58B9           80F9                   04    cmp cl, #0x04
22175 58BC           75           E7              jne set_intensity_loop
22176 58BE           B0                     20    mov al, #0x20
22177 58C0           EE                           out dx, al
22178 58C1           5A                           pop dx
22179 58C2           59                           pop cx
22180 58C3           5B                           pop bx
22181 58C4           58                           pop ax
22182 58C5           C3                           ret
22183                       000058C6            biosfn_set_palette:
22184 58C6           50                           push ax
22185 58C7           53                           push bx
22186 58C8           51                           push cx
22187 58C9           52                           push dx
22188 58CA           BA                   03DA    mov dx, # 0x3da
22189 58CD           EC                           in al, dx
22190 58CE           B1                     01    mov cl, #0x01
22191 58D0           80E3                   01    and bl, #0x01
22192                       000058D3            set_cga_palette_loop:
22193 58D3           BA                   03C0    mov dx, # 0x3c0
22194 58D6           88C8                         mov al, cl
22195 58D8           EE                           out dx, al
22196 58D9           BA                   03C1    mov dx, # 0x3c1
22197 58DC           EC                           in al, dx
22198 58DD           24                     FE    and al, #0xfe
22199 58DF           08D8                         or al, bl
22200 58E1           BA                   03C0    mov dx, # 0x3c0
22201 58E4           EE                           out dx, al
22202 58E5           FEC1                         inc cl
22203 58E7           80F9                   04    cmp cl, #0x04
22204 58EA           75           E7              jne set_cga_palette_loop
22205 58EC           B0                     20    mov al, #0x20
22206 58EE           EE                           out dx, al
22207 58EF           5A                           pop dx
22208 58F0           59                           pop cx
22209 58F1           5B                           pop bx
22210 58F2           58                           pop ax
22211 58F3           C3                           ret
22212                                           ! 2535 endasm
22213                                           !BCC_ENDASM
22214                                           ! 2536 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22215                                           ! Register BX used in function biosfn_write_char_only
22216                       000058F4            _biosfn_write_pixel:
22217                                           !BCC_EOS
22218                                           !BCC_EOS
22219                                           !BCC_EOS
22220                                           !BCC_EOS
22221                                           ! 2537 {
22222                                           ! 2538  Bit8u mode,line,mask,attr,data;
22223                                           !BCC_EOS
22224                                           ! 2539  Bit16u addr;
22225                                           !BCC_EOS
22226                                           ! 2540  mode=read_byte(0x40,0x49);
22227 58F4           55                         push	bp
22228 58F5           89E5                       mov	bp,sp
22229 58F7           83C4                   F8  add	sp,*-8
22230                                           ! Debug: list int = const $49 (used reg = )
22231 58FA           B8                   0049  mov	ax,*$49
22232 58FD           50                         push	ax
22233                                           ! Debug: list int = const $40 (used reg = )
22234 58FE           B8                   0040  mov	ax,*$40
22235 5901           50                         push	ax
22236                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22237 5902           E8         2446            call	_read_byte
22238 5905           83C4                   04  add	sp,*4
22239                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22240 5908           8846         FF            mov	-1[bp],al
22241                                           !BCC_EOS
22242                                           ! 2541  line=find_vga_entry(mode);
22243                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22244 590B           8A46         FF            mov	al,-1[bp]
22245 590E           30E4                       xor	ah,ah
22246 5910           50                         push	ax
22247                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22248 5911           E8         234B            call	_find_vga_entry
22249 5914           44                         inc	sp
22250 5915           44                         inc	sp
22251                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22252 5916           8846         FE            mov	-2[bp],al
22253                                           !BCC_EOS
22254                                           ! 2542  if(line==0xFF)return;
22255                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22256 5919           8A46         FE            mov	al,-2[bp]
22257 591C           3C                     FF  cmp	al,#$FF
22258 591E           75           04            jne 	.19F
22259                       00005920            .1A0:
22260 5920           89EC                       mov	sp,bp
22261 5922           5D                         pop	bp
22262 5923           C3                         ret
22263                                           !BCC_EOS
22264                                           ! 2543  if(vga_modes[line].class==0x00)return;
22265                       00005924            .19F:
22266                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22267 5924           8A46         FE            mov	al,-2[bp]
22268 5927           30E4                       xor	ah,ah
22269 5929           B1                     03  mov	cl,*3
22270 592B           D3E0                       shl	ax,cl
22271 592D           89C3                       mov	bx,ax
22272 592F           81C3                 01DB  add	bx,#_vga_modes
22273                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22274 5933           8A47         01            mov	al,1[bx]
22275 5936           84C0                       test	al,al
22276 5938           75           04            jne 	.1A1
22277                       0000593A            .1A2:
22278 593A           89EC                       mov	sp,bp
22279 593C           5D                         pop	bp
22280 593D           C3                         ret
22281                                           !BCC_EOS
22282                                           ! 2544  switch(vga_modes[line].memmodel)
22283                       0000593E            .1A1:
22284                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22285 593E           8A46         FE            mov	al,-2[bp]
22286 5941           30E4                       xor	ah,ah
22287 5943           B1                     03  mov	cl,*3
22288 5945           D3E0                       shl	ax,cl
22289 5947           89C3                       mov	bx,ax
22290 5949           81C3                 01DB  add	bx,#_vga_modes
22291 594D           8A47         02            mov	al,2[bx]
22292                                           ! 2545   {
22293 5950           E9         0223            br 	.1A5
22294                                           ! 2546    case 0x04:
22295                                           ! 2547    case 0x03:
22296                       00005953            .1A6:
22297                                           ! 2548      addr = CX/8+DX*read_word(0x40,0x4A);
22298                       00005953            .1A7:
22299                                           ! Debug: list int = const $4A (used reg = )
22300 5953           B8                   004A  mov	ax,*$4A
22301 5956           50                         push	ax
22302                                           ! Debug: list int = const $40 (used reg = )
22303 5957           B8                   0040  mov	ax,*$40
22304 595A           50                         push	ax
22305                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22306 595B           E8         2400            call	_read_word
22307 595E           83C4                   04  add	sp,*4
22308                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22309                                           ! Debug: expression subtree swapping
22310 5961           8B4E         0A            mov	cx,$A[bp]
22311 5964           F7E9                       imul	cx
22312 5966           50                         push	ax
22313                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22314 5967           8B46         08            mov	ax,8[bp]
22315 596A           B1                     03  mov	cl,*3
22316 596C           D3E8                       shr	ax,cl
22317                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22318 596E           0346         F6            add	ax,0+..FFF8[bp]
22319 5971           44                         inc	sp
22320 5972           44                         inc	sp
22321                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22322 5973           8946         F8            mov	-8[bp],ax
22323                                           !BCC_EOS
22324                                           ! 2549      mask = 0x80 >> (CX & 0x07);
22325                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22326 5976           8A46         08            mov	al,8[bp]
22327 5979           24                     07  and	al,*7
22328                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22329 597B           30E4                       xor	ah,ah
22330 597D           89C3                       mov	bx,ax
22331 597F           B8                   0080  mov	ax,#$80
22332 5982           89D9                       mov	cx,bx
22333 5984           D3F8                       sar	ax,cl
22334                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22335 5986           8846         FD            mov	-3[bp],al
22336                                           !BCC_EOS
22337                                           ! 2550      outw(0x3ce, (mask << 8) | 0x08);
22338                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22339 5989           8A46         FD            mov	al,-3[bp]
22340 598C           30E4                       xor	ah,ah
22341 598E           88C4                       mov	ah,al
22342 5990           30C0                       xor	al,al
22343                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22344 5992           0C                     08  or	al,*8
22345                                           ! Debug: list unsigned int = ax+0 (used reg = )
22346 5994           50                         push	ax
22347                                           ! Debug: list int = const $3CE (used reg = )
22348 5995           B8                   03CE  mov	ax,#$3CE
22349 5998           50                         push	ax
22350                                           ! Debug: func () void = outw+0 (used reg = )
22351 5999           E8         242B            call	_outw
22352 599C           83C4                   04  add	sp,*4
22353                                           !BCC_EOS
22354                                           ! 2551      outw(0x3ce, 0x0205);
22355                                           ! Debug: list int = const $205 (used reg = )
22356 599F           B8                   0205  mov	ax,#$205
22357 59A2           50                         push	ax
22358                                           ! Debug: list int = const $3CE (used reg = )
22359 59A3           B8                   03CE  mov	ax,#$3CE
22360 59A6           50                         push	ax
22361                                           ! Debug: func () void = outw+0 (used reg = )
22362 59A7           E8         241D            call	_outw
22363 59AA           83C4                   04  add	sp,*4
22364                                           !BCC_EOS
22365                                           ! 2552      data = read_byte(0xa000,addr);
22366                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22367 59AD           FF76         F8            push	-8[bp]
22368                                           ! Debug: list unsigned int = const $A000 (used reg = )
22369 59B0           B8                   A000  mov	ax,#$A000
22370 59B3           50                         push	ax
22371                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22372 59B4           E8         2394            call	_read_byte
22373 59B7           83C4                   04  add	sp,*4
22374                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22375 59BA           8846         FB            mov	-5[bp],al
22376                                           !BCC_EOS
22377                                           ! 2553      if (AL & 0x80)
22378                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22379 59BD           8A46         06            mov	al,6[bp]
22380 59C0           24                     80  and	al,#$80
22381 59C2           84C0                       test	al,al
22382 59C4           74           0E            je  	.1A8
22383                       000059C6            .1A9:
22384                                           ! 2554       {
22385                                           ! 2555        outw(0x3ce, 0x1803);
22386                                           ! Debug: list int = const $1803 (used reg = )
22387 59C6           B8                   1803  mov	ax,#$1803
22388 59C9           50                         push	ax
22389                                           ! Debug: list int = const $3CE (used reg = )
22390 59CA           B8                   03CE  mov	ax,#$3CE
22391 59CD           50                         push	ax
22392                                           ! Debug: func () void = outw+0 (used reg = )
22393 59CE           E8         23F6            call	_outw
22394 59D1           83C4                   04  add	sp,*4
22395                                           !BCC_EOS
22396                                           ! 2556       }
22397                                           ! 2557      write_byte(0xa000,addr,AL);
22398                       000059D4            .1A8:
22399                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22400 59D4           8A46         06            mov	al,6[bp]
22401 59D7           30E4                       xor	ah,ah
22402 59D9           50                         push	ax
22403                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22404 59DA           FF76         F8            push	-8[bp]
22405                                           ! Debug: list unsigned int = const $A000 (used reg = )
22406 59DD           B8                   A000  mov	ax,#$A000
22407 59E0           50                         push	ax
22408                                           ! Debug: func () void = write_byte+0 (used reg = )
22409 59E1           E8         238D            call	_write_byte
22410 59E4           83C4                   06  add	sp,*6
22411                                           !BCC_EOS
22412                                           ! 2558 #asm
22413                                           !BCC_EOS
22414                                           !BCC_ASM
22415                       0000000C            _biosfn_write_pixel.BH	set	$C
22416                       00000004            .biosfn_write_pixel.BH	set	4
22417                       00000010            _biosfn_write_pixel.CX	set	$10
22418                       00000008            .biosfn_write_pixel.CX	set	8
22419                       00000006            _biosfn_write_pixel.line	set	6
22420                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22421                       0000000E            _biosfn_write_pixel.AL	set	$E
22422                       00000006            .biosfn_write_pixel.AL	set	6
22423                       00000003            _biosfn_write_pixel.data	set	3
22424                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22425                       00000012            _biosfn_write_pixel.DX	set	$12
22426                       0000000A            .biosfn_write_pixel.DX	set	$A
22427                       00000005            _biosfn_write_pixel.mask	set	5
22428                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22429                       00000004            _biosfn_write_pixel.attr	set	4
22430                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22431                       00000007            _biosfn_write_pixel.mode	set	7
22432                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22433                       00000000            _biosfn_write_pixel.addr	set	0
22434                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22435 59E7           BA                   03CE       mov dx, # 0x3ce
22436 59EA           B8                   FF08       mov ax, #0xff08
22437 59ED           EF                              out dx, ax
22438 59EE           B8                   0005       mov ax, #0x0005
22439 59F1           EF                              out dx, ax
22440 59F2           B8                   0003       mov ax, #0x0003
22441 59F5           EF                              out dx, ax
22442                                           ! 2566 endasm
22443                                           !BCC_ENDASM
22444                                           !BCC_EOS
22445                                           ! 2567      break;
22446 59F6           E9         0193            br 	.1A3
22447                                           !BCC_EOS
22448                                           ! 2568    case 0x02:
22449                                           ! 2569      if(vga_modes[line].pixbits==2)
22450                       000059F9            .1AA:
22451                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22452 59F9           8A46         FE            mov	al,-2[bp]
22453 59FC           30E4                       xor	ah,ah
22454 59FE           B1                     03  mov	cl,*3
22455 5A00           D3E0                       shl	ax,cl
22456 5A02           89C3                       mov	bx,ax
22457 5A04           81C3                 01DB  add	bx,#_vga_modes
22458                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22459 5A08           8A47         03            mov	al,3[bx]
22460 5A0B           3C                     02  cmp	al,*2
22461 5A0D           75           1C            jne 	.1AB
22462                       00005A0F            .1AC:
22463                                           ! 2570       {
22464                                           ! 2571        addr=(CX>>2)+(DX>>1)*80;
22465                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22466 5A0F           8B46         0A            mov	ax,$A[bp]
22467 5A12           D1E8                       shr	ax,*1
22468                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22469 5A14           B9                   0050  mov	cx,*$50
22470 5A17           F7E9                       imul	cx
22471 5A19           50                         push	ax
22472                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22473 5A1A           8B46         08            mov	ax,8[bp]
22474 5A1D           D1E8                       shr	ax,*1
22475 5A1F           D1E8                       shr	ax,*1
22476                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22477 5A21           0346         F6            add	ax,0+..FFF8[bp]
22478 5A24           44                         inc	sp
22479 5A25           44                         inc	sp
22480                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22481 5A26           8946         F8            mov	-8[bp],ax
22482                                           !BCC_EOS
22483                                           ! 2572       }
22484                                           ! 2573      else
22485                                           ! 2574       {
22486 5A29           EB           1A            jmp .1AD
22487                       00005A2B            .1AB:
22488                                           ! 2575        addr=(CX>>3)+(DX>>1)*80;
22489                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22490 5A2B           8B46         0A            mov	ax,$A[bp]
22491 5A2E           D1E8                       shr	ax,*1
22492                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22493 5A30           B9                   0050  mov	cx,*$50
22494 5A33           F7E9                       imul	cx
22495 5A35           50                         push	ax
22496                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22497 5A36           8B46         08            mov	ax,8[bp]
22498 5A39           B1                     03  mov	cl,*3
22499 5A3B           D3E8                       shr	ax,cl
22500                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22501 5A3D           0346         F6            add	ax,0+..FFF8[bp]
22502 5A40           44                         inc	sp
22503 5A41           44                         inc	sp
22504                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22505 5A42           8946         F8            mov	-8[bp],ax
22506                                           !BCC_EOS
22507                                           ! 2576       }
22508                                           ! 2577      if (DX & 1) addr += 0x2000;
22509                       00005A45            .1AD:
22510                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22511 5A45           8A46         0A            mov	al,$A[bp]
22512 5A48           24                     01  and	al,*1
22513 5A4A           84C0                       test	al,al
22514 5A4C           74           09            je  	.1AE
22515                       00005A4E            .1AF:
22516                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22517 5A4E           8B46         F8            mov	ax,-8[bp]
22518 5A51           05                   2000  add	ax,#$2000
22519 5A54           8946         F8            mov	-8[bp],ax
22520                                           !BCC_EOS
22521                                           ! 2578      data = read_byte(0xb800,addr);
22522                       00005A57            .1AE:
22523                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22524 5A57           FF76         F8            push	-8[bp]
22525                                           ! Debug: list unsigned int = const $B800 (used reg = )
22526 5A5A           B8                   B800  mov	ax,#$B800
22527 5A5D           50                         push	ax
22528                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22529 5A5E           E8         22EA            call	_read_byte
22530 5A61           83C4                   04  add	sp,*4
22531                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22532 5A64           8846         FB            mov	-5[bp],al
22533                                           !BCC_EOS
22534                                           ! 2579      if(vga_modes[line].pixbits==2)
22535                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22536 5A67           8A46         FE            mov	al,-2[bp]
22537 5A6A           30E4                       xor	ah,ah
22538 5A6C           B1                     03  mov	cl,*3
22539 5A6E           D3E0                       shl	ax,cl
22540 5A70           89C3                       mov	bx,ax
22541 5A72           81C3                 01DB  add	bx,#_vga_modes
22542                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22543 5A76           8A47         03            mov	al,3[bx]
22544 5A79           3C                     02  cmp	al,*2
22545 5A7B           75           46            jne 	.1B0
22546                       00005A7D            .1B1:
22547                                           ! 2580       {
22548                                           ! 2581        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22549                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22550 5A7D           8A46         08            mov	al,8[bp]
22551 5A80           24                     03  and	al,*3
22552                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22553 5A82           50                         push	ax
22554 5A83           B8                   0003  mov	ax,*3
22555 5A86           2A46         F6            sub	al,0+..FFF8[bp]
22556 5A89           80DC                   00  sbb	ah,*0
22557 5A8C           44                         inc	sp
22558 5A8D           44                         inc	sp
22559                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22560 5A8E           D1E0                       shl	ax,*1
22561 5A90           50                         push	ax
22562                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22563 5A91           8A46         06            mov	al,6[bp]
22564 5A94           24                     03  and	al,*3
22565                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22566 5A96           30E4                       xor	ah,ah
22567 5A98           8B4E         F6            mov	cx,0+..FFF8[bp]
22568 5A9B           D3E0                       shl	ax,cl
22569 5A9D           44                         inc	sp
22570 5A9E           44                         inc	sp
22571                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22572 5A9F           8846         FC            mov	-4[bp],al
22573                                           !BCC_EOS
22574                                           ! 2582        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22575                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22576 5AA2           8A46         08            mov	al,8[bp]
22577 5AA5           24                     03  and	al,*3
22578                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22579 5AA7           50                         push	ax
22580 5AA8           B8                   0003  mov	ax,*3
22581 5AAB           2A46         F6            sub	al,0+..FFF8[bp]
22582 5AAE           80DC                   00  sbb	ah,*0
22583 5AB1           44                         inc	sp
22584 5AB2           44                         inc	sp
22585                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22586 5AB3           D1E0                       shl	ax,*1
22587                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22588 5AB5           89C3                       mov	bx,ax
22589 5AB7           B8                   0003  mov	ax,*3
22590 5ABA           89D9                       mov	cx,bx
22591 5ABC           D3E0                       shl	ax,cl
22592                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22593 5ABE           8846         FD            mov	-3[bp],al
22594                                           !BCC_EOS
22595                                           ! 2583       }
22596                                           ! 2584      else
22597                                           ! 2585       {
22598 5AC1           EB           40            jmp .1B2
22599                       00005AC3            .1B0:
22600                                           ! 2586        attr = (AL & 0x01) << (7 - (CX & 0x07));
22601                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22602 5AC3           8A46         08            mov	al,8[bp]
22603 5AC6           24                     07  and	al,*7
22604                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22605 5AC8           50                         push	ax
22606 5AC9           B8                   0007  mov	ax,*7
22607 5ACC           2A46         F6            sub	al,0+..FFF8[bp]
22608 5ACF           80DC                   00  sbb	ah,*0
22609 5AD2           44                         inc	sp
22610 5AD3           44                         inc	sp
22611 5AD4           50                         push	ax
22612                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22613 5AD5           8A46         06            mov	al,6[bp]
22614 5AD8           24                     01  and	al,*1
22615                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22616 5ADA           30E4                       xor	ah,ah
22617 5ADC           8B4E         F6            mov	cx,0+..FFF8[bp]
22618 5ADF           D3E0                       shl	ax,cl
22619 5AE1           44                         inc	sp
22620 5AE2           44                         inc	sp
22621                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22622 5AE3           8846         FC            mov	-4[bp],al
22623                                           !BCC_EOS
22624                                           ! 2587        mask = 0x01 << (7 - (CX & 0x07));
22625                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22626 5AE6           8A46         08            mov	al,8[bp]
22627 5AE9           24                     07  and	al,*7
22628                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22629 5AEB           50                         push	ax
22630 5AEC           B8                   0007  mov	ax,*7
22631 5AEF           2A46         F6            sub	al,0+..FFF8[bp]
22632 5AF2           80DC                   00  sbb	ah,*0
22633 5AF5           44                         inc	sp
22634 5AF6           44                         inc	sp
22635                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22636 5AF7           89C3                       mov	bx,ax
22637 5AF9           B8                   0001  mov	ax,*1
22638 5AFC           89D9                       mov	cx,bx
22639 5AFE           D3E0                       shl	ax,cl
22640                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22641 5B00           8846         FD            mov	-3[bp],al
22642                                           !BCC_EOS
22643                                           ! 2588       }
22644                                           ! 2589      if (AL & 0x80)
22645                       00005B03            .1B2:
22646                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22647 5B03           8A46         06            mov	al,6[bp]
22648 5B06           24                     80  and	al,#$80
22649 5B08           84C0                       test	al,al
22650 5B0A           74           0B            je  	.1B3
22651                       00005B0C            .1B4:
22652                                           ! 2590       {
22653                                           ! 2591        data ^= attr;
22654                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22655 5B0C           8A46         FB            mov	al,-5[bp]
22656 5B0F           3246         FC            xor	al,-4[bp]
22657 5B12           8846         FB            mov	-5[bp],al
22658                                           !BCC_EOS
22659                                           ! 2592       }
22660                                           ! 2593      else
22661                                           ! 2594       {
22662 5B15           EB           16            jmp .1B5
22663                       00005B17            .1B3:
22664                                           ! 2595        data &= ~mask;
22665                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22666 5B17           8A46         FD            mov	al,-3[bp]
22667 5B1A           30E4                       xor	ah,ah
22668 5B1C           F7D0                       not	ax
22669                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22670 5B1E           2246         FB            and	al,-5[bp]
22671 5B21           8846         FB            mov	-5[bp],al
22672                                           !BCC_EOS
22673                                           ! 2596        data |= attr;
22674                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22675 5B24           8A46         FB            mov	al,-5[bp]
22676 5B27           0A46         FC            or	al,-4[bp]
22677 5B2A           8846         FB            mov	-5[bp],al
22678                                           !BCC_EOS
22679                                           ! 2597       }
22680                                           ! 2598      write_byte(0xb800,addr,
22681                       00005B2D            .1B5:
22682                                           ! 2598 data);
22683                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22684 5B2D           8A46         FB            mov	al,-5[bp]
22685 5B30           30E4                       xor	ah,ah
22686 5B32           50                         push	ax
22687                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22688 5B33           FF76         F8            push	-8[bp]
22689                                           ! Debug: list unsigned int = const $B800 (used reg = )
22690 5B36           B8                   B800  mov	ax,#$B800
22691 5B39           50                         push	ax
22692                                           ! Debug: func () void = write_byte+0 (used reg = )
22693 5B3A           E8         2234            call	_write_byte
22694 5B3D           83C4                   06  add	sp,*6
22695                                           !BCC_EOS
22696                                           ! 2599      break;
22697 5B40           EB           4A            jmp .1A3
22698                                           !BCC_EOS
22699                                           ! 2600    case 0x05:
22700                                           ! 2601      addr=CX+DX*(read_word(0x40,0x4A)*8);
22701                       00005B42            .1B6:
22702                                           ! Debug: list int = const $4A (used reg = )
22703 5B42           B8                   004A  mov	ax,*$4A
22704 5B45           50                         push	ax
22705                                           ! Debug: list int = const $40 (used reg = )
22706 5B46           B8                   0040  mov	ax,*$40
22707 5B49           50                         push	ax
22708                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22709 5B4A           E8         2211            call	_read_word
22710 5B4D           83C4                   04  add	sp,*4
22711                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22712 5B50           B1                     03  mov	cl,*3
22713 5B52           D3E0                       shl	ax,cl
22714                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22715                                           ! Debug: expression subtree swapping
22716 5B54           8B4E         0A            mov	cx,$A[bp]
22717 5B57           F7E9                       imul	cx
22718                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22719                                           ! Debug: expression subtree swapping
22720 5B59           0346         08            add	ax,8[bp]
22721                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22722 5B5C           8946         F8            mov	-8[bp],ax
22723                                           !BCC_EOS
22724                                           ! 2602      write_byte(0xa000,addr,AL);
22725                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22726 5B5F           8A46         06            mov	al,6[bp]
22727 5B62           30E4                       xor	ah,ah
22728 5B64           50                         push	ax
22729                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22730 5B65           FF76         F8            push	-8[bp]
22731                                           ! Debug: list unsigned int = const $A000 (used reg = )
22732 5B68           B8                   A000  mov	ax,#$A000
22733 5B6B           50                         push	ax
22734                                           ! Debug: func () void = write_byte+0 (used reg = )
22735 5B6C           E8         2202            call	_write_byte
22736 5B6F           83C4                   06  add	sp,*6
22737                                           !BCC_EOS
22738                                           ! 2603      break;
22739 5B72           EB           18            jmp .1A3
22740                                           !BCC_EOS
22741                                           ! 2604   }
22742                                           ! 2605 }
22743 5B74           EB           16            jmp .1A3
22744                       00005B76            .1A5:
22745 5B76           2C                     02  sub	al,*2
22746 5B78         0F84         FE7D            beq 	.1AA
22747 5B7C           2C                     01  sub	al,*1
22748 5B7E         0F84         FDD1            beq 	.1A7
22749 5B82           2C                     01  sub	al,*1
22750 5B84         0F84         FDCB            beq 	.1A6
22751 5B88           2C                     01  sub	al,*1
22752 5B8A           74           B6            je 	.1B6
22753                       00005B8C            .1A3:
22754                       FFFFFFF6            ..FFF8	=	-$A
22755 5B8C           89EC                       mov	sp,bp
22756 5B8E           5D                         pop	bp
22757 5B8F           C3                         ret
22758                                           ! 2606 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
22759                                           ! Register BX used in function biosfn_write_pixel
22760                       00005B90            _biosfn_read_pixel:
22761                                           !BCC_EOS
22762                                           !BCC_EOS
22763                                           !BCC_EOS
22764                                           !BCC_EOS
22765                                           ! 2607 {
22766                                           ! 2608  Bit8u mode,line,mask,attr,data,i;
22767                                           !BCC_EOS
22768                                           ! 2609  Bit16u addr;
22769                                           !BCC_EOS
22770                                           ! 2610  Bit16u ss=get_SS();
22771 5B90           55                         push	bp
22772 5B91           89E5                       mov	bp,sp
22773 5B93           83C4                   F6  add	sp,*-$A
22774                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22775 5B96           E8         223E            call	_get_SS
22776                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22777 5B99           8946         F6            mov	-$A[bp],ax
22778                                           !BCC_EOS
22779                                           ! 2611  mode=read_byte(0x40,0x49);
22780                                           ! Debug: list int = const $49 (used reg = )
22781 5B9C           B8                   0049  mov	ax,*$49
22782 5B9F           50                         push	ax
22783                                           ! Debug: list int = const $40 (used reg = )
22784 5BA0           B8                   0040  mov	ax,*$40
22785 5BA3           50                         push	ax
22786                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22787 5BA4           E8         21A4            call	_read_byte
22788 5BA7           83C4                   04  add	sp,*4
22789                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22790 5BAA           8846         FF            mov	-1[bp],al
22791                                           !BCC_EOS
22792                                           ! 2612  line=find_vga_entry(mode);
22793                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22794 5BAD           8A46         FF            mov	al,-1[bp]
22795 5BB0           30E4                       xor	ah,ah
22796 5BB2           50                         push	ax
22797                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22798 5BB3           E8         20A9            call	_find_vga_entry
22799 5BB6           44                         inc	sp
22800 5BB7           44                         inc	sp
22801                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22802 5BB8           8846         FE            mov	-2[bp],al
22803                                           !BCC_EOS
22804                                           ! 2613  if(line==0xFF)return;
22805                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22806 5BBB           8A46         FE            mov	al,-2[bp]
22807 5BBE           3C                     FF  cmp	al,#$FF
22808 5BC0           75           04            jne 	.1B7
22809                       00005BC2            .1B8:
22810 5BC2           89EC                       mov	sp,bp
22811 5BC4           5D                         pop	bp
22812 5BC5           C3                         ret
22813                                           !BCC_EOS
22814                                           ! 2614  if(vga_modes[line].class==0x00)return;
22815                       00005BC6            .1B7:
22816                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
22817 5BC6           8A46         FE            mov	al,-2[bp]
22818 5BC9           30E4                       xor	ah,ah
22819 5BCB           B1                     03  mov	cl,*3
22820 5BCD           D3E0                       shl	ax,cl
22821 5BCF           89C3                       mov	bx,ax
22822 5BD1           81C3                 01DB  add	bx,#_vga_modes
22823                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22824 5BD5           8A47         01            mov	al,1[bx]
22825 5BD8           84C0                       test	al,al
22826 5BDA           75           04            jne 	.1B9
22827                       00005BDC            .1BA:
22828 5BDC           89EC                       mov	sp,bp
22829 5BDE           5D                         pop	bp
22830 5BDF           C3                         ret
22831                                           !BCC_EOS
22832                                           ! 2615  switch(vga_modes[line].memmodel)
22833                       00005BE0            .1B9:
22834                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
22835 5BE0           8A46         FE            mov	al,-2[bp]
22836 5BE3           30E4                       xor	ah,ah
22837 5BE5           B1                     03  mov	cl,*3
22838 5BE7           D3E0                       shl	ax,cl
22839 5BE9           89C3                       mov	bx,ax
22840 5BEB           81C3                 01DB  add	bx,#_vga_modes
22841 5BEF           8A47         02            mov	al,2[bx]
22842                                           ! 2616   {
22843 5BF2           E9         0167            br 	.1BD
22844                                           ! 2617    case 0x04:
22845                                           ! 2618    case 0x03:
22846                       00005BF5            .1BE:
22847                                           ! 2619      addr = CX/8+DX*read_word(0x40,0x4A);
22848                       00005BF5            .1BF:
22849                                           ! Debug: list int = const $4A (used reg = )
22850 5BF5           B8                   004A  mov	ax,*$4A
22851 5BF8           50                         push	ax
22852                                           ! Debug: list int = const $40 (used reg = )
22853 5BF9           B8                   0040  mov	ax,*$40
22854 5BFC           50                         push	ax
22855                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22856 5BFD           E8         215E            call	_read_word
22857 5C00           83C4                   04  add	sp,*4
22858                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22859                                           ! Debug: expression subtree swapping
22860 5C03           8B4E         08            mov	cx,8[bp]
22861 5C06           F7E9                       imul	cx
22862 5C08           50                         push	ax
22863                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22864 5C09           8B46         06            mov	ax,6[bp]
22865 5C0C           B1                     03  mov	cl,*3
22866 5C0E           D3E8                       shr	ax,cl
22867                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22868 5C10           0346         F4            add	ax,0+..FFF7[bp]
22869 5C13           44                         inc	sp
22870 5C14           44                         inc	sp
22871                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22872 5C15           8946         F8            mov	-8[bp],ax
22873                                           !BCC_EOS
22874                                           ! 2620      mask = 0x80 >> (CX & 0x07);
22875                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22876 5C18           8A46         06            mov	al,6[bp]
22877 5C1B           24                     07  and	al,*7
22878                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22879 5C1D           30E4                       xor	ah,ah
22880 5C1F           89C3                       mov	bx,ax
22881 5C21           B8                   0080  mov	ax,#$80
22882 5C24           89D9                       mov	cx,bx
22883 5C26           D3F8                       sar	ax,cl
22884                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
22885 5C28           8846         FD            mov	-3[bp],al
22886                                           !BCC_EOS
22887                                           ! 2621      attr = 0x00;
22888                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
22889 5C2B           30C0                       xor	al,al
22890 5C2D           8846         FC            mov	-4[bp],al
22891                                           !BCC_EOS
22892                                           ! 2622      for(i=0;i<4;i++)
22893                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
22894 5C30           30C0                       xor	al,al
22895 5C32           8846         FA            mov	-6[bp],al
22896                                           !BCC_EOS
22897                                           !BCC_EOS
22898                                           ! 2623       {
22899 5C35           EB           4B            jmp .1C2
22900                       00005C37            .1C3:
22901                                           ! 2624        outw(0x3ce, (i << 8) | 0x04);
22902                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
22903 5C37           8A46         FA            mov	al,-6[bp]
22904 5C3A           30E4                       xor	ah,ah
22905 5C3C           88C4                       mov	ah,al
22906 5C3E           30C0                       xor	al,al
22907                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
22908 5C40           0C                     04  or	al,*4
22909                                           ! Debug: list unsigned int = ax+0 (used reg = )
22910 5C42           50                         push	ax
22911                                           ! Debug: list int = const $3CE (used reg = )
22912 5C43           B8                   03CE  mov	ax,#$3CE
22913 5C46           50                         push	ax
22914                                           ! Debug: func () void = outw+0 (used reg = )
22915 5C47           E8         217D            call	_outw
22916 5C4A           83C4                   04  add	sp,*4
22917                                           !BCC_EOS
22918                                           ! 2625        data = read_byte(0xa000,addr) & mask;
22919                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22920 5C4D           FF76         F8            push	-8[bp]
22921                                           ! Debug: list unsigned int = const $A000 (used reg = )
22922 5C50           B8                   A000  mov	ax,#$A000
22923 5C53           50                         push	ax
22924                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22925 5C54           E8         20F4            call	_read_byte
22926 5C57           83C4                   04  add	sp,*4
22927                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
22928 5C5A           2246         FD            and	al,-3[bp]
22929                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
22930 5C5D           8846         FB            mov	-5[bp],al
22931                                           !BCC_EOS
22932                                           ! 2626        if (data > 0) attr |= (0x01 << i);
22933                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
22934 5C60           8A46         FB            mov	al,-5[bp]
22935 5C63           84C0                       test	al,al
22936 5C65           74           14            je  	.1C4
22937                       00005C67            .1C5:
22938                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
22939 5C67           8A46         FA            mov	al,-6[bp]
22940 5C6A           30E4                       xor	ah,ah
22941 5C6C           89C3                       mov	bx,ax
22942 5C6E           B8                   0001  mov	ax,*1
22943 5C71           89D9                       mov	cx,bx
22944 5C73           D3E0                       shl	ax,cl
22945                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
22946 5C75           0A46         FC            or	al,-4[bp]
22947 5C78           8846         FC            mov	-4[bp],al
22948                                           !BCC_EOS
22949                                           ! 2627       }
22950                       00005C7B            .1C4:
22951                                           ! 2628      break;
22952                       00005C7B            .1C1:
22953                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
22954 5C7B           8A46         FA            mov	al,-6[bp]
22955 5C7E           40                         inc	ax
22956 5C7F           8846         FA            mov	-6[bp],al
22957                       00005C82            .1C2:
22958                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
22959 5C82           8A46         FA            mov	al,-6[bp]
22960 5C85           3C                     04  cmp	al,*4
22961 5C87           72           AE            jb 	.1C3
22962                       00005C89            .1C6:
22963                       00005C89            .1C0:
22964 5C89           E9         00E8            br 	.1BB
22965                                           !BCC_EOS
22966                                           ! 2629    case 0x02:
22967                                           ! 2630      addr=(CX>>2)+(DX>>1)*80;
22968                       00005C8C            .1C7:
22969                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22970 5C8C           8B46         08            mov	ax,8[bp]
22971 5C8F           D1E8                       shr	ax,*1
22972                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22973 5C91           B9                   0050  mov	cx,*$50
22974 5C94           F7E9                       imul	cx
22975 5C96           50                         push	ax
22976                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
22977 5C97           8B46         06            mov	ax,6[bp]
22978 5C9A           D1E8                       shr	ax,*1
22979 5C9C           D1E8                       shr	ax,*1
22980                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22981 5C9E           0346         F4            add	ax,0+..FFF7[bp]
22982 5CA1           44                         inc	sp
22983 5CA2           44                         inc	sp
22984                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22985 5CA3           8946         F8            mov	-8[bp],ax
22986                                           !BCC_EOS
22987                                           ! 2631      if (DX & 1) addr += 0x2000;
22988                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
22989 5CA6           8A46         08            mov	al,8[bp]
22990 5CA9           24                     01  and	al,*1
22991 5CAB           84C0                       test	al,al
22992 5CAD           74           09            je  	.1C8
22993                       00005CAF            .1C9:
22994                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
22995 5CAF           8B46         F8            mov	ax,-8[bp]
22996 5CB2           05                   2000  add	ax,#$2000
22997 5CB5           8946         F8            mov	-8[bp],ax
22998                                           !BCC_EOS
22999                                           ! 2632      data = read_byte(0xb800,addr);
23000                       00005CB8            .1C8:
23001                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23002 5CB8           FF76         F8            push	-8[bp]
23003                                           ! Debug: list unsigned int = const $B800 (used reg = )
23004 5CBB           B8                   B800  mov	ax,#$B800
23005 5CBE           50                         push	ax
23006                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23007 5CBF           E8         2089            call	_read_byte
23008 5CC2           83C4                   04  add	sp,*4
23009                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23010 5CC5           8846         FB            mov	-5[bp],al
23011                                           !BCC_EOS
23012                                           ! 2633      if(vga_modes[line].pixbits==2)
23013                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
23014 5CC8           8A46         FE            mov	al,-2[bp]
23015 5CCB           30E4                       xor	ah,ah
23016 5CCD           B1                     03  mov	cl,*3
23017 5CCF           D3E0                       shl	ax,cl
23018 5CD1           89C3                       mov	bx,ax
23019 5CD3           81C3                 01DB  add	bx,#_vga_modes
23020                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23021 5CD7           8A47         03            mov	al,3[bx]
23022 5CDA           3C                     02  cmp	al,*2
23023 5CDC           75           25            jne 	.1CA
23024                       00005CDE            .1CB:
23025                                           ! 2634       {
23026                                           ! 2635        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23027                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23028 5CDE           8A46         06            mov	al,6[bp]
23029 5CE1           24                     03  and	al,*3
23030                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23031 5CE3           50                         push	ax
23032 5CE4           B8                   0003  mov	ax,*3
23033 5CE7           2A46         F4            sub	al,0+..FFF7[bp]
23034 5CEA           80DC                   00  sbb	ah,*0
23035 5CED           44                         inc	sp
23036 5CEE           44                         inc	sp
23037                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23038 5CEF           D1E0                       shl	ax,*1
23039                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23040 5CF1           89C3                       mov	bx,ax
23041 5CF3           8A46         FB            mov	al,-5[bp]
23042 5CF6           30E4                       xor	ah,ah
23043 5CF8           89D9                       mov	cx,bx
23044 5CFA           D3E8                       shr	ax,cl
23045                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23046 5CFC           24                     03  and	al,*3
23047                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23048 5CFE           8846         FC            mov	-4[bp],al
23049                                           !BCC_EOS
23050                                           ! 2636       }
23051                                           ! 2637      else
23052                                           ! 2638       {
23053 5D01           EB           21            jmp .1CC
23054                       00005D03            .1CA:
23055                                           ! 2639        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23056                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23057 5D03           8A46         06            mov	al,6[bp]
23058 5D06           24                     07  and	al,*7
23059                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23060 5D08           50                         push	ax
23061 5D09           B8                   0007  mov	ax,*7
23062 5D0C           2A46         F4            sub	al,0+..FFF7[bp]
23063 5D0F           80DC                   00  sbb	ah,*0
23064 5D12           44                         inc	sp
23065 5D13           44                         inc	sp
23066                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23067 5D14           89C3                       mov	bx,ax
23068 5D16           8A46         FB            mov	al,-5[bp]
23069 5D19           30E4                       xor	ah,ah
23070 5D1B           89D9                       mov	cx,bx
23071 5D1D           D3E8                       shr	ax,cl
23072                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23073 5D1F           24                     01  and	al,*1
23074                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23075 5D21           8846         FC            mov	-4[bp],al
23076                                           !BCC_EOS
23077                                           ! 2640       }
23078                                           ! 2641      break;
23079                       00005D24            .1CC:
23080 5D24           EB           4E            jmp .1BB
23081                                           !BCC_EOS
23082                                           ! 2642    case 0x05:
23083                                           ! 2643      addr=CX+DX*(read_word(0x40,0x4A)*8);
23084                       00005D26            .1CD:
23085                                           ! Debug: list int = const $4A (used reg = )
23086 5D26           B8                   004A  mov	ax,*$4A
23087 5D29           50                         push	ax
23088                                           ! Debug: list int = const $40 (used reg = )
23089 5D2A           B8                   0040  mov	ax,*$40
23090 5D2D           50                         push	ax
23091                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23092 5D2E           E8         202D            call	_read_word
23093 5D31           83C4                   04  add	sp,*4
23094                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23095 5D34           B1                     03  mov	cl,*3
23096 5D36           D3E0                       shl	ax,cl
23097                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23098                                           ! Debug: expression subtree swapping
23099 5D38           8B4E         08            mov	cx,8[bp]
23100 5D3B           F7E9                       imul	cx
23101                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23102                                           ! Debug: expression subtree swapping
23103 5D3D           0346         06            add	ax,6[bp]
23104                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23105 5D40           8946         F8            mov	-8[bp],ax
23106                                           !BCC_EOS
23107                                           ! 2644      attr=read_byte(0xa000,addr);
23108                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23109 5D43           FF76         F8            push	-8[bp]
23110                                           ! Debug: list unsigned int = const $A000 (used reg = )
23111 5D46           B8                   A000  mov	ax,#$A000
23112 5D49           50                         push	ax
23113                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23114 5D4A           E8         1FFE            call	_read_byte
23115 5D4D           83C4                   04  add	sp,*4
23116                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23117 5D50           8846         FC            mov	-4[bp],al
23118                                           !BCC_EOS
23119                                           ! 2645      break;
23120 5D53           EB           1F            jmp .1BB
23121                                           !BCC_EOS
23122                                           ! 2646    default:
23123                                           ! 2647      attr = 0;
23124                       00005D55            .1CE:
23125                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23126 5D55           30C0                       xor	al,al
23127 5D57           8846         FC            mov	-4[bp],al
23128                                           !BCC_EOS
23129                                           ! 2648   }
23130                                           ! 2649  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23131 5D5A           EB           18            jmp .1BB
23132                       00005D5C            .1BD:
23133 5D5C           2C                     02  sub	al,*2
23134 5D5E         0F84         FF2A            beq 	.1C7
23135 5D62           2C                     01  sub	al,*1
23136 5D64         0F84         FE8D            beq 	.1BF
23137 5D68           2C                     01  sub	al,*1
23138 5D6A         0F84         FE87            beq 	.1BE
23139 5D6E           2C                     01  sub	al,*1
23140 5D70           74           B4            je 	.1CD
23141 5D72           EB           E1            jmp	.1CE
23142                       00005D74            .1BB:
23143                       FFFFFFF4            ..FFF7	=	-$C
23144                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23145 5D74           FF76         0A            push	$A[bp]
23146                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23147 5D77           FF76         F6            push	-$A[bp]
23148                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23149 5D7A           E8         1FE1            call	_read_word
23150 5D7D           83C4                   04  add	sp,*4
23151                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23152 5D80           30C0                       xor	al,al
23153                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23154 5D82           0A46         FC            or	al,-4[bp]
23155                                           ! Debug: list unsigned int = ax+0 (used reg = )
23156 5D85           50                         push	ax
23157                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23158 5D86           FF76         0A            push	$A[bp]
23159                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23160 5D89           FF76         F6            push	-$A[bp]
23161                                           ! Debug: func () void = write_word+0 (used reg = )
23162 5D8C           E8         1FFA            call	_write_word
23163 5D8F           83C4                   06  add	sp,*6
23164                                           !BCC_EOS
23165                                           ! 2650 }
23166 5D92           89EC                       mov	sp,bp
23167 5D94           5D                         pop	bp
23168 5D95           C3                         ret
23169                                           ! 2651 static void biosfn_write_teletype (car, page, attr, flag)
23170                                           ! Register BX used in function biosfn_read_pixel
23171                                           ! 2652 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23172                       00005D96            _biosfn_write_teletype:
23173                                           !BCC_EOS
23174                                           !BCC_EOS
23175                                           !BCC_EOS
23176                                           !BCC_EOS
23177                                           ! 2653 {
23178                                           ! 2654  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23179                                           !BCC_EOS
23180                                           ! 2655  Bit16u nbcols,nbrows,address;
23181                                           !BCC_EOS
23182                                           ! 2656  Bit16u cursor,dummy;
23183                                           !BCC_EOS
23184                                           ! 2657  if(page==0xff)
23185 5D96           55                         push	bp
23186 5D97           89E5                       mov	bp,sp
23187 5D99           83C4                   F0  add	sp,*-$10
23188                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23189 5D9C           8A46         06            mov	al,6[bp]
23190 5D9F           3C                     FF  cmp	al,#$FF
23191 5DA1           75           11            jne 	.1CF
23192                       00005DA3            .1D0:
23193                                           ! 2658   page=read_byte(0x40,0x62);
23194                                           ! Debug: list int = const $62 (used reg = )
23195 5DA3           B8                   0062  mov	ax,*$62
23196 5DA6           50                         push	ax
23197                                           ! Debug: list int = const $40 (used reg = )
23198 5DA7           B8                   0040  mov	ax,*$40
23199 5DAA           50                         push	ax
23200                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23201 5DAB           E8         1F9D            call	_read_byte
23202 5DAE           83C4                   04  add	sp,*4
23203                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23204 5DB1           8846         06            mov	6[bp],al
23205                                           !BCC_EOS
23206                                           ! 2659  mode=read_byte(0x40,0x49);
23207                       00005DB4            .1CF:
23208                                           ! Debug: list int = const $49 (used reg = )
23209 5DB4           B8                   0049  mov	ax,*$49
23210 5DB7           50                         push	ax
23211                                           ! Debug: list int = const $40 (used reg = )
23212 5DB8           B8                   0040  mov	ax,*$40
23213 5DBB           50                         push	ax
23214                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23215 5DBC           E8         1F8C            call	_read_byte
23216 5DBF           83C4                   04  add	sp,*4
23217                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23218 5DC2           8846         FC            mov	-4[bp],al
23219                                           !BCC_EOS
23220                                           ! 2660  line=find_vga_entry(mode);
23221                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23222 5DC5           8A46         FC            mov	al,-4[bp]
23223 5DC8           30E4                       xor	ah,ah
23224 5DCA           50                         push	ax
23225                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23226 5DCB           E8         1E91            call	_find_vga_entry
23227 5DCE           44                         inc	sp
23228 5DCF           44                         inc	sp
23229                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23230 5DD0           8846         FB            mov	-5[bp],al
23231                                           !BCC_EOS
23232                                           ! 2661  if(line==0xFF)return;
23233                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23234 5DD3           8A46         FB            mov	al,-5[bp]
23235 5DD6           3C                     FF  cmp	al,#$FF
23236 5DD8           75           04            jne 	.1D1
23237                       00005DDA            .1D2:
23238 5DDA           89EC                       mov	sp,bp
23239 5DDC           5D                         pop	bp
23240 5DDD           C3                         ret
23241                                           !BCC_EOS
23242                                           ! 2662  biosfn_get_cursor_pos(page,&dummy,&cursor);
23243                       00005DDE            .1D1:
23244                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23245 5DDE           8D5E         F2            lea	bx,-$E[bp]
23246 5DE1           53                         push	bx
23247                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23248 5DE2           8D5E         F0            lea	bx,-$10[bp]
23249 5DE5           53                         push	bx
23250                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23251 5DE6           8A46         06            mov	al,6[bp]
23252 5DE9           30E4                       xor	ah,ah
23253 5DEB           50                         push	ax
23254                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23255 5DEC           E8         E585            call	_biosfn_get_cursor_pos
23256 5DEF           83C4                   06  add	sp,*6
23257                                           !BCC_EOS
23258                                           ! 2663  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23259                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23260 5DF2           8A46         F2            mov	al,-$E[bp]
23261                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23262 5DF5           8846         FE            mov	-2[bp],al
23263                                           !BCC_EOS
23264                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23265 5DF8           8B46         F2            mov	ax,-$E[bp]
23266 5DFB           30C0                       xor	al,al
23267                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23268 5DFD           88E0                       mov	al,ah
23269 5DFF           30E4                       xor	ah,ah
23270                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23271 5E01           8846         FD            mov	-3[bp],al
23272                                           !BCC_EOS
23273                                           ! 2664  nbrows=read_byte(0x40,0x84)+1;
23274                                           ! Debug: list int = const $84 (used reg = )
23275 5E04           B8                   0084  mov	ax,#$84
23276 5E07           50                         push	ax
23277                                           ! Debug: list int = const $40 (used reg = )
23278 5E08           B8                   0040  mov	ax,*$40
23279 5E0B           50                         push	ax
23280                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23281 5E0C           E8         1F3C            call	_read_byte
23282 5E0F           83C4                   04  add	sp,*4
23283                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23284 5E12           30E4                       xor	ah,ah
23285                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23286 5E14           40                         inc	ax
23287 5E15           8946         F6            mov	-$A[bp],ax
23288                                           !BCC_EOS
23289                                           ! 2665  nbcols=read_word(0x40,0x4A);
23290                                           ! Debug: list int = const $4A (used reg = )
23291 5E18           B8                   004A  mov	ax,*$4A
23292 5E1B           50                         push	ax
23293                                           ! Debug: list int = const $40 (used reg = )
23294 5E1C           B8                   0040  mov	ax,*$40
23295 5E1F           50                         push	ax
23296                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23297 5E20           E8         1F3B            call	_read_word
23298 5E23           83C4                   04  add	sp,*4
23299                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23300 5E26           8946         F8            mov	-8[bp],ax
23301                                           !BCC_EOS
23302                                           ! 2666  switch(car)
23303 5E29           8A46         04            mov	al,4[bp]
23304                                           ! 2667   {
23305 5E2C           E9         01DE            br 	.1D5
23306                                           ! 2668    case 7:
23307                                           ! 2669     break;
23308                       00005E2F            .1D6:
23309 5E2F           E9         01FC            br 	.1D3
23310                                           !BCC_EOS
23311                                           ! 2670    case 8:
23312                                           ! 2671     if(xcurs>0)xcurs--;
23313                       00005E32            .1D7:
23314                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23315 5E32           8A46         FE            mov	al,-2[bp]
23316 5E35           84C0                       test	al,al
23317 5E37           74           07            je  	.1D8
23318                       00005E39            .1D9:
23319                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23320 5E39           8A46         FE            mov	al,-2[bp]
23321 5E3C           48                         dec	ax
23322 5E3D           8846         FE            mov	-2[bp],al
23323                                           !BCC_EOS
23324                                           ! 2672     break;
23325                       00005E40            .1D8:
23326 5E40           E9         01EB            br 	.1D3
23327                                           !BCC_EOS
23328                                           ! 2673    case '\r':
23329                                           ! 2674     xcurs=0;
23330                       00005E43            .1DA:
23331                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23332 5E43           30C0                       xor	al,al
23333 5E45           8846         FE            mov	-2[bp],al
23334                                           !BCC_EOS
23335                                           ! 2675     break;
23336 5E48           E9         01E3            br 	.1D3
23337                                           !BCC_EOS
23338                                           ! 2676    case '\n':
23339                                           ! 2677     ycurs++;
23340                       00005E4B            .1DB:
23341                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23342 5E4B           8A46         FD            mov	al,-3[bp]
23343 5E4E           40                         inc	ax
23344 5E4F           8846         FD            mov	-3[bp],al
23345                                           !BCC_EOS
23346                                           ! 2678     break;
23347 5E52           E9         01D9            br 	.1D3
23348                                           !BCC_EOS
23349                                           ! 2679    case '\t':
23350                                           ! 2680     do
23351                       00005E55            .1DC:
23352                                           ! 2681      {
23353                       00005E55            .1DF:
23354                                           ! 2682       biosfn_write_teletype(' ',page,attr,flag);
23355                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23356 5E55           8A46         0A            mov	al,$A[bp]
23357 5E58           30E4                       xor	ah,ah
23358 5E5A           50                         push	ax
23359                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23360 5E5B           8A46         08            mov	al,8[bp]
23361 5E5E           30E4                       xor	ah,ah
23362 5E60           50                         push	ax
23363                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23364 5E61           8A46         06            mov	al,6[bp]
23365 5E64           30E4                       xor	ah,ah
23366 5E66           50                         push	ax
23367                                           ! Debug: list int = const $20 (used reg = )
23368 5E67           B8                   0020  mov	ax,*$20
23369 5E6A           50                         push	ax
23370                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23371 5E6B           E8         FF28            call	_biosfn_write_teletype
23372 5E6E           83C4                   08  add	sp,*8
23373                                           !BCC_EOS
23374                                           ! 2683       biosfn_get_cursor_pos(page,&dummy,&cursor);
23375                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23376 5E71           8D5E         F2            lea	bx,-$E[bp]
23377 5E74           53                         push	bx
23378                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23379 5E75           8D5E         F0            lea	bx,-$10[bp]
23380 5E78           53                         push	bx
23381                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23382 5E79           8A46         06            mov	al,6[bp]
23383 5E7C           30E4                       xor	ah,ah
23384 5E7E           50                         push	ax
23385                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23386 5E7F           E8         E4F2            call	_biosfn_get_cursor_pos
23387 5E82           83C4                   06  add	sp,*6
23388                                           !BCC_EOS
23389                                           ! 2684       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>
23390                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23391 5E85           8A46         F2            mov	al,-$E[bp]
23392                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23393 5E88           8846         FE            mov	-2[bp],al
23394                                           !BCC_EOS
23395                                           ! 2684 8;
23396                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23397 5E8B           8B46         F2            mov	ax,-$E[bp]
23398 5E8E           30C0                       xor	al,al
23399                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23400 5E90           88E0                       mov	al,ah
23401 5E92           30E4                       xor	ah,ah
23402                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23403 5E94           8846         FD            mov	-3[bp],al
23404                                           !BCC_EOS
23405                                           ! 2685      }while(xcurs%8==0);
23406                       00005E97            .1DE:
23407                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23408 5E97           8A46         FE            mov	al,-2[bp]
23409 5E9A           30E4                       xor	ah,ah
23410 5E9C           24                     07  and	al,*7
23411                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23412 5E9E           84C0                       test	al,al
23413 5EA0           74           B3            je 	.1DF
23414                       00005EA2            .1E0:
23415                                           !BCC_EOS
23416                                           ! 2686     break;
23417                       00005EA2            .1DD:
23418 5EA2           E9         0189            br 	.1D3
23419                                           !BCC_EOS
23420                                           ! 2687    default:
23421                                           ! 2688     if(vga_modes[line].class==0x00)
23422                       00005EA5            .1E1:
23423                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
23424 5EA5           8A46         FB            mov	al,-5[bp]
23425 5EA8           30E4                       xor	ah,ah
23426 5EAA           B1                     03  mov	cl,*3
23427 5EAC           D3E0                       shl	ax,cl
23428 5EAE           89C3                       mov	bx,ax
23429 5EB0           81C3                 01DB  add	bx,#_vga_modes
23430                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23431 5EB4           8A47         01            mov	al,1[bx]
23432 5EB7           84C0                       test	al,al
23433 5EB9         0F85         0082            bne 	.1E2
23434                       00005EBD            .1E3:
23435                                           ! 2689      {
23436                                           ! 2690       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23437                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23438 5EBD           8A46         FD            mov	al,-3[bp]
23439 5EC0           30E4                       xor	ah,ah
23440 5EC2           8B4E         F8            mov	cx,-8[bp]
23441 5EC5           F7E9                       imul	cx
23442                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23443                                           ! Debug: expression subtree swapping
23444 5EC7           0246         FE            add	al,-2[bp]
23445 5ECA           80D4                   00  adc	ah,*0
23446                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23447 5ECD           D1E0                       shl	ax,*1
23448 5ECF           50                         push	ax
23449                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23450 5ED0           8B46         F8            mov	ax,-8[bp]
23451 5ED3           8B4E         F6            mov	cx,-$A[bp]
23452 5ED6           F7E9                       imul	cx
23453                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23454 5ED8           D1E0                       shl	ax,*1
23455                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23456 5EDA           0C                     FF  or	al,#$FF
23457                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23458                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23459 5EDC           89C3                       mov	bx,ax
23460 5EDE           8A46         06            mov	al,6[bp]
23461 5EE1           30E4                       xor	ah,ah
23462 5EE3           93                         xchg	ax,bx
23463 5EE4           40                         inc	ax
23464 5EE5           89D9                       mov	cx,bx
23465 5EE7           F7E9                       imul	cx
23466                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23467 5EE9           0346         EE            add	ax,0+..FFF6[bp]
23468 5EEC           44                         inc	sp
23469 5EED           44                         inc	sp
23470                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23471 5EEE           8946         F4            mov	-$C[bp],ax
23472                                           !BCC_EOS
23473                                           ! 2691       write_byte(vga_modes[line].sstart,address,car);
23474                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23475 5EF1           8A46         04            mov	al,4[bp]
23476 5EF4           30E4                       xor	ah,ah
23477 5EF6           50                         push	ax
23478                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23479 5EF7           FF76         F4            push	-$C[bp]
23480                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
23481 5EFA           8A46         FB            mov	al,-5[bp]
23482 5EFD           30E4                       xor	ah,ah
23483 5EFF           B1                     03  mov	cl,*3
23484 5F01           D3E0                       shl	ax,cl
23485 5F03           89C3                       mov	bx,ax
23486 5F05           81C3                 01DB  add	bx,#_vga_modes
23487                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23488 5F09           FF77         04            push	4[bx]
23489                                           ! Debug: func () void = write_byte+0 (used reg = )
23490 5F0C           E8         1E62            call	_write_byte
23491 5F0F           83C4                   06  add	sp,*6
23492                                           !BCC_EOS
23493                                           ! 2692       if(flag==3)
23494                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23495 5F12           8A46         0A            mov	al,$A[bp]
23496 5F15           3C                     03  cmp	al,*3
23497 5F17           75           23            jne 	.1E4
23498                       00005F19            .1E5:
23499                                           ! 2693        write_byte(vga_modes[line].sstart,address+1,attr);
23500                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23501 5F19           8A46         08            mov	al,8[bp]
23502 5F1C           30E4                       xor	ah,ah
23503 5F1E           50                         push	ax
23504                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23505 5F1F           8B46         F4            mov	ax,-$C[bp]
23506                                           ! Debug: list unsigned int = ax+1 (used reg = )
23507 5F22           40                         inc	ax
23508 5F23           50                         push	ax
23509                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
23510 5F24           8A46         FB            mov	al,-5[bp]
23511 5F27           30E4                       xor	ah,ah
23512 5F29           B1                     03  mov	cl,*3
23513 5F2B           D3E0                       shl	ax,cl
23514 5F2D           89C3                       mov	bx,ax
23515 5F2F           81C3                 01DB  add	bx,#_vga_modes
23516                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23517 5F33           FF77         04            push	4[bx]
23518                                           ! Debug: func () void = write_byte+0 (used reg = )
23519 5F36           E8         1E38            call	_write_byte
23520 5F39           83C4                   06  add	sp,*6
23521                                           !BCC_EOS
23522                                           ! 2694      }
23523                       00005F3C            .1E4:
23524                                           ! 2695     else
23525                                           ! 2696      {
23526 5F3C           E9         00C5            br 	.1E6
23527                       00005F3F            .1E2:
23528                                           ! 2697       cheight=read_byte(0x40,0x85);
23529                                           ! Debug: list int = const $85 (used reg = )
23530 5F3F           B8                   0085  mov	ax,#$85
23531 5F42           50                         push	ax
23532                                           ! Debug: list int = const $40 (used reg = )
23533 5F43           B8                   0040  mov	ax,*$40
23534 5F46           50                         push	ax
23535                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23536 5F47           E8         1E01            call	_read_byte
23537 5F4A           83C4                   04  add	sp,*4
23538                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
23539 5F4D           8846         FF            mov	-1[bp],al
23540                                           !BCC_EOS
23541                                           ! 2698       bpp=vga_modes[line].pixbits;
23542                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
23543 5F50           8A46         FB            mov	al,-5[bp]
23544 5F53           30E4                       xor	ah,ah
23545 5F55           B1                     03  mov	cl,*3
23546 5F57           D3E0                       shl	ax,cl
23547 5F59           89C3                       mov	bx,ax
23548 5F5B           81C3                 01DB  add	bx,#_vga_modes
23549                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23550 5F5F           8A47         03            mov	al,3[bx]
23551 5F62           8846         FA            mov	-6[bp],al
23552                                           !BCC_EOS
23553                                           ! 2699       switch(vga_modes[line].memmodel)
23554                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
23555 5F65           8A46         FB            mov	al,-5[bp]
23556 5F68           30E4                       xor	ah,ah
23557 5F6A           B1                     03  mov	cl,*3
23558 5F6C           D3E0                       shl	ax,cl
23559 5F6E           89C3                       mov	bx,ax
23560 5F70           81C3                 01DB  add	bx,#_vga_modes
23561 5F74           8A47         02            mov	al,2[bx]
23562                                           ! 2700        {
23563 5F77           EB           77            jmp .1E9
23564                                           ! 2701         case 0x04:
23565                                           ! 2702         case 0x03:
23566                       00005F79            .1EA:
23567                                           ! 2703           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23568                       00005F79            .1EB:
23569                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23570 5F79           8A46         FF            mov	al,-1[bp]
23571 5F7C           30E4                       xor	ah,ah
23572 5F7E           50                         push	ax
23573                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23574 5F7F           FF76         F8            push	-8[bp]
23575                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23576 5F82           8A46         FD            mov	al,-3[bp]
23577 5F85           30E4                       xor	ah,ah
23578 5F87           50                         push	ax
23579                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23580 5F88           8A46         FE            mov	al,-2[bp]
23581 5F8B           30E4                       xor	ah,ah
23582 5F8D           50                         push	ax
23583                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23584 5F8E           8A46         08            mov	al,8[bp]
23585 5F91           30E4                       xor	ah,ah
23586 5F93           50                         push	ax
23587                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23588 5F94           8A46         04            mov	al,4[bp]
23589 5F97           30E4                       xor	ah,ah
23590 5F99           50                         push	ax
23591                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23592 5F9A           E8         F0C4            call	_write_gfx_char_pl4
23593 5F9D           83C4                   0C  add	sp,*$C
23594                                           !BCC_EOS
23595                                           ! 2704           break;
23596 5FA0           EB           62            jmp .1E7
23597                                           !BCC_EOS
23598                                           ! 2705         case 0x02:
23599                                           ! 2706           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23600                       00005FA2            .1EC:
23601                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23602 5FA2           8A46         FA            mov	al,-6[bp]
23603 5FA5           30E4                       xor	ah,ah
23604 5FA7           50                         push	ax
23605                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23606 5FA8           FF76         F8            push	-8[bp]
23607                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23608 5FAB           8A46         FD            mov	al,-3[bp]
23609 5FAE           30E4                       xor	ah,ah
23610 5FB0           50                         push	ax
23611                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23612 5FB1           8A46         FE            mov	al,-2[bp]
23613 5FB4           30E4                       xor	ah,ah
23614 5FB6           50                         push	ax
23615                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23616 5FB7           8A46         08            mov	al,8[bp]
23617 5FBA           30E4                       xor	ah,ah
23618 5FBC           50                         push	ax
23619                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23620 5FBD           8A46         04            mov	al,4[bp]
23621 5FC0           30E4                       xor	ah,ah
23622 5FC2           50                         push	ax
23623                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23624 5FC3           E8         F20E            call	_write_gfx_char_cga
23625 5FC6           83C4                   0C  add	sp,*$C
23626                                           !BCC_EOS
23627                                           ! 2707           break;
23628 5FC9           EB           39            jmp .1E7
23629                                           !BCC_EOS
23630                                           ! 2708         case 0x05:
23631                                           ! 2709           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23632                       00005FCB            .1ED:
23633                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23634 5FCB           FF76         F8            push	-8[bp]
23635                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23636 5FCE           8A46         FD            mov	al,-3[bp]
23637 5FD1           30E4                       xor	ah,ah
23638 5FD3           50                         push	ax
23639                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23640 5FD4           8A46         FE            mov	al,-2[bp]
23641 5FD7           30E4                       xor	ah,ah
23642 5FD9           50                         push	ax
23643                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23644 5FDA           8A46         08            mov	al,8[bp]
23645 5FDD           30E4                       xor	ah,ah
23646 5FDF           50                         push	ax
23647                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23648 5FE0           8A46         04            mov	al,4[bp]
23649 5FE3           30E4                       xor	ah,ah
23650 5FE5           50                         push	ax
23651                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23652 5FE6           E8         F3EE            call	_write_gfx_char_lin
23653 5FE9           83C4                   0A  add	sp,*$A
23654                                           !BCC_EOS
23655                                           ! 2710           break;
23656 5FEC           EB           16            jmp .1E7
23657                                           !BCC_EOS
23658                                           ! 2711        }
23659                                           ! 2712      }
23660 5FEE           EB           14            jmp .1E7
23661                       00005FF0            .1E9:
23662 5FF0           2C                     02  sub	al,*2
23663 5FF2           74           AE            je 	.1EC
23664 5FF4           2C                     01  sub	al,*1
23665 5FF6         0F84         FF7F            beq 	.1EB
23666 5FFA           2C                     01  sub	al,*1
23667 5FFC         0F84         FF79            beq 	.1EA
23668 6000           2C                     01  sub	al,*1
23669 6002           74           C7            je 	.1ED
23670                       00006004            .1E7:
23671                                           ! 2713     xcurs++;
23672                       00006004            .1E6:
23673                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23674 6004           8A46         FE            mov	al,-2[bp]
23675 6007           40                         inc	ax
23676 6008           8846         FE            mov	-2[bp],al
23677                                           !BCC_EOS
23678                                           ! 2714   }
23679                                           ! 2715  if(xcurs==nbcols)
23680 600B           EB           21            jmp .1D3
23681                       0000600D            .1D5:
23682 600D           2C                     07  sub	al,*7
23683 600F         0F84         FE1C            beq 	.1D6
23684 6013           2C                     01  sub	al,*1
23685 6015         0F84         FE19            beq 	.1D7
23686 6019           2C                     01  sub	al,*1
23687 601B         0F84         FE36            beq 	.1DC
23688 601F           2C                     01  sub	al,*1
23689 6021         0F84         FE26            beq 	.1DB
23690 6025           2C                     03  sub	al,*3
23691 6027         0F84         FE18            beq 	.1DA
23692 602B           E9         FE77            br 	.1E1
23693                       0000602E            .1D3:
23694                       FFFFFFEE            ..FFF6	=	-$12
23695                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23696 602E           8A46         FE            mov	al,-2[bp]
23697 6031           30E4                       xor	ah,ah
23698 6033           3B46         F8            cmp	ax,-8[bp]
23699 6036           75           0C            jne 	.1EE
23700                       00006038            .1EF:
23701                                           ! 2716   {xcurs=0;
23702                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23703 6038           30C0                       xor	al,al
23704 603A           8846         FE            mov	-2[bp],al
23705                                           !BCC_EOS
23706                                           ! 2717    ycurs++;
23707                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23708 603D           8A46         FD            mov	al,-3[bp]
23709 6040           40                         inc	ax
23710 6041           8846         FD            mov	-3[bp],al
23711                                           !BCC_EOS
23712                                           ! 2718   }
23713                                           ! 2719  if(ycurs==nbrows)
23714                       00006044            .1EE:
23715                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23716 6044           8A46         FD            mov	al,-3[bp]
23717 6047           30E4                       xor	ah,ah
23718 6049           3B46         F6            cmp	ax,-$A[bp]
23719 604C         0F85         00C9            bne 	.1F0
23720                       00006050            .1F1:
23721                                           ! 2720   {
23722                                           ! 2721    if(vga_modes[line].class==0x00)
23723                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
23724 6050           8A46         FB            mov	al,-5[bp]
23725 6053           30E4                       xor	ah,ah
23726 6055           B1                     03  mov	cl,*3
23727 6057           D3E0                       shl	ax,cl
23728 6059           89C3                       mov	bx,ax
23729 605B           81C3                 01DB  add	bx,#_vga_modes
23730                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23731 605F           8A47         01            mov	al,1[bx]
23732 6062           84C0                       test	al,al
23733 6064         0F85         0081            bne 	.1F2
23734                       00006068            .1F3:
23735                                           ! 2722     {
23736                                           ! 2723      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
23737                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23738 6068           8A46         FD            mov	al,-3[bp]
23739 606B           30E4                       xor	ah,ah
23740                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
23741 606D           48                         dec	ax
23742 606E           8B4E         F8            mov	cx,-8[bp]
23743 6071           F7E9                       imul	cx
23744                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23745                                           ! Debug: expression subtree swapping
23746 6073           0246         FE            add	al,-2[bp]
23747 6076           80D4                   00  adc	ah,*0
23748                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23749 6079           D1E0                       shl	ax,*1
23750 607B           50                         push	ax
23751                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23752 607C           8B46         F8            mov	ax,-8[bp]
23753 607F           8B4E         F6            mov	cx,-$A[bp]
23754 6082           F7E9                       imul	cx
23755                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23756 6084           D1E0                       shl	ax,*1
23757                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23758 6086           0C                     FF  or	al,#$FF
23759                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23760                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23761 6088           89C3                       mov	bx,ax
23762 608A           8A46         06            mov	al,6[bp]
23763 608D           30E4                       xor	ah,ah
23764 608F           93                         xchg	ax,bx
23765 6090           40                         inc	ax
23766 6091           89D9                       mov	cx,bx
23767 6093           F7E9                       imul	cx
23768                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23769 6095           0346         EE            add	ax,-$12[bp]
23770 6098           44                         inc	sp
23771 6099           44                         inc	sp
23772                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23773 609A           8946         F4            mov	-$C[bp],ax
23774                                           !BCC_EOS
23775                                           ! 2724      attr=read_byte(vga_modes[line].sstart,address+1);
23776                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
23777 609D           8B46         F4            mov	ax,-$C[bp]
23778                                           ! Debug: list unsigned int = ax+1 (used reg = )
23779 60A0           40                         inc	ax
23780 60A1           50                         push	ax
23781                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$12] struct  = vga_modes+0 (used reg = )
23782 60A2           8A46         FB            mov	al,-5[bp]
23783 60A5           30E4                       xor	ah,ah
23784 60A7           B1                     03  mov	cl,*3
23785 60A9           D3E0                       shl	ax,cl
23786 60AB           89C3                       mov	bx,ax
23787 60AD           81C3                 01DB  add	bx,#_vga_modes
23788                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23789 60B1           FF77         04            push	4[bx]
23790                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23791 60B4           E8         1C94            call	_read_byte
23792 60B7           83C4                   04  add	sp,*4
23793                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
23794 60BA           8846         08            mov	8[bp],al
23795                                           !BCC_EOS
23796                                           ! 2725      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
23797                                           ! Debug: list int = const 1 (used reg = )
23798 60BD           B8                   0001  mov	ax,*1
23799 60C0           50                         push	ax
23800                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23801 60C1           8A46         06            mov	al,6[bp]
23802 60C4           30E4                       xor	ah,ah
23803 60C6           50                         push	ax
23804                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23805 60C7           8B46         F8            mov	ax,-8[bp]
23806                                           ! Debug: list unsigned int = ax-1 (used reg = )
23807 60CA           48                         dec	ax
23808 60CB           50                         push	ax
23809                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23810 60CC           8B46         F6            mov	ax,-$A[bp]
23811                                           ! Debug: list unsigned int = ax-1 (used reg = )
23812 60CF           48                         dec	ax
23813 60D0           50                         push	ax
23814                                           ! Debug: list int = const 0 (used reg = )
23815 60D1           31C0                       xor	ax,ax
23816 60D3           50                         push	ax
23817                                           ! Debug: list int = const 0 (used reg = )
23818 60D4           31C0                       xor	ax,ax
23819 60D6           50                         push	ax
23820                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
23821 60D7           8A46         08            mov	al,8[bp]
23822 60DA           30E4                       xor	ah,ah
23823 60DC           50                         push	ax
23824                                           ! Debug: list int = const 1 (used reg = )
23825 60DD           B8                   0001  mov	ax,*1
23826 60E0           50                         push	ax
23827                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23828 60E1           E8         E788            call	_biosfn_scroll
23829 60E4           83C4                   10  add	sp,*$10
23830                                           !BCC_EOS
23831                                           ! 2726     }
23832                                           ! 2727    else
23833                                           ! 2728     {
23834 60E7           EB           27            jmp .1F4
23835                       000060E9            .1F2:
23836                                           ! 2729      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23837                                           ! Debug: list int = const 1 (used reg = )
23838 60E9           B8                   0001  mov	ax,*1
23839 60EC           50                         push	ax
23840                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23841 60ED           8A46         06            mov	al,6[bp]
23842 60F0           30E4                       xor	ah,ah
23843 60F2           50                         push	ax
23844                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23845 60F3           8B46         F8            mov	ax,-8[bp]
23846                                           ! Debug: list unsigned int = ax-1 (used reg = )
23847 60F6           48                         dec	ax
23848 60F7           50                         push	ax
23849                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23850 60F8           8B46         F6            mov	ax,-$A[bp]
23851                                           ! Debug: list unsigned int = ax-1 (used reg = )
23852 60FB           48                         dec	ax
23853 60FC           50                         push	ax
23854                                           ! Debug: list int = const 0 (used reg = )
23855 60FD           31C0                       xor	ax,ax
23856 60FF           50                         push	ax
23857                                           ! Debug: list int = const 0 (used reg = )
23858 6100           31C0                       xor	ax,ax
23859 6102           50                         push	ax
23860                                           ! Debug: list int = const 0 (used reg = )
23861 6103           31C0                       xor	ax,ax
23862 6105           50                         push	ax
23863                                           ! Debug: list int = const 1 (used reg = )
23864 6106           B8                   0001  mov	ax,*1
23865 6109           50                         push	ax
23866                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23867 610A           E8         E75F            call	_biosfn_scroll
23868 610D           83C4                   10  add	sp,*$10
23869                                           !BCC_EOS
23870                                           ! 2730     }
23871                                           ! 2731    ycurs-=1;
23872                       00006110            .1F4:
23873                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23874 6110           8A46         FD            mov	al,-3[bp]
23875 6113           30E4                       xor	ah,ah
23876 6115           48                         dec	ax
23877 6116           8846         FD            mov	-3[bp],al
23878                                           !BCC_EOS
23879                                           ! 2732   }
23880                                           ! 2733  cursor=ycurs; cursor<<=8; cursor+=xcurs;
23881                       00006119            .1F0:
23882                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
23883 6119           8A46         FD            mov	al,-3[bp]
23884 611C           30E4                       xor	ah,ah
23885 611E           8946         F2            mov	-$E[bp],ax
23886                                           !BCC_EOS
23887                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
23888 6121           8B46         F2            mov	ax,-$E[bp]
23889 6124           88C4                       mov	ah,al
23890 6126           30C0                       xor	al,al
23891 6128           8946         F2            mov	-$E[bp],ax
23892                                           !BCC_EOS
23893                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
23894 612B           8B46         F2            mov	ax,-$E[bp]
23895 612E           0246         FE            add	al,-2[bp]
23896 6131           80D4                   00  adc	ah,*0
23897 6134           8946         F2            mov	-$E[bp],ax
23898                                           !BCC_EOS
23899                                           ! 2734  biosfn_set_cursor_pos(page,cursor);
23900                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
23901 6137           FF76         F2            push	-$E[bp]
23902                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23903 613A           8A46         06            mov	al,6[bp]
23904 613D           30E4                       xor	ah,ah
23905 613F           50                         push	ax
23906                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
23907 6140           E8         E131            call	_biosfn_set_cursor_pos
23908 6143           83C4                   04  add	sp,*4
23909                                           !BCC_EOS
23910                                           ! 2735 }
23911 6146           89EC                       mov	sp,bp
23912 6148           5D                         pop	bp
23913 6149           C3                         ret
23914                                           ! 2736 #asm
23915                                           !BCC_ASM
23916                       00000008            _biosfn_write_teletype.flag	set	8
23917                       00000006            _biosfn_write_teletype.attr	set	6
23918                       00000004            _biosfn_write_teletype.page	set	4
23919                       00000002            _biosfn_write_teletype.car	set	2
23920                       0000614A            biosfn_get_video_mode:
23921 614A           1E                           push ds
23922 614B           B8                   0040    mov ax, # 0x40
23923 614E           8ED8                         mov ds, ax
23924 6150           53                           push bx
23925 6151           BB                   0062    mov bx, # 0x62
23926 6154           8A07                         mov al, [bx]
23927 6156           5B                           pop bx
23928 6157           88C7                         mov bh, al
23929 6159           53                           push bx
23930 615A           BB                   0087    mov bx, # 0x87
23931 615D           8A27                         mov ah, [bx]
23932 615F           80E4                   80    and ah, #0x80
23933 6162           BB                   0049    mov bx, # 0x49
23934 6165           8A07                         mov al, [bx]
23935 6167           08E0                         or al, ah
23936 6169           BB                   004A    mov bx, # 0x4A
23937 616C           8A27                         mov ah, [bx]
23938 616E           5B                           pop bx
23939 616F           1F                           pop ds
23940 6170           C3                           ret
23941                                           ! 2758 endasm
23942                                           !BCC_ENDASM
23943                                           ! 2759 #asm
23944                                           !BCC_ASM
23945                       00000008            _biosfn_write_teletype.flag	set	8
23946                       00000006            _biosfn_write_teletype.attr	set	6
23947                       00000004            _biosfn_write_teletype.page	set	4
23948                       00000002            _biosfn_write_teletype.car	set	2
23949                       00006171            biosfn_group_10:
23950 6171           3C                     00    cmp al, #0x00
23951 6173           75           02              jne int10_test_1001
23952 6175           EB           61              jmp biosfn_set_single_palette_reg
23953                       00006177            int10_test_1001:
23954 6177           3C                     01    cmp al, #0x01
23955 6179           75           02              jne int10_test_1002
23956 617B           EB           75              jmp biosfn_set_overscan_border_color
23957                       0000617D            int10_test_1002:
23958 617D           3C                     02    cmp al, #0x02
23959 617F           75           02              jne int10_test_1003
23960 6181           EB           77              jmp biosfn_set_all_palette_reg
23961                       00006183            int10_test_1003:
23962 6183           3C                     03    cmp al, #0x03
23963 6185           75           03              jne int10_test_1007
23964 6187           E9         009D              jmp biosfn_toggle_intensity
23965                       0000618A            int10_test_1007:
23966 618A           3C                     07    cmp al, #0x07
23967 618C           75           03              jne int10_test_1008
23968 618E           E9         00BC              jmp biosfn_get_single_palette_reg
23969                       00006191            int10_test_1008:
23970 6191           3C                     08    cmp al, #0x08
23971 6193           75           03              jne int10_test_1009
23972 6195           E9         00D9              jmp biosfn_read_overscan_border_color
23973                       00006198            int10_test_1009:
23974 6198           3C                     09    cmp al, #0x09
23975 619A           75           03              jne int10_test_1010
23976 619C           E9         00E0              jmp biosfn_get_all_palette_reg
23977                       0000619F            int10_test_1010:
23978 619F           3C                     10    cmp al, #0x10
23979 61A1           75           03              jne int10_test_1012
23980 61A3           E9         011A              jmp biosfn_set_single_dac_reg
23981                       000061A6            int10_test_1012:
23982 61A6           3C                     12    cmp al, #0x12
23983 61A8           75           03              jne int10_test_1013
23984 61AA           E9         012C              jmp biosfn_set_all_dac_reg
23985                       000061AD            int10_test_1013:
23986 61AD           3C                     13    cmp al, #0x13
23987 61AF           75           03              jne int10_test_1015
23988 61B1           E9         014D              jmp biosfn_select_video_dac_color_page
23989                       000061B4            int10_test_1015:
23990 61B4           3C                     15    cmp al, #0x15
23991 61B6           75           03              jne int10_test_1017
23992 61B8           E9         0189              jmp biosfn_read_single_dac_reg
23993                       000061BB            int10_test_1017:
23994 61BB           3C                     17    cmp al, #0x17
23995 61BD           75           03              jne int10_test_1018
23996 61BF           E9         019D              jmp biosfn_read_all_dac_reg
23997                       000061C2            int10_test_1018:
23998 61C2           3C                     18    cmp al, #0x18
23999 61C4           75           03              jne int10_test_1019
24000 61C6           E9         01BE              jmp biosfn_set_pel_mask
24001                       000061C9            int10_test_1019:
24002 61C9           3C                     19    cmp al, #0x19
24003 61CB           75           03              jne int10_test_101A
24004 61CD           E9         01C2              jmp biosfn_read_pel_mask
24005                       000061D0            int10_test_101A:
24006 61D0           3C                     1A    cmp al, #0x1a
24007 61D2           75           03              jne int10_group_10_unknown
24008 61D4           E9         01C6              jmp biosfn_read_video_dac_state
24009                       000061D7            int10_group_10_unknown:
24010 61D7           C3                           ret
24011                       000061D8            biosfn_set_single_palette_reg:
24012 61D8           80FB                   14    cmp bl, #0x14
24013 61DB           77           14              ja no_actl_reg1
24014 61DD           50                           push ax
24015 61DE           52                           push dx
24016 61DF           BA                   03DA    mov dx, # 0x3da
24017 61E2           EC                           in al, dx
24018 61E3           BA                   03C0    mov dx, # 0x3c0
24019 61E6           88D8                         mov al, bl
24020 61E8           EE                           out dx, al
24021 61E9           88F8                         mov al, bh
24022 61EB           EE                           out dx, al
24023 61EC           B0                     20    mov al, #0x20
24024 61EE           EE                           out dx, al
24025 61EF           5A                           pop dx
24026 61F0           58                           pop ax
24027                       000061F1            no_actl_reg1:
24028 61F1           C3                           ret
24029                                           ! 2840 endasm
24030                                           !BCC_ENDASM
24031                                           ! 2841 #asm
24032                                           !BCC_ASM
24033                       00000008            _biosfn_write_teletype.flag	set	8
24034                       00000006            _biosfn_write_teletype.attr	set	6
24035                       00000004            _biosfn_write_teletype.page	set	4
24036                       00000002            _biosfn_write_teletype.car	set	2
24037                       000061F2            biosfn_set_overscan_border_color:
24038 61F2           53                           push bx
24039 61F3           B3                     11    mov bl, #0x11
24040 61F5           E8         FFE0              call biosfn_set_single_palette_reg
24041 61F8           5B                           pop bx
24042 61F9           C3                           ret
24043                                           ! 2848 endasm
24044                                           !BCC_ENDASM
24045                                           ! 2849 #asm
24046                                           !BCC_ASM
24047                       00000008            _biosfn_write_teletype.flag	set	8
24048                       00000006            _biosfn_write_teletype.attr	set	6
24049                       00000004            _biosfn_write_teletype.page	set	4
24050                       00000002            _biosfn_write_teletype.car	set	2
24051                       000061FA            biosfn_set_all_palette_reg:
24052 61FA           50                           push ax
24053 61FB           53                           push bx
24054 61FC           51                           push cx
24055 61FD           52                           push dx
24056 61FE           89D3                         mov bx, dx
24057 6200           BA                   03DA    mov dx, # 0x3da
24058 6203           EC                           in al, dx
24059 6204           B1                     00    mov cl, #0x00
24060 6206           BA                   03C0    mov dx, # 0x3c0
24061                       00006209            set_palette_loop:
24062 6209           88C8                         mov al, cl
24063 620B           EE                           out dx, al
24064 620C           26                           seg es
24065 620D           8A07                         mov al, [bx]
24066 620F           EE                           out dx, al
24067 6210           43                           inc bx
24068 6211           FEC1                         inc cl
24069 6213           80F9                   10    cmp cl, #0x10
24070 6216           75           F1              jne set_palette_loop
24071 6218           B0                     11    mov al, #0x11
24072 621A           EE                           out dx, al
24073 621B           26                           seg es
24074 621C           8A07                         mov al, [bx]
24075 621E           EE                           out dx, al
24076 621F           B0                     20    mov al, #0x20
24077 6221           EE                           out dx, al
24078 6222           5A                           pop dx
24079 6223           59                           pop cx
24080 6224           5B                           pop bx
24081 6225           58                           pop ax
24082 6226           C3                           ret
24083                                           ! 2882 endasm
24084                                           !BCC_ENDASM
24085                                           ! 2883 #asm
24086                                           !BCC_ASM
24087                       00000008            _biosfn_write_teletype.flag	set	8
24088                       00000006            _biosfn_write_teletype.attr	set	6
24089                       00000004            _biosfn_write_teletype.page	set	4
24090                       00000002            _biosfn_write_teletype.car	set	2
24091                       00006227            biosfn_toggle_intensity:
24092 6227           50                           push ax
24093 6228           53                           push bx
24094 6229           52                           push dx
24095 622A           BA                   03DA    mov dx, # 0x3da
24096 622D           EC                           in al, dx
24097 622E           BA                   03C0    mov dx, # 0x3c0
24098 6231           B0                     10    mov al, #0x10
24099 6233           EE                           out dx, al
24100 6234           BA                   03C1    mov dx, # 0x3c1
24101 6237           EC                           in al, dx
24102 6238           24                     F7    and al, #0xf7
24103 623A           80E3                   01    and bl, #0x01
24104 623D           C0E3                   03    shl bl, 3
24105 6240           08D8                         or al, bl
24106 6242           BA                   03C0    mov dx, # 0x3c0
24107 6245           EE                           out dx, al
24108 6246           B0                     20    mov al, #0x20
24109 6248           EE                           out dx, al
24110 6249           5A                           pop dx
24111 624A           5B                           pop bx
24112 624B           58                           pop ax
24113 624C           C3                           ret
24114                                           ! 2907 endasm
24115                                           !BCC_ENDASM
24116                                           ! 2908 #asm
24117                                           !BCC_ASM
24118                       00000008            _biosfn_write_teletype.flag	set	8
24119                       00000006            _biosfn_write_teletype.attr	set	6
24120                       00000004            _biosfn_write_teletype.page	set	4
24121                       00000002            _biosfn_write_teletype.car	set	2
24122                       0000624D            biosfn_get_single_palette_reg:
24123 624D           80FB                   14    cmp bl, #0x14
24124 6250           77           1E              ja no_actl_reg2
24125 6252           50                           push ax
24126 6253           52                           push dx
24127 6254           BA                   03DA    mov dx, # 0x3da
24128 6257           EC                           in al, dx
24129 6258           BA                   03C0    mov dx, # 0x3c0
24130 625B           88D8                         mov al, bl
24131 625D           EE                           out dx, al
24132 625E           BA                   03C1    mov dx, # 0x3c1
24133 6261           EC                           in al, dx
24134 6262           88C7                         mov bh, al
24135 6264           BA                   03DA    mov dx, # 0x3da
24136 6267           EC                           in al, dx
24137 6268           BA                   03C0    mov dx, # 0x3c0
24138 626B           B0                     20    mov al, #0x20
24139 626D           EE                           out dx, al
24140 626E           5A                           pop dx
24141 626F           58                           pop ax
24142                       00006270            no_actl_reg2:
24143 6270           C3                           ret
24144                                           ! 2931 endasm
24145                                           !BCC_ENDASM
24146                                           ! 2932 #asm
24147                                           !BCC_ASM
24148                       00000008            _biosfn_write_teletype.flag	set	8
24149                       00000006            _biosfn_write_teletype.attr	set	6
24150                       00000004            _biosfn_write_teletype.page	set	4
24151                       00000002            _biosfn_write_teletype.car	set	2
24152                       00006271            biosfn_read_overscan_border_color:
24153 6271           50                           push ax
24154 6272           53                           push bx
24155 6273           B3                     11    mov bl, #0x11
24156 6275           E8         FFD5              call biosfn_get_single_palette_reg
24157 6278           88F8                         mov al, bh
24158 627A           5B                           pop bx
24159 627B           88C7                         mov bh, al
24160 627D           58                           pop ax
24161 627E           C3                           ret
24162                                           ! 2943 endasm
24163                                           !BCC_ENDASM
24164                                           ! 2944 #asm
24165                                           !BCC_ASM
24166                       00000008            _biosfn_write_teletype.flag	set	8
24167                       00000006            _biosfn_write_teletype.attr	set	6
24168                       00000004            _biosfn_write_teletype.page	set	4
24169                       00000002            _biosfn_write_teletype.car	set	2
24170                       0000627F            biosfn_get_all_palette_reg:
24171 627F           50                           push ax
24172 6280           53                           push bx
24173 6281           51                           push cx
24174 6282           52                           push dx
24175 6283           89D3                         mov bx, dx
24176 6285           B1                     00    mov cl, #0x00
24177                       00006287            get_palette_loop:
24178 6287           BA                   03DA    mov dx, # 0x3da
24179 628A           EC                           in al, dx
24180 628B           BA                   03C0    mov dx, # 0x3c0
24181 628E           88C8                         mov al, cl
24182 6290           EE                           out dx, al
24183 6291           BA                   03C1    mov dx, # 0x3c1
24184 6294           EC                           in al, dx
24185 6295           26                           seg es
24186 6296           8807                         mov [bx], al
24187 6298           43                           inc bx
24188 6299           FEC1                         inc cl
24189 629B           80F9                   10    cmp cl, #0x10
24190 629E           75           E7              jne get_palette_loop
24191 62A0           BA                   03DA    mov dx, # 0x3da
24192 62A3           EC                           in al, dx
24193 62A4           BA                   03C0    mov dx, # 0x3c0
24194 62A7           B0                     11    mov al, #0x11
24195 62A9           EE                           out dx, al
24196 62AA           BA                   03C1    mov dx, # 0x3c1
24197 62AD           EC                           in al, dx
24198 62AE           26                           seg es
24199 62AF           8807                         mov [bx], al
24200 62B1           BA                   03DA    mov dx, # 0x3da
24201 62B4           EC                           in al, dx
24202 62B5           BA                   03C0    mov dx, # 0x3c0
24203 62B8           B0                     20    mov al, #0x20
24204 62BA           EE                           out dx, al
24205 62BB           5A                           pop dx
24206 62BC           59                           pop cx
24207 62BD           5B                           pop bx
24208 62BE           58                           pop ax
24209 62BF           C3                           ret
24210                                           ! 2985 endasm
24211                                           !BCC_ENDASM
24212                                           ! 2986 #asm
24213                                           !BCC_ASM
24214                       00000008            _biosfn_write_teletype.flag	set	8
24215                       00000006            _biosfn_write_teletype.attr	set	6
24216                       00000004            _biosfn_write_teletype.page	set	4
24217                       00000002            _biosfn_write_teletype.car	set	2
24218                       000062C0            biosfn_set_single_dac_reg:
24219 62C0           50                           push ax
24220 62C1           52                           push dx
24221 62C2           BA                   03C8    mov dx, # 0x3c8
24222 62C5           88D8                         mov al, bl
24223 62C7           EE                           out dx, al
24224 62C8           BA                   03C9    mov dx, # 0x3c9
24225 62CB           58                           pop ax
24226 62CC           50                           push ax
24227 62CD           88E0                         mov al, ah
24228 62CF           EE                           out dx, al
24229 62D0           88E8                         mov al, ch
24230 62D2           EE                           out dx, al
24231 62D3           88C8                         mov al, cl
24232 62D5           EE                           out dx, al
24233 62D6           5A                           pop dx
24234 62D7           58                           pop ax
24235 62D8           C3                           ret
24236                                           ! 3005 endasm
24237                                           !BCC_ENDASM
24238                                           ! 3006 #asm
24239                                           !BCC_ASM
24240                       00000008            _biosfn_write_teletype.flag	set	8
24241                       00000006            _biosfn_write_teletype.attr	set	6
24242                       00000004            _biosfn_write_teletype.page	set	4
24243                       00000002            _biosfn_write_teletype.car	set	2
24244                       000062D9            biosfn_set_all_dac_reg:
24245 62D9           50                           push ax
24246 62DA           53                           push bx
24247 62DB           51                           push cx
24248 62DC           52                           push dx
24249 62DD           BA                   03C8    mov dx, # 0x3c8
24250 62E0           88D8                         mov al, bl
24251 62E2           EE                           out dx, al
24252 62E3           5A                           pop dx
24253 62E4           52                           push dx
24254 62E5           89D3                         mov bx, dx
24255 62E7           BA                   03C9    mov dx, # 0x3c9
24256                       000062EA            set_dac_loop:
24257 62EA           26                           seg es
24258 62EB           8A07                         mov al, [bx]
24259 62ED           EE                           out dx, al
24260 62EE           43                           inc bx
24261 62EF           26                           seg es
24262 62F0           8A07                         mov al, [bx]
24263 62F2           EE                           out dx, al
24264 62F3           43                           inc bx
24265 62F4           26                           seg es
24266 62F5           8A07                         mov al, [bx]
24267 62F7           EE                           out dx, al
24268 62F8           43                           inc bx
24269 62F9           49                           dec cx
24270 62FA           75           EE              jnz set_dac_loop
24271 62FC           5A                           pop dx
24272 62FD           59                           pop cx
24273 62FE           5B                           pop bx
24274 62FF           58                           pop ax
24275 6300           C3                           ret
24276                                           ! 3039 endasm
24277                                           !BCC_ENDASM
24278                                           ! 3040 #asm
24279                                           !BCC_ASM
24280                       00000008            _biosfn_write_teletype.flag	set	8
24281                       00000006            _biosfn_write_teletype.attr	set	6
24282                       00000004            _biosfn_write_teletype.page	set	4
24283                       00000002            _biosfn_write_teletype.car	set	2
24284                       00006301            biosfn_select_video_dac_color_page:
24285 6301           50                           push ax
24286 6302           53                           push bx
24287 6303           52                           push dx
24288 6304           BA                   03DA    mov dx, # 0x3da
24289 6307           EC                           in al, dx
24290 6308           BA                   03C0    mov dx, # 0x3c0
24291 630B           B0                     10    mov al, #0x10
24292 630D           EE                           out dx, al
24293 630E           BA                   03C1    mov dx, # 0x3c1
24294 6311           EC                           in al, dx
24295 6312           80E3                   01    and bl, #0x01
24296 6315           75           0D              jnz set_dac_page
24297 6317           24                     7F    and al, #0x7f
24298 6319           C0E7                   07    shl bh, 7
24299 631C           08F8                         or al, bh
24300 631E           BA                   03C0    mov dx, # 0x3c0
24301 6321           EE                           out dx, al
24302 6322           EB           19              jmp set_actl_normal
24303                       00006324            set_dac_page:
24304 6324           50                           push ax
24305 6325           BA                   03DA    mov dx, # 0x3da
24306 6328           EC                           in al, dx
24307 6329           BA                   03C0    mov dx, # 0x3c0
24308 632C           B0                     14    mov al, #0x14
24309 632E           EE                           out dx, al
24310 632F           58                           pop ax
24311 6330           24                     80    and al, #0x80
24312 6332           75           03              jnz set_dac_16_page
24313 6334           C0E7                   02    shl bh, 2
24314                       00006337            set_dac_16_page:
24315 6337           80E7                   0F    and bh, #0x0f
24316 633A           88F8                         mov al, bh
24317 633C           EE                           out dx, al
24318                       0000633D            set_actl_normal:
24319 633D           B0                     20    mov al, #0x20
24320 633F           EE                           out dx, al
24321 6340           5A                           pop dx
24322 6341           5B                           pop bx
24323 6342           58                           pop ax
24324 6343           C3                           ret
24325                                           ! 3082 endasm
24326                                           !BCC_ENDASM
24327                                           ! 3083 #asm
24328                                           !BCC_ASM
24329                       00000008            _biosfn_write_teletype.flag	set	8
24330                       00000006            _biosfn_write_teletype.attr	set	6
24331                       00000004            _biosfn_write_teletype.page	set	4
24332                       00000002            _biosfn_write_teletype.car	set	2
24333                       00006344            biosfn_read_single_dac_reg:
24334 6344           50                           push ax
24335 6345           52                           push dx
24336 6346           BA                   03C7    mov dx, # 0x3c7
24337 6349           88D8                         mov al, bl
24338 634B           EE                           out dx, al
24339 634C           58                           pop ax
24340 634D           88C4                         mov ah, al
24341 634F           BA                   03C9    mov dx, # 0x3c9
24342 6352           EC                           in al, dx
24343 6353           86E0                         xchg al, ah
24344 6355           50                           push ax
24345 6356           EC                           in al, dx
24346 6357           88C5                         mov ch, al
24347 6359           EC                           in al, dx
24348 635A           88C1                         mov cl, al
24349 635C           5A                           pop dx
24350 635D           58                           pop ax
24351 635E           C3                           ret
24352                                           ! 3103 endasm
24353                                           !BCC_ENDASM
24354                                           ! 3104 #asm
24355                                           !BCC_ASM
24356                       00000008            _biosfn_write_teletype.flag	set	8
24357                       00000006            _biosfn_write_teletype.attr	set	6
24358                       00000004            _biosfn_write_teletype.page	set	4
24359                       00000002            _biosfn_write_teletype.car	set	2
24360                       0000635F            biosfn_read_all_dac_reg:
24361 635F           50                           push ax
24362 6360           53                           push bx
24363 6361           51                           push cx
24364 6362           52                           push dx
24365 6363           BA                   03C7    mov dx, # 0x3c7
24366 6366           88D8                         mov al, bl
24367 6368           EE                           out dx, al
24368 6369           5A                           pop dx
24369 636A           52                           push dx
24370 636B           89D3                         mov bx, dx
24371 636D           BA                   03C9    mov dx, # 0x3c9
24372                       00006370            read_dac_loop:
24373 6370           EC                           in al, dx
24374 6371           26                           seg es
24375 6372           8807                         mov [bx], al
24376 6374           43                           inc bx
24377 6375           EC                           in al, dx
24378 6376           26                           seg es
24379 6377           8807                         mov [bx], al
24380 6379           43                           inc bx
24381 637A           EC                           in al, dx
24382 637B           26                           seg es
24383 637C           8807                         mov [bx], al
24384 637E           43                           inc bx
24385 637F           49                           dec cx
24386 6380           75           EE              jnz read_dac_loop
24387 6382           5A                           pop dx
24388 6383           59                           pop cx
24389 6384           5B                           pop bx
24390 6385           58                           pop ax
24391 6386           C3                           ret
24392                                           ! 3137 endasm
24393                                           !BCC_ENDASM
24394                                           ! 3138 #asm
24395                                           !BCC_ASM
24396                       00000008            _biosfn_write_teletype.flag	set	8
24397                       00000006            _biosfn_write_teletype.attr	set	6
24398                       00000004            _biosfn_write_teletype.page	set	4
24399                       00000002            _biosfn_write_teletype.car	set	2
24400                       00006387            biosfn_set_pel_mask:
24401 6387           50                           push ax
24402 6388           52                           push dx
24403 6389           BA                   03C6    mov dx, # 0x3c6
24404 638C           88D8                         mov al, bl
24405 638E           EE                           out dx, al
24406 638F           5A                           pop dx
24407 6390           58                           pop ax
24408 6391           C3                           ret
24409                                           ! 3148 endasm
24410                                           !BCC_ENDASM
24411                                           ! 3149 #asm
24412                                           !BCC_ASM
24413                       00000008            _biosfn_write_teletype.flag	set	8
24414                       00000006            _biosfn_write_teletype.attr	set	6
24415                       00000004            _biosfn_write_teletype.page	set	4
24416                       00000002            _biosfn_write_teletype.car	set	2
24417                       00006392            biosfn_read_pel_mask:
24418 6392           50                           push ax
24419 6393           52                           push dx
24420 6394           BA                   03C6    mov dx, # 0x3c6
24421 6397           EC                           in al, dx
24422 6398           88C3                         mov bl, al
24423 639A           5A                           pop dx
24424 639B           58                           pop ax
24425 639C           C3                           ret
24426                                           ! 3159 endasm
24427                                           !BCC_ENDASM
24428                                           ! 3160 #asm
24429                                           !BCC_ASM
24430                       00000008            _biosfn_write_teletype.flag	set	8
24431                       00000006            _biosfn_write_teletype.attr	set	6
24432                       00000004            _biosfn_write_teletype.page	set	4
24433                       00000002            _biosfn_write_teletype.car	set	2
24434                       0000639D            biosfn_read_video_dac_state:
24435 639D           50                           push ax
24436 639E           52                           push dx
24437 639F           BA                   03DA    mov dx, # 0x3da
24438 63A2           EC                           in al, dx
24439 63A3           BA                   03C0    mov dx, # 0x3c0
24440 63A6           B0                     10    mov al, #0x10
24441 63A8           EE                           out dx, al
24442 63A9           BA                   03C1    mov dx, # 0x3c1
24443 63AC           EC                           in al, dx
24444 63AD           88C3                         mov bl, al
24445 63AF           C0EB                   07    shr bl, 7
24446 63B2           BA                   03DA    mov dx, # 0x3da
24447 63B5           EC                           in al, dx
24448 63B6           BA                   03C0    mov dx, # 0x3c0
24449 63B9           B0                     14    mov al, #0x14
24450 63BB           EE                           out dx, al
24451 63BC           BA                   03C1    mov dx, # 0x3c1
24452 63BF           EC                           in al, dx
24453 63C0           88C7                         mov bh, al
24454 63C2           80E7                   0F    and bh, #0x0f
24455 63C5           F6C3                   01    test bl, #0x01
24456 63C8           75           03              jnz get_dac_16_page
24457 63CA           C0EF                   02    shr bh, 2
24458                       000063CD            get_dac_16_page:
24459 63CD           BA                   03DA    mov dx, # 0x3da
24460 63D0           EC                           in al, dx
24461 63D1           BA                   03C0    mov dx, # 0x3c0
24462 63D4           B0                     20    mov al, #0x20
24463 63D6           EE                           out dx, al
24464 63D7           5A                           pop dx
24465 63D8           58                           pop ax
24466 63D9           C3                           ret
24467                                           ! 3194 endasm
24468                                           !BCC_ENDASM
24469                                           ! 3195 static void biosfn_perform_gray_scale_summing (start,count)
24470                                           ! Register BX used in function biosfn_write_teletype
24471                                           ! 3196 Bit16u start;Bit16u count;
24472                       000063DA            _biosfn_perform_gray_scale_summing:
24473                                           !BCC_EOS
24474                                           !BCC_EOS
24475                                           ! 3197 {Bit8u r,g,b;
24476                                           !BCC_EOS
24477                                           ! 3198  Bit16u i;
24478                                           !BCC_EOS
24479                                           ! 3199  Bit16u index;
24480                                           !BCC_EOS
24481                                           ! 3200  inb(0x3da);
24482 63DA           55                         push	bp
24483 63DB           89E5                       mov	bp,sp
24484 63DD           83C4                   F8  add	sp,*-8
24485                                           ! Debug: list int = const $3DA (used reg = )
24486 63E0           B8                   03DA  mov	ax,#$3DA
24487 63E3           50                         push	ax
24488                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24489 63E4           E8         19BA            call	_inb
24490 63E7           44                         inc	sp
24491 63E8           44                         inc	sp
24492                                           !BCC_EOS
24493                                           ! 3201  outb(0x3c0,0x00);
24494                                           ! Debug: list int = const 0 (used reg = )
24495 63E9           31C0                       xor	ax,ax
24496 63EB           50                         push	ax
24497                                           ! Debug: list int = const $3C0 (used reg = )
24498 63EC           B8                   03C0  mov	ax,#$3C0
24499 63EF           50                         push	ax
24500                                           ! Debug: func () void = outb+0 (used reg = )
24501 63F0           E8         19C4            call	_outb
24502 63F3           83C4                   04  add	sp,*4
24503                                           !BCC_EOS
24504                                           ! 3202  for( index = 0; index < count; index++ )
24505                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24506 63F6           31C0                       xor	ax,ax
24507 63F8           8946         F8            mov	-8[bp],ax
24508                                           !BCC_EOS
24509                                           !BCC_EOS
24510                                           ! 3203   {
24511 63FB           E9         00BE            br 	.1F7
24512                       000063FE            .1F8:
24513                                           ! 3204    outb(0x3c7,start);
24514                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24515 63FE           FF76         04            push	4[bp]
24516                                           ! Debug: list int = const $3C7 (used reg = )
24517 6401           B8                   03C7  mov	ax,#$3C7
24518 6404           50                         push	ax
24519                                           ! Debug: func () void = outb+0 (used reg = )
24520 6405           E8         19AF            call	_outb
24521 6408           83C4                   04  add	sp,*4
24522                                           !BCC_EOS
24523                                           ! 3205    r=inb( 0x3c9 );
24524                                           ! Debug: list int = const $3C9 (used reg = )
24525 640B           B8                   03C9  mov	ax,#$3C9
24526 640E           50                         push	ax
24527                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24528 640F           E8         198F            call	_inb
24529 6412           44                         inc	sp
24530 6413           44                         inc	sp
24531                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24532 6414           8846         FF            mov	-1[bp],al
24533                                           !BCC_EOS
24534                                           ! 3206    g=inb( 0x3c9 );
24535                                           ! Debug: list int = const $3C9 (used reg = )
24536 6417           B8                   03C9  mov	ax,#$3C9
24537 641A           50                         push	ax
24538                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24539 641B           E8         1983            call	_inb
24540 641E           44                         inc	sp
24541 641F           44                         inc	sp
24542                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24543 6420           8846         FE            mov	-2[bp],al
24544                                           !BCC_EOS
24545                                           ! 3207    b=inb( 0x3c9 );
24546                                           ! Debug: list int = const $3C9 (used reg = )
24547 6423           B8                   03C9  mov	ax,#$3C9
24548 6426           50                         push	ax
24549                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24550 6427           E8         1977            call	_inb
24551 642A           44                         inc	sp
24552 642B           44                         inc	sp
24553                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24554 642C           8846         FD            mov	-3[bp],al
24555                                           !BCC_EOS
24556                                           ! 3208    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24557                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24558                                           ! Debug: expression subtree swapping
24559 642F           8A46         FD            mov	al,-3[bp]
24560 6432           30E4                       xor	ah,ah
24561 6434           B9                   001C  mov	cx,*$1C
24562 6437           F7E9                       imul	cx
24563 6439           50                         push	ax
24564                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24565                                           ! Debug: expression subtree swapping
24566 643A           8A46         FE            mov	al,-2[bp]
24567 643D           30E4                       xor	ah,ah
24568 643F           B9                   0097  mov	cx,#$97
24569 6442           F7E9                       imul	cx
24570 6444           50                         push	ax
24571                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24572                                           ! Debug: expression subtree swapping
24573 6445           8A46         FF            mov	al,-1[bp]
24574 6448           30E4                       xor	ah,ah
24575 644A           B9                   004D  mov	cx,*$4D
24576 644D           F7E9                       imul	cx
24577                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24578 644F           0346         F4            add	ax,-$C[bp]
24579 6452           44                         inc	sp
24580 6453           44                         inc	sp
24581                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24582 6454           0346         F6            add	ax,-$A[bp]
24583 6457           44                         inc	sp
24584 6458           44                         inc	sp
24585                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24586                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24587 6459           05                   0080  add	ax,#$80
24588 645C           88E0                       mov	al,ah
24589 645E           30E4                       xor	ah,ah
24590                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24591 6460           8946         FA            mov	-6[bp],ax
24592                                           !BCC_EOS
24593                                           ! 3209    if(i>0x3f)i=0x3f;
24594                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24595 6463           8B46         FA            mov	ax,-6[bp]
24596 6466           3D                   003F  cmp	ax,*$3F
24597 6469           76           06            jbe 	.1F9
24598                       0000646B            .1FA:
24599                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24600 646B           B8                   003F  mov	ax,*$3F
24601 646E           8946         FA            mov	-6[bp],ax
24602                                           !BCC_EOS
24603                                           ! 3210    outb(0x3c8,start);
24604                       00006471            .1F9:
24605                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24606 6471           FF76         04            push	4[bp]
24607                                           ! Debug: list int = const $3C8 (used reg = )
24608 6474           B8                   03C8  mov	ax,#$3C8
24609 6477           50                         push	ax
24610                                           ! Debug: func () void = outb+0 (used reg = )
24611 6478           E8         193C            call	_outb
24612 647B           83C4                   04  add	sp,*4
24613                                           !BCC_EOS
24614                                           ! 3211    outb( 0x3c9, i&0xff );
24615                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24616 647E           8A46         FA            mov	al,-6[bp]
24617                                           ! Debug: list unsigned char = al+0 (used reg = )
24618 6481           30E4                       xor	ah,ah
24619 6483           50                         push	ax
24620                                           ! Debug: list int = const $3C9 (used reg = )
24621 6484           B8                   03C9  mov	ax,#$3C9
24622 6487           50                         push	ax
24623                                           ! Debug: func () void = outb+0 (used reg = )
24624 6488           E8         192C            call	_outb
24625 648B           83C4                   04  add	sp,*4
24626                                           !BCC_EOS
24627                                           ! 3212   
24628                                           ! 3212  outb( 0x3c9, i&0xff );
24629                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24630 648E           8A46         FA            mov	al,-6[bp]
24631                                           ! Debug: list unsigned char = al+0 (used reg = )
24632 6491           30E4                       xor	ah,ah
24633 6493           50                         push	ax
24634                                           ! Debug: list int = const $3C9 (used reg = )
24635 6494           B8                   03C9  mov	ax,#$3C9
24636 6497           50                         push	ax
24637                                           ! Debug: func () void = outb+0 (used reg = )
24638 6498           E8         191C            call	_outb
24639 649B           83C4                   04  add	sp,*4
24640                                           !BCC_EOS
24641                                           ! 3213    outb( 0x3c9, i&0xff );
24642                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24643 649E           8A46         FA            mov	al,-6[bp]
24644                                           ! Debug: list unsigned char = al+0 (used reg = )
24645 64A1           30E4                       xor	ah,ah
24646 64A3           50                         push	ax
24647                                           ! Debug: list int = const $3C9 (used reg = )
24648 64A4           B8                   03C9  mov	ax,#$3C9
24649 64A7           50                         push	ax
24650                                           ! Debug: func () void = outb+0 (used reg = )
24651 64A8           E8         190C            call	_outb
24652 64AB           83C4                   04  add	sp,*4
24653                                           !BCC_EOS
24654                                           ! 3214    start++;
24655                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24656 64AE           8B46         04            mov	ax,4[bp]
24657 64B1           40                         inc	ax
24658 64B2           8946         04            mov	4[bp],ax
24659                                           !BCC_EOS
24660                                           ! 3215   }
24661                                           ! 3216  inb(0x3da);
24662                       000064B5            .1F6:
24663                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24664 64B5           8B46         F8            mov	ax,-8[bp]
24665 64B8           40                         inc	ax
24666 64B9           8946         F8            mov	-8[bp],ax
24667                       000064BC            .1F7:
24668                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24669 64BC           8B46         F8            mov	ax,-8[bp]
24670 64BF           3B46         06            cmp	ax,6[bp]
24671 64C2         0F82         FF38            blo 	.1F8
24672                       000064C6            .1FB:
24673                       000064C6            .1F5:
24674                                           ! Debug: list int = const $3DA (used reg = )
24675 64C6           B8                   03DA  mov	ax,#$3DA
24676 64C9           50                         push	ax
24677                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24678 64CA           E8         18D4            call	_inb
24679 64CD           44                         inc	sp
24680 64CE           44                         inc	sp
24681                                           !BCC_EOS
24682                                           ! 3217  outb(0x3c0,0x20);
24683                                           ! Debug: list int = const $20 (used reg = )
24684 64CF           B8                   0020  mov	ax,*$20
24685 64D2           50                         push	ax
24686                                           ! Debug: list int = const $3C0 (used reg = )
24687 64D3           B8                   03C0  mov	ax,#$3C0
24688 64D6           50                         push	ax
24689                                           ! Debug: func () void = outb+0 (used reg = )
24690 64D7           E8         18DD            call	_outb
24691 64DA           83C4                   04  add	sp,*4
24692                                           !BCC_EOS
24693                                           ! 3218 }
24694 64DD           89EC                       mov	sp,bp
24695 64DF           5D                         pop	bp
24696 64E0           C3                         ret
24697                                           ! 3219 static void get_font_access()
24698                                           ! 3220 {
24699                       000064E1            _get_font_access:
24700                                           ! 3221 #asm
24701                                           !BCC_ASM
24702 64E1           BA                   03C4   mov dx, # 0x3c4
24703 64E4           B8                   0100   mov ax, #0x0100
24704 64E7           EF                          out dx, ax
24705 64E8           B8                   0402   mov ax, #0x0402
24706 64EB           EF                          out dx, ax
24707 64EC           B8                   0704   mov ax, #0x0704
24708 64EF           EF                          out dx, ax
24709 64F0           B8                   0300   mov ax, #0x0300
24710 64F3           EF                          out dx, ax
24711 64F4           BA                   03CE   mov dx, # 0x3ce
24712 64F7           B8                   0204   mov ax, #0x0204
24713 64FA           EF                          out dx, ax
24714 64FB           B8                   0005   mov ax, #0x0005
24715 64FE           EF                          out dx, ax
24716 64FF           B8                   0406   mov ax, #0x0406
24717 6502           EF                          out dx, ax
24718                                           ! 3238 endasm
24719                                           !BCC_ENDASM
24720                                           ! 3239 }
24721 6503           C3                         ret
24722                                           ! 3240 static void release_font_access()
24723                                           ! 3241 {
24724                       00006504            _release_font_access:
24725                                           ! 3242 #asm
24726                                           !BCC_ASM
24727 6504           BA                   03C4   mov dx, # 0x3c4
24728 6507           B8                   0100   mov ax, #0x0100
24729 650A           EF                          out dx, ax
24730 650B           B8                   0302   mov ax, #0x0302
24731 650E           EF                          out dx, ax
24732 650F           B8                   0304   mov ax, #0x0304
24733 6512           EF                          out dx, ax
24734 6513           B8                   0300   mov ax, #0x0300
24735 6516           EF                          out dx, ax
24736 6517           BA                   03CC   mov dx, # 0x3cc
24737 651A           EC                          in al, dx
24738 651B           24                     01   and al, #0x01
24739 651D           C0E0                   02   shl al, 2
24740 6520           0C                     0A   or al, #0x0a
24741 6522           88C4                        mov ah, al
24742 6524           B0                     06   mov al, #0x06
24743 6526           BA                   03CE   mov dx, # 0x3ce
24744 6529           EF                          out dx, ax
24745 652A           B8                   0004   mov ax, #0x0004
24746 652D           EF                          out dx, ax
24747 652E           B8                   1005   mov ax, #0x1005
24748 6531           EF                          out dx, ax
24749                                           ! 3265 endasm
24750                                           !BCC_ENDASM
24751                                           ! 3266 }
24752 6532           C3                         ret
24753                                           ! 3267 #asm
24754                                           !BCC_ASM
24755                       00006533            idiv_u:
24756 6533           31D2                         xor dx,dx
24757 6535           F7F3                         div bx
24758 6537           C3                           ret
24759                                           ! 3272 endasm
24760                                           !BCC_ENDASM
24761                                           ! 3273 static void set_scan_lines(lines) Bit8u lines;
24762                       00006538            _set_scan_lines:
24763                                           !BCC_EOS
24764                                           ! 3274 {
24765                                           ! 3275  Bit16u crtc_addr,cols,page,vde;
24766                                           !BCC_EOS
24767                                           ! 3276  Bit8u crtc_r9,ovl,rows;
24768                                           !BCC_EOS
24769                                           ! 3277  crtc_addr = read_word(0x40,0x63);
24770 6538           55                         push	bp
24771 6539           89E5                       mov	bp,sp
24772 653B           83C4                   F4  add	sp,*-$C
24773                                           ! Debug: list int = const $63 (used reg = )
24774 653E           B8                   0063  mov	ax,*$63
24775 6541           50                         push	ax
24776                                           ! Debug: list int = const $40 (used reg = )
24777 6542           B8                   0040  mov	ax,*$40
24778 6545           50                         push	ax
24779                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24780 6546           E8         1815            call	_read_word
24781 6549           83C4                   04  add	sp,*4
24782                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24783 654C           8946         FE            mov	-2[bp],ax
24784                                           !BCC_EOS
24785                                           ! 3278  outb(crtc_addr, 0x09);
24786                                           ! Debug: list int = const 9 (used reg = )
24787 654F           B8                   0009  mov	ax,*9
24788 6552           50                         push	ax
24789                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24790 6553           FF76         FE            push	-2[bp]
24791                                           ! Debug: func () void = outb+0 (used reg = )
24792 6556           E8         185E            call	_outb
24793 6559           83C4                   04  add	sp,*4
24794                                           !BCC_EOS
24795                                           ! 3279  crtc_r9 = inb(crtc_addr+1);
24796                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24797 655C           8B46         FE            mov	ax,-2[bp]
24798                                           ! Debug: list unsigned int = ax+1 (used reg = )
24799 655F           40                         inc	ax
24800 6560           50                         push	ax
24801                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24802 6561           E8         183D            call	_inb
24803 6564           44                         inc	sp
24804 6565           44                         inc	sp
24805                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24806 6566           8846         F7            mov	-9[bp],al
24807                                           !BCC_EOS
24808                                           ! 3280  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24809                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24810 6569           8A46         04            mov	al,4[bp]
24811 656C           30E4                       xor	ah,ah
24812 656E           48                         dec	ax
24813 656F           50                         push	ax
24814                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24815 6570           8A46         F7            mov	al,-9[bp]
24816 6573           24                     E0  and	al,#$E0
24817                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24818 6575           30E4                       xor	ah,ah
24819 6577           0B46         F2            or	ax,-$E[bp]
24820 657A           44                         inc	sp
24821 657B           44                         inc	sp
24822                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24823 657C           8846         F7            mov	-9[bp],al
24824                                           !BCC_EOS
24825                                           ! 3281  outb(crtc_addr+1, crtc_r9);
24826                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24827 657F           8A46         F7            mov	al,-9[bp]
24828 6582           30E4                       xor	ah,ah
24829 6584           50                         push	ax
24830                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24831 6585           8B46         FE            mov	ax,-2[bp]
24832                                           ! Debug: list unsigned int = ax+1 (used reg = )
24833 6588           40                         inc	ax
24834 6589           50                         push	ax
24835                                           ! Debug: func () void = outb+0 (used reg = )
24836 658A           E8         182A            call	_outb
24837 658D           83C4                   04  add	sp,*4
24838                                           !BCC_EOS
24839                                           ! 3282  if(lines==8)
24840                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24841 6590           8A46         04            mov	al,4[bp]
24842 6593           3C                     08  cmp	al,*8
24843 6595           75           10            jne 	.1FC
24844                       00006597            .1FD:
24845                                           ! 3283   {
24846                                           ! 3284    biosfn_set_cursor_shape(0x06,0x07);
24847                                           ! Debug: list int = const 7 (used reg = )
24848 6597           B8                   0007  mov	ax,*7
24849 659A           50                         push	ax
24850                                           ! Debug: list int = const 6 (used reg = )
24851 659B           B8                   0006  mov	ax,*6
24852 659E           50                         push	ax
24853                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24854 659F           E8         DBB7            call	_biosfn_set_cursor_shape
24855 65A2           83C4                   04  add	sp,*4
24856                                           !BCC_EOS
24857                                           ! 3285   }
24858                                           ! 3286  else
24859                                           ! 3287   {
24860 65A5           EB           18            jmp .1FE
24861                       000065A7            .1FC:
24862                                           ! 3288    biosfn_set_cursor_shape(lines-4,lines-3);
24863                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24864 65A7           8A46         04            mov	al,4[bp]
24865 65AA           30E4                       xor	ah,ah
24866                                           ! Debug: list unsigned int = ax-3 (used reg = )
24867 65AC           05                   FFFD  add	ax,*-3
24868 65AF           50                         push	ax
24869                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
24870 65B0           8A46         04            mov	al,4[bp]
24871 65B3           30E4                       xor	ah,ah
24872                                           ! Debug: list unsigned int = ax-4 (used reg = )
24873 65B5           05                   FFFC  add	ax,*-4
24874 65B8           50                         push	ax
24875                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24876 65B9           E8         DB9D            call	_biosfn_set_cursor_shape
24877 65BC           83C4                   04  add	sp,*4
24878                                           !BCC_EOS
24879                                           ! 3289   }
24880                                           ! 3290  write_word(0x40,0x85, lines);
24881                       000065BF            .1FE:
24882                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
24883 65BF           8A46         04            mov	al,4[bp]
24884 65C2           30E4                       xor	ah,ah
24885 65C4           50                         push	ax
24886                                           ! Debug: list int = const $85 (used reg = )
24887 65C5           B8                   0085  mov	ax,#$85
24888 65C8           50                         push	ax
24889                                           ! Debug: list int = const $40 (used reg = )
24890 65C9           B8                   0040  mov	ax,*$40
24891 65CC           50                         push	ax
24892                                           ! Debug: func () void = write_word+0 (used reg = )
24893 65CD           E8         17B9            call	_write_word
24894 65D0           83C4                   06  add	sp,*6
24895                                           !BCC_EOS
24896                                           ! 3291  outb(crtc_addr, 0x12);
24897                                           ! Debug: list int = const $12 (used reg = )
24898 65D3           B8                   0012  mov	ax,*$12
24899 65D6           50                         push	ax
24900                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24901 65D7           FF76         FE            push	-2[bp]
24902                                           ! Debug: func () void = outb+0 (used reg = )
24903 65DA           E8         17DA            call	_outb
24904 65DD           83C4                   04  add	sp,*4
24905                                           !BCC_EOS
24906                                           ! 3292  vde = inb(crtc_addr+1);
24907                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24908 65E0           8B46         FE            mov	ax,-2[bp]
24909                                           ! Debug: list unsigned int = ax+1 (used reg = )
24910 65E3           40                         inc	ax
24911 65E4           50                         push	ax
24912                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24913 65E5           E8         17B9            call	_inb
24914 65E8           44                         inc	sp
24915 65E9           44                         inc	sp
24916                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
24917 65EA           30E4                       xor	ah,ah
24918 65EC           8946         F8            mov	-8[bp],ax
24919                                           !BCC_EOS
24920                                           ! 3293  outb(crtc_addr, 0x07);
24921                                           ! Debug: list int = const 7 (used reg = )
24922 65EF           B8                   0007  mov	ax,*7
24923 65F2           50                         push	ax
24924                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24925 65F3           FF76         FE            push	-2[bp]
24926                                           ! Debug: func () void = outb+0 (used reg = )
24927 65F6           E8         17BE            call	_outb
24928 65F9           83C4                   04  add	sp,*4
24929                                           !BCC_EOS
24930                                           ! 3294  ovl = inb(crtc_addr+1);
24931                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24932 65FC           8B46         FE            mov	ax,-2[bp]
24933                                           ! Debug: list unsigned int = ax+1 (used reg = )
24934 65FF           40                         inc	ax
24935 6600           50                         push	ax
24936                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24937 6601           E8         179D            call	_inb
24938 6604           44                         inc	sp
24939 6605           44                         inc	sp
24940                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
24941 6606           8846         F6            mov	-$A[bp],al
24942                                           !BCC_EOS
24943                                           ! 3295  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
24944                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
24945 6609           8A46         F6            mov	al,-$A[bp]
24946 660C           24                     40  and	al,*$40
24947                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
24948 660E           30E4                       xor	ah,ah
24949 6610           B1                     03  mov	cl,*3
24950 6612           D3E0                       shl	ax,cl
24951 6614           50                         push	ax
24952                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
24953 6615           8A46         F6            mov	al,-$A[bp]
24954 6618           24                     02  and	al,*2
24955                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
24956 661A           30E4                       xor	ah,ah
24957 661C           B1                     07  mov	cl,*7
24958 661E           D3E0                       shl	ax,cl
24959                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
24960 6620           0346         F2            add	ax,-$E[bp]
24961 6623           44                         inc	sp
24962 6624           44                         inc	sp
24963                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24964                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
24965 6625           40                         inc	ax
24966 6626           0346         F8            add	ax,-8[bp]
24967 6629           8946         F8            mov	-8[bp],ax
24968                                           !BCC_EOS
24969                                           ! 3296  rows = vde / lines;
24970                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
24971 662C           8A46         04            mov	al,4[bp]
24972 662F           30E4                       xor	ah,ah
24973 6631           89C3                       mov	bx,ax
24974 6633           8B46         F8            mov	ax,-8[bp]
24975 6636           E8         FEFA            call	idiv_u
24976                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
24977 6639           8846         F5            mov	-$B[bp],al
24978                                           !BCC_EOS
24979                                           ! 3297  write_byte(0x40,0x84, rows-1);
24980                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
24981 663C           8A46         F5            mov	al,-$B[bp]
24982 663F           30E4                       xor	ah,ah
24983                                           ! Debug: list unsigned int = ax-1 (used reg = )
24984 6641           48                         dec	ax
24985 6642           50                         push	ax
24986                                           ! Debug: list int = const $84 (used reg = )
24987 6643           B8                   0084  mov	ax,#$84
24988 6646           50                         push	ax
24989                                           ! Debug: list int = const $40 (used reg = )
24990 6647           B8                   0040  mov	ax,*$40
24991 664A           50                         push	ax
24992                                           ! Debug: func () void = write_byte+0 (used reg = )
24993 664B           E8         1723            call	_write_byte
24994 664E           83C4                   06  add	sp,*6
24995                                           !BCC_EOS
24996                                           ! 3298  cols = read_word(0x40,0x4A);
24997                                           ! Debug: list int = const $4A (used reg = )
24998 6651           B8                   004A  mov	ax,*$4A
24999 6654           50                         push	ax
25000                                           ! Debug: list int = const $40 (used reg = )
25001 6655           B8                   0040  mov	ax,*$40
25002 6658           50                         push	ax
25003                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25004 6659           E8         1702            call	_read_word
25005 665C           83C4                   04  add	sp,*4
25006                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25007 665F           8946         FC            mov	-4[bp],ax
25008                                           !BCC_EOS
25009                                           ! 3299  write_word(0x40,0x4C, rows * cols * 2);
25010                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25011 6662           8A46         F5            mov	al,-$B[bp]
25012 6665           30E4                       xor	ah,ah
25013 6667           8B4E         FC            mov	cx,-4[bp]
25014 666A           F7E9                       imul	cx
25015                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25016 666C           D1E0                       shl	ax,*1
25017                                           ! Debug: list unsigned int = ax+0 (used reg = )
25018 666E           50                         push	ax
25019                                           ! Debug: list int = const $4C (used reg = )
25020 666F           B8                   004C  mov	ax,*$4C
25021 6672           50                         push	ax
25022                                           ! Debug: list int = const $40 (used reg = )
25023 6673           B8                   0040  mov	ax,*$40
25024 6676           50                         push	ax
25025                                           ! Debug: func () void = write_word+0 (used reg = )
25026 6677           E8         170F            call	_write_word
25027 667A           83C4                   06  add	sp,*6
25028                                           !BCC_EOS
25029                                           ! 3300 }
25030 667D           89EC                       mov	sp,bp
25031 667F           5D                         pop	bp
25032 6680           C3                         ret
25033                                           ! 3301 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25034                                           ! Register BX used in function set_scan_lines
25035                       00006681            _biosfn_load_text_user_pat:
25036                                           !BCC_EOS
25037                                           !BCC_EOS
25038                                           !BCC_EOS
25039                                           !BCC_EOS
25040                                           !BCC_EOS
25041                                           !BCC_EOS
25042                                           !BCC_EOS
25043                                           ! 3302 {
25044                                           ! 3303  Bit16u blockaddr,dest,i,src;
25045                                           !BCC_EOS
25046                                           ! 3304  get_font_access();
25047 6681           55                         push	bp
25048 6682           89E5                       mov	bp,sp
25049 6684           83C4                   F8  add	sp,*-8
25050                                           ! Debug: func () void = get_font_access+0 (used reg = )
25051 6687           E8         FE57            call	_get_font_access
25052                                           !BCC_EOS
25053                                           ! 3305  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25054                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25055 668A           8A46         0E            mov	al,$E[bp]
25056 668D           24                     04  and	al,*4
25057                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25058 668F           30E4                       xor	ah,ah
25059 6691           88C4                       mov	ah,al
25060 6693           30C0                       xor	al,al
25061 6695           B1                     03  mov	cl,*3
25062 6697           D3E0                       shl	ax,cl
25063 6699           50                         push	ax
25064                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25065 669A           8A46         0E            mov	al,$E[bp]
25066 669D           24                     03  and	al,*3
25067                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25068 669F           30E4                       xor	ah,ah
25069 66A1           88C4                       mov	ah,al
25070 66A3           30C0                       xor	al,al
25071 66A5           B1                     06  mov	cl,*6
25072 66A7           D3E0                       shl	ax,cl
25073                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25074 66A9           0346         F6            add	ax,-$A[bp]
25075 66AC           44                         inc	sp
25076 66AD           44                         inc	sp
25077                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25078 66AE           8946         FE            mov	-2[bp],ax
25079                                           !BCC_EOS
25080                                           ! 3306  for(i=0;i<CX;i++)
25081                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25082 66B1           31C0                       xor	ax,ax
25083 66B3           8946         FA            mov	-6[bp],ax
25084                                           !BCC_EOS
25085                                           !BCC_EOS
25086                                           ! 3307   {
25087 66B6           EB           44            jmp .201
25088                       000066B8            .202:
25089                                           ! 3308    src = BP + i * BH;
25090                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25091 66B8           8A46         10            mov	al,$10[bp]
25092 66BB           30E4                       xor	ah,ah
25093 66BD           89C3                       mov	bx,ax
25094 66BF           8B46         FA            mov	ax,-6[bp]
25095 66C2           89D9                       mov	cx,bx
25096 66C4           F7E9                       imul	cx
25097                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25098                                           ! Debug: expression subtree swapping
25099 66C6           0346         08            add	ax,8[bp]
25100                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25101 66C9           8946         F8            mov	-8[bp],ax
25102                                           !BCC_EOS
25103                                           ! 3309    dest = blockaddr + (DX + i) * 32;
25104                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25105 66CC           8B46         0C            mov	ax,$C[bp]
25106 66CF           0346         FA            add	ax,-6[bp]
25107                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25108 66D2           B1                     05  mov	cl,*5
25109 66D4           D3E0                       shl	ax,cl
25110                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25111                                           ! Debug: expression subtree swapping
25112 66D6           0346         FE            add	ax,-2[bp]
25113                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25114 66D9           8946         FC            mov	-4[bp],ax
25115                                           !BCC_EOS
25116                                           ! 3310    memcpyb(0xA000, dest, ES, src, BH);
25117                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25118 66DC           8A46         10            mov	al,$10[bp]
25119 66DF           30E4                       xor	ah,ah
25120 66E1           50                         push	ax
25121                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25122 66E2           FF76         F8            push	-8[bp]
25123                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25124 66E5           FF76         06            push	6[bp]
25125                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25126 66E8           FF76         FC            push	-4[bp]
25127                                           ! Debug: list unsigned int = const $A000 (used reg = )
25128 66EB           B8                   A000  mov	ax,#$A000
25129 66EE           50                         push	ax
25130                                           ! Debug: func () void = memcpyb+0 (used reg = )
25131 66EF           E8         15F9            call	_memcpyb
25132 66F2           83C4                   0A  add	sp,*$A
25133                                           !BCC_EOS
25134                                           ! 3311   }
25135                                           ! 3312  release_font_access();
25136                       000066F5            .200:
25137                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25138 66F5           8B46         FA            mov	ax,-6[bp]
25139 66F8           40                         inc	ax
25140 66F9           8946         FA            mov	-6[bp],ax
25141                       000066FC            .201:
25142                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25143 66FC           8B46         FA            mov	ax,-6[bp]
25144 66FF           3B46         0A            cmp	ax,$A[bp]
25145 6702           72           B4            jb 	.202
25146                       00006704            .203:
25147                       00006704            .1FF:
25148                                           ! Debug: func () void = release_font_access+0 (used reg = )
25149 6704           E8         FDFD            call	_release_font_access
25150                                           !BCC_EOS
25151                                           ! 3313  if(AL>=0x10)
25152                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25153 6707           8A46         04            mov	al,4[bp]
25154 670A           3C                     10  cmp	al,*$10
25155 670C           72           0B            jb  	.204
25156                       0000670E            .205:
25157                                           ! 3314   {
25158                                           ! 3315    set_scan_lines(BH);
25159                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25160 670E           8A46         10            mov	al,$10[bp]
25161 6711           30E4                       xor	ah,ah
25162 6713           50                         push	ax
25163                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25164 6714           E8         FE21            call	_set_scan_lines
25165 6717           44                         inc	sp
25166 6718           44                         inc	sp
25167                                           !BCC_EOS
25168                                           ! 3316   }
25169                                           ! 3317 }
25170                       00006719            .204:
25171 6719           89EC                       mov	sp,bp
25172 671B           5D                         pop	bp
25173 671C           C3                         ret
25174                                           ! 3318 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25175                                           ! Register BX used in function biosfn_load_text_user_pat
25176                       0000671D            _biosfn_load_text_8_14_pat:
25177                                           !BCC_EOS
25178                                           !BCC_EOS
25179                                           ! 3319 {
25180                                           ! 3320  Bit16u blockaddr,dest,i,src;
25181                                           !BCC_EOS
25182                                           ! 3321  get_font_access();
25183 671D           55                         push	bp
25184 671E           89E5                       mov	bp,sp
25185 6720           83C4                   F8  add	sp,*-8
25186                                           ! Debug: func () void = get_font_access+0 (used reg = )
25187 6723           E8         FDBB            call	_get_font_access
25188                                           !BCC_EOS
25189                                           ! 3322  
25190                                           ! 3322 blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25191                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25192 6726           8A46         06            mov	al,6[bp]
25193 6729           24                     04  and	al,*4
25194                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25195 672B           30E4                       xor	ah,ah
25196 672D           88C4                       mov	ah,al
25197 672F           30C0                       xor	al,al
25198 6731           B1                     03  mov	cl,*3
25199 6733           D3E0                       shl	ax,cl
25200 6735           50                         push	ax
25201                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25202 6736           8A46         06            mov	al,6[bp]
25203 6739           24                     03  and	al,*3
25204                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25205 673B           30E4                       xor	ah,ah
25206 673D           88C4                       mov	ah,al
25207 673F           30C0                       xor	al,al
25208 6741           B1                     06  mov	cl,*6
25209 6743           D3E0                       shl	ax,cl
25210                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25211 6745           0346         F6            add	ax,-$A[bp]
25212 6748           44                         inc	sp
25213 6749           44                         inc	sp
25214                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25215 674A           8946         FE            mov	-2[bp],ax
25216                                           !BCC_EOS
25217                                           ! 3323  for(i=0;i<0x100;i++)
25218                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25219 674D           31C0                       xor	ax,ax
25220 674F           8946         FA            mov	-6[bp],ax
25221                                           !BCC_EOS
25222                                           !BCC_EOS
25223                                           ! 3324   {
25224 6752           EB           41            jmp .208
25225                       00006754            .209:
25226                                           ! 3325    src = i * 14;
25227                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25228 6754           8B46         FA            mov	ax,-6[bp]
25229 6757           89C2                       mov	dx,ax
25230 6759           B1                     03  mov	cl,*3
25231 675B           D3E0                       shl	ax,cl
25232 675D           29D0                       sub	ax,dx
25233 675F           D1E0                       shl	ax,*1
25234                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25235 6761           8946         F8            mov	-8[bp],ax
25236                                           !BCC_EOS
25237                                           ! 3326    dest = blockaddr + i * 32;
25238                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25239 6764           8B46         FA            mov	ax,-6[bp]
25240 6767           B1                     05  mov	cl,*5
25241 6769           D3E0                       shl	ax,cl
25242                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25243                                           ! Debug: expression subtree swapping
25244 676B           0346         FE            add	ax,-2[bp]
25245                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25246 676E           8946         FC            mov	-4[bp],ax
25247                                           !BCC_EOS
25248                                           ! 3327    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25249                                           ! Debug: list int = const $E (used reg = )
25250 6771           B8                   000E  mov	ax,*$E
25251 6774           50                         push	ax
25252                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25253 6775           8B5E         F8            mov	bx,-8[bp]
25254                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25255                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25256 6778           81C3                 1751  add	bx,#_vgafont14
25257 677C           53                         push	bx
25258                                           ! Debug: list unsigned int = const $C000 (used reg = )
25259 677D           B8                   C000  mov	ax,#$C000
25260 6780           50                         push	ax
25261                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25262 6781           FF76         FC            push	-4[bp]
25263                                           ! Debug: list unsigned int = const $A000 (used reg = )
25264 6784           B8                   A000  mov	ax,#$A000
25265 6787           50                         push	ax
25266                                           ! Debug: func () void = memcpyb+0 (used reg = )
25267 6788           E8         1560            call	_memcpyb
25268 678B           83C4                   0A  add	sp,*$A
25269                                           !BCC_EOS
25270                                           ! 3328   }
25271                                           ! 3329  release_font_access();
25272                       0000678E            .207:
25273                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25274 678E           8B46         FA            mov	ax,-6[bp]
25275 6791           40                         inc	ax
25276 6792           8946         FA            mov	-6[bp],ax
25277                       00006795            .208:
25278                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25279 6795           8B46         FA            mov	ax,-6[bp]
25280 6798           3D                   0100  cmp	ax,#$100
25281 679B           72           B7            jb 	.209
25282                       0000679D            .20A:
25283                       0000679D            .206:
25284                                           ! Debug: func () void = release_font_access+0 (used reg = )
25285 679D           E8         FD64            call	_release_font_access
25286                                           !BCC_EOS
25287                                           ! 3330  if(AL>=0x10)
25288                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25289 67A0           8A46         04            mov	al,4[bp]
25290 67A3           3C                     10  cmp	al,*$10
25291 67A5           72           09            jb  	.20B
25292                       000067A7            .20C:
25293                                           ! 3331   {
25294                                           ! 3332    set_scan_lines(14);
25295                                           ! Debug: list int = const $E (used reg = )
25296 67A7           B8                   000E  mov	ax,*$E
25297 67AA           50                         push	ax
25298                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25299 67AB           E8         FD8A            call	_set_scan_lines
25300 67AE           44                         inc	sp
25301 67AF           44                         inc	sp
25302                                           !BCC_EOS
25303                                           ! 3333   }
25304                                           ! 3334 }
25305                       000067B0            .20B:
25306 67B0           89EC                       mov	sp,bp
25307 67B2           5D                         pop	bp
25308 67B3           C3                         ret
25309                                           ! 3335 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25310                                           ! Register BX used in function biosfn_load_text_8_14_pat
25311                       000067B4            _biosfn_load_text_8_8_pat:
25312                                           !BCC_EOS
25313                                           !BCC_EOS
25314                                           ! 3336 {
25315                                           ! 3337  Bit16u blockaddr,dest,i,src;
25316                                           !BCC_EOS
25317                                           ! 3338  get_font_access();
25318 67B4           55                         push	bp
25319 67B5           89E5                       mov	bp,sp
25320 67B7           83C4                   F8  add	sp,*-8
25321                                           ! Debug: func () void = get_font_access+0 (used reg = )
25322 67BA           E8         FD24            call	_get_font_access
25323                                           !BCC_EOS
25324                                           ! 3339  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25325                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25326 67BD           8A46         06            mov	al,6[bp]
25327 67C0           24                     04  and	al,*4
25328                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25329 67C2           30E4                       xor	ah,ah
25330 67C4           88C4                       mov	ah,al
25331 67C6           30C0                       xor	al,al
25332 67C8           B1                     03  mov	cl,*3
25333 67CA           D3E0                       shl	ax,cl
25334 67CC           50                         push	ax
25335                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25336 67CD           8A46         06            mov	al,6[bp]
25337 67D0           24                     03  and	al,*3
25338                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25339 67D2           30E4                       xor	ah,ah
25340 67D4           88C4                       mov	ah,al
25341 67D6           30C0                       xor	al,al
25342 67D8           B1                     06  mov	cl,*6
25343 67DA           D3E0                       shl	ax,cl
25344                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25345 67DC           0346         F6            add	ax,-$A[bp]
25346 67DF           44                         inc	sp
25347 67E0           44                         inc	sp
25348                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25349 67E1           8946         FE            mov	-2[bp],ax
25350                                           !BCC_EOS
25351                                           ! 3340  for(i=0;i<0x100;i++)
25352                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25353 67E4           31C0                       xor	ax,ax
25354 67E6           8946         FA            mov	-6[bp],ax
25355                                           !BCC_EOS
25356                                           !BCC_EOS
25357                                           ! 3341   {
25358 67E9           EB           3B            jmp .20F
25359                       000067EB            .210:
25360                                           ! 3342    src = i * 8;
25361                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25362 67EB           8B46         FA            mov	ax,-6[bp]
25363 67EE           B1                     03  mov	cl,*3
25364 67F0           D3E0                       shl	ax,cl
25365                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25366 67F2           8946         F8            mov	-8[bp],ax
25367                                           !BCC_EOS
25368                                           ! 3343    dest = blockaddr + i * 32;
25369                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25370 67F5           8B46         FA            mov	ax,-6[bp]
25371 67F8           B1                     05  mov	cl,*5
25372 67FA           D3E0                       shl	ax,cl
25373                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25374                                           ! Debug: expression subtree swapping
25375 67FC           0346         FE            add	ax,-2[bp]
25376                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25377 67FF           8946         FC            mov	-4[bp],ax
25378                                           !BCC_EOS
25379                                           ! 3344    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25380                                           ! Debug: list int = const 8 (used reg = )
25381 6802           B8                   0008  mov	ax,*8
25382 6805           50                         push	ax
25383                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25384 6806           8B5E         F8            mov	bx,-8[bp]
25385                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25386                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25387 6809           81C3                 0F51  add	bx,#_vgafont8
25388 680D           53                         push	bx
25389                                           ! Debug: list unsigned int = const $C000 (used reg = )
25390 680E           B8                   C000  mov	ax,#$C000
25391 6811           50                         push	ax
25392                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25393 6812           FF76         FC            push	-4[bp]
25394                                           ! Debug: list unsigned int = const $A000 (used reg = )
25395 6815           B8                   A000  mov	ax,#$A000
25396 6818           50                         push	ax
25397                                           ! Debug: func () void = memcpyb+0 (used reg = )
25398 6819           E8         14CF            call	_memcpyb
25399 681C           83C4                   0A  add	sp,*$A
25400                                           !BCC_EOS
25401                                           ! 3345   }
25402                                           ! 3346  release_font_access();
25403                       0000681F            .20E:
25404                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25405 681F           8B46         FA            mov	ax,-6[bp]
25406 6822           40                         inc	ax
25407 6823           8946         FA            mov	-6[bp],ax
25408                       00006826            .20F:
25409                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25410 6826           8B46         FA            mov	ax,-6[bp]
25411 6829           3D                   0100  cmp	ax,#$100
25412 682C           72           BD            jb 	.210
25413                       0000682E            .211:
25414                       0000682E            .20D:
25415                                           ! Debug: func () void = release_font_access+0 (used reg = )
25416 682E           E8         FCD3            call	_release_font_access
25417                                           !BCC_EOS
25418                                           ! 3347  if(AL>=0x10)
25419                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25420 6831           8A46         04            mov	al,4[bp]
25421 6834           3C                     10  cmp	al,*$10
25422 6836           72           09            jb  	.212
25423                       00006838            .213:
25424                                           ! 3348   {
25425                                           ! 3349    set_scan_lines(8);
25426                                           ! Debug: list int = const 8 (used reg = )
25427 6838           B8                   0008  mov	ax,*8
25428 683B           50                         push	ax
25429                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25430 683C           E8         FCF9            call	_set_scan_lines
25431 683F           44                         inc	sp
25432 6840           44                         inc	sp
25433                                           !BCC_EOS
25434                                           ! 3350   }
25435                                           ! 3351 }
25436                       00006841            .212:
25437 6841           89EC                       mov	sp,bp
25438 6843           5D                         pop	bp
25439 6844           C3                         ret
25440                                           ! 3352 #asm
25441                                           !BCC_ASM
25442                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25443                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25444                       00006845            biosfn_set_text_block_specifier:
25445 6845           50                           push ax
25446 6846           52                           push dx
25447 6847           BA                   03C4    mov dx, # 0x3c4
25448 684A           88DC                         mov ah, bl
25449 684C           B0                     03    mov al, #0x03
25450 684E           EF                           out dx, ax
25451 684F           5A                           pop dx
25452 6850           58                           pop ax
25453 6851           C3                           ret
25454                                           ! 3363 endasm
25455                                           !BCC_ENDASM
25456                                           ! 3364 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25457                                           ! Register BX used in function biosfn_load_text_8_8_pat
25458                       00006852            _biosfn_load_text_8_16_pat:
25459                                           !BCC_EOS
25460                                           !BCC_EOS
25461                                           ! 3365 {
25462                                           ! 3366  Bit16u blockaddr,dest,i,src;
25463                                           !BCC_EOS
25464                                           ! 3367  get_font_access();
25465 6852           55                         push	bp
25466 6853           89E5                       mov	bp,sp
25467 6855           83C4                   F8  add	sp,*-8
25468                                           ! Debug: func () void = get_font_access+0 (used reg = )
25469 6858           E8         FC86            call	_get_font_access
25470                                           !BCC_EOS
25471                                           ! 3368  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25472                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25473 685B           8A46         06            mov	al,6[bp]
25474 685E           24                     04  and	al,*4
25475                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25476 6860           30E4                       xor	ah,ah
25477 6862           88C4                       mov	ah,al
25478 6864           30C0                       xor	al,al
25479 6866           B1                     03  mov	cl,*3
25480 6868           D3E0                       shl	ax,cl
25481 686A           50                         push	ax
25482                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25483 686B           8A46         06            mov	al,6[bp]
25484 686E           24                     03  and	al,*3
25485                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25486 6870           30E4                       xor	ah,ah
25487 6872           88C4                       mov	ah,al
25488 6874           30C0                       xor	al,al
25489 6876           B1                     06  mov	cl,*6
25490 6878           D3E0                       shl	ax,cl
25491                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25492 687A           0346         F6            add	ax,-$A[bp]
25493 687D           44                         inc	sp
25494 687E           44                         inc	sp
25495                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25496 687F           8946         FE            mov	-2[bp],ax
25497                                           !BCC_EOS
25498                                           ! 3369  for(i=0;i<0x100;i++)
25499                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25500 6882           31C0                       xor	ax,ax
25501 6884           8946         FA            mov	-6[bp],ax
25502                                           !BCC_EOS
25503                                           !BCC_EOS
25504                                           ! 3370   {
25505 6887           EB           3B            jmp .216
25506                       00006889            .217:
25507                                           ! 3371    src = i * 16;
25508                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25509 6889           8B46         FA            mov	ax,-6[bp]
25510 688C           B1                     04  mov	cl,*4
25511 688E           D3E0                       shl	ax,cl
25512                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25513 6890           8946         F8            mov	-8[bp],ax
25514                                           !BCC_EOS
25515                                           ! 3372    dest = blockaddr + i * 32;
25516                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25517 6893           8B46         FA            mov	ax,-6[bp]
25518 6896           B1                     05  mov	cl,*5
25519 6898           D3E0                       shl	ax,cl
25520                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25521                                           ! Debug: expression subtree swapping
25522 689A           0346         FE            add	ax,-2[bp]
25523                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25524 689D           8946         FC            mov	-4[bp],ax
25525                                           !BCC_EOS
25526                                           ! 3373    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25527                                           ! Debug: list int = const $10 (used reg = )
25528 68A0           B8                   0010  mov	ax,*$10
25529 68A3           50                         push	ax
25530                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25531 68A4           8B5E         F8            mov	bx,-8[bp]
25532                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25533                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25534 68A7           81C3                 2551  add	bx,#_vgafont16
25535 68AB           53                         push	bx
25536                                           ! Debug: list unsigned int = const $C000 (used reg = )
25537 68AC           B8                   C000  mov	ax,#$C000
25538 68AF           50                         push	ax
25539                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25540 68B0           FF76         FC            push	-4[bp]
25541                                           ! Debug: list unsigned int = const $A000 (used reg = )
25542 68B3           B8                   A000  mov	ax,#$A000
25543 68B6           50                         push	ax
25544                                           ! Debug: func () void = memcpyb+0 (used reg = )
25545 68B7           E8         1431            call	_memcpyb
25546 68BA           83C4                   0A  add	sp,*$A
25547                                           !BCC_EOS
25548                                           ! 3374   }
25549                                           ! 3375  release_font_access();
25550                       000068BD            .215:
25551                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25552 68BD           8B46         FA            mov	ax,-6[bp]
25553 68C0           40                         inc	ax
25554 68C1           8946         FA            mov	-6[bp],ax
25555                       000068C4            .216:
25556                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25557 68C4           8B46         FA            mov	ax,-6[bp]
25558 68C7           3D                   0100  cmp	ax,#$100
25559 68CA           72           BD            jb 	.217
25560                       000068CC            .218:
25561                       000068CC            .214:
25562                                           ! Debug: func () void = release_font_access+0 (used reg = )
25563 68CC           E8         FC35            call	_release_font_access
25564                                           !BCC_EOS
25565                                           ! 3376  if(AL>=0x10)
25566                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25567 68CF           8A46         04            mov	al,4[bp]
25568 68D2           3C                     10  cmp	al,*$10
25569 68D4           72           09            jb  	.219
25570                       000068D6            .21A:
25571                                           ! 3377   {
25572                                           ! 3378    set_scan_lines(16);
25573                                           ! Debug: list int = const $10 (used reg = )
25574 68D6           B8                   0010  mov	ax,*$10
25575 68D9           50                         push	ax
25576                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25577 68DA           E8         FC5B            call	_set_scan_lines
25578 68DD           44                         inc	sp
25579 68DE           44                         inc	sp
25580                                           !BCC_EOS
25581                                           ! 3379   }
25582                                           ! 3380 }
25583                       000068DF            .219:
25584 68DF           89EC                       mov	sp,bp
25585 68E1           5D                         pop	bp
25586 68E2           C3                         ret
25587                                           ! 3381 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25588                                           ! Register BX used in function biosfn_load_text_8_16_pat
25589                       000068E3            _biosfn_load_gfx_8_8_chars:
25590                                           !BCC_EOS
25591                                           !BCC_EOS
25592                                           ! 3382 {
25593                                           ! 3383     write_word(0x0, 0x1F*4, BP);
25594 68E3           55                         push	bp
25595 68E4           89E5                       mov	bp,sp
25596                                           ! Debug: list unsigned short BP = [S+2+4] (used reg = )
25597 68E6           FF76         06            push	6[bp]
25598                                           ! Debug: list int = const $7C (used reg = )
25599 68E9           B8                   007C  mov	ax,*$7C
25600 68EC           50                         push	ax
25601                                           ! Debug: list int = const 0 (used reg = )
25602 68ED           31C0                       xor	ax,ax
25603 68EF           50                         push	ax
25604                                           ! Debug: func () void = write_word+0 (used reg = )
25605 68F0           E8         1496            call	_write_word
25606 68F3           89EC                       mov	sp,bp
25607                                           !BCC_EOS
25608                                           ! 3384     write_word(0x0, 0x1F*4+2, ES);
25609                                           ! Debug: list unsigned short ES = [S+2+2] (used reg = )
25610 68F5           FF76         04            push	4[bp]
25611                                           ! Debug: list int = const $7E (used reg = )
25612 68F8           B8                   007E  mov	ax,*$7E
25613 68FB           50                         push	ax
25614                                           ! Debug: list int = const 0 (used reg = )
25615 68FC           31C0                       xor	ax,ax
25616 68FE           50                         push	ax
25617                                           ! Debug: func () void = write_word+0 (used reg = )
25618 68FF           E8         1487            call	_write_word
25619 6902           89EC                       mov	sp,bp
25620                                           !BCC_EOS
25621                                           ! 3385     write_byte(0x40, 0x85, 8);
25622                                           ! Debug: list int = const 8 (used reg = )
25623 6904           B8                   0008  mov	ax,*8
25624 6907           50                         push	ax
25625                                           ! Debug: list int = const $85 (used reg = )
25626 6908           B8                   0085  mov	ax,#$85
25627 690B           50                         push	ax
25628                                           ! Debug: list int = const $40 (used reg = )
25629 690C           B8                   0040  mov	ax,*$40
25630 690F           50                         push	ax
25631                                           ! Debug: func () void = write_byte+0 (used reg = )
25632 6910           E8         145E            call	_write_byte
25633 6913           89EC                       mov	sp,bp
25634                                           !BCC_EOS
25635                                           ! 3386 }
25636 6915           5D                         pop	bp
25637 6916           C3                         ret
25638                                           ! 3387 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25639                       00006917            _biosfn_load_gfx_user_chars:
25640                                           !BCC_EOS
25641                                           !BCC_EOS
25642                                           !BCC_EOS
25643                                           !BCC_EOS
25644                                           !BCC_EOS
25645                                           ! 3388 {
25646                                           ! 3389     Bit8u mode; Bit8u line;
25647                                           !BCC_EOS
25648                                           !BCC_EOS
25649                                           ! 3390     write_word(0x0, 0x43*4, BP);
25650 6917           55                         push	bp
25651 6918           89E5                       mov	bp,sp
25652 691A           4C                         dec	sp
25653 691B           4C                         dec	sp
25654                                           ! Debug: list unsigned short BP = [S+4+4] (used reg = )
25655 691C           FF76         06            push	6[bp]
25656                                           ! Debug: list int = const $10C (used reg = )
25657 691F           B8                   010C  mov	ax,#$10C
25658 6922           50                         push	ax
25659                                           ! Debug: list int = const 0 (used reg = )
25660 6923           31C0                       xor	ax,ax
25661 6925           50                         push	ax
25662                                           ! Debug: func () void = write_word+0 (used reg = )
25663 6926           E8         1460            call	_write_word
25664 6929           83C4                   06  add	sp,*6
25665                                           !BCC_EOS
25666                                           ! 3391     write_word(0x0, 0x43*4+2, ES);
25667                                           ! Debug: list unsigned short ES = [S+4+2] (used reg = )
25668 692C           FF76         04            push	4[bp]
25669                                           ! Debug: list int = const $10E (used reg = )
25670 692F           B8                   010E  mov	ax,#$10E
25671 6932           50                         push	ax
25672                                           ! Debug: list int = const 0 (used reg = )
25673 6933           31C0                       xor	ax,ax
25674 6935           50                         push	ax
25675                                           ! Debug: func () void = write_word+0 (used reg = )
25676 6936           E8         1450            call	_write_word
25677 6939           83C4                   06  add	sp,*6
25678                                           !BCC_EOS
25679                                           ! 3392     switch (BL) {
25680 693C           8A46         0A            mov	al,$A[bp]
25681 693F           EB           55            jmp .21D
25682                                           ! 3393     case 0:
25683                                           ! 3394  write_byte(0x40,0x84, DL-1);
25684                       00006941            .21E:
25685                                           ! Debug: sub int = const 1 to unsigned char DL = [S+4+$A] (used reg = )
25686 6941           8A46         0C            mov	al,$C[bp]
25687 6944           30E4                       xor	ah,ah
25688                                           ! Debug: list unsigned int = ax-1 (used reg = )
25689 6946           48                         dec	ax
25690 6947           50                         push	ax
25691                                           ! Debug: list int = const $84 (used reg = )
25692 6948           B8                   0084  mov	ax,#$84
25693 694B           50                         push	ax
25694                                           ! Debug: list int = const $40 (used reg = )
25695 694C           B8                   0040  mov	ax,*$40
25696 694F           50                         push	ax
25697                                           ! Debug: func () void = write_byte+0 (used reg = )
25698 6950           E8         141E            call	_write_byte
25699 6953           83C4                   06  add	sp,*6
25700                                           !BCC_EOS
25701                                           ! 3395  break;
25702 6956           EB           50            jmp .21B
25703                                           !BCC_EOS
25704                                           ! 3396     case 1:
25705                                           ! 3397  write_byte(0x40,0x84, 13);
25706                       00006958            .21F:
25707                                           ! Debug: list int = const $D (used reg = )
25708 6958           B8                   000D  mov	ax,*$D
25709 695B           50                         push	ax
25710                                           ! Debug: list int = const $84 (used reg = )
25711 695C           B8                   0084  mov	ax,#$84
25712 695F           50                         push	ax
25713                                           ! Debug: list int = const $40 (used reg = )
25714 6960           B8                   0040  mov	ax,*$40
25715 6963           50                         push	ax
25716                                           ! Debug: func () void = write_byte+0 (used reg = )
25717 6964           E8         140A            call	_write_byte
25718 6967           83C4                   06  add	sp,*6
25719                                           !BCC_EOS
25720                                           ! 3398  break;
25721 696A           EB           3C            jmp .21B
25722                                           !BCC_EOS
25723                                           ! 3399     case 3:
25724                                           ! 3400  write_byte(0x40,0x84, 42);
25725                       0000696C            .220:
25726                                           ! Debug: list int = const $2A (used reg = )
25727 696C           B8                   002A  mov	ax,*$2A
25728 696F           50                         push	ax
25729                                           ! Debug: list int = const $84 (used reg = )
25730 6970           B8                   0084  mov	ax,#$84
25731 6973           50                         push	ax
25732                                           ! Debug: list int = const $40 (used reg = )
25733 6974           B8                   0040  mov	ax,*$40
25734 6977           50                         push	ax
25735                                           ! Debug: func () void = write_byte+0 (used reg = )
25736 6978           E8         13F6            call	_write_byte
25737 697B           83C4                   06  add	sp,*6
25738                                           !BCC_EOS
25739                                           ! 3401  break;
25740 697E           EB           28            jmp .21B
25741                                           !BCC_EOS
25742                                           ! 3402     case 2:
25743                                           ! 3403     default:
25744                       00006980            .221:
25745                                           ! 3404  write_byte(0x40,0x84, 24);
25746                       00006980            .222:
25747                                           ! Debug: list int = const $18 (used reg = )
25748 6980           B8                   0018  mov	ax,*$18
25749 6983           50                         push	ax
25750                                           ! Debug: list int = const $84 (used reg = )
25751 6984           B8                   0084  mov	ax,#$84
25752 6987           50                         push	ax
25753                                           ! Debug: list int = const $40 (used reg = )
25754 6988           B8                   0040  mov	ax,*$40
25755 698B           50                         push	ax
25756                                           ! Debug: func () void = write_byte+0 (used reg = )
25757 698C           E8         13E2            call	_write_byte
25758 698F           83C4                   06  add	sp,*6
25759                                           !BCC_EOS
25760                                           ! 3405  break;
25761 6992           EB           14            jmp .21B
25762                                           !BCC_EOS
25763                                           ! 3406     }
25764                                           ! 3407     write_byte(0x40, 0x85, CX);
25765 6994           EB           12            jmp .21B
25766                       00006996            .21D:
25767 6996           2C                     00  sub	al,*0
25768 6998           74           A7            je 	.21E
25769 699A           2C                     01  sub	al,*1
25770 699C           74           BA            je 	.21F
25771 699E           2C                     01  sub	al,*1
25772 69A0           74           DE            je 	.221
25773 69A2           2C                     01  sub	al,*1
25774 69A4           74           C6            je 	.220
25775 69A6           EB           D8            jmp	.222
25776                       000069A8            .21B:
25777                       FFFFFFFC            ..FFF5	=	-4
25778                                           ! Debug: list unsigned short CX = [S+4+6] (used reg = )
25779 69A8           FF76         08            push	8[bp]
25780                                           ! Debug: list int = const $85 (used reg = )
25781 69AB           B8                   0085  mov	ax,#$85
25782 69AE           50                         push	ax
25783                                           ! Debug: list int = const $40 (used reg = )
25784 69AF           B8                   0040  mov	ax,*$40
25785 69B2           50                         push	ax
25786                                           ! Debug: func () void = write_byte+0 (used reg = )
25787 69B3           E8         13BB            call	_write_byte
25788 69B6           83C4                   06  add	sp,*6
25789                                           !BCC_EOS
25790                                           ! 3408 }
25791 69B9           89EC                       mov	sp,bp
25792 69BB           5D                         pop	bp
25793 69BC           C3                         ret
25794                                           ! 3409 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25795                       000069BD            _biosfn_load_gfx_8_14_chars:
25796                                           !BCC_EOS
25797                                           ! 3410 {
25798                                           ! 3411     write_word(0x0, 0x43*4, &vgafont14);
25799 69BD           55                         push	bp
25800 69BE           89E5                       mov	bp,sp
25801                                           ! Debug: list * [$E00] unsigned char = vgafont14+0 (used reg = )
25802 69C0           BB                   1751  mov	bx,#_vgafont14
25803 69C3           53                         push	bx
25804                                           ! Debug: list int = const $10C (used reg = )
25805 69C4           B8                   010C  mov	ax,#$10C
25806 69C7           50                         push	ax
25807                                           ! Debug: list int = const 0 (used reg = )
25808 69C8           31C0                       xor	ax,ax
25809 69CA           50                         push	ax
25810                                           ! Debug: func () void = write_word+0 (used reg = )
25811 69CB           E8         13BB            call	_write_word
25812 69CE           89EC                       mov	sp,bp
25813                                           !BCC_EOS
25814                                           ! 3412     write_word(0x0, 0x43*4+2, 0xC000);
25815                                           ! Debug: list unsigned int = const $C000 (used reg = )
25816 69D0           B8                   C000  mov	ax,#$C000
25817 69D3           50                         push	ax
25818                                           ! Debug: list int = const $10E (used reg = )
25819 69D4           B8                   010E  mov	ax,#$10E
25820 69D7           50                         push	ax
25821                                           ! Debug: list int = const 0 (used reg = )
25822 69D8           31C0                       xor	ax,ax
25823 69DA           50                         push	ax
25824                                           ! Debug: func () void = write_word+0 (used reg = )
25825 69DB           E8         13AB            call	_write_word
25826 69DE           89EC                       mov	sp,bp
25827                                           !BCC_EOS
25828                                           ! 3413     switch (BL) {
25829 69E0           8A46         04            mov	al,4[bp]
25830 69E3           EB           3E            jmp .225
25831                                           ! 3414     case 1:
25832                                           ! 3415  write_byte(0x40,0x84, 13);
25833                       000069E5            .226:
25834                                           ! Debug: list int = const $D (used reg = )
25835 69E5           B8                   000D  mov	ax,*$D
25836 69E8           50                         push	ax
25837                                           ! Debug: list int = const $84 (used reg = )
25838 69E9           B8                   0084  mov	ax,#$84
25839 69EC           50                         push	ax
25840                                           ! Debug: list int = const $40 (used reg = )
25841 69ED           B8                   0040  mov	ax,*$40
25842 69F0           50                         push	ax
25843                                           ! Debug: func () void = write_byte+0 (used reg = )
25844 69F1           E8         137D            call	_write_byte
25845 69F4           83C4                   06  add	sp,*6
25846                                           !BCC_EOS
25847                                           ! 3416  break;
25848 69F7           EB           38            jmp .223
25849                                           !BCC_EOS
25850                                           ! 3417     case 3:
25851                                           ! 3418  write_byte(0x40,0x84, 42);
25852                       000069F9            .227:
25853                                           ! Debug: list int = const $2A (used reg = )
25854 69F9           B8                   002A  mov	ax,*$2A
25855 69FC           50                         push	ax
25856                                           ! Debug: list int = const $84 (used reg = )
25857 69FD           B8                   0084  mov	ax,#$84
25858 6A00           50                         push	ax
25859                                           ! Debug: list int = const $40 (used reg = )
25860 6A01           B8                   0040  mov	ax,*$40
25861 6A04           50                         push	ax
25862                                           ! Debug: func () void = write_byte+0 (used reg = )
25863 6A05           E8         1369            call	_write_byte
25864 6A08           83C4                   06  add	sp,*6
25865                                           !BCC_EOS
25866                                           ! 3419  break;
25867 6A0B           EB           24            jmp .223
25868                                           !BCC_EOS
25869                                           ! 3420     case 2:
25870                                           ! 3420 
25871                                           ! 3421     default:
25872                       00006A0D            .228:
25873                                           ! 3422  write_byte(0x40,0x84, 24);
25874                       00006A0D            .229:
25875                                           ! Debug: list int = const $18 (used reg = )
25876 6A0D           B8                   0018  mov	ax,*$18
25877 6A10           50                         push	ax
25878                                           ! Debug: list int = const $84 (used reg = )
25879 6A11           B8                   0084  mov	ax,#$84
25880 6A14           50                         push	ax
25881                                           ! Debug: list int = const $40 (used reg = )
25882 6A15           B8                   0040  mov	ax,*$40
25883 6A18           50                         push	ax
25884                                           ! Debug: func () void = write_byte+0 (used reg = )
25885 6A19           E8         1355            call	_write_byte
25886 6A1C           83C4                   06  add	sp,*6
25887                                           !BCC_EOS
25888                                           ! 3423  break;
25889 6A1F           EB           10            jmp .223
25890                                           !BCC_EOS
25891                                           ! 3424     }
25892                                           ! 3425     write_byte(0x40, 0x85, 14);
25893 6A21           EB           0E            jmp .223
25894                       00006A23            .225:
25895 6A23           2C                     01  sub	al,*1
25896 6A25           74           BE            je 	.226
25897 6A27           2C                     01  sub	al,*1
25898 6A29           74           E2            je 	.228
25899 6A2B           2C                     01  sub	al,*1
25900 6A2D           74           CA            je 	.227
25901 6A2F           EB           DC            jmp	.229
25902                       00006A31            .223:
25903                       FFFFFFFE            ..FFF4	=	-2
25904                                           ! Debug: list int = const $E (used reg = )
25905 6A31           B8                   000E  mov	ax,*$E
25906 6A34           50                         push	ax
25907                                           ! Debug: list int = const $85 (used reg = )
25908 6A35           B8                   0085  mov	ax,#$85
25909 6A38           50                         push	ax
25910                                           ! Debug: list int = const $40 (used reg = )
25911 6A39           B8                   0040  mov	ax,*$40
25912 6A3C           50                         push	ax
25913                                           ! Debug: func () void = write_byte+0 (used reg = )
25914 6A3D           E8         1331            call	_write_byte
25915 6A40           89EC                       mov	sp,bp
25916                                           !BCC_EOS
25917                                           ! 3426 }
25918 6A42           5D                         pop	bp
25919 6A43           C3                         ret
25920                                           ! 3427 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25921                                           ! Register BX used in function biosfn_load_gfx_8_14_chars
25922                       00006A44            _biosfn_load_gfx_8_8_dd_chars:
25923                                           !BCC_EOS
25924                                           ! 3428 {
25925                                           ! 3429     write_word(0x0, 0x43*4, &vgafont8);
25926 6A44           55                         push	bp
25927 6A45           89E5                       mov	bp,sp
25928                                           ! Debug: list * [$800] unsigned char = vgafont8+0 (used reg = )
25929 6A47           BB                   0F51  mov	bx,#_vgafont8
25930 6A4A           53                         push	bx
25931                                           ! Debug: list int = const $10C (used reg = )
25932 6A4B           B8                   010C  mov	ax,#$10C
25933 6A4E           50                         push	ax
25934                                           ! Debug: list int = const 0 (used reg = )
25935 6A4F           31C0                       xor	ax,ax
25936 6A51           50                         push	ax
25937                                           ! Debug: func () void = write_word+0 (used reg = )
25938 6A52           E8         1334            call	_write_word
25939 6A55           89EC                       mov	sp,bp
25940                                           !BCC_EOS
25941                                           ! 3430     write_word(0x0, 0x43*4+2, 0xC000);
25942                                           ! Debug: list unsigned int = const $C000 (used reg = )
25943 6A57           B8                   C000  mov	ax,#$C000
25944 6A5A           50                         push	ax
25945                                           ! Debug: list int = const $10E (used reg = )
25946 6A5B           B8                   010E  mov	ax,#$10E
25947 6A5E           50                         push	ax
25948                                           ! Debug: list int = const 0 (used reg = )
25949 6A5F           31C0                       xor	ax,ax
25950 6A61           50                         push	ax
25951                                           ! Debug: func () void = write_word+0 (used reg = )
25952 6A62           E8         1324            call	_write_word
25953 6A65           89EC                       mov	sp,bp
25954                                           !BCC_EOS
25955                                           ! 3431     switch (BL) {
25956 6A67           8A46         04            mov	al,4[bp]
25957 6A6A           EB           3E            jmp .22C
25958                                           ! 3432     case 1:
25959                                           ! 3433  write_byte(0x40,0x84, 13);
25960                       00006A6C            .22D:
25961                                           ! Debug: list int = const $D (used reg = )
25962 6A6C           B8                   000D  mov	ax,*$D
25963 6A6F           50                         push	ax
25964                                           ! Debug: list int = const $84 (used reg = )
25965 6A70           B8                   0084  mov	ax,#$84
25966 6A73           50                         push	ax
25967                                           ! Debug: list int = const $40 (used reg = )
25968 6A74           B8                   0040  mov	ax,*$40
25969 6A77           50                         push	ax
25970                                           ! Debug: func () void = write_byte+0 (used reg = )
25971 6A78           E8         12F6            call	_write_byte
25972 6A7B           83C4                   06  add	sp,*6
25973                                           !BCC_EOS
25974                                           ! 3434  break;
25975 6A7E           EB           38            jmp .22A
25976                                           !BCC_EOS
25977                                           ! 3435     case 3:
25978                                           ! 3436  write_byte(0x40,0x84, 42);
25979                       00006A80            .22E:
25980                                           ! Debug: list int = const $2A (used reg = )
25981 6A80           B8                   002A  mov	ax,*$2A
25982 6A83           50                         push	ax
25983                                           ! Debug: list int = const $84 (used reg = )
25984 6A84           B8                   0084  mov	ax,#$84
25985 6A87           50                         push	ax
25986                                           ! Debug: list int = const $40 (used reg = )
25987 6A88           B8                   0040  mov	ax,*$40
25988 6A8B           50                         push	ax
25989                                           ! Debug: func () void = write_byte+0 (used reg = )
25990 6A8C           E8         12E2            call	_write_byte
25991 6A8F           83C4                   06  add	sp,*6
25992                                           !BCC_EOS
25993                                           ! 3437  break;
25994 6A92           EB           24            jmp .22A
25995                                           !BCC_EOS
25996                                           ! 3438     case 2:
25997                                           ! 3439     default:
25998                       00006A94            .22F:
25999                                           ! 3440  write_byte(0x40,0x84, 24);
26000                       00006A94            .230:
26001                                           ! Debug: list int = const $18 (used reg = )
26002 6A94           B8                   0018  mov	ax,*$18
26003 6A97           50                         push	ax
26004                                           ! Debug: list int = const $84 (used reg = )
26005 6A98           B8                   0084  mov	ax,#$84
26006 6A9B           50                         push	ax
26007                                           ! Debug: list int = const $40 (used reg = )
26008 6A9C           B8                   0040  mov	ax,*$40
26009 6A9F           50                         push	ax
26010                                           ! Debug: func () void = write_byte+0 (used reg = )
26011 6AA0           E8         12CE            call	_write_byte
26012 6AA3           83C4                   06  add	sp,*6
26013                                           !BCC_EOS
26014                                           ! 3441  break;
26015 6AA6           EB           10            jmp .22A
26016                                           !BCC_EOS
26017                                           ! 3442     }
26018                                           ! 3443     write_byte(0x40, 0x85, 8);
26019 6AA8           EB           0E            jmp .22A
26020                       00006AAA            .22C:
26021 6AAA           2C                     01  sub	al,*1
26022 6AAC           74           BE            je 	.22D
26023 6AAE           2C                     01  sub	al,*1
26024 6AB0           74           E2            je 	.22F
26025 6AB2           2C                     01  sub	al,*1
26026 6AB4           74           CA            je 	.22E
26027 6AB6           EB           DC            jmp	.230
26028                       00006AB8            .22A:
26029                       FFFFFFFE            ..FFF3	=	-2
26030                                           ! Debug: list int = const 8 (used reg = )
26031 6AB8           B8                   0008  mov	ax,*8
26032 6ABB           50                         push	ax
26033                                           ! Debug: list int = const $85 (used reg = )
26034 6ABC           B8                   0085  mov	ax,#$85
26035 6ABF           50                         push	ax
26036                                           ! Debug: list int = const $40 (used reg = )
26037 6AC0           B8                   0040  mov	ax,*$40
26038 6AC3           50                         push	ax
26039                                           ! Debug: func () void = write_byte+0 (used reg = )
26040 6AC4           E8         12AA            call	_write_byte
26041 6AC7           89EC                       mov	sp,bp
26042                                           !BCC_EOS
26043                                           ! 3444 }
26044 6AC9           5D                         pop	bp
26045 6ACA           C3                         ret
26046                                           ! 3445 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26047                                           ! Register BX used in function biosfn_load_gfx_8_8_dd_chars
26048                       00006ACB            _biosfn_load_gfx_8_16_chars:
26049                                           !BCC_EOS
26050                                           ! 3446 {
26051                                           ! 3447     write_word(0x0, 0x43*4, &vgafont16);
26052 6ACB           55                         push	bp
26053 6ACC           89E5                       mov	bp,sp
26054                                           ! Debug: list * [$1000] unsigned char = vgafont16+0 (used reg = )
26055 6ACE           BB                   2551  mov	bx,#_vgafont16
26056 6AD1           53                         push	bx
26057                                           ! Debug: list int = const $10C (used reg = )
26058 6AD2           B8                   010C  mov	ax,#$10C
26059 6AD5           50                         push	ax
26060                                           ! Debug: list int = const 0 (used reg = )
26061 6AD6           31C0                       xor	ax,ax
26062 6AD8           50                         push	ax
26063                                           ! Debug: func () void = write_word+0 (used reg = )
26064 6AD9           E8         12AD            call	_write_word
26065 6ADC           89EC                       mov	sp,bp
26066                                           !BCC_EOS
26067                                           ! 3448     write_word(0x0, 0x43*4+2, 0xC000);
26068                                           ! Debug: list unsigned int = const $C000 (used reg = )
26069 6ADE           B8                   C000  mov	ax,#$C000
26070 6AE1           50                         push	ax
26071                                           ! Debug: list int = const $10E (used reg = )
26072 6AE2           B8                   010E  mov	ax,#$10E
26073 6AE5           50                         push	ax
26074                                           ! Debug: list int = const 0 (used reg = )
26075 6AE6           31C0                       xor	ax,ax
26076 6AE8           50                         push	ax
26077                                           ! Debug: func () void = write_word+0 (used reg = )
26078 6AE9           E8         129D            call	_write_word
26079 6AEC           89EC                       mov	sp,bp
26080                                           !BCC_EOS
26081                                           ! 3449     switch (BL) {
26082 6AEE           8A46         04            mov	al,4[bp]
26083 6AF1           EB           3E            jmp .233
26084                                           ! 3450     case 1:
26085                                           ! 3451  write_byte(0x40,0x84, 13);
26086                       00006AF3            .234:
26087                                           ! Debug: list int = const $D (used reg = )
26088 6AF3           B8                   000D  mov	ax,*$D
26089 6AF6           50                         push	ax
26090                                           ! Debug: list int = const $84 (used reg = )
26091 6AF7           B8                   0084  mov	ax,#$84
26092 6AFA           50                         push	ax
26093                                           ! Debug: list int = const $40 (used reg = )
26094 6AFB           B8                   0040  mov	ax,*$40
26095 6AFE           50                         push	ax
26096                                           ! Debug: func () void = write_byte+0 (used reg = )
26097 6AFF           E8         126F            call	_write_byte
26098 6B02           83C4                   06  add	sp,*6
26099                                           !BCC_EOS
26100                                           ! 3452  break;
26101 6B05           EB           38            jmp .231
26102                                           !BCC_EOS
26103                                           ! 3453     case 3:
26104                                           ! 3454  write_byte(0x40,0x84, 42);
26105                       00006B07            .235:
26106                                           ! Debug: list int = const $2A (used reg = )
26107 6B07           B8                   002A  mov	ax,*$2A
26108 6B0A           50                         push	ax
26109                                           ! Debug: list int = const $84 (used reg = )
26110 6B0B           B8                   0084  mov	ax,#$84
26111 6B0E           50                         push	ax
26112                                           ! Debug: list int = const $40 (used reg = )
26113 6B0F           B8                   0040  mov	ax,*$40
26114 6B12           50                         push	ax
26115                                           ! Debug: func () void = write_byte+0 (used reg = )
26116 6B13           E8         125B            call	_write_byte
26117 6B16           83C4                   06  add	sp,*6
26118                                           !BCC_EOS
26119                                           ! 3455  break;
26120 6B19           EB           24            jmp .231
26121                                           !BCC_EOS
26122                                           ! 3456     case 2:
26123                                           ! 3457     default:
26124                       00006B1B            .236:
26125                                           ! 3458  write_byte(0x40,0x84, 24);
26126                       00006B1B            .237:
26127                                           ! Debug: list int = const $18 (used reg = )
26128 6B1B           B8                   0018  mov	ax,*$18
26129 6B1E           50                         push	ax
26130                                           ! Debug: list int = const $84 (used reg = )
26131 6B1F           B8                   0084  mov	ax,#$84
26132 6B22           50                         push	ax
26133                                           ! Debug: list int = const $40 (used reg = )
26134 6B23           B8                   0040  mov	ax,*$40
26135 6B26           50                         push	ax
26136                                           ! Debug: func () void = write_byte+0 (used reg = )
26137 6B27           E8         1247            call	_write_byte
26138 6B2A           83C4                   06  add	sp,*6
26139                                           !BCC_EOS
26140                                           ! 3459  break;
26141 6B2D           EB           10            jmp .231
26142                                           !BCC_EOS
26143                                           ! 3460     }
26144                                           ! 3461     write_byte(0x40, 0x85, 16);
26145 6B2F           EB           0E            jmp .231
26146                       00006B31            .233:
26147 6B31           2C                     01  sub	al,*1
26148 6B33           74           BE            je 	.234
26149 6B35           2C                     01  sub	al,*1
26150 6B37           74           E2            je 	.236
26151 6B39           2C                     01  sub	al,*1
26152 6B3B           74           CA            je 	.235
26153 6B3D           EB           DC            jmp	.237
26154                       00006B3F            .231:
26155                       FFFFFFFE            ..FFF2	=	-2
26156                                           ! Debug: list int = const $10 (used reg = )
26157 6B3F           B8                   0010  mov	ax,*$10
26158 6B42           50                         push	ax
26159                                           ! Debug: list int = const $85 (used reg = )
26160 6B43           B8                   0085  mov	ax,#$85
26161 6B46           50                         push	ax
26162                                           ! Debug: list int = const $40 (used reg = )
26163 6B47           B8                   0040  mov	ax,*$40
26164 6B4A           50                         push	ax
26165                                           ! Debug: func () void = write_byte+0 (used reg = )
26166 6B4B           E8         1223            call	_write_byte
26167 6B4E           89EC                       mov	sp,bp
26168                                           !BCC_EOS
26169                                           ! 3462 }
26170 6B50           5D                         pop	bp
26171 6B51           C3                         ret
26172                                           ! 3463 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26173                                           ! Register BX used in function biosfn_load_gfx_8_16_chars
26174                                           ! 3464 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26175                       00006B52            _biosfn_get_font_info:
26176                                           !BCC_EOS
26177                                           !BCC_EOS
26178                                           !BCC_EOS
26179                                           !BCC_EOS
26180                                           !BCC_EOS
26181                                           ! 3465 {Bit16u ss=get_SS();
26182 6B52           55                         push	bp
26183 6B53           89E5                       mov	bp,sp
26184 6B55           4C                         dec	sp
26185 6B56           4C                         dec	sp
26186                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26187 6B57           E8         127D            call	_get_SS
26188                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26189 6B5A           8946         FE            mov	-2[bp],ax
26190                                           !BCC_EOS
26191                                           ! 3466  switch(BH)
26192 6B5D           8A46         04            mov	al,4[bp]
26193                                           ! 3467   {case 0x00:
26194 6B60           E9         0143            br 	.23A
26195                                           ! 3468     write_word(ss,ES,read_word(0x00,0x1f*4));
26196                       00006B63            .23B:
26197                                           ! Debug: list int = const $7C (used reg = )
26198 6B63           B8                   007C  mov	ax,*$7C
26199 6B66           50                         push	ax
26200                                           ! Debug: list int = const 0 (used reg = )
26201 6B67           31C0                       xor	ax,ax
26202 6B69           50                         push	ax
26203                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26204 6B6A           E8         11F1            call	_read_word
26205 6B6D           83C4                   04  add	sp,*4
26206                                           ! Debug: list unsigned short = ax+0 (used reg = )
26207 6B70           50                         push	ax
26208                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26209 6B71           FF76         06            push	6[bp]
26210                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26211 6B74           FF76         FE            push	-2[bp]
26212                                           ! Debug: func () void = write_word+0 (used reg = )
26213 6B77           E8         120F            call	_write_word
26214 6B7A           83C4                   06  add	sp,*6
26215                                           !BCC_EOS
26216                                           ! 3469     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26217                                           ! Debug: list int = const $7E (used reg = )
26218 6B7D           B8                   007E  mov	ax,*$7E
26219 6B80           50                         push	ax
26220                                           ! Debug: list int = const 0 (used reg = )
26221 6B81           31C0                       xor	ax,ax
26222 6B83           50                         push	ax
26223                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26224 6B84           E8         11D7            call	_read_word
26225 6B87           83C4                   04  add	sp,*4
26226                                           ! Debug: list unsigned short = ax+0 (used reg = )
26227 6B8A           50                         push	ax
26228                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26229 6B8B           FF76         08            push	8[bp]
26230                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26231 6B8E           FF76         FE            push	-2[bp]
26232                                           ! Debug: func () void = write_word+0 (used reg = )
26233 6B91           E8         11F5            call	_write_word
26234 6B94           83C4                   06  add	sp,*6
26235                                           !BCC_EOS
26236                                           ! 3470     break;
26237 6B97           E9         0131            br 	.238
26238                                           !BCC_EOS
26239                                           ! 3471    case 0x01:
26240                                           ! 3472     write_word(ss,ES,read_word(0x00,0x43*4));
26241                       00006B9A            .23C:
26242                                           ! Debug: list int = const $10C (used reg = )
26243 6B9A           B8                   010C  mov	ax,#$10C
26244 6B9D           50                         push	ax
26245                                           ! Debug: list int = const 0 (used reg = )
26246 6B9E           31C0                       xor	ax,ax
26247 6BA0           50                         push	ax
26248                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26249 6BA1           E8         11BA            call	_read_word
26250 6BA4           83C4                   04  add	sp,*4
26251                                           ! Debug: list unsigned short = ax+0 (used reg = )
26252 6BA7           50                         push	ax
26253                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26254 6BA8           FF76         06            push	6[bp]
26255                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26256 6BAB           FF76         FE            push	-2[bp]
26257                                           ! Debug: func () void = write_word+0 (used reg = )
26258 6BAE           E8         11D8            call	_write_word
26259 6BB1           83C4                   06  add	sp,*6
26260                                           !BCC_EOS
26261                                           ! 3473     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26262                                           ! Debug: list int = const $10E (used reg = )
26263 6BB4           B8                   010E  mov	ax,#$10E
26264 6BB7           50                         push	ax
26265                                           ! Debug: list int = const 0 (used reg = )
26266 6BB8           31C0                       xor	ax,ax
26267 6BBA           50                         push	ax
26268                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26269 6BBB           E8         11A0            call	_read_word
26270 6BBE           83C4                   04  add	sp,*4
26271                                           ! Debug: list unsigned short = ax+0 (used reg = )
26272 6BC1           50                         push	ax
26273                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26274 6BC2           FF76         08            push	8[bp]
26275                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26276 6BC5           FF76         FE            push	-2[bp]
26277                                           ! Debug: func () void = write_word+0 (used reg = )
26278 6BC8           E8         11BE            call	_write_word
26279 6BCB           83C4                   06  add	sp,*6
26280                                           !BCC_EOS
26281                                           ! 3474     break;
26282 6BCE           E9         00FA            br 	.238
26283                                           !BCC_EOS
26284                                           ! 3475    case 0x02:
26285                                           ! 3476     write_word(ss,ES,0xC000);
26286                       00006BD1            .23D:
26287                                           ! Debug: list unsigned int = const $C000 (used reg = )
26288 6BD1           B8                   C000  mov	ax,#$C000
26289 6BD4           50                         push	ax
26290                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26291 6BD5           FF76         06            push	6[bp]
26292                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26293 6BD8           FF76         FE            push	-2[bp]
26294                                           ! Debug: func () void = write_word+0 (used reg = )
26295 6BDB           E8         11AB            call	_write_word
26296 6BDE           83C4                   06  add	sp,*6
26297                                           !BCC_EOS
26298                                           ! 3477     write_word(ss,BP,vgafont14);
26299                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26300 6BE1           BB                   1751  mov	bx,#_vgafont14
26301 6BE4           53                         push	bx
26302                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26303 6BE5           FF76         08            push	8[bp]
26304                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26305 6BE8           FF76         FE            push	-2[bp]
26306                                           ! Debug: func () void = write_word+0 (used reg = )
26307 6BEB           E8         119B            call	_write_word
26308 6BEE           83C4                   06  add	sp,*6
26309                                           !BCC_EOS
26310                                           ! 3478     break;
26311 6BF1           E9         00D7            br 	.238
26312                                           !BCC_EOS
26313                                           ! 3479    case 0x03:
26314                                           ! 3480     write_word(ss,ES,0xC000);
26315                       00006BF4            .23E:
26316                                           ! Debug: list unsigned int = const $C000 (used reg = )
26317 6BF4           B8                   C000  mov	ax,#$C000
26318 6BF7           50                         push	ax
26319                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26320 6BF8           FF76         06            push	6[bp]
26321                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26322 6BFB           FF76         FE            push	-2[bp]
26323                                           ! Debug: func () void = write_word+0 (used reg = )
26324 6BFE           E8         1188            call	_write_word
26325 6C01           83C4                   06  add	sp,*6
26326                                           !BCC_EOS
26327                                           ! 3481     write_word(ss,BP,vgafont8);
26328                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26329 6C04           BB                   0F51  mov	bx,#_vgafont8
26330 6C07           53                         push	bx
26331                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26332 6C08           FF76         08            push	8[bp]
26333                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26334 6C0B           FF76         FE            push	-2[bp]
26335                                           ! Debug: func () void = write_word+0 (used reg = )
26336 6C0E           E8         1178            call	_write_word
26337 6C11           83C4                   06  add	sp,*6
26338                                           !BCC_EOS
26339                                           ! 3482     break;
26340 6C14           E9         00B4            br 	.238
26341                                           !BCC_EOS
26342                                           ! 3483    case 0x04:
26343                                           ! 3484     write_word(ss,ES,0xC000);
26344                       00006C17            .23F:
26345                                           ! Debug: list unsigned int = const $C000 (used reg = )
26346 6C17           B8                   C000  mov	ax,#$C000
26347 6C1A           50                         push	ax
26348                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26349 6C1B           FF76         06            push	6[bp]
26350                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26351 6C1E           FF76         FE            push	-2[bp]
26352                                           ! Debug: func () void = write_word+0 (used reg = )
26353 6C21           E8         1165            call	_write_word
26354 6C24           83C4                   06  add	sp,*6
26355                                           !BCC_EOS
26356                                           ! 3485     write_word(ss,BP,vgafont8+128*8);
26357                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26358 6C27           BB                   1351  mov	bx,#_vgafont8+$400
26359 6C2A           53                         push	bx
26360                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26361 6C2B           FF76         08            push	8[bp]
26362                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26363 6C2E           FF76         FE            push	-2[bp]
26364                                           ! Debug: func () void = write_word+0 (used reg = )
26365 6C31           E8         1155            call	_write_word
26366 6C34           83C4                   06  add	sp,*6
26367                                           !BCC_EOS
26368                                           ! 3486     break;
26369 6C37           E9         0091            br 	.238
26370                                           !BCC_EOS
26371                                           ! 3487    case 0x05:
26372                                           ! 3488     write_word(ss,ES,0xC000);
26373                       00006C3A            .240:
26374                                           ! Debug: list unsigned int = const $C000 (used reg = )
26375 6C3A           B8                   C000  mov	ax,#$C000
26376 6C3D           50                         push	ax
26377                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26378 6C3E           FF76         06            push	6[bp]
26379                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26380 6C41           FF76         FE            push	-2[bp]
26381                                           ! Debug: func () void = write_word+0 (used reg = )
26382 6C44           E8         1142            call	_write_word
26383 6C47           83C4                   06  add	sp,*6
26384                                           !BCC_EOS
26385                                           ! 3489     write_word(ss,BP,vgafont14alt);
26386                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26387 6C4A           BB                   3551  mov	bx,#_vgafont14alt
26388 6C4D           53                         push	bx
26389                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26390 6C4E           FF76         08            push	8[bp]
26391                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26392 6C51           FF76         FE            push	-2[bp]
26393                                           ! Debug: func () void = write_word+0 (used reg = )
26394 6C54           E8         1132            call	_write_word
26395 6C57           83C4                   06  add	sp,*6
26396                                           !BCC_EOS
26397                                           ! 3490     break;
26398 6C5A           EB           6F            jmp .238
26399                                           !BCC_EOS
26400                                           ! 3491    case 0x06:
26401                                           ! 3492     write_word(ss,ES,0xC000);
26402                       00006C5C            .241:
26403                                           ! Debug: list unsigned int = const $C000 (used reg = )
26404 6C5C           B8                   C000  mov	ax,#$C000
26405 6C5F           50                         push	ax
26406                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26407 6C60           FF76         06            push	6[bp]
26408                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26409 6C63           FF76         FE            push	-2[bp]
26410                                           ! Debug: func () void = write_word+0 (used reg = )
26411 6C66           E8         1120            call	_write_word
26412 6C69           83C4                   06  add	sp,*6
26413                                           !BCC_EOS
26414                                           ! 3493     write_word(ss,BP,vgafont16);
26415                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26416 6C6C           BB                   2551  mov	bx,#_vgafont16
26417 6C6F           53                         push	bx
26418                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26419 6C70           FF76         08            push	8[bp]
26420                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26421 6C73           FF76         FE            push	-2[bp]
26422                                           ! Debug: func () void = write_word+0 (used reg = )
26423 6C76           E8         1110            call	_write_word
26424 6C79           83C4                   06  add	sp,*6
26425                                           !BCC_EOS
26426                                           ! 3494     break;
26427 6C7C           EB           4D            jmp .238
26428                                           !BCC_EOS
26429                                           ! 3495    case 0x07:
26430                                           ! 3496     write_word(ss,ES,0xC000);
26431                       00006C7E            .242:
26432                                           ! Debug: list unsigned int = const $C000 (used reg = )
26433 6C7E           B8                   C000  mov	ax,#$C000
26434 6C81           50                         push	ax
26435                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26436 6C82           FF76         06            push	6[bp]
26437                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26438 6C85           FF76         FE            push	-2[bp]
26439                                           ! Debug: func () void = write_word+0 (used reg = )
26440 6C88           E8         10FE            call	_write_word
26441 6C8B           83C4                   06  add	sp,*6
26442                                           !BCC_EOS
26443                                           ! 3497     write_word(ss,BP,vgafont16alt);
26444                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26445 6C8E           BB                   3552  mov	bx,#_vgafont16alt
26446 6C91           53                         push	bx
26447                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26448 6C92           FF76         08            push	8[bp]
26449                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26450 6C95           FF76         FE            push	-2[bp]
26451                                           ! Debug: func () void = write_word+0 (used reg = )
26452 6C98           E8         10EE            call	_write_word
26453 6C9B           83C4                   06  add	sp,*6
26454                                           !BCC_EOS
26455                                           ! 3498     break;
26456 6C9E           EB           2B            jmp .238
26457                                           !BCC_EOS
26458                                           ! 3499    default:
26459                                           ! 3500     return;
26460                       00006CA0            .243:
26461 6CA0           89EC                       mov	sp,bp
26462 6CA2           5D                         pop	bp
26463 6CA3           C3                         ret
26464                                           !BCC_EOS
26465                                           ! 3501   }
26466                                           ! 3502  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26467 6CA4           EB           25            jmp .238
26468                       00006CA6            .23A:
26469 6CA6           2C                     00  sub	al,*0
26470 6CA8           72           F6            jb 	.243
26471 6CAA           3C                     07  cmp	al,*7
26472 6CAC           77           1B            ja  	.244
26473 6CAE           30E4                       xor	ah,ah
26474 6CB0           D1E0                       shl	ax,*1
26475 6CB2           89C3                       mov	bx,ax
26476 6CB4           2E                         seg	cs
26477 6CB5           FFA7       6CB9            br	.245[bx]
26478                       00006CB9            .245:
26479 6CB9                      6B63            .word	.23B
26480 6CBB                      6B9A            .word	.23C
26481 6CBD                      6BD1            .word	.23D
26482 6CBF                      6BF4            .word	.23E
26483 6CC1                      6C17            .word	.23F
26484 6CC3                      6C3A            .word	.240
26485 6CC5                      6C5C            .word	.241
26486 6CC7                      6C7E            .word	.242
26487                       00006CC9            .244:
26488 6CC9           EB           D5            jmp	.243
26489                       00006CCB            .238:
26490                       FFFFFFFC            ..FFF1	=	-4
26491                                           ! Debug: list int = const $85 (used reg = )
26492 6CCB           B8                   0085  mov	ax,#$85
26493 6CCE           50                         push	ax
26494                                           ! Debug: list int = const $40 (used reg = )
26495 6CCF           B8                   0040  mov	ax,*$40
26496 6CD2           50                         push	ax
26497                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26498 6CD3           E8         1075            call	_read_byte
26499 6CD6           83C4                   04  add	sp,*4
26500                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26501 6CD9           30E4                       xor	ah,ah
26502                                           ! Debug: list unsigned short = ax+0 (used reg = )
26503 6CDB           50                         push	ax
26504                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26505 6CDC           FF76         0A            push	$A[bp]
26506                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26507 6CDF           FF76         FE            push	-2[bp]
26508                                           ! Debug: func () void = write_word+0 (used reg = )
26509 6CE2           E8         10A4            call	_write_word
26510 6CE5           83C4                   06  add	sp,*6
26511                                           !BCC_EOS
26512                                           ! 3503  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26513                                           ! Debug: list int = const $84 (used reg = )
26514 6CE8           B8                   0084  mov	ax,#$84
26515 6CEB           50                         push	ax
26516                                           ! Debug: list int = const $40 (used reg = )
26517 6CEC           B8                   0040  mov	ax,*$40
26518 6CEF           50                         push	ax
26519                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26520 6CF0           E8         1058            call	_read_byte
26521 6CF3           83C4                   04  add	sp,*4
26522                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26523 6CF6           30E4                       xor	ah,ah
26524                                           ! Debug: list unsigned short = ax+0 (used reg = )
26525 6CF8           50                         push	ax
26526                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26527 6CF9           FF76         0C            push	$C[bp]
26528                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26529 6CFC           FF76         FE            push	-2[bp]
26530                                           ! Debug: func () void = write_word+0 (used reg = )
26531 6CFF           E8         1087            call	_write_word
26532 6D02           83C4                   06  add	sp,*6
26533                                           !BCC_EOS
26534                                           ! 3504 }
26535 6D05           89EC                       mov	sp,bp
26536 6D07           5D                         pop	bp
26537 6D08           C3                         ret
26538                                           ! 3505 #asm
26539                                           !BCC_ASM
26540                       00000006            _biosfn_get_font_info.BP	set	6
26541                       00000002            _biosfn_get_font_info.BH	set	2
26542                       00000008            _biosfn_get_font_info.CX	set	8
26543                       0000000A            _biosfn_get_font_info.DX	set	$A
26544                       00000004            _biosfn_get_font_info.ES	set	4
26545                       00006D09            biosfn_get_ega_info:
26546 6D09           1E                           push ds
26547 6D0A           50                           push ax
26548 6D0B           B8                   0040    mov ax, # 0x40
26549 6D0E           8ED8                         mov ds, ax
26550 6D10           30ED                         xor ch, ch
26551 6D12           BB                   0088    mov bx, # 0x88
26552 6D15           8A0F                         mov cl, [bx]
26553 6D17           80E1                   0F    and cl, #0x0f
26554 6D1A           BB                   0063    mov bx, # 0x63
26555 6D1D           8B07                         mov ax, [bx]
26556 6D1F           BB                   0003    mov bx, #0x0003
26557 6D22           3D                   03B4    cmp ax, # 0x3b4
26558 6D25           75           02              jne mode_ega_color
26559 6D27           B7                     01    mov bh, #0x01
26560                       00006D29            mode_ega_color:
26561 6D29           58                           pop ax
26562 6D2A           1F                           pop ds
26563 6D2B           C3                           ret
26564                                           ! 3525 endasm
26565                                           !BCC_ENDASM
26566                                           ! 3526 static void biosfn_alternate_prtsc()
26567                                           ! Register BX used in function biosfn_get_font_info
26568                                           ! 3527 {
26569                       00006D2C            _biosfn_alternate_prtsc:
26570                                           ! 3528 }
26571 6D2C           C3                         ret
26572                                           ! 3529 #asm
26573                                           !BCC_ASM
26574                       00006D2D            biosfn_select_vert_res:
26575                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26576 6D2D           1E                           push ds
26577 6D2E           53                           push bx
26578 6D2F           52                           push dx
26579 6D30           88C2                         mov dl, al
26580 6D32           B8                   0040    mov ax, # 0x40
26581 6D35           8ED8                         mov ds, ax
26582 6D37           BB                   0089    mov bx, # 0x89
26583 6D3A           8A07                         mov al, [bx]
26584 6D3C           BB                   0088    mov bx, # 0x88
26585 6D3F           8A27                         mov ah, [bx]
26586 6D41           80FA                   01    cmp dl, #0x01
26587 6D44           74           15              je vert_res_350
26588 6D46           72           1D              jb vert_res_200
26589 6D48           80FA                   02    cmp dl, #0x02
26590 6D4B           74           02              je vert_res_400
26591 6D4D           EB           2A              jmp set_retcode
26592                       00006D4F            vert_res_400:
26593                                             ; reset modeset ctl bit 7 and set bit 4
26594                                             ; set switches bit 3-0 to 0x09
26595 6D4F           24                     7F    and al, #0x7f
26596 6D51           0C                     10    or al, #0x10
26597 6D53           80E4                   F0    and ah, #0xf0
26598 6D56           80CC                   09    or ah, #0x09
26599 6D59           75           14              jnz set_vert_res
26600                       00006D5B            vert_res_350:
26601                                             ; reset modeset ctl bit 7 and bit 4
26602                                             ; set switches bit 3-0 to 0x09
26603 6D5B           24                     6F    and al, #0x6f
26604 6D5D           80E4                   F0    and ah, #0xf0
26605 6D60           80CC                   09    or ah, #0x09
26606 6D63           75           0A              jnz set_vert_res
26607                       00006D65            vert_res_200:
26608                                             ; set modeset ctl bit 7 and reset bit 4
26609                                             ; set switches bit 3-0 to 0x08
26610 6D65           24                     EF    and al, #0xef
26611 6D67           0C                     80    or al, #0x80
26612 6D69           80E4                   F0    and ah, #0xf0
26613 6D6C           80CC                   08    or ah, #0x08
26614                       00006D6F            set_vert_res:
26615 6D6F           BB                   0089    mov bx, # 0x89
26616 6D72           8807                         mov [bx], al
26617 6D74           BB                   0088    mov bx, # 0x88
26618 6D77           8827                         mov [bx], ah
26619                       00006D79            set_retcode:
26620 6D79           B8                   1212    mov ax, #0x1212
26621 6D7C           5A                           pop dx
26622 6D7D           5B                           pop bx
26623 6D7E           1F                           pop ds
26624 6D7F           C3                           ret
26625                       00006D80            biosfn_enable_default_palette_loading:
26626 6D80           1E                           push ds
26627 6D81           53                           push bx
26628 6D82           52                           push dx
26629 6D83           88C2                         mov dl, al
26630 6D85           80E2                   01    and dl, #0x01
26631 6D88           C0E2                   03    shl dl, 3
26632 6D8B           B8                   0040    mov ax, # 0x40
26633 6D8E           8ED8                         mov ds, ax
26634 6D90           BB                   0089    mov bx, # 0x89
26635 6D93           8A07                         mov al, [bx]
26636 6D95           24                     F7    and al, #0xf7
26637 6D97           08D0                         or al, dl
26638 6D99           8807                         mov [bx], al
26639 6D9B           B8                   1212    mov ax, #0x1212
26640 6D9E           5A                           pop dx
26641 6D9F           5B                           pop bx
26642 6DA0           1F                           pop ds
26643 6DA1           C3                           ret
26644                       00006DA2            biosfn_enable_video_addressing:
26645 6DA2           53                           push bx
26646 6DA3           52                           push dx
26647 6DA4           88C3                         mov bl, al
26648 6DA6           80E3                   01    and bl, #0x01
26649 6DA9           80F3                   01    xor bl, #0x01
26650 6DAC           D0E3                         shl bl, 1
26651 6DAE           BA                   03CC    mov dx, # 0x3cc
26652 6DB1           EC                           in al, dx
26653 6DB2           24                     FD    and al, #0xfd
26654 6DB4           08D8                         or al, bl
26655 6DB6           BA                   03C2    mov dx, # 0x3c2
26656 6DB9           EE                           out dx, al
26657 6DBA           B8                   1212    mov ax, #0x1212
26658 6DBD           5A                           pop dx
26659 6DBE           5B                           pop bx
26660 6DBF           C3                           ret
26661                       00006DC0            biosfn_enable_grayscale_summing:
26662 6DC0           1E                           push ds
26663 6DC1           53                           push bx
26664 6DC2           52                           push dx
26665 6DC3           88C2                         mov dl, al
26666 6DC5           80E2                   01    and dl, #0x01
26667 6DC8           80F2                   01    xor dl, #0x01
26668 6DCB           D0E2                         shl dl, 1
26669 6DCD           B8                   0040    mov ax, # 0x40
26670 6DD0           8ED8                         mov ds, ax
26671 6DD2           BB                   0089    mov bx, # 0x89
26672 6DD5           8A07                         mov al, [bx]
26673 6DD7           24                     FD    and al, #0xfd
26674 6DD9           08D0                         or al, dl
26675 6DDB           8807                         mov [bx], al
26676 6DDD           B8                   1212    mov ax, #0x1212
26677 6DE0           5A                           pop dx
26678 6DE1           5B                           pop bx
26679 6DE2           1F                           pop ds
26680 6DE3           C3                           ret
26681                       00006DE4            biosfn_enable_cursor_emulation:
26682 6DE4           1E                           push ds
26683 6DE5           53                           push bx
26684 6DE6           52                           push dx
26685 6DE7           88C2                         mov dl, al
26686 6DE9           80E2                   01    and dl, #0x01
26687 6DEC           80F2                   01    xor dl, #0x01
26688 6DEF           B8                   0040    mov ax, # 0x40
26689 6DF2           8ED8                         mov ds, ax
26690 6DF4           BB                   0089    mov bx, # 0x89
26691 6DF7           8A07                         mov al, [bx]
26692 6DF9           24                     FE    and al, #0xfe
26693 6DFB           08D0                         or al, dl
26694 6DFD           8807                         mov [bx], al
26695 6DFF           B8                   1212    mov ax, #0x1212
26696 6E02           5A                           pop dx
26697 6E03           5B                           pop bx
26698 6E04           1F                           pop ds
26699 6E05           C3                           ret
26700                                           ! 3656 endasm
26701                                           !BCC_ENDASM
26702                                           ! 3657 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26703                       00006E06            _biosfn_switch_video_interface:
26704                                           !BCC_EOS
26705                                           !BCC_EOS
26706                                           !BCC_EOS
26707                                           ! 3658 {
26708                                           ! 3659 }
26709 6E06           C3                         ret
26710                                           ! 3660 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26711                       00006E07            _biosfn_enable_video_refresh_control:
26712                                           !BCC_EOS
26713                                           ! 3661 {
26714                                           ! 3662 }
26715 6E07           C3                         ret
26716                                           ! 3663 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26717                                           ! 3664 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26718                       00006E08            _biosfn_write_string:
26719                                           !BCC_EOS
26720                                           !BCC_EOS
26721                                           !BCC_EOS
26722                                           !BCC_EOS
26723                                           !BCC_EOS
26724                                           !BCC_EOS
26725                                           !BCC_EOS
26726                                           !BCC_EOS
26727                                           ! 3665 {
26728                                           ! 3666  Bit16u newcurs,oldcurs,dummy;
26729                                           !BCC_EOS
26730                                           ! 3667  Bit8u car,carattr;
26731                                           !BCC_EOS
26732                                           ! 3668  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26733 6E08           55                         push	bp
26734 6E09           89E5                       mov	bp,sp
26735 6E0B           83C4                   F8  add	sp,*-8
26736                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26737 6E0E           8D5E         FC            lea	bx,-4[bp]
26738 6E11           53                         push	bx
26739                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26740 6E12           8D5E         FA            lea	bx,-6[bp]
26741 6E15           53                         push	bx
26742                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26743 6E16           8A46         06            mov	al,6[bp]
26744 6E19           30E4                       xor	ah,ah
26745 6E1B           50                         push	ax
26746                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26747 6E1C           E8         D555            call	_biosfn_get_cursor_pos
26748 6E1F           83C4                   06  add	sp,*6
26749                                           !BCC_EOS
26750                                           ! 3669  if(row==0xff)
26751                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26752 6E22           8A46         0C            mov	al,$C[bp]
26753 6E25           3C                     FF  cmp	al,#$FF
26754 6E27           75           12            jne 	.246
26755                       00006E29            .247:
26756                                           ! 3670   {col=oldcurs&0x00ff;
26757                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26758 6E29           8A46         FC            mov	al,-4[bp]
26759                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26760 6E2C           8846         0E            mov	$E[bp],al
26761                                           !BCC_EOS
26762                                           ! 3671    row=(oldcurs&0xff00)>>8;
26763                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26764 6E2F           8B46         FC            mov	ax,-4[bp]
26765 6E32           30C0                       xor	al,al
26766                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26767 6E34           88E0                       mov	al,ah
26768 6E36           30E4                       xor	ah,ah
26769                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26770 6E38           8846         0C            mov	$C[bp],al
26771                                           !BCC_EOS
26772                                           ! 3672   }
26773                                           ! 3673  newcurs=row; newcurs<<=8; newcurs+=col;
26774                       00006E3B            .246:
26775                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26776 6E3B           8A46         0C            mov	al,$C[bp]
26777 6E3E           30E4                       xor	ah,ah
26778 6E40           8946         FE            mov	-2[bp],ax
26779                                           !BCC_EOS
26780                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26781 6E43           8B46         FE            mov	ax,-2[bp]
26782 6E46           88C4                       mov	ah,al
26783 6E48           30C0                       xor	al,al
26784 6E4A           8946         FE            mov	-2[bp],ax
26785                                           !BCC_EOS
26786                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26787 6E4D           8B46         FE            mov	ax,-2[bp]
26788 6E50           0246         0E            add	al,$E[bp]
26789 6E53           80D4                   00  adc	ah,*0
26790 6E56           8946         FE            mov	-2[bp],ax
26791                                           !BCC_EOS
26792                                           ! 3674  biosfn_set_cursor_pos(page,newcurs);
26793                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26794 6E59           FF76         FE            push	-2[bp]
26795                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26796 6E5C           8A46         06            mov	al,6[bp]
26797 6E5F           30E4                       xor	ah,ah
26798 6E61           50                         push	ax
26799                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26800 6E62           E8         D40F            call	_biosfn_set_cursor_pos
26801 6E65           83C4                   04  add	sp,*4
26802                                           !BCC_EOS
26803                                           ! 3675  while(count--!=0)
26804                                           ! 3676   {
26805 6E68           EB           4F            jmp .249
26806                       00006E6A            .24A:
26807                                           ! 3677    car=read_byte(seg,offset++);
26808                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26809 6E6A           8B46         12            mov	ax,$12[bp]
26810 6E6D           40                         inc	ax
26811 6E6E           8946         12            mov	$12[bp],ax
26812                                           ! Debug: list unsigned short = ax-1 (used reg = )
26813 6E71           48                         dec	ax
26814 6E72           50                         push	ax
26815                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26816 6E73           FF76         10            push	$10[bp]
26817                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26818 6E76           E8         0ED2            call	_read_byte
26819 6E79           83C4                   04  add	sp,*4
26820                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26821 6E7C           8846         F9            mov	-7[bp],al
26822                                           !BCC_EOS
26823                                           ! 3678    if((flag&0x02)!=0)
26824                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26825 6E7F           8A46         04            mov	al,4[bp]
26826 6E82           24                     02  and	al,*2
26827                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26828 6E84           84C0                       test	al,al
26829 6E86           74           15            je  	.24B
26830                       00006E88            .24C:
26831                                           ! 3679     attr=read_byte(seg,offset++);
26832                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26833 6E88           8B46         12            mov	ax,$12[bp]
26834 6E8B           40                         inc	ax
26835 6E8C           8946         12            mov	$12[bp],ax
26836                                           ! Debug: list unsigned short = ax-1 (used reg = )
26837 6E8F           48                         dec	ax
26838 6E90           50                         push	ax
26839                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26840 6E91           FF76         10            push	$10[bp]
26841                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26842 6E94           E8         0EB4            call	_read_byte
26843 6E97           83C4                   04  add	sp,*4
26844                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26845 6E9A           8846         08            mov	8[bp],al
26846                                           !BCC_EOS
26847                                           ! 3680    biosfn_write_teletype(car,page,attr,3);
26848                       00006E9D            .24B:
26849                                           ! Debug: list int = const 3 (used reg = )
26850 6E9D           B8                   0003  mov	ax,*3
26851 6EA0           50                         push	ax
26852                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26853 6EA1           8A46         08            mov	al,8[bp]
26854 6EA4           30E4                       xor	ah,ah
26855 6EA6           50                         push	ax
26856                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26857 6EA7           8A46         06            mov	al,6[bp]
26858 6EAA           30E4                       xor	ah,ah
26859 6EAC           50                         push	ax
26860                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26861 6EAD           8A46         F9            mov	al,-7[bp]
26862 6EB0           30E4                       xor	ah,ah
26863 6EB2           50                         push	ax
26864                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26865 6EB3           E8         EEE0            call	_biosfn_write_teletype
26866 6EB6           83C4                   08  add	sp,*8
26867                                           !BCC_EOS
26868                                           ! 3681   }
26869                                           ! 3682  if((flag&0x01)==0)
26870                       00006EB9            .249:
26871                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26872 6EB9           8B46         0A            mov	ax,$A[bp]
26873 6EBC           48                         dec	ax
26874 6EBD           8946         0A            mov	$A[bp],ax
26875                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26876 6EC0           3D                   FFFF  cmp	ax,*-1
26877 6EC3           75           A5            jne	.24A
26878                       00006EC5            .24D:
26879                       00006EC5            .248:
26880                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26881 6EC5           8A46         04            mov	al,4[bp]
26882 6EC8           24                     01  and	al,*1
26883                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26884 6ECA           84C0                       test	al,al
26885 6ECC           75           0F            jne 	.24E
26886                       00006ECE            .24F:
26887                                           ! 3683   biosfn_set_cursor_pos(page,oldcurs);
26888                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26889 6ECE           FF76         FC            push	-4[bp]
26890                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26891 6ED1           8A46         06            mov	al,6[bp]
26892 6ED4           30E4                       xor	ah,ah
26893 6ED6           50                         push	ax
26894                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26895 6ED7           E8         D39A            call	_biosfn_set_cursor_pos
26896 6EDA           83C4                   04  add	sp,*4
26897                                           !BCC_EOS
26898                                           ! 3684 }
26899                       00006EDD            .24E:
26900 6EDD           89EC                       mov	sp,bp
26901 6EDF           5D                         pop	bp
26902 6EE0           C3                         ret
26903                                           ! 3685 #asm
26904                                           !BCC_ASM
26905                       00000008            _biosfn_write_string.count	set	8
26906                       0000000E            _biosfn_write_string.seg	set	$E
26907                       0000000C            _biosfn_write_string.col	set	$C
26908                       00000002            _biosfn_write_string.flag	set	2
26909                       00000006            _biosfn_write_string.attr	set	6
26910                       00000004            _biosfn_write_string.page	set	4
26911                       0000000A            _biosfn_write_string.row	set	$A
26912                       00000010            _biosfn_write_string.offset	set	$10
26913                       00006EE1            biosfn_group_1A:
26914 6EE1           3C                     00    cmp al, #0x00
26915 6EE3           74           05              je biosfn_read_display_code
26916 6EE5           3C                     01    cmp al, #0x01
26917 6EE7           74           16              je biosfn_set_display_code
26918 6EE9           C3                           ret
26919                       00006EEA            biosfn_read_display_code:
26920 6EEA           1E                           push ds
26921 6EEB           50                           push ax
26922 6EEC           B8                   0040    mov ax, # 0x40
26923 6EEF           8ED8                         mov ds, ax
26924 6EF1           BB                   008A    mov bx, # 0x8A
26925 6EF4           8A07                         mov al, [bx]
26926 6EF6           88C3                         mov bl, al
26927 6EF8           30FF                         xor bh, bh
26928 6EFA           58                           pop ax
26929 6EFB           88E0                         mov al, ah
26930 6EFD           1F                           pop ds
26931 6EFE           C3                           ret
26932                       00006EFF            biosfn_set_display_code:
26933 6EFF           1E                           push ds
26934 6F00           50                           push ax
26935 6F01           53                           push bx
26936 6F02           B8                   0040    mov ax, # 0x40
26937 6F05           8ED8                         mov ds, ax
26938 6F07           89D8                         mov ax, bx
26939 6F09           BB                   008A    mov bx, # 0x8A
26940 6F0C           8807                         mov [bx], al
26941 6F0E           5B                           pop bx
26942 6F0F           58                           pop ax
26943 6F10           88E0                         mov al, ah
26944 6F12           1F                           pop ds
26945 6F13           C3                           ret
26946                                           ! 3719 endasm
26947                                           !BCC_ENDASM
26948                                           ! 3720 static void biosfn_read_state_info (BX,ES,DI)
26949                                           ! Register BX used in function biosfn_write_string
26950                                           ! 3721 Bit16u BX;Bit16u ES;Bit16u DI;
26951                       00006F14            _biosfn_read_state_info:
26952                                           !BCC_EOS
26953                                           !BCC_EOS
26954                                           !BCC_EOS
26955                                           ! 3722 {
26956                                           ! 3723  write_word(ES,DI+0x00,&static_functionality);
26957 6F14           55                         push	bp
26958 6F15           89E5                       mov	bp,sp
26959                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26960 6F17           BB                   0F41  mov	bx,#_static_functionality
26961 6F1A           53                         push	bx
26962                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26963 6F1B           8B46         08            mov	ax,8[bp]
26964                                           ! Debug: list unsigned int = ax+0 (used reg = )
26965 6F1E           50                         push	ax
26966                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26967 6F1F           FF76         06            push	6[bp]
26968                                           ! Debug: func () void = write_word+0 (used reg = )
26969 6F22           E8         0E64            call	_write_word
26970 6F25           89EC                       mov	sp,bp
26971                                           !BCC_EOS
26972                                           ! 3724  write_word(ES,DI+0x02,0xC000);
26973                                           ! Debug: list unsigned int = const $C000 (used reg = )
26974 6F27           B8                   C000  mov	ax,#$C000
26975 6F2A           50                         push	ax
26976                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26977 6F2B           8B46         08            mov	ax,8[bp]
26978                                           ! Debug: list unsigned int = ax+2 (used reg = )
26979 6F2E           40                         inc	ax
26980 6F2F           40                         inc	ax
26981 6F30           50                         push	ax
26982                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26983 6F31           FF76         06            push	6[bp]
26984                                           ! Debug: func () void = write_word+0 (used reg = )
26985 6F34           E8         0E52            call	_write_word
26986 6F37           89EC                       mov	sp,bp
26987                                           !BCC_EOS
26988                                           ! 3725  memcpyb(ES,DI+0x04,0x40,0x49,30);
26989                                           ! Debug: list int = const $1E (used reg = )
26990 6F39           B8                   001E  mov	ax,*$1E
26991 6F3C           50                         push	ax
26992                                           ! Debug: list int = const $49 (used reg = )
26993 6F3D           B8                   0049  mov	ax,*$49
26994 6F40           50                         push	ax
26995                                           ! Debug: list int = const $40 (used reg = )
26996 6F41           B8                   0040  mov	ax,*$40
26997 6F44           50                         push	ax
26998                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26999 6F45           8B46         08            mov	ax,8[bp]
27000                                           ! Debug: list unsigned int = ax+4 (used reg = )
27001 6F48           05                   0004  add	ax,*4
27002 6F4B           50                         push	ax
27003                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27004 6F4C           FF76         06            push	6[bp]
27005                                           ! Debug: func () void = memcpyb+0 (used reg = )
27006 6F4F           E8         0D99            call	_memcpyb
27007 6F52           89EC                       mov	sp,bp
27008                                           !BCC_EOS
27009                                           ! 3726  memcpyb(ES,DI+0x22,0x40,0x84,3);
27010                                           ! Debug: list int = const 3 (used reg = )
27011 6F54           B8                   0003  mov	ax,*3
27012 6F57           50                         push	ax
27013                                           ! Debug: list int = const $84 (used reg = )
27014 6F58           B8                   0084  mov	ax,#$84
27015 6F5B           50                         push	ax
27016                                           ! Debug: list int = const $40 (used reg = )
27017 6F5C           B8                   0040  mov	ax,*$40
27018 6F5F           50                         push	ax
27019                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27020 6F60           8B46         08            mov	ax,8[bp]
27021                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27022 6F63           05                   0022  add	ax,*$22
27023 6F66           50                         push	ax
27024                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27025 6F67           FF76         06            push	6[bp]
27026                                           ! Debug: func () void = memcpyb+0 (used reg = )
27027 6F6A           E8         0D7E            call	_memcpyb
27028 6F6D           89EC                       mov	sp,bp
27029                                           !BCC_EOS
27030                                           ! 3727  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27031                                           ! Debug: list int = const $8A (used reg = )
27032 6F6F           B8                   008A  mov	ax,#$8A
27033 6F72           50                         push	ax
27034                                           ! Debug: list int = const $40 (used reg = )
27035 6F73           B8                   0040  mov	ax,*$40
27036 6F76           50                         push	ax
27037                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27038 6F77           E8         0DD1            call	_read_byte
27039 6F7A           89EC                       mov	sp,bp
27040                                           ! Debug: list unsigned char = al+0 (used reg = )
27041 6F7C           30E4                       xor	ah,ah
27042 6F7E           50                         push	ax
27043                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27044 6F7F           8B46         08            mov	ax,8[bp]
27045                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27046 6F82           05                   0025  add	ax,*$25
27047 6F85           50                         push	ax
27048                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27049 6F86           FF76         06            push	6[bp]
27050                                           ! Debug: func () void = write_byte+0 (used reg = )
27051 6F89           E8         0DE5            call	_write_byte
27052 6F8C           89EC                       mov	sp,bp
27053                                           !BCC_EOS
27054                                           ! 3728  write_byte(ES,DI+0x26,0);
27055                                           ! Debug: list int = const 0 (used reg = )
27056 6F8E           31C0                       xor	ax,ax
27057 6F90           50                         push	ax
27058                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27059 6F91           8B46         08            mov	ax,8[bp]
27060                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27061 6F94           05                   0026  add	ax,*$26
27062 6F97           50                         push	ax
27063                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27064 6F98           FF76         06            push	6[bp]
27065                                           ! Debug: func () void = write_byte+0 (used reg = )
27066 6F9B           E8         0DD3            call	_write_byte
27067 6F9E           89EC                       mov	sp,bp
27068                                           !BCC_EOS
27069                                           ! 3729  write_byte(ES,DI+0x27,16);
27070                                           ! Debug: list int = const $10 (used reg = )
27071 6FA0           B8                   0010  mov	ax,*$10
27072 6FA3           50                         push	ax
27073                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27074 6FA4           8B46         08            mov	ax,8[bp]
27075                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27076 6FA7           05                   0027  add	ax,*$27
27077 6FAA           50                         push	ax
27078                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27079 6FAB           FF76         06            push	6[bp]
27080                                           ! Debug: func () void = write_byte+0 (used reg = )
27081 6FAE           E8         0DC0            call	_write_byte
27082 6FB1           89EC                       mov	sp,bp
27083                                           !BCC_EOS
27084                                           ! 3730  write_byte(ES,DI+0x28,0);
27085                                           ! Debug: list int = const 0 (used reg = )
27086 6FB3           31C0                       xor	ax,ax
27087 6FB5           50                         push	ax
27088                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27089 6FB6           8B46         08            mov	ax,8[bp]
27090                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27091 6FB9           05                   0028  add	ax,*$28
27092 6FBC           50                         push	ax
27093                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27094 6FBD           FF76         06            push	6[bp]
27095                                           ! Debug: func () void = write_byte+0 (used reg = )
27096 6FC0           E8         0DAE            call	_write_byte
27097 6FC3           89EC                       mov	sp,bp
27098                                           !BCC_EOS
27099                                           ! 3731  write_byte(ES,DI+0x29,8);
27100                                           ! Debug: list int = const 8 (used reg = )
27101 6FC5           B8                   0008  mov	ax,*8
27102 6FC8           50                         push	ax
27103                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27104 6FC9           8B46         08            mov	ax,8[bp]
27105                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27106 6FCC           05                   0029  add	ax,*$29
27107 6FCF           50                         push	ax
27108                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27109 6FD0           FF76         06            push	6[bp]
27110                                           ! Debug: func () void = write_byte+0 (used reg = )
27111 6FD3           E8         0D9B            call	_write_byte
27112 6FD6           89EC                       mov	sp,bp
27113                                           !BCC_EOS
27114                                           ! 3732  write_byte(ES,DI+0x2a,2);
27115                                           ! Debug: list int = const 2 (used reg = )
27116 6FD8           B8                   0002  mov	ax,*2
27117 6FDB           50                         push	ax
27118                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27119 6FDC           8B46         08            mov	ax,8[bp]
27120                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27121 6FDF           05                   002A  add	ax,*$2A
27122 6FE2           50                         push	ax
27123                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27124 6FE3           FF76         06            push	6[bp]
27125                                           ! Debug: func () void = write_byte+0 (used reg = )
27126 6FE6           E8         0D88            call	_write_byte
27127 6FE9           89EC                       mov	sp,bp
27128                                           !BCC_EOS
27129                                           ! 3733  write_byte(ES,DI+0x2b,0);
27130                                           ! Debug: list int = const 0 (used reg = )
27131 6FEB           31C0                       xor	ax,ax
27132 6FED           50                         push	ax
27133                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27134 6FEE           8B46         08            mov	ax,8[bp]
27135                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27136 6FF1           05                   002B  add	ax,*$2B
27137 6FF4           50                         push	ax
27138                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27139 6FF5           FF76         06            push	6[bp]
27140                                           ! Debug: func () void = write_byte+0 (used reg = )
27141 6FF8           E8         0D76            call	_write_byte
27142 6FFB           89EC                       mov	sp,bp
27143                                           !BCC_EOS
27144                                           ! 3734  write_byte(ES,DI+0x2c,0);
27145                                           ! Debug: list int = const 0 (used reg = )
27146 6FFD           31C0                       xor	ax,ax
27147 6FFF           50                         push	ax
27148                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27149 7000           8B46         08            mov	ax,8[bp]
27150                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27151 7003           05                   002C  add	ax,*$2C
27152 7006           50                         push	ax
27153                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27154 7007           FF76         06            push	6[bp]
27155                                           ! Debug: func () void = write_byte+0 (used reg = )
27156 700A           E8         0D64            call	_write_byte
27157 700D           89EC                       mov	sp,bp
27158                                           !BCC_EOS
27159                                           ! 3735  write_byte(ES,DI+0x31,3);
27160                                           ! Debug: list int = const 3 (used reg = )
27161 700F           B8                   0003  mov	ax,*3
27162 7012           50                         push	ax
27163                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27164 7013           8B46         08            mov	ax,8[bp]
27165                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27166 7016           05                   0031  add	ax,*$31
27167 7019           50                         push	ax
27168                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27169 701A           FF76         06            push	6[bp]
27170                                           ! Debug: func () void = write_byte+0 (used reg = )
27171 701D           E8         0D51            call	_write_byte
27172 7020           89EC                       mov	sp,bp
27173                                           !BCC_EOS
27174                                           ! 3736  write_byte(ES,DI+0x32,0);
27175                                           ! Debug: list int = const 0 (used reg = )
27176 7022           31C0                       xor	ax,ax
27177 7024           50                         push	ax
27178                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27179 7025           8B46         08            mov	ax,8[bp]
27180                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27181 7028           05                   0032  add	ax,*$32
27182 702B           50                         push	ax
27183                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27184 702C           FF76         06            push	6[bp]
27185                                           ! Debug: func () void = write_byte+0 (used reg = )
27186 702F           E8         0D3F            call	_write_byte
27187 7032           89EC                       mov	sp,bp
27188                                           !BCC_EOS
27189                                           ! 3737  memsetb(ES,DI+0x33,0,13);
27190                                           ! Debug: list int = const $D (used reg = )
27191 7034           B8                   000D  mov	ax,*$D
27192 7037           50                         push	ax
27193                                           ! Debug: list int = const 0 (used reg = )
27194 7038           31C0                       xor	ax,ax
27195 703A           50                         push	ax
27196                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27197 703B           8B46         08            mov	ax,8[bp]
27198                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27199 703E           05                   0033  add	ax,*$33
27200 7041           50                         push	ax
27201                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27202 7042           FF76         06            push	6[bp]
27203                                           ! Debug: func () void = memsetb+0 (used reg = )
27204 7045           E8         0C59            call	_memsetb
27205 7048           89EC                       mov	sp,bp
27206                                           !BCC_EOS
27207                                           ! 3738 }
27208 704A           5D                         pop	bp
27209 704B           C3                         ret
27210                                           ! 3739 static Bit16u biosfn_read_video_state_size2 (CX)
27211                                           ! Register BX used in function biosfn_read_state_info
27212                                           ! 3740      Bit16u CX;
27213                       0000704C            _biosfn_read_video_state_size2:
27214                                           !BCC_EOS
27215                                           ! 3741 {
27216                                           ! 3742     Bit16u size;
27217                                           !BCC_EOS
27218                                           ! 3743     size = 0;
27219 704C           55                         push	bp
27220 704D           89E5                       mov	bp,sp
27221 704F           4C                         dec	sp
27222 7050           4C                         dec	sp
27223                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27224 7051           31C0                       xor	ax,ax
27225 7053           8946         FE            mov	-2[bp],ax
27226                                           !BCC_EOS
27227                                           ! 3744     if (CX & 1) {
27228                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27229 7056           8A46         04            mov	al,4[bp]
27230 7059           24                     01  and	al,*1
27231 705B           84C0                       test	al,al
27232 705D           74           09            je  	.250
27233                       0000705F            .251:
27234                                           ! 3745         size += 0x46;
27235                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27236 705F           8B46         FE            mov	ax,-2[bp]
27237 7062           05                   0046  add	ax,*$46
27238 7065           8946         FE            mov	-2[bp],ax
27239                                           !BCC_EOS
27240                                           ! 3746     }
27241                                           ! 3747     if (CX & 2) {
27242                       00007068            .250:
27243                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27244 7068           8A46         04            mov	al,4[bp]
27245 706B           24                     02  and	al,*2
27246 706D           84C0                       test	al,al
27247 706F           74           09            je  	.252
27248                       00007071            .253:
27249                                           ! 3748         size += (5 + 
27250                                           ! 3748 8 + 5) * 2 + 6;
27251                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27252 7071           8B46         FE            mov	ax,-2[bp]
27253 7074           05                   002A  add	ax,*$2A
27254 7077           8946         FE            mov	-2[bp],ax
27255                                           !BCC_EOS
27256                                           ! 3749     }
27257                                           ! 3750     if (CX & 4) {
27258                       0000707A            .252:
27259                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27260 707A           8A46         04            mov	al,4[bp]
27261 707D           24                     04  and	al,*4
27262 707F           84C0                       test	al,al
27263 7081           74           09            je  	.254
27264                       00007083            .255:
27265                                           ! 3751         size += 3 + 256 * 3 + 1;
27266                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27267 7083           8B46         FE            mov	ax,-2[bp]
27268 7086           05                   0304  add	ax,#$304
27269 7089           8946         FE            mov	-2[bp],ax
27270                                           !BCC_EOS
27271                                           ! 3752 }
27272                                           ! 3753     return size;
27273                       0000708C            .254:
27274 708C           8B46         FE            mov	ax,-2[bp]
27275 708F           89EC                       mov	sp,bp
27276 7091           5D                         pop	bp
27277 7092           C3                         ret
27278                                           !BCC_EOS
27279                                           ! 3754 }
27280                                           ! 3755 static void biosfn_read_video_state_size (CX, BX)
27281                                           ! 3756      Bit16u CX; Bit16u *BX;
27282                       00007093            _biosfn_read_video_state_size:
27283                                           !BCC_EOS
27284                                           !BCC_EOS
27285                                           ! 3757 {
27286                                           ! 3758     Bit16u ss=get_SS();
27287 7093           55                         push	bp
27288 7094           89E5                       mov	bp,sp
27289 7096           4C                         dec	sp
27290 7097           4C                         dec	sp
27291                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27292 7098           E8         0D3C            call	_get_SS
27293                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27294 709B           8946         FE            mov	-2[bp],ax
27295                                           !BCC_EOS
27296                                           ! 3759     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27297                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27298 709E           FF76         04            push	4[bp]
27299                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27300 70A1           E8         FFA8            call	_biosfn_read_video_state_size2
27301 70A4           44                         inc	sp
27302 70A5           44                         inc	sp
27303                                           ! Debug: list unsigned short = ax+0 (used reg = )
27304 70A6           50                         push	ax
27305                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27306 70A7           FF76         06            push	6[bp]
27307                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27308 70AA           FF76         FE            push	-2[bp]
27309                                           ! Debug: func () void = write_word+0 (used reg = )
27310 70AD           E8         0CD9            call	_write_word
27311 70B0           83C4                   06  add	sp,*6
27312                                           !BCC_EOS
27313                                           ! 3760 }
27314 70B3           89EC                       mov	sp,bp
27315 70B5           5D                         pop	bp
27316 70B6           C3                         ret
27317                                           ! 3761 static Bit16u biosfn_save_video_state (CX,ES,BX)
27318                                           ! 3762      Bit16u CX;Bit16u ES;Bit16u BX;
27319                       000070B7            _biosfn_save_video_state:
27320                                           !BCC_EOS
27321                                           !BCC_EOS
27322                                           !BCC_EOS
27323                                           ! 3763 {
27324                                           ! 3764     Bit16u i, v, crtc_addr, ar_index;
27325                                           !BCC_EOS
27326                                           ! 3765     crtc_addr = read_word(0x40, 0x63);
27327 70B7           55                         push	bp
27328 70B8           89E5                       mov	bp,sp
27329 70BA           83C4                   F8  add	sp,*-8
27330                                           ! Debug: list int = const $63 (used reg = )
27331 70BD           B8                   0063  mov	ax,*$63
27332 70C0           50                         push	ax
27333                                           ! Debug: list int = const $40 (used reg = )
27334 70C1           B8                   0040  mov	ax,*$40
27335 70C4           50                         push	ax
27336                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27337 70C5           E8         0C96            call	_read_word
27338 70C8           83C4                   04  add	sp,*4
27339                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27340 70CB           8946         FA            mov	-6[bp],ax
27341                                           !BCC_EOS
27342                                           ! 3766     if (CX & 1) {
27343                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27344 70CE           8A46         04            mov	al,4[bp]
27345 70D1           24                     01  and	al,*1
27346 70D3           84C0                       test	al,al
27347 70D5         0F84         0266            beq 	.256
27348                       000070D9            .257:
27349                                           ! 3767         write_byte(ES, BX, inb(0x3c4)); BX++;
27350                                           ! Debug: list int = const $3C4 (used reg = )
27351 70D9           B8                   03C4  mov	ax,#$3C4
27352 70DC           50                         push	ax
27353                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27354 70DD           E8         0CC1            call	_inb
27355 70E0           44                         inc	sp
27356 70E1           44                         inc	sp
27357                                           ! Debug: list unsigned char = al+0 (used reg = )
27358 70E2           30E4                       xor	ah,ah
27359 70E4           50                         push	ax
27360                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27361 70E5           FF76         08            push	8[bp]
27362                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27363 70E8           FF76         06            push	6[bp]
27364                                           ! Debug: func () void = write_byte+0 (used reg = )
27365 70EB           E8         0C83            call	_write_byte
27366 70EE           83C4                   06  add	sp,*6
27367                                           !BCC_EOS
27368                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27369 70F1           8B46         08            mov	ax,8[bp]
27370 70F4           40                         inc	ax
27371 70F5           8946         08            mov	8[bp],ax
27372                                           !BCC_EOS
27373                                           ! 3768         write_byte(ES, BX, inb(crtc_addr)); BX++;
27374                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27375 70F8           FF76         FA            push	-6[bp]
27376                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27377 70FB           E8         0CA3            call	_inb
27378 70FE           44                         inc	sp
27379 70FF           44                         inc	sp
27380                                           ! Debug: list unsigned char = al+0 (used reg = )
27381 7100           30E4                       xor	ah,ah
27382 7102           50                         push	ax
27383                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27384 7103           FF76         08            push	8[bp]
27385                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27386 7106           FF76         06            push	6[bp]
27387                                           ! Debug: func () void = write_byte+0 (used reg = )
27388 7109           E8         0C65            call	_write_byte
27389 710C           83C4                   06  add	sp,*6
27390                                           !BCC_EOS
27391                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27392 710F           8B46         08            mov	ax,8[bp]
27393 7112           40                         inc	ax
27394 7113           8946         08            mov	8[bp],ax
27395                                           !BCC_EOS
27396                                           ! 3769         write_byte(ES, BX, inb(0x3ce)); BX++;
27397                                           ! Debug: list int = const $3CE (used reg = )
27398 7116           B8                   03CE  mov	ax,#$3CE
27399 7119           50                         push	ax
27400                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27401 711A           E8         0C84            call	_inb
27402 711D           44                         inc	sp
27403 711E           44                         inc	sp
27404                                           ! Debug: list unsigned char = al+0 (used reg = )
27405 711F           30E4                       xor	ah,ah
27406 7121           50                         push	ax
27407                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27408 7122           FF76         08            push	8[bp]
27409                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27410 7125           FF76         06            push	6[bp]
27411                                           ! Debug: func () void = write_byte+0 (used reg = )
27412 7128           E8         0C46            call	_write_byte
27413 712B           83C4                   06  add	sp,*6
27414                                           !BCC_EOS
27415                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27416 712E           8B46         08            mov	ax,8[bp]
27417 7131           40                         inc	ax
27418 7132           8946         08            mov	8[bp],ax
27419                                           !BCC_EOS
27420                                           ! 3770         inb(0x3da);
27421                                           ! Debug: list int = const $3DA (used reg = )
27422 7135           B8                   03DA  mov	ax,#$3DA
27423 7138           50                         push	ax
27424                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27425 7139           E8         0C65            call	_inb
27426 713C           44                         inc	sp
27427 713D           44                         inc	sp
27428                                           !BCC_EOS
27429                                           ! 3771         ar_index = inb(0x3c0);
27430                                           ! Debug: list int = const $3C0 (used reg = )
27431 713E           B8                   03C0  mov	ax,#$3C0
27432 7141           50                         push	ax
27433                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27434 7142           E8         0C5C            call	_inb
27435 7145           44                         inc	sp
27436 7146           44                         inc	sp
27437                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27438 7147           30E4                       xor	ah,ah
27439 7149           8946         F8            mov	-8[bp],ax
27440                                           !BCC_EOS
27441                                           ! 3772         write_byte(ES, BX, ar_index); BX++;
27442                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27443 714C           FF76         F8            push	-8[bp]
27444                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27445 714F           FF76         08            push	8[bp]
27446                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27447 7152           FF76         06            push	6[bp]
27448                                           ! Debug: func () void = write_byte+0 (used reg = )
27449 7155           E8         0C19            call	_write_byte
27450 7158           83C4                   06  add	sp,*6
27451                                           !BCC_EOS
27452                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27453 715B           8B46         08            mov	ax,8[bp]
27454 715E           40                         inc	ax
27455 715F           8946         08            mov	8[bp],ax
27456                                           !BCC_EOS
27457                                           ! 3773         write_byte(ES, BX, inb(0x3ca)); BX++;
27458                                           ! Debug: list int = const $3CA (used reg = )
27459 7162           B8                   03CA  mov	ax,#$3CA
27460 7165           50                         push	ax
27461                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27462 7166           E8         0C38            call	_inb
27463 7169           44                         inc	sp
27464 716A           44                         inc	sp
27465                                           ! Debug: list unsigned char = al+0 (used reg = )
27466 716B           30E4                       xor	ah,ah
27467 716D           50                         push	ax
27468                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27469 716E           FF76         08            push	8[bp]
27470                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27471 7171           FF76         06            push	6[bp]
27472                                           ! Debug: func () void = write_byte+0 (used reg = )
27473 7174           E8         0BFA            call	_write_byte
27474 7177           83C4                   06  add	sp,*6
27475                                           !BCC_EOS
27476                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27477 717A           8B46         08            mov	ax,8[bp]
27478 717D           40                         inc	ax
27479 717E           8946         08            mov	8[bp],ax
27480                                           !BCC_EOS
27481                                           ! 3774         for(i=1;i<=4;i++){
27482                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27483 7181           B8                   0001  mov	ax,*1
27484 7184           8946         FE            mov	-2[bp],ax
27485                                           !BCC_EOS
27486                                           !BCC_EOS
27487 7187           EB           33            jmp .25A
27488                       00007189            .25B:
27489                                           ! 3775             outb(0x3c4, i);
27490                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27491 7189           FF76         FE            push	-2[bp]
27492                                           ! Debug: list int = const $3C4 (used reg = )
27493 718C           B8                   03C4  mov	ax,#$3C4
27494 718F           50                         push	ax
27495                                           ! Debug: func () void = outb+0 (used reg = )
27496 7190           E8         0C24            call	_outb
27497 7193           83C4                   04  add	sp,*4
27498                                           !BCC_EOS
27499                                           ! 3776             write_byte(ES, BX, inb(0x3c5)); BX++;
27500                                           ! Debug: list int = const $3C5 (used reg = )
27501 7196           B8                   03C5  mov	ax,#$3C5
27502 7199           50                         push	ax
27503                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27504 719A           E8         0C04            call	_inb
27505 719D           44                         inc	sp
27506 719E           44                         inc	sp
27507                                           ! Debug: list unsigned char = al+0 (used reg = )
27508 719F           30E4                       xor	ah,ah
27509 71A1           50                         push	ax
27510                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27511 71A2           FF76         08            push	8[bp]
27512                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27513 71A5           FF76         06            push	6[bp]
27514                                           ! Debug: func () void = write_byte+0 (used reg = )
27515 71A8           E8         0BC6            call	_write_byte
27516 71AB           83C4                   06  add	sp,*6
27517                                           !BCC_EOS
27518                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27519 71AE           8B46         08            mov	ax,8[bp]
27520 71B1           40                         inc	ax
27521 71B2           8946         08            mov	8[bp],ax
27522                                           !BCC_EOS
27523                                           ! 3777         }
27524                                           ! 3778         outb(0x3c4, 0);
27525                       000071B5            .259:
27526                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27527 71B5           8B46         FE            mov	ax,-2[bp]
27528 71B8           40                         inc	ax
27529 71B9           8946         FE            mov	-2[bp],ax
27530                       000071BC            .25A:
27531                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27532 71BC           8B46         FE            mov	ax,-2[bp]
27533 71BF           3D                   0004  cmp	ax,*4
27534 71C2           76           C5            jbe	.25B
27535                       000071C4            .25C:
27536                       000071C4            .258:
27537                                           ! Debug: list int = const 0 (used reg = )
27538 71C4           31C0                       xor	ax,ax
27539 71C6           50                         push	ax
27540                                           ! Debug: list int = const $3C4 (used reg = )
27541 71C7           B8                   03C4  mov	ax,#$3C4
27542 71CA           50                         push	ax
27543                                           ! Debug: func () void = outb+0 (used reg = )
27544 71CB           E8         0BE9            call	_outb
27545 71CE           83C4                   04  add	sp,*4
27546                                           !BCC_EOS
27547                                           ! 3779         write_byte(ES, BX, inb(0x3c5)); BX++;
27548                                           ! Debug: list int = const $3C5 (used reg = )
27549 71D1           B8                   03C5  mov	ax,#$3C5
27550 71D4           50                         push	ax
27551                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27552 71D5           E8         0BC9            call	_inb
27553 71D8           44                         inc	sp
27554 71D9           44                         inc	sp
27555                                           ! Debug: list unsigned char = al+0 (used reg = )
27556 71DA           30E4                       xor	ah,ah
27557 71DC           50                         push	ax
27558                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27559 71DD           FF76         08            push	8[bp]
27560                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27561 71E0           FF76         06            push	6[bp]
27562                                           ! Debug: func () void = write_byte+0 (used reg = )
27563 71E3           E8         0B8B            call	_write_byte
27564 71E6           83C4                   06  add	sp,*6
27565                                           !BCC_EOS
27566                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27567 71E9           8B46         08            mov	ax,8[bp]
27568 71EC           40                         inc	ax
27569 71ED           8946         08            mov	8[bp],ax
27570                                           !BCC_EOS
27571                                           ! 3780         for(i=0;i<=0x18;i++) {
27572                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27573 71F0           31C0                       xor	ax,ax
27574 71F2           8946         FE            mov	-2[bp],ax
27575                                           !BCC_EOS
27576                                           !BCC_EOS
27577 71F5           EB           33            jmp .25F
27578                       000071F7            .260:
27579                                           ! 3781             outb(crtc_addr,i);
27580                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27581 71F7           FF76         FE            push	-2[bp]
27582                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27583 71FA           FF76         FA            push	-6[bp]
27584                                           ! Debug: func () void = outb+0 (used reg = )
27585 71FD           E8         0BB7            call	_outb
27586 7200           83C4                   04  add	sp,*4
27587                                           !BCC_EOS
27588                                           ! 3782             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27589                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27590 7203           8B46         FA            mov	ax,-6[bp]
27591                                           ! Debug: list unsigned int = ax+1 (used reg = )
27592 7206           40                         inc	ax
27593 7207           50                         push	ax
27594                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27595 7208           E8         0B96            call	_inb
27596 720B           44                         inc	sp
27597 720C           44                         inc	sp
27598                                           ! Debug: list unsigned char = al+0 (used reg = )
27599 720D           30E4                       xor	ah,ah
27600 720F           50                         push	ax
27601                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27602 7210           FF76         08            push	8[bp]
27603                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27604 7213           FF76         06            push	6[bp]
27605                                           ! Debug: func () void = write_byte+0 (used reg = )
27606 7216           E8         0B58            call	_write_byte
27607 7219           83C4                   06  add	sp,*6
27608                                           !BCC_EOS
27609                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27610 721C           8B46         08            mov	ax,8[bp]
27611 721F           40                         inc	ax
27612 7220           8946         08            mov	8[bp],ax
27613                                           !BCC_EOS
27614                                           ! 3783         }
27615                                           ! 3784         for(i=0;i<=0x13;i++) {
27616                       00007223            .25E:
27617                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27618 7223           8B46         FE            mov	ax,-2[bp]
27619 7226           40                         inc	ax
27620 7227           8946         FE            mov	-2[bp],ax
27621                       0000722A            .25F:
27622                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27623 722A           8B46         FE            mov	ax,-2[bp]
27624 722D           3D                   0018  cmp	ax,*$18
27625 7230           76           C5            jbe	.260
27626                       00007232            .261:
27627                       00007232            .25D:
27628                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27629 7232           31C0                       xor	ax,ax
27630 7234           8946         FE            mov	-2[bp],ax
27631                                           !BCC_EOS
27632                                           !BCC_EOS
27633 7237           EB           44            jmp .264
27634                       00007239            .265:
27635                                           ! 3785             inb(0x3da);
27636                                           ! Debug: list int = const $3DA (used reg = )
27637 7239           B8                   03DA  mov	ax,#$3DA
27638 723C           50                         push	ax
27639                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27640 723D           E8         0B61            call	_inb
27641 7240           44                         inc	sp
27642 7241           44                         inc	sp
27643                                           !BCC_EOS
27644                                           ! 3786             outb(0x3c0, i | (ar_index & 0x20));
27645                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27646 7242           8A46         F8            mov	al,-8[bp]
27647 7245           24                     20  and	al,*$20
27648                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27649                                           ! Debug: expression subtree swapping
27650 7247           30E4                       xor	ah,ah
27651 7249           0B46         FE            or	ax,-2[bp]
27652                                           ! Debug: list unsigned int = ax+0 (used reg = )
27653 724C           50                         push	ax
27654                                           ! Debug: list int = const $3C0 (used reg = )
27655 724D           B8                   03C0  mov	ax,#$3C0
27656 7250           50                         push	ax
27657                                           ! Debug: func () void = outb+0 (used reg = )
27658 7251           E8         0B63            call	_outb
27659 7254           83C4                   04  add	sp,*4
27660                                           !BCC_EOS
27661                                           ! 3787             write_byte(ES, BX, inb(0x3c1)); BX++;
27662                                           ! Debug: list int = const $3C1 (used reg = )
27663 7257           B8                   03C1  mov	ax,#$3C1
27664 725A           50                         push	ax
27665                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27666 725B           E8         0B43            call	_inb
27667 725E           44                         inc	sp
27668 725F           44                         inc	sp
27669                                           ! Debug: list unsigned char = al+0 (used reg = )
27670 7260           30E4                       xor	ah,ah
27671 7262           50                         push	ax
27672                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27673 7263           FF76         08            push	8[bp]
27674                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27675 7266           FF76         06            push	6[bp]
27676                                           ! Debug: func () void = write_byte+0 (used reg = )
27677 7269           E8         0B05            call	_write_byte
27678 726C           83C4                   06  add	sp,*6
27679                                           !BCC_EOS
27680                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27681 726F           8B46         08            mov	ax,8[bp]
27682 7272           40                         inc	ax
27683 7273           8946         08            mov	8[bp],ax
27684                                           !BCC_EOS
27685                                           ! 3788         }
27686                                           ! 3789         inb(0x3da);
27687                       00007276            .263:
27688                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27689 7276           8B46         FE            mov	ax,-2[bp]
27690 7279           40                         inc	ax
27691 727A           8946         FE            mov	-2[bp],ax
27692                       0000727D            .264:
27693                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27694 727D           8B46         FE            mov	ax,-2[bp]
27695 7280           3D                   0013  cmp	ax,*$13
27696 7283           76           B4            jbe	.265
27697                       00007285            .266:
27698                       00007285            .262:
27699                                           ! Debug: list int = const $3DA (used reg = )
27700 7285           B8                   03DA  mov	ax,#$3DA
27701 7288           50                         push	ax
27702                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27703 7289           E8         0B15            call	_inb
27704 728C           44                         inc	sp
27705 728D           44                         inc	sp
27706                                           !BCC_EOS
27707                                           ! 3790         for(i=0;i<=8;i++) {
27708                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27709 728E           31C0                       xor	ax,ax
27710 7290           8946         FE            mov	-2[bp],ax
27711                                           !BCC_EOS
27712                                           !BCC_EOS
27713 7293           EB           33            jmp .269
27714                       00007295            .26A:
27715                                           ! 3791             outb(0x3ce,i);
27716                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27717 7295           FF76         FE            push	-2[bp]
27718                                           ! Debug: list int = const $3CE (used reg = )
27719 7298           B8                   03CE  mov	ax,#$3CE
27720 729B           50                         push	ax
27721                                           ! Debug: func () void = outb+0 (used reg = )
27722 729C           E8         0B18            call	_outb
27723 729F           83C4                   04  add	sp,*4
27724                                           !BCC_EOS
27725                                           ! 3792             write_byte(ES, BX, inb(0x3cf)); BX++;
27726                                           ! Debug: list int = const $3CF (used reg = )
27727 72A2           B8                   03CF  mov	ax,#$3CF
27728 72A5           50                         push	ax
27729                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27730 72A6           E8         0AF8            call	_inb
27731 72A9           44                         inc	sp
27732 72AA           44                         inc	sp
27733                                           ! Debug: list unsigned char = al+0 (used reg = )
27734 72AB           30E4                       xor	ah,ah
27735 72AD           50                         push	ax
27736                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27737 72AE           FF76         08            push	8[bp]
27738                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27739 72B1           FF76         06            push	6[bp]
27740                                           ! Debug: func () void = write_byte+0 (used reg = )
27741 72B4           E8         0ABA            call	_write_byte
27742 72B7           83C4                   06  add	sp,*6
27743                                           !BCC_EOS
27744                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27745 72BA           8B46         08            mov	ax,8[bp]
27746 72BD           40                         inc	ax
27747 72BE           8946         08            mov	8[bp],ax
27748                                           !BCC_EOS
27749                                           ! 3793         }
27750                                           ! 3794         write_word(ES, BX, crtc_addr); BX+= 2;
27751                       000072C1            .268:
27752                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27753 72C1           8B46         FE            mov	ax,-2[bp]
27754 72C4           40                         inc	ax
27755 72C5           8946         FE            mov	-2[bp],ax
27756                       000072C8            .269:
27757                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27758 72C8           8B46         FE            mov	ax,-2[bp]
27759 72CB           3D                   0008  cmp	ax,*8
27760 72CE           76           C5            jbe	.26A
27761                       000072D0            .26B:
27762                       000072D0            .267:
27763                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27764 72D0           FF76         FA            push	-6[bp]
27765                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27766 72D3           FF76         08            push	8[bp]
27767                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27768 72D6           FF76         06            push	6[bp]
27769                                           ! Debug: func () void = write_word+0 (used reg = )
27770 72D9           E8         0AAD            call	_write_word
27771 72DC           83C4                   06  add	sp,*6
27772                                           !BCC_EOS
27773                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27774 72DF           8B46         08            mov	ax,8[bp]
27775 72E2           40                         inc	ax
27776 72E3           40                         inc	ax
27777 72E4           8946         08            mov	8[bp],ax
27778                                           !BCC_EOS
27779                                           ! 3795         write_byte(ES, BX, 0); BX++;
27780                                           ! Debug: list int = const 0 (used reg = )
27781 72E7           31C0                       xor	ax,ax
27782 72E9           50                         push	ax
27783                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27784 72EA           FF76         08            push	8[bp]
27785                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27786 72ED           FF76         06            push	6[bp]
27787                                           ! Debug: func () void = write_byte+0 (used reg = )
27788 72F0           E8         0A7E            call	_write_byte
27789 72F3           83C4                   06  add	sp,*6
27790                                           !BCC_EOS
27791                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27792 72F6           8B46         08            mov	ax,8[bp]
27793 72F9           40                         inc	ax
27794 72FA           8946         08            mov	8[bp],ax
27795                                           !BCC_EOS
27796                                           ! 3796         write_byte(ES, BX, 0); BX++;
27797                                           ! Debug: list int = const 0 (used reg = )
27798 72FD           31C0                       xor	ax,ax
27799 72FF           50                         push	ax
27800                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27801 7300           FF76         08            push	8[bp]
27802                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27803 7303           FF76         06            push	6[bp]
27804                                           ! Debug: func () void = write_byte+0 (used reg = )
27805 7306           E8         0A68            call	_write_byte
27806 7309           83C4                   06  add	sp,*6
27807                                           !BCC_EOS
27808                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27809 730C           8B46         08            mov	ax,8[bp]
27810 730F           40                         inc	ax
27811 7310           8946         08            mov	8[bp],ax
27812                                           !BCC_EOS
27813                                           ! 3797         write_byte(ES, BX, 0); BX++;
27814                                           ! Debug: list int = const 0 (used reg = )
27815 7313           31C0                       xor	ax,ax
27816 7315           50                         push	ax
27817                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27818 7316           FF76         08            push	8[bp]
27819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27820 7319           FF76         06            push	6[bp]
27821                                           ! Debug: func () void = write_byte+0 (used reg = )
27822 731C           E8         0A52            call	_write_byte
27823 731F           83C4                   06  add	sp,*6
27824                                           !BCC_EOS
27825                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27826 7322           8B46         08            mov	ax,8[bp]
27827 7325           40                         inc	ax
27828 7326           8946         08            mov	8[bp],ax
27829                                           !BCC_EOS
27830                                           ! 3798         write_byte(ES, BX, 0); BX++;
27831                                           ! Debug: list int = const 0 (used reg = )
27832 7329           31C0                       xor	ax,ax
27833 732B           50                         push	ax
27834                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27835 732C           FF76         08            push	8[bp]
27836                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27837 732F           FF76         06            push	6[bp]
27838                                           ! Debug: func () void = write_byte+0 (used reg = )
27839 7332           E8         0A3C            call	_write_byte
27840 7335           83C4                   06  add	sp,*6
27841                                           !BCC_EOS
27842                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27843 7338           8B46         08            mov	ax,8[bp]
27844 733B           40                         inc	ax
27845 733C           8946         08            mov	8[bp],ax
27846                                           !BCC_EOS
27847                                           ! 3799     }
27848                                           ! 3800     if (CX & 2) {
27849                       0000733F            .256:
27850                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27851 733F           8A46         04            mov	al,4[bp]
27852 7342           24                     02  and	al,*2
27853 7344           84C0                       test	al,al
27854 7346         0F84         0270            beq 	.26C
27855                       0000734A            .26D:
27856                                           ! 3801         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27857                                           ! Debug: list int = const $49 (used reg = )
27858 734A           B8                   0049  mov	ax,*$49
27859 734D           50                         push	ax
27860                                           ! Debug: list int = const $40 (used reg = )
27861 734E           B8                   0040  mov	ax,*$40
27862 7351           50                         push	ax
27863                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27864 7352           E8         09F6            call	_read_byte
27865 7355           83C4                   04  add	sp,*4
27866                                           ! Debug: list unsigned char = al+0 (used reg = )
27867 7358           30E4                       xor	ah,ah
27868 735A           50                         push	ax
27869                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27870 735B           FF76         08            push	8[bp]
27871                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27872 735E           FF76         06            push	6[bp]
27873                                           ! Debug: func () void = write_byte+0 (used reg = )
27874 7361           E8         0A0D            call	_write_byte
27875 7364           83C4                   06  add	sp,*6
27876                                           !BCC_EOS
27877                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27878 7367           8B46         08            mov	ax,8[bp]
27879 736A           40                         inc	ax
27880 736B           8946         08            mov	8[bp],ax
27881                                           !BCC_EOS
27882                                           ! 3802         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27883                                           ! Debug: list int = const $4A (used reg = )
27884 736E           B8                   004A  mov	ax,*$4A
27885 7371           50                         push	ax
27886                                           ! Debug: list int = const $40 (used reg = )
27887 7372           B8                   0040  mov	ax,*$40
27888 7375           50                         push	ax
27889                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27890 7376           E8         09E5            call	_read_word
27891 7379           83C4                   04  add	sp,*4
27892                                           ! Debug: list unsigned short = ax+0 (used reg = )
27893 737C           50                         push	ax
27894                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27895 737D           FF76         08            push	8[bp]
27896                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27897 7380           FF76         06            push	6[bp]
27898                                           ! Debug: func () void = write_word+0 (used reg = )
27899 7383           E8         0A03            call	_write_word
27900 7386           83C4                   06  add	sp,*6
27901                                           !BCC_EOS
27902                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27903 7389           8B46         08            mov	ax,8[bp]
27904 738C           40                         inc	ax
27905 738D           40                         inc	ax
27906 738E           8946         08            mov	8[bp],ax
27907                                           !BCC_EOS
27908                                           ! 3803         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27909                                           ! Debug: list int = const $4C (used reg = )
27910 7391           B8                   004C  mov	ax,*$4C
27911 7394           50                         push	ax
27912                                           ! Debug: list int = const $40 (used reg = )
27913 7395           B8                   0040  mov	ax,*$40
27914 7398           50                         push	ax
27915                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27916 7399           E8         09C2            call	_read_word
27917 739C           83C4                   04  add	sp,*4
27918                                           ! Debug: list unsigned short = ax+0 (used reg = )
27919 739F           50                         push	ax
27920                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27921 73A0           FF76         08            push	8[bp]
27922                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27923 73A3           FF76         06            push	6[bp]
27924                                           ! Debug: func () void = write_word+0 (used reg = )
27925 73A6           E8         09E0            call	_write_word
27926 73A9           83C4                   06  add	sp,*6
27927                                           !BCC_EOS
27928                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27929 73AC           8B46         08            mov	ax,8[bp]
27930 73AF           40                         inc	ax
27931 73B0           40                         inc	ax
27932 73B1           8946         08            mov	8[bp],ax
27933                                           !BCC_EOS
27934                                           ! 3804         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27935                                           ! Debug: list int = const $63 (used reg = )
27936 73B4           B8                   0063  mov	ax,*$63
27937 73B7           50                         push	ax
27938                                           ! Debug: list int = const $40 (used reg = )
27939 73B8           B8                   0040  mov	ax,*$40
27940 73BB           50                         push	ax
27941                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27942 73BC           E8         099F            call	_read_word
27943 73BF           83C4                   04  add	sp,*4
27944                                           ! Debug: list unsigned short = ax+0 (used reg = )
27945 73C2           50                         push	ax
27946                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27947 73C3           FF76         08            push	8[bp]
27948                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27949 73C6           FF76         06            push	6[bp]
27950                                           ! Debug: func () void = write_word+0 (used reg = )
27951 73C9           E8         09BD            call	_write_word
27952 73CC           83C4                   06  add	sp,*6
27953                                           !BCC_EOS
27954                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27955 73CF           8B46         08            mov	ax,8[bp]
27956 73D2           40                         inc	ax
27957 73D3           40                         inc	ax
27958 73D4           8946         08            mov	8[bp],ax
27959                                           !BCC_EOS
27960                                           ! 3805         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27961                                           ! Debug: list int = const $84 (used reg = )
27962 73D7           B8                   0084  mov	ax,#$84
27963 73DA           50                         push	ax
27964                                           ! Debug: list int = const $40 (used reg = )
27965 73DB           B8                   0040  mov	ax,*$40
27966 73DE           50                         push	ax
27967                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27968 73DF           E8         0969            call	_read_byte
27969 73E2           83C4                   04  add	sp,*4
27970                                           ! Debug: list unsigned char = al+0 (used reg = )
27971 73E5           30E4                       xor	ah,ah
27972 73E7           50                         push	ax
27973                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27974 73E8           FF76         08            push	8[bp]
27975                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27976 73EB           FF76         06            push	6[bp]
27977                                           ! Debug: func () void = write_byte+0 (used reg = )
27978 73EE           E8         0980            call	_write_byte
27979 73F1           83C4                   06  add	sp,*6
27980                                           !BCC_EOS
27981                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27982 73F4           8B46         08            mov	ax,8[bp]
27983 73F7           40                         inc	ax
27984 73F8           8946         08            mov	8[bp],ax
27985                                           !BCC_EOS
27986                                           ! 3806         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27987                                           ! Debug: list int = const $85 (used reg = )
27988 73FB           B8                   0085  mov	ax,#$85
27989 73FE           50                         push	ax
27990                                           ! Debug: list int = const $40 (used reg = )
27991 73FF           B8                   0040  mov	ax,*$40
27992 7402           50                         push	ax
27993                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27994 7403           E8         0958            call	_read_word
27995 7406           83C4                   04  add	sp,*4
27996                                           ! Debug: list unsigned short = ax+0 (used reg = )
27997 7409           50                         push	ax
27998                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27999 740A           FF76         08            push	8[bp]
28000                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28001 740D           FF76         06            push	6[bp]
28002                                           ! Debug: func () void = write_word+0 (used reg = )
28003 7410           E8         0976            call	_write_word
28004 7413           83C4                   06  add	sp,*6
28005                                           !BCC_EOS
28006                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28007 7416           8B46         08            mov	ax,8[bp]
28008 7419           40                         inc	ax
28009 741A           40                         inc	ax
28010 741B           8946         08            mov	8[bp],ax
28011                                           !BCC_EOS
28012                                           ! 3807         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28013                                           ! Debug: list int = const $87 (used reg = )
28014 741E           B8                   0087  mov	ax,#$87
28015 7421           50                         push	ax
28016                                           ! Debug: list int = const $40 (used reg = )
28017 7422           B8                   0040  mov	ax,*$40
28018 7425           50                         push	ax
28019                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28020 7426           E8         0922            call	_read_byte
28021 7429           83C4                   04  add	sp,*4
28022                                           ! Debug: list unsigned char = al+0 (used reg = )
28023 742C           30E4                       xor	ah,ah
28024 742E           50                         push	ax
28025                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28026 742F           FF76         08            push	8[bp]
28027                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28028 7432           FF76         06            push	6[bp]
28029                                           ! Debug: func () void = write_byte+0 (used reg = )
28030 7435           E8         0939            call	_write_byte
28031 7438           83C4                   06  add	sp,*6
28032                                           !BCC_EOS
28033                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28034 743B           8B46         08            mov	ax,8[bp]
28035 743E           40                         inc	ax
28036 743F           8946         08            mov	8[bp],ax
28037                                           !BCC_EOS
28038                                           ! 3808         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28039                                           ! Debug: list int = const $88 (used reg = )
28040 7442           B8                   0088  mov	ax,#$88
28041 7445           50                         push	ax
28042                                           ! Debug: list int = const $40 (used reg = )
28043 7446           B8                   0040  mov	ax,*$40
28044 7449           50                         push	ax
28045                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28046 744A           E8         08FE            call	_read_byte
28047 744D           83C4                   04  add	sp,*4
28048                                           ! Debug: list unsigned char = al+0 (used reg = )
28049 7450           30E4                       xor	ah,ah
28050 7452           50                         push	ax
28051                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28052 7453           FF76         08            push	8[bp]
28053                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28054 7456           FF76         06            push	6[bp]
28055                                           ! Debug: func () void = write_byte+0 (used reg = )
28056 7459           E8         0915            call	_write_byte
28057 745C           83C4                   06  add	sp,*6
28058                                           !BCC_EOS
28059                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28060 745F           8B46         08            mov	ax,8[bp]
28061 7462           40                         inc	ax
28062 7463           8946         08            mov	8[bp],ax
28063                                           !BCC_EOS
28064                                           ! 3809         write_byte(ES, BX, read_by
28065                                           ! 3809 te(0x40,0x89)); BX++;
28066                                           ! Debug: list int = const $89 (used reg = )
28067 7466           B8                   0089  mov	ax,#$89
28068 7469           50                         push	ax
28069                                           ! Debug: list int = const $40 (used reg = )
28070 746A           B8                   0040  mov	ax,*$40
28071 746D           50                         push	ax
28072                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28073 746E           E8         08DA            call	_read_byte
28074 7471           83C4                   04  add	sp,*4
28075                                           ! Debug: list unsigned char = al+0 (used reg = )
28076 7474           30E4                       xor	ah,ah
28077 7476           50                         push	ax
28078                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28079 7477           FF76         08            push	8[bp]
28080                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28081 747A           FF76         06            push	6[bp]
28082                                           ! Debug: func () void = write_byte+0 (used reg = )
28083 747D           E8         08F1            call	_write_byte
28084 7480           83C4                   06  add	sp,*6
28085                                           !BCC_EOS
28086                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28087 7483           8B46         08            mov	ax,8[bp]
28088 7486           40                         inc	ax
28089 7487           8946         08            mov	8[bp],ax
28090                                           !BCC_EOS
28091                                           ! 3810         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28092                                           ! Debug: list int = const $60 (used reg = )
28093 748A           B8                   0060  mov	ax,*$60
28094 748D           50                         push	ax
28095                                           ! Debug: list int = const $40 (used reg = )
28096 748E           B8                   0040  mov	ax,*$40
28097 7491           50                         push	ax
28098                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28099 7492           E8         08C9            call	_read_word
28100 7495           83C4                   04  add	sp,*4
28101                                           ! Debug: list unsigned short = ax+0 (used reg = )
28102 7498           50                         push	ax
28103                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28104 7499           FF76         08            push	8[bp]
28105                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28106 749C           FF76         06            push	6[bp]
28107                                           ! Debug: func () void = write_word+0 (used reg = )
28108 749F           E8         08E7            call	_write_word
28109 74A2           83C4                   06  add	sp,*6
28110                                           !BCC_EOS
28111                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28112 74A5           8B46         08            mov	ax,8[bp]
28113 74A8           40                         inc	ax
28114 74A9           40                         inc	ax
28115 74AA           8946         08            mov	8[bp],ax
28116                                           !BCC_EOS
28117                                           ! 3811         for(i=0;i<8;i++) {
28118                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28119 74AD           31C0                       xor	ax,ax
28120 74AF           8946         FE            mov	-2[bp],ax
28121                                           !BCC_EOS
28122                                           !BCC_EOS
28123 74B2           EB           2F            jmp .270
28124                       000074B4            .271:
28125                                           ! 3812             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28126                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28127                                           ! Debug: expression subtree swapping
28128 74B4           8B46         FE            mov	ax,-2[bp]
28129 74B7           D1E0                       shl	ax,*1
28130                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28131                                           ! Debug: expression subtree swapping
28132                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28133 74B9           05                   0050  add	ax,*$50
28134 74BC           50                         push	ax
28135                                           ! Debug: list int = const $40 (used reg = )
28136 74BD           B8                   0040  mov	ax,*$40
28137 74C0           50                         push	ax
28138                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28139 74C1           E8         089A            call	_read_word
28140 74C4           83C4                   04  add	sp,*4
28141                                           ! Debug: list unsigned short = ax+0 (used reg = )
28142 74C7           50                         push	ax
28143                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28144 74C8           FF76         08            push	8[bp]
28145                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28146 74CB           FF76         06            push	6[bp]
28147                                           ! Debug: func () void = write_word+0 (used reg = )
28148 74CE           E8         08B8            call	_write_word
28149 74D1           83C4                   06  add	sp,*6
28150                                           !BCC_EOS
28151                                           ! 3813             BX += 2;
28152                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28153 74D4           8B46         08            mov	ax,8[bp]
28154 74D7           40                         inc	ax
28155 74D8           40                         inc	ax
28156 74D9           8946         08            mov	8[bp],ax
28157                                           !BCC_EOS
28158                                           ! 3814         }
28159                                           ! 3815         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28160                       000074DC            .26F:
28161                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28162 74DC           8B46         FE            mov	ax,-2[bp]
28163 74DF           40                         inc	ax
28164 74E0           8946         FE            mov	-2[bp],ax
28165                       000074E3            .270:
28166                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28167 74E3           8B46         FE            mov	ax,-2[bp]
28168 74E6           3D                   0008  cmp	ax,*8
28169 74E9           72           C9            jb 	.271
28170                       000074EB            .272:
28171                       000074EB            .26E:
28172                                           ! Debug: list int = const $4E (used reg = )
28173 74EB           B8                   004E  mov	ax,*$4E
28174 74EE           50                         push	ax
28175                                           ! Debug: list int = const $40 (used reg = )
28176 74EF           B8                   0040  mov	ax,*$40
28177 74F2           50                         push	ax
28178                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28179 74F3           E8         0868            call	_read_word
28180 74F6           83C4                   04  add	sp,*4
28181                                           ! Debug: list unsigned short = ax+0 (used reg = )
28182 74F9           50                         push	ax
28183                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28184 74FA           FF76         08            push	8[bp]
28185                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28186 74FD           FF76         06            push	6[bp]
28187                                           ! Debug: func () void = write_word+0 (used reg = )
28188 7500           E8         0886            call	_write_word
28189 7503           83C4                   06  add	sp,*6
28190                                           !BCC_EOS
28191                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28192 7506           8B46         08            mov	ax,8[bp]
28193 7509           40                         inc	ax
28194 750A           40                         inc	ax
28195 750B           8946         08            mov	8[bp],ax
28196                                           !BCC_EOS
28197                                           ! 3816         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28198                                           ! Debug: list int = const $62 (used reg = )
28199 750E           B8                   0062  mov	ax,*$62
28200 7511           50                         push	ax
28201                                           ! Debug: list int = const $40 (used reg = )
28202 7512           B8                   0040  mov	ax,*$40
28203 7515           50                         push	ax
28204                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28205 7516           E8         0832            call	_read_byte
28206 7519           83C4                   04  add	sp,*4
28207                                           ! Debug: list unsigned char = al+0 (used reg = )
28208 751C           30E4                       xor	ah,ah
28209 751E           50                         push	ax
28210                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28211 751F           FF76         08            push	8[bp]
28212                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28213 7522           FF76         06            push	6[bp]
28214                                           ! Debug: func () void = write_byte+0 (used reg = )
28215 7525           E8         0849            call	_write_byte
28216 7528           83C4                   06  add	sp,*6
28217                                           !BCC_EOS
28218                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28219 752B           8B46         08            mov	ax,8[bp]
28220 752E           40                         inc	ax
28221 752F           8946         08            mov	8[bp],ax
28222                                           !BCC_EOS
28223                                           ! 3817         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28224                                           ! Debug: list int = const $7C (used reg = )
28225 7532           B8                   007C  mov	ax,*$7C
28226 7535           50                         push	ax
28227                                           ! Debug: list int = const 0 (used reg = )
28228 7536           31C0                       xor	ax,ax
28229 7538           50                         push	ax
28230                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28231 7539           E8         0822            call	_read_word
28232 753C           83C4                   04  add	sp,*4
28233                                           ! Debug: list unsigned short = ax+0 (used reg = )
28234 753F           50                         push	ax
28235                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28236 7540           FF76         08            push	8[bp]
28237                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28238 7543           FF76         06            push	6[bp]
28239                                           ! Debug: func () void = write_word+0 (used reg = )
28240 7546           E8         0840            call	_write_word
28241 7549           83C4                   06  add	sp,*6
28242                                           !BCC_EOS
28243                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28244 754C           8B46         08            mov	ax,8[bp]
28245 754F           40                         inc	ax
28246 7550           40                         inc	ax
28247 7551           8946         08            mov	8[bp],ax
28248                                           !BCC_EOS
28249                                           ! 3818         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28250                                           ! Debug: list int = const $7E (used reg = )
28251 7554           B8                   007E  mov	ax,*$7E
28252 7557           50                         push	ax
28253                                           ! Debug: list int = const 0 (used reg = )
28254 7558           31C0                       xor	ax,ax
28255 755A           50                         push	ax
28256                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28257 755B           E8         0800            call	_read_word
28258 755E           83C4                   04  add	sp,*4
28259                                           ! Debug: list unsigned short = ax+0 (used reg = )
28260 7561           50                         push	ax
28261                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28262 7562           FF76         08            push	8[bp]
28263                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28264 7565           FF76         06            push	6[bp]
28265                                           ! Debug: func () void = write_word+0 (used reg = )
28266 7568           E8         081E            call	_write_word
28267 756B           83C4                   06  add	sp,*6
28268                                           !BCC_EOS
28269                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28270 756E           8B46         08            mov	ax,8[bp]
28271 7571           40                         inc	ax
28272 7572           40                         inc	ax
28273 7573           8946         08            mov	8[bp],ax
28274                                           !BCC_EOS
28275                                           ! 3819         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28276                                           ! Debug: list int = const $10C (used reg = )
28277 7576           B8                   010C  mov	ax,#$10C
28278 7579           50                         push	ax
28279                                           ! Debug: list int = const 0 (used reg = )
28280 757A           31C0                       xor	ax,ax
28281 757C           50                         push	ax
28282                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28283 757D           E8         07DE            call	_read_word
28284 7580           83C4                   04  add	sp,*4
28285                                           ! Debug: list unsigned short = ax+0 (used reg = )
28286 7583           50                         push	ax
28287                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28288 7584           FF76         08            push	8[bp]
28289                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28290 7587           FF76         06            push	6[bp]
28291                                           ! Debug: func () void = write_word+0 (used reg = )
28292 758A           E8         07FC            call	_write_word
28293 758D           83C4                   06  add	sp,*6
28294                                           !BCC_EOS
28295                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28296 7590           8B46         08            mov	ax,8[bp]
28297 7593           40                         inc	ax
28298 7594           40                         inc	ax
28299 7595           8946         08            mov	8[bp],ax
28300                                           !BCC_EOS
28301                                           ! 3820         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28302                                           ! Debug: list int = const $10E (used reg = )
28303 7598           B8                   010E  mov	ax,#$10E
28304 759B           50                         push	ax
28305                                           ! Debug: list int = const 0 (used reg = )
28306 759C           31C0                       xor	ax,ax
28307 759E           50                         push	ax
28308                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28309 759F           E8         07BC            call	_read_word
28310 75A2           83C4                   04  add	sp,*4
28311                                           ! Debug: list unsigned short = ax+0 (used reg = )
28312 75A5           50                         push	ax
28313                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28314 75A6           FF76         08            push	8[bp]
28315                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28316 75A9           FF76         06            push	6[bp]
28317                                           ! Debug: func () void = write_word+0 (used reg = )
28318 75AC           E8         07DA            call	_write_word
28319 75AF           83C4                   06  add	sp,*6
28320                                           !BCC_EOS
28321                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28322 75B2           8B46         08            mov	ax,8[bp]
28323 75B5           40                         inc	ax
28324 75B6           40                         inc	ax
28325 75B7           8946         08            mov	8[bp],ax
28326                                           !BCC_EOS
28327                                           ! 3821     }
28328                                           ! 3822     if (CX & 4) {
28329                       000075BA            .26C:
28330                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28331 75BA           8A46         04            mov	al,4[bp]
28332 75BD           24                     04  and	al,*4
28333 75BF           84C0                       test	al,al
28334 75C1         0F84         00B5            beq 	.273
28335                       000075C5            .274:
28336                                           ! 3823         write_byte(ES, BX, inb(0x3c7)); BX++;
28337                                           ! Debug: list int = const $3C7 (used reg = )
28338 75C5           B8                   03C7  mov	ax,#$3C7
28339 75C8           50                         push	ax
28340                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28341 75C9           E8         07D5            call	_inb
28342 75CC           44                         inc	sp
28343 75CD           44                         inc	sp
28344                                           ! Debug: list unsigned char = al+0 (used reg = )
28345 75CE           30E4                       xor	ah,ah
28346 75D0           50                         push	ax
28347                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28348 75D1           FF76         08            push	8[bp]
28349                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28350 75D4           FF76         06            push	6[bp]
28351                                           ! Debug: func () void = write_byte+0 (used reg = )
28352 75D7           E8         0797            call	_write_byte
28353 75DA           83C4                   06  add	sp,*6
28354                                           !BCC_EOS
28355                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28356 75DD           8B46         08            mov	ax,8[bp]
28357 75E0           40                         inc	ax
28358 75E1           8946         08            mov	8[bp],ax
28359                                           !BCC_EOS
28360                                           ! 3824         write_byte(ES, BX, inb(0x3c8)); BX++;
28361                                           ! Debug: list int = const $3C8 (used reg = )
28362 75E4           B8                   03C8  mov	ax,#$3C8
28363 75E7           50                         push	ax
28364                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28365 75E8           E8         07B6            call	_inb
28366 75EB           44                         inc	sp
28367 75EC           44                         inc	sp
28368                                           ! Debug: list unsigned char = al+0 (used reg = )
28369 75ED           30E4                       xor	ah,ah
28370 75EF           50                         push	ax
28371                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28372 75F0           FF76         08            push	8[bp]
28373                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28374 75F3           FF76         06            push	6[bp]
28375                                           ! Debug: func () void = write_byte+0 (used reg = )
28376 75F6           E8         0778            call	_write_byte
28377 75F9           83C4                   06  add	sp,*6
28378                                           !BCC_EOS
28379                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28380 75FC           8B46         08            mov	ax,8[bp]
28381 75FF           40                         inc	ax
28382 7600           8946         08            mov	8[bp],ax
28383                                           !BCC_EOS
28384                                           ! 3825         write_byte(ES, BX, inb(0x3c6)); BX++;
28385                                           ! Debug: list int = const $3C6 (used reg = )
28386 7603           B8                   03C6  mov	ax,#$3C6
28387 7606           50                         push	ax
28388                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28389 7607           E8         0797            call	_inb
28390 760A           44                         inc	sp
28391 760B           44                         inc	sp
28392                                           ! Debug: list unsigned char = al+0 (used reg = )
28393 760C           30E4                       xor	ah,ah
28394 760E           50                         push	ax
28395                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28396 760F           FF76         08            push	8[bp]
28397                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28398 7612           FF76         06            push	6[bp]
28399                                           ! Debug: func () void = write_byte+0 (used reg = )
28400 7615           E8         0759            call	_write_byte
28401 7618           83C4                   06  add	sp,*6
28402                                           !BCC_EOS
28403                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28404 761B           8B46         08            mov	ax,8[bp]
28405 761E           40                         inc	ax
28406 761F           8946         08            mov	8[bp],ax
28407                                           !BCC_EOS
28408                                           ! 3826         outb(0x3c8,0x00);
28409                                           ! Debug: list int = const 0 (used reg = )
28410 7622           31C0                       xor	ax,ax
28411 7624           50                         push	ax
28412                                           ! Debug: list int = const $3C8 (used reg = )
28413 7625           B8                   03C8  mov	ax,#$3C8
28414 7628           50                         push	ax
28415                                           ! Debug: func () void = outb+0 (used reg = )
28416 7629           E8         078B            call	_outb
28417 762C           83C4                   04  add	sp,*4
28418                                           !BCC_EOS
28419                                           ! 3827         for(i=0;i<256*3;i++) {
28420                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28421 762F           31C0                       xor	ax,ax
28422 7631           8946         FE            mov	-2[bp],ax
28423                                           !BCC_EOS
28424                                           !BCC_EOS
28425 7634           EB           26            jmp .277
28426                       00007636            .278:
28427                                           ! 3828             write_byte(ES, BX, inb(0x3c9)); BX++;
28428                                           ! Debug: list int = const $3C9 (used reg = )
28429 7636           B8                   03C9  mov	ax,#$3C9
28430 7639           50                         push	ax
28431                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28432 763A           E8         0764            call	_inb
28433 763D           44                         inc	sp
28434 763E           44                         inc	sp
28435                                           ! Debug: list unsigned char = al+0 (used reg = )
28436 763F           30E4                       xor	ah,ah
28437 7641           50                         push	ax
28438                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28439 7642           FF76         08            push	8[bp]
28440                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28441 7645           FF76         06            push	6[bp]
28442                                           ! Debug: func () void = write_byte+0 (used reg = )
28443 7648           E8         0726            call	_write_byte
28444 764B           83C4                   06  add	sp,*6
28445                                           !BCC_EOS
28446                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28447 764E           8B46         08            mov	ax,8[bp]
28448 7651           40                         inc	ax
28449 7652           8946         08            mov	8[bp],ax
28450                                           !BCC_EOS
28451                                           ! 3829         }
28452                                           ! 3830         write_byte(ES, BX, 0); BX++;
28453                       00007655            .276:
28454                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28455 7655           8B46         FE            mov	ax,-2[bp]
28456 7658           40                         inc	ax
28457 7659           8946         FE            mov	-2[bp],ax
28458                       0000765C            .277:
28459                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28460 765C           8B46         FE            mov	ax,-2[bp]
28461 765F           3D                   0300  cmp	ax,#$300
28462 7662           72           D2            jb 	.278
28463                       00007664            .279:
28464                       00007664            .275:
28465                                           ! Debug: list int = const 0 (used reg = )
28466 7664           31C0                       xor	ax,ax
28467 7666           50                         push	ax
28468                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28469 7667           FF76         08            push	8[bp]
28470                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28471 766A           FF76         06            push	6[bp]
28472                                           ! Debug: func () void = write_byte+0 (used reg = )
28473 766D           E8         0701            call	_write_byte
28474 7670           83C4                   06  add	sp,*6
28475                                           !BCC_EOS
28476                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28477 7673           8B46         08            mov	ax,8[bp]
28478 7676           40                         inc	ax
28479 7677           8946         08            mov	8[bp],ax
28480                                           !BCC_EOS
28481                                           ! 3831     }
28482                                           ! 3832     return BX;
28483                       0000767A            .273:
28484 767A           8B46         08            mov	ax,8[bp]
28485 767D           89EC                       mov	sp,bp
28486 767F           5D                         pop	bp
28487 7680           C3                         ret
28488                                           !BCC_EOS
28489                                           ! 3833 }
28490                                           ! 3834 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28491                                           ! 3835      Bit16u CX;Bit16u ES;Bit16u BX;
28492                       00007681            _biosfn_restore_video_state:
28493                                           !BCC_EOS
28494                                           !BCC_EOS
28495                                           !BCC_EOS
28496                                           ! 3836 {
28497                                           ! 3837     Bit16u i, crtc_addr, v, addr1, ar_index;
28498                                           !BCC_EOS
28499                                           ! 3838     if (CX & 1) {
28500 7681           55                         push	bp
28501 7682           89E5                       mov	bp,sp
28502 7684           83C4                   F6  add	sp,*-$A
28503                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28504 7687           8A46         04            mov	al,4[bp]
28505 768A           24                     01  and	al,*1
28506 768C           84C0                       test	al,al
28507 768E         0F84         02AA            beq 	.27A
28508                       00007692            .27B:
28509                                           ! 3839         inb(0x3da);
28510                                           ! Debug: list int = const $3DA (used reg = )
28511 7692           B8                   03DA  mov	ax,#$3DA
28512 7695           50                         push	ax
28513                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28514 7696           E8         0708            call	_inb
28515 7699           44                         inc	sp
28516 769A           44                         inc	sp
28517                                           !BCC_EOS
28518                                           ! 3840         crtc_addr = read_word(ES, BX + 0x40);
28519                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28520 769B           8B46         08            mov	ax,8[bp]
28521                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28522 769E           05                   0040  add	ax,*$40
28523 76A1           50                         push	ax
28524                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28525 76A2           FF76         06            push	6[bp]
28526                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28527 76A5           E8         06B6            call	_read_word
28528 76A8           83C4                   04  add	sp,*4
28529                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28530 76AB           8946         FC            mov	-4[bp],ax
28531                                           !BCC_EOS
28532                                           ! 3841         addr1 = BX;
28533                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28534 76AE           8B46         08            mov	ax,8[bp]
28535 76B1           8946         F8            mov	-8[bp],ax
28536                                           !BCC_EOS
28537                                           ! 3842         BX += 5;
28538                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28539 76B4           8B46         08            mov	ax,8[bp]
28540 76B7           05                   0005  add	ax,*5
28541 76BA           8946         08            mov	8[bp],ax
28542                                           !BCC_EOS
28543                                           ! 3843         for(i=1;i<=4;i++){
28544                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28545 76BD           B8                   0001  mov	ax,*1
28546 76C0           8946         FE            mov	-2[bp],ax
28547                                           !BCC_EOS
28548                                           !BCC_EOS
28549 76C3           EB           34            jmp .27E
28550                       000076C5            .27F:
28551                                           ! 3844             outb(0x3c4, i);
28552                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28553 76C5           FF76         FE            push	-2[bp]
28554                                           ! Debug: list int = const $3C4 (used reg = )
28555 76C8           B8                   03C4  mov	ax,#$3C4
28556 76CB           50                         push	ax
28557                                           ! Debug: func () void = outb+0 (used reg = )
28558 76CC           E8         06E8            call	_outb
28559 76CF           83C4                   04  add	sp,*4
28560                                           !BCC_EOS
28561                                           ! 3845             outb(0x3c5, read_byte(ES, BX)); BX++;
28562                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28563 76D2           FF76         08            push	8[bp]
28564                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28565 76D5           FF76         06            push	6[bp]
28566                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28567 76D8           E8         0670            call	_read_byte
28568 76DB           83C4                   04  add	sp,*4
28569                                           ! Debug: list unsigned char = al+0 (used reg = )
28570 76DE           30E4                       xor	ah,ah
28571 76E0           50                         push	ax
28572                                           ! Debug: list int = const $3C5 (used reg = )
28573 76E1           B8                   03C5  mov	ax,#$3C5
28574 76E4           50                         push	ax
28575                                           ! Debug: func () void = outb+0 (used reg = )
28576 76E5           E8         06CF            call	_outb
28577 76E8           83C4                   04  add	sp,*4
28578                                           !BCC_EOS
28579                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28580 76EB           8B46         08            mov	ax,8[bp]
28581 76EE           40                         inc	ax
28582 76EF           8946         08            mov	8[bp],ax
28583                                           !BCC_EOS
28584                                           ! 3846         }
28585                                           ! 3847         outb(0x3c4, 0);
28586                       000076F2            .27D:
28587                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28588 76F2           8B46         FE            mov	ax,-2[bp]
28589 76F5           40                         inc	ax
28590 76F6           8946         FE            mov	-2[bp],ax
28591                       000076F9            .27E:
28592                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28593 76F9           8B46         FE            mov	ax,-2[bp]
28594 76FC           3D                   0004  cmp	ax,*4
28595 76FF           76           C4            jbe	.27F
28596                       00007701            .280:
28597                       00007701            .27C:
28598                                           ! Debug: list int = const 0 (used reg = )
28599 7701           31C0                       xor	ax,ax
28600 7703           50                         push	ax
28601                                           ! Debug: list int = const $3C4 (used reg = )
28602 7704           B8                   03C4  mov	ax,#$3C4
28603 7707           50                         push	ax
28604                                           ! Debug: func () void = outb+0 (used reg = )
28605 7708           E8         06AC            call	_outb
28606 770B           83C4                   04  add	sp,*4
28607                                           !BCC_EOS
28608                                           ! 3848         outb(0x3c5, read_byte(ES, BX)); BX++;
28609                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28610 770E           FF76         08            push	8[bp]
28611                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28612 7711           FF76         06            push	6[bp]
28613                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28614 7714           E8         0634            call	_read_byte
28615 7717           83C4                   04  add	sp,*4
28616                                           ! Debug: list unsigned char = al+0 (used reg = )
28617 771A           30E4                       xor	ah,ah
28618 771C           50                         push	ax
28619                                           ! Debug: list int = const $3C5 (used reg = )
28620 771D           B8                   03C5  mov	ax,#$3C5
28621 7720           50                         push	ax
28622                                           ! Debug: func () void = outb+0 (used reg = )
28623 7721           E8         0693            call	_outb
28624 7724           83C4                   04  add	sp,*4
28625                                           !BCC_EOS
28626                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28627 7727           8B46         08            mov	ax,8[bp]
28628 772A           40                         inc	ax
28629 772B           8946         08            mov	8[bp],ax
28630                                           !BCC_EOS
28631                                           ! 3849         outw(crtc_addr,0x0011);
28632                                           ! Debug: list int = const $11 (used reg = )
28633 772E           B8                   0011  mov	ax,*$11
28634 7731           50                         push	ax
28635                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28636 7732           FF76         FC            push	-4[bp]
28637                                           ! Debug: func () void = outw+0 (used reg = )
28638 7735           E8         068F            call	_outw
28639 7738           83C4                   04  add	sp,*4
28640                                           !BCC_EOS
28641                                           ! 3850         for(i=0;i<=0x18;i++) {
28642                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28643 773B           31C0                       xor	ax,ax
28644 773D           8946         FE            mov	-2[bp],ax
28645                                           !BCC_EOS
28646                                           !BCC_EOS
28647 7740           EB           3C            jmp .283
28648                       00007742            .284:
28649                                           ! 3851             if (i != 0x11) {
28650                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28651 7742           8B46         FE            mov	ax,-2[bp]
28652 7745           3D                   0011  cmp	ax,*$11
28653 7748           74           26            je  	.285
28654                       0000774A            .286:
28655                                           ! 3852                 outb(crtc_addr,i);
28656                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28657 774A           FF76         FE            push	-2[bp]
28658                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28659 774D           FF76         FC            push	-4[bp]
28660                                           ! Debug: func () void = outb+0 (used reg = )
28661 7750           E8         0664            call	_outb
28662 7753           83C4                   04  add	sp,*4
28663                                           !BCC_EOS
28664                                           ! 3853                 outb(crtc_addr+1, read_byte(ES, BX));
28665                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28666 7756           FF76         08            push	8[bp]
28667                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28668 7759           FF76         06            push	6[bp]
28669                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28670 775C           E8         05EC            call	_read_byte
28671 775F           83C4                   04  add	sp,*4
28672                                           ! Debug: list unsigned char = al+0 (used reg = )
28673 7762           30E4                       xor	ah,ah
28674 7764           50                         push	ax
28675                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28676 7765           8B46         FC            mov	ax,-4[bp]
28677                                           ! Debug: list unsigned int = ax+1 (used reg = )
28678 7768           40                         inc	ax
28679 7769           50                         push	ax
28680                                           ! Debug: func () void = outb+0 (used reg = )
28681 776A           E8         064A            call	_outb
28682 776D           83C4                   04  add	sp,*4
28683                                           !BCC_EOS
28684                                           ! 3854             }
28685                                           ! 3855             BX++;
28686                       00007770            .285:
28687                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28688 7770           8B46         08            mov	ax,8[bp]
28689 7773           40                         inc	ax
28690 7774           8946         08            mov	8[bp],ax
28691                                           !BCC_EOS
28692                                           ! 3856         }
28693                                           ! 3857         v = inb(0x3cc) & ~0x01;
28694                       00007777            .282:
28695                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28696 7777           8B46         FE            mov	ax,-2[bp]
28697 777A           40                         inc	ax
28698 777B           8946         FE            mov	-2[bp],ax
28699                       0000777E            .283:
28700                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28701 777E           8B46         FE            mov	ax,-2[bp]
28702 7781           3D                   0018  cmp	ax,*$18
28703 7784           76           BC            jbe	.284
28704                       00007786            .287:
28705                       00007786            .281:
28706                                           ! Debug: list int = const $3CC (used reg = )
28707 7786           B8                   03CC  mov	ax,#$3CC
28708 7789           50                         push	ax
28709                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28710 778A           E8         0614            call	_inb
28711 778D           44                         inc	sp
28712 778E           44                         inc	sp
28713                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28714 778F           24                     FE  and	al,#$FE
28715                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28716 7791           30E4                       xor	ah,ah
28717 7793           8946         FA            mov	-6[bp],ax
28718                                           !BCC_EOS
28719                                           ! 3858         if (crtc_addr = 0x3d4)
28720                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28721 7796           B8                   03D4  mov	ax,#$3D4
28722 7799           8946         FC            mov	-4[bp],ax
28723 779C           85C0                       test	ax,ax
28724 779E           74           08            je  	.288
28725                       000077A0            .289:
28726                                           ! 3859             v |= 0x01;
28727                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28728 77A0           8B46         FA            mov	ax,-6[bp]
28729 77A3           0C                     01  or	al,*1
28730 77A5           8946         FA            mov	-6[bp],ax
28731                                           !BCC_EOS
28732                                           ! 3860         outb(0x3c2, v);
28733                       000077A8            .288:
28734                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28735 77A8           FF76         FA            push	-6[bp]
28736                                           ! Debug: list int = const $3C2 (used reg = )
28737 77AB           B8                   03C2  mov	ax,#$3C2
28738 77AE           50                         push	ax
28739                                           ! Debug: func () void = outb+0 (used reg = )
28740 77AF           E8         0605            call	_outb
28741 77B2           83C4                   04  add	sp,*4
28742                                           !BCC_EOS
28743                                           ! 3861         outb(crtc_addr, 0x11);
28744                                           ! Debug: list int = const $11 (used reg = )
28745 77B5           B8                   0011  mov	ax,*$11
28746 77B8           50                         push	ax
28747                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28748 77B9           FF76         FC            push	-4[bp]
28749                                           ! Debug: func () void = outb+0 (used reg = )
28750 77BC           E8         05F8            call	_outb
28751 77BF           83C4                   04  add	sp,*4
28752                                           !BCC_EOS
28753                                           ! 3862         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28754                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28755 77C2           8B46         08            mov	ax,8[bp]
28756                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28757                                           ! Debug: list unsigned int = ax-7 (used reg = )
28758 77C5           05                   FFF9  add	ax,*-7
28759 77C8           50                         push	ax
28760                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28761 77C9           FF76         06            push	6[bp]
28762                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28763 77CC           E8         057C            call	_read_byte
28764 77CF           83C4                   04  add	sp,*4
28765                                           ! Debug: list unsigned char = al+0 (used reg = )
28766 77D2           30E4                       xor	ah,ah
28767 77D4           50                         push	ax
28768                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28769 77D5           8B46         FC            mov	ax,-4[bp]
28770                                           ! Debug: list unsigned int = ax+1 (used reg = )
28771 77D8           40                         inc	ax
28772 77D9           50                         push	ax
28773                                           ! Debug: func () void = outb+0 (used reg = )
28774 77DA           E8         05DA            call	_outb
28775 77DD           83C4                   04  add	sp,*4
28776                                           !BCC_EOS
28777                                           ! 3863         ar_index = read_byte(ES, addr1 + 0x03);
28778                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28779 77E0           8B46         F8            mov	ax,-8[bp]
28780                                           ! Debug: list unsigned int = ax+3 (used reg = )
28781 77E3           05                   0003  add	ax,*3
28782 77E6           50                         push	ax
28783                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28784 77E7           FF76         06            push	6[bp]
28785                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28786 77EA           E8         055E            call	_read_byte
28787 77ED           83C4                   04  add	sp,*4
28788                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28789 77F0           30E4                       xor	ah,ah
28790 77F2           8946         F6            mov	-$A[bp],ax
28791                                           !BCC_EOS
28792                                           ! 3864         inb(0x3da);
28793                                           ! Debug: list int = const $3DA (used reg = )
28794 77F5           B8                   03DA  mov	ax,#$3DA
28795 77F8           50                         push	ax
28796                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28797 77F9           E8         05A5            call	_inb
28798 77FC           44                         inc	sp
28799 77FD           44                         inc	sp
28800                                           !BCC_EOS
28801                                           ! 3865         for(i=0;i<=0x13;i++) {
28802                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28803 77FE           31C0                       xor	ax,ax
28804 7800           8946         FE            mov	-2[bp],ax
28805                                           !BCC_EOS
28806                                           !BCC_EOS
28807 7803           EB           3C            jmp .28C
28808                       00007805            .28D:
28809                                           ! 3866             outb(0x3c0, i | (ar_index & 0x20));
28810                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28811 7805           8A46         F6            mov	al,-$A[bp]
28812 7808           24                     20  and	al,*$20
28813                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28814                                           ! Debug: expression subtree swapping
28815 780A           30E4                       xor	ah,ah
28816 780C           0B46         FE            or	ax,-2[bp]
28817                                           ! Debug: list unsigned int = ax+0 (used reg = )
28818 780F           50                         push	ax
28819                                           ! Debug: list int = const $3C0 (used reg = )
28820 7810           B8                   03C0  mov	ax,#$3C0
28821 7813           50                         push	ax
28822                                           ! Debug: func () void = outb+0 (used reg = )
28823 7814           E8         05A0            call	_outb
28824 7817           83C4                   04  add	sp,*4
28825                                           !BCC_EOS
28826                                           ! 3867             outb(0x3c0, read_byte(ES, BX)); BX++;
28827                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28828 781A           FF76         08            push	8[bp]
28829                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28830 781D           FF76         06            push	6[bp]
28831                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28832 7820           E8         0528            call	_read_byte
28833 7823           83C4                   04  add	sp,*4
28834                                           ! Debug: list unsigned char = al+0 (used reg = )
28835 7826           30E4                       xor	ah,ah
28836 7828           50                         push	ax
28837                                           ! Debug: list int = const $3C0 (used reg = )
28838 7829           B8                   03C0  mov	ax,#$3C0
28839 782C           50                         push	ax
28840                                           ! Debug: func () void = outb+0 (used reg = )
28841 782D           E8         0587            call	_outb
28842 7830           83C4                   04  add	sp,*4
28843                                           !BCC_EOS
28844                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28845 7833           8B46         08            mov	ax,8[bp]
28846 7836           40                         inc	ax
28847 7837           8946         08            mov	8[bp],ax
28848                                           !BCC_EOS
28849                                           ! 3868         }
28850                                           ! 3869         outb(0x3c0, ar_index);
28851                       0000783A            .28B:
28852                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28853 783A           8B46         FE            mov	ax,-2[bp]
28854 783D           40                         inc	ax
28855 783E           8946         FE            mov	-2[bp],ax
28856                       00007841            .28C:
28857                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28858 7841           8B46         FE            mov	ax,-2[bp]
28859 7844           3D                   0013  cmp	ax,*$13
28860 7847           76           BC            jbe	.28D
28861                       00007849            .28E:
28862                       00007849            .28A:
28863                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28864 7849           FF76         F6            push	-$A[bp]
28865                                           ! Debug: list int = const $3C0 (used reg = )
28866 784C           B8                   03C0  mov	ax,#$3C0
28867 784F           50                         push	ax
28868                                           ! Debug: func () void = outb+0 (used reg = )
28869 7850           E8         0564            call	_outb
28870 7853           83C4                   04  add	sp,*4
28871                                           !BCC_EOS
28872                                           ! 3870         inb(0x3da);
28873                                           ! Debug: list int = const $3DA (used reg = )
28874 7856           B8                   03DA  mov	ax,#$3DA
28875 7859           50                         push	ax
28876                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28877 785A           E8         0544            call	_inb
28878 785D           44                         inc	sp
28879 785E           44                         inc	sp
28880                                           !BCC_EOS
28881                                           ! 3871         for(i=0;i<=8
28882                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28883 785F           31C0                       xor	ax,ax
28884 7861           8946         FE            mov	-2[bp],ax
28885                                           !BCC_EOS
28886                                           ! 3871 ;i++) {
28887                                           !BCC_EOS
28888 7864           EB           34            jmp .291
28889                       00007866            .292:
28890                                           ! 3872             outb(0x3ce,i);
28891                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28892 7866           FF76         FE            push	-2[bp]
28893                                           ! Debug: list int = const $3CE (used reg = )
28894 7869           B8                   03CE  mov	ax,#$3CE
28895 786C           50                         push	ax
28896                                           ! Debug: func () void = outb+0 (used reg = )
28897 786D           E8         0547            call	_outb
28898 7870           83C4                   04  add	sp,*4
28899                                           !BCC_EOS
28900                                           ! 3873             outb(0x3cf, read_byte(ES, BX)); BX++;
28901                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28902 7873           FF76         08            push	8[bp]
28903                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28904 7876           FF76         06            push	6[bp]
28905                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28906 7879           E8         04CF            call	_read_byte
28907 787C           83C4                   04  add	sp,*4
28908                                           ! Debug: list unsigned char = al+0 (used reg = )
28909 787F           30E4                       xor	ah,ah
28910 7881           50                         push	ax
28911                                           ! Debug: list int = const $3CF (used reg = )
28912 7882           B8                   03CF  mov	ax,#$3CF
28913 7885           50                         push	ax
28914                                           ! Debug: func () void = outb+0 (used reg = )
28915 7886           E8         052E            call	_outb
28916 7889           83C4                   04  add	sp,*4
28917                                           !BCC_EOS
28918                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28919 788C           8B46         08            mov	ax,8[bp]
28920 788F           40                         inc	ax
28921 7890           8946         08            mov	8[bp],ax
28922                                           !BCC_EOS
28923                                           ! 3874         }
28924                                           ! 3875         BX += 2;
28925                       00007893            .290:
28926                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28927 7893           8B46         FE            mov	ax,-2[bp]
28928 7896           40                         inc	ax
28929 7897           8946         FE            mov	-2[bp],ax
28930                       0000789A            .291:
28931                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28932 789A           8B46         FE            mov	ax,-2[bp]
28933 789D           3D                   0008  cmp	ax,*8
28934 78A0           76           C4            jbe	.292
28935                       000078A2            .293:
28936                       000078A2            .28F:
28937                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28938 78A2           8B46         08            mov	ax,8[bp]
28939 78A5           40                         inc	ax
28940 78A6           40                         inc	ax
28941 78A7           8946         08            mov	8[bp],ax
28942                                           !BCC_EOS
28943                                           ! 3876         BX += 4;
28944                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28945 78AA           8B46         08            mov	ax,8[bp]
28946 78AD           05                   0004  add	ax,*4
28947 78B0           8946         08            mov	8[bp],ax
28948                                           !BCC_EOS
28949                                           ! 3877         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28950                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28951 78B3           FF76         F8            push	-8[bp]
28952                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28953 78B6           FF76         06            push	6[bp]
28954                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28955 78B9           E8         048F            call	_read_byte
28956 78BC           83C4                   04  add	sp,*4
28957                                           ! Debug: list unsigned char = al+0 (used reg = )
28958 78BF           30E4                       xor	ah,ah
28959 78C1           50                         push	ax
28960                                           ! Debug: list int = const $3C4 (used reg = )
28961 78C2           B8                   03C4  mov	ax,#$3C4
28962 78C5           50                         push	ax
28963                                           ! Debug: func () void = outb+0 (used reg = )
28964 78C6           E8         04EE            call	_outb
28965 78C9           83C4                   04  add	sp,*4
28966                                           !BCC_EOS
28967                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28968 78CC           8B46         F8            mov	ax,-8[bp]
28969 78CF           40                         inc	ax
28970 78D0           8946         F8            mov	-8[bp],ax
28971                                           !BCC_EOS
28972                                           ! 3878         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28973                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28974 78D3           FF76         F8            push	-8[bp]
28975                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28976 78D6           FF76         06            push	6[bp]
28977                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28978 78D9           E8         046F            call	_read_byte
28979 78DC           83C4                   04  add	sp,*4
28980                                           ! Debug: list unsigned char = al+0 (used reg = )
28981 78DF           30E4                       xor	ah,ah
28982 78E1           50                         push	ax
28983                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28984 78E2           FF76         FC            push	-4[bp]
28985                                           ! Debug: func () void = outb+0 (used reg = )
28986 78E5           E8         04CF            call	_outb
28987 78E8           83C4                   04  add	sp,*4
28988                                           !BCC_EOS
28989                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28990 78EB           8B46         F8            mov	ax,-8[bp]
28991 78EE           40                         inc	ax
28992 78EF           8946         F8            mov	-8[bp],ax
28993                                           !BCC_EOS
28994                                           ! 3879         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28995                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28996 78F2           FF76         F8            push	-8[bp]
28997                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28998 78F5           FF76         06            push	6[bp]
28999                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29000 78F8           E8         0450            call	_read_byte
29001 78FB           83C4                   04  add	sp,*4
29002                                           ! Debug: list unsigned char = al+0 (used reg = )
29003 78FE           30E4                       xor	ah,ah
29004 7900           50                         push	ax
29005                                           ! Debug: list int = const $3CE (used reg = )
29006 7901           B8                   03CE  mov	ax,#$3CE
29007 7904           50                         push	ax
29008                                           ! Debug: func () void = outb+0 (used reg = )
29009 7905           E8         04AF            call	_outb
29010 7908           83C4                   04  add	sp,*4
29011                                           !BCC_EOS
29012                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29013 790B           8B46         F8            mov	ax,-8[bp]
29014 790E           40                         inc	ax
29015 790F           8946         F8            mov	-8[bp],ax
29016                                           !BCC_EOS
29017                                           ! 3880         addr1++;
29018                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29019 7912           8B46         F8            mov	ax,-8[bp]
29020 7915           40                         inc	ax
29021 7916           8946         F8            mov	-8[bp],ax
29022                                           !BCC_EOS
29023                                           ! 3881         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29024                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29025 7919           FF76         F8            push	-8[bp]
29026                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29027 791C           FF76         06            push	6[bp]
29028                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29029 791F           E8         0429            call	_read_byte
29030 7922           83C4                   04  add	sp,*4
29031                                           ! Debug: list unsigned char = al+0 (used reg = )
29032 7925           30E4                       xor	ah,ah
29033 7927           50                         push	ax
29034                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29035 7928           8B46         FC            mov	ax,-4[bp]
29036                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29037                                           ! Debug: list unsigned int = ax+6 (used reg = )
29038 792B           05                   0006  add	ax,*6
29039 792E           50                         push	ax
29040                                           ! Debug: func () void = outb+0 (used reg = )
29041 792F           E8         0485            call	_outb
29042 7932           83C4                   04  add	sp,*4
29043                                           !BCC_EOS
29044                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29045 7935           8B46         F8            mov	ax,-8[bp]
29046 7938           40                         inc	ax
29047 7939           8946         F8            mov	-8[bp],ax
29048                                           !BCC_EOS
29049                                           ! 3882     }
29050                                           ! 3883     if (CX & 2) {
29051                       0000793C            .27A:
29052                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29053 793C           8A46         04            mov	al,4[bp]
29054 793F           24                     02  and	al,*2
29055 7941           84C0                       test	al,al
29056 7943         0F84         0270            beq 	.294
29057                       00007947            .295:
29058                                           ! 3884         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29059                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29060 7947           FF76         08            push	8[bp]
29061                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29062 794A           FF76         06            push	6[bp]
29063                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29064 794D           E8         03FB            call	_read_byte
29065 7950           83C4                   04  add	sp,*4
29066                                           ! Debug: list unsigned char = al+0 (used reg = )
29067 7953           30E4                       xor	ah,ah
29068 7955           50                         push	ax
29069                                           ! Debug: list int = const $49 (used reg = )
29070 7956           B8                   0049  mov	ax,*$49
29071 7959           50                         push	ax
29072                                           ! Debug: list int = const $40 (used reg = )
29073 795A           B8                   0040  mov	ax,*$40
29074 795D           50                         push	ax
29075                                           ! Debug: func () void = write_byte+0 (used reg = )
29076 795E           E8         0410            call	_write_byte
29077 7961           83C4                   06  add	sp,*6
29078                                           !BCC_EOS
29079                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29080 7964           8B46         08            mov	ax,8[bp]
29081 7967           40                         inc	ax
29082 7968           8946         08            mov	8[bp],ax
29083                                           !BCC_EOS
29084                                           ! 3885         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29085                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29086 796B           FF76         08            push	8[bp]
29087                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29088 796E           FF76         06            push	6[bp]
29089                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29090 7971           E8         03EA            call	_read_word
29091 7974           83C4                   04  add	sp,*4
29092                                           ! Debug: list unsigned short = ax+0 (used reg = )
29093 7977           50                         push	ax
29094                                           ! Debug: list int = const $4A (used reg = )
29095 7978           B8                   004A  mov	ax,*$4A
29096 797B           50                         push	ax
29097                                           ! Debug: list int = const $40 (used reg = )
29098 797C           B8                   0040  mov	ax,*$40
29099 797F           50                         push	ax
29100                                           ! Debug: func () void = write_word+0 (used reg = )
29101 7980           E8         0406            call	_write_word
29102 7983           83C4                   06  add	sp,*6
29103                                           !BCC_EOS
29104                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29105 7986           8B46         08            mov	ax,8[bp]
29106 7989           40                         inc	ax
29107 798A           40                         inc	ax
29108 798B           8946         08            mov	8[bp],ax
29109                                           !BCC_EOS
29110                                           ! 3886         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29111                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29112 798E           FF76         08            push	8[bp]
29113                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29114 7991           FF76         06            push	6[bp]
29115                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29116 7994           E8         03C7            call	_read_word
29117 7997           83C4                   04  add	sp,*4
29118                                           ! Debug: list unsigned short = ax+0 (used reg = )
29119 799A           50                         push	ax
29120                                           ! Debug: list int = const $4C (used reg = )
29121 799B           B8                   004C  mov	ax,*$4C
29122 799E           50                         push	ax
29123                                           ! Debug: list int = const $40 (used reg = )
29124 799F           B8                   0040  mov	ax,*$40
29125 79A2           50                         push	ax
29126                                           ! Debug: func () void = write_word+0 (used reg = )
29127 79A3           E8         03E3            call	_write_word
29128 79A6           83C4                   06  add	sp,*6
29129                                           !BCC_EOS
29130                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29131 79A9           8B46         08            mov	ax,8[bp]
29132 79AC           40                         inc	ax
29133 79AD           40                         inc	ax
29134 79AE           8946         08            mov	8[bp],ax
29135                                           !BCC_EOS
29136                                           ! 3887         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29137                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29138 79B1           FF76         08            push	8[bp]
29139                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29140 79B4           FF76         06            push	6[bp]
29141                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29142 79B7           E8         03A4            call	_read_word
29143 79BA           83C4                   04  add	sp,*4
29144                                           ! Debug: list unsigned short = ax+0 (used reg = )
29145 79BD           50                         push	ax
29146                                           ! Debug: list int = const $63 (used reg = )
29147 79BE           B8                   0063  mov	ax,*$63
29148 79C1           50                         push	ax
29149                                           ! Debug: list int = const $40 (used reg = )
29150 79C2           B8                   0040  mov	ax,*$40
29151 79C5           50                         push	ax
29152                                           ! Debug: func () void = write_word+0 (used reg = )
29153 79C6           E8         03C0            call	_write_word
29154 79C9           83C4                   06  add	sp,*6
29155                                           !BCC_EOS
29156                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29157 79CC           8B46         08            mov	ax,8[bp]
29158 79CF           40                         inc	ax
29159 79D0           40                         inc	ax
29160 79D1           8946         08            mov	8[bp],ax
29161                                           !BCC_EOS
29162                                           ! 3888         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29163                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29164 79D4           FF76         08            push	8[bp]
29165                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29166 79D7           FF76         06            push	6[bp]
29167                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29168 79DA           E8         036E            call	_read_byte
29169 79DD           83C4                   04  add	sp,*4
29170                                           ! Debug: list unsigned char = al+0 (used reg = )
29171 79E0           30E4                       xor	ah,ah
29172 79E2           50                         push	ax
29173                                           ! Debug: list int = const $84 (used reg = )
29174 79E3           B8                   0084  mov	ax,#$84
29175 79E6           50                         push	ax
29176                                           ! Debug: list int = const $40 (used reg = )
29177 79E7           B8                   0040  mov	ax,*$40
29178 79EA           50                         push	ax
29179                                           ! Debug: func () void = write_byte+0 (used reg = )
29180 79EB           E8         0383            call	_write_byte
29181 79EE           83C4                   06  add	sp,*6
29182                                           !BCC_EOS
29183                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29184 79F1           8B46         08            mov	ax,8[bp]
29185 79F4           40                         inc	ax
29186 79F5           8946         08            mov	8[bp],ax
29187                                           !BCC_EOS
29188                                           ! 3889         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29189                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29190 79F8           FF76         08            push	8[bp]
29191                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29192 79FB           FF76         06            push	6[bp]
29193                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29194 79FE           E8         035D            call	_read_word
29195 7A01           83C4                   04  add	sp,*4
29196                                           ! Debug: list unsigned short = ax+0 (used reg = )
29197 7A04           50                         push	ax
29198                                           ! Debug: list int = const $85 (used reg = )
29199 7A05           B8                   0085  mov	ax,#$85
29200 7A08           50                         push	ax
29201                                           ! Debug: list int = const $40 (used reg = )
29202 7A09           B8                   0040  mov	ax,*$40
29203 7A0C           50                         push	ax
29204                                           ! Debug: func () void = write_word+0 (used reg = )
29205 7A0D           E8         0379            call	_write_word
29206 7A10           83C4                   06  add	sp,*6
29207                                           !BCC_EOS
29208                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29209 7A13           8B46         08            mov	ax,8[bp]
29210 7A16           40                         inc	ax
29211 7A17           40                         inc	ax
29212 7A18           8946         08            mov	8[bp],ax
29213                                           !BCC_EOS
29214                                           ! 3890         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29215                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29216 7A1B           FF76         08            push	8[bp]
29217                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29218 7A1E           FF76         06            push	6[bp]
29219                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29220 7A21           E8         0327            call	_read_byte
29221 7A24           83C4                   04  add	sp,*4
29222                                           ! Debug: list unsigned char = al+0 (used reg = )
29223 7A27           30E4                       xor	ah,ah
29224 7A29           50                         push	ax
29225                                           ! Debug: list int = const $87 (used reg = )
29226 7A2A           B8                   0087  mov	ax,#$87
29227 7A2D           50                         push	ax
29228                                           ! Debug: list int = const $40 (used reg = )
29229 7A2E           B8                   0040  mov	ax,*$40
29230 7A31           50                         push	ax
29231                                           ! Debug: func () void = write_byte+0 (used reg = )
29232 7A32           E8         033C            call	_write_byte
29233 7A35           83C4                   06  add	sp,*6
29234                                           !BCC_EOS
29235                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29236 7A38           8B46         08            mov	ax,8[bp]
29237 7A3B           40                         inc	ax
29238 7A3C           8946         08            mov	8[bp],ax
29239                                           !BCC_EOS
29240                                           ! 3891         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29241                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29242 7A3F           FF76         08            push	8[bp]
29243                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29244 7A42           FF76         06            push	6[bp]
29245                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29246 7A45           E8         0303            call	_read_byte
29247 7A48           83C4                   04  add	sp,*4
29248                                           ! Debug: list unsigned char = al+0 (used reg = )
29249 7A4B           30E4                       xor	ah,ah
29250 7A4D           50                         push	ax
29251                                           ! Debug: list int = const $88 (used reg = )
29252 7A4E           B8                   0088  mov	ax,#$88
29253 7A51           50                         push	ax
29254                                           ! Debug: list int = const $40 (used reg = )
29255 7A52           B8                   0040  mov	ax,*$40
29256 7A55           50                         push	ax
29257                                           ! Debug: func () void = write_byte+0 (used reg = )
29258 7A56           E8         0318            call	_write_byte
29259 7A59           83C4                   06  add	sp,*6
29260                                           !BCC_EOS
29261                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29262 7A5C           8B46         08            mov	ax,8[bp]
29263 7A5F           40                         inc	ax
29264 7A60           8946         08            mov	8[bp],ax
29265                                           !BCC_EOS
29266                                           ! 3892         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29268 7A63           FF76         08            push	8[bp]
29269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29270 7A66           FF76         06            push	6[bp]
29271                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29272 7A69           E8         02DF            call	_read_byte
29273 7A6C           83C4                   04  add	sp,*4
29274                                           ! Debug: list unsigned char = al+0 (used reg = )
29275 7A6F           30E4                       xor	ah,ah
29276 7A71           50                         push	ax
29277                                           ! Debug: list int = const $89 (used reg = )
29278 7A72           B8                   0089  mov	ax,#$89
29279 7A75           50                         push	ax
29280                                           ! Debug: list int = const $40 (used reg = )
29281 7A76           B8                   0040  mov	ax,*$40
29282 7A79           50                         push	ax
29283                                           ! Debug: func () void = write_byte+0 (used reg = )
29284 7A7A           E8         02F4            call	_write_byte
29285 7A7D           83C4                   06  add	sp,*6
29286                                           !BCC_EOS
29287                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29288 7A80           8B46         08            mov	ax,8[bp]
29289 7A83           40                         inc	ax
29290 7A84           8946         08            mov	8[bp],ax
29291                                           !BCC_EOS
29292                                           ! 3893         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29293                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29294 7A87           FF76         08            push	8[bp]
29295                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29296 7A8A           FF76         06            push	6[bp]
29297                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29298 7A8D           E8         02CE            call	_read_word
29299 7A90           83C4                   04  add	sp,*4
29300                                           ! Debug: list unsigned short = ax+0 (used reg = )
29301 7A93           50                         push	ax
29302                                           ! Debug: list int = const $60 (used reg = )
29303 7A94           B8                   0060  mov	ax,*$60
29304 7A97           50                         push	ax
29305                                           ! Debug: list int = const $40 (used reg = )
29306 7A98           B8                   0040  mov	ax,*$40
29307 7A9B           50                         push	ax
29308                                           ! Debug: func () void = write_word+0 (used reg = )
29309 7A9C           E8         02EA            call	_write_word
29310 7A9F           83C4                   06  add	sp,*6
29311                                           !BCC_EOS
29312                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29313 7AA2           8B46         08            mov	ax,8[bp]
29314 7AA5           40                         inc	ax
29315 7AA6           40                         inc	ax
29316 7AA7           8946         08            mov	8[bp],ax
29317                                           !BCC_EOS
29318                                           ! 3894         for(i=0;i<8;i++) {
29319                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29320 7AAA           31C0                       xor	ax,ax
29321 7AAC           8946         FE            mov	-2[bp],ax
29322                                           !BCC_EOS
29323                                           !BCC_EOS
29324 7AAF           EB           2F            jmp .298
29325                       00007AB1            .299:
29326                                           ! 3895             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29327                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29328 7AB1           FF76         08            push	8[bp]
29329                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29330 7AB4           FF76         06            push	6[bp]
29331                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29332 7AB7           E8         02A4            call	_read_word
29333 7ABA           83C4                   04  add	sp,*4
29334                                           ! Debug: list unsigned short = ax+0 (used reg = )
29335 7ABD           50                         push	ax
29336                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29337                                           ! Debug: expression subtree swapping
29338 7ABE           8B46         FE            mov	ax,-2[bp]
29339 7AC1           D1E0                       shl	ax,*1
29340                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29341                                           ! Debug: expression subtree swapping
29342                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29343 7AC3           05                   0050  add	ax,*$50
29344 7AC6           50                         push	ax
29345                                           ! Debug: list int = const $40 (used reg = )
29346 7AC7           B8                   0040  mov	ax,*$40
29347 7ACA           50                         push	ax
29348                                           ! Debug: func () void = write_word+0 (used reg = )
29349 7ACB           E8         02BB            call	_write_word
29350 7ACE           83C4                   06  add	sp,*6
29351                                           !BCC_EOS
29352                                           ! 3896             BX += 2;
29353                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29354 7AD1           8B46         08            mov	ax,8[bp]
29355 7AD4           40                         inc	ax
29356 7AD5           40                         inc	ax
29357 7AD6           8946         08            mov	8[bp],ax
29358                                           !BCC_EOS
29359                                           ! 3897         }
29360                                           ! 3898         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29361                       00007AD9            .297:
29362                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29363 7AD9           8B46         FE            mov	ax,-2[bp]
29364 7ADC           40                         inc	ax
29365 7ADD           8946         FE            mov	-2[bp],ax
29366                       00007AE0            .298:
29367                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29368 7AE0           8B46         FE            mov	ax,-2[bp]
29369 7AE3           3D                   0008  cmp	ax,*8
29370 7AE6           72           C9            jb 	.299
29371                       00007AE8            .29A:
29372                       00007AE8            .296:
29373                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29374 7AE8           FF76         08            push	8[bp]
29375                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29376 7AEB           FF76         06            push	6[bp]
29377                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29378 7AEE           E8         026D            call	_read_word
29379 7AF1           83C4                   04  add	sp,*4
29380                                           ! Debug: list unsigned short = ax+0 (used reg = )
29381 7AF4           50                         push	ax
29382                                           ! Debug: list int = const $4E (used reg = )
29383 7AF5           B8                   004E  mov	ax,*$4E
29384 7AF8           50                         push	ax
29385                                           ! Debug: list int = const $40 (used reg = )
29386 7AF9           B8                   0040  mov	ax,*$40
29387 7AFC           50                         push	ax
29388                                           ! Debug: func () void = write_word+0 (used reg = )
29389 7AFD           E8         0289            call	_write_word
29390 7B00           83C4                   06  add	sp,*6
29391                                           !BCC_EOS
29392                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29393 7B03           8B46         08            mov	ax,8[bp]
29394 7B06           40                         inc	ax
29395 7B07           40                         inc	ax
29396 7B08           8946         08            mov	8[bp],ax
29397                                           !BCC_EOS
29398                                           ! 3899         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29399                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29400 7B0B           FF76         08            push	8[bp]
29401                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29402 7B0E           FF76         06            push	6[bp]
29403                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29404 7B11           E8         0237            call	_read_byte
29405 7B14           83C4                   04  add	sp,*4
29406                                           ! Debug: list unsigned char = al+0 (used reg = )
29407 7B17           30E4                       xor	ah,ah
29408 7B19           50                         push	ax
29409                                           ! Debug: list int = const $62 (used reg = )
29410 7B1A           B8                   0062  mov	ax,*$62
29411 7B1D           50                         push	ax
29412                                           ! Debug: list int = const $40 (used reg = )
29413 7B1E           B8                   0040  mov	ax,*$40
29414 7B21           50                         push	ax
29415                                           ! Debug: func () void = write_byte+0 (used reg = )
29416 7B22           E8         024C            call	_write_byte
29417 7B25           83C4                   06  add	sp,*6
29418                                           !BCC_EOS
29419                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29420 7B28           8B46         08            mov	ax,8[bp]
29421 7B2B           40                         inc	ax
29422 7B2C           8946         08            mov	8[bp],ax
29423                                           !BCC_EOS
29424                                           ! 3900         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29425                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29426 7B2F           FF76         08            push	8[bp]
29427                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29428 7B32           FF76         06            push	6[bp]
29429                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29430 7B35           E8         0226            call	_read_word
29431 7B38           83C4                   04  add	sp,*4
29432                                           ! Debug: list unsigned short = ax+0 (used reg = )
29433 7B3B           50                         push	ax
29434                                           ! Debug: list int = const $7C (used reg = )
29435 7B3C           B8                   007C  mov	ax,*$7C
29436 7B3F           50                         push	ax
29437                                           ! Debug: list int = const 0 (used reg = )
29438 7B40           31C0                       xor	ax,ax
29439 7B42           50                         push	ax
29440                                           ! Debug: func () void = write_word+0 (used reg = )
29441 7B43           E8         0243            call	_write_word
29442 7B46           83C4                   06  add	sp,*6
29443                                           !BCC_EOS
29444                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29445 7B49           8B46         08            mov	ax,8[bp]
29446 7B4C           40                         inc	ax
29447 7B4D           40                         inc	ax
29448 7B4E           8946         08            mov	8[bp],ax
29449                                           !BCC_EOS
29450                                           ! 3901         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29451                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29452 7B51           FF76         08            push	8[bp]
29453                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29454 7B54           FF76         06            push	6[bp]
29455                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29456 7B57           E8         0204            call	_read_word
29457 7B5A           83C4                   04  add	sp,*4
29458                                           ! Debug: list unsigned short = ax+0 (used reg = )
29459 7B5D           50                         push	ax
29460                                           ! Debug: list int = const $7E (used reg = )
29461 7B5E           B8                   007E  mov	ax,*$7E
29462 7B61           50                         push	ax
29463                                           ! Debug: list int = const 0 (used reg = )
29464 7B62           31C0                       xor	ax,ax
29465 7B64           50                         push	ax
29466                                           ! Debug: func () void = write_word+0 (used reg = )
29467 7B65           E8         0221            call	_write_word
29468 7B68           83C4                   06  add	sp,*6
29469                                           !BCC_EOS
29470                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29471 7B6B           8B46         08            mov	ax,8[bp]
29472 7B6E           40                         inc	ax
29473 7B6F           40                         inc	ax
29474 7B70           8946         08            mov	8[bp],ax
29475                                           !BCC_EOS
29476                                           ! 3902         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29477                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29478 7B73           FF76         08            push	8[bp]
29479                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29480 7B76           FF76         06            push	6[bp]
29481                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29482 7B79           E8         01E2            call	_read_word
29483 7B7C           83C4                   04  add	sp,*4
29484                                           ! Debug: list unsigned short = ax+0 (used reg = )
29485 7B7F           50                         push	ax
29486                                           ! Debug: list int = const $10C (used reg = )
29487 7B80           B8                   010C  mov	ax,#$10C
29488 7B83           50                         push	ax
29489                                           ! Debug: list int = const 0 (used reg = )
29490 7B84           31C0                       xor	ax,ax
29491 7B86           50                         push	ax
29492                                           ! Debug: func () void = write_word+0 (used reg = )
29493 7B87           E8         01FF            call	_write_word
29494 7B8A           83C4                   06  add	sp,*6
29495                                           !BCC_EOS
29496                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29497 7B8D           8B46         08            mov	ax,8[bp]
29498 7B90           40                         inc	ax
29499 7B91           40                         inc	ax
29500 7B92           8946         08            mov	8[bp],ax
29501                                           !BCC_EOS
29502                                           ! 3903         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29503                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29504 7B95           FF76         08            push	8[bp]
29505                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29506 7B98           FF76         06            push	6[bp]
29507                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29508 7B9B           E8         01C0            call	_read_word
29509 7B9E           83C4                   04  add	sp,*4
29510                                           ! Debug: list unsigned short = ax+0 (used reg = )
29511 7BA1           50                         push	ax
29512                                           ! Debug: list int = const $10E (used reg = )
29513 7BA2           B8                   010E  mov	ax,#$10E
29514 7BA5           50                         push	ax
29515                                           ! Debug: list int = const 0 (used reg = )
29516 7BA6           31C0                       xor	ax,ax
29517 7BA8           50                         push	ax
29518                                           ! Debug: func () void = write_word+0 (used reg = )
29519 7BA9           E8         01DD            call	_write_word
29520 7BAC           83C4                   06  add	sp,*6
29521                                           !BCC_EOS
29522                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29523 7BAF           8B46         08            mov	ax,8[bp]
29524 7BB2           40                         inc	ax
29525 7BB3           40                         inc	ax
29526 7BB4           8946         08            mov	8[bp],ax
29527                                           !BCC_EOS
29528                                           ! 3904     }
29529                                           ! 3905     if (CX & 4) {
29530                       00007BB7            .294:
29531                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29532 7BB7           8A46         04            mov	al,4[bp]
29533 7BBA           24                     04  and	al,*4
29534 7BBC           84C0                       test	al,al
29535 7BBE         0F84         0096            beq 	.29B
29536                       00007BC2            .29C:
29537                                           ! 3906         BX++;
29538                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29539 7BC2           8B46         08            mov	ax,8[bp]
29540 7BC5           40                         inc	ax
29541 7BC6           8946         08            mov	8[bp],ax
29542                                           !BCC_EOS
29543                                           ! 3907         v = read_byte(ES, BX); BX++;
29544                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29545 7BC9           FF76         08            push	8[bp]
29546                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29547 7BCC           FF76         06            push	6[bp]
29548                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29549 7BCF           E8         0179            call	_read_byte
29550 7BD2           83C4                   04  add	sp,*4
29551                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29552 7BD5           30E4                       xor	ah,ah
29553 7BD7           8946         FA            mov	-6[bp],ax
29554                                           !BCC_EOS
29555                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29556 7BDA           8B46         08            mov	ax,8[bp]
29557 7BDD           40                         inc	ax
29558 7BDE           8946         08            mov	8[bp],ax
29559                                           !BCC_EOS
29560                                           ! 3908         outb(0x3c6, read_byte(ES, BX)); BX++;
29561                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29562 7BE1           FF76         08            push	8[bp]
29563                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29564 7BE4           FF76         06            push	6[bp]
29565                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29566 7BE7           E8         0161            call	_read_byte
29567 7BEA           83C4                   04  add	sp,*4
29568                                           ! Debug: list unsigned char = al+0 (used reg = )
29569 7BED           30E4                       xor	ah,ah
29570 7BEF           50                         push	ax
29571                                           ! Debug: list int = const $3C6 (used reg = )
29572 7BF0           B8                   03C6  mov	ax,#$3C6
29573 7BF3           50                         push	ax
29574                                           ! Debug: func () void = outb+0 (used reg = )
29575 7BF4           E8         01C0            call	_outb
29576 7BF7           83C4                   04  add	sp,*4
29577                                           !BCC_EOS
29578                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29579 7BFA           8B46         08            mov	ax,8[bp]
29580 7BFD           40                         inc	ax
29581 7BFE           8946         08            mov	8[bp],ax
29582                                           !BCC_EOS
29583                                           ! 3909         outb(0x3c8,0x00);
29584                                           ! Debug: list int = const 0 (used reg = )
29585 7C01           31C0                       xor	ax,ax
29586 7C03           50                         push	ax
29587                                           ! Debug: list int = const $3C8 (used reg = )
29588 7C04           B8                   03C8  mov	ax,#$3C8
29589 7C07           50                         push	ax
29590                                           ! Debug: func () void = outb+0 (used reg = )
29591 7C08           E8         01AC            call	_outb
29592 7C0B           83C4                   04  add	sp,*4
29593                                           !BCC_EOS
29594                                           ! 3910         for(i=0;i<256*3;i++) {
29595                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29596 7C0E           31C0                       xor	ax,ax
29597 7C10           8946         FE            mov	-2[bp],ax
29598                                           !BCC_EOS
29599                                           !BCC_EOS
29600 7C13           EB           27            jmp .29F
29601                       00007C15            .2A0:
29602                                           ! 3911             outb(0x3c9, read_byte(ES, BX)); BX++;
29603                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29604 7C15           FF76         08            push	8[bp]
29605                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29606 7C18           FF76         06            push	6[bp]
29607                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29608 7C1B           E8         012D            call	_read_byte
29609 7C1E           83C4                   04  add	sp,*4
29610                                           ! Debug: list unsigned char = al+0 (used reg = )
29611 7C21           30E4                       xor	ah,ah
29612 7C23           50                         push	ax
29613                                           ! Debug: list int = const $3C9 (used reg = )
29614 7C24           B8                   03C9  mov	ax,#$3C9
29615 7C27           50                         push	ax
29616                                           ! Debug: func () void = outb+0 (used reg = )
29617 7C28           E8         018C            call	_outb
29618 7C2B           83C4                   04  add	sp,*4
29619                                           !BCC_EOS
29620                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29621 7C2E           8B46         08            mov	ax,8[bp]
29622 7C31           40                         inc	ax
29623 7C32           8946         08            mov	8[bp],ax
29624                                           !BCC_EOS
29625                                           ! 3912         }
29626                                           ! 3913         BX++;
29627                       00007C35            .29E:
29628                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29629 7C35           8B46         FE            mov	ax,-2[bp]
29630 7C38           40                         inc	ax
29631 7C39           8946         FE            mov	-2[bp],ax
29632                       00007C3C            .29F:
29633                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29634 7C3C           8B46         FE            mov	ax,-2[bp]
29635 7C3F           3D                   0300  cmp	ax,#$300
29636 7C42           72           D1            jb 	.2A0
29637                       00007C44            .2A1:
29638                       00007C44            .29D:
29639                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29640 7C44           8B46         08            mov	ax,8[bp]
29641 7C47           40                         inc	ax
29642 7C48           8946         08            mov	8[bp],ax
29643                                           !BCC_EOS
29644                                           ! 3914         outb(0x3c8, v);
29645                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29646 7C4B           FF76         FA            push	-6[bp]
29647                                           ! Debug: list int = const $3C8 (used reg = )
29648 7C4E           B8                   03C8  mov	ax,#$3C8
29649 7C51           50                         push	ax
29650                                           ! Debug: func () void = outb+0 (used reg = )
29651 7C52           E8         0162            call	_outb
29652 7C55           83C4                   04  add	sp,*4
29653                                           !BCC_EOS
29654                                           ! 3915     }
29655                                           ! 3916     return BX;
29656                       00007C58            .29B:
29657 7C58           8B46         08            mov	ax,8[bp]
29658 7C5B           89EC                       mov	sp,bp
29659 7C5D           5D                         pop	bp
29660 7C5E           C3                         ret
29661                                           !BCC_EOS
29662                                           ! 3917 }
29663                                           ! 3918 static Bit8u find_vga_entry(mode)
29664                                           ! 3919 Bit8u mode;
29665                       00007C5F            _find_vga_entry:
29666                                           !BCC_EOS
29667                                           ! 3920 {
29668                                           ! 3921  Bit8u i,line=0xFF;
29669 7C5F           55                         push	bp
29670 7C60           89E5                       mov	bp,sp
29671 7C62           4C                         dec	sp
29672 7C63           4C                         dec	sp
29673                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29674 7C64           B0                     FF  mov	al,#$FF
29675 7C66           8846         FE            mov	-2[bp],al
29676                                           !BCC_EOS
29677                                           ! 3922  for(i=0;i<=17;i++)
29678                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29679 7C69           30C0                       xor	al,al
29680 7C6B           8846         FF            mov	-1[bp],al
29681                                           !BCC_EOS
29682                                           !BCC_EOS
29683                                           ! 3923   if(vga_modes[i].svgamode==mode)
29684 7C6E           EB           23            jmp .2A4
29685                       00007C70            .2A5:
29686                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$12] struct  = vga_modes+0 (used reg = )
29687 7C70           8A46         FF            mov	al,-1[bp]
29688 7C73           30E4                       xor	ah,ah
29689 7C75           B1                     03  mov	cl,*3
29690 7C77           D3E0                       shl	ax,cl
29691 7C79           89C3                       mov	bx,ax
29692                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29693 7C7B           8A87       01DB            mov	al,_vga_modes[bx]
29694 7C7F           3A46         04            cmp	al,4[bp]
29695 7C82           75           08            jne 	.2A6
29696                       00007C84            .2A7:
29697                                           ! 3924    {line=i;
29698                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29699 7C84           8A46         FF            mov	al,-1[bp]
29700 7C87           8846         FE            mov	-2[bp],al
29701                                           !BCC_EOS
29702                                           ! 3925     break;
29703 7C8A           EB           0E            jmp .2A2
29704                                           !BCC_EOS
29705                                           ! 3926    }
29706                                           ! 3927  return line;
29707                       00007C8C            .2A6:
29708                       00007C8C            .2A3:
29709                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29710 7C8C           8A46         FF            mov	al,-1[bp]
29711 7C8F           40                         inc	ax
29712 7C90           8846         FF            mov	-1[bp],al
29713                       00007C93            .2A4:
29714                                           ! Debug: le int = const $11 to unsigned char i = [S+4-3] (used reg = )
29715 7C93           8A46         FF            mov	al,-1[bp]
29716 7C96           3C                     11  cmp	al,*$11
29717 7C98           76           D6            jbe	.2A5
29718                       00007C9A            .2A8:
29719                       00007C9A            .2A2:
29720 7C9A           8A46         FE            mov	al,-2[bp]
29721 7C9D           89EC                       mov	sp,bp
29722 7C9F           5D                         pop	bp
29723 7CA0           C3                         ret
29724                                           !BCC_EOS
29725                                           ! 3928 }
29726                                           ! 3929 static void memsetb(seg,offset,value,count)
29727                                           ! Register BX used in function find_vga_entry
29728                                           ! 3930   Bit16u seg;
29729                       00007CA1            _memsetb:
29730                                           !BCC_EOS
29731                                           ! 3931   Bit16u offset;
29732                                           !BCC_EOS
29733                                           ! 3932   Bit16u value;
29734                                           !BCC_EOS
29735                                           ! 3933   Bit16u count;
29736                                           !BCC_EOS
29737                                           ! 3934 {
29738                                           ! 3935 #asm
29739                                           !BCC_ASM
29740                       00000008            _memsetb.count	set	8
29741                       00000002            _memsetb.seg	set	2
29742                       00000006            _memsetb.value	set	6
29743                       00000004            _memsetb.offset	set	4
29744 7CA1           55                           push bp
29745 7CA2           89E5                         mov bp, sp
29746 7CA4           50                             push ax
29747 7CA5           51                             push cx
29748 7CA6           06                             push es
29749 7CA7           57                             push di
29750 7CA8           8B4E         0A                mov cx, 10[bp] ; count
29751 7CAB           83F9                   00      cmp cx, #0x00
29752 7CAE           74           10                je memsetb_end
29753 7CB0           8B46         04                mov ax, 4[bp] ; segment
29754 7CB3           8EC0                           mov es, ax
29755 7CB5           8B46         06                mov ax, 6[bp] ; offset
29756 7CB8           89C7                           mov di, ax
29757 7CBA           8A46         08                mov al, 8[bp] ; value
29758 7CBD           FC                             cld
29759 7CBE           F3                             rep
29760 7CBF           AA                              stosb
29761                       00007CC0            memsetb_end:
29762 7CC0           5F                             pop di
29763 7CC1           07                             pop es
29764 7CC2           59                             pop cx
29765 7CC3           58                             pop ax
29766 7CC4           5D                           pop bp
29767                                           ! 3959 endasm
29768                                           !BCC_ENDASM
29769                                           ! 3960 }
29770 7CC5           C3                         ret
29771                                           ! 3961 static void memsetw(seg,offset,value,count)
29772                                           ! 3962   Bit16u seg;
29773                       00007CC6            _memsetw:
29774                                           !BCC_EOS
29775                                           ! 3963   Bit16u offset;
29776                                           !BCC_EOS
29777                                           ! 3964   Bit16u value;
29778                                           !BCC_EOS
29779                                           ! 3965   Bit16u count;
29780                                           !BCC_EOS
29781                                           ! 3966 {
29782                                           ! 3967 #asm
29783                                           !BCC_ASM
29784                       00000008            _memsetw.count	set	8
29785                       00000002            _memsetw.seg	set	2
29786                       00000006            _memsetw.value	set	6
29787                       00000004            _memsetw.offset	set	4
29788 7CC6           55                           push bp
29789 7CC7           89E5                         mov bp, sp
29790 7CC9           50                             push ax
29791 7CCA           51                             push cx
29792 7CCB           06                             push es
29793 7CCC           57                             push di
29794 7CCD           8B4E         0A                mov cx, 10[bp] ; count
29795 7CD0           83F9                   00      cmp cx, #0x00
29796 7CD3           74           10                je memsetw_end
29797 7CD5           8B46         04                mov ax, 4[bp] ; segment
29798 7CD8           8EC0                           mov es, ax
29799 7CDA           8B46         06                mov ax, 6[bp] ; offset
29800 7CDD           89C7                           mov di, ax
29801 7CDF           8B46         08                mov ax, 8[bp] ; value
29802 7CE2           FC                             cld
29803 7CE3           F3                             rep
29804 7CE4           AB                              stosw
29805                       00007CE5            memsetw_end:
29806 7CE5           5F                             pop di
29807 7CE6           07                             pop es
29808 7CE7           59                             pop cx
29809 7CE8           58                             pop ax
29810 7CE9           5D                           pop bp
29811                                           ! 3991 endasm
29812                                           !BCC_ENDASM
29813                                           ! 3992 }
29814 7CEA           C3                         ret
29815                                           ! 3993 static void memcpyb(dseg,doffset,sseg,soffset,count)
29816                                           ! 3994   Bit16u dseg;
29817                       00007CEB            _memcpyb:
29818                                           !BCC_EOS
29819                                           ! 3995   Bit16u doffset;
29820                                           !BCC_EOS
29821                                           ! 3996   Bit16u sseg;
29822                                           !BCC_EOS
29823                                           ! 3997   Bit16u soffset;
29824                                           !BCC_EOS
29825                                           ! 3998   Bit16u count;
29826                                           !BCC_EOS
29827                                           ! 3999 {
29828                                           ! 4000 #asm
29829                                           !BCC_ASM
29830                       0000000A            _memcpyb.count	set	$A
29831                       00000006            _memcpyb.sseg	set	6
29832                       00000008            _memcpyb.soffset	set	8
29833                       00000002            _memcpyb.dseg	set	2
29834                       00000004            _memcpyb.doffset	set	4
29835 7CEB           55                           push bp
29836 7CEC           89E5                         mov bp, sp
29837 7CEE           50                             push ax
29838 7CEF           51                             push cx
29839 7CF0           06                             push es
29840 7CF1           57                             push di
29841 7CF2           1E                             push ds
29842 7CF3           56                             push si
29843 7CF4           8B4E         0C                mov cx, 12[bp] ; count
29844 7CF7           83F9                   00      cmp cx, #0x0000
29845 7CFA           74           17                je memcpyb_end
29846 7CFC           8B46         04                mov ax, 4[bp] ; dsegment
29847 7CFF           8EC0                           mov es, ax
29848 7D01           8B46         06                mov ax, 6[bp] ; doffset
29849 7D04           89C7                           mov di, ax
29850 7D06           8B46         08                mov ax, 8[bp] ; ssegment
29851 7D09           8ED8                           mov ds, ax
29852 7D0B           8B46         0A                mov ax, 10[bp] ; soffset
29853 7D0E           89C6                           mov si, ax
29854 7D10           FC                             cld
29855 7D11           F3                             rep
29856 7D12           A4                              movsb
29857                       00007D13            memcpyb_end:
29858 7D13           5E                             pop si
29859 7D14           1F                             pop ds
29860 7D15           5F                             pop di
29861 7D16           07                             pop es
29862 7D17           59                             pop cx
29863 7D18           58                             pop ax
29864 7D19           5D                           pop bp
29865                                           ! 4031 endasm
29866                                           !BCC_ENDASM
29867                                           ! 4032 }
29868 7D1A           C3                         ret
29869                                           ! 4033 static void memcpyw(dseg,doffset,sseg,soffset,count)
29870                                           ! 4034   Bit16u dseg;
29871                       00007D1B            _memcpyw:
29872                                           !BCC_EOS
29873                                           ! 4035   Bit16u doffset;
29874                                           !BCC_EOS
29875                                           ! 4036   Bit16u sseg;
29876                                           !BCC_EOS
29877                                           ! 4037   Bit16u soffset;
29878                                           !BCC_EOS
29879                                           ! 4038   Bit16u count;
29880                                           !BCC_EOS
29881                                           ! 4039 {
29882                                           ! 4040 #asm
29883                                           !BCC_ASM
29884                       0000000A            _memcpyw.count	set	$A
29885                       00000006            _memcpyw.sseg	set	6
29886                       00000008            _memcpyw.soffset	set	8
29887                       00000002            _memcpyw.dseg	set	2
29888                       00000004            _memcpyw.doffset	set	4
29889 7D1B           55                           push bp
29890 7D1C           89E5                         mov bp, sp
29891 7D1E           50                             push ax
29892 7D1F           51                             push cx
29893 7D20           06                             push es
29894 7D21           57                             push di
29895 7D22           1E                             push ds
29896 7D23           56                             push si
29897 7D24           8B4E         0C                mov cx, 12[bp] ; count
29898 7D27           83F9                   00      cmp cx, #0x0000
29899 7D2A           74           17                je memcpyw_end
29900 7D2C           8B46         04                mov ax, 4[bp] ; dsegment
29901 7D2F           8EC0                           mov es, ax
29902 7D31           8B46         06                mov ax, 6[bp] ; doffset
29903 7D34           89C7                           mov di, ax
29904 7D36           8B46         08                mov ax, 8[bp] ; ssegment
29905 7D39           8ED8                           mov ds, ax
29906 7D3B           8B46         0A                mov ax, 10[bp] ; soffset
29907 7D3E           89C6                           mov si, ax
29908 7D40           FC                             cld
29909 7D41           F3                             rep
29910 7D42           A5                              movsw
29911                       00007D43            memcpyw_end:
29912 7D43           5E                             pop si
29913 7D44           1F                             pop ds
29914 7D45           5F                             pop di
29915 7D46           07                             pop es
29916 7D47           59                             pop cx
29917 7D48           58                             pop ax
29918 7D49           5D                           pop bp
29919                                           ! 4071 endasm
29920                                           !BCC_ENDASM
29921                                           ! 4072 }
29922 7D4A           C3                         ret
29923                                           ! 4073 static Bit8u
29924                                           ! 4074 read_byte(seg, offset)
29925                                           ! 4075   Bit
29926                                           ! 4075 16u seg;
29927                       00007D4B            _read_byte:
29928                                           !BCC_EOS
29929                                           ! 4076   Bit16u offset;
29930                                           !BCC_EOS
29931                                           ! 4077 {
29932                                           ! 4078 #asm
29933                                           !BCC_ASM
29934                       00000002            _read_byte.seg	set	2
29935                       00000004            _read_byte.offset	set	4
29936 7D4B           55                           push bp
29937 7D4C           89E5                         mov bp, sp
29938 7D4E           53                             push bx
29939 7D4F           1E                             push ds
29940 7D50           8B46         04                mov ax, 4[bp] ; segment
29941 7D53           8ED8                           mov ds, ax
29942 7D55           8B5E         06                mov bx, 6[bp] ; offset
29943 7D58           8A07                           mov al, [bx]
29944                                               ;; al = return value (byte)
29945 7D5A           1F                             pop ds
29946 7D5B           5B                             pop bx
29947 7D5C           5D                           pop bp
29948                                           ! 4091 endasm
29949                                           !BCC_ENDASM
29950                                           ! 4092 }
29951 7D5D           C3                         ret
29952                                           ! 4093 static Bit16u
29953                                           ! 4094 read_word(seg, offset)
29954                                           ! 4095   Bit16u seg;
29955                       00007D5E            _read_word:
29956                                           !BCC_EOS
29957                                           ! 4096   Bit16u offset;
29958                                           !BCC_EOS
29959                                           ! 4097 {
29960                                           ! 4098 #asm
29961                                           !BCC_ASM
29962                       00000002            _read_word.seg	set	2
29963                       00000004            _read_word.offset	set	4
29964 7D5E           55                           push bp
29965 7D5F           89E5                         mov bp, sp
29966 7D61           53                             push bx
29967 7D62           1E                             push ds
29968 7D63           8B46         04                mov ax, 4[bp] ; segment
29969 7D66           8ED8                           mov ds, ax
29970 7D68           8B5E         06                mov bx, 6[bp] ; offset
29971 7D6B           8B07                           mov ax, [bx]
29972                                               ;; ax = return value (word)
29973 7D6D           1F                             pop ds
29974 7D6E           5B                             pop bx
29975 7D6F           5D                           pop bp
29976                                           ! 4111 endasm
29977                                           !BCC_ENDASM
29978                                           ! 4112 }
29979 7D70           C3                         ret
29980                                           ! 4113 static void
29981                                           ! 4114 write_byte(seg, offset, data)
29982                                           ! 4115   Bit16u seg;
29983                       00007D71            _write_byte:
29984                                           !BCC_EOS
29985                                           ! 4116   Bit16u offset;
29986                                           !BCC_EOS
29987                                           ! 4117   Bit8u data;
29988                                           !BCC_EOS
29989                                           ! 4118 {
29990                                           ! 4119 #asm
29991                                           !BCC_ASM
29992                       00000002            _write_byte.seg	set	2
29993                       00000006            _write_byte.data	set	6
29994                       00000004            _write_byte.offset	set	4
29995 7D71           55                           push bp
29996 7D72           89E5                         mov bp, sp
29997 7D74           50                             push ax
29998 7D75           53                             push bx
29999 7D76           1E                             push ds
30000 7D77           8B46         04                mov ax, 4[bp] ; segment
30001 7D7A           8ED8                           mov ds, ax
30002 7D7C           8B5E         06                mov bx, 6[bp] ; offset
30003 7D7F           8A46         08                mov al, 8[bp] ; data byte
30004 7D82           8807                           mov [bx], al ; write data byte
30005 7D84           1F                             pop ds
30006 7D85           5B                             pop bx
30007 7D86           58                             pop ax
30008 7D87           5D                           pop bp
30009                                           ! 4134 endasm
30010                                           !BCC_ENDASM
30011                                           ! 4135 }
30012 7D88           C3                         ret
30013                                           ! 4136 static void
30014                                           ! 4137 write_word(seg, offset, data)
30015                                           ! 4138   Bit16u seg;
30016                       00007D89            _write_word:
30017                                           !BCC_EOS
30018                                           ! 4139   Bit16u offset;
30019                                           !BCC_EOS
30020                                           ! 4140   Bit16u data;
30021                                           !BCC_EOS
30022                                           ! 4141 {
30023                                           ! 4142 #asm
30024                                           !BCC_ASM
30025                       00000002            _write_word.seg	set	2
30026                       00000006            _write_word.data	set	6
30027                       00000004            _write_word.offset	set	4
30028 7D89           55                           push bp
30029 7D8A           89E5                         mov bp, sp
30030 7D8C           50                             push ax
30031 7D8D           53                             push bx
30032 7D8E           1E                             push ds
30033 7D8F           8B46         04                mov ax, 4[bp] ; segment
30034 7D92           8ED8                           mov ds, ax
30035 7D94           8B5E         06                mov bx, 6[bp] ; offset
30036 7D97           8B46         08                mov ax, 8[bp] ; data word
30037 7D9A           8907                           mov [bx], ax ; write data word
30038 7D9C           1F                             pop ds
30039 7D9D           5B                             pop bx
30040 7D9E           58                             pop ax
30041 7D9F           5D                           pop bp
30042                                           ! 4157 endasm
30043                                           !BCC_ENDASM
30044                                           ! 4158 }
30045 7DA0           C3                         ret
30046                                           ! 4159  Bit8u
30047                                           ! 4160 inb(port)
30048                                           ! 4161   Bit16u port;
30049                                           export	_inb
30050                       00007DA1            _inb:
30051                                           !BCC_EOS
30052                                           ! 4162 {
30053                                           ! 4163 #asm
30054                                           !BCC_ASM
30055                       00000002            _inb.port	set	2
30056 7DA1           55                           push bp
30057 7DA2           89E5                         mov bp, sp
30058 7DA4           52                             push dx
30059 7DA5           8B56         04                mov dx, 4[bp]
30060 7DA8           EC                             in al, dx
30061 7DA9           5A                             pop dx
30062 7DAA           5D                           pop bp
30063                                           ! 4171 endasm
30064                                           !BCC_ENDASM
30065                                           ! 4172 }
30066 7DAB           C3                         ret
30067                                           ! 4173   Bit16u
30068                                           ! 4174 inw(port)
30069                                           ! 4175   Bit16u port;
30070                                           export	_inw
30071                       00007DAC            _inw:
30072                                           !BCC_EOS
30073                                           ! 4176 {
30074                                           ! 4177 #asm
30075                                           !BCC_ASM
30076                       00000002            _inw.port	set	2
30077 7DAC           55                           push bp
30078 7DAD           89E5                         mov bp, sp
30079 7DAF           52                             push dx
30080 7DB0           8B56         04                mov dx, 4[bp]
30081 7DB3           ED                             in ax, dx
30082 7DB4           5A                             pop dx
30083 7DB5           5D                           pop bp
30084                                           ! 4185 endasm
30085                                           !BCC_ENDASM
30086                                           ! 4186 }
30087 7DB6           C3                         ret
30088                                           ! 4187   void
30089                                           ! 4188 outb(port, val)
30090                                           ! 4189   Bit16u port;
30091                                           export	_outb
30092                       00007DB7            _outb:
30093                                           !BCC_EOS
30094                                           ! 4190   Bit8u val;
30095                                           !BCC_EOS
30096                                           ! 4191 {
30097                                           ! 4192 #asm
30098                                           !BCC_ASM
30099                       00000004            _outb.val	set	4
30100                       00000002            _outb.port	set	2
30101 7DB7           55                           push bp
30102 7DB8           89E5                         mov bp, sp
30103 7DBA           50                             push ax
30104 7DBB           52                             push dx
30105 7DBC           8B56         04                mov dx, 4[bp]
30106 7DBF           8A46         06                mov al, 6[bp]
30107 7DC2           EE                             out dx, al
30108 7DC3           5A                             pop dx
30109 7DC4           58                             pop ax
30110 7DC5           5D                           pop bp
30111                                           ! 4203 endasm
30112                                           !BCC_ENDASM
30113                                           ! 4204 }
30114 7DC6           C3                         ret
30115                                           ! 4205   void
30116                                           ! 4206 outw(port, val)
30117                                           ! 4207   Bit16u port;
30118                                           export	_outw
30119                       00007DC7            _outw:
30120                                           !BCC_EOS
30121                                           ! 4208   Bit16u val;
30122                                           !BCC_EOS
30123                                           ! 4209 {
30124                                           ! 4210 #asm
30125                                           !BCC_ASM
30126                       00000004            _outw.val	set	4
30127                       00000002            _outw.port	set	2
30128 7DC7           55                           push bp
30129 7DC8           89E5                         mov bp, sp
30130 7DCA           50                             push ax
30131 7DCB           52                             push dx
30132 7DCC           8B56         04                mov dx, 4[bp]
30133 7DCF           8B46         06                mov ax, 6[bp]
30134 7DD2           EF                             out dx, ax
30135 7DD3           5A                             pop dx
30136 7DD4           58                             pop ax
30137 7DD5           5D                           pop bp
30138                                           ! 4221 endasm
30139                                           !BCC_ENDASM
30140                                           ! 4222 }
30141 7DD6           C3                         ret
30142                                           ! 4223 Bit16u get_SS()
30143                                           ! 4224 {
30144                                           export	_get_SS
30145                       00007DD7            _get_SS:
30146                                           ! 4225 #asm
30147                                           !BCC_ASM
30148 7DD7           8CD0                         mov ax, ss
30149                                           ! 4227 endasm
30150                                           !BCC_ENDASM
30151                                           ! 4228 }
30152 7DD9           C3                         ret
30153                                           ! 4229 void printf(s)
30154                                           ! 4230   Bit8u *s;
30155                                           export	_printf
30156                       00007DDA            _printf:
30157                                           !BCC_EOS
30158                                           ! 4231 {
30159                                           ! 4232   Bit8u c, format_char;
30160                                           !BCC_EOS
30161                                           ! 4233   Boolean in_format;
30162                                           !BCC_EOS
30163                                           ! 4234   unsigned format_width, i;
30164                                           !BCC_EOS
30165                                           ! 4235   Bit16u *arg_ptr;
30166                                           !BCC_EOS
30167                                           ! 4236   Bit16u 
30168                                           ! 4236 arg_seg, arg, digit, nibble, shift_count;
30169                                           !BCC_EOS
30170                                           ! 4237   arg_ptr = &s;
30171 7DDA           55                         push	bp
30172 7DDB           89E5                       mov	bp,sp
30173 7DDD           83C4                   EC  add	sp,*-$14
30174                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30175 7DE0           8D5E         04            lea	bx,4[bp]
30176 7DE3           895E         F6            mov	-$A[bp],bx
30177                                           !BCC_EOS
30178                                           ! 4238   arg_seg = get_SS();
30179                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30180 7DE6           E8         FFEE            call	_get_SS
30181                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30182 7DE9           8946         F4            mov	-$C[bp],ax
30183                                           !BCC_EOS
30184                                           ! 4239   in_format = 0;
30185                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30186 7DEC           31C0                       xor	ax,ax
30187 7DEE           8946         FC            mov	-4[bp],ax
30188                                           !BCC_EOS
30189                                           ! 4240   format_width = 0;
30190                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30191 7DF1           31C0                       xor	ax,ax
30192 7DF3           8946         FA            mov	-6[bp],ax
30193                                           !BCC_EOS
30194                                           ! 4241   while (c = read_byte(0xc000, s)) {
30195 7DF6           E9         0104            br 	.2AA
30196                       00007DF9            .2AB:
30197                                           ! 4242     if ( c == '%' ) {
30198                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30199 7DF9           8A46         FF            mov	al,-1[bp]
30200 7DFC           3C                     25  cmp	al,*$25
30201 7DFE           75           0E            jne 	.2AC
30202                       00007E00            .2AD:
30203                                           ! 4243       in_format = 1;
30204                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30205 7E00           B8                   0001  mov	ax,*1
30206 7E03           8946         FC            mov	-4[bp],ax
30207                                           !BCC_EOS
30208                                           ! 4244       format_width = 0;
30209                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30210 7E06           31C0                       xor	ax,ax
30211 7E08           8946         FA            mov	-6[bp],ax
30212                                           !BCC_EOS
30213                                           ! 4245       }
30214                                           ! 4246     else if (in_format) {
30215 7E0B           E9         00E8            br 	.2AE
30216                       00007E0E            .2AC:
30217 7E0E           8B46         FC            mov	ax,-4[bp]
30218 7E11           85C0                       test	ax,ax
30219 7E13         0F84         00CF            beq 	.2AF
30220                       00007E17            .2B0:
30221                                           ! 4247       if ( (c>='0') && (c<='9') ) {
30222                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30223 7E17           8A46         FF            mov	al,-1[bp]
30224 7E1A           3C                     30  cmp	al,*$30
30225 7E1C           72           28            jb  	.2B1
30226                       00007E1E            .2B3:
30227                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30228 7E1E           8A46         FF            mov	al,-1[bp]
30229 7E21           3C                     39  cmp	al,*$39
30230 7E23           77           21            ja  	.2B1
30231                       00007E25            .2B2:
30232                                           ! 4248         format_width = (format_width * 10) + (c - '0');
30233                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30234 7E25           8A46         FF            mov	al,-1[bp]
30235 7E28           30E4                       xor	ah,ah
30236 7E2A           05                   FFD0  add	ax,*-$30
30237 7E2D           50                         push	ax
30238                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30239 7E2E           8B46         FA            mov	ax,-6[bp]
30240 7E31           89C2                       mov	dx,ax
30241 7E33           D1E0                       shl	ax,*1
30242 7E35           D1E0                       shl	ax,*1
30243 7E37           01D0                       add	ax,dx
30244 7E39           D1E0                       shl	ax,*1
30245                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30246 7E3B           0346         EA            add	ax,-$16[bp]
30247 7E3E           44                         inc	sp
30248 7E3F           44                         inc	sp
30249                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30250 7E40           8946         FA            mov	-6[bp],ax
30251                                           !BCC_EOS
30252                                           ! 4249         }
30253                                           ! 4250       else if (c == 'x') {
30254 7E43           E9         009E            br 	.2B4
30255                       00007E46            .2B1:
30256                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30257 7E46           8A46         FF            mov	al,-1[bp]
30258 7E49           3C                     78  cmp	al,*$78
30259 7E4B         0F85         0095            bne 	.2B5
30260                       00007E4F            .2B6:
30261                                           ! 4251         arg_ptr++;
30262                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30263 7E4F           8B5E         F6            mov	bx,-$A[bp]
30264 7E52           43                         inc	bx
30265 7E53           43                         inc	bx
30266 7E54           895E         F6            mov	-$A[bp],bx
30267                                           !BCC_EOS
30268                                           ! 4252         arg = read_word(arg_seg, arg_ptr);
30269                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30270 7E57           FF76         F6            push	-$A[bp]
30271                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30272 7E5A           FF76         F4            push	-$C[bp]
30273                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30274 7E5D           E8         FEFE            call	_read_word
30275 7E60           83C4                   04  add	sp,*4
30276                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30277 7E63           8946         F2            mov	-$E[bp],ax
30278                                           !BCC_EOS
30279                                           ! 4253         if (format_width == 0)
30280                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30281 7E66           8B46         FA            mov	ax,-6[bp]
30282 7E69           85C0                       test	ax,ax
30283 7E6B           75           06            jne 	.2B7
30284                       00007E6D            .2B8:
30285                                           ! 4254           format_width = 4;
30286                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30287 7E6D           B8                   0004  mov	ax,*4
30288 7E70           8946         FA            mov	-6[bp],ax
30289                                           !BCC_EOS
30290                                           ! 4255         i = 0;
30291                       00007E73            .2B7:
30292                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30293 7E73           31C0                       xor	ax,ax
30294 7E75           8946         F8            mov	-8[bp],ax
30295                                           !BCC_EOS
30296                                           ! 4256         digit = format_width - 1;
30297                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30298 7E78           8B46         FA            mov	ax,-6[bp]
30299                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30300 7E7B           48                         dec	ax
30301 7E7C           8946         F0            mov	-$10[bp],ax
30302                                           !BCC_EOS
30303                                           ! 4257         for (i=0; i<format_width; i++) {
30304                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30305 7E7F           31C0                       xor	ax,ax
30306 7E81           8946         F8            mov	-8[bp],ax
30307                                           !BCC_EOS
30308                                           !BCC_EOS
30309 7E84           EB           51            jmp .2BB
30310                       00007E86            .2BC:
30311                                           ! 4258           nibble = (arg >> (4 * digit)) & 0x000f;
30312                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30313                                           ! Debug: expression subtree swapping
30314 7E86           8B46         F0            mov	ax,-$10[bp]
30315 7E89           D1E0                       shl	ax,*1
30316 7E8B           D1E0                       shl	ax,*1
30317                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30318 7E8D           89C3                       mov	bx,ax
30319 7E8F           8B46         F2            mov	ax,-$E[bp]
30320 7E92           89D9                       mov	cx,bx
30321 7E94           D3E8                       shr	ax,cl
30322                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30323 7E96           24                     0F  and	al,*$F
30324                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30325 7E98           30E4                       xor	ah,ah
30326 7E9A           8946         EE            mov	-$12[bp],ax
30327                                           !BCC_EOS
30328                                           ! 4259           if (nibble <= 9)
30329                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30330 7E9D           8B46         EE            mov	ax,-$12[bp]
30331 7EA0           3D                   0009  cmp	ax,*9
30332 7EA3           77           13            ja  	.2BD
30333                       00007EA5            .2BE:
30334                                           ! 4260             outb(0x0500, nibble + '0');
30335                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30336 7EA5           8B46         EE            mov	ax,-$12[bp]
30337                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30338 7EA8           05                   0030  add	ax,*$30
30339 7EAB           50                         push	ax
30340                                           ! Debug: list int = const $500 (used reg = )
30341 7EAC           B8                   0500  mov	ax,#$500
30342 7EAF           50                         push	ax
30343                                           ! Debug: func () void = outb+0 (used reg = )
30344 7EB0           E8         FF04            call	_outb
30345 7EB3           83C4                   04  add	sp,*4
30346                                           !BCC_EOS
30347                                           ! 4261           else
30348                                           ! 4262             outb(0x0500, (nibble - 10) + 'A');
30349 7EB6           EB           11            jmp .2BF
30350                       00007EB8            .2BD:
30351                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30352 7EB8           8B46         EE            mov	ax,-$12[bp]
30353                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30354                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30355 7EBB           05                   0037  add	ax,*$37
30356 7EBE           50                         push	ax
30357                                           ! Debug: list int = const $500 (used reg = )
30358 7EBF           B8                   0500  mov	ax,#$500
30359 7EC2           50                         push	ax
30360                                           ! Debug: func () void = outb+0 (used reg = )
30361 7EC3           E8         FEF1            call	_outb
30362 7EC6           83C4                   04  add	sp,*4
30363                                           !BCC_EOS
30364                                           ! 4263           digit--;
30365                       00007EC9            .2BF:
30366                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30367 7EC9           8B46         F0            mov	ax,-$10[bp]
30368 7ECC           48                         dec	ax
30369 7ECD           8946         F0            mov	-$10[bp],ax
30370                                           !BCC_EOS
30371                                           ! 4264           }
30372                                           ! 4265         in_format = 0;
30373                       00007ED0            .2BA:
30374                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30375 7ED0           8B46         F8            mov	ax,-8[bp]
30376 7ED3           40                         inc	ax
30377 7ED4           8946         F8            mov	-8[bp],ax
30378                       00007ED7            .2BB:
30379                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30380 7ED7           8B46         F8            mov	ax,-8[bp]
30381 7EDA           3B46         FA            cmp	ax,-6[bp]
30382 7EDD           72           A7            jb 	.2BC
30383                       00007EDF            .2C0:
30384                       00007EDF            .2B9:
30385                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30386 7EDF           31C0                       xor	ax,ax
30387 7EE1           8946         FC            mov	-4[bp],ax
30388                                           !BCC_EOS
30389                                           ! 4266         }
30390                                           ! 4267       }
30391                       00007EE4            .2B5:
30392                       00007EE4            .2B4:
30393                                           ! 4268     else {
30394 7EE4           EB           10            jmp .2C1
30395                       00007EE6            .2AF:
30396                                           ! 4269       outb(0x0500, c);
30397                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30398 7EE6           8A46         FF            mov	al,-1[bp]
30399 7EE9           30E4                       xor	ah,ah
30400 7EEB           50                         push	ax
30401                                           ! Debug: list int = const $500 (used reg = )
30402 7EEC           B8                   0500  mov	ax,#$500
30403 7EEF           50                         push	ax
30404                                           ! Debug: func () void = outb+0 (used reg = )
30405 7EF0           E8         FEC4            call	_outb
30406 7EF3           83C4                   04  add	sp,*4
30407                                           !BCC_EOS
30408                                           ! 4270       }
30409                                           ! 4271     s ++;
30410                       00007EF6            .2C1:
30411                       00007EF6            .2AE:
30412                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30413 7EF6           8B5E         04            mov	bx,4[bp]
30414 7EF9           43                         inc	bx
30415 7EFA           895E         04            mov	4[bp],bx
30416                                           !BCC_EOS
30417                                           ! 4272     }
30418                                           ! 4273 }
30419                       00007EFD            .2AA:
30420                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30421 7EFD           FF76         04            push	4[bp]
30422                                           ! Debug: list unsigned int = const $C000 (used reg = )
30423 7F00           B8                   C000  mov	ax,#$C000
30424 7F03           50                         push	ax
30425                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30426 7F04           E8         FE44            call	_read_byte
30427 7F07           83C4                   04  add	sp,*4
30428                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30429 7F0A           8846         FF            mov	-1[bp],al
30430 7F0D           84C0                       test	al,al
30431 7F0F         0F85         FEE6            bne 	.2AB
30432                       00007F13            .2C2:
30433                       00007F13            .2A9:
30434 7F13           89EC                       mov	sp,bp
30435 7F15           5D                         pop	bp
30436 7F16           C3                         ret
30437                                           ! 4274 #asm
30438                                           !BCC_ASM
30439                       00000002            _printf.s	set	2
30440                                             ; get LFB address from PCI
30441                                             ; in - ax: PCI device vendor
30442                                             ; out - ax: LFB address (high 16 bit)
30443                                             ;; NOTE - may be called in protected mode
30444                       00007F17            _pci_get_lfb_addr:
30445 7F17           53                           push bx
30446 7F18           51                           push cx
30447 7F19           52                           push dx
30448 7F1A     66    50                           push eax
30449 7F1C           89C3                           mov bx, ax
30450 7F1E           31C9                           xor cx, cx
30451 7F20           B2                     00      mov dl, #0x00
30452 7F22           E8         003D                call pci_read_reg
30453 7F25           3D                   FFFF      cmp ax, #0xffff
30454 7F28           74           12                jz pci_get_lfb_addr_fail
30455                       00007F2A             pci_get_lfb_addr_next_dev:
30456 7F2A           B2                     00      mov dl, #0x00
30457 7F2C           E8         0033                call pci_read_reg
30458 7F2F           39D8                           cmp ax, bx ;; check vendor
30459 7F31           74           0D                jz pci_get_lfb_addr_found
30460 7F33           83C1                   08      add cx, #0x8
30461 7F36           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30462 7F3A           72           EE                jb pci_get_lfb_addr_next_dev
30463                       00007F3C             pci_get_lfb_addr_fail:
30464 7F3C           31D2                           xor dx, dx ;; no LFB
30465 7F3E           EB           1A                jmp pci_get_lfb_addr_return
30466                       00007F40             pci_get_lfb_addr_found:
30467 7F40           B2                     10      mov dl, #0x10 ;; I/O space #0
30468 7F42           E8         001D                call pci_read_reg
30469 7F45           A9                   FFF1      test ax, #0xfff1
30470 7F48           74           0A                jz pci_get_lfb_addr_success
30471 7F4A           B2                     14      mov dl, #0x14 ;; I/O space #1
30472 7F4C           E8         0013                call pci_read_reg
30473 7F4F           A9                   FFF1      test ax, #0xfff1
30474 7F52           75           E8                jnz pci_get_lfb_addr_fail
30475                       00007F54             pci_get_lfb_addr_success:
30476 7F54     66    C1E8                   10      shr eax, #16
30477 7F58           89C2                           mov dx, ax ;; LFB address
30478                       00007F5A             pci_get_lfb_addr_return:
30479 7F5A     66    58                           pop eax
30480 7F5C           89D0                         mov ax, dx
30481 7F5E           5A                           pop dx
30482 7F5F           59                           pop cx
30483 7F60           5B                           pop bx
30484 7F61           C3                           ret
30485                                             ; read PCI register
30486                                             ; in - cx: device/function
30487                                             ; in - dl: register
30488                                             ; out - eax: value
30489                       00007F62            pci_read_reg:
30490 7F62     66    B8               00800000    mov eax, #0x00800000
30491 7F68           89C8                         mov ax, cx
30492 7F6A     66    C1E0                   08    shl eax, #8
30493 7F6E           88D0                         mov al, dl
30494 7F70           BA                   0CF8    mov dx, #0xcf8
30495 7F73     66    EF                           out dx, eax
30496 7F75           80C2                   04    add dl, #4
30497 7F78     66    ED                           in eax, dx
30498 7F7A           C3                           ret
30499                                           ! 4334 endasm
30500                                           !BCC_ENDASM
30501                                           ! 4335 typedef struct
30502                                           ! Register BX used in function printf
30503                                           ! 4336 {
30504                                           ! 4337   unsigned short mode;
30505                                           !BCC_EOS
30506                                           ! 4338   unsigned short width;
30507                                           !BCC_EOS
30508                                           ! 4339   unsigned short height;
30509                                           !BCC_EOS
30510                                           ! 4340   unsigned short depth;
30511                                           !BCC_EOS
30512                                           ! 4341   unsigned short hidden_dac;
30513                                           !BCC_EOS
30514                                           ! 4342   unsigned short *seq;
30515                                           !BCC_EOS
30516                                           ! 4343   unsigned short *graph;
30517                                           !BCC_EOS
30518                                           ! 4344   unsigned short *crtc;
30519                                           !BCC_EOS
30520                                           ! 4345   unsigned char bitsperpixel;
30521                                           !BCC_EOS
30522                                           ! 4346   unsigned char vesacolortype;
30523                                           !BCC_EOS
30524                                           ! 4347   unsigned char vesaredmask;
30525                                           !BCC_EOS
30526                                           ! 4348   unsigned char vesaredpos;
30527                                           !BCC_EOS
30528                                           ! 4349   unsigned char vesagreenmask;
30529                                           !BCC_EOS
30530                                           ! 4350   unsigned char vesagreenpos;
30531                                           !BCC_EOS
30532                                           ! 4351   unsigned char vesabluemask;
30533                                           !BCC_EOS
30534                                           ! 4352   unsigned char vesabluepos;
30535                                           !BCC_EOS
30536                                           ! 4353   unsigned char vesareservedmask;
30537                                           !BCC_EOS
30538                                           ! 4354   unsigned char vesareservedpos;
30539                                           !BCC_EOS
30540                                           ! 4355 } cirrus_mode_t;
30541                                           !BCC_EOS
30542                                           ! 4356 unsigned short cseq_vga[] = {0x0007,0xffff};
30543                                           
30544                                           export	_cseq_vga
30545                       00007F7B            _cseq_vga:
30546 7F7B                      0007            .word	7
30547 7F7D                      FFFF            .word	$FFFF
30548                                           !BCC_EOS
30549                                           ! 4357 unsigned short cgraph_vga[] = {0x0009,0x000a,0x000b,0xffff};
30550                                           export	_cgraph_vga
30551                       00007F7F            _cgraph_vga:
30552 7F7F                      0009            .word	9
30553 7F81                      000A            .word	$A
30554 7F83                      000B            .word	$B
30555 7F85                      FFFF            .word	$FFFF
30556                                           !BCC_EOS
30557                                           ! 4358 unsigned short ccrtc_vga[] = {0x001a,0x001b,0x001d,0xffff};
30558                                           export	_ccrtc_vga
30559                       00007F87            _ccrtc_vga:
30560 7F87                      001A            .word	$1A
30561 7F89                      001B            .word	$1B
30562 7F8B                      001D            .word	$1D
30563 7F8D                      FFFF            .word	$FFFF
30564                                           !BCC_EOS
30565                                           ! 4359 unsigned short cgraph_svgacolor[] = {
30566                                           export	_cgraph_svgacolor
30567                       00007F8F            _cgraph_svgacolor:
30568                                           ! 4360 0x0000,0x0001,0x0002,0x0003,0x0004,0x4005,0x0506,0x0f07,0xff08,
30569 7F8F                      0000            .word	0
30570 7F91                      0001            .word	1
30571 7F93                      0002            .word	2
30572 7F95                      0003            .word	3
30573 7F97                      0004            .word	4
30574 7F99                      4005            .word	$4005
30575 7F9B                      0506            .word	$506
30576 7F9D                      0F07            .word	$F07
30577 7F9F                      FF08            .word	$FF08
30578                                           ! 4361 0x0009,0x000a,0x000b,
30579 7FA1                      0009            .word	9
30580 7FA3                      000A            .word	$A
30581 7FA5                      000B            .word	$B
30582                                           ! 4362 0xffff
30583                                           ! 4363 };
30584 7FA7                      FFFF            .word	$FFFF
30585                                           !BCC_EOS
30586                                           ! 4364 unsigned short cseq_640x480x8[] = {
30587                                           export	_cseq_640x480x8
30588                       00007FA9            _cseq_640x480x8:
30589                                           ! 4365 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30590 7FA9                      0300            .word	$300
30591 7FAB                      2101            .word	$2101
30592 7FAD                      0F02            .word	$F02
30593 7FAF                      0003            .word	3
30594 7FB1                      0E04            .word	$E04
30595 7FB3                      1107            .word	$1107
30596                                           ! 4366 0x580b,0x580c,0x580d,0x580e,
30597 7FB5                      580B            .word	$580B
30598 7FB7                      580C            .word	$580C
30599 7FB9                      580D            .word	$580D
30600 7FBB                      580E            .word	$580E
30601                                           ! 4367 0x0412,0x0013,0x2017,
30602 7FBD                      0412            .word	$412
30603 7FBF                      0013            .word	$13
30604 7FC1                      2017            .word	$2017
30605                                           ! 4368 0x331b,0x331c,0x331d,0x331e,
30606 7FC3                      331B            .word	$331B
30607 7FC5                      331C            .word	$331C
30608 7FC7                      331D            .word	$331D
30609 7FC9                      331E            .word	$331E
30610                                           ! 4369 0xffff
30611                                           ! 4370 };
30612 7FCB                      FFFF            .word	$FFFF
30613                                           !BCC_EOS
30614                                           ! 4371 unsigned short ccrtc_640x480x8[] = {
30615                                           export	_ccrtc_640x480x8
30616                       00007FCD            _ccrtc_640x480x8:
30617                                           ! 4372 0x2c11,
30618 7FCD                      2C11            .word	$2C11
30619                                           ! 4373 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30620 7FCF                      5F00            .word	$5F00
30621 7FD1                      4F01            .word	$4F01
30622 7FD3                      4F02            .word	$4F02
30623 7FD5                      8003            .word	$8003
30624 7FD7                      5204            .word	$5204
30625 7FD9                      1E05            .word	$1E05
30626 7FDB                      0B06            .word	$B06
30627 7FDD                      3E07            .word	$3E07
30628                                           ! 4374 0x4009,0x000c,0x000d,
30629 7FDF                      4009            .word	$4009
30630 7FE1                      000C            .word	$C
30631 7FE3                      000D            .word	$D
30632                                           ! 4375 0xea10,0xdf12,0x5013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
30633 7FE5                      EA10            .word	$EA10
30634 7FE7                      DF12            .word	$DF12
30635 7FE9                      5013            .word	$5013
30636 7FEB                      4014            .word	$4014
30637 7FED                      DF15            .word	$DF15
30638 7FEF                      0B16            .word	$B16
30639 7FF1                      C317            .word	$C317
30640 7FF3                      FF18            .word	$FF18
30641                                           ! 4376 0x001a,0x221b,0x001d,
30642 7FF5                      001A            .word	$1A
30643 7FF7                      221B            .word	$221B
30644 7FF9                      001D            .word	$1D
30645                                           ! 4377 0xffff
30646                                           ! 4378 };
30647 7FFB                      FFFF            .word	$FFFF
30648                                           !BCC_EOS
30649                                           ! 4379 unsigned short cseq_640x480x16[] = {
30650                                           export	_cseq_640x480x16
30651                       00007FFD            _cseq_640x480x16:
30652                                           ! 4380 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30653 7FFD                      0300            .word	$300
30654 7FFF                      2101            .word	$2101
30655 8001                      0F02            .word	$F02
30656 8003                      0003            .word	3
30657 8005                      0E04            .word	$E04
30658 8007                      1707            .word	$1707
30659                                           ! 4381 0x580b,0x580c,0x580d,0x580e,
30660 8009                      580B            .word	$580B
30661 800B                      580C            .word	$580C
30662 800D                      580D            .word	$580D
30663 800F                      580E            .word	$580E
30664                                           ! 4382 0x0412,0x0013,0x2017,
30665 8011                      0412            .word	$412
30666 8013                      0013            .word	$13
30667 8015                      2017            .word	$2017
30668                                           ! 4383 0x331b,0x331c,0x331d,0x331e,
30669 8017                      331B            .word	$331B
30670 8019                      331C            .word	$331C
30671 801B                      331D            .word	$331D
30672 801D                      331E            .word	$331E
30673                                           ! 4384 0xffff
30674                                           ! 4385 };
30675 801F                      FFFF            .word	$FFFF
30676                                           !BCC_EOS
30677                                           ! 4386 unsigned short ccrtc_640x480x16[] = {
30678                                           export	_ccrtc_640x480x16
30679                       00008021            _ccrtc_640x480x16:
30680                                           ! 4387 0x2c11,
30681 8021                      2C11            .word	$2C11
30682                                           ! 4388 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30683 8023                      5F00            .word	$5F00
30684 8025                      4F01            .word	$4F01
30685 8027                      4F02            .word	$4F02
30686 8029                      8003            .word	$8003
30687 802B                      5204            .word	$5204
30688 802D                      1E05            .word	$1E05
30689 802F                      0B06            .word	$B06
30690 8031                      3E07            .word	$3E07
30691                                           ! 4389 0x4009,0x000c,0x000d,
30692 8033                      4009            .word	$4009
30693 8035                      000C            .word	$C
30694 8037                      000D            .word	$D
30695                                           ! 4390 0xea10,0xdf12,0xa013,0x4014,0xdf15,0x0b16,0xc317,0xff18,
30696 8039                      EA10            .word	$EA10
30697 803B                      DF12            .word	$DF12
30698 803D                      A013            .word	$A013
30699 803F                      4014            .word	$4014
30700 8041                      DF15            .word	$DF15
30701 8043                      0B16            .word	$B16
30702 8045                      C317            .word	$C317
30703 8047                      FF18            .word	$FF18
30704                                           ! 4391 0x001a,0x221b,0x001d,
30705 8049                      001A            .word	$1A
30706 804B                      221B            .word	$221B
30707 804D                      001D            .word	$1D
30708                                           ! 4392 0xffff
30709                                           ! 4393 };
30710 804F                      FFFF            .word	$FFFF
30711                                           !BCC_EOS
30712                                           ! 4394 unsigned short cseq_640x480x24[] = {
30713                                           export	_cseq_640x480x24
30714                       00008051            _cseq_640x480x24:
30715                                           ! 4395 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30716 8051                      0300            .word	$300
30717 8053                      2101            .word	$2101
30718 8055                      0F02            .word	$F02
30719 8057                      0003            .word	3
30720 8059                      0E04            .word	$E04
30721 805B                      1507            .word	$1507
30722                                           ! 4396 0x580b,0x580c,0x580d,0x580e,
30723 805D                      580B            .word	$580B
30724 805F                      580C            .word	$580C
30725 8061                      580D            .word	$580D
30726 8063                      580E            .word	$580E
30727                                           ! 4397 0x0412,0x0013,0x2017,
30728 8065                      0412            .word	$412
30729 8067                      0013            .word	$13
30730 8069                      2017            .word	$2017
30731                                           ! 4398 0x331b,0x331c,0x331d,0x331e,
30732 806B                      331B            .word	$331B
30733 806D                      331C            .word	$331C
30734 806F                      331D            .word	$331D
30735 8071                      331E            .word	$331E
30736                                           ! 4399 0xffff
30737                                           ! 4400 };
30738 8073                      FFFF            .word	$FFFF
30739                                           !BCC_EOS
30740                                           ! 4401 unsigned short ccrtc_640x480x24[] = {
30741                                           export	_ccrtc_640x480x24
30742                       00008075            _ccrtc_640x480x24:
30743                                           ! 4402 0x2c11,
30744 8075                      2C11            .word	$2C11
30745                                           ! 4403 0x5f00,0x4f01,0x4f02,0x8003,0x5204,0x1e05,0x0b06,0x3e07,
30746 8077                      5F00            .word	$5F00
30747 8079                      4F01            .word	$4F01
30748 807B                      4F02            .word	$4F02
30749 807D                      8003            .word	$8003
30750 807F                      5204            .word	$5204
30751 8081                      1E05            .word	$1E05
30752 8083                      0B06            .word	$B06
30753 8085                      3E07            .word	$3E07
30754                                           ! 4404 0x4009,0x000c,0x000d,
30755 8087                      4009            .word	$4009
30756 8089                      000C            .word	$C
30757 808B                      000D            .word	$D
30758                                           ! 4405 0xea10,0xdf12,0x0013,0x
30759 808D                      EA10            .word	$EA10
30760 808F                      DF12            .word	$DF12
30761 8091                      0013            .word	$13
30762                                           ! 4405 4014,0xdf15,0x0b16,0xc317,0xff18,
30763 8093                      4014            .word	$4014
30764 8095                      DF15            .word	$DF15
30765 8097                      0B16            .word	$B16
30766 8099                      C317            .word	$C317
30767 809B                      FF18            .word	$FF18
30768                                           ! 4406 0x001a,0x321b,0x001d,
30769 809D                      001A            .word	$1A
30770 809F                      321B            .word	$321B
30771 80A1                      001D            .word	$1D
30772                                           ! 4407 0xffff
30773                                           ! 4408 };
30774 80A3                      FFFF            .word	$FFFF
30775                                           !BCC_EOS
30776                                           ! 4409 unsigned short cseq_800x600x8[] = {
30777                                           export	_cseq_800x600x8
30778                       000080A5            _cseq_800x600x8:
30779                                           ! 4410 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30780 80A5                      0300            .word	$300
30781 80A7                      2101            .word	$2101
30782 80A9                      0F02            .word	$F02
30783 80AB                      0003            .word	3
30784 80AD                      0E04            .word	$E04
30785 80AF                      1107            .word	$1107
30786                                           ! 4411 0x230b,0x230c,0x230d,0x230e,
30787 80B1                      230B            .word	$230B
30788 80B3                      230C            .word	$230C
30789 80B5                      230D            .word	$230D
30790 80B7                      230E            .word	$230E
30791                                           ! 4412 0x0412,0x0013,0x2017,
30792 80B9                      0412            .word	$412
30793 80BB                      0013            .word	$13
30794 80BD                      2017            .word	$2017
30795                                           ! 4413 0x141b,0x141c,0x141d,0x141e,
30796 80BF                      141B            .word	$141B
30797 80C1                      141C            .word	$141C
30798 80C3                      141D            .word	$141D
30799 80C5                      141E            .word	$141E
30800                                           ! 4414 0xffff
30801                                           ! 4415 };
30802 80C7                      FFFF            .word	$FFFF
30803                                           !BCC_EOS
30804                                           ! 4416 unsigned short ccrtc_800x600x8[] = {
30805                                           export	_ccrtc_800x600x8
30806                       000080C9            _ccrtc_800x600x8:
30807                                           ! 4417 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30808 80C9                      2311            .word	$2311
30809 80CB                      7D00            .word	$7D00
30810 80CD                      6301            .word	$6301
30811 80CF                      6302            .word	$6302
30812 80D1                      8003            .word	$8003
30813 80D3                      6B04            .word	$6B04
30814 80D5                      1A05            .word	$1A05
30815 80D7                      9806            .word	$9806
30816 80D9                      F007            .word	$F007
30817                                           ! 4418 0x6009,0x000c,0x000d,
30818 80DB                      6009            .word	$6009
30819 80DD                      000C            .word	$C
30820 80DF                      000D            .word	$D
30821                                           ! 4419 0x7d10,0x5712,0x6413,0x4014,0x5715,0x9816,0xc317,0xff18,
30822 80E1                      7D10            .word	$7D10
30823 80E3                      5712            .word	$5712
30824 80E5                      6413            .word	$6413
30825 80E7                      4014            .word	$4014
30826 80E9                      5715            .word	$5715
30827 80EB                      9816            .word	$9816
30828 80ED                      C317            .word	$C317
30829 80EF                      FF18            .word	$FF18
30830                                           ! 4420 0x001a,0x221b,0x001d,
30831 80F1                      001A            .word	$1A
30832 80F3                      221B            .word	$221B
30833 80F5                      001D            .word	$1D
30834                                           ! 4421 0xffff
30835                                           ! 4422 };
30836 80F7                      FFFF            .word	$FFFF
30837                                           !BCC_EOS
30838                                           ! 4423 unsigned short cseq_800x600x16[] = {
30839                                           export	_cseq_800x600x16
30840                       000080F9            _cseq_800x600x16:
30841                                           ! 4424 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
30842 80F9                      0300            .word	$300
30843 80FB                      2101            .word	$2101
30844 80FD                      0F02            .word	$F02
30845 80FF                      0003            .word	3
30846 8101                      0E04            .word	$E04
30847 8103                      1707            .word	$1707
30848                                           ! 4425 0x230b,0x230c,0x230d,0x230e,
30849 8105                      230B            .word	$230B
30850 8107                      230C            .word	$230C
30851 8109                      230D            .word	$230D
30852 810B                      230E            .word	$230E
30853                                           ! 4426 0x0412,0x0013,0x2017,
30854 810D                      0412            .word	$412
30855 810F                      0013            .word	$13
30856 8111                      2017            .word	$2017
30857                                           ! 4427 0x141b,0x141c,0x141d,0x141e,
30858 8113                      141B            .word	$141B
30859 8115                      141C            .word	$141C
30860 8117                      141D            .word	$141D
30861 8119                      141E            .word	$141E
30862                                           ! 4428 0xffff
30863                                           ! 4429 };
30864 811B                      FFFF            .word	$FFFF
30865                                           !BCC_EOS
30866                                           ! 4430 unsigned short ccrtc_800x600x16[] = {
30867                                           export	_ccrtc_800x600x16
30868                       0000811D            _ccrtc_800x600x16:
30869                                           ! 4431 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30870 811D                      2311            .word	$2311
30871 811F                      7D00            .word	$7D00
30872 8121                      6301            .word	$6301
30873 8123                      6302            .word	$6302
30874 8125                      8003            .word	$8003
30875 8127                      6B04            .word	$6B04
30876 8129                      1A05            .word	$1A05
30877 812B                      9806            .word	$9806
30878 812D                      F007            .word	$F007
30879                                           ! 4432 0x6009,0x000c,0x000d,
30880 812F                      6009            .word	$6009
30881 8131                      000C            .word	$C
30882 8133                      000D            .word	$D
30883                                           ! 4433 0x7d10,0x5712,0xc813,0x4014,0x5715,0x9816,0xc317,0xff18,
30884 8135                      7D10            .word	$7D10
30885 8137                      5712            .word	$5712
30886 8139                      C813            .word	$C813
30887 813B                      4014            .word	$4014
30888 813D                      5715            .word	$5715
30889 813F                      9816            .word	$9816
30890 8141                      C317            .word	$C317
30891 8143                      FF18            .word	$FF18
30892                                           ! 4434 0x001a,0x221b,0x001d,
30893 8145                      001A            .word	$1A
30894 8147                      221B            .word	$221B
30895 8149                      001D            .word	$1D
30896                                           ! 4435 0xffff
30897                                           ! 4436 };
30898 814B                      FFFF            .word	$FFFF
30899                                           !BCC_EOS
30900                                           ! 4437 unsigned short cseq_800x600x24[] = {
30901                                           export	_cseq_800x600x24
30902                       0000814D            _cseq_800x600x24:
30903                                           ! 4438 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1507,
30904 814D                      0300            .word	$300
30905 814F                      2101            .word	$2101
30906 8151                      0F02            .word	$F02
30907 8153                      0003            .word	3
30908 8155                      0E04            .word	$E04
30909 8157                      1507            .word	$1507
30910                                           ! 4439 0x230b,0x230c,0x230d,0x230e,
30911 8159                      230B            .word	$230B
30912 815B                      230C            .word	$230C
30913 815D                      230D            .word	$230D
30914 815F                      230E            .word	$230E
30915                                           ! 4440 0x0412,0x0013,0x2017,
30916 8161                      0412            .word	$412
30917 8163                      0013            .word	$13
30918 8165                      2017            .word	$2017
30919                                           ! 4441 0x141b,0x141c,0x141d,0x141e,
30920 8167                      141B            .word	$141B
30921 8169                      141C            .word	$141C
30922 816B                      141D            .word	$141D
30923 816D                      141E            .word	$141E
30924                                           ! 4442 0xffff
30925                                           ! 4443 };
30926 816F                      FFFF            .word	$FFFF
30927                                           !BCC_EOS
30928                                           ! 4444 unsigned short ccrtc_800x600x24[] = {
30929                                           export	_ccrtc_800x600x24
30930                       00008171            _ccrtc_800x600x24:
30931                                           ! 4445 0x2311,0x7d00,0x6301,0x6302,0x8003,0x6b04,0x1a05,0x9806,0xf007,
30932 8171                      2311            .word	$2311
30933 8173                      7D00            .word	$7D00
30934 8175                      6301            .word	$6301
30935 8177                      6302            .word	$6302
30936 8179                      8003            .word	$8003
30937 817B                      6B04            .word	$6B04
30938 817D                      1A05            .word	$1A05
30939 817F                      9806            .word	$9806
30940 8181                      F007            .word	$F007
30941                                           ! 4446 0x6009,0x000c,0x000d,
30942 8183                      6009            .word	$6009
30943 8185                      000C            .word	$C
30944 8187                      000D            .word	$D
30945                                           ! 4447 0x7d10,0x5712,0x2c13,0x4014,0x5715,0x9816,0xc317,0xff18,
30946 8189                      7D10            .word	$7D10
30947 818B                      5712            .word	$5712
30948 818D                      2C13            .word	$2C13
30949 818F                      4014            .word	$4014
30950 8191                      5715            .word	$5715
30951 8193                      9816            .word	$9816
30952 8195                      C317            .word	$C317
30953 8197                      FF18            .word	$FF18
30954                                           ! 4448 0x001a,0x321b,0x001d,
30955 8199                      001A            .word	$1A
30956 819B                      321B            .word	$321B
30957 819D                      001D            .word	$1D
30958                                           ! 4449 0xffff
30959                                           ! 4450 };
30960 819F                      FFFF            .word	$FFFF
30961                                           !BCC_EOS
30962                                           ! 4451 unsigned short cseq_1024x768x8[] = {
30963                                           export	_cseq_1024x768x8
30964                       000081A1            _cseq_1024x768x8:
30965                                           ! 4452 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
30966 81A1                      0300            .word	$300
30967 81A3                      2101            .word	$2101
30968 81A5                      0F02            .word	$F02
30969 81A7                      0003            .word	3
30970 81A9                      0E04            .word	$E04
30971 81AB                      1107            .word	$1107
30972                                           ! 4453 0x760b,0x760c,0x760d,0x760e,
30973 81AD                      760B            .word	$760B
30974 81AF                      760C            .word	$760C
30975 81B1                      760D            .word	$760D
30976 81B3                      760E            .word	$760E
30977                                           ! 4454 0x0412,0x0013,0x2017,
30978 81B5                      0412            .word	$412
30979 81B7                      0013            .word	$13
30980 81B9                      2017            .word	$2017
30981                                           ! 4455 0x341b,0x341c,0x341d,0x341e,
30982 81BB                      341B            .word	$341B
30983 81BD                      341C            .word	$341C
30984 81BF                      341D            .word	$341D
30985 81C1                      341E            .word	$341E
30986                                           ! 4456 0xffff
30987                                           ! 4457 };
30988 81C3                      FFFF            .word	$FFFF
30989                                           !BCC_EOS
30990                                           ! 4458 unsigned short ccrtc_1024x768x8[] = {
30991                                           export	_ccrtc_1024x768x8
30992                       000081C5            _ccrtc_1024x768x8:
30993                                           ! 4459 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
30994 81C5                      2911            .word	$2911
30995 81C7                      A300            .word	$A300
30996 81C9                      7F01            .word	$7F01
30997 81CB                      7F02            .word	$7F02
30998 81CD                      8603            .word	$8603
30999 81CF                      8304            .word	$8304
31000 81D1                      9405            .word	$9405
31001 81D3                      2406            .word	$2406
31002 81D5                      F507            .word	$F507
31003                                           ! 4460 0x6009,0x000c,0x000d,
31004 81D7                      6009            .word	$6009
31005 81D9                      000C            .word	$C
31006 81DB                      000D            .word	$D
31007                                           ! 4461 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
31008 81DD                      0310            .word	$310
31009 81DF                      FF12            .word	$FF12
31010 81E1                      8013            .word	$8013
31011 81E3                      4014            .word	$4014
31012 81E5                      FF15            .word	$FF15
31013 81E7                      2416            .word	$2416
31014 81E9                      C317            .word	$C317
31015 81EB                      FF18            .word	$FF18
31016                                           ! 4462 0x001a,0x221b,0x001d,
31017 81ED                      001A            .word	$1A
31018 81EF                      221B            .word	$221B
31019 81F1                      001D            .word	$1D
31020                                           ! 4463 0xffff
31021                                           ! 4464 };
31022 81F3                      FFFF            .word	$FFFF
31023                                           !BCC_EOS
31024                                           ! 4465 unsigned short cseq_1024x768x16[] = {
31025                                           export	_cseq_1024x768x16
31026                       000081F5            _cseq_1024x768x16:
31027                                           ! 4466 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
31028 81F5                      0300            .word	$300
31029 81F7                      2101            .word	$2101
31030 81F9                      0F02            .word	$F02
31031 81FB                      0003            .word	3
31032 81FD                      0E04            .word	$E04
31033 81FF                      1707            .word	$1707
31034                                           ! 4467 0x760b,0x760c,0x760d,0x760e,
31035 8201                      760B            .word	$760B
31036 8203                      760C            .word	$760C
31037 8205                      760D            .word	$760D
31038 8207                      760E            .word	$760E
31039                                           ! 4468 0x0412,0x0013,0x2017,
31040 8209                      0412            .word	$412
31041 820B                      0013            .word	$13
31042 820D                      2017            .word	$2017
31043                                           ! 4469 0x341b,0x341c,0x341d,0x341e,
31044 820F                      341B            .word	$341B
31045 8211                      341C            .word	$341C
31046 8213                      341D            .word	$341D
31047 8215                      341E            .word	$341E
31048                                           ! 4470 0xffff
31049                                           ! 4471 };
31050 8217                      FFFF            .word	$FFFF
31051                                           !BCC_EOS
31052                                           ! 4472 unsigned short ccrtc_1024x768x16[] = {
31053                                           export	_ccrtc_1024x768x16
31054                       00008219            _ccrtc_1024x768x16:
31055                                           ! 4473 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
31056 8219                      2911            .word	$2911
31057 821B                      A300            .word	$A300
31058 821D                      7F01            .word	$7F01
31059 821F                      7F02            .word	$7F02
31060 8221                      8603            .word	$8603
31061 8223                      8304            .word	$8304
31062 8225                      9405            .word	$9405
31063 8227                      2406            .word	$2406
31064 8229                      F507            .word	$F507
31065                                           ! 4474 0x6009,0x000c,0x000d,
31066 822B                      6009            .word	$6009
31067 822D                      000C            .word	$C
31068 822F                      000D            .word	$D
31069                                           ! 4475 0x0310,0xff12,0x0013,0x4014,0xff15,0x2416,0xc317,0xff18,
31070 8231                      0310            .word	$310
31071 8233                      FF12            .word	$FF12
31072 8235                      0013            .word	$13
31073 8237                      4014            .word	$4014
31074 8239                      FF15            .word	$FF15
31075 823B                      2416            .word	$2416
31076 823D                      C317            .word	$C317
31077 823F                      FF18            .word	$FF18
31078                                           ! 4476 0x001a,0x321b,0x001d,
31079 8241                      001A            .word	$1A
31080 8243                      321B            .word	$321B
31081 8245                      001D            .word	$1D
31082                                           ! 4477 0xffff
31083                                           ! 4478 };
31084 8247                      FFFF            .word	$FFFF
31085                                           !BCC_EOS
31086                                           ! 4479 unsigned short cseq_1024x768x24[] = {
31087                                           export	_cseq_1024x768x24
31088                       00008249            _cseq_1024x768x24:
31089                                           ! 4480 0x0300,0x2101,0x0f02,0x0003,0
31090 8249                      0300            .word	$300
31091 824B                      2101            .word	$2101
31092 824D                      0F02            .word	$F02
31093 824F                      0003            .word	3
31094                                           ! 4480 x0e04,0x1507,
31095 8251                      0E04            .word	$E04
31096 8253                      1507            .word	$1507
31097                                           ! 4481 0x760b,0x760c,0x760d,0x760e,
31098 8255                      760B            .word	$760B
31099 8257                      760C            .word	$760C
31100 8259                      760D            .word	$760D
31101 825B                      760E            .word	$760E
31102                                           ! 4482 0x0412,0x0013,0x2017,
31103 825D                      0412            .word	$412
31104 825F                      0013            .word	$13
31105 8261                      2017            .word	$2017
31106                                           ! 4483 0x341b,0x341c,0x341d,0x341e,
31107 8263                      341B            .word	$341B
31108 8265                      341C            .word	$341C
31109 8267                      341D            .word	$341D
31110 8269                      341E            .word	$341E
31111                                           ! 4484 0xffff
31112                                           ! 4485 };
31113 826B                      FFFF            .word	$FFFF
31114                                           !BCC_EOS
31115                                           ! 4486 unsigned short ccrtc_1024x768x24[] = {
31116                                           export	_ccrtc_1024x768x24
31117                       0000826D            _ccrtc_1024x768x24:
31118                                           ! 4487 0x2911,0xa300,0x7f01,0x7f02,0x8603,0x8304,0x9405,0x2406,0xf507,
31119 826D                      2911            .word	$2911
31120 826F                      A300            .word	$A300
31121 8271                      7F01            .word	$7F01
31122 8273                      7F02            .word	$7F02
31123 8275                      8603            .word	$8603
31124 8277                      8304            .word	$8304
31125 8279                      9405            .word	$9405
31126 827B                      2406            .word	$2406
31127 827D                      F507            .word	$F507
31128                                           ! 4488 0x6009,0x000c,0x000d,
31129 827F                      6009            .word	$6009
31130 8281                      000C            .word	$C
31131 8283                      000D            .word	$D
31132                                           ! 4489 0x0310,0xff12,0x8013,0x4014,0xff15,0x2416,0xc317,0xff18,
31133 8285                      0310            .word	$310
31134 8287                      FF12            .word	$FF12
31135 8289                      8013            .word	$8013
31136 828B                      4014            .word	$4014
31137 828D                      FF15            .word	$FF15
31138 828F                      2416            .word	$2416
31139 8291                      C317            .word	$C317
31140 8293                      FF18            .word	$FF18
31141                                           ! 4490 0x001a,0x321b,0x001d,
31142 8295                      001A            .word	$1A
31143 8297                      321B            .word	$321B
31144 8299                      001D            .word	$1D
31145                                           ! 4491 0xffff
31146                                           ! 4492 };
31147 829B                      FFFF            .word	$FFFF
31148                                           !BCC_EOS
31149                                           ! 4493 unsigned short cseq_1280x1024x8[] = {
31150                                           export	_cseq_1280x1024x8
31151                       0000829D            _cseq_1280x1024x8:
31152                                           ! 4494 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
31153 829D                      0300            .word	$300
31154 829F                      2101            .word	$2101
31155 82A1                      0F02            .word	$F02
31156 82A3                      0003            .word	3
31157 82A5                      0E04            .word	$E04
31158 82A7                      1107            .word	$1107
31159                                           ! 4495 0x760b,0x760c,0x760d,0x760e,
31160 82A9                      760B            .word	$760B
31161 82AB                      760C            .word	$760C
31162 82AD                      760D            .word	$760D
31163 82AF                      760E            .word	$760E
31164                                           ! 4496 0x0412,0x0013,0x2017,
31165 82B1                      0412            .word	$412
31166 82B3                      0013            .word	$13
31167 82B5                      2017            .word	$2017
31168                                           ! 4497 0x341b,0x341c,0x341d,0x341e,
31169 82B7                      341B            .word	$341B
31170 82B9                      341C            .word	$341C
31171 82BB                      341D            .word	$341D
31172 82BD                      341E            .word	$341E
31173                                           ! 4498 0xffff
31174                                           ! 4499 };
31175 82BF                      FFFF            .word	$FFFF
31176                                           !BCC_EOS
31177                                           ! 4500 unsigned short ccrtc_1280x1024x8[] = {
31178                                           export	_ccrtc_1280x1024x8
31179                       000082C1            _ccrtc_1280x1024x8:
31180                                           ! 4501 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
31181 82C1                      2911            .word	$2911
31182 82C3                      C300            .word	$C300
31183 82C5                      9F01            .word	$9F01
31184 82C7                      9F02            .word	$9F02
31185 82C9                      8603            .word	$8603
31186 82CB                      8304            .word	$8304
31187 82CD                      9405            .word	$9405
31188 82CF                      2406            .word	$2406
31189 82D1                      F707            .word	$F707
31190                                           ! 4502 0x6009,0x000c,0x000d,
31191 82D3                      6009            .word	$6009
31192 82D5                      000C            .word	$C
31193 82D7                      000D            .word	$D
31194                                           ! 4503 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
31195 82D9                      0310            .word	$310
31196 82DB                      FF12            .word	$FF12
31197 82DD                      A013            .word	$A013
31198 82DF                      4014            .word	$4014
31199 82E1                      FF15            .word	$FF15
31200 82E3                      2416            .word	$2416
31201 82E5                      C317            .word	$C317
31202 82E7                      FF18            .word	$FF18
31203                                           ! 4504 0x001a,0x221b,0x001d,
31204 82E9                      001A            .word	$1A
31205 82EB                      221B            .word	$221B
31206 82ED                      001D            .word	$1D
31207                                           ! 4505 0xffff
31208                                           ! 4506 };
31209 82EF                      FFFF            .word	$FFFF
31210                                           !BCC_EOS
31211                                           ! 4507 unsigned short cseq_1280x1024x16[] = {
31212                                           export	_cseq_1280x1024x16
31213                       000082F1            _cseq_1280x1024x16:
31214                                           ! 4508 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1707,
31215 82F1                      0300            .word	$300
31216 82F3                      2101            .word	$2101
31217 82F5                      0F02            .word	$F02
31218 82F7                      0003            .word	3
31219 82F9                      0E04            .word	$E04
31220 82FB                      1707            .word	$1707
31221                                           ! 4509 0x760b,0x760c,0x760d,0x760e,
31222 82FD                      760B            .word	$760B
31223 82FF                      760C            .word	$760C
31224 8301                      760D            .word	$760D
31225 8303                      760E            .word	$760E
31226                                           ! 4510 0x0412,0x0013,0x2017,
31227 8305                      0412            .word	$412
31228 8307                      0013            .word	$13
31229 8309                      2017            .word	$2017
31230                                           ! 4511 0x341b,0x341c,0x341d,0x341e,
31231 830B                      341B            .word	$341B
31232 830D                      341C            .word	$341C
31233 830F                      341D            .word	$341D
31234 8311                      341E            .word	$341E
31235                                           ! 4512 0xffff
31236                                           ! 4513 };
31237 8313                      FFFF            .word	$FFFF
31238                                           !BCC_EOS
31239                                           ! 4514 unsigned short ccrtc_1280x1024x16[] = {
31240                                           export	_ccrtc_1280x1024x16
31241                       00008315            _ccrtc_1280x1024x16:
31242                                           ! 4515 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
31243 8315                      2911            .word	$2911
31244 8317                      C300            .word	$C300
31245 8319                      9F01            .word	$9F01
31246 831B                      9F02            .word	$9F02
31247 831D                      8603            .word	$8603
31248 831F                      8304            .word	$8304
31249 8321                      9405            .word	$9405
31250 8323                      2406            .word	$2406
31251 8325                      F707            .word	$F707
31252                                           ! 4516 0x6009,0x000c,0x000d,
31253 8327                      6009            .word	$6009
31254 8329                      000C            .word	$C
31255 832B                      000D            .word	$D
31256                                           ! 4517 0x0310,0xff12,0x4013,0x4014,0xff15,0x2416,0xc317,0xff18,
31257 832D                      0310            .word	$310
31258 832F                      FF12            .word	$FF12
31259 8331                      4013            .word	$4013
31260 8333                      4014            .word	$4014
31261 8335                      FF15            .word	$FF15
31262 8337                      2416            .word	$2416
31263 8339                      C317            .word	$C317
31264 833B                      FF18            .word	$FF18
31265                                           ! 4518 0x001a,0x321b,0x001d,
31266 833D                      001A            .word	$1A
31267 833F                      321B            .word	$321B
31268 8341                      001D            .word	$1D
31269                                           ! 4519 0xffff
31270                                           ! 4520 };
31271 8343                      FFFF            .word	$FFFF
31272                                           !BCC_EOS
31273                                           ! 4521 unsigned short cseq_1600x1200x8[] = {
31274                                           export	_cseq_1600x1200x8
31275                       00008345            _cseq_1600x1200x8:
31276                                           ! 4522 0x0300,0x2101,0x0f02,0x0003,0x0e04,0x1107,
31277 8345                      0300            .word	$300
31278 8347                      2101            .word	$2101
31279 8349                      0F02            .word	$F02
31280 834B                      0003            .word	3
31281 834D                      0E04            .word	$E04
31282 834F                      1107            .word	$1107
31283                                           ! 4523 0x760b,0x760c,0x760d,0x760e,
31284 8351                      760B            .word	$760B
31285 8353                      760C            .word	$760C
31286 8355                      760D            .word	$760D
31287 8357                      760E            .word	$760E
31288                                           ! 4524 0x0412,0x0013,0x2017,
31289 8359                      0412            .word	$412
31290 835B                      0013            .word	$13
31291 835D                      2017            .word	$2017
31292                                           ! 4525 0x341b,0x341c,0x341d,0x341e,
31293 835F                      341B            .word	$341B
31294 8361                      341C            .word	$341C
31295 8363                      341D            .word	$341D
31296 8365                      341E            .word	$341E
31297                                           ! 4526 0xffff
31298                                           ! 4527 };
31299 8367                      FFFF            .word	$FFFF
31300                                           !BCC_EOS
31301                                           ! 4528 unsigned short ccrtc_1600x1200x8[] = {
31302                                           export	_ccrtc_1600x1200x8
31303                       00008369            _ccrtc_1600x1200x8:
31304                                           ! 4529 0x2911,0xc300,0x9f01,0x9f02,0x8603,0x8304,0x9405,0x2406,0xf707,
31305 8369                      2911            .word	$2911
31306 836B                      C300            .word	$C300
31307 836D                      9F01            .word	$9F01
31308 836F                      9F02            .word	$9F02
31309 8371                      8603            .word	$8603
31310 8373                      8304            .word	$8304
31311 8375                      9405            .word	$9405
31312 8377                      2406            .word	$2406
31313 8379                      F707            .word	$F707
31314                                           ! 4530 0x6009,0x000c,0x000d,
31315 837B                      6009            .word	$6009
31316 837D                      000C            .word	$C
31317 837F                      000D            .word	$D
31318                                           ! 4531 0x0310,0xff12,0xa013,0x4014,0xff15,0x2416,0xc317,0xff18,
31319 8381                      0310            .word	$310
31320 8383                      FF12            .word	$FF12
31321 8385                      A013            .word	$A013
31322 8387                      4014            .word	$4014
31323 8389                      FF15            .word	$FF15
31324 838B                      2416            .word	$2416
31325 838D                      C317            .word	$C317
31326 838F                      FF18            .word	$FF18
31327                                           ! 4532 0x001a,0x221b,0x001d,
31328 8391                      001A            .word	$1A
31329 8393                      221B            .word	$221B
31330 8395                      001D            .word	$1D
31331                                           ! 4533 0xffff
31332                                           ! 4534 };
31333 8397                      FFFF            .word	$FFFF
31334                                           !BCC_EOS
31335                                           ! 4535 cirrus_mode_t cirrus_modes[] =
31336                                           ! 4536 {
31337                                           export	_cirrus_modes
31338                       00008399            _cirrus_modes:
31339                                           ! 4537  {0x5f,640,480,8,0x00,
31340 8399                      005F            .word	$5F
31341 839B                      0280            .word	$280
31342 839D                      01E0            .word	$1E0
31343 839F                      0008            .word	8
31344 83A1                      0000            .word	0
31345                                           ! 4538    cseq_640x480x8,cgraph_svgacolor,ccrtc_640x480x8,8,
31346 83A3                      7FA9            .word	_cseq_640x480x8
31347 83A5                      7F8F            .word	_cgraph_svgacolor
31348 83A7                      7FCD            .word	_ccrtc_640x480x8
31349 83A9                        08            .byte	8
31350                                           ! 4539    4,0,0,0,0,0,0,0,0},
31351 83AA                        04            .byte	4
31352 83AB                        00            .byte	0
31353 83AC                        00            .byte	0
31354 83AD                        00            .byte	0
31355 83AE                        00            .byte	0
31356 83AF                        00            .byte	0
31357 83B0                        00            .byte	0
31358 83B1                        00            .byte	0
31359 83B2                        00            .byte	0
31360                                           ! 4540  {0x64,640,480,16,0xe1,
31361 83B3                      0064            .word	$64
31362 83B5                      0280            .word	$280
31363 83B7                      01E0            .word	$1E0
31364 83B9                      0010            .word	$10
31365 83BB                      00E1            .word	$E1
31366                                           ! 4541    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
31367 83BD                      7FFD            .word	_cseq_640x480x16
31368 83BF                      7F8F            .word	_cgraph_svgacolor
31369 83C1                      8021            .word	_ccrtc_640x480x16
31370 83C3                        10            .byte	$10
31371                                           ! 4542    6,5,11,6,5,5,0,0,0},
31372 83C4                        06            .byte	6
31373 83C5                        05            .byte	5
31374 83C6                        0B            .byte	$B
31375 83C7                        06            .byte	6
31376 83C8                        05            .byte	5
31377 83C9                        05            .byte	5
31378 83CA                        00            .byte	0
31379 83CB                        00            .byte	0
31380 83CC                        00            .byte	0
31381                                           ! 4543  {0x66,640,480,15,0xf0,
31382 83CD                      0066            .word	$66
31383 83CF                      0280            .word	$280
31384 83D1                      01E0            .word	$1E0
31385 83D3                      000F            .word	$F
31386 83D5                      00F0            .word	$F0
31387                                           ! 4544    cseq_640x480x16,cgraph_svgacolor,ccrtc_640x480x16,16,
31388 83D7                      7FFD            .word	_cseq_640x480x16
31389 83D9                      7F8F            .word	_cgraph_svgacolor
31390 83DB                      8021            .word	_ccrtc_640x480x16
31391 83DD                        10            .byte	$10
31392                                           ! 4545    6,5,10,5,5,5,0,1,15},
31393 83DE                        06            .byte	6
31394 83DF                        05            .byte	5
31395 83E0                        0A            .byte	$A
31396 83E1                        05            .byte	5
31397 83E2                        05            .byte	5
31398 83E3                        05            .byte	5
31399 83E4                        00            .byte	0
31400 83E5                        01            .byte	1
31401 83E6                        0F            .byte	$F
31402                                           ! 4546  {0x71,640,480,24,0xe5,
31403 83E7                      0071            .word	$71
31404 83E9                      0280            .word	$280
31405 83EB                      01E0            .word	$1E0
31406 83ED                      0018            .word	$18
31407 83EF                      00E5            .word	$E5
31408                                           ! 4547    cseq_640x480x24,cgraph_svgacolor,ccrtc_640x480x24,24,
31409 83F1                      8051            .word	_cseq_640x480x24
31410 83F3                      7F8F            .word	_cgraph_svgacolor
31411 83F5                      8075            .word	_ccrtc_640x480x24
31412 83F7                        18            .byte	$18
31413                                           ! 4548    6,8,16,8,8,8,0,0,0},
31414 83F8                        06            .byte	6
31415 83F9                        08            .byte	8
31416 83FA                        10            .byte	$10
31417 83FB                        08            .byte	8
31418 83FC                        08            .byte	8
31419 83FD                        08            .byte	8
31420 83FE                        00            .byte	0
31421 83FF                        00            .byte	0
31422 8400                        00            .byte	0
31423                                           ! 4549  {0x5c,800,600,8,0x00,
31424 8401                      005C            .word	$5C
31425 8403                      0320            .word	$320
31426 8405                      0258            .word	$258
31427 8407                      0008            .word	8
31428 8409                      0000            .word	0
31429                                           ! 4550    cseq_800x600x8,cgraph_svgacolor,ccrtc_800x600x8,8,
31430 840B                      80A5            .word	_cseq_800x600x8
31431 840D                      7F8F            .word	_cgraph_svgacolor
31432 840F                      80C9            .word	_ccrtc_800x600x8
31433 8411                        08            .byte	8
31434                                           ! 4551    4,0,0,0,0,0,0,0,0},
31435 8412                        04            .byte	4
31436 8413                        00            .byte	0
31437 8414                        00            .byte	0
31438 8415                        00            .byte	0
31439 8416                        00            .byte	0
31440 8417                        00            .byte	0
31441 8418                        00            .byte	0
31442 8419                        00            .byte	0
31443 841A                        00            .byte	0
31444                                           ! 4552  {0x65,800,600,16,0xe1,
31445 841B                      0065            .word	$65
31446 841D                      0320            .word	$320
31447 841F                      0258            .word	$258
31448 8421                      0010            .word	$10
31449 8423                      00E1            .word	$E1
31450                                           ! 4553 
31451                                           ! 4553    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
31452 8425                      80F9            .word	_cseq_800x600x16
31453 8427                      7F8F            .word	_cgraph_svgacolor
31454 8429                      811D            .word	_ccrtc_800x600x16
31455 842B                        10            .byte	$10
31456                                           ! 4554    6,5,11,6,5,5,0,0,0},
31457 842C                        06            .byte	6
31458 842D                        05            .byte	5
31459 842E                        0B            .byte	$B
31460 842F                        06            .byte	6
31461 8430                        05            .byte	5
31462 8431                        05            .byte	5
31463 8432                        00            .byte	0
31464 8433                        00            .byte	0
31465 8434                        00            .byte	0
31466                                           ! 4555  {0x67,800,600,15,0xf0,
31467 8435                      0067            .word	$67
31468 8437                      0320            .word	$320
31469 8439                      0258            .word	$258
31470 843B                      000F            .word	$F
31471 843D                      00F0            .word	$F0
31472                                           ! 4556    cseq_800x600x16,cgraph_svgacolor,ccrtc_800x600x16,16,
31473 843F                      80F9            .word	_cseq_800x600x16
31474 8441                      7F8F            .word	_cgraph_svgacolor
31475 8443                      811D            .word	_ccrtc_800x600x16
31476 8445                        10            .byte	$10
31477                                           ! 4557    6,5,10,5,5,5,0,1,15},
31478 8446                        06            .byte	6
31479 8447                        05            .byte	5
31480 8448                        0A            .byte	$A
31481 8449                        05            .byte	5
31482 844A                        05            .byte	5
31483 844B                        05            .byte	5
31484 844C                        00            .byte	0
31485 844D                        01            .byte	1
31486 844E                        0F            .byte	$F
31487                                           ! 4558  {0x60,1024,768,8,0x00,
31488 844F                      0060            .word	$60
31489 8451                      0400            .word	$400
31490 8453                      0300            .word	$300
31491 8455                      0008            .word	8
31492 8457                      0000            .word	0
31493                                           ! 4559    cseq_1024x768x8,cgraph_svgacolor,ccrtc_1024x768x8,8,
31494 8459                      81A1            .word	_cseq_1024x768x8
31495 845B                      7F8F            .word	_cgraph_svgacolor
31496 845D                      81C5            .word	_ccrtc_1024x768x8
31497 845F                        08            .byte	8
31498                                           ! 4560    4,0,0,0,0,0,0,0,0},
31499 8460                        04            .byte	4
31500 8461                        00            .byte	0
31501 8462                        00            .byte	0
31502 8463                        00            .byte	0
31503 8464                        00            .byte	0
31504 8465                        00            .byte	0
31505 8466                        00            .byte	0
31506 8467                        00            .byte	0
31507 8468                        00            .byte	0
31508                                           ! 4561  {0x74,1024,768,16,0xe1,
31509 8469                      0074            .word	$74
31510 846B                      0400            .word	$400
31511 846D                      0300            .word	$300
31512 846F                      0010            .word	$10
31513 8471                      00E1            .word	$E1
31514                                           ! 4562    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
31515 8473                      81F5            .word	_cseq_1024x768x16
31516 8475                      7F8F            .word	_cgraph_svgacolor
31517 8477                      8219            .word	_ccrtc_1024x768x16
31518 8479                        10            .byte	$10
31519                                           ! 4563    6,5,11,6,5,5,0,0,0},
31520 847A                        06            .byte	6
31521 847B                        05            .byte	5
31522 847C                        0B            .byte	$B
31523 847D                        06            .byte	6
31524 847E                        05            .byte	5
31525 847F                        05            .byte	5
31526 8480                        00            .byte	0
31527 8481                        00            .byte	0
31528 8482                        00            .byte	0
31529                                           ! 4564  {0x68,1024,768,15,0xf0,
31530 8483                      0068            .word	$68
31531 8485                      0400            .word	$400
31532 8487                      0300            .word	$300
31533 8489                      000F            .word	$F
31534 848B                      00F0            .word	$F0
31535                                           ! 4565    cseq_1024x768x16,cgraph_svgacolor,ccrtc_1024x768x16,16,
31536 848D                      81F5            .word	_cseq_1024x768x16
31537 848F                      7F8F            .word	_cgraph_svgacolor
31538 8491                      8219            .word	_ccrtc_1024x768x16
31539 8493                        10            .byte	$10
31540                                           ! 4566    6,5,10,5,5,5,0,1,15},
31541 8494                        06            .byte	6
31542 8495                        05            .byte	5
31543 8496                        0A            .byte	$A
31544 8497                        05            .byte	5
31545 8498                        05            .byte	5
31546 8499                        05            .byte	5
31547 849A                        00            .byte	0
31548 849B                        01            .byte	1
31549 849C                        0F            .byte	$F
31550                                           ! 4567  {0x78,800,600,24,0xe5,
31551 849D                      0078            .word	$78
31552 849F                      0320            .word	$320
31553 84A1                      0258            .word	$258
31554 84A3                      0018            .word	$18
31555 84A5                      00E5            .word	$E5
31556                                           ! 4568    cseq_800x600x24,cgraph_svgacolor,ccrtc_800x600x24,24,
31557 84A7                      814D            .word	_cseq_800x600x24
31558 84A9                      7F8F            .word	_cgraph_svgacolor
31559 84AB                      8171            .word	_ccrtc_800x600x24
31560 84AD                        18            .byte	$18
31561                                           ! 4569    6,8,16,8,8,8,0,0,0},
31562 84AE                        06            .byte	6
31563 84AF                        08            .byte	8
31564 84B0                        10            .byte	$10
31565 84B1                        08            .byte	8
31566 84B2                        08            .byte	8
31567 84B3                        08            .byte	8
31568 84B4                        00            .byte	0
31569 84B5                        00            .byte	0
31570 84B6                        00            .byte	0
31571                                           ! 4570  {0x79,1024,768,24,0xe5,
31572 84B7                      0079            .word	$79
31573 84B9                      0400            .word	$400
31574 84BB                      0300            .word	$300
31575 84BD                      0018            .word	$18
31576 84BF                      00E5            .word	$E5
31577                                           ! 4571    cseq_1024x768x24,cgraph_svgacolor,ccrtc_1024x768x24,24,
31578 84C1                      8249            .word	_cseq_1024x768x24
31579 84C3                      7F8F            .word	_cgraph_svgacolor
31580 84C5                      826D            .word	_ccrtc_1024x768x24
31581 84C7                        18            .byte	$18
31582                                           ! 4572    6,8,16,8,8,8,0,0,0},
31583 84C8                        06            .byte	6
31584 84C9                        08            .byte	8
31585 84CA                        10            .byte	$10
31586 84CB                        08            .byte	8
31587 84CC                        08            .byte	8
31588 84CD                        08            .byte	8
31589 84CE                        00            .byte	0
31590 84CF                        00            .byte	0
31591 84D0                        00            .byte	0
31592                                           ! 4573  {0x6d,1280,1024,8,0x00,
31593 84D1                      006D            .word	$6D
31594 84D3                      0500            .word	$500
31595 84D5                      0400            .word	$400
31596 84D7                      0008            .word	8
31597 84D9                      0000            .word	0
31598                                           ! 4574    cseq_1280x1024x8,cgraph_svgacolor,ccrtc_1280x1024x8,8,
31599 84DB                      829D            .word	_cseq_1280x1024x8
31600 84DD                      7F8F            .word	_cgraph_svgacolor
31601 84DF                      82C1            .word	_ccrtc_1280x1024x8
31602 84E1                        08            .byte	8
31603                                           ! 4575    4,0,0,0,0,0,0,0,0},
31604 84E2                        04            .byte	4
31605 84E3                        00            .byte	0
31606 84E4                        00            .byte	0
31607 84E5                        00            .byte	0
31608 84E6                        00            .byte	0
31609 84E7                        00            .byte	0
31610 84E8                        00            .byte	0
31611 84E9                        00            .byte	0
31612 84EA                        00            .byte	0
31613                                           ! 4576  {0x69,1280,1024,15,0xf0,
31614 84EB                      0069            .word	$69
31615 84ED                      0500            .word	$500
31616 84EF                      0400            .word	$400
31617 84F1                      000F            .word	$F
31618 84F3                      00F0            .word	$F0
31619                                           ! 4577    cseq_1280x1024x16,cgraph_svgacolor,ccrtc_1280x1024x16,16,
31620 84F5                      82F1            .word	_cseq_1280x1024x16
31621 84F7                      7F8F            .word	_cgraph_svgacolor
31622 84F9                      8315            .word	_ccrtc_1280x1024x16
31623 84FB                        10            .byte	$10
31624                                           ! 4578    6,5,10,5,5,5,0,1,15},
31625 84FC                        06            .byte	6
31626 84FD                        05            .byte	5
31627 84FE                        0A            .byte	$A
31628 84FF                        05            .byte	5
31629 8500                        05            .byte	5
31630 8501                        05            .byte	5
31631 8502                        00            .byte	0
31632 8503                        01            .byte	1
31633 8504                        0F            .byte	$F
31634                                           ! 4579  {0x75,1280,1024,16,0xe1,
31635 8505                      0075            .word	$75
31636 8507                      0500            .word	$500
31637 8509                      0400            .word	$400
31638 850B                      0010            .word	$10
31639 850D                      00E1            .word	$E1
31640                                           ! 4580    cseq_1280x1024x16,cgraph_svgacolor,ccrtc_1280x1024x16,16,
31641 850F                      82F1            .word	_cseq_1280x1024x16
31642 8511                      7F8F            .word	_cgraph_svgacolor
31643 8513                      8315            .word	_ccrtc_1280x1024x16
31644 8515                        10            .byte	$10
31645                                           ! 4581    6,5,11,6,5,5,0,0,0},
31646 8516                        06            .byte	6
31647 8517                        05            .byte	5
31648 8518                        0B            .byte	$B
31649 8519                        06            .byte	6
31650 851A                        05            .byte	5
31651 851B                        05            .byte	5
31652 851C                        00            .byte	0
31653 851D                        00            .byte	0
31654 851E                        00            .byte	0
31655                                           ! 4582  {0x7b,1600,1200,8,0x00,
31656 851F                      007B            .word	$7B
31657 8521                      0640            .word	$640
31658 8523                      04B0            .word	$4B0
31659 8525                      0008            .word	8
31660 8527                      0000            .word	0
31661                                           ! 4583    cseq_1600x1200x8,cgraph_svgacolor,ccrtc_1600x1200x8,8,
31662 8529                      8345            .word	_cseq_1600x1200x8
31663 852B                      7F8F            .word	_cgraph_svgacolor
31664 852D                      8369            .word	_ccrtc_1600x1200x8
31665 852F                        08            .byte	8
31666                                           ! 4584    4,0,0,0,0,0,0,0,0},
31667 8530                        04            .byte	4
31668 8531                        00            .byte	0
31669 8532                        00            .byte	0
31670 8533                        00            .byte	0
31671 8534                        00            .byte	0
31672 8535                        00            .byte	0
31673 8536                        00            .byte	0
31674 8537                        00            .byte	0
31675 8538                        00            .byte	0
31676                                           ! 4585  {0xfe,0,0,0,0,cseq_vga,cgraph_vga,ccrtc_vga,0,
31677 8539                      00FE            .word	$FE
31678 853B                      0000            .word	0
31679 853D                      0000            .word	0
31680 853F                      0000            .word	0
31681 8541                      0000            .word	0
31682 8543                      7F7B            .word	_cseq_vga
31683 8545                      7F7F            .word	_cgraph_vga
31684 8547                      7F87            .word	_ccrtc_vga
31685 8549                        00            .byte	0
31686                                           ! 4586    0xff,0,0,0,0,0,0,0,0},
31687 854A                        FF            .byte	$FF
31688 854B                        00            .byte	0
31689 854C                        00            .byte	0
31690 854D                        00            .byte	0
31691 854E                        00            .byte	0
31692 854F                        00            .byte	0
31693 8550                        00            .byte	0
31694 8551                        00            .byte	0
31695 8552                        00            .byte	0
31696                                           ! 4587  {0xff,0,0,0,0,0,0,0,0,
31697 8553                      00FF            .word	$FF
31698 8555                      0000            .word	0
31699 8557                      0000            .word	0
31700 8559                      0000            .word	0
31701 855B                      0000            .word	0
31702 855D                      0000            .word	0
31703 855F                      0000            .word	0
31704 8561                      0000            .word	0
31705 8563                        00            .byte	0
31706                                           ! 4588    0xff,0,0,0,0,0,0,0,0},
31707 8564                        FF            .byte	$FF
31708 8565                        00            .byte	0
31709 8566                        00            .byte	0
31710 8567                        00            .byte	0
31711 8568                        00            .byte	0
31712 8569                        00            .byte	0
31713 856A                        00            .byte	0
31714 856B                        00            .byte	0
31715 856C                        00            .byte	0
31716                                           ! 4589 };
31717                                           !BCC_EOS
31718                                           ! 4590 unsigned char cirrus_id_table[] = {
31719                                           export	_cirrus_id_table
31720                       0000856D            _cirrus_id_table:
31721                                           ! 4591   0xA0, 0x32,
31722 856D                        A0            .byte	$A0
31723 856E                        32            .byte	$32
31724                                           ! 4592   0xB8, 0x39,
31725 856F                        B8            .byte	$B8
31726 8570                        39            .byte	$39
31727                                           ! 4593   0xff, 0xff
31728 8571                        FF            .byte	$FF
31729                                           ! 4594 };
31730 8572                        FF            .byte	$FF
31731                                           !BCC_EOS
31732                                           ! 4595 unsigned short cirrus_vesa_modelist[] = {
31733                                           export	_cirrus_vesa_modelist
31734                       00008573            _cirrus_vesa_modelist:
31735                                           ! 4596   0x101, 0x5f,
31736 8573                      0101            .word	$101
31737 8575                      005F            .word	$5F
31738                                           ! 4597   0x110, 0x66,
31739 8577                      0110            .word	$110
31740 8579                      0066            .word	$66
31741                                           ! 4598   0x111, 0x64,
31742 857B                      0111            .word	$111
31743 857D                      0064            .word	$64
31744                                           ! 4599   0x112, 0x71,
31745 857F                      0112            .word	$112
31746 8581                      0071            .word	$71
31747                                           ! 4600   0x103, 0x5c,
31748 8583                      0103            .word	$103
31749 8585                      005C            .word	$5C
31750                                           ! 4601   0x113, 0x67,
31751 8587                      0113            .word	$113
31752 8589                      0067            .word	$67
31753                                           ! 4602   0x114, 0x65,
31754 858B                      0114            .word	$114
31755 858D                      0065            .word	$65
31756                                           ! 4603   0x115, 0x78,
31757 858F                      0115            .word	$115
31758 8591                      0078            .word	$78
31759                                           ! 4604   0x105, 0x60,
31760 8593                      0105            .word	$105
31761 8595                      0060            .word	$60
31762                                           ! 4605   0x116, 0x68,
31763 8597                      0116            .word	$116
31764 8599                      0068            .word	$68
31765                                           ! 4606   0x117, 0x74,
31766 859B                      0117            .word	$117
31767 859D                      0074            .word	$74
31768                                           ! 4607   0x118, 0x79,
31769 859F                      0118            .word	$118
31770 85A1                      0079            .word	$79
31771                                           ! 4608   0x107, 0x6d,
31772 85A3                      0107            .word	$107
31773 85A5                      006D            .word	$6D
31774                                           ! 4609   0x119, 0x69,
31775 85A7                      0119            .word	$119
31776 85A9                      0069            .word	$69
31777                                           ! 4610   0x11a, 0x75,
31778 85AB                      011A            .word	$11A
31779 85AD                      0075            .word	$75
31780                                           ! 4611   0xffff,0xffff
31781 85AF                      FFFF            .word	$FFFF
31782                                           ! 4612 };
31783 85B1                      FFFF            .word	$FFFF
31784                                           !BCC_EOS
31785                                           ! 4613 #asm
31786                                           !BCC_ASM
31787                       000085B3            cirrus_installed:
31788 85B3                        63            .ascii "cirrus-compatible VGA is detected"
31789 85D4                        0D            .byte 0x0d,0x0a
31790 85D6                        0D            .byte 0x0d,0x0a,0x00
31791                       000085D9            cirrus_not_installed:
31792 85D9                        63            .ascii "cirrus-compatible VGA is not detected"
31793 85FE                        0D            .byte 0x0d,0x0a
31794 8600                        0D            .byte 0x0d,0x0a,0x00
31795                       00008603            cirrus_vesa_vendorname:
31796                       00008603            cirrus_vesa_productname:
31797                       00008603            cirrus_vesa_oemname:
31798 8603                        56            .ascii "VGABIOS Cirrus extension"
31799 861B                        00            .byte 0
31800                       0000861C            cirrus_vesa_productrevision:
31801 861C                        31            .ascii "1.0"
31802 861F                        00            .byte 0
31803                       00008620            cirrus_init:
31804 8620           E8         0049              call cirrus_check
31805 8623           75           31              jnz no_cirrus
31806                                             SET_INT_VECTOR(0x10, #0xC000, #cirrus_int10_handler)
 +a   8625           1E                           push ds
 +a   8626           31C0                         xor ax, ax
 +a   8628           8ED8                         mov ds, ax
 +a   862A           B8                   867C    mov ax,  #cirrus_int10_handler
 +a   862D           A3         0040              mov 0x10*4, ax
 +a   8630           B8                   C000    mov ax,  #0xC000
 +a   8633           A3         0042              mov 0x10*4+2, ax
 +a   8636           1F                           pop ds
31807 8637           B0                     0F    mov al, #0x0f ; memory setup
31808 8639           BA                   03C4    mov dx, #0x3C4
31809 863C           EE                           out dx, al
31810 863D           42                           inc dx
31811 863E           EC                           in al, dx
31812 863F           24                     18    and al, #0x18
31813 8641           88C4                         mov ah, al
31814 8643           B0                     0A    mov al, #0x0a
31815 8645           4A                           dec dx
31816 8646           EF                           out dx, ax
31817 8647           B8                   0007    mov ax, #0x0007 ; set vga mode
31818 864A           EF                           out dx, ax
31819 864B           B8                   0431    mov ax, #0x0431 ; reset bitblt
31820 864E           BA                   03CE    mov dx, #0x3CE
31821 8651           EF                           out dx, ax
31822 8652           B8                   0031    mov ax, #0x0031
31823 8655           EF                           out dx, ax
31824                       00008656            no_cirrus:
31825 8656           C3                           ret
31826                       00008657            cirrus_display_info:
31827 8657           1E                           push ds
31828 8658           56                           push si
31829 8659           0E                           push cs
31830 865A           1F                           pop ds
31831 865B           E8         000E              call cirrus_check
31832 865E           BE                   85D9    mov si, #cirrus_not_installed
31833 8661           75           03              jnz cirrus_msgnotinstalled
31834 8663           BE                   85B3    mov si, #cirrus_installed
31835                       00008666            cirrus_msgnotinstalled:
31836 8666           E8         AFBC              call _display_string
31837 8669           5E                           pop si
31838 866A           1F                           pop ds
31839 866B           C3                           ret
31840                       0000866C            cirrus_check:
31841 866C           50                           push ax
31842 866D           52                           push dx
31843 866E           B8                   9206    mov ax, #0x9206
31844 8671           BA                   03C4    mov dx, #0x3C4
31845 8674           EF                           out dx, ax
31846 8675           42                           inc dx
31847 8676           EC                           in al, dx
31848 8677           3C                     12    cmp al, #0x12
31849 8679           5A                           pop dx
31850 867A           58                           pop ax
31851 867B           C3                           ret
31852                       0000867C            cirrus_int10_handler:
31853 867C           9C                           pushf
31854 867D           55                           push bp
31855 867E           80FC                   00    cmp ah, #0x00 ;; set video mode
31856 8681           74           15              jz cirrus_set_video_mode
31857 8683           80FC                   12    cmp ah, #0x12 ;; cirrus extension
31858 8686           74           34              jz cirrus_extbios
31859 8688           80FC                   4F    cmp ah, #0x4F ;; VESA extension
31860 868B           74           4D              jz cirrus_vesa
31861                       0000868D            cirrus_unhandled:
31862 868D           5D                           pop bp
31863 868E           9D                           popf
31864 868F           E9         7AC0              jmp vgabios_int10_handler
31865                       00008692            cirrus_return:
31866 8692           E8         0063              call cirrus_debug_dump
31867 8695           5D                           pop bp
31868 8696           9D                           popf
31869 8697           CF                           iret
31870                       00008698            cirrus_set_video_mode:
31871 8698           E8         005D              call cirrus_debug_dump
31872 869B           56                           push si
31873 869C           50                           push ax
31874 869D           53                           push bx
31875 869E           1E                           push ds
31876 869F           31F6                         xor si, si
31877 86A1           8EDE                         mov ds, si
31878 86A3           31DB                         xor bx, bx
31879 86A5           891E       04BA              mov [0x4BA], bx
31880 86A9           1F                           pop ds
31881 86AA           5B                           pop bx
31882 86AB           E8         04C0              call cirrus_get_modeentry
31883 86AE           73           54              jnc cirrus_set_video_mode_extended
31884 86B0           B0                     FE    mov al, #0xfe
31885 86B2           E8         04BB              call cirrus_get_modeentry_nomask
31886 86B5           E8         0091              call cirrus_switch_mode
31887 86B8           58                           pop ax
31888 86B9           5E                           pop si
31889 86BA           EB           D1              jmp cirrus_unhandled
31890                       000086BC            cirrus_extbios:
31891 86BC           E8         0039              call cirrus_debug_dump
31892 86BF           80FB                   80    cmp bl, #0x80
31893 86C2           72           C9              jb cirrus_unhandled
31894 86C4           80FB                   AF    cmp bl, #0xAF
31895 86C7           77           C4              ja cirrus_unhandled
31896 86C9           53                           push bx
31897 86CA           83E3                   7F    and bx, #0x7F
31898 86CD           D1E3                         shl bx, 1
31899 86CF                        2E             db 0x2e ;; cs:
31900 86D0           8BAF       8CBD              mov bp, cirrus_extbios_handlers[bx]
31901 86D4           5B                           pop bx
31902 86D5           68                   8692    push #cirrus_return
31903 86D8           55                           push bp
31904 86D9           C3                           ret
31905                       000086DA            cirrus_vesa:
31906 86DA           E8         001B              call cirrus_debug_dump
31907 86DD           3C                     10    cmp al, #0x10
31908 86DF           77           12              ja cirrus_vesa_not_handled
31909 86E1           53                           push bx
31910 86E2           31DB                         xor bx, bx
31911 86E4           88C3                         mov bl, al
31912 86E6           D1E3                         shl bx, 1
31913 86E8                        2E             db 0x2e ;; cs:
31914 86E9           8BAF       8D1D              mov bp, cirrus_vesa_handlers[bx]
31915 86ED           5B                           pop bx
31916 86EE           68                   8692    push #cirrus_return
31917 86F1           55                           push bp
31918 86F2           C3                           ret
31919                       000086F3            cirrus_vesa_not_handled:
31920 86F3           B8                   014F    mov ax, #0x014F ;; not implemented
31921 86F6           EB           9A              jmp cirrus_return
31922                       000086F8            cirrus_debug_dump:
31923 86F8           06                           push es
31924 86F9           1E                           push ds
31925 86FA           60                           pusha
31926 86FB           0E                           push cs
31927 86FC           1F                           pop ds
31928 86FD           E8         063F              call _cirrus_debugmsg
31929 8700           61                           popa
31930 8701           1F                           pop ds
31931 8702           07                           pop es
31932 8703           C3                           ret
31933                       00008704            cirrus_set_video_mode_extended:
31934 8704           E8         0042              call cirrus_switch_mode
31935 8707           58                           pop ax ;; mode
31936 8708           A8                     80    test al, #0x80
31937 870A           75           08              jnz cirrus_set_video_mode_extended_1
31938 870C           50                           push ax
31939 870D           B8                   FFFF    mov ax, #0xffff ; set to 0xff to keep win 2K happy
31940 8710           E8         0573              call cirrus_clear_vram
31941 8713           58                           pop ax
31942                       00008714            cirrus_set_video_mode_extended_1:
31943 8714           24                     7F    and al, #0x7f
31944 8716           1E                           push ds
31945 8717           31F6                         xor si, si
31946 8719           8EDE                         mov ds, si
31947 871B           A2         0449              mov [0x449], al
31948 871E           1F                           pop ds
31949 871F           B0                     20    mov al, #0x20
31950 8721           5E                           pop si
31951 8722           E9         FF6D              jmp cirrus_return
31952                       00008725            cirrus_vesa_pmbios_init:
31953 8725           CB                           retf
31954                       00008726            cirrus_vesa_pmbios_entry:
31955 8726           9C                           pushf
31956 8727           55                           push bp
31957 8728           80FC                   4F    cmp ah, #0x4F
31958 872B           75           16              jnz cirrus_vesa_pmbios_unimplemented
31959 872D           3C                     0F    cmp al, #0x0F
31960 872F           77           12              ja cirrus_vesa_pmbios_unimplemented
31961 8731           53                           push bx
31962 8732           31DB                         xor bx, bx
31963 8734           88C3                         mov bl, al
31964 8736           D1E3                         shl bx, 1
31965 8738                        2E             db 0x2e ;; cs:
31966 8739           8BAF       8D1D              mov bp, cirrus_vesa_handlers[bx]
31967 873D           5B                           pop bx
31968 873E           68                   8746    push #cirrus_vesa_pmbios_return
31969 8741           55                           push bp
31970 8742           C3                           ret
31971                       00008743            cirrus_vesa_pmbios_unimplemented:
31972 8743           B8                   014F    mov ax, #0x014F
31973                       00008746            cirrus_vesa_pmbios_return:
31974 8746           5D                           pop bp
31975 8747           9D                           popf
31976 8748           CB                           retf
31977                                           ; in si:mode table
31978                       00008749            cirrus_switch_mode:
31979 8749           1E                           push ds
31980 874A           53                           push bx
31981 874B           52                           push dx
31982 874C           0E                           push cs
31983 874D           1F                           pop ds
31984 874E           8B5C         0A              mov bx, [si+10] ;; seq
31985 8751           BA                   03C4    mov dx, #0x3c4
31986 8754           B8                   1206    mov ax, #0x1206
31987 8757           EF                           out dx, ax ;; Unlock cirrus special
31988 8758           E8         0067              call cirrus_switch_mode_setregs
31989 875B           8B5C         0C              mov bx, [si+12] ;; graph
31990 875E           BA                   03CE    mov dx, #0x3ce
31991 8761           E8         005E              call cirrus_switch_mode_setregs
31992 8764           8B5C         0E              mov bx, [si+14] ;; crtc
31993 8767           E8         03F1              call cirrus_get_crtc
31994 876A           E8         0055              call cirrus_switch_mode_setregs
31995 876D           BA                   03C6    mov dx, #0x3c6
31996 8770           B0                     00    mov al, #0x00
31997 8772           EE                           out dx, al
31998 8773           EC                           in al, dx
31999 8774           EC                           in al, dx
32000 8775           EC                           in al, dx
32001 8776           EC                           in al, dx
32002 8777           8A44         08              mov al, [si+8] ;; hidden dac
32003 877A           EE                           out dx, al
32004 877B           B0                     FF    mov al, #0xff
32005 877D           EE                           out dx, al
32006 877E           B0                     00    mov al, #0x00
32007 8780           8A5C         11              mov bl, [si+17] ;; memory model
32008 8783           08DB                         or bl, bl
32009 8785           74           09              jz is_text_mode
32010 8787           B0                     01    mov al, #0x01
32011 8789           80FB                   03    cmp bl, #0x03
32012 878C           75           02              jnz is_text_mode
32013 878E           0C                     40    or al, #0x40
32014                       00008790            is_text_mode:
32015 8790           B3                     10    mov bl, #0x10
32016 8792           E8         DAB8              call biosfn_get_single_palette_reg
32017 8795           80E7                   FE    and bh, #0xfe
32018 8798           08C7                         or bh, al
32019 879A           E8         DA3B              call biosfn_set_single_palette_reg
32020 879D           8A44         06              mov al, [si+6] ;; bpp
32021 87A0           3C                     08    cmp al, #0x08
32022 87A2           75           0A              jnz no_8bpp_mode
32023 87A4           B0                     03    mov al, #0x03
32024 87A6           30E4                         xor ah,ah
32025 87A8           50                           push ax
32026 87A9           E8         B321              call _load_dac_palette
32027 87AC           44                           inc sp
32028 87AD           44                           inc sp
32029                       000087AE            no_8bpp_mode:
32030 87AE           5A                           pop dx
32031 87AF           5B                           pop bx
32032 87B0           1F                           pop ds
32033 87B1           C3                           ret
32034                       000087B2            cirrus_enable_16k_granularity:
32035 87B2           50                           push ax
32036 87B3           52                           push dx
32037 87B4           BA                   03CE    mov dx, #0x3ce
32038 87B7           B0                     0B    mov al, #0x0b
32039 87B9           EE                           out dx, al
32040 87BA           42                           inc dx
32041 87BB           EC                           in al, dx
32042 87BC           0C                     20    or al, #0x20 ;; enable 16k
32043 87BE           EE                           out dx, al
32044 87BF           5A                           pop dx
32045 87C0           58                           pop ax
32046 87C1           C3                           ret
32047                       000087C2            cirrus_switch_mode_setregs:
32048                       000087C2            csms_1:
32049 87C2           8B07                         mov ax, [bx]
32050 87C4           3D                   FFFF    cmp ax, #0xffff
32051 87C7           74           06              jz csms_2
32052 87C9           EF                           out dx, ax
32053 87CA           83C3                   02    add bx, #0x2
32054 87CD           EB           F3              jmp csms_1
32055                       000087CF            csms_2:
32056 87CF           C3                           ret
32057                       000087D0            cirrus_extbios_80h:
32058 87D0           52                           push dx
32059 87D1           E8         0387              call cirrus_get_crtc
32060 87D4           B0                     27    mov al, #0x27
32061 87D6           EE                           out dx, al
32062 87D7           42                           inc dx
32063 87D8           EC                           in al, dx
32064 87D9           BB                   856D    mov bx, #_cirrus_id_table
32065                       000087DC            c80h_1:
32066 87DC                        2E             db 0x2e ;; cs:
32067 87DD           8A27                         mov ah, [bx]
32068 87DF           38C4                         cmp ah, al
32069 87E1           74           09              jz c80h_2
32070 87E3           80FC                   FF    cmp ah, #0xff
32071 87E6           74           04              jz c80h_2
32072 87E8           43                           inc bx
32073 87E9           43                           inc bx
32074 87EA           EB           F0              jmp c80h_1
32075                       000087EC            c80h_2:
32076 87EC                        2E             db 0x2e ;; cs:
32077 87ED           8A47         01              mov al, 0x1[bx]
32078 87F0           5A                           pop dx
32079 87F1           B4                     00    mov ah, #0x00
32080 87F3           31DB                         xor bx, bx
32081 87F5           C3                           ret
32082                       000087F6            cirrus_extbios_81h:
32083 87F6           B8                   0100    mov ax, #0x100 ;; XXX
32084 87F9           C3                           ret
32085                       000087FA            cirrus_extbios_82h:
32086 87FA           52                           push dx
32087 87FB           E8         035D              call cirrus_get_crtc
32088 87FE           31C0                         xor ax, ax
32089 8800           B0                     27    mov al, #0x27
32090 8802           EE                           out dx, al
32091 8803           42                           inc dx
32092 8804           EC                           in al, dx
32093 8805           24                     03    and al, #0x03
32094 8807           B4                     AF    mov ah, #0xAF
32095 8809           5A                           pop dx
32096 880A           C3                           ret
32097                       0000880B            cirrus_extbios_85h:
32098 880B           51                           push cx
32099 880C           52                           push dx
32100 880D           BA                   03C4    mov dx, #0x3C4
32101 8810           B0                     0F    mov al, #0x0f ;; get DRAM band width
32102 8812           EE                           out dx, al
32103 8813           42                           inc dx
32104 8814           EC                           in al, dx
32105                                             ;; al = 4 << bandwidth
32106 8815           88C1                         mov cl, al
32107 8817           C0E9                   03    shr cl, #0x03
32108 881A           80E1                   03    and cl, #0x03
32109 881D           80F9                   03    cmp cl, #0x03
32110 8820           74           06              je c85h2
32111 8822           B0                     04    mov al, #0x04
32112 8824           D2E0                         shl al, cl
32113 8826           EB           08              jmp c85h3
32114                       00008828            c85h2:
32115                                           ;; 4MB or 2MB
32116 8828           24                     80    and al, #0x80
32117 882A           B0                     20    mov al, #0x20 ;; 2 MB
32118 882C           74           02              je c85h3
32119 882E           B0                     40    mov al, #0x40 ;; 4 MB
32120                       00008830            c85h3:
32121 8830           5A                           pop dx
32122 8831           59                           pop cx
32123 8832           C3                           ret
32124                       00008833            cirrus_extbios_9Ah:
32125 8833           B8                   4060    mov ax, #0x4060
32126 8836           B9                   1132    mov cx, #0x1132
32127 8839           C3                           ret
32128                       0000883A            cirrus_extbios_A0h:
32129 883A           E8         0331              call cirrus_get_modeentry
32130 883D           B4                     01    mov ah, #0x01
32131 883F           80DC                   00    sbb ah, #0x00
32132 8842           8B1E       8850              mov bx, cirrus_extbios_A0h_callback
32133 8846           BE                   FFFF    mov si, #0xffff
32134 8849           89DF                         mov di, bx
32135 884B           8EDB                         mov ds, bx
32136 884D           8EC3                         mov es, bx
32137 884F           C3                           ret
32138                       00008850            cirrus_extbios_A0h_callback:
32139                                             ;; fatal: not implemented yet
32140 8850           FA                           cli
32141 8851           F4                           hlt
32142 8852           CB                           retf
32143                       00008853            cirrus_extbios_A1h:
32144 8853           BB                   0E00    mov bx, #0x0E00 ;; IBM 8512/8513, color
32145 8856           C3                           ret
32146                       00008857            cirrus_extbios_A2h:
32147 8857           B0                     07    mov al, #0x07 ;; HSync 31.5 - 64.0 kHz
32148 8859           C3                           ret
32149                       0000885A            cirrus_extbios_AEh:
32150 885A           B0                     01    mov al, #0x01 ;; High Refresh 75Hz
32151 885C           C3                           ret
32152                       0000885D            cirrus_extbios_unimplemented:
32153 885D           C3                           ret
32154                       0000885E            cirrus_vesa_00h:
32155 885E           1E                           push ds
32156 885F           56                           push si
32157 8860           89FD                         mov bp, di
32158 8862           06                           push es
32159 8863           1F                           pop ds
32160 8864           FC                           cld
32161 8865           8B05                         mov ax, [di]
32162 8867           3D                   4256    cmp ax, #0x4256 ;; VB
32163 886A           75           24              jnz cv00_1
32164 886C           8B45         02              mov ax, [di+2]
32165 886F           3D                   3245    cmp ax, #0x3245 ;; E2
32166 8872           75           1C              jnz cv00_1
32167                                             ;; VBE2
32168 8874           8D7E         14              lea di, 0x14[bp]
32169 8877           B8                   0100    mov ax, #0x0100 ;; soft ver.
32170 887A           AB                           stosw
32171 887B           B8                   8603    mov ax, # cirrus_vesa_vendorname
32172 887E           AB                           stosw
32173 887F           8CC8                         mov ax, cs
32174 8881           AB                           stosw
32175 8882           B8                   8603    mov ax, # cirrus_vesa_productname
32176 8885           AB                           stosw
32177 8886           8CC8                         mov ax, cs
32178 8888           AB                           stosw
32179 8889           B8                   861C    mov ax, # cirrus_vesa_productrevision
32180 888C           AB                           stosw
32181 888D           8CC8                         mov ax, cs
32182 888F           AB                           stosw
32183                       00008890            cv00_1:
32184 8890           89EF                         mov di, bp
32185 8892           B8                   4556    mov ax, #0x4556 ;; VE
32186 8895           AB                           stosw
32187 8896           B8                   4153    mov ax, #0x4153 ;; SA
32188 8899           AB                           stosw
32189 889A           B8                   0200    mov ax, #0x0200 ;; v2.00
32190 889D           AB                           stosw
32191 889E           B8                   8603    mov ax, # cirrus_vesa_oemname
32192 88A1           AB                           stosw
32193 88A2           8CC8                         mov ax, cs
32194 88A4           AB                           stosw
32195 88A5           31C0                         xor ax, ax ;; caps
32196 88A7           AB                           stosw
32197 88A8           AB                           stosw
32198 88A9           8D46         40              lea ax, 0x40[bp]
32199 88AC           AB                           stosw
32200 88AD           8CC0                         mov ax, es
32201 88AF           AB                           stosw
32202 88B0           E8         FF58              call cirrus_extbios_85h ;; vram in 64k
32203 88B3           B4                     00    mov ah, #0x00
32204 88B5           AB                           stosw
32205 88B6           0E                           push cs
32206 88B7           1F                           pop ds
32207 88B8           8D7E         40              lea di, 0x40[bp]
32208 88BB           BE                   8573    mov si, #_cirrus_vesa_modelist
32209                       000088BE            cv00_2:
32210 88BE           AD                           lodsw
32211 88BF           AB                           stosw
32212 88C0           83C6                   02    add si, #2
32213 88C3           3D                   FFFF    cmp ax, #0xffff
32214 88C6           75           F6              jnz cv00_2
32215 88C8           B8                   004F    mov ax, #0x004F
32216 88CB           89EF                         mov di, bp
32217 88CD           5E                           pop si
32218 88CE           1F                           pop ds
32219 88CF           C3                           ret
32220                       000088D0            cirrus_vesa_01h:
32221 88D0           89C8                         mov ax, cx
32222 88D2           25                   3FFF    and ax, #0x3fff
32223 88D5           E8         0264              call cirrus_vesamode_to_mode
32224 88D8           3D                   FFFF    cmp ax, #0xffff
32225 88DB           75           03              jnz cirrus_vesa_01h_1
32226 88DD           E9         0258              jmp cirrus_vesa_unimplemented
32227                       000088E0            cirrus_vesa_01h_1:
32228 88E0           1E                           push ds
32229 88E1           56                           push si
32230 88E2           51                           push cx
32231 88E3           52                           push dx
32232 88E4           53                           push bx
32233 88E5           89FD                         mov bp, di
32234 88E7           FC                           cld
32235 88E8           0E                           push cs
32236 88E9           1F                           pop ds
32237 88EA           E8         0283              call cirrus_get_modeentry_nomask
32238 88ED           57                           push di
32239 88EE           31C0                         xor ax, ax
32240 88F0           B9                   0080    mov cx, #0x80
32241 88F3           F3                           rep
32242 88F4           AB                             stosw ;; clear buffer
32243 88F5           5F                           pop di
32244 88F6           B8                   003B    mov ax, #0x003b ;; mode
32245 88F9           AB                           stosw
32246 88FA           B8                   0007    mov ax, #0x0007 ;; attr
32247 88FD           AB                           stosw
32248 88FE           B8                   0010    mov ax, #0x0010 ;; granularity =16K
32249 8901           AB                           stosw
32250 8902           B8                   0040    mov ax, #0x0040 ;; size =64K
32251 8905           AB                           stosw
32252 8906           B8                   A000    mov ax, #0xA000 ;; segment A
32253 8909           AB                           stosw
32254 890A           31C0                         xor ax, ax ;; no segment B
32255 890C           AB                           stosw
32256 890D           B8                   8A17    mov ax, #cirrus_vesa_05h_farentry
32257 8910           AB                           stosw
32258 8911           8CC8                         mov ax, cs
32259 8913           AB                           stosw
32260 8914           E8         02CD              call cirrus_get_line_offset_entry
32261 8917           AB                           stosw ;; bytes per scan line
32262 8918           8B44         02              mov ax, [si+2] ;; width
32263 891B           AB                           stosw
32264 891C           8B44         04              mov ax, [si+4] ;; height
32265 891F           AB                           stosw
32266 8920           B8                   0008    mov ax, #0x08
32267 8923           AA                           stosb
32268 8924           B8                   0010    mov ax, #0x10
32269 8927           AA                           stosb
32270 8928           B0                     01    mov al, #1 ;; count of planes
32271 892A           AA                           stosb
32272 892B           8A44         06              mov al, [si+6] ;; bpp
32273 892E           AA                           stosb
32274 892F           B0                     01    mov al, #0x1 ;; XXX number of banks
32275 8931           AA                           stosb
32276 8932           8A44         11              mov al, [si+17]
32277 8935           AA                           stosb ;; memory model
32278 8936           B0                     00    mov al, #0x0 ;; XXX size of bank in K
32279 8938           AA                           stosb
32280 8939           E8         02A8              call cirrus_get_line_offset_entry
32281 893C           8B5C         04              mov bx, [si+4]
32282 893F           F7E3                         mul bx ;; dx:ax=vramdisp
32283 8941           09C0                         or ax, ax
32284 8943           74           01              jz cirrus_vesa_01h_3
32285 8945           42                           inc dx
32286                       00008946            cirrus_vesa_01h_3:
32287 8946           E8         FEC2              call cirrus_extbios_85h ;; al=vram in 64k
32288 8949           B4                     00    mov ah, #0x00
32289 894B           89D1                         mov cx, dx
32290 894D           31D2                         xor dx, dx
32291 894F           F7F1                         div cx
32292 8951           48                           dec ax
32293 8952           AA                           stosb ;; number of image pages = vramtotal/vramdisp-1
32294 8953           B0                     00    mov al, #0x00
32295 8955           AA                           stosb
32296                                             ;; v1.2+ stuffs
32297 8956           56                           push si
32298 8957           83C6                   12    add si, #18
32299 895A           A5                           movsw
32300 895B           A5                           movsw
32301 895C           A5                           movsw
32302 895D           A5                           movsw
32303 895E           5E                           pop si
32304 895F           8A64         10              mov ah, [si+16]
32305 8962           B0                     00    mov al, #0x0
32306 8964           80EC                   09    sub ah, #9
32307 8967           D0D0                         rcl al, #1 ; bit 0=palette flag
32308 8969           AA                           stosb ;; direct screen mode info
32309                                             ;; v2.0+ stuffs
32310                                             ;; 32-bit LFB address
32311 896A           31C0                         xor ax, ax
32312 896C           AB                           stosw
32313 896D           B8                   1013    mov ax, #0x1013 ;; vendor Cirrus
32314 8970           E8         F5A4              call _pci_get_lfb_addr
32315 8973           AB                           stosw
32316 8974           09C0                         or ax, ax
32317 8976           74           0B              jz cirrus_vesa_01h_4
32318 8978           57                           push di
32319 8979           89EF                         mov di, bp
32320 897B                        26             db 0x26 ;; es:
32321 897C           8B05                         mov ax, [di]
32322 897E           0D                   0080    or ax, #0x0080 ;; mode bit 7:LFB
32323 8981           AB                           stosw
32324 8982           5F                           pop di
32325                       00008983            cirrus_vesa_01h_4:
32326 8983           31C0                         xor ax, ax
32327 8985           AB                           stosw ; reserved
32328 8986           AB                           stosw ; reserved
32329 8987           AB                           stosw ; reserved
32330 8988           B8                   004F    mov ax, #0x004F
32331 898B           89EF                         mov di, bp
32332 898D           5B                           pop bx
32333 898E           5A                           pop dx
32334 898F           59                           pop cx
32335 8990           5E                           pop si
32336 8991           1F                           pop ds
32337 8992           F7C1                 4000    test cx, #0x4000 ;; LFB flag
32338 8996           74           0E              jz cirrus_vesa_01h_5
32339 8998           51                           push cx
32340 8999                        26             db 0x26 ;; es:
32341 899A           8B0D                         mov cx, [di]
32342 899C           81F9                 0080    cmp cx, #0x0080 ;; is LFB supported?
32343 89A0           75           03              jnz cirrus_vesa_01h_6
32344 89A2           B8                   014F    mov ax, #0x014F ;; error - no LFB
32345                       000089A5            cirrus_vesa_01h_6:
32346 89A5           59                           pop cx
32347                       000089A6            cirrus_vesa_01h_5:
32348 89A6           C3                           ret
32349                       000089A7            cirrus_vesa_02h:
32350                                             ;; XXX support CRTC registers
32351 89A7           F7C3                 3E00    test bx, #0x3e00
32352 89AB           75           12              jnz cirrus_vesa_02h_2 ;; unknown flags
32353 89AD           89D8                         mov ax, bx
32354 89AF           25                   01FF    and ax, #0x1ff ;; bit 8-0 mode
32355 89B2           3D                   0100    cmp ax, #0x100 ;; legacy VGA mode
32356 89B5           72           0B              jb cirrus_vesa_02h_legacy
32357 89B7           E8         0182              call cirrus_vesamode_to_mode
32358 89BA           3D                   FFFF    cmp ax, #0xffff
32359 89BD           75           09              jnz cirrus_vesa_02h_1
32360                       000089BF            cirrus_vesa_02h_2:
32361 89BF           E9         0176              jmp cirrus_vesa_unimplemented
32362                       000089C2            cirrus_vesa_02h_legacy:
32363 89C2           CD                     10    int #0x10
32364 89C4           B8                   004F    mov ax, #0x004F
32365 89C7           C3                           ret
32366                       000089C8            cirrus_vesa_02h_1:
32367 89C8           56                           push si
32368 89C9           50                           push ax
32369 89CA           E8         01A3              call cirrus_get_modeentry_nomask
32370 89CD           E8         FD79              call cirrus_switch_mode
32371 89D0           F7C3                 4000    test bx, #0x4000 ;; LFB
32372 89D4           75           03              jnz cirrus_vesa_02h_3
32373 89D6           E8         FDD9              call cirrus_enable_16k_granularity
32374                       000089D9            cirrus_vesa_02h_3:
32375 89D9           F7C3                 8000    test bx, #0x8000 ;; no clear
32376 89DD           75           07              jnz cirrus_vesa_02h_4
32377 89DF           50                           push ax
32378 89E0           31C0                         xor ax,ax
32379 89E2           E8         02A1              call cirrus_clear_vram
32380 89E5           58                           pop ax
32381                       000089E6            cirrus_vesa_02h_4:
32382 89E6           58                           pop ax
32383 89E7           1E                           push ds
32384 89E8           31F6                         xor si, si
32385 89EA           8EDE                         mov ds, si
32386 89EC           A2         0449              mov [0x449], al
32387 89EF           891E       04BA              mov [0x4BA], bx
32388 89F3           1F                           pop ds
32389 89F4           5E                           pop si
32390 89F5           B8                   004F    mov ax, #0x004F
32391 89F8           C3                           ret
32392                       000089F9            cirrus_vesa_03h:
32393 89F9           1E                           push ds
32394 89FA           31C0                         xor ax, ax
32395 89FC           8ED8                         mov ds, ax
32396 89FE           BB                   04BA    mov bx, # 0x4BA
32397 8A01           8B07                         mov ax, [bx]
32398 8A03           89C3                         mov bx, ax
32399 8A05           85DB                         test bx, bx
32400 8A07           75           09              jnz cirrus_vesa_03h_1
32401 8A09           BB                   0449    mov bx, # 0x449
32402 8A0C           8A07                         mov al, [bx]
32403 8A0E           88C3                         mov bl, al
32404 8A10           30FF                         xor bh, bh
32405                       00008A12            cirrus_vesa_03h_1:
32406 8A12           B8                   004F    mov ax, #0x004f
32407 8A15           1F                           pop ds
32408 8A16           C3                           ret
32409                       00008A17            cirrus_vesa_05h_farentry:
32410 8A17           E8         0001              call cirrus_vesa_05h
32411 8A1A           CB                           retf
32412                       00008A1B            cirrus_vesa_05h:
32413 8A1B           80FB                   01    cmp bl, #0x01
32414 8A1E           77           0A              ja cirrus_vesa_05h_1
32415 8A20           80FF                   00    cmp bh, #0x00
32416 8A23           74           08              jz cirrus_vesa_05h_setmempage
32417 8A25           80FF                   01    cmp bh, #0x01
32418 8A28           74           17              jz cirrus_vesa_05h_getmempage
32419                       00008A2A            cirrus_vesa_05h_1:
32420 8A2A           E9         010B              jmp cirrus_vesa_unimplemented
32421                       00008A2D            cirrus_vesa_05h_setmempage:
32422 8A2D           08F6                         or dh, dh ; address must be < 0x100
32423 8A2F           75           F9              jnz cirrus_vesa_05h_1
32424 8A31           52                           push dx
32425 8A32           88D8                         mov al, bl ;; bl=bank number
32426 8A34           04                     09    add al, #0x09
32427 8A36           88D4                         mov ah, dl ;; dx=window address in granularity
32428 8A38           BA                   03CE    mov dx, #0x3ce
32429 8A3B           EF                           out dx, ax
32430 8A3C           5A                           pop dx
32431 8A3D           B8                   004F    mov ax, #0x004F
32432 8A40           C3                           ret
32433                       00008A41            cirrus_vesa_05h_getmempage:
32434 8A41           88D8                         mov al, bl ;; bl=bank number
32435 8A43           04                     09    add al, #0x09
32436 8A45           BA                   03CE    mov dx, #0x3ce
32437 8A48           EE                           out dx, al
32438 8A49           42                           inc dx
32439 8A4A           EC                           in al, dx
32440 8A4B           31D2                         xor dx, dx
32441 8A4D           88C2                         mov dl, al ;; dx=window address in granularity
32442 8A4F           B8                   004F    mov ax, #0x004F
32443 8A52           C3                           ret
32444                       00008A53            cirrus_vesa_06h:
32445 8A53           89C8                         mov ax, cx
32446 8A55           80FB                   01    cmp bl, #0x01
32447 8A58           74           19              je cirrus_vesa_06h_3
32448 8A5A           80FB                   02    cmp bl, #0x02
32449 8A5D           74           11              je cirrus_vesa_06h_2
32450 8A5F           72           04              jb cirrus_vesa_06h_1
32451 8A61           B8                   0100    mov ax, #0x0100
32452 8A64           C3                           ret
32453                       00008A65            cirrus_vesa_06h_1:
32454 8A65           E8         0123              call cirrus_get_bpp_bytes
32455 8A68           88C3                         mov bl, al
32456 8A6A           30FF                         xor bh, bh
32457 8A6C           89C8                         mov ax, cx
32458 8A6E           F7E3                         mul bx
32459                       00008A70            cirrus_vesa_06h_2:
32460 8A70           E8         0133              call cirrus_set_line_offset
32461                       00008A73            cirrus_vesa_06h_3:
32462 8A73           E8         0115              call cirrus_get_bpp_bytes
32463 8A76           88C3                         mov bl, al
32464 8A78           30FF                         xor bh, bh
32465 8A7A           31D2                         xor dx, dx
32466 8A7C           E8         0143              call cirrus_get_line_offset
32467 8A7F           50                           push ax
32468 8A80           F7F3                         div bx
32469 8A82           89C1                         mov cx, ax
32470 8A84           5B                           pop bx
32471 8A85           E8         FD83              call cirrus_extbios_85h ;; al=vram in 64k
32472 8A88           31D2                         xor dx, dx
32473 8A8A           88C2                         mov dl, al
32474 8A8C           31C0                         xor ax, ax
32475 8A8E           F7F3                         div bx
32476 8A90           89C2                         mov dx, ax
32477 8A92           B8                   004F    mov ax, #0x004f
32478 8A95           C3                           ret
32479                       00008A96            cirrus_vesa_07h:
32480 8A96           80FB                   80    cmp bl, #0x80
32481 8A99           74           0B              je cirrus_vesa_07h_1
32482 8A9B           80FB                   01    cmp bl, #0x01
32483 8A9E           74           33              je cirrus_vesa_07h_2
32484 8AA0           72           04              jb cirrus_vesa_07h_1
32485 8AA2           B8                   0100    mov ax, #0x0100
32486 8AA5           C3                           ret
32487                       00008AA6            cirrus_vesa_07h_1:
32488 8AA6           52                           push dx
32489 8AA7           E8         00E1              call cirrus_get_bpp_bytes
32490 8AAA           88C3                         mov bl, al
32491 8AAC           30FF                         xor bh, bh
32492 8AAE           89C8                         mov ax, cx
32493 8AB0           F7E3                         mul bx
32494 8AB2           5B                           pop bx
32495 8AB3           50                           push ax
32496 8AB4           E8         010B              call cirrus_get_line_offset
32497 8AB7           F7E3                         mul bx
32498 8AB9           5B                           pop bx
32499 8ABA           01D8                         add ax, bx
32500 8ABC           73           01              jnc cirrus_vesa_07h_3
32501 8ABE           42                           inc dx
32502                       00008ABF            cirrus_vesa_07h_3:
32503 8ABF           52                           push dx
32504 8AC0           83E2                   03    and dx, #0x0003
32505 8AC3           BB                   0004    mov bx, #0x04
32506 8AC6           F7F3                         div bx
32507 8AC8           5A                           pop dx
32508 8AC9           C1EA                   02    shr dx, #2
32509 8ACC           E8         013F              call cirrus_set_start_addr
32510 8ACF           B8                   004F    mov ax, #0x004f
32511 8AD2           C3                           ret
32512                       00008AD3            cirrus_vesa_07h_2:
32513 8AD3           E8         0179              call cirrus_get_start_addr
32514 8AD6           C1E2                   02    shl dx, #2
32515 8AD9           52                           push dx
32516 8ADA           BB                   0004    mov bx, #0x04
32517 8ADD           F7E3                         mul bx
32518 8ADF           5B                           pop bx
32519 8AE0           09DA                         or dx, bx
32520 8AE2           50                           push ax
32521 8AE3           E8         00DC              call cirrus_get_line_offset
32522 8AE6           89C3                         mov bx, ax
32523 8AE8           58                           pop ax
32524 8AE9           F7F3                         div bx
32525 8AEB           50                           push ax
32526 8AEC           52                           push dx
32527 8AED           E8         009B              call cirrus_get_bpp_bytes
32528 8AF0           88C3                         mov bl, al
32529 8AF2           30FF                         xor bh, bh
32530 8AF4           58                           pop ax
32531 8AF5           31D2                         xor dx, dx
32532 8AF7           F7F3                         div bx
32533 8AF9           89C1                         mov cx, ax
32534 8AFB           5A                           pop dx
32535 8AFC           B8                   004F    mov ax, #0x004f
32536 8AFF           C3                           ret
32537                       00008B00            cirrus_vesa_10h:
32538 8B00           80FB                   00    cmp bl, #0x00
32539 8B03           75           07              jne cirrus_vesa_10h_01
32540 8B05           BB                   0F30    mov bx, #0x0f30
32541 8B08           B8                   004F    mov ax, #0x004f
32542 8B0B           C3                           ret
32543                       00008B0C            cirrus_vesa_10h_01:
32544 8B0C           80FB                   01    cmp bl, #0x01
32545 8B0F           75           11              jne cirrus_vesa_10h_02
32546 8B11           52                           push dx
32547 8B12           1E                           push ds
32548 8B13           BA                   0040    mov dx, #0x40
32549 8B16           8EDA                         mov ds, dx
32550 8B18           883E       00B9              mov [0xb9], bh
32551 8B1C           1F                           pop ds
32552 8B1D           5A                           pop dx
32553 8B1E           B8                   004F    mov ax, #0x004f
32554 8B21           C3                           ret
32555                       00008B22            cirrus_vesa_10h_02:
32556 8B22           80FB                   02    cmp bl, #0x02
32557 8B25           75           11              jne cirrus_vesa_unimplemented
32558 8B27           52                           push dx
32559 8B28           1E                           push ds
32560 8B29           BA                   0040    mov dx, #0x40
32561 8B2C           8EDA                         mov ds, dx
32562 8B2E           8A3E       00B9              mov bh, [0xb9]
32563 8B32           1F                           pop ds
32564 8B33           5A                           pop dx
32565 8B34           B8                   004F    mov ax, #0x004f
32566 8B37           C3                           ret
32567                       00008B38            cirrus_vesa_unimplemented:
32568 8B38           B8                   014F    mov ax, #0x014F ;; not implemented
32569 8B3B           C3                           ret
32570                                           ;; in ax:vesamode, out ax:cirrusmode
32571                       00008B3C            cirrus_vesamode_to_mode:
32572 8B3C           1E                           push ds
32573 8B3D           51                           push cx
32574 8B3E           56                           push si
32575 8B3F           0E                           push cs
32576 8B40           1F                           pop ds
32577 8B41           B9                   FFFF    mov cx, #0xffff
32578 8B44           BE                   8573    mov si, #_cirrus_vesa_modelist
32579                       00008B47            cvtm_1:
32580 8B47           3904                         cmp [si],ax
32581 8B49           74           09              jz cvtm_2
32582 8B4B           390C                         cmp [si],cx
32583 8B4D           74           05              jz cvtm_2
32584 8B4F           83C6                   04    add si, #4
32585 8B52           EB           F3              jmp cvtm_1
32586                       00008B54            cvtm_2:
32587 8B54           8B44         02              mov ax,[si+2]
32588 8B57           5E                           pop si
32589 8B58           59                           pop cx
32590 8B59           1F                           pop ds
32591 8B5A           C3                           ret
32592                                             ; cirrus_get_crtc
32593                                             ;; NOTE - may be called in protected mode
32594                       00008B5B            cirrus_get_crtc:
32595 8B5B           1E                           push ds
32596 8B5C           50                           push ax
32597 8B5D           BA                   03CC    mov dx, #0x3cc
32598 8B60           EC                           in al, dx
32599 8B61           24                     01    and al, #0x01
32600 8B63           C0E0                   05    shl al, #5
32601 8B66           BA                   03B4    mov dx, #0x3b4
32602 8B69           00C2                         add dl, al
32603 8B6B           58                           pop ax
32604 8B6C           1F                           pop ds
32605 8B6D           C3                           ret
32606                                           ;; in - al:mode, out - cflag:result, si:table, ax:destroyed
32607                       00008B6E            cirrus_get_modeentry:
32608 8B6E           24                     7F    and al, #0x7f
32609                       00008B70            cirrus_get_modeentry_nomask:
32610 8B70           BE                   8399    mov si, #_cirrus_modes
32611                       00008B73            cgm_1:
32612 8B73                        2E             db 0x2e ;; cs:
32613 8B74           8A24                         mov ah, [si]
32614 8B76           38E0                         cmp al, ah
32615 8B78           74           0F              jz cgm_2
32616 8B7A           80FC                   FF    cmp ah, #0xff
32617 8B7D           74           05              jz cgm_4
32618 8B7F           83C6                   1A    add si, # 26
32619 8B82           EB           EF              jmp cgm_1
32620                       00008B84            cgm_4:
32621 8B84           31F6                         xor si, si
32622 8B86           F9                           stc ;; video mode is not supported
32623 8B87           EB           01              jmp cgm_3
32624                       00008B89            cgm_2:
32625 8B89           F8                           clc ;; video mode is supported
32626                       00008B8A            cgm_3:
32627 8B8A           C3                           ret
32628                                           ;; out - al:bytes per pixel
32629                       00008B8B            cirrus_get_bpp_bytes:
32630 8B8B           52                           push dx
32631 8B8C           BA                   03C4    mov dx, #0x03c4
32632 8B8F           B0                     07    mov al, #0x07
32633 8B91           EE                           out dx, al
32634 8B92           42                           inc dx
32635 8B93           EC                           in al, dx
32636 8B94           24                     0E    and al, #0x0e
32637 8B96           3C                     06    cmp al, #0x06
32638 8B98           75           02              jne cirrus_get_bpp_bytes_1
32639 8B9A           24                     02    and al, #0x02
32640                       00008B9C            cirrus_get_bpp_bytes_1:
32641 8B9C           D0E8                         shr al, #1
32642 8B9E           3C                     04    cmp al, #0x04
32643 8BA0           74           02              je cirrus_get_bpp_bytes_2
32644 8BA2           FEC0                         inc al
32645                       00008BA4            cirrus_get_bpp_bytes_2:
32646 8BA4           5A                           pop dx
32647 8BA5           C3                           ret
32648                                           ;; in - ax: new line offset
32649                       00008BA6            cirrus_set_line_offset:
32650 8BA6           C1E8                   03    shr ax, #3
32651 8BA9           50                           push ax
32652 8BAA           E8         FFAE              call cirrus_get_crtc
32653 8BAD           B0                     13    mov al, #0x13
32654 8BAF           EE                           out dx, al
32655 8BB0           42                           inc dx
32656 8BB1           58                           pop ax
32657 8BB2           EE                           out dx, al
32658 8BB3           4A                           dec dx
32659 8BB4           B0                     1B    mov al, #0x1b
32660 8BB6           EE                           out dx, al
32661 8BB7           42                           inc dx
32662 8BB8           C0E4                   04    shl ah, #4
32663 8BBB           EC                           in al, dx
32664 8BBC           24                     00>   and al, #ef
32665 8BBE           08E0                         or al, ah
32666 8BC0           EE                           out dx, al
32667 8BC1           C3                           ret
32668                                           ;; out - ax: active line offset
32669                       00008BC2            cirrus_get_line_offset:
32670 8BC2           52                           push dx
32671 8BC3           53                           push bx
32672 8BC4           E8         FF94              call cirrus_get_crtc
32673 8BC7           B0                     13    mov al, #0x13
32674 8BC9           EE                           out dx, al
32675 8BCA           42                           inc dx
32676 8BCB           EC                           in al, dx
32677 8BCC           88C3                         mov bl, al
32678 8BCE           4A                           dec dx
32679 8BCF           B0                     1B    mov al, #0x1b
32680 8BD1           EE                           out dx, al
32681 8BD2           42                           inc dx
32682 8BD3           EC                           in al, dx
32683 8BD4           88C4                         mov ah, al
32684 8BD6           C0EC                   04    shr ah, #4
32685 8BD9           80E4                   01    and ah, #0x01
32686 8BDC           88D8                         mov al, bl
32687 8BDE           C1E0                   03    shl ax, #3
32688 8BE1           5B                           pop bx
32689 8BE2           5A                           pop dx
32690 8BE3           C3                           ret
32691                                           ;; in - si: table
32692                                           ;; out - ax: line offset for mode
32693                       00008BE4            cirrus_get_line_offset_entry:
32694 8BE4           53                           push bx
32695 8BE5           8B5C         0E              mov bx, [si+14] ;; crtc table
32696 8BE8           53                           push bx
32697                       00008BE9            offset_loop1:
32698 8BE9           8B07                         mov ax, [bx]
32699 8BEB           3C                     13    cmp al, #0x13
32700 8BED           74           04              je offset_found1
32701 8BEF           43                           inc bx
32702 8BF0           43                           inc bx
32703 8BF1           75           F6              jnz offset_loop1
32704                       00008BF3            offset_found1:
32705 8BF3           30C0                         xor al, al
32706 8BF5           C1E8                   05    shr ax, #5
32707 8BF8           5B                           pop bx
32708 8BF9           50                           push ax
32709                       00008BFA            offset_loop2:
32710 8BFA           8B07                         mov ax, [bx]
32711 8BFC           3C                     1B    cmp al, #0x1b
32712 8BFE           74           04              je offset_found2
32713 8C00           43                           inc bx
32714 8C01           43                           inc bx
32715 8C02           75           F6              jnz offset_loop2
32716                       00008C04            offset_found2:
32717 8C04           5B                           pop bx
32718 8C05           25                   1000    and ax, #0x1000
32719 8C08           D1E8                         shr ax, #1
32720 8C0A           09D8                         or ax, bx
32721 8C0C           5B                           pop bx
32722 8C0D           C3                           ret
32723                                           ;; in - new address in DX:AX
32724                       00008C0E            cirrus_set_start_addr:
32725 8C0E           53                           push bx
32726 8C0F           52                           push dx
32727 8C10           50                           push ax
32728 8C11           E8         FF47              call cirrus_get_crtc
32729 8C14           B0                     0D    mov al, #0x0d
32730 8C16           EE                           out dx, al
32731 8C17           42                           inc dx
32732 8C18           58                           pop ax
32733 8C19           EE                           out dx, al
32734 8C1A           4A                           dec dx
32735 8C1B           B0                     0C    mov al, #0x0c
32736 8C1D           EE                           out dx, al
32737 8C1E           42                           inc dx
32738 8C1F           88E0                         mov al, ah
32739 8C21           EE                           out dx, al
32740 8C22           4A                           dec dx
32741 8C23           B0                     1D    mov al, #0x1d
32742 8C25           EE                           out dx, al
32743 8C26           42                           inc dx
32744 8C27           EC                           in al, dx
32745 8C28           24                     7F    and al, #0x7f
32746 8C2A           5B                           pop bx
32747 8C2B           88DC                         mov ah, bl
32748 8C2D           C0E3                   04    shl bl, #4
32749 8C30           80E3                   80    and bl, #0x80
32750 8C33           08D8                         or al, bl
32751 8C35           EE                           out dx, al
32752 8C36           4A                           dec dx
32753 8C37           88E3                         mov bl, ah
32754 8C39           80E4                   01    and ah, #0x01
32755 8C3C           D0E3                         shl bl, #1
32756 8C3E           80E3                   0C    and bl, #0x0c
32757 8C41           08DC                         or ah, bl
32758 8C43           B0                     1B    mov al, #0x1b
32759 8C45           EE                           out dx, al
32760 8C46           42                           inc dx
32761 8C47           EC                           in al, dx
32762 8C48           24                     F2    and al, #0xf2
32763 8C4A           08E0                         or al, ah
32764 8C4C           EE                           out dx, al
32765 8C4D           5B                           pop bx
32766 8C4E           C3                           ret
32767                                           ;; out - current address in DX:AX
32768                       00008C4F            cirrus_get_start_addr:
32769 8C4F           53                           push bx
32770 8C50           E8         FF08              call cirrus_get_crtc
32771 8C53           B0                     0C    mov al, #0x0c
32772 8C55           EE                           out dx, al
32773 8C56           42                           inc dx
32774 8C57           EC                           in al, dx
32775 8C58           88C4                         mov ah, al
32776 8C5A           4A                           dec dx
32777 8C5B           B0                     0D    mov al, #0x0d
32778 8C5D           EE                           out dx, al
32779 8C5E           42                           inc dx
32780 8C5F           EC                           in al, dx
32781 8C60           50                           push ax
32782 8C61           4A                           dec dx
32783 8C62           B0                     1B    mov al, #0x1b
32784 8C64           EE                           out dx, al
32785 8C65           42                           inc dx
32786 8C66           EC                           in al, dx
32787 8C67           4A                           dec dx
32788 8C68           88C3                         mov bl, al
32789 8C6A           24                     01    and al, #0x01
32790 8C6C           80E3                   0C    and bl, #0x0c
32791 8C6F           D0EB                         shr bl, #1
32792 8C71           08C3                         or bl, al
32793 8C73           B0                     1D    mov al, #0x1d
32794 8C75           EE                           out dx, al
32795 8C76           42                           inc dx
32796 8C77           EC                           in al, dx
32797 8C78           24                     80    and al, #0x80
32798 8C7A           C0E8                   04    shr al, #4
32799 8C7D           08C3                         or bl, al
32800 8C7F           88DA                         mov dl, bl
32801 8C81           30F6                         xor dh, dh
32802 8C83           58                           pop ax
32803 8C84           5B                           pop bx
32804 8C85           C3                           ret
32805                       00008C86            cirrus_clear_vram:
32806 8C86           60                           pusha
32807 8C87           06                           push es
32808 8C88           89C6                         mov si, ax
32809 8C8A           E8         FB25              call cirrus_enable_16k_granularity
32810 8C8D           E8         FB7B              call cirrus_extbios_85h
32811 8C90           C0E0                   02    shl al, #2
32812 8C93           88C3                         mov bl, al
32813 8C95           30E4                         xor ah,ah
32814                       00008C97            cirrus_clear_vram_1:
32815 8C97           B0                     09    mov al, #0x09
32816 8C99           BA                   03CE    mov dx, #0x3ce
32817 8C9C           EF                           out dx, ax
32818 8C9D           50                           push ax
32819 8C9E           B9                   A000    mov cx, #0xa000
32820 8CA1           8EC1                         mov es, cx
32821 8CA3           31FF                         xor di, di
32822 8CA5           89F0                         mov ax, si
32823 8CA7           B9                   2000    mov cx, #8192
32824 8CAA           FC                           cld
32825 8CAB           F3                           rep
32826 8CAC           AB                               stosw
32827 8CAD           58                           pop ax
32828 8CAE           FEC4                         inc ah
32829 8CB0           38DC                         cmp ah, bl
32830 8CB2           75           E3              jne cirrus_clear_vram_1
32831 8CB4           30E4                         xor ah,ah
32832 8CB6           BA                   03CE    mov dx, #0x3ce
32833 8CB9           EF                           out dx, ax
32834 8CBA           07                           pop es
32835 8CBB           61                           popa
32836 8CBC           C3                           ret
32837                       00008CBD            cirrus_extbios_handlers:
32838                                             ;; 80h
32839 8CBD                      87D0              dw cirrus_extbios_80h
32840 8CBF                      87F6              dw cirrus_extbios_81h
32841 8CC1                      87FA              dw cirrus_extbios_82h
32842 8CC3                      885D              dw cirrus_extbios_unimplemented
32843                                             ;; 84h
32844 8CC5                      885D              dw cirrus_extbios_unimplemented
32845 8CC7                      880B              dw cirrus_extbios_85h
32846 8CC9                      885D              dw cirrus_extbios_unimplemented
32847 8CCB                      885D              dw cirrus_extbios_unimplemented
32848                                             ;; 88h
32849 8CCD                      885D              dw cirrus_extbios_unimplemented
32850 8CCF                      885D              dw cirrus_extbios_unimplemented
32851 8CD1                      885D              dw cirrus_extbios_unimplemented
32852 8CD3                      885D              dw cirrus_extbios_unimplemented
32853                                             ;; 8Ch
32854 8CD5                      885D              dw cirrus_extbios_unimplemented
32855 8CD7                      885D              dw cirrus_extbios_unimplemented
32856 8CD9                      885D              dw cirrus_extbios_unimplemented
32857 8CDB                      885D              dw cirrus_extbios_unimplemented
32858                                             ;; 90h
32859 8CDD                      885D              dw cirrus_extbios_unimplemented
32860 8CDF                      885D              dw cirrus_extbios_unimplemented
32861 8CE1                      885D              dw cirrus_extbios_unimplemented
32862 8CE3                      885D              dw cirrus_extbios_unimplemented
32863                                             ;; 94h
32864 8CE5                      885D              dw cirrus_extbios_unimplemented
32865 8CE7                      885D              dw cirrus_extbios_unimplemented
32866 8CE9                      885D              dw cirrus_extbios_unimplemented
32867 8CEB                      885D              dw cirrus_extbios_unimplemented
32868                                             ;; 98h
32869 8CED                      885D              dw cirrus_extbios_unimplemented
32870 8CEF                      885D              dw cirrus_extbios_unimplemented
32871 8CF1                      8833              dw cirrus_extbios_9Ah
32872 8CF3                      885D              dw cirrus_extbios_unimplemented
32873                                             ;; 9Ch
32874 8CF5                      885D              dw cirrus_extbios_unimplemented
32875 8CF7                      885D              dw cirrus_extbios_unimplemented
32876 8CF9                      885D              dw cirrus_extbios_unimplemented
32877 8CFB                      885D              dw cirrus_extbios_unimplemented
32878                                             ;; A0h
32879 8CFD                      883A              dw cirrus_extbios_A0h
32880 8CFF                      8853              dw cirrus_extbios_A1h
32881 8D01                      8857              dw cirrus_extbios_A2h
32882 8D03                      885D              dw cirrus_extbios_unimplemented
32883                                             ;; A4h
32884 8D05                      885D              dw cirrus_extbios_unimplemented
32885 8D07                      885D              dw cirrus_extbios_unimplemented
32886 8D09                      885D              dw cirrus_extbios_unimplemented
32887 8D0B                      885D              dw cirrus_extbios_unimplemented
32888                                             ;; A8h
32889 8D0D                      885D              dw cirrus_extbios_unimplemented
32890 8D0F                      885D              dw cirrus_extbios_unimplemented
32891 8D11                      885D              dw cirrus_extbios_unimplemented
32892 8D13                      885D              dw cirrus_extbios_unimplemented
32893                                             ;; ACh
32894 8D15                      885D              dw cirrus_extbios_unimplemented
32895 8D17                      885D              dw cirrus_extbios_unimplemented
32896 8D19                      885A              dw cirrus_extbios_AEh
32897 8D1B                      885D              dw cirrus_extbios_unimplemented
32898                       00008D1D            cirrus_vesa_handlers:
32899                                             ;; 00h
32900 8D1D                      885E              dw cirrus_vesa_00h
32901 8D1F                      88D0              dw cirrus_vesa_01h
32902 8D21                      89A7              dw cirrus_vesa_02h
32903 8D23                      89F9              dw cirrus_vesa_03h
32904                                             ;; 04h
32905 8D25                      8B38              dw cirrus_vesa_unimplemented
32906 8D27                      8A1B              dw cirrus_vesa_05h
32907 8D29                      8A53              dw cirrus_vesa_06h
32908 8D2B                      8A96              dw cirrus_vesa_07h
32909                                             ;; 08h
32910 8D2D                      8B38              dw cirrus_vesa_unimplemented
32911 8D2F                      8B38              dw cirrus_vesa_unimplemented
32912 8D31                      8B38              dw cirrus_vesa_unimplemented
32913 8D33                      8B38              dw cirrus_vesa_unimplemented
32914                                             ;; 0Ch
32915 8D35                      8B38              dw cirrus_vesa_unimplemented
32916 8D37                      8B38              dw cirrus_vesa_unimplemented
32917 8D39                      8B38              dw cirrus_vesa_unimplemented
32918 8D3B                      8B38              dw cirrus_vesa_unimplemented
32919                                             ;; 10h
32920 8D3D                      8B00              dw cirrus_vesa_10h
32921                                           ! 5748 endasm
32922                                           !BCC_ENDASM
32923                                           ! 5749 static void cirrus_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
32924                                           ! 5750   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
32925                                           
32926                       00008D3F            _cirrus_debugmsg:
32927                                           !BCC_EOS
32928                                           ! 5751 {
32929                                           ! 5752  if((( AX >> 8 )!=0x0E)&&(( AX >> 8 )!=0x02)&&(( AX >> 8 )!=0x09)&&(AX!=0x4F05))
32930 8D3F           55                         push	bp
32931 8D40           89E5                       mov	bp,sp
32932                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32933 8D42           8B46         12            mov	ax,$12[bp]
32934 8D45           88E0                       mov	al,ah
32935 8D47           30E4                       xor	ah,ah
32936                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
32937 8D49           3D                   000E  cmp	ax,*$E
32938 8D4C           74           40            je  	.2C3
32939                       00008D4E            .2C7:
32940                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32941 8D4E           8B46         12            mov	ax,$12[bp]
32942 8D51           88E0                       mov	al,ah
32943 8D53           30E4                       xor	ah,ah
32944                                           ! Debug: ne int = const 2 to unsigned int = ax+0 (used reg = )
32945 8D55           3D                   0002  cmp	ax,*2
32946 8D58           74           34            je  	.2C3
32947                       00008D5A            .2C6:
32948                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
32949 8D5A           8B46         12            mov	ax,$12[bp]
32950 8D5D           88E0                       mov	al,ah
32951 8D5F           30E4                       xor	ah,ah
32952                                           ! Debug: ne int = const 9 to unsigned int = ax+0 (used reg = )
32953 8D61           3D                   0009  cmp	ax,*9
32954 8D64           74           28            je  	.2C3
32955                       00008D66            .2C5:
32956                                           ! Debug: ne int = const $4F05 to unsigned short AX = [S+2+$10] (used reg = )
32957 8D66           8B46         12            mov	ax,$12[bp]
32958 8D69           3D                   4F05  cmp	ax,#$4F05
32959 8D6C           74           20            je  	.2C3
32960                       00008D6E            .2C4:
32961                                           ! 5753   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
32962                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
32963 8D6E           FF76         0E            push	$E[bp]
32964                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
32965 8D71           FF76         10            push	$10[bp]
32966                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
32967 8D74           FF76         0C            push	$C[bp]
32968                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
32969 8D77           8A46         12            mov	al,$12[bp]
32970                                           ! Debug: list unsigned char = al+0 (used reg = )
32971 8D7A           30E4                       xor	ah,ah
32972 8D7C           50                         push	ax
32973                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
32974 8D7D           8B46         12            mov	ax,$12[bp]
32975 8D80           88E0                       mov	al,ah
32976 8D82           30E4                       xor	ah,ah
32977                                           ! Debug: list unsigned int = ax+0 (used reg = )
32978 8D84           50                         push	ax
32979                                           ! Debug: list * char = .2C8+0 (used reg = )
32980 8D85           BB                   8DA3  mov	bx,#.2C8
32981 8D88           53                         push	bx
32982                                           ! Debug: func () void = printf+0 (used reg = )
32983 8D89           E8         F04E            call	_printf
32984 8D8C           89EC                       mov	sp,bp
32985                                           !BCC_EOS
32986                                           ! 5754 }
32987                       00008D8E            .2C3:
32988 8D8E           5D                         pop	bp
32989 8D8F           C3                         ret
32990                                           ! 5755 #asm
32991                                           !BCC_ASM
32992                       00000006            _cirrus_debugmsg.BP	set	6
32993                       0000000E            _cirrus_debugmsg.CX	set	$E
32994                       00000002            _cirrus_debugmsg.DI	set	2
32995                       00000016            _cirrus_debugmsg.FLAGS	set	$16
32996                       00000012            _cirrus_debugmsg.DS	set	$12
32997                       0000000C            _cirrus_debugmsg.DX	set	$C
32998                       00000014            _cirrus_debugmsg.ES	set	$14
32999                       00000004            _cirrus_debugmsg.SI	set	4
33000                       00000010            _cirrus_debugmsg.AX	set	$10
33001                       00000008            _cirrus_debugmsg.SP	set	8
33002                       0000000A            _cirrus_debugmsg.BX	set	$A
33003                                           ;; DATA_SEG_DEFS_HERE
33004                                           ! 5757 endasm
33005                                           !BCC_ENDASM
33006                                           ! 5758 #asm
33007                                           !BCC_ASM
33008                       00000006            _cirrus_debugmsg.BP	set	6
33009                       0000000E            _cirrus_debugmsg.CX	set	$E
33010                       00000002            _cirrus_debugmsg.DI	set	2
33011                       00000016            _cirrus_debugmsg.FLAGS	set	$16
33012                       00000012            _cirrus_debugmsg.DS	set	$12
33013                       0000000C            _cirrus_debugmsg.DX	set	$C
33014                       00000014            _cirrus_debugmsg.ES	set	$14
33015                       00000004            _cirrus_debugmsg.SI	set	4
33016                       00000010            _cirrus_debugmsg.AX	set	$10
33017                       00000008            _cirrus_debugmsg.SP	set	8
33018                       0000000A            _cirrus_debugmsg.BX	set	$A
33019 8D90                        76            .ascii "vgabios ends here"
33020 8DA1                        00            .byte 0x00
33021                       00008DA2            vgabios_end:
33022 8DA2                        CB            .byte 0xCB
33023                                           ;; BLOCK_STRINGS_BEGIN
33024                                           ! 5764 endasm
33025                                           !BCC_ENDASM
33026                                           ! 5765 
33027                                           ! Register BX used in function cirrus_debugmsg
33028                                           
33029                       00008DA3            .2C8:
33030                       00008DA3            .2C9:
33031 8DA3                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
33032 8DCB                        20            .ascii	" dx%04x"
33033 8DD2                        0A            .byte	$A
33034 8DD3                        00            .byte	0
33035 8DD4                                      .bss
33036                                           
33037                                           ! 0 errors detected

Symbols:
..FFF1                      0 FFFC A   ..FFF2                      0 FFFE A   
..FFF3                      0 FFFE A   ..FFF4                      0 FFFE A   
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFFA A   
..FFFF                      0 FFFE A   .1                          0 3ACB A   
.10                         0 3683 A   .100                        0 4D66 A   
.101                        0 4CEE A   .102                        0 4D2B A   
.103                        0 4D05 A   .104                        0 4CFE A   
.105                        0 4D53 A   .106                        0 4D5F A   
.107                        0 4D5D A   .108                        0 4D72 A   
.109                        0 4D75 A   .10A                        0 4E08 A   
.10B                        0 4DC3 A   .10C                        0 4DB1 A   
.10D                        0 4D9F A   .10E                        0 4D98 A   
.10F                        0 4D91 A   .11                         0 36B2 A   
.110                        0 4F4C A   .111                        0 4E2B A   
.112                        0 4E0F A   .113                        0 4EBE A   
.114                        0 4E34 A   .115                        0 4EBB A   
.116                        0 4EAA A   .117                        0 4EB1 A   
.118                        0 4E3E A   .119                        0 4E82 A   
.11A                        0 4E5C A   .11B                        0 4E55 A   
.11C                        0 4EAA A   .11D                        0 4EBB A   
.11E                        0 4F4C A   .11F                        0 4F4C A   
.12                         0 36A2 A   .120                        0 4F39 A   
.121                        0 4F40 A   .122                        0 4EC8 A   
.123                        0 4F05 A   .124                        0 4EDF A   
.125                        0 4ED8 A   .126                        0 4F2D A   
.127                        0 4F39 A   .128                        0 4F37 A   
.129                        0 4F4C A   .12A                        0 4F9E A   
.12B                        0 4F9A A   .12C                        0 505D A   
.12D                        0 4FFF A   .12E                        0 505D A   
.12F                        0 508E A   .13                         0 36B7 A   
.131                        0 5084 A   .132                        0 506C A   
.133                        0 5074 A   .134                        0 507C A   
.135                        0 50FB A   .136                        0 50EB A   
.137                        0 5109 A   .138                        0 51C1 A   
.139                        0 51B0 A   .13A                        0 51B7 A   
.13B                        0 5111 A   .13C                        0 51B0 A   
.13D                        0 51A0 A   .13E                        0 51A7 A   
.13F                        0 512E A   .14                         0 36CE A   
.140                        0 5190 A   .141                        0 5179 A   
.142                        0 51A0 A   .143                        0 51B0 A   
.144                        0 51C1 A   .145                        0 53D3 A   
.146                        0 53C3 A   .147                        0 53CA A   
.148                        0 5217 A   .149                        0 523B A   
.14A                        0 5232 A   .14B                        0 52FC A   
.14C                        0 5249 A   .14D                        0 5264 A   
.14E                        0 5252 A   .14F                        0 5269 A   
.15                         0 36E2 A   .150                        0 52E6 A   
.151                        0 52D8 A   .152                        0 52DF A   
.153                        0 5270 A   .154                        0 52CE A   
.155                        0 5287 A   .156                        0 52B0 A   
.157                        0 5290 A   .158                        0 52CE A   
.159                        0 52E6 A   .15A                        0 53C3 A   
.15B                        0 53C3 A   .15C                        0 53BA A   
.15D                        0 52FF A   .15E                        0 531A A   
.15F                        0 5308 A   .16                         0 36FB A   
.160                        0 531F A   .161                        0 53A0 A   
.162                        0 5392 A   .163                        0 5399 A   
.164                        0 5326 A   .165                        0 5388 A   
.166                        0 533D A   .167                        0 5368 A   
.168                        0 5346 A   .169                        0 5388 A   
.16A                        0 53A0 A   .16B                        0 53C3 A   
.16C                        0 53D3 A   .16D                        0 54A7 A   
.16E                        0 5497 A   .16F                        0 549E A   
.17                         0 3712 A   .170                        0 541D A   
.171                        0 5497 A   .172                        0 5489 A   
.173                        0 5490 A   .174                        0 5443 A   
.175                        0 5465 A   .176                        0 545F A   
.177                        0 5497 A   .178                        0 54A7 A   
.179                        0 54DB A   .17A                        0 54D7 A   
.17B                        0 55A6 A   .17C                        0 553C A   
.17D                        0 568E A   .17E                        0 568E A   
.17F                        0 5676 A   .18                         0 3720 A   
.180                        0 55CF A   .181                        0 566F A   
.183                        0 565B A   .184                        0 55E4 A   
.185                        0 55E4 A   .186                        0 560D A   
.187                        0 5636 A   .188                        0 568E A   
.189                        0 5682 A   .18A                        0 56C2 A   
.18B                        0 56BE A   .18C                        0 5791 A   
.18D                        0 5723 A   .18E                        0 578E A   
.18F                        0 5782 A   .19                         0 375B A   
.190                        0 5759 A   .191                        0 578E A   
.192                        0 5878 A   .193                        0 5878 A   
.194                        0 5860 A   .195                        0 57BA A   
.196                        0 5859 A   .198                        0 5845 A   
.199                        0 57CE A   .19A                        0 57CE A   
.19B                        0 57F7 A   .19C                        0 5820 A   
.19D                        0 5878 A   .19E                        0 586C A   
.19F                        0 5924 A   .1A                         0 3795 A   
.1A0                        0 5920 A   .1A1                        0 593E A   
.1A2                        0 593A A   .1A3                        0 5B8C A   
.1A5                        0 5B76 A   .1A6                        0 5953 A   
.1A7                        0 5953 A   .1A8                        0 59D4 A   
.1A9                        0 59C6 A   .1AA                        0 59F9 A   
.1AB                        0 5A2B A   .1AC                        0 5A0F A   
.1AD                        0 5A45 A   .1AE                        0 5A57 A   
.1AF                        0 5A4E A   .1B                         0 37AA A   
.1B0                        0 5AC3 A   .1B1                        0 5A7D A   
.1B2                        0 5B03 A   .1B3                        0 5B17 A   
.1B4                        0 5B0C A   .1B5                        0 5B2D A   
.1B6                        0 5B42 A   .1B7                        0 5BC6 A   
.1B8                        0 5BC2 A   .1B9                        0 5BE0 A   
.1BA                        0 5BDC A   .1BB                        0 5D74 A   
.1BD                        0 5D5C A   .1BE                        0 5BF5 A   
.1BF                        0 5BF5 A   .1C                         0 37CA A   
.1C0                        0 5C89 A   .1C1                        0 5C7B A   
.1C2                        0 5C82 A   .1C3                        0 5C37 A   
.1C4                        0 5C7B A   .1C5                        0 5C67 A   
.1C6                        0 5C89 A   .1C7                        0 5C8C A   
.1C8                        0 5CB8 A   .1C9                        0 5CAF A   
.1CA                        0 5D03 A   .1CB                        0 5CDE A   
.1CC                        0 5D24 A   .1CD                        0 5D26 A   
.1CE                        0 5D55 A   .1CF                        0 5DB4 A   
.1D                         0 37EA A   .1D0                        0 5DA3 A   
.1D1                        0 5DDE A   .1D2                        0 5DDA A   
.1D3                        0 602E A   .1D5                        0 600D A   
.1D6                        0 5E2F A   .1D7                        0 5E32 A   
.1D8                        0 5E40 A   .1D9                        0 5E39 A   
.1DA                        0 5E43 A   .1DB                        0 5E4B A   
.1DC                        0 5E55 A   .1DD                        0 5EA2 A   
.1DE                        0 5E97 A   .1DF                        0 5E55 A   
.1E                         0 3807 A   .1E0                        0 5EA2 A   
.1E1                        0 5EA5 A   .1E2                        0 5F3F A   
.1E3                        0 5EBD A   .1E4                        0 5F3C A   
.1E5                        0 5F19 A   .1E6                        0 6004 A   
.1E7                        0 6004 A   .1E9                        0 5FF0 A   
.1EA                        0 5F79 A   .1EB                        0 5F79 A   
.1EC                        0 5FA2 A   .1ED                        0 5FCB A   
.1EE                        0 6044 A   .1EF                        0 6038 A   
.1F                         0 3822 A   .1F0                        0 6119 A   
.1F1                        0 6050 A   .1F2                        0 60E9 A   
.1F3                        0 6068 A   .1F4                        0 6110 A   
.1F5                        0 64C6 A   .1F6                        0 64B5 A   
.1F7                        0 64BC A   .1F8                        0 63FE A   
.1F9                        0 6471 A   .1FA                        0 646B A   
.1FB                        0 64C6 A   .1FC                        0 65A7 A   
.1FD                        0 6597 A   .1FE                        0 65BF A   
.1FF                        0 6704 A   .20                         0 383F A   
.200                        0 66F5 A   .201                        0 66FC A   
.202                        0 66B8 A   .203                        0 6704 A   
.204                        0 6719 A   .205                        0 670E A   
.206                        0 679D A   .207                        0 678E A   
.208                        0 6795 A   .209                        0 6754 A   
.20A                        0 679D A   .20B                        0 67B0 A   
.20C                        0 67A7 A   .20D                        0 682E A   
.20E                        0 681F A   .20F                        0 6826 A   
.21                         0 384E A   .210                        0 67EB A   
.211                        0 682E A   .212                        0 6841 A   
.213                        0 6838 A   .214                        0 68CC A   
.215                        0 68BD A   .216                        0 68C4 A   
.217                        0 6889 A   .218                        0 68CC A   
.219                        0 68DF A   .21A                        0 68D6 A   
.21B                        0 69A8 A   .21D                        0 6996 A   
.21E                        0 6941 A   .21F                        0 6958 A   
.22                         0 3989 A   .220                        0 696C A   
.221                        0 6980 A   .222                        0 6980 A   
.223                        0 6A31 A   .225                        0 6A23 A   
.226                        0 69E5 A   .227                        0 69F9 A   
.228                        0 6A0D A   .229                        0 6A0D A   
.22A                        0 6AB8 A   .22C                        0 6AAA A   
.22D                        0 6A6C A   .22E                        0 6A80 A   
.22F                        0 6A94 A   .230                        0 6A94 A   
.231                        0 6B3F A   .233                        0 6B31 A   
.234                        0 6AF3 A   .235                        0 6B07 A   
.236                        0 6B1B A   .237                        0 6B1B A   
.238                        0 6CCB A   .23A                        0 6CA6 A   
.23B                        0 6B63 A   .23C                        0 6B9A A   
.23D                        0 6BD1 A   .23E                        0 6BF4 A   
.23F                        0 6C17 A   .24                         0 3935 A   
.240                        0 6C3A A   .241                        0 6C5C A   
.242                        0 6C7E A   .243                        0 6CA0 A   
.244                        0 6CC9 A   .245                        0 6CB9 A   
.246                        0 6E3B A   .247                        0 6E29 A   
.248                        0 6EC5 A   .249                        0 6EB9 A   
.24A                        0 6E6A A   .24B                        0 6E9D A   
.24C                        0 6E88 A   .24D                        0 6EC5 A   
.24E                        0 6EDD A   .24F                        0 6ECE A   
.25                         0 3854 A   .250                        0 7068 A   
.251                        0 705F A   .252                        0 707A A   
.253                        0 7071 A   .254                        0 708C A   
.255                        0 7083 A   .256                        0 733F A   
.257                        0 70D9 A   .258                        0 71C4 A   
.259                        0 71B5 A   .25A                        0 71BC A   
.25B                        0 7189 A   .25C                        0 71C4 A   
.25D                        0 7232 A   .25E                        0 7223 A   
.25F                        0 722A A   .26                         0 3854 A   
.260                        0 71F7 A   .261                        0 7232 A   
.262                        0 7285 A   .263                        0 7276 A   
.264                        0 727D A   .265                        0 7239 A   
.266                        0 7285 A   .267                        0 72D0 A   
.268                        0 72C1 A   .269                        0 72C8 A   
.26A                        0 7295 A   .26B                        0 72D0 A   
.26C                        0 75BA A   .26D                        0 734A A   
.26E                        0 74EB A   .26F                        0 74DC A   
.27                         0 387D A   .270                        0 74E3 A   
.271                        0 74B4 A   .272                        0 74EB A   
.273                        0 767A A   .274                        0 75C5 A   
.275                        0 7664 A   .276                        0 7655 A   
.277                        0 765C A   .278                        0 7636 A   
.279                        0 7664 A   .27A                        0 793C A   
.27B                        0 7692 A   .27C                        0 7701 A   
.27D                        0 76F2 A   .27E                        0 76F9 A   
.27F                        0 76C5 A   .28                         0 387D A   
.280                        0 7701 A   .281                        0 7786 A   
.282                        0 7777 A   .283                        0 777E A   
.284                        0 7742 A   .285                        0 7770 A   
.286                        0 774A A   .287                        0 7786 A   
.288                        0 77A8 A   .289                        0 77A0 A   
.28A                        0 7849 A   .28B                        0 783A A   
.28C                        0 7841 A   .28D                        0 7805 A   
.28E                        0 7849 A   .28F                        0 78A2 A   
.29                         0 3892 A   .290                        0 7893 A   
.291                        0 789A A   .292                        0 7866 A   
.293                        0 78A2 A   .294                        0 7BB7 A   
.295                        0 7947 A   .296                        0 7AE8 A   
.297                        0 7AD9 A   .298                        0 7AE0 A   
.299                        0 7AB1 A   .29A                        0 7AE8 A   
.29B                        0 7C58 A   .29C                        0 7BC2 A   
.29D                        0 7C44 A   .29E                        0 7C35 A   
.29F                        0 7C3C A   .2A                         0 3892 A   
.2A0                        0 7C15 A   .2A1                        0 7C44 A   
.2A2                        0 7C9A A   .2A3                        0 7C8C A   
.2A4                        0 7C93 A   .2A5                        0 7C70 A   
.2A6                        0 7C8C A   .2A7                        0 7C84 A   
.2A8                        0 7C9A A   .2A9                        0 7F13 A   
.2AA                        0 7EFD A   .2AB                        0 7DF9 A   
.2AC                        0 7E0E A   .2AD                        0 7E00 A   
.2AE                        0 7EF6 A   .2AF                        0 7EE6 A   
.2B                         0 38A7 A   .2B0                        0 7E17 A   
.2B1                        0 7E46 A   .2B2                        0 7E25 A   
.2B3                        0 7E1E A   .2B4                        0 7EE4 A   
.2B5                        0 7EE4 A   .2B6                        0 7E4F A   
.2B7                        0 7E73 A   .2B8                        0 7E6D A   
.2B9                        0 7EDF A   .2BA                        0 7ED0 A   
.2BB                        0 7ED7 A   .2BC                        0 7E86 A   
.2BD                        0 7EB8 A   .2BE                        0 7EA5 A   
.2BF                        0 7EC9 A   .2C                         0 38A7 A   
.2C0                        0 7EDF A   .2C1                        0 7EF6 A   
.2C2                        0 7F13 A   .2C3                        0 8D8E A   
.2C4                        0 8D6E A   .2C5                        0 8D66 A   
.2C6                        0 8D5A A   .2C7                        0 8D4E A   
.2C8                        0 8DA3 A   .2C9                        0 8DA3 A   
.2D                         0 38BC A   .2E                         0 38CB A   
.2F                         0 38E9 A   .3                          0 3A7E A   
.30                         0 38F7 A   .31                         0 3905 A   
.32                         0 3913 A   .33                         0 398C A   
.34                         0 39D9 A   .36                         0 39CD A   
.37                         0 3991 A   .38                         0 3996 A   
.39                         0 39B4 A   .3A                         0 39DC A   
.3B                         0 3A10 A   .3C                         0 3A2C A   
.3D                         0 3A70 A   .3F                         0 3A64 A   
.4                          0 3659 A   .40                         0 3A31 A   
.41                         0 3A40 A   .42                         0 3A51 A   
.43                         0 3ACB A   .44                         0 3A91 A   
.45                         0 3B17 A   .47                         0 3B07 A   
.48                         0 3AE5 A   .49                         0 3AED A   
.4A                         0 3AF5 A   .4B                         0 3AFD A   
.4C                         0 3BC5 A   .4D                         0 3BB4 A   
.4E                         0 3BBB A   .4F                         0 3B1F A   
.5                          0 36B4 A   .50                         0 3B8D A   
.51                         0 3B31 A   .52                         0 3BB4 A   
.53                         0 3BC5 A   .54                         0 3BF9 A   
.55                         0 3BF5 A   .56                         0 3CD4 A   
.57                         0 3C85 A   .58                         0 3CD4 A   
.59                         0 3CC7 A   .5A                         0 3D24 A   
.5B                         0 3D15 A   .5C                         0 3D1C A   
.5D                         0 3CE4 A   .5E                         0 3D24 A   
.5F                         0 3DA9 A   .60                         0 3D9A A   
.61                         0 3DA1 A   .62                         0 3D62 A   
.63                         0 3DA9 A   .64                         0 3DF0 A   
.65                         0 3DE1 A   .66                         0 3DE8 A   
.67                         0 3DB0 A   .68                         0 3DF0 A   
.69                         0 3E0B A   .6A                         0 3E06 A   
.6B                         0 3E0E A   .6C                         0 3E65 A   
.6D                         0 3E56 A   .6E                         0 3E5D A   
.6F                         0 3E25 A   .7                          0 368F A   
.70                         0 3E65 A   .71                         0 3F65 A   
.72                         0 3EA4 A   .73                         0 3EE0 A   
.74                         0 3EBA A   .75                         0 3F65 A   
.76                         0 3F0B A   .77                         0 3EE7 A   
.78                         0 3F65 A   .79                         0 40A2 A   
.7A                         0 4094 A   .7B                         0 40C4 A   
.7C                         0 40B5 A   .7D                         0 40BC A   
.7E                         0 40A9 A   .7F                         0 40C4 A   
.8                          0 366B A   .80                         0 40F0 A   
.81                         0 40E2 A   .82                         0 4155 A   
.84                         0 4146 A   .85                         0 4108 A   
.86                         0 411C A   .87                         0 4130 A   
.88                         0 4223 A   .89                         0 41D3 A   
.8A                         0 41CC A   .8B                         0 41C5 A   
.8C                         0 41BD A   .8D                         0 41FC A   
.8E                         0 41E7 A   .8F                         0 4210 A   
.9                          0 3677 A   .90                         0 4285 A   
.91                         0 4281 A   .92                         0 4370 A   
.93                         0 42B8 A   .94                         0 43A8 A   
.95                         0 43A4 A   .96                         0 43FA A   
.97                         0 43F6 A   .98                         0 4424 A   
.99                         0 4420 A   .9A                         0 44BC A   
.9B                         0 444E A   .9C                         0 44E0 A   
.9D                         0 4608 A   .9E                         0 45F9 A   
.9F                         0 4600 A   .A                          0 3677 A   
.A0                         0 45BD A   .A1                         0 4608 A   
.A2                         0 4693 A   .A3                         0 4684 A   
.A4                         0 468B A   .A5                         0 465A A   
.A6                         0 4693 A   .A7                         0 47B3 A   
.A8                         0 47A2 A   .A9                         0 47A9 A   
.AA                         0 4701 A   .AB                         0 4760 A   
.AC                         0 470A A   .AD                         0 47A2 A   
.AE                         0 47B3 A   .AF                         0 4868 A   
.B                          0 3677 A   .B0                         0 4859 A   
.B1                         0 4860 A   .B2                         0 47EB A   
.B3                         0 482C A   .B4                         0 47F4 A   
.B5                         0 4859 A   .B6                         0 4868 A   
.B7                         0 487E A   .B8                         0 487A A   
.B9                         0 488A A   .BA                         0 4886 A   
.BB                         0 48B4 A   .BC                         0 48B0 A   
.BD                         0 48F1 A   .BE                         0 48E0 A   
.BF                         0 4902 A   .C                          0 3677 A   
.C0                         0 48FB A   .C1                         0 4913 A   
.C2                         0 490C A   .C3                         0 4922 A   
.C4                         0 491D A   .C5                         0 4B99 A   
.C6                         0 4949 A   .C7                         0 49D3 A   
.C8                         0 499E A   .C9                         0 498C A   
.CA                         0 497A A   .CB                         0 4973 A   
.CC                         0 496C A   .CD                         0 4B96 A   
.CE                         0 4AB8 A   .CF                         0 49DC A   
.D                          0 3677 A   .D0                         0 4AB5 A   
.D1                         0 4AA2 A   .D2                         0 4AA9 A   
.D3                         0 49E7 A   .D4                         0 4A47 A   
.D5                         0 4A05 A   .D6                         0 49FE A   
.D7                         0 4AA2 A   .D8                         0 4AB5 A   
.D9                         0 4B96 A   .DA                         0 4B96 A   
.DB                         0 4B83 A   .DC                         0 4B8A A   
.DD                         0 4AC3 A   .DE                         0 4B1C A   
.DF                         0 4ADA A   .E                          0 3677 A   
.E0                         0 4AD3 A   .E1                         0 4B77 A   
.E2                         0 4B83 A   .E3                         0 4B81 A   
.E4                         0 4B96 A   .E5                         0 4F62 A   
.E6                         0 4F62 A   .E8                         0 4F50 A   
.E9                         0 4BBF A   .EA                         0 4BBF A   
.EB                         0 4C51 A   .EC                         0 4BFC A   
.ED                         0 4BEA A   .EE                         0 4BD8 A   
.EF                         0 4BD1 A   .F                          0 3677 A   
.F0                         0 4BC8 A   .F1                         0 4D72 A   
.F2                         0 4CE4 A   .F3                         0 4C5A A   
.F4                         0 4CE1 A   .F5                         0 4CD0 A   
.F6                         0 4CD7 A   .F7                         0 4C64 A   
.F8                         0 4CA8 A   .F9                         0 4C82 A   
.FA                         0 4C7B A   .FB                         0 4CD0 A   
.FC                         0 4CE1 A   .FD                         0 4D72 A   
.FE                         0 4D72 A   .FF                         0 4D5F A   
_biosfn_alternate_prtsc     0 6D2C A   _biosfn_enable_video_refre+ 0 6E07 A   
_biosfn_get_cursor_pos      0 4374 A   _biosfn_get_font_info       0 6B52 A   
_biosfn_load_gfx_8_14_char+ 0 69BD A   _biosfn_load_gfx_8_16_char+ 0 6ACB A   
_biosfn_load_gfx_8_8_chars  0 68E3 A   _biosfn_load_gfx_8_8_dd_ch+ 0 6A44 A   
_biosfn_load_gfx_user_char+ 0 6917 A   _biosfn_load_text_8_14_pat  0 671D A   
_biosfn_load_text_8_16_pat  0 6852 A   _biosfn_load_text_8_8_pat   0 67B4 A   
_biosfn_load_text_user_pat  0 6681 A   _biosfn_perform_gray_scale+ 0 63DA A   
_biosfn_read_char_attr      0 4F66 A   _biosfn_read_pixel          0 5B90 A   
_biosfn_read_state_info     0 6F14 A   _biosfn_read_video_state_s+ 0 7093 A   
_biosfn_read_video_state_s+ 0 704C A   _biosfn_restore_video_stat+ 0 7681 A   
_biosfn_save_video_state    0 70B7 A   _biosfn_scroll              0 486C A   
_biosfn_set_active_page     0 43E9 A   _biosfn_set_cursor_pos      0 4274 A   
_biosfn_set_cursor_shape    0 4159 A   _biosfn_set_video_mode      0 3BC9 A   
_biosfn_switch_video_inter+ 0 6E06 A   _biosfn_write_char_attr     0 54AB A   
_biosfn_write_char_only     0 5692 A   _biosfn_write_pixel         0 58F4 A   
_biosfn_write_string        0 6E08 A   _biosfn_write_teletype      0 5D96 A   
_ccrtc_1024x768x16          0 8219 A E _ccrtc_1024x768x24          0 826D A E 
_ccrtc_1024x768x8           0 81C5 A E _ccrtc_1280x1024x16         0 8315 A E 
_ccrtc_1280x1024x8          0 82C1 A E _ccrtc_1600x1200x8          0 8369 A E 
_ccrtc_640x480x16           0 8021 A E _ccrtc_640x480x24           0 8075 A E 
_ccrtc_640x480x8            0 7FCD A E _ccrtc_800x600x16           0 811D A E 
_ccrtc_800x600x24           0 8171 A E _ccrtc_800x600x8            0 80C9 A E 
_ccrtc_vga                  0 7F87 A E _cgraph_svgacolor           0 7F8F A E 
_cgraph_vga                 0 7F7F A E _cirrus_debugmsg            0 8D3F A   
_cirrus_id_table            0 856D A E _cirrus_modes               0 8399 A E 
_cirrus_vesa_modelist       0 8573 A E _cseq_1024x768x16           0 81F5 A E 
_cseq_1024x768x24           0 8249 A E _cseq_1024x768x8            0 81A1 A E 
_cseq_1280x1024x16          0 82F1 A E _cseq_1280x1024x8           0 829D A E 
_cseq_1600x1200x8           0 8345 A E _cseq_640x480x16            0 7FFD A E 
_cseq_640x480x24            0 8051 A E _cseq_640x480x8             0 7FA9 A E 
_cseq_800x600x16            0 80F9 A E _cseq_800x600x24            0 814D A E 
_cseq_800x600x8             0 80A5 A E _cseq_vga                   0 7F7B A E 
_dac_regs                   0 027D A   _display_info               0 3607 A   
_display_splash_screen      0 3606 A   _display_string             0 3625 A   
_find_vga_entry             0 7C5F A   _get_SS                     0 7DD7 A E 
_get_font_access            0 64E1 A   _inb                        0 7DA1 A E 
_int10_func                 0 364C A   _inw                        0 7DAC A E 
_line_to_vpti               0 026B A   _load_dac_palette           0 3ACD A   
_memcpyb                    0 7CEB A   _memcpyw                    0 7D1B A   
_memsetb                    0 7CA1 A   _memsetw                    0 7CC6 A   
_outb                       0 7DB7 A E _outw                       0 7DC7 A E 
_palette0                   0 0A01 A   _palette1                   0 0AC1 A   
_palette2                   0 0B81 A   _palette3                   0 0C41 A   
_pci_get_lfb_addr           0 7F17 A   _printf                     0 7DDA A E 
_read_byte                  0 7D4B A   _read_word                  0 7D5E A   
_release_font_access        0 6504 A   _set_scan_lines             0 6538 A   
_static_functionality       0 0F41 A   _vga_modes                  0 01DB A   
_vgafont14                  0 1751 A   _vgafont14alt               0 3551 A   
_vgafont16                  0 2551 A   _vgafont16alt               0 3552 A   
_vgafont8                   0 0F51 A   _vgamem_copy_cga            0 46A5 A   
_vgamem_copy_pl4            0 4558 A   _vgamem_fill_cga            0 47B7 A   
_vgamem_fill_pl4            0 461A A   _video_param_table          0 0281 A   
_video_save_pointer_table   0 35EA A   _write_byte                 0 7D71 A   
_write_gfx_char_cga         0 51D4 A   _write_gfx_char_lin         0 53D7 A   
_write_gfx_char_pl4         0 5061 A   _write_word                 0 7D89 A   
biosfn_enable_cursor_emula+ 0 6DE4 A   biosfn_enable_default_pale+ 0 6D80 A   
biosfn_enable_grayscale_su+ 0 6DC0 A   biosfn_enable_video_addres+ 0 6DA2 A   
biosfn_get_all_palette_reg  0 627F A   biosfn_get_ega_info         0 6D09 A   
biosfn_get_single_palette_+ 0 624D A   biosfn_get_video_mode       0 614A A   
biosfn_group_0B             0 587C A   biosfn_group_10             0 6171 A   
biosfn_group_1A             0 6EE1 A   biosfn_read_all_dac_reg     0 635F A   
biosfn_read_display_code    0 6EEA A   biosfn_read_overscan_borde+ 0 6271 A   
biosfn_read_pel_mask        0 6392 A   biosfn_read_single_dac_reg  0 6344 A   
biosfn_read_video_dac_stat+ 0 639D A   biosfn_select_vert_res      0 6D2D A   
biosfn_select_video_dac_co+ 0 6301 A   biosfn_set_all_dac_reg      0 62D9 A   
biosfn_set_all_palette_reg  0 61FA A   biosfn_set_border_color     0 5887 A   
biosfn_set_display_code     0 6EFF A   biosfn_set_overscan_border+ 0 61F2 A   
biosfn_set_palette          0 58C6 A   biosfn_set_pel_mask         0 6387 A   
biosfn_set_single_dac_reg   0 62C0 A   biosfn_set_single_palette_+ 0 61D8 A   
biosfn_set_text_block_spec+ 0 6845 A   biosfn_toggle_intensity     0 6227 A   
c80h_1                      0 87DC A   c80h_2                      0 87EC A   
c85h2                       0 8828 A   c85h3                       0 8830 A   
cgm_1                       0 8B73 A   cgm_2                       0 8B89 A   
cgm_3                       0 8B8A A   cgm_4                       0 8B84 A   
cirrus_check                0 866C A   cirrus_clear_vram           0 8C86 A   
cirrus_clear_vram_1         0 8C97 A   cirrus_debug_dump           0 86F8 A   
cirrus_display_info         0 8657 A   cirrus_enable_16k_granular+ 0 87B2 A   
cirrus_extbios              0 86BC A   cirrus_extbios_80h          0 87D0 A   
cirrus_extbios_81h          0 87F6 A   cirrus_extbios_82h          0 87FA A   
cirrus_extbios_85h          0 880B A   cirrus_extbios_9Ah          0 8833 A   
cirrus_extbios_A0h          0 883A A   cirrus_extbios_A0h_callbac+ 0 8850 A   
cirrus_extbios_A1h          0 8853 A   cirrus_extbios_A2h          0 8857 A   
cirrus_extbios_AEh          0 885A A   cirrus_extbios_handlers     0 8CBD A   
cirrus_extbios_unimplement+ 0 885D A   cirrus_get_bpp_bytes        0 8B8B A   
cirrus_get_bpp_bytes_1      0 8B9C A   cirrus_get_bpp_bytes_2      0 8BA4 A   
cirrus_get_crtc             0 8B5B A   cirrus_get_line_offset      0 8BC2 A   
cirrus_get_line_offset_ent+ 0 8BE4 A   cirrus_get_modeentry        0 8B6E A   
cirrus_get_modeentry_nomas+ 0 8B70 A   cirrus_get_start_addr       0 8C4F A   
cirrus_init                 0 8620 A   cirrus_installed            0 85B3 A   
cirrus_int10_handler        0 867C A   cirrus_msgnotinstalled      0 8666 A   
cirrus_not_installed        0 85D9 A   cirrus_return               0 8692 A   
cirrus_set_line_offset      0 8BA6 A   cirrus_set_start_addr       0 8C0E A   
cirrus_set_video_mode       0 8698 A   cirrus_set_video_mode_exte+ 0 8704 A   
cirrus_set_video_mode_exte+ 0 8714 A   cirrus_switch_mode          0 8749 A   
cirrus_switch_mode_setregs  0 87C2 A   cirrus_unhandled            0 868D A   
cirrus_vesa                 0 86DA A   cirrus_vesa_00h             0 885E A   
cirrus_vesa_01h             0 88D0 A   cirrus_vesa_01h_1           0 88E0 A   
cirrus_vesa_01h_3           0 8946 A   cirrus_vesa_01h_4           0 8983 A   
cirrus_vesa_01h_5           0 89A6 A   cirrus_vesa_01h_6           0 89A5 A   
cirrus_vesa_02h             0 89A7 A   cirrus_vesa_02h_1           0 89C8 A   
cirrus_vesa_02h_2           0 89BF A   cirrus_vesa_02h_3           0 89D9 A   
cirrus_vesa_02h_4           0 89E6 A   cirrus_vesa_02h_legacy      0 89C2 A   
cirrus_vesa_03h             0 89F9 A   cirrus_vesa_03h_1           0 8A12 A   
cirrus_vesa_05h             0 8A1B A   cirrus_vesa_05h_1           0 8A2A A   
cirrus_vesa_05h_farentry    0 8A17 A   cirrus_vesa_05h_getmempage  0 8A41 A   
cirrus_vesa_05h_setmempage  0 8A2D A   cirrus_vesa_06h             0 8A53 A   
cirrus_vesa_06h_1           0 8A65 A   cirrus_vesa_06h_2           0 8A70 A   
cirrus_vesa_06h_3           0 8A73 A   cirrus_vesa_07h             0 8A96 A   
cirrus_vesa_07h_1           0 8AA6 A   cirrus_vesa_07h_2           0 8AD3 A   
cirrus_vesa_07h_3           0 8ABF A   cirrus_vesa_10h             0 8B00 A   
cirrus_vesa_10h_01          0 8B0C A   cirrus_vesa_10h_02          0 8B22 A   
cirrus_vesa_handlers        0 8D1D A   cirrus_vesa_not_handled     0 86F3 A   
cirrus_vesa_oemname         0 8603 A   cirrus_vesa_pmbios_entry    0 8726 A   
cirrus_vesa_pmbios_init     0 8725 A   cirrus_vesa_pmbios_return   0 8746 A   
cirrus_vesa_pmbios_unimple+ 0 8743 A   cirrus_vesa_productname     0 8603 A   
cirrus_vesa_productrevisio+ 0 861C A   cirrus_vesa_unimplemented   0 8B38 A   
cirrus_vesa_vendorname      0 8603 A   cirrus_vesamode_to_mode     0 8B3C A   
csms_1                      0 87C2 A   csms_2                      0 87CF A   
cv00_1                      0 8890 A   cv00_2                      0 88BE A   
cvtm_1                      0 8B47 A   cvtm_2                      0 8B54 A   
ef                          E 0000 R I get_dac_16_page             0 63CD A   
get_palette_loop            0 6287 A   idiv_u                      0 6533 A   
init_bios_area              0 35B2 A   init_vga_card               0 3553 A   
int10_end                   0 01D9 A   int10_group_10_unknown      0 61D7 A   
int10_normal                0 01CB A   int10_test_0B               0 0167 A   
int10_test_1001             0 6177 A   int10_test_1002             0 617D A   
int10_test_1003             0 6183 A   int10_test_1007             0 618A A   
int10_test_1008             0 6191 A   int10_test_1009             0 6198 A   
int10_test_1010             0 619F A   int10_test_1012             0 61A6 A   
int10_test_1013             0 61AD A   int10_test_1015             0 61B4 A   
int10_test_1017             0 61BB A   int10_test_1018             0 61C2 A   
int10_test_1019             0 61C9 A   int10_test_101A             0 61D0 A   
int10_test_101B             0 01BC A   int10_test_1103             0 0171 A   
int10_test_12               0 017B A   int10_test_1A               0 015D A   
int10_test_BL30             0 018A A   int10_test_BL31             0 0194 A   
int10_test_BL32             0 019E A   int10_test_BL33             0 01A8 A   
int10_test_BL34             0 01B2 A   is_text_mode                0 8790 A   
memcpyb_end                 0 7D13 A   memcpyw_end                 0 7D43 A   
memsetb_end                 0 7CC0 A   memsetw_end                 0 7CE5 A   
mode_ega_color              0 6D29 A   msg_vga_init                0 356F A   
no_8bpp_mode                0 87AE A   no_actl_reg1                0 61F1 A   
no_actl_reg2                0 6270 A   no_cirrus                   0 8656 A   
offset_found1               0 8BF3 A   offset_found2               0 8C04 A   
offset_loop1                0 8BE9 A   offset_loop2                0 8BFA A   
pci_get_lfb_addr_fail       0 7F3C A   pci_get_lfb_addr_found      0 7F40 A   
pci_get_lfb_addr_next_dev   0 7F2A A   pci_get_lfb_addr_return     0 7F5A A   
pci_get_lfb_addr_success    0 7F54 A   pci_read_reg                0 7F62 A   
read_dac_loop               0 6370 A   set_actl_normal             0 633D A   
set_cga_palette_loop        0 58D3 A   set_dac_16_page             0 6337 A   
set_dac_loop                0 62EA A   set_dac_page                0 6324 A   
set_intensity_loop          0 58A5 A   set_low_border              0 589F A   
set_palette_loop            0 6209 A   set_retcode                 0 6D79 A   
set_vert_res                0 6D6F A   vert_res_200                0 6D65 A   
vert_res_350                0 6D5B A   vert_res_400                0 6D4F A   
vgabios_copyright           0 0058 A   vgabios_date                0 004A A   
vgabios_end                 0 8DA2 A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0128 A   vgabios_int10_handler       0 0152 A   
vgabios_license             0 0084 A   vgabios_name                0 0022 A   
vgabios_pci_data            0 0110 A   vgabios_start               0 0000 A   
vgabios_version             0 003E A   vgabios_website             0 00B9 A   

00000 errors
00000 warnings
