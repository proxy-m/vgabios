00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios.debug_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 void dispi_set_enable(enable);
00012                                           !BCC_EOS
00013                                           ! 6 Boolean vbe_has_vbe_display();
00014                                           !BCC_EOS
00015                                           ! 7 void vbe_biosfn_return_controller_information(AX, ES, DI);
00016                                           !BCC_EOS
00017                                           ! 8 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00018                                           !BCC_EOS
00019                                           ! 9 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 10 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00022                                           !BCC_EOS
00023                                           ! 11 void vbe_biosfn_set_get_palette_data(AX);
00024                                           !BCC_EOS
00025                                           ! 12 void vbe_biosfn_return_protected_mode_interface(AX);
00026                                           !BCC_EOS
00027                                           ! 13 void vbe_biosfn_display_identification_extensions(AX, BX, CX, DX, ES, DI);
00028                                           !BCC_EOS
00029                                           ! 14 typedef struct VbeInfoBlock
00030                                           ! 15 {
00031                                           ! 16    Bit8u VbeSignature[4];
00032                                           !BCC_EOS
00033                                           ! 17    Bit16u VbeVersion;
00034                                           !BCC_EOS
00035                                           ! 18    Bit16u OemStringPtr_Off;
00036                                           !BCC_EOS
00037                                           ! 19    Bit16u OemStringPtr_Seg;
00038                                           !BCC_EOS
00039                                           ! 20    Bit8u Capabilities[4];
00040                                           !BCC_EOS
00041                                           ! 21    Bit16u VideoModePtr_Off;
00042                                           !BCC_EOS
00043                                           ! 22    Bit16u VideoModePtr_Seg;
00044                                           !BCC_EOS
00045                                           ! 23    Bit16u TotalMemory;
00046                                           !BCC_EOS
00047                                           ! 24    Bit16u OemSoftwareRev;
00048                                           !BCC_EOS
00049                                           ! 25    Bit16u OemVendorNamePtr_Off;
00050                                           !BCC_EOS
00051                                           ! 26    Bit16u OemVendorNamePtr_Seg;
00052                                           !BCC_EOS
00053                                           ! 27    Bit16u OemProductNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 28    Bit16u OemProductNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 29    Bit16u OemProductRevPtr_Off;
00058                                           !BCC_EOS
00059                                           ! 30    Bit16u OemProductRevPtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 31    Bit16u Reserved[111];
00062                                           !BCC_EOS
00063                                           ! 32    Bit8u OemData[256];
00064                                           !BCC_EOS
00065                                           ! 33 } VbeInfoBlock;
00066                                           !BCC_EOS
00067                                           ! 34 typedef struct ModeInfoBlockCompact
00068                                           ! 35 {
00069                                           ! 36    Bit16u ModeAttributes;
00070                                           !BCC_EOS
00071                                           ! 37    Bit8u WinAAttributes;
00072                                           !BCC_EOS
00073                                           ! 38    Bit8u WinBAttributes;
00074                                           !BCC_EOS
00075                                           ! 39    Bit16u WinGranularity;
00076                                           !BCC_EOS
00077                                           ! 40    Bit16u WinSize;
00078                                           !BCC_EOS
00079                                           ! 41    Bit16u WinASegment;
00080                                           !BCC_EOS
00081                                           ! 42    Bit16u WinBSegment;
00082                                           !BCC_EOS
00083                                           ! 43    Bit32u WinFuncPtr;
00084                                           !BCC_EOS
00085                                           ! 44    Bit16u BytesPerScanLine;
00086                                           !BCC_EOS
00087                                           ! 45    Bit16u XResolution;
00088                                           !BCC_EOS
00089                                           ! 46    Bit16u YResolution;
00090                                           !BCC_EOS
00091                                           ! 47    Bit8u XCharSize;
00092                                           !BCC_EOS
00093                                           ! 48    Bit8u YCharSize;
00094                                           !BCC_EOS
00095                                           ! 49    Bit8u NumberOfPlanes;
00096                                           !BCC_EOS
00097                                           ! 50    Bit8u BitsPerPixel;
00098                                           !BCC_EOS
00099                                           ! 51    Bit8u NumberOfBanks;
00100                                           !BCC_EOS
00101                                           ! 52    Bit8u MemoryModel;
00102                                           !BCC_EOS
00103                                           ! 53    Bit8u BankSize;
00104                                           !BCC_EOS
00105                                           ! 54    Bit8u NumberOfImagePages;
00106                                           !BCC_EOS
00107                                           ! 55    Bit8u Reserved_page;
00108                                           !BCC_EOS
00109                                           ! 56    Bit8u RedMaskSize;
00110                                           !BCC_EOS
00111                                           ! 57    Bit8u RedFieldPosition;
00112                                           !BCC_EOS
00113                                           ! 58    Bit8u GreenMaskSize;
00114                                           !BCC_EOS
00115                                           ! 59    Bit8u GreenFieldPosition;
00116                                           !BCC_EOS
00117                                           ! 60    Bit8u BlueMaskSize;
00118                                           !BCC_EOS
00119                                           ! 61    Bit8u BlueFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 62    Bit8u RsvdMaskSize;
00122                                           !BCC_EOS
00123                                           ! 63    Bit8u RsvdFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 64    Bit8u DirectColorModeInfo;
00126                                           !BCC_EOS
00127                                           ! 65    Bit32u PhysBasePtr;
00128                                           !BCC_EOS
00129                                           ! 66    Bit32u OffScreenMemOffset;
00130                                           !BCC_EOS
00131                                           ! 67    Bit16u OffScreenMemSize;
00132                                           !BCC_EOS
00133                                           ! 68    Bit16u LinBytesPerScanLine;
00134                                           !BCC_EOS
00135                                           ! 69    Bit8u BnkNumberOfPages;
00136                                           !BCC_EOS
00137                                           ! 70    Bit8u LinNumberOfPages;
00138                                           !BCC_EOS
00139                                           ! 71    Bit8u LinRedMaskSize;
00140                                           !BCC_EOS
00141                                           ! 72  
00142                                           ! 72   Bit8u LinRedFieldPosition;
00143                                           !BCC_EOS
00144                                           ! 73    Bit8u LinGreenMaskSize;
00145                                           !BCC_EOS
00146                                           ! 74    Bit8u LinGreenFieldPosition;
00147                                           !BCC_EOS
00148                                           ! 75    Bit8u LinBlueMaskSize;
00149                                           !BCC_EOS
00150                                           ! 76    Bit8u LinBlueFieldPosition;
00151                                           !BCC_EOS
00152                                           ! 77    Bit8u LinRsvdMaskSize;
00153                                           !BCC_EOS
00154                                           ! 78    Bit8u LinRsvdFieldPosition;
00155                                           !BCC_EOS
00156                                           ! 79    Bit32u MaxPixelClock;
00157                                           !BCC_EOS
00158                                           ! 80 } ModeInfoBlockCompact;
00159                                           !BCC_EOS
00160                                           ! 81 typedef struct ModeInfoBlock
00161                                           ! 82 {
00162                                           ! 83    Bit16u ModeAttributes;
00163                                           !BCC_EOS
00164                                           ! 84    Bit8u WinAAttributes;
00165                                           !BCC_EOS
00166                                           ! 85    Bit8u WinBAttributes;
00167                                           !BCC_EOS
00168                                           ! 86    Bit16u WinGranularity;
00169                                           !BCC_EOS
00170                                           ! 87    Bit16u WinSize;
00171                                           !BCC_EOS
00172                                           ! 88    Bit16u WinASegment;
00173                                           !BCC_EOS
00174                                           ! 89    Bit16u WinBSegment;
00175                                           !BCC_EOS
00176                                           ! 90    Bit32u WinFuncPtr;
00177                                           !BCC_EOS
00178                                           ! 91    Bit16u BytesPerScanLine;
00179                                           !BCC_EOS
00180                                           ! 92    Bit16u XResolution;
00181                                           !BCC_EOS
00182                                           ! 93    Bit16u YResolution;
00183                                           !BCC_EOS
00184                                           ! 94    Bit8u XCharSize;
00185                                           !BCC_EOS
00186                                           ! 95    Bit8u YCharSize;
00187                                           !BCC_EOS
00188                                           ! 96    Bit8u NumberOfPlanes;
00189                                           !BCC_EOS
00190                                           ! 97    Bit8u BitsPerPixel;
00191                                           !BCC_EOS
00192                                           ! 98    Bit8u NumberOfBanks;
00193                                           !BCC_EOS
00194                                           ! 99    Bit8u MemoryModel;
00195                                           !BCC_EOS
00196                                           ! 100    Bit8u BankSize;
00197                                           !BCC_EOS
00198                                           ! 101    Bit8u NumberOfImagePages;
00199                                           !BCC_EOS
00200                                           ! 102    Bit8u Reserved_page;
00201                                           !BCC_EOS
00202                                           ! 103    Bit8u RedMaskSize;
00203                                           !BCC_EOS
00204                                           ! 104    Bit8u RedFieldPosition;
00205                                           !BCC_EOS
00206                                           ! 105    Bit8u GreenMaskSize;
00207                                           !BCC_EOS
00208                                           ! 106    Bit8u GreenFieldPosition;
00209                                           !BCC_EOS
00210                                           ! 107    Bit8u BlueMaskSize;
00211                                           !BCC_EOS
00212                                           ! 108    Bit8u BlueFieldPosition;
00213                                           !BCC_EOS
00214                                           ! 109    Bit8u RsvdMaskSize;
00215                                           !BCC_EOS
00216                                           ! 110    Bit8u RsvdFieldPosition;
00217                                           !BCC_EOS
00218                                           ! 111    Bit8u DirectColorModeInfo;
00219                                           !BCC_EOS
00220                                           ! 112    Bit32u PhysBasePtr;
00221                                           !BCC_EOS
00222                                           ! 113    Bit32u OffScreenMemOffset;
00223                                           !BCC_EOS
00224                                           ! 114    Bit16u OffScreenMemSize;
00225                                           !BCC_EOS
00226                                           ! 115    Bit16u LinBytesPerScanLine;
00227                                           !BCC_EOS
00228                                           ! 116    Bit8u BnkNumberOfPages;
00229                                           !BCC_EOS
00230                                           ! 117    Bit8u LinNumberOfPages;
00231                                           !BCC_EOS
00232                                           ! 118    Bit8u LinRedMaskSize;
00233                                           !BCC_EOS
00234                                           ! 119    Bit8u LinRedFieldPosition;
00235                                           !BCC_EOS
00236                                           ! 120    Bit8u LinGreenMaskSize;
00237                                           !BCC_EOS
00238                                           ! 121    Bit8u LinGreenFieldPosition;
00239                                           !BCC_EOS
00240                                           ! 122    Bit8u LinBlueMaskSize;
00241                                           !BCC_EOS
00242                                           ! 123    Bit8u LinBlueFieldPosition;
00243                                           !BCC_EOS
00244                                           ! 124    Bit8u LinRsvdMaskSize;
00245                                           !BCC_EOS
00246                                           ! 125    Bit8u LinRsvdFieldPosition;
00247                                           !BCC_EOS
00248                                           ! 126    Bit32u MaxPixelClock;
00249                                           !BCC_EOS
00250                                           ! 127    Bit8u Reserved[189];
00251                                           !BCC_EOS
00252                                           ! 128 } ModeInfoBlock;
00253                                           !BCC_EOS
00254                                           ! 129 typedef struct ModeInfoListItem
00255                                           ! 130 {
00256                                           ! 131   Bit16u mode;
00257                                           !BCC_EOS
00258                                           ! 132   ModeInfoBlockCompact info;
00259                                           !BCC_EOS
00260                                           ! 133 } ModeInfoListItem;
00261                                           !BCC_EOS
00262                                           ! 134 static Bit8u read_byte();
00263                                           !BCC_EOS
00264                                           ! 135 static Bit16u read_word();
00265                                           !BCC_EOS
00266                                           ! 136 static void write_byte();
00267                                           !BCC_EOS
00268                                           ! 137 static void write_word();
00269                                           !BCC_EOS
00270                                           ! 138 static Bit8u inb();
00271                                           !BCC_EOS
00272                                           ! 139 static Bit16u inw();
00273                                           !BCC_EOS
00274                                           ! 140 static void outb();
00275                                           !BCC_EOS
00276                                           ! 141 static void outw();
00277                                           !BCC_EOS
00278                                           ! 142 static Bit16u get_SS();
00279                                           !BCC_EOS
00280                                           ! 143 static void printf();
00281                                           !BCC_EOS
00282                                           ! 144 static void unimplemented();
00283                                           !BCC_EOS
00284                                           ! 145 static void unknown();
00285                                           !BCC_EOS
00286                                           ! 146 static Bit8u find_vga_entry();
00287                                           !BCC_EOS
00288                                           ! 147 static void load_dac_palette();
00289                                           !BCC_EOS
00290                                           ! 148 static void memsetb();
00291                                           !BCC_EOS
00292                                           ! 149 static void memsetw();
00293                                           !BCC_EOS
00294                                           ! 150 static void memcpyb();
00295                                           !BCC_EOS
00296                                           ! 151 static void memcpyw();
00297                                           !BCC_EOS
00298                                           ! 152 static void biosfn_set_video_mode();
00299                                           !BCC_EOS
00300                                           ! 153 static void biosfn_set_cursor
00301                                           ! 153 _shape();
00302                                           !BCC_EOS
00303                                           ! 154 static void biosfn_set_cursor_pos();
00304                                           !BCC_EOS
00305                                           ! 155 static void biosfn_get_cursor_pos();
00306                                           !BCC_EOS
00307                                           ! 156 static void biosfn_set_active_page();
00308                                           !BCC_EOS
00309                                           ! 157 static void biosfn_scroll();
00310                                           !BCC_EOS
00311                                           ! 158 static void biosfn_read_char_attr();
00312                                           !BCC_EOS
00313                                           ! 159 static void biosfn_write_char_attr();
00314                                           !BCC_EOS
00315                                           ! 160 static void biosfn_write_char_only();
00316                                           !BCC_EOS
00317                                           ! 161 static void biosfn_write_pixel();
00318                                           !BCC_EOS
00319                                           ! 162 static void biosfn_read_pixel();
00320                                           !BCC_EOS
00321                                           ! 163 static void biosfn_write_teletype();
00322                                           !BCC_EOS
00323                                           ! 164 static void biosfn_perform_gray_scale_summing();
00324                                           !BCC_EOS
00325                                           ! 165 static void biosfn_load_text_user_pat();
00326                                           !BCC_EOS
00327                                           ! 166 static void biosfn_load_text_8_14_pat();
00328                                           !BCC_EOS
00329                                           ! 167 static void biosfn_load_text_8_8_pat();
00330                                           !BCC_EOS
00331                                           ! 168 static void biosfn_load_text_8_16_pat();
00332                                           !BCC_EOS
00333                                           ! 169 static void biosfn_load_gfx_8_8_chars();
00334                                           !BCC_EOS
00335                                           ! 170 static void biosfn_load_gfx_user_chars();
00336                                           !BCC_EOS
00337                                           ! 171 static void biosfn_load_gfx_8_14_chars();
00338                                           !BCC_EOS
00339                                           ! 172 static void biosfn_load_gfx_8_8_dd_chars();
00340                                           !BCC_EOS
00341                                           ! 173 static void biosfn_load_gfx_8_16_chars();
00342                                           !BCC_EOS
00343                                           ! 174 static void biosfn_get_font_info();
00344                                           !BCC_EOS
00345                                           ! 175 static void biosfn_alternate_prtsc();
00346                                           !BCC_EOS
00347                                           ! 176 static void biosfn_switch_video_interface();
00348                                           !BCC_EOS
00349                                           ! 177 static void biosfn_enable_video_refresh_control();
00350                                           !BCC_EOS
00351                                           ! 178 static void biosfn_write_string();
00352                                           !BCC_EOS
00353                                           ! 179 static void biosfn_read_state_info();
00354                                           !BCC_EOS
00355                                           ! 180 static void biosfn_read_video_state_size();
00356                                           !BCC_EOS
00357                                           ! 181 static Bit16u biosfn_save_video_state();
00358                                           !BCC_EOS
00359                                           ! 182 static Bit16u biosfn_restore_video_state();
00360                                           !BCC_EOS
00361                                           ! 183 extern Bit8u video_save_pointer_table[];
00362                                           !BCC_EOS
00363                                           ! 184 #asm
00364                                           !BCC_ASM
00365                                           MACRO SET_INT_VECTOR
00366                                             push ds
00367                                             xor ax, ax
00368                                             mov ds, ax
00369                                             mov ax, ?3
00370                                             mov ?1*4, ax
00371                                             mov ax, ?2
00372                                             mov ?1*4+2, ax
00373                                             pop ds
00374                                           MEND
00375                                           ! 195 endasm
00376                                           !BCC_ENDASM
00377                                           ! 196 #asm
00378                                           !BCC_ASM
00379                                           
00380 0000                                      .rom
00381 0000                                      .org 0
00382                                           use16 386
00383                       00000000            vgabios_start:
00384 0000                        55            .byte 0x55, 0xaa
00385 0002                        40            .byte 0x40
00386                       00000003            vgabios_entry_point:
00387 0003           E9         0122              jmp vgabios_init_func
00388 0018                                      .org 0x18
00389 0018                      0110            .word vgabios_pci_data
00390 001E                                      .org 0x1e
00391 001E                        49            .ascii "IBM"
00392 0021                        00            .byte 0x00
00393                       00000022            vgabios_name:
00394 0022                        50            .ascii "Plex86/Bochs VGABios"
00395 0036                        20            .ascii " (PCI)"
00396 003C                        20            .ascii " "
00397 003D                        00            .byte 0x00
00398                       0000003E            vgabios_version:
00399 003E                        63            .ascii "current-cvs"
00400 0049                        20            .ascii " "
00401                       0000004A            vgabios_date:
00402 004A                        31            .ascii "18 May 2021"
00403 0055                        0A            .byte 0x0a,0x0d
00404 0057                        00            .byte 0x00
00405                       00000058            vgabios_copyright:
00406 0058                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00407 0081                        0A            .byte 0x0a,0x0d
00408 0083                        00            .byte 0x00
00409                       00000084            vgabios_license:
00410 0084                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00411 00B4                        0A            .byte 0x0a,0x0d
00412 00B6                        0A            .byte 0x0a,0x0d
00413 00B8                        00            .byte 0x00
00414                       000000B9            vgabios_website:
00415 00B9                        50            .ascii "Please visit :"
00416 00C7                        0A            .byte 0x0a,0x0d
00417                                           ;;.ascii " . http://www.plex86.org"
00418                                           ;;.byte 0x0a,0x0d
00419 00C9                        20            .ascii " . http://bochs.sourceforge.net"
00420 00E8                        0A            .byte 0x0a,0x0d
00421 00EA                        20            .ascii " . http://www.nongnu.org/vgabios"
00422 010A                        0A            .byte 0x0a,0x0d
00423 010C                        0A            .byte 0x0a,0x0d
00424 010E                        00            .byte 0x00
00425 010F                  00000004            .align 4
00426                       00000110            vgabios_pci_data:
00427 0110                        50            .ascii "PCIR"
00428 0114                      1234            .word 0x1234
00429 0116                      1111            .word 0x1111
00430 0118                      0000            .word 0
00431 011A                      0018            .word 0x18
00432 011C                        00            .byte 0
00433 011D                        00            .byte 0x0
00434 011E                      0300            .word 0x300
00435 0120                      0040            .word 0x40
00436 0122                      0001            .word 1
00437 0124                        00            .byte 0
00438 0125                        80            .byte 0x80
00439 0126                      0000            .word 0
00440                                           ;; ============================================================================================
00441                                           ;;
00442                                           ;; Init Entry point
00443                                           ;;
00444                                           ;; ============================================================================================
00445                       00000128            vgabios_init_func:
00446                                           ;; init vga card
00447 0128           E8         3480              call init_vga_card
00448                                           ;; init basic bios vars
00449 012B           E8         34DC              call init_bios_area
00450                                           ;; init vbe functions
00451 012E           E8         99DE              call vbe_init
00452                                           ;; set int10 vect
00453                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0131           1E                           push ds
 +a   0132           31C0                         xor ax, ax
 +a   0134           8ED8                         mov ds, ax
 +a   0136           B8                   0152    mov ax,  #vgabios_int10_handler
 +a   0139           A3         0040              mov 0x10*4, ax
 +a   013C           B8                   C000    mov ax,  #0xC000
 +a   013F           A3         0042              mov 0x10*4+2, ax
 +a   0142           1F                           pop ds
00454                                           ;; display splash screen
00455 0143           E8         3518              call _display_splash_screen
00456                                           ;; init video mode and clear the screen
00457 0146           B8                   0003    mov ax,#0x0003
00458 0149           CD                     10    int #0x10
00459                                           ;; show info
00460 014B           E8         3511              call _display_info
00461                                           ;; show vbe info
00462 014E           E8         99EC              call vbe_display_info
00463 0151           CB                           retf
00464                                           ! 282 endasm
00465                                           !BCC_ENDASM
00466                                           ! 283 #asm
00467                                           !BCC_ASM
00468                       00000152            vgabios_int10_handler:
00469 0152           9C                           pushf
00470 0153           06                           push es
00471 0154           1E                           push ds
00472 0155           60                           pusha
00473 0156           BB                   C000    mov bx, #0xc000
00474 0159           8EDB                         mov ds, bx
00475 015B           E8         3546              call _int10_debugmsg
00476 015E           61                           popa
00477 015F           1F                           pop ds
00478 0160           07                           pop es
00479 0161           80FC                   0F    cmp ah, #0x0f
00480 0164           75           06              jne int10_test_1A
00481 0166           E8         61C6              call biosfn_get_video_mode
00482 0169           E9         00C5              jmp int10_end
00483                       0000016C            int10_test_1A:
00484 016C           80FC                   1A    cmp ah, #0x1a
00485 016F           75           06              jne int10_test_0B
00486 0171           E8         6FB1              call biosfn_group_1A
00487 0174           E9         00BA              jmp int10_end
00488                       00000177            int10_test_0B:
00489 0177           80FC                   0B    cmp ah, #0x0b
00490 017A           75           06              jne int10_test_1103
00491 017C           E8         58D2              call biosfn_group_0B
00492 017F           E9         00AF              jmp int10_end
00493                       00000182            int10_test_1103:
00494 0182           3D                   1103    cmp ax, #0x1103
00495 0185           75           06              jne int10_test_12
00496 0187           E8         68A3              call biosfn_set_text_block_specifier
00497 018A           E9         00A4              jmp int10_end
00498                       0000018D            int10_test_12:
00499 018D           80FC                   12    cmp ah, #0x12
00500 0190           75           3E              jne int10_test_101B
00501 0192           80FB                   10    cmp bl, #0x10
00502 0195           75           06              jne int10_test_BL30
00503 0197           E8         6D68              call biosfn_get_ega_info
00504 019A           E9         0094              jmp int10_end
00505                       0000019D            int10_test_BL30:
00506 019D           80FB                   30    cmp bl, #0x30
00507 01A0           75           06              jne int10_test_BL31
00508 01A2           E8         6D88              call biosfn_select_vert_res
00509 01A5           E9         0089              jmp int10_end
00510                       000001A8            int10_test_BL31:
00511 01A8           80FB                   31    cmp bl, #0x31
00512 01AB           75           05              jne int10_test_BL32
00513 01AD           E8         6E06              call biosfn_enable_default_palette_loading
00514 01B0           EB           7F              jmp int10_end
00515                       000001B2            int10_test_BL32:
00516 01B2           80FB                   32    cmp bl, #0x32
00517 01B5           75           05              jne int10_test_BL33
00518 01B7           E8         6E1E              call biosfn_enable_video_addressing
00519 01BA           EB           75              jmp int10_end
00520                       000001BC            int10_test_BL33:
00521 01BC           80FB                   33    cmp bl, #0x33
00522 01BF           75           05              jne int10_test_BL34
00523 01C1           E8         6E32              call biosfn_enable_grayscale_summing
00524 01C4           EB           6B              jmp int10_end
00525                       000001C6            int10_test_BL34:
00526 01C6           80FB                   34    cmp bl, #0x34
00527 01C9           75           58              jne int10_normal
00528 01CB           E8         6E4C              call biosfn_enable_cursor_emulation
00529 01CE           EB           61              jmp int10_end
00530                       000001D0            int10_test_101B:
00531 01D0           3D                   101B    cmp ax, #0x101b
00532 01D3           74           4E              je int10_normal
00533 01D5           80FC                   10    cmp ah, #0x10
00534 01D8           75           05              jne int10_test_4F
00535 01DA           E8         6179              call biosfn_group_10
00536 01DD           EB           52              jmp int10_end
00537                       000001DF            int10_test_4F:
00538 01DF           80FC                   4F    cmp ah, #0x4f
00539 01E2           75           3F              jne int10_normal
00540 01E4           3C                     03    cmp al, #0x03
00541 01E6           75           05              jne int10_test_vbe_05
00542 01E8           E8         9F0F              call vbe_biosfn_return_current_mode
00543 01EB           EB           44              jmp int10_end
00544                       000001ED            int10_test_vbe_05:
00545 01ED           3C                     05    cmp al, #0x05
00546 01EF           75           05              jne int10_test_vbe_06
00547 01F1           E8         A201              call vbe_biosfn_display_window_control
00548 01F4           EB           3B              jmp int10_end
00549                       000001F6            int10_test_vbe_06:
00550 01F6           3C                     06    cmp al, #0x06
00551 01F8           75           05              jne int10_test_vbe_07
00552 01FA           E8         A225              call vbe_biosfn_set_get_logical_scan_line_length
00553 01FD           EB           32              jmp int10_end
00554                       000001FF            int10_test_vbe_07:
00555 01FF           3C                     07    cmp al, #0x07
00556 0201           75           05              jne int10_test_vbe_08
00557 0203           E8         A269              call vbe_biosfn_set_get_display_start
00558 0206           EB           29              jmp int10_end
00559                       00000208            int10_test_vbe_08:
00560 0208           3C                     08    cmp al, #0x08
00561 020A           75           05              jne int10_test_vbe_0A
00562 020C           E8         A28E              call vbe_biosfn_set_get_dac_palette_format
00563 020F           EB           20              jmp int10_end
00564                       00000211            int10_test_vbe_0A:
00565 0211           3C                     0A    cmp al, #0x0A
00566 0213           75           05              jne int10_test_vbe_15
00567 0215           E8         A2BD              call vbe_biosfn_return_protected_mode_interface
00568 0218           EB           17              jmp int10_end
00569                       0000021A            int10_test_vbe_15:
00570 021A           3C                     15    cmp al, #0x15
00571 021C           75           05              jne int10_normal
00572 021E           E8         A34D              call vbe_biosfn_display_identification_extensions
00573 0221           EB           0E              jmp int10_end
00574                       00000223            int10_normal:
00575 0223           06                           push es
00576 0224           1E                           push ds
00577 0225           60                           pusha
00578                                           ;; We have to set ds to access the right data segment
00579 0226           BB                   C000    mov bx, #0xc000
00580 0229           8EDB                         mov ds, bx
00581 022B           E8         34A7              call _int10_func
00582 022E           61                           popa
00583 022F           1F                           pop ds
00584 0230           07                           pop es
00585                       00000231            int10_end:
00586 0231           9D                           popf
00587 0232           CF                           iret
00588                                           ! 404 endasm
00589                                           !BCC_ENDASM
00590                                           ! 405 typedef struct
00591                                           ! 406 {Bit8u svgamode;
00592                                           !BCC_EOS
00593                                           ! 407  Bit8u class;
00594                                           !BCC_EOS
00595                                           ! 408  Bit8u memmodel;
00596                                           !BCC_EOS
00597                                           ! 409  Bit8u pixbits;
00598                                           !BCC_EOS
00599                                           ! 410  Bit16u sstart;
00600                                           !BCC_EOS
00601                                           ! 411  Bit8u pelmask;
00602                                           !BCC_EOS
00603                                           ! 412  Bit8u dacmodel;
00604                                           !BCC_EOS
00605                                           ! 413 } VGAMODES;
00606                                           !BCC_EOS
00607                                           ! 414 static VGAMODES vga_modes[17 +1]=
00608                                           ! 415 {
00609                                           
00610                       00000233            _vga_modes:
00611                                           ! 416  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00612 0233                        00            .byte	0
00613 0234                        00            .byte	0
00614 0235                        00            .byte	0
00615 0236                        04            .byte	4
00616 0237                      B800            .word	$B800
00617 0239                        FF            .byte	$FF
00618 023A                        02            .byte	2
00619                                           ! 417  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00620 023B                        01            .byte	1
00621 023C                        00            .byte	0
00622 023D                        00            .byte	0
00623 023E                        04            .byte	4
00624 023F                      B800            .word	$B800
00625 0241                        FF            .byte	$FF
00626 0242                        02            .byte	2
00627                                           ! 418  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00628 0243                        02            .byte	2
00629 0244                        00            .byte	0
00630 0245                        00            .byte	0
00631 0246                        04            .byte	4
00632 0247                      B800            .word	$B800
00633 0249                        FF            .byte	$FF
00634 024A                        02            .byte	2
00635                                           ! 419  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00636 024B                        03            .byte	3
00637 024C                        00            .byte	0
00638 024D                        00            .byte	0
00639 024E                        04            .byte	4
00640 024F                      B800            .word	$B800
00641 0251                        FF            .byte	$FF
00642 0252                        02            .byte	2
00643                                           ! 420  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00644 0253                        04            .byte	4
00645 0254                        01            .byte	1
00646 0255                        02            .byte	2
00647 0256                        02            .byte	2
00648 0257                      B800            .word	$B800
00649 0259                        FF            .byte	$FF
00650 025A                        01            .byte	1
00651                                           ! 421  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00652 025B                        05            .byte	5
00653 025C                        01            .byte	1
00654 025D                        02            .byte	2
00655 025E                        02            .byte	2
00656 025F                      B800            .word	$B800
00657 0261                        FF            .byte	$FF
00658 0262                        01            .byte	1
00659                                           ! 422  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00660 0263                        06            .byte	6
00661 0264                        01            .byte	1
00662 0265                        02            .byte	2
00663 0266                        01            .byte	1
00664 0267                      B800            .word	$B800
00665 0269                        FF            .byte	$FF
00666 026A                        01            .byte	1
00667                                           ! 423  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00668 026B                        07            .byte	7
00669 026C                        00            .byte	0
00670 026D                        01            .byte	1
00671 026E                        04            .byte	4
00672 026F                      B000            .word	$B000
00673 0271                        FF            .byte	$FF
00674 0272                        00            .byte	0
00675                                           ! 424  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00676 0273                        0D            .byte	$D
00677 0274                        01            .byte	1
00678 0275                        04            .byte	4
00679 0276                        04            .byte	4
00680 0277                      A000            .word	$A000
00681 0279                        FF            .byte	$FF
00682 027A                        01            .byte	1
00683                                           ! 425  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00684 027B                        0E            .byte	$E
00685 027C                        01            .byte	1
00686 027D                        04            .byte	4
00687 027E                        04            .byte	4
00688 027F                      A000            .word	$A000
00689 0281                        FF            .byte	$FF
00690 0282                        01            .byte	1
00691                                           ! 426  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00692 0283                        0F            .byte	$F
00693 0284                        01            .byte	1
00694 0285                        03            .byte	3
00695 0286                        01            .byte	1
00696 0287                      A000            .word	$A000
00697 0289                        FF            .byte	$FF
00698 028A                        00            .byte	0
00699                                           ! 427  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00700 028B                        10            .byte	$10
00701 028C                        01            .byte	1
00702 028D                        04            .byte	4
00703 028E                        04            .byte	4
00704 028F                      A000            .word	$A000
00705 0291                        FF            .byte	$FF
00706 0292                        02            .byte	2
00707                                           ! 428  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00708 0293                        11            .byte	$11
00709 0294                        01            .byte	1
00710 0295                        03            .byte	3
00711 0296                        01            .byte	1
00712 0297                      A000            .word	$A000
00713 0299                        FF            .byte	$FF
00714 029A                        02            .byte	2
00715                                           ! 429 
00716                                           ! 429  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00717 029B                        12            .byte	$12
00718 029C                        01            .byte	1
00719 029D                        04            .byte	4
00720 029E                        04            .byte	4
00721 029F                      A000            .word	$A000
00722 02A1                        FF            .byte	$FF
00723 02A2                        02            .byte	2
00724                                           ! 430  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00725 02A3                        13            .byte	$13
00726 02A4                        01            .byte	1
00727 02A5                        05            .byte	5
00728 02A6                        08            .byte	8
00729 02A7                      A000            .word	$A000
00730 02A9                        FF            .byte	$FF
00731 02AA                        03            .byte	3
00732                                           ! 431  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00733 02AB                        6A            .byte	$6A
00734 02AC                        01            .byte	1
00735 02AD                        04            .byte	4
00736 02AE                        04            .byte	4
00737 02AF                      A000            .word	$A000
00738 02B1                        FF            .byte	$FF
00739 02B2                        02            .byte	2
00740                                           ! 432  {0x21, 0x00, 0x00, 4, 0xA000, 0xFF, 0x02},
00741 02B3                        21            .byte	$21
00742 02B4                        00            .byte	0
00743 02B5                        00            .byte	0
00744 02B6                        04            .byte	4
00745 02B7                      A000            .word	$A000
00746 02B9                        FF            .byte	$FF
00747 02BA                        02            .byte	2
00748                                           ! 433  {0x22 , 0x00, 0x00, 4, 0xB800, 0xFF, 0x02}
00749 02BB                        22            .byte	$22
00750 02BC                        00            .byte	0
00751 02BD                        00            .byte	0
00752 02BE                        04            .byte	4
00753 02BF                      B800            .word	$B800
00754 02C1                        FF            .byte	$FF
00755 02C2                        02            .byte	2
00756                                           ! 434 };
00757                                           !BCC_EOS
00758                                           ! 435 static Bit8u line_to_vpti[17 +1]={
00759                       000002C3            _line_to_vpti:
00760                                           ! 436     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00761 02C3                        17            .byte	$17
00762 02C4                        17            .byte	$17
00763 02C5                        18            .byte	$18
00764 02C6                        18            .byte	$18
00765 02C7                        04            .byte	4
00766 02C8                        05            .byte	5
00767 02C9                        06            .byte	6
00768 02CA                        07            .byte	7
00769                                           ! 437     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00770 02CB                        0D            .byte	$D
00771 02CC                        0E            .byte	$E
00772 02CD                        11            .byte	$11
00773 02CE                        12            .byte	$12
00774 02CF                        1A            .byte	$1A
00775 02D0                        1B            .byte	$1B
00776 02D1                        1C            .byte	$1C
00777 02D2                        1D            .byte	$1D
00778                                           ! 438     0x18, 0x15
00779 02D3                        18            .byte	$18
00780                                           ! 439 };
00781 02D4                        15            .byte	$15
00782                                           !BCC_EOS
00783                                           ! 440 static Bit8u dac_regs[3 +1]=
00784                                           ! 441 {0x3f,0x3f,0x3f,0xff};
00785                       000002D5            _dac_regs:
00786 02D5                        3F            .byte	$3F
00787 02D6                        3F            .byte	$3F
00788 02D7                        3F            .byte	$3F
00789 02D8                        FF            .byte	$FF
00790                                           !BCC_EOS
00791                                           ! 442 typedef struct {
00792                                           ! 443     Bit8u twidth;
00793                                           !BCC_EOS
00794                                           ! 444     Bit8u theightm1;
00795                                           !BCC_EOS
00796                                           ! 445     Bit8u cheight;
00797                                           !BCC_EOS
00798                                           ! 446     Bit8u slength_l;
00799                                           !BCC_EOS
00800                                           ! 447     Bit8u slength_h;
00801                                           !BCC_EOS
00802                                           ! 448     Bit8u sequ_regs[4];
00803                                           !BCC_EOS
00804                                           ! 449     Bit8u miscreg;
00805                                           !BCC_EOS
00806                                           ! 450     Bit8u crtc_regs[25];
00807                                           !BCC_EOS
00808                                           ! 451     Bit8u actl_regs[20];
00809                                           !BCC_EOS
00810                                           ! 452     Bit8u grdc_regs[9];
00811                                           !BCC_EOS
00812                                           ! 453 } VideoParamTableEntry;
00813                                           !BCC_EOS
00814                                           ! 454 static VideoParamTableEntry video_param_table[30] = {
00815                       000002D9            _video_param_table:
00816                                           ! 455 {
00817                                           ! 456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00818 02D9                        00            .byte	0
00819 02DA                        00            .byte	0
00820 02DB                        00            .byte	0
00821 02DC                        00            .byte	0
00822 02DD                        00            .byte	0
00823 02DE                        00            .byte	0
00824 02DF                        00            .byte	0
00825 02E0                        00            .byte	0
00826                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00827 02E1                        00            .byte	0
00828 02E2                        00            .byte	0
00829 02E3                        00            .byte	0
00830 02E4                        00            .byte	0
00831 02E5                        00            .byte	0
00832 02E6                        00            .byte	0
00833 02E7                        00            .byte	0
00834 02E8                        00            .byte	0
00835                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00836 02E9                        00            .byte	0
00837 02EA                        00            .byte	0
00838 02EB                        00            .byte	0
00839 02EC                        00            .byte	0
00840 02ED                        00            .byte	0
00841 02EE                        00            .byte	0
00842 02EF                        00            .byte	0
00843 02F0                        00            .byte	0
00844                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00845 02F1                        00            .byte	0
00846 02F2                        00            .byte	0
00847 02F3                        00            .byte	0
00848 02F4                        00            .byte	0
00849 02F5                        00            .byte	0
00850 02F6                        00            .byte	0
00851 02F7                        00            .byte	0
00852 02F8                        00            .byte	0
00853                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00854 02F9                        00            .byte	0
00855 02FA                        00            .byte	0
00856 02FB                        00            .byte	0
00857 02FC                        00            .byte	0
00858 02FD                        00            .byte	0
00859 02FE                        00            .byte	0
00860 02FF                        00            .byte	0
00861 0300                        00            .byte	0
00862                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00863 0301                        00            .byte	0
00864 0302                        00            .byte	0
00865 0303                        00            .byte	0
00866 0304                        00            .byte	0
00867 0305                        00            .byte	0
00868 0306                        00            .byte	0
00869 0307                        00            .byte	0
00870 0308                        00            .byte	0
00871                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00872 0309                        00            .byte	0
00873 030A                        00            .byte	0
00874 030B                        00            .byte	0
00875 030C                        00            .byte	0
00876 030D                        00            .byte	0
00877 030E                        00            .byte	0
00878 030F                        00            .byte	0
00879 0310                        00            .byte	0
00880                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00881 0311                        00            .byte	0
00882 0312                        00            .byte	0
00883 0313                        00            .byte	0
00884 0314                        00            .byte	0
00885 0315                        00            .byte	0
00886 0316                        00            .byte	0
00887 0317                        00            .byte	0
00888 0318                        00            .byte	0
00889                                           ! 464 },
00890                                           ! 465 {
00891                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00892 0319                        00            .byte	0
00893 031A                        00            .byte	0
00894 031B                        00            .byte	0
00895 031C                        00            .byte	0
00896 031D                        00            .byte	0
00897 031E                        00            .byte	0
00898 031F                        00            .byte	0
00899 0320                        00            .byte	0
00900                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00901 0321                        00            .byte	0
00902 0322                        00            .byte	0
00903 0323                        00            .byte	0
00904 0324                        00            .byte	0
00905 0325                        00            .byte	0
00906 0326                        00            .byte	0
00907 0327                        00            .byte	0
00908 0328                        00            .byte	0
00909                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00910 0329                        00            .byte	0
00911 032A                        00            .byte	0
00912 032B                        00            .byte	0
00913 032C                        00            .byte	0
00914 032D                        00            .byte	0
00915 032E                        00            .byte	0
00916 032F                        00            .byte	0
00917 0330                        00            .byte	0
00918                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00919 0331                        00            .byte	0
00920 0332                        00            .byte	0
00921 0333                        00            .byte	0
00922 0334                        00            .byte	0
00923 0335                        00            .byte	0
00924 0336                        00            .byte	0
00925 0337                        00            .byte	0
00926 0338                        00            .byte	0
00927                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00928 0339                        00            .byte	0
00929 033A                        00            .byte	0
00930 033B                        00            .byte	0
00931 033C                        00            .byte	0
00932 033D                        00            .byte	0
00933 033E                        00            .byte	0
00934 033F                        00            .byte	0
00935 0340                        00            .byte	0
00936                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00937 0341                        00            .byte	0
00938 0342                        00            .byte	0
00939 0343                        00            .byte	0
00940 0344                        00            .byte	0
00941 0345                        00            .byte	0
00942 0346                        00            .byte	0
00943 0347                        00            .byte	0
00944 0348                        00            .byte	0
00945                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00946 0349                        00            .byte	0
00947 034A                        00            .byte	0
00948 034B                        00            .byte	0
00949 034C                        00            .byte	0
00950 034D                        00            .byte	0
00951 034E                        00            .byte	0
00952 034F                        00            .byte	0
00953 0350                        00            .byte	0
00954                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00955 0351                        00            .byte	0
00956 0352                        00            .byte	0
00957 0353                        00            .byte	0
00958 0354                        00            .byte	0
00959 0355                        00            .byte	0
00960 0356                        00            .byte	0
00961 0357                        00            .byte	0
00962 0358                        00            .byte	0
00963                                           ! 474 },
00964                                           ! 475 {
00965                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00966 0359                        00            .byte	0
00967 035A                        00            .byte	0
00968 035B                        00            .byte	0
00969 035C                        00            .byte	0
00970 035D                        00            .byte	0
00971 035E                        00            .byte	0
00972 035F                        00            .byte	0
00973 0360                        00            .byte	0
00974                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00975 0361                        00            .byte	0
00976 0362                        00            .byte	0
00977 0363                        00            .byte	0
00978 0364                        00            .byte	0
00979 0365                        00            .byte	0
00980 0366                        00            .byte	0
00981 0367                        00            .byte	0
00982 0368                        00            .byte	0
00983                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00984 0369                        00            .byte	0
00985 036A                        00            .byte	0
00986 036B                        00            .byte	0
00987 036C                        00            .byte	0
00988 036D                        00            .byte	0
00989 036E                        00            .byte	0
00990 036F                        00            .byte	0
00991 0370                        00            .byte	0
00992                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00993 0371                        00            .byte	0
00994 0372                        00            .byte	0
00995 0373                        00            .byte	0
00996 0374                        00            .byte	0
00997 0375                        00            .byte	0
00998 0376                        00            .byte	0
00999 0377                        00            .byte	0
01000 0378                        00            .byte	0
01001                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01002 0379                        00            .byte	0
01003 037A                        00            .byte	0
01004 037B                        00            .byte	0
01005 037C                        00            .byte	0
01006 037D                        00            .byte	0
01007 037E                        00            .byte	0
01008 037F                        00            .byte	0
01009 0380                        00            .byte	0
01010                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01011 0381                        00            .byte	0
01012 0382                        00            .byte	0
01013 0383                        00            .byte	0
01014 0384                        00            .byte	0
01015 0385                        00            .byte	0
01016 0386                        00            .byte	0
01017 0387                        00            .byte	0
01018 0388                        00            .byte	0
01019                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01020 0389                        00            .byte	0
01021 038A                        00            .byte	0
01022 038B                        00            .byte	0
01023 038C                        00            .byte	0
01024 038D                        00            .byte	0
01025 038E                        00            .byte	0
01026 038F                        00            .byte	0
01027 0390                        00            .byte	0
01028                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01029 0391                        00            .byte	0
01030 0392                        00            .byte	0
01031 0393                        00            .byte	0
01032 0394                        00            .byte	0
01033 0395                        00            .byte	0
01034 0396                        00            .byte	0
01035 0397                        00            .byte	0
01036 0398                        00            .byte	0
01037                                           ! 484 },
01038                                           ! 485 {
01039                                           ! 486  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01040 0399                        00            .byte	0
01041 039A                        00            .byte	0
01042 039B                        00            .byte	0
01043 039C                        00            .byte	0
01044 039D                        00            .byte	0
01045 039E                        00            .byte	0
01046 039F                        00            .byte	0
01047 03A0                        00            .byte	0
01048                                           ! 487  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01049 03A1                        00            .byte	0
01050 03A2                        00            .byte	0
01051 03A3                        00            .byte	0
01052 03A4                        00            .byte	0
01053 03A5                        00            .byte	0
01054 03A6                        00            .byte	0
01055 03A7                        00            .byte	0
01056 03A8                        00            .byte	0
01057                                           ! 488  0x00, 0x00, 
01058 03A9                        00            .byte	0
01059 03AA                        00            .byte	0
01060                                           ! 488 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01061 03AB                        00            .byte	0
01062 03AC                        00            .byte	0
01063 03AD                        00            .byte	0
01064 03AE                        00            .byte	0
01065 03AF                        00            .byte	0
01066 03B0                        00            .byte	0
01067                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01068 03B1                        00            .byte	0
01069 03B2                        00            .byte	0
01070 03B3                        00            .byte	0
01071 03B4                        00            .byte	0
01072 03B5                        00            .byte	0
01073 03B6                        00            .byte	0
01074 03B7                        00            .byte	0
01075 03B8                        00            .byte	0
01076                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01077 03B9                        00            .byte	0
01078 03BA                        00            .byte	0
01079 03BB                        00            .byte	0
01080 03BC                        00            .byte	0
01081 03BD                        00            .byte	0
01082 03BE                        00            .byte	0
01083 03BF                        00            .byte	0
01084 03C0                        00            .byte	0
01085                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01086 03C1                        00            .byte	0
01087 03C2                        00            .byte	0
01088 03C3                        00            .byte	0
01089 03C4                        00            .byte	0
01090 03C5                        00            .byte	0
01091 03C6                        00            .byte	0
01092 03C7                        00            .byte	0
01093 03C8                        00            .byte	0
01094                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01095 03C9                        00            .byte	0
01096 03CA                        00            .byte	0
01097 03CB                        00            .byte	0
01098 03CC                        00            .byte	0
01099 03CD                        00            .byte	0
01100 03CE                        00            .byte	0
01101 03CF                        00            .byte	0
01102 03D0                        00            .byte	0
01103                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01104 03D1                        00            .byte	0
01105 03D2                        00            .byte	0
01106 03D3                        00            .byte	0
01107 03D4                        00            .byte	0
01108 03D5                        00            .byte	0
01109 03D6                        00            .byte	0
01110 03D7                        00            .byte	0
01111 03D8                        00            .byte	0
01112                                           ! 494 },
01113                                           ! 495 {
01114                                           ! 496  40, 24, 8, 0x00, 0x40,
01115 03D9                        28            .byte	$28
01116 03DA                        18            .byte	$18
01117 03DB                        08            .byte	8
01118 03DC                        00            .byte	0
01119 03DD                        40            .byte	$40
01120                                           ! 497  0x09, 0x03, 0x00, 0x02,
01121 03DE                        09            .byte	9
01122 03DF                        03            .byte	3
01123 03E0                        00            .byte	0
01124 03E1                        02            .byte	2
01125                                           ! 498  0x63,
01126 03E2                        63            .byte	$63
01127                                           ! 499  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01128 03E3                        2D            .byte	$2D
01129 03E4                        27            .byte	$27
01130 03E5                        28            .byte	$28
01131 03E6                        90            .byte	$90
01132 03E7                        2B            .byte	$2B
01133 03E8                        80            .byte	$80
01134 03E9                        BF            .byte	$BF
01135 03EA                        1F            .byte	$1F
01136                                           ! 500  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01137 03EB                        00            .byte	0
01138 03EC                        C1            .byte	$C1
01139 03ED                        00            .byte	0
01140 03EE                        00            .byte	0
01141 03EF                        00            .byte	0
01142 03F0                        00            .byte	0
01143 03F1                        00            .byte	0
01144 03F2                        00            .byte	0
01145                                           ! 501  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01146 03F3                        9C            .byte	$9C
01147 03F4                        8E            .byte	$8E
01148 03F5                        8F            .byte	$8F
01149 03F6                        14            .byte	$14
01150 03F7                        00            .byte	0
01151 03F8                        96            .byte	$96
01152 03F9                        B9            .byte	$B9
01153 03FA                        A2            .byte	$A2
01154                                           ! 502  0xff,
01155 03FB                        FF            .byte	$FF
01156                                           ! 503  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01157 03FC                        00            .byte	0
01158 03FD                        13            .byte	$13
01159 03FE                        15            .byte	$15
01160 03FF                        17            .byte	$17
01161 0400                        02            .byte	2
01162 0401                        04            .byte	4
01163 0402                        06            .byte	6
01164 0403                        07            .byte	7
01165                                           ! 504  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01166 0404                        10            .byte	$10
01167 0405                        11            .byte	$11
01168 0406                        12            .byte	$12
01169 0407                        13            .byte	$13
01170 0408                        14            .byte	$14
01171 0409                        15            .byte	$15
01172 040A                        16            .byte	$16
01173 040B                        17            .byte	$17
01174                                           ! 505  0x01, 0x00, 0x03, 0x00,
01175 040C                        01            .byte	1
01176 040D                        00            .byte	0
01177 040E                        03            .byte	3
01178 040F                        00            .byte	0
01179                                           ! 506  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01180 0410                        00            .byte	0
01181 0411                        00            .byte	0
01182 0412                        00            .byte	0
01183 0413                        00            .byte	0
01184 0414                        00            .byte	0
01185 0415                        30            .byte	$30
01186 0416                        0F            .byte	$F
01187 0417                        0F            .byte	$F
01188 0418                        FF            .byte	$FF
01189                                           ! 507 },
01190                                           ! 508 {
01191                                           ! 509  40, 24, 8, 0x00, 0x40,
01192 0419                        28            .byte	$28
01193 041A                        18            .byte	$18
01194 041B                        08            .byte	8
01195 041C                        00            .byte	0
01196 041D                        40            .byte	$40
01197                                           ! 510  0x09, 0x03, 0x00, 0x02,
01198 041E                        09            .byte	9
01199 041F                        03            .byte	3
01200 0420                        00            .byte	0
01201 0421                        02            .byte	2
01202                                           ! 511  0x63,
01203 0422                        63            .byte	$63
01204                                           ! 512  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01205 0423                        2D            .byte	$2D
01206 0424                        27            .byte	$27
01207 0425                        28            .byte	$28
01208 0426                        90            .byte	$90
01209 0427                        2B            .byte	$2B
01210 0428                        80            .byte	$80
01211 0429                        BF            .byte	$BF
01212 042A                        1F            .byte	$1F
01213                                           ! 513  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01214 042B                        00            .byte	0
01215 042C                        C1            .byte	$C1
01216 042D                        00            .byte	0
01217 042E                        00            .byte	0
01218 042F                        00            .byte	0
01219 0430                        00            .byte	0
01220 0431                        00            .byte	0
01221 0432                        00            .byte	0
01222                                           ! 514  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01223 0433                        9C            .byte	$9C
01224 0434                        8E            .byte	$8E
01225 0435                        8F            .byte	$8F
01226 0436                        14            .byte	$14
01227 0437                        00            .byte	0
01228 0438                        96            .byte	$96
01229 0439                        B9            .byte	$B9
01230 043A                        A2            .byte	$A2
01231                                           ! 515  0xff,
01232 043B                        FF            .byte	$FF
01233                                           ! 516  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01234 043C                        00            .byte	0
01235 043D                        13            .byte	$13
01236 043E                        15            .byte	$15
01237 043F                        17            .byte	$17
01238 0440                        02            .byte	2
01239 0441                        04            .byte	4
01240 0442                        06            .byte	6
01241 0443                        07            .byte	7
01242                                           ! 517  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01243 0444                        10            .byte	$10
01244 0445                        11            .byte	$11
01245 0446                        12            .byte	$12
01246 0447                        13            .byte	$13
01247 0448                        14            .byte	$14
01248 0449                        15            .byte	$15
01249 044A                        16            .byte	$16
01250 044B                        17            .byte	$17
01251                                           ! 518  0x01, 0x00, 0x03, 0x00,
01252 044C                        01            .byte	1
01253 044D                        00            .byte	0
01254 044E                        03            .byte	3
01255 044F                        00            .byte	0
01256                                           ! 519  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01257 0450                        00            .byte	0
01258 0451                        00            .byte	0
01259 0452                        00            .byte	0
01260 0453                        00            .byte	0
01261 0454                        00            .byte	0
01262 0455                        30            .byte	$30
01263 0456                        0F            .byte	$F
01264 0457                        0F            .byte	$F
01265 0458                        FF            .byte	$FF
01266                                           ! 520 },
01267                                           ! 521 {
01268                                           ! 522  80, 24, 8, 0x00, 0x40,
01269 0459                        50            .byte	$50
01270 045A                        18            .byte	$18
01271 045B                        08            .byte	8
01272 045C                        00            .byte	0
01273 045D                        40            .byte	$40
01274                                           ! 523  0x01, 0x01, 0x00, 0x06,
01275 045E                        01            .byte	1
01276 045F                        01            .byte	1
01277 0460                        00            .byte	0
01278 0461                        06            .byte	6
01279                                           ! 524  0x63,
01280 0462                        63            .byte	$63
01281                                           ! 525  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01282 0463                        5F            .byte	$5F
01283 0464                        4F            .byte	$4F
01284 0465                        50            .byte	$50
01285 0466                        82            .byte	$82
01286 0467                        54            .byte	$54
01287 0468                        80            .byte	$80
01288 0469                        BF            .byte	$BF
01289 046A                        1F            .byte	$1F
01290                                           ! 526  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01291 046B                        00            .byte	0
01292 046C                        C1            .byte	$C1
01293 046D                        00            .byte	0
01294 046E                        00            .byte	0
01295 046F                        00            .byte	0
01296 0470                        00            .byte	0
01297 0471                        00            .byte	0
01298 0472                        00            .byte	0
01299                                           ! 527  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01300 0473                        9C            .byte	$9C
01301 0474                        8E            .byte	$8E
01302 0475                        8F            .byte	$8F
01303 0476                        28            .byte	$28
01304 0477                        00            .byte	0
01305 0478                        96            .byte	$96
01306 0479                        B9            .byte	$B9
01307 047A                        C2            .byte	$C2
01308                                           ! 528  0xff,
01309 047B                        FF            .byte	$FF
01310                                           ! 529  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01311 047C                        00            .byte	0
01312 047D                        17            .byte	$17
01313 047E                        17            .byte	$17
01314 047F                        17            .byte	$17
01315 0480                        17            .byte	$17
01316 0481                        17            .byte	$17
01317 0482                        17            .byte	$17
01318 0483                        17            .byte	$17
01319                                           ! 530  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01320 0484                        17            .byte	$17
01321 0485                        17            .byte	$17
01322 0486                        17            .byte	$17
01323 0487                        17            .byte	$17
01324 0488                        17            .byte	$17
01325 0489                        17            .byte	$17
01326 048A                        17            .byte	$17
01327 048B                        17            .byte	$17
01328                                           ! 531  0x01, 0x00, 0x01, 0x00,
01329 048C                        01            .byte	1
01330 048D                        00            .byte	0
01331 048E                        01            .byte	1
01332 048F                        00            .byte	0
01333                                           ! 532  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01334 0490                        00            .byte	0
01335 0491                        00            .byte	0
01336 0492                        00            .byte	0
01337 0493                        00            .byte	0
01338 0494                        00            .byte	0
01339 0495                        00            .byte	0
01340 0496                        0D            .byte	$D
01341 0497                        0F            .byte	$F
01342 0498                        FF            .byte	$FF
01343                                           ! 533 },
01344                                           ! 534 {
01345                                           ! 535  80, 24, 16, 0x00, 0x10,
01346 0499                        50            .byte	$50
01347 049A                        18            .byte	$18
01348 049B                        10            .byte	$10
01349 049C                        00            .byte	0
01350 049D                        10            .byte	$10
01351                                           ! 536  0x00, 0x03, 0x00, 0x02,
01352 049E                        00            .byte	0
01353 049F                        03            .byte	3
01354 04A0                        00            .byte	0
01355 04A1                        02            .byte	2
01356                                           ! 537  0x66,
01357 04A2                        66            .byte	$66
01358                                           ! 538  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01359 04A3                        5F            .byte	$5F
01360 04A4                        4F            .byte	$4F
01361 04A5                        50            .byte	$50
01362 04A6                        82            .byte	$82
01363 04A7                        55            .byte	$55
01364 04A8                        81            .byte	$81
01365 04A9                        BF            .byte	$BF
01366 04AA                        1F            .byte	$1F
01367                                           ! 539  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01368 04AB                        00            .byte	0
01369 04AC                        4F            .byte	$4F
01370 04AD                        0D            .byte	$D
01371 04AE                        0E            .byte	$E
01372 04AF                        00            .byte	0
01373 04B0                        00            .byte	0
01374 04B1                        00            .byte	0
01375 04B2                        00            .byte	0
01376                                           ! 540  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01377 04B3                        9C            .byte	$9C
01378 04B4                        8E            .byte	$8E
01379 04B5                        8F            .byte	$8F
01380 04B6                        28            .byte	$28
01381 04B7                        0F            .byte	$F
01382 04B8                        96            .byte	$96
01383 04B9                        B9            .byte	$B9
01384 04BA                        A3            .byte	$A3
01385                                           ! 541  0xff,
01386 04BB                        FF            .byte	$FF
01387                                           ! 542  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01388 04BC                        00            .byte	0
01389 04BD                        08            .byte	8
01390 04BE                        08            .byte	8
01391 04BF                        08            .byte	8
01392 04C0                        08            .byte	8
01393 04C1                        08            .byte	8
01394 04C2                        08            .byte	8
01395 04C3                        08            .byte	8
01396                                           ! 543  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01397 04C4                        10            .byte	$10
01398 04C5                        18            .byte	$18
01399 04C6                        18            .byte	$18
01400 04C7                        18            .byte	$18
01401 04C8                        18            .byte	$18
01402 04C9                        18            .byte	$18
01403 04CA                        18            .byte	$18
01404 04CB                        18            .byte	$18
01405                                           ! 544  0x0e, 0x00, 0x0f, 0x08,
01406 04CC                        0E            .byte	$E
01407 04CD                        00            .byte	0
01408 04CE                        0F            .byte	$F
01409 04CF                        08            .byte	8
01410                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01411 04D0                        00            .byte	0
01412 04D1                        00            .byte	0
01413 04D2                        00            .byte	0
01414 04D3                        00            .byte	0
01415 04D4                        00            .byte	0
01416 04D5                        10            .byte	$10
01417 04D6                        0A            .byte	$A
01418 04D7                        0F            .byte	$F
01419 04D8                        FF            .byte	$FF
01420                                           ! 546 },
01421                                           ! 547 {
01422                                           ! 548  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01423 04D9                        00            .byte	0
01424 04DA                        00            .byte	0
01425 04DB                        00            .byte	0
01426 04DC                        00            .byte	0
01427 04DD                        00            .byte	0
01428 04DE                        00            .byte	0
01429 04DF                        00            .byte	0
01430 04E0                        00            .byte	0
01431                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01432 04E1                        00            .byte	0
01433 04E2                        00            .byte	0
01434 04E3                        00            .byte	0
01435 04E4                        00            .byte	0
01436 04E5                        00            .byte	0
01437 04E6                        00            .byte	0
01438 04E7                        00            .byte	0
01439 04E8                        00            .byte	0
01440                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01441 04E9                        00            .byte	0
01442 04EA                        00            .byte	0
01443 04EB                        00            .byte	0
01444 04EC                        00            .byte	0
01445 04ED                        00            .byte	0
01446 04EE                        00            .byte	0
01447 04EF                        00            .byte	0
01448 04F0                        00            .byte	0
01449                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01450 04F1                        00            .byte	0
01451 04F2                        00            .byte	0
01452 04F3                        00            .byte	0
01453 04F4                        00            .byte	0
01454 04F5                        00            .byte	0
01455 04F6                        00            .byte	0
01456                                           ! 551  0x00,
01457 04F7                        00            .byte	0
01458 04F8                        00            .byte	0
01459                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01460 04F9                        00            .byte	0
01461 04FA                        00            .byte	0
01462 04FB                        00            .byte	0
01463 04FC                        00            .byte	0
01464 04FD                        00            .byte	0
01465 04FE                        00            .byte	0
01466 04FF                        00            .byte	0
01467 0500                        00            .byte	0
01468                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01469 0501                        00            .byte	0
01470 0502                        00            .byte	0
01471 0503                        00            .byte	0
01472 0504                        00            .byte	0
01473 0505                        00            .byte	0
01474 0506                        00            .byte	0
01475 0507                        00            .byte	0
01476 0508                        00            .byte	0
01477                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01478 0509                        00            .byte	0
01479 050A                        00            .byte	0
01480 050B                        00            .byte	0
01481 050C                        00            .byte	0
01482 050D                        00            .byte	0
01483 050E                        00            .byte	0
01484 050F                        00            .byte	0
01485 0510                        00            .byte	0
01486                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01487 0511                        00            .byte	0
01488 0512                        00            .byte	0
01489 0513                        00            .byte	0
01490 0514                        00            .byte	0
01491 0515                        00            .byte	0
01492 0516                        00            .byte	0
01493 0517                        00            .byte	0
01494 0518                        00            .byte	0
01495                                           ! 556 },
01496                                           ! 557 {
01497                                           ! 558  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01498 0519                        00            .byte	0
01499 051A                        00            .byte	0
01500 051B                        00            .byte	0
01501 051C                        00            .byte	0
01502 051D                        00            .byte	0
01503 051E                        00            .byte	0
01504 051F                        00            .byte	0
01505 0520                        00            .byte	0
01506                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01507 0521                        00            .byte	0
01508 0522                        00            .byte	0
01509 0523                        00            .byte	0
01510 0524                        00            .byte	0
01511 0525                        00            .byte	0
01512 0526                        00            .byte	0
01513 0527                        00            .byte	0
01514 0528                        00            .byte	0
01515                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01516 0529                        00            .byte	0
01517 052A                        00            .byte	0
01518 052B                        00            .byte	0
01519 052C                        00            .byte	0
01520 052D                        00            .byte	0
01521 052E                        00            .byte	0
01522 052F                        00            .byte	0
01523 0530                        00            .byte	0
01524                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01525 0531                        00            .byte	0
01526 0532                        00            .byte	0
01527 0533                        00            .byte	0
01528 0534                        00            .byte	0
01529 0535                        00            .byte	0
01530 0536                        00            .byte	0
01531 0537                        00            .byte	0
01532 0538                        00            .byte	0
01533                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01534 0539                        00            .byte	0
01535 053A                        00            .byte	0
01536 053B                        00            .byte	0
01537 053C                        00            .byte	0
01538 053D                        00            .byte	0
01539 053E                        00            .byte	0
01540 053F                        00            .byte	0
01541 0540                        00            .byte	0
01542                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01543 0541                        00            .byte	0
01544 0542                        00            .byte	0
01545 0543                        00            .byte	0
01546 0544                        00            .byte	0
01547 0545                        00            .byte	0
01548 0546                        00            .byte	0
01549 0547                        00            .byte	0
01550 0548                        00            .byte	0
01551                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01552 0549                        00            .byte	0
01553 054A                        00            .byte	0
01554 054B                        00            .byte	0
01555 054C                        00            .byte	0
01556 054D                        00            .byte	0
01557 054E                        00            .byte	0
01558 054F                        00            .byte	0
01559 0550                        00            .byte	0
01560                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01561 0551                        00            .byte	0
01562 0552                        00            .byte	0
01563 0553                        00            .byte	0
01564 0554                        00            .byte	0
01565 0555                        00            .byte	0
01566 0556                        00            .byte	0
01567 0557                        00            .byte	0
01568 0558                        00            .byte	0
01569                                           ! 566 },
01570                                           ! 567 {
01571                                           ! 568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01572 0559                        00            .byte	0
01573 055A                        00            .byte	0
01574 055B                        00            .byte	0
01575 055C                        00            .byte	0
01576 055D                        00            .byte	0
01577 055E                        00            .byte	0
01578 055F                        00            .byte	0
01579 0560                        00            .byte	0
01580                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01581 0561                        00            .byte	0
01582 0562                        00            .byte	0
01583 0563                        00            .byte	0
01584 0564                        00            .byte	0
01585 0565                        00            .byte	0
01586 0566                        00            .byte	0
01587 0567                        00            .byte	0
01588 0568                        00            .byte	0
01589                                           ! 570  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01590 0569                        00            .byte	0
01591 056A                        00            .byte	0
01592 056B                        00            .byte	0
01593 056C                        00            .byte	0
01594 056D                        00            .byte	0
01595 056E                        00            .byte	0
01596 056F                        00            .byte	0
01597 0570                        00            .byte	0
01598                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01599 0571                        00            .byte	0
01600 0572                        00            .byte	0
01601 0573                        00            .byte	0
01602 0574                        00            .byte	0
01603 0575                        00            .byte	0
01604 0576                        00            .byte	0
01605 0577                        00            .byte	0
01606 0578                        00            .byte	0
01607                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01608 0579                        00            .byte	0
01609 057A                        00            .byte	0
01610 057B                        00            .byte	0
01611 057C                        00            .byte	0
01612 057D                        00            .byte	0
01613 057E                        00            .byte	0
01614 057F                        00            .byte	0
01615 0580                        00            .byte	0
01616                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01617 0581                        00            .byte	0
01618 0582                        00            .byte	0
01619 0583                        00            .byte	0
01620 0584                        00            .byte	0
01621 0585                        00            .byte	0
01622 0586                        00            .byte	0
01623 0587                        00            .byte	0
01624 0588                        00            .byte	0
01625                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01626 0589                        00            .byte	0
01627 058A                        00            .byte	0
01628 058B                        00            .byte	0
01629 058C                        00            .byte	0
01630 058D                        00            .byte	0
01631 058E                        00            .byte	0
01632 058F                        00            .byte	0
01633 0590                        00            .byte	0
01634                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01635 0591                        00            .byte	0
01636 0592                        00            .byte	0
01637 0593                        00            .byte	0
01638 0594                        00            .byte	0
01639 0595                        00            .byte	0
01640 0596                        00            .byte	0
01641 0597                        00            .byte	0
01642 0598                        00            .byte	0
01643                                           ! 576 },
01644                                           ! 577 {
01645                                           ! 578  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01646 0599                        00            .byte	0
01647 059A                        00            .byte	0
01648 059B                        00            .byte	0
01649 059C                        00            .byte	0
01650 059D                        00            .byte	0
01651 059E                        00            .byte	0
01652 059F                        00            .byte	0
01653 05A0                        00            .byte	0
01654                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01655 05A1                        00            .byte	0
01656 05A2                        00            .byte	0
01657 05A3                        00            .byte	0
01658 05A4                        00            .byte	0
01659 05A5                        00            .byte	0
01660 05A6                        00            .byte	0
01661 05A7                        00            .byte	0
01662 05A8                        00            .byte	0
01663                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01664 05A9                        00            .byte	0
01665 05AA                        00            .byte	0
01666 05AB                        00            .byte	0
01667 05AC                        00            .byte	0
01668 05AD                        00            .byte	0
01669 05AE                        00            .byte	0
01670 05AF                        00            .byte	0
01671 05B0                        00            .byte	0
01672                                           ! 581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01673 05B1                        00            .byte	0
01674 05B2                        00            .byte	0
01675 05B3                        00            .byte	0
01676 05B4                        00            .byte	0
01677 05B5                        00            .byte	0
01678 05B6                        00            .byte	0
01679 05B7                        00            .byte	0
01680 05B8                        00            .byte	0
01681                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01682 05B9                        00            .byte	0
01683 05BA                        00            .byte	0
01684 05BB                        00            .byte	0
01685 05BC                        00            .byte	0
01686 05BD                        00            .byte	0
01687 05BE                        00            .byte	0
01688 05BF                        00            .byte	0
01689 05C0                        00            .byte	0
01690                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01691 05C1                        00            .byte	0
01692 05C2                        00            .byte	0
01693 05C3                        00            .byte	0
01694 05C4                        00            .byte	0
01695 05C5                        00            .byte	0
01696 05C6                        00            .byte	0
01697 05C7                        00            .byte	0
01698 05C8                        00            .byte	0
01699                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01700 05C9                        00            .byte	0
01701 05CA                        00            .byte	0
01702 05CB                        00            .byte	0
01703 05CC                        00            .byte	0
01704 05CD                        00            .byte	0
01705 05CE                        00            .byte	0
01706 05CF                        00            .byte	0
01707 05D0                        00            .byte	0
01708                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01709 05D1                        00            .byte	0
01710 05D2                        00            .byte	0
01711 05D3                        00            .byte	0
01712 05D4                        00            .byte	0
01713 05D5                        00            .byte	0
01714 05D6                        00            .byte	0
01715 05D7                        00            .byte	0
01716 05D8                        00            .byte	0
01717                                           ! 586 },
01718                                           ! 587 {
01719                                           ! 588  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01720 05D9                        00            .byte	0
01721 05DA                        00            .byte	0
01722 05DB                        00            .byte	0
01723 05DC                        00            .byte	0
01724 05DD                        00            .byte	0
01725 05DE                        00            .byte	0
01726 05DF                        00            .byte	0
01727 05E0                        00            .byte	0
01728                                           ! 589  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01729 05E1                        00            .byte	0
01730 05E2                        00            .byte	0
01731 05E3                        00            .byte	0
01732 05E4                        00            .byte	0
01733 05E5                        00            .byte	0
01734 05E6                        00            .byte	0
01735 05E7                        00            .byte	0
01736 05E8                        00            .byte	0
01737                                           ! 590  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01738 05E9                        00            .byte	0
01739 05EA                        00            .byte	0
01740 05EB                        00            .byte	0
01741 05EC                        00            .byte	0
01742 05ED                        00            .byte	0
01743 05EE                        00            .byte	0
01744 05EF                        00            .byte	0
01745 05F0                        00            .byte	0
01746                                           ! 591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01747 05F1                        00            .byte	0
01748 05F2                        00            .byte	0
01749 05F3                        00            .byte	0
01750 05F4                        00            .byte	0
01751 05F5                        00            .byte	0
01752 05F6                        00            .byte	0
01753 05F7                        00            .byte	0
01754 05F8                        00            .byte	0
01755                                           ! 592  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01756 05F9                        00            .byte	0
01757 05FA                        00            .byte	0
01758 05FB                        00            .byte	0
01759 05FC                        00            .byte	0
01760 05FD                        00            .byte	0
01761 05FE                        00            .byte	0
01762 05FF                        00            .byte	0
01763 0600                        00            .byte	0
01764                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01765 0601                        00            .byte	0
01766 0602                        00            .byte	0
01767 0603                        00            .byte	0
01768 0604                        00            .byte	0
01769 0605                        00            .byte	0
01770 0606                        00            .byte	0
01771 0607                        00            .byte	0
01772 0608                        00            .byte	0
01773                                           ! 594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01774 0609                        00            .byte	0
01775 060A                        00            .byte	0
01776 060B                        00            .byte	0
01777 060C                        00            .byte	0
01778 060D                        00            .byte	0
01779 060E                        00            .byte	0
01780 060F                        00            .byte	0
01781 0610                        00            .byte	0
01782                                           ! 595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01783 0611                        00            .byte	0
01784 0612                        00            .byte	0
01785 0613                        00            .byte	0
01786 0614                        00            .byte	0
01787 0615                        00            .byte	0
01788 0616                        00            .byte	0
01789 0617                        00            .byte	0
01790 0618                        00            .byte	0
01791                                           ! 596 },
01792                                           ! 597 {
01793                                           ! 598  40, 24, 8, 0x00, 0x20,
01794 0619                        28            .byte	$28
01795 061A                        18            .byte	$18
01796 061B                        08            .byte	8
01797 061C                        00            .byte	0
01798 061D                        20            .byte	$20
01799                                           ! 599  0x09, 0x0f, 0x00, 0x06,
01800 061E                        09            .byte	9
01801 061F                        0F            .byte	$F
01802 0620                        00            .byte	0
01803 0621                        06            .byte	6
01804                                           ! 600  0x63,
01805 0622                        63            .byte	$63
01806                                           ! 601  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01807 0623                        2D            .byte	$2D
01808 0624                        27            .byte	$27
01809 0625                        28            .byte	$28
01810 0626                        90            .byte	$90
01811 0627                        2B            .byte	$2B
01812 0628                        80            .byte	$80
01813 0629                        BF            .byte	$BF
01814 062A                        1F            .byte	$1F
01815                                           ! 602  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01816 062B                        00            .byte	0
01817 062C                        C0            .byte	$C0
01818 062D                        00            .byte	0
01819 062E                        00            .byte	0
01820 062F                        00            .byte	0
01821 0630                        00            .byte	0
01822 0631                        00            .byte	0
01823 0632                        00            .byte	0
01824                                           ! 603  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01825 0633                        9C            .byte	$9C
01826 0634                        8E            .byte	$8E
01827 0635                        8F            .byte	$8F
01828 0636                        14            .byte	$14
01829 0637                        00            .byte	0
01830 0638                        96            .byte	$96
01831 0639                        B9            .byte	$B9
01832 063A                        E3            .byte	$E3
01833                                           ! 604  0xff,
01834 063B                        FF            .byte	$FF
01835                                           ! 605  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
01836 063C                        00            .byte	0
01837 063D                        01            .byte	1
01838 063E                        02            .byte	2
01839 063F                        03            .byte	3
01840 0640                        04            .byte	4
01841 0641                        05            .byte	5
01842                                           ! 605  0x07,
01843 0642                        06            .byte	6
01844 0643                        07            .byte	7
01845                                           ! 606  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01846 0644                        10            .byte	$10
01847 0645                        11            .byte	$11
01848 0646                        12            .byte	$12
01849 0647                        13            .byte	$13
01850 0648                        14            .byte	$14
01851 0649                        15            .byte	$15
01852 064A                        16            .byte	$16
01853 064B                        17            .byte	$17
01854                                           ! 607  0x01, 0x00, 0x0f, 0x00,
01855 064C                        01            .byte	1
01856 064D                        00            .byte	0
01857 064E                        0F            .byte	$F
01858 064F                        00            .byte	0
01859                                           ! 608  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01860 0650                        00            .byte	0
01861 0651                        00            .byte	0
01862 0652                        00            .byte	0
01863 0653                        00            .byte	0
01864 0654                        00            .byte	0
01865 0655                        00            .byte	0
01866 0656                        05            .byte	5
01867 0657                        0F            .byte	$F
01868 0658                        FF            .byte	$FF
01869                                           ! 609 },
01870                                           ! 610 {
01871                                           ! 611  80, 24, 8, 0x00, 0x40,
01872 0659                        50            .byte	$50
01873 065A                        18            .byte	$18
01874 065B                        08            .byte	8
01875 065C                        00            .byte	0
01876 065D                        40            .byte	$40
01877                                           ! 612  0x01, 0x0f, 0x00, 0x06,
01878 065E                        01            .byte	1
01879 065F                        0F            .byte	$F
01880 0660                        00            .byte	0
01881 0661                        06            .byte	6
01882                                           ! 613  0x63,
01883 0662                        63            .byte	$63
01884                                           ! 614  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01885 0663                        5F            .byte	$5F
01886 0664                        4F            .byte	$4F
01887 0665                        50            .byte	$50
01888 0666                        82            .byte	$82
01889 0667                        54            .byte	$54
01890 0668                        80            .byte	$80
01891 0669                        BF            .byte	$BF
01892 066A                        1F            .byte	$1F
01893                                           ! 615  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01894 066B                        00            .byte	0
01895 066C                        C0            .byte	$C0
01896 066D                        00            .byte	0
01897 066E                        00            .byte	0
01898 066F                        00            .byte	0
01899 0670                        00            .byte	0
01900 0671                        00            .byte	0
01901 0672                        00            .byte	0
01902                                           ! 616  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01903 0673                        9C            .byte	$9C
01904 0674                        8E            .byte	$8E
01905 0675                        8F            .byte	$8F
01906 0676                        28            .byte	$28
01907 0677                        00            .byte	0
01908 0678                        96            .byte	$96
01909 0679                        B9            .byte	$B9
01910 067A                        E3            .byte	$E3
01911                                           ! 617  0xff,
01912 067B                        FF            .byte	$FF
01913                                           ! 618  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01914 067C                        00            .byte	0
01915 067D                        01            .byte	1
01916 067E                        02            .byte	2
01917 067F                        03            .byte	3
01918 0680                        04            .byte	4
01919 0681                        05            .byte	5
01920 0682                        06            .byte	6
01921 0683                        07            .byte	7
01922                                           ! 619  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01923 0684                        10            .byte	$10
01924 0685                        11            .byte	$11
01925 0686                        12            .byte	$12
01926 0687                        13            .byte	$13
01927 0688                        14            .byte	$14
01928 0689                        15            .byte	$15
01929 068A                        16            .byte	$16
01930 068B                        17            .byte	$17
01931                                           ! 620  0x01, 0x00, 0x0f, 0x00,
01932 068C                        01            .byte	1
01933 068D                        00            .byte	0
01934 068E                        0F            .byte	$F
01935 068F                        00            .byte	0
01936                                           ! 621  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01937 0690                        00            .byte	0
01938 0691                        00            .byte	0
01939 0692                        00            .byte	0
01940 0693                        00            .byte	0
01941 0694                        00            .byte	0
01942 0695                        00            .byte	0
01943 0696                        05            .byte	5
01944 0697                        0F            .byte	$F
01945 0698                        FF            .byte	$FF
01946                                           ! 622 },
01947                                           ! 623 {
01948                                           ! 624  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01949 0699                        00            .byte	0
01950 069A                        00            .byte	0
01951 069B                        00            .byte	0
01952 069C                        00            .byte	0
01953 069D                        00            .byte	0
01954 069E                        00            .byte	0
01955 069F                        00            .byte	0
01956 06A0                        00            .byte	0
01957                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01958 06A1                        00            .byte	0
01959 06A2                        00            .byte	0
01960 06A3                        00            .byte	0
01961 06A4                        00            .byte	0
01962 06A5                        00            .byte	0
01963 06A6                        00            .byte	0
01964 06A7                        00            .byte	0
01965 06A8                        00            .byte	0
01966                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01967 06A9                        00            .byte	0
01968 06AA                        00            .byte	0
01969 06AB                        00            .byte	0
01970 06AC                        00            .byte	0
01971 06AD                        00            .byte	0
01972 06AE                        00            .byte	0
01973 06AF                        00            .byte	0
01974 06B0                        00            .byte	0
01975                                           ! 627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01976 06B1                        00            .byte	0
01977 06B2                        00            .byte	0
01978 06B3                        00            .byte	0
01979 06B4                        00            .byte	0
01980 06B5                        00            .byte	0
01981 06B6                        00            .byte	0
01982 06B7                        00            .byte	0
01983 06B8                        00            .byte	0
01984                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01985 06B9                        00            .byte	0
01986 06BA                        00            .byte	0
01987 06BB                        00            .byte	0
01988 06BC                        00            .byte	0
01989 06BD                        00            .byte	0
01990 06BE                        00            .byte	0
01991 06BF                        00            .byte	0
01992 06C0                        00            .byte	0
01993                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01994 06C1                        00            .byte	0
01995 06C2                        00            .byte	0
01996 06C3                        00            .byte	0
01997 06C4                        00            .byte	0
01998 06C5                        00            .byte	0
01999 06C6                        00            .byte	0
02000 06C7                        00            .byte	0
02001 06C8                        00            .byte	0
02002                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02003 06C9                        00            .byte	0
02004 06CA                        00            .byte	0
02005 06CB                        00            .byte	0
02006 06CC                        00            .byte	0
02007 06CD                        00            .byte	0
02008 06CE                        00            .byte	0
02009 06CF                        00            .byte	0
02010 06D0                        00            .byte	0
02011                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02012 06D1                        00            .byte	0
02013 06D2                        00            .byte	0
02014 06D3                        00            .byte	0
02015 06D4                        00            .byte	0
02016 06D5                        00            .byte	0
02017 06D6                        00            .byte	0
02018 06D7                        00            .byte	0
02019 06D8                        00            .byte	0
02020                                           ! 632 },
02021                                           ! 633 {
02022                                           ! 634  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02023 06D9                        00            .byte	0
02024 06DA                        00            .byte	0
02025 06DB                        00            .byte	0
02026 06DC                        00            .byte	0
02027 06DD                        00            .byte	0
02028 06DE                        00            .byte	0
02029 06DF                        00            .byte	0
02030 06E0                        00            .byte	0
02031                                           ! 635  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02032 06E1                        00            .byte	0
02033 06E2                        00            .byte	0
02034 06E3                        00            .byte	0
02035 06E4                        00            .byte	0
02036 06E5                        00            .byte	0
02037 06E6                        00            .byte	0
02038 06E7                        00            .byte	0
02039 06E8                        00            .byte	0
02040                                           ! 636  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02041 06E9                        00            .byte	0
02042 06EA                        00            .byte	0
02043 06EB                        00            .byte	0
02044 06EC                        00            .byte	0
02045 06ED                        00            .byte	0
02046 06EE                        00            .byte	0
02047 06EF                        00            .byte	0
02048 06F0                        00            .byte	0
02049                                           ! 637  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02050 06F1                        00            .byte	0
02051 06F2                        00            .byte	0
02052 06F3                        00            .byte	0
02053 06F4                        00            .byte	0
02054 06F5                        00            .byte	0
02055 06F6                        00            .byte	0
02056 06F7                        00            .byte	0
02057 06F8                        00            .byte	0
02058                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02059 06F9                        00            .byte	0
02060 06FA                        00            .byte	0
02061 06FB                        00            .byte	0
02062 06FC                        00            .byte	0
02063 06FD                        00            .byte	0
02064 06FE                        00            .byte	0
02065 06FF                        00            .byte	0
02066 0700                        00            .byte	0
02067                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02068 0701                        00            .byte	0
02069 0702                        00            .byte	0
02070 0703                        00            .byte	0
02071 0704                        00            .byte	0
02072 0705                        00            .byte	0
02073 0706                        00            .byte	0
02074 0707                        00            .byte	0
02075 0708                        00            .byte	0
02076                                           ! 640  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02077 0709                        00            .byte	0
02078 070A                        00            .byte	0
02079 070B                        00            .byte	0
02080 070C                        00            .byte	0
02081 070D                        00            .byte	0
02082 070E                        00            .byte	0
02083 070F                        00            .byte	0
02084 0710                        00            .byte	0
02085                                           ! 641  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02086 0711                        00            .byte	0
02087 0712                        00            .byte	0
02088 0713                        00            .byte	0
02089 0714                        00            .byte	0
02090 0715                        00            .byte	0
02091 0716                        00            .byte	0
02092 0717                        00            .byte	0
02093 0718                        00            .byte	0
02094                                           ! 642 },
02095                                           ! 643 {
02096                                           ! 644  80, 24, 14, 0x00, 0x80,
02097 0719                        50            .byte	$50
02098 071A                        18            .byte	$18
02099 071B                        0E            .byte	$E
02100 071C                        00            .byte	0
02101 071D                        80            .byte	$80
02102                                           ! 645  0x01, 0x0f, 0x00, 0x06,
02103 071E                        01            .byte	1
02104 071F                        0F            .byte	$F
02105 0720                        00            .byte	0
02106 0721                        06            .byte	6
02107                                           ! 646  0xa3,
02108 0722                        A3            .byte	$A3
02109                                           ! 647  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02110 0723                        5F            .byte	$5F
02111 0724                        4F            .byte	$4F
02112 0725                        50            .byte	$50
02113 0726                        82            .byte	$82
02114 0727                        54            .byte	$54
02115 0728                        80            .byte	$80
02116 0729                        BF            .byte	$BF
02117 072A                        1F            .byte	$1F
02118                                           ! 648  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02119 072B                        00            .byte	0
02120 072C                        40            .byte	$40
02121 072D                        00            .byte	0
02122 072E                        00            .byte	0
02123 072F                        00            .byte	0
02124 0730                        00            .byte	0
02125 0731                        00            .byte	0
02126 0732                        00            .byte	0
02127                                           ! 649  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02128 0733                        83            .byte	$83
02129 0734                        85            .byte	$85
02130 0735                        5D            .byte	$5D
02131 0736                        28            .byte	$28
02132 0737                        0F            .byte	$F
02133 0738                        63            .byte	$63
02134 0739                        BA            .byte	$BA
02135 073A                        E3            .byte	$E3
02136                                           ! 650  0xff,
02137 073B                        FF            .byte	$FF
02138                                           ! 651  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02139 073C                        00            .byte	0
02140 073D                        08            .byte	8
02141 073E                        00            .byte	0
02142 073F                        00            .byte	0
02143 0740                        18            .byte	$18
02144 0741                        18            .byte	$18
02145 0742                        00            .byte	0
02146 0743                        00            .byte	0
02147                                           ! 652  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02148 0744                        00            .byte	0
02149 0745                        08            .byte	8
02150 0746                        00            .byte	0
02151 0747                        00            .byte	0
02152 0748                        00            .byte	0
02153 0749                        18            .byte	$18
02154 074A                        00            .byte	0
02155 074B                        00            .byte	0
02156                                           ! 653  0x01, 0x00, 0x01, 0x00,
02157 074C                        01            .byte	1
02158 074D                        00            .byte	0
02159 074E                        01            .byte	1
02160 074F                        00            .byte	0
02161                                           ! 654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02162 0750                        00            .byte	0
02163 0751                        00            .byte	0
02164 0752                        00            .byte	0
02165 0753                        00            .byte	0
02166 0754                        00            .byte	0
02167 0755                        00            .byte	0
02168 0756                        05            .byte	5
02169 0757                        0F            .byte	$F
02170 0758                        FF            .byte	$FF
02171                                           ! 655 },
02172                                           ! 656 {
02173                                           ! 657  80, 24, 14, 0x00, 0x80,
02174 0759                        50            .byte	$50
02175 075A                        18            .byte	$18
02176 075B                        0E            .byte	$E
02177 075C                        00            .byte	0
02178 075D                        80            .byte	$80
02179                                           ! 658  0x01, 0x0f, 0x00, 0x06,
02180 075E                        01            .byte	1
02181 075F                        0F            .byte	$F
02182 0760                        00            .byte	0
02183 0761                        06            .byte	6
02184                                           ! 659  0xa3,
02185 0762                        A3            .byte	$A3
02186                                           ! 660  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02187 0763                        5F            .byte	$5F
02188 0764                        4F            .byte	$4F
02189 0765                        50            .byte	$50
02190 0766                        82            .byte	$82
02191 0767                        54            .byte	$54
02192 0768                        80            .byte	$80
02193 0769                        BF            .byte	$BF
02194 076A                        1F            .byte	$1F
02195                                           ! 661  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02196 076B                        00            .byte	0
02197 076C                        40            .byte	$40
02198 076D                        00            .byte	0
02199 076E                        00            .byte	0
02200 076F                        00            .byte	0
02201 0770                        00            .byte	0
02202 0771                        00            .byte	0
02203 0772                        00            .byte	0
02204                                           ! 662  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02205 0773                        83            .byte	$83
02206 0774                        85            .byte	$85
02207 0775                        5D            .byte	$5D
02208 0776                        28            .byte	$28
02209 0777                        0F            .byte	$F
02210 0778                        63            .byte	$63
02211 0779                        BA            .byte	$BA
02212 077A                        E3            .byte	$E3
02213                                           ! 663  0xff,
02214 077B                        FF            .byte	$FF
02215                                           ! 664  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02216 077C                        00            .byte	0
02217 077D                        01            .byte	1
02218 077E                        02            .byte	2
02219 077F                        03            .byte	3
02220 0780                        04            .byte	4
02221 0781                        05            .byte	5
02222 0782                        14            .byte	$14
02223 0783                        07            .byte	7
02224                                           ! 665  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02225 0784                        38            .byte	$38
02226 0785                        39            .byte	$39
02227 0786                        3A            .byte	$3A
02228 0787                        3B            .byte	$3B
02229 0788                        3C            .byte	$3C
02230 0789                        3D            .byte	$3D
02231 078A                        3E            .byte	$3E
02232 078B                        3F            .byte	$3F
02233                                           ! 666  0x01, 0x00, 0x0f
02234 078C                        01            .byte	1
02235 078D                        00            .byte	0
02236                                           ! 666 , 0x00,
02237 078E                        0F            .byte	$F
02238 078F                        00            .byte	0
02239                                           ! 667  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02240 0790                        00            .byte	0
02241 0791                        00            .byte	0
02242 0792                        00            .byte	0
02243 0793                        00            .byte	0
02244 0794                        00            .byte	0
02245 0795                        00            .byte	0
02246 0796                        05            .byte	5
02247 0797                        0F            .byte	$F
02248 0798                        FF            .byte	$FF
02249                                           ! 668 },
02250                                           ! 669 {
02251                                           ! 670  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02252 0799                        00            .byte	0
02253 079A                        00            .byte	0
02254 079B                        00            .byte	0
02255 079C                        00            .byte	0
02256 079D                        00            .byte	0
02257 079E                        00            .byte	0
02258 079F                        00            .byte	0
02259 07A0                        00            .byte	0
02260                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02261 07A1                        00            .byte	0
02262 07A2                        00            .byte	0
02263 07A3                        00            .byte	0
02264 07A4                        00            .byte	0
02265 07A5                        00            .byte	0
02266 07A6                        00            .byte	0
02267 07A7                        00            .byte	0
02268 07A8                        00            .byte	0
02269                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02270 07A9                        00            .byte	0
02271 07AA                        00            .byte	0
02272 07AB                        00            .byte	0
02273 07AC                        00            .byte	0
02274 07AD                        00            .byte	0
02275 07AE                        00            .byte	0
02276 07AF                        00            .byte	0
02277 07B0                        00            .byte	0
02278                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02279 07B1                        00            .byte	0
02280 07B2                        00            .byte	0
02281 07B3                        00            .byte	0
02282 07B4                        00            .byte	0
02283 07B5                        00            .byte	0
02284 07B6                        00            .byte	0
02285 07B7                        00            .byte	0
02286 07B8                        00            .byte	0
02287                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02288 07B9                        00            .byte	0
02289 07BA                        00            .byte	0
02290 07BB                        00            .byte	0
02291 07BC                        00            .byte	0
02292 07BD                        00            .byte	0
02293 07BE                        00            .byte	0
02294 07BF                        00            .byte	0
02295 07C0                        00            .byte	0
02296                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02297 07C1                        00            .byte	0
02298 07C2                        00            .byte	0
02299 07C3                        00            .byte	0
02300 07C4                        00            .byte	0
02301 07C5                        00            .byte	0
02302 07C6                        00            .byte	0
02303 07C7                        00            .byte	0
02304 07C8                        00            .byte	0
02305                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02306 07C9                        00            .byte	0
02307 07CA                        00            .byte	0
02308 07CB                        00            .byte	0
02309 07CC                        00            .byte	0
02310 07CD                        00            .byte	0
02311 07CE                        00            .byte	0
02312 07CF                        00            .byte	0
02313 07D0                        00            .byte	0
02314                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02315 07D1                        00            .byte	0
02316 07D2                        00            .byte	0
02317 07D3                        00            .byte	0
02318 07D4                        00            .byte	0
02319 07D5                        00            .byte	0
02320 07D6                        00            .byte	0
02321 07D7                        00            .byte	0
02322 07D8                        00            .byte	0
02323                                           ! 678 },
02324                                           ! 679 {
02325                                           ! 680  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02326 07D9                        00            .byte	0
02327 07DA                        00            .byte	0
02328 07DB                        00            .byte	0
02329 07DC                        00            .byte	0
02330 07DD                        00            .byte	0
02331 07DE                        00            .byte	0
02332 07DF                        00            .byte	0
02333 07E0                        00            .byte	0
02334                                           ! 681  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02335 07E1                        00            .byte	0
02336 07E2                        00            .byte	0
02337 07E3                        00            .byte	0
02338 07E4                        00            .byte	0
02339 07E5                        00            .byte	0
02340 07E6                        00            .byte	0
02341 07E7                        00            .byte	0
02342 07E8                        00            .byte	0
02343                                           ! 682  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02344 07E9                        00            .byte	0
02345 07EA                        00            .byte	0
02346 07EB                        00            .byte	0
02347 07EC                        00            .byte	0
02348 07ED                        00            .byte	0
02349 07EE                        00            .byte	0
02350 07EF                        00            .byte	0
02351 07F0                        00            .byte	0
02352                                           ! 683  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02353 07F1                        00            .byte	0
02354 07F2                        00            .byte	0
02355 07F3                        00            .byte	0
02356 07F4                        00            .byte	0
02357 07F5                        00            .byte	0
02358 07F6                        00            .byte	0
02359 07F7                        00            .byte	0
02360 07F8                        00            .byte	0
02361                                           ! 684  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02362 07F9                        00            .byte	0
02363 07FA                        00            .byte	0
02364 07FB                        00            .byte	0
02365 07FC                        00            .byte	0
02366 07FD                        00            .byte	0
02367 07FE                        00            .byte	0
02368 07FF                        00            .byte	0
02369 0800                        00            .byte	0
02370                                           ! 685  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02371 0801                        00            .byte	0
02372 0802                        00            .byte	0
02373 0803                        00            .byte	0
02374 0804                        00            .byte	0
02375 0805                        00            .byte	0
02376 0806                        00            .byte	0
02377 0807                        00            .byte	0
02378 0808                        00            .byte	0
02379                                           ! 686  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02380 0809                        00            .byte	0
02381 080A                        00            .byte	0
02382 080B                        00            .byte	0
02383 080C                        00            .byte	0
02384 080D                        00            .byte	0
02385 080E                        00            .byte	0
02386 080F                        00            .byte	0
02387 0810                        00            .byte	0
02388                                           ! 687  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02389 0811                        00            .byte	0
02390 0812                        00            .byte	0
02391 0813                        00            .byte	0
02392 0814                        00            .byte	0
02393 0815                        00            .byte	0
02394 0816                        00            .byte	0
02395 0817                        00            .byte	0
02396 0818                        00            .byte	0
02397                                           ! 688 },
02398                                           ! 689 {
02399                                           ! 690  120, 49, 16, 0x00, 0x08,
02400 0819                        78            .byte	$78
02401 081A                        31            .byte	$31
02402 081B                        10            .byte	$10
02403 081C                        00            .byte	0
02404 081D                        08            .byte	8
02405                                           ! 691  0x08, 0x03, 0x00, 0x02,
02406 081E                        08            .byte	8
02407 081F                        03            .byte	3
02408 0820                        00            .byte	0
02409 0821                        02            .byte	2
02410                                           ! 692  0x67,
02411 0822                        67            .byte	$67
02412                                           ! 693  0x87, 0x77, 0x78, 0x90, 0x2b, 0xa0, 0xd0, 0x7f,
02413 0823                        87            .byte	$87
02414 0824                        77            .byte	$77
02415 0825                        78            .byte	$78
02416 0826                        90            .byte	$90
02417 0827                        2B            .byte	$2B
02418 0828                        A0            .byte	$A0
02419 0829                        D0            .byte	$D0
02420 082A                        7F            .byte	$7F
02421                                           ! 694  0x00, 0x07, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02422 082B                        00            .byte	0
02423 082C                        07            .byte	7
02424 082D                        0D            .byte	$D
02425 082E                        0E            .byte	$E
02426 082F                        00            .byte	0
02427 0830                        00            .byte	0
02428 0831                        00            .byte	0
02429 0832                        00            .byte	0
02430                                           ! 695  0x9c, 0x8e, 0xd0, 0x3c , 0x1f, 0x96, 0xb9, 0xa3,
02431 0833                        9C            .byte	$9C
02432 0834                        8E            .byte	$8E
02433 0835                        D0            .byte	$D0
02434 0836                        3C            .byte	$3C
02435 0837                        1F            .byte	$1F
02436 0838                        96            .byte	$96
02437 0839                        B9            .byte	$B9
02438 083A                        A3            .byte	$A3
02439                                           ! 696  0xff,
02440 083B                        FF            .byte	$FF
02441                                           ! 697  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02442 083C                        00            .byte	0
02443 083D                        01            .byte	1
02444 083E                        02            .byte	2
02445 083F                        03            .byte	3
02446 0840                        04            .byte	4
02447 0841                        05            .byte	5
02448 0842                        14            .byte	$14
02449 0843                        07            .byte	7
02450                                           ! 698  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02451 0844                        38            .byte	$38
02452 0845                        39            .byte	$39
02453 0846                        3A            .byte	$3A
02454 0847                        3B            .byte	$3B
02455 0848                        3C            .byte	$3C
02456 0849                        3D            .byte	$3D
02457 084A                        3E            .byte	$3E
02458 084B                        3F            .byte	$3F
02459                                           ! 699  0x0c, 0x00, 0x0f, 0x08,
02460 084C                        0C            .byte	$C
02461 084D                        00            .byte	0
02462 084E                        0F            .byte	$F
02463 084F                        08            .byte	8
02464                                           ! 700  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02465 0850                        00            .byte	0
02466 0851                        00            .byte	0
02467 0852                        00            .byte	0
02468 0853                        00            .byte	0
02469 0854                        00            .byte	0
02470 0855                        10            .byte	$10
02471 0856                        0E            .byte	$E
02472 0857                        0F            .byte	$F
02473 0858                        FF            .byte	$FF
02474                                           ! 701 },
02475                                           ! 702 {
02476                                           ! 703     80, 24, 14, 0x00, 0x10,
02477 0859                        50            .byte	$50
02478 085A                        18            .byte	$18
02479 085B                        0E            .byte	$E
02480 085C                        00            .byte	0
02481 085D                        10            .byte	$10
02482                                           ! 704     0x00, 0x03, 0x00, 0x02,
02483 085E                        00            .byte	0
02484 085F                        03            .byte	3
02485 0860                        00            .byte	0
02486 0861                        02            .byte	2
02487                                           ! 705     0x67,
02488 0862                        67            .byte	$67
02489                                           ! 706     0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02490 0863                        5F            .byte	$5F
02491 0864                        4F            .byte	$4F
02492 0865                        50            .byte	$50
02493 0866                        82            .byte	$82
02494 0867                        55            .byte	$55
02495 0868                        81            .byte	$81
02496 0869                        BF            .byte	$BF
02497 086A                        1F            .byte	$1F
02498                                           ! 707     0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02499 086B                        00            .byte	0
02500 086C                        4F            .byte	$4F
02501 086D                        0D            .byte	$D
02502 086E                        0E            .byte	$E
02503 086F                        00            .byte	0
02504 0870                        00            .byte	0
02505 0871                        00            .byte	0
02506 0872                        00            .byte	0
02507                                           ! 708     0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02508 0873                        9C            .byte	$9C
02509 0874                        8E            .byte	$8E
02510 0875                        8F            .byte	$8F
02511 0876                        28            .byte	$28
02512 0877                        1F            .byte	$1F
02513 0878                        96            .byte	$96
02514 0879                        B9            .byte	$B9
02515 087A                        A3            .byte	$A3
02516                                           ! 709     0xff,
02517 087B                        FF            .byte	$FF
02518                                           ! 710     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02519 087C                        00            .byte	0
02520 087D                        01            .byte	1
02521 087E                        02            .byte	2
02522 087F                        03            .byte	3
02523 0880                        04            .byte	4
02524 0881                        05            .byte	5
02525 0882                        14            .byte	$14
02526 0883                        07            .byte	7
02527                                           ! 711     0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02528 0884                        38            .byte	$38
02529 0885                        39            .byte	$39
02530 0886                        3A            .byte	$3A
02531 0887                        3B            .byte	$3B
02532 0888                        3C            .byte	$3C
02533 0889                        3D            .byte	$3D
02534 088A                        3E            .byte	$3E
02535 088B                        3F            .byte	$3F
02536                                           ! 712     0x0c, 0x00, 0x0f, 0x08,
02537 088C                        0C            .byte	$C
02538 088D                        00            .byte	0
02539 088E                        0F            .byte	$F
02540 088F                        08            .byte	8
02541                                           ! 713     0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02542 0890                        00            .byte	0
02543 0891                        00            .byte	0
02544 0892                        00            .byte	0
02545 0893                        00            .byte	0
02546 0894                        00            .byte	0
02547 0895                        10            .byte	$10
02548 0896                        0E            .byte	$E
02549 0897                        0F            .byte	$F
02550 0898                        FF            .byte	$FF
02551                                           ! 714 },
02552                                           ! 715 {
02553                                           ! 716  40, 24, 16, 0x00, 0x08,
02554 0899                        28            .byte	$28
02555 089A                        18            .byte	$18
02556 089B                        10            .byte	$10
02557 089C                        00            .byte	0
02558 089D                        08            .byte	8
02559                                           ! 717  0x08, 0x03, 0x00, 0x02,
02560 089E                        08            .byte	8
02561 089F                        03            .byte	3
02562 08A0                        00            .byte	0
02563 08A1                        02            .byte	2
02564                                           ! 718  0x67,
02565 08A2                        67            .byte	$67
02566                                           ! 719  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02567 08A3                        2D            .byte	$2D
02568 08A4                        27            .byte	$27
02569 08A5                        28            .byte	$28
02570 08A6                        90            .byte	$90
02571 08A7                        2B            .byte	$2B
02572 08A8                        A0            .byte	$A0
02573 08A9                        BF            .byte	$BF
02574 08AA                        1F            .byte	$1F
02575                                           ! 720  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02576 08AB                        00            .byte	0
02577 08AC                        4F            .byte	$4F
02578 08AD                        0D            .byte	$D
02579 08AE                        0E            .byte	$E
02580 08AF                        00            .byte	0
02581 08B0                        00            .byte	0
02582 08B1                        00            .byte	0
02583 08B2                        00            .byte	0
02584                                           ! 721  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02585 08B3                        9C            .byte	$9C
02586 08B4                        8E            .byte	$8E
02587 08B5                        8F            .byte	$8F
02588 08B6                        14            .byte	$14
02589 08B7                        1F            .byte	$1F
02590 08B8                        96            .byte	$96
02591 08B9                        B9            .byte	$B9
02592 08BA                        A3            .byte	$A3
02593                                           ! 722  0xff,
02594 08BB                        FF            .byte	$FF
02595                                           ! 723  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02596 08BC                        00            .byte	0
02597 08BD                        01            .byte	1
02598 08BE                        02            .byte	2
02599 08BF                        03            .byte	3
02600 08C0                        04            .byte	4
02601 08C1                        05            .byte	5
02602 08C2                        14            .byte	$14
02603 08C3                        07            .byte	7
02604                                           ! 724  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02605 08C4                        38            .byte	$38
02606 08C5                        39            .byte	$39
02607 08C6                        3A            .byte	$3A
02608 08C7                        3B            .byte	$3B
02609 08C8                        3C            .byte	$3C
02610 08C9                        3D            .byte	$3D
02611 08CA                        3E            .byte	$3E
02612 08CB                        3F            .byte	$3F
02613                                           ! 725  0x0c, 0x00, 0x0f, 0x08,
02614 08CC                        0C            .byte	$C
02615 08CD                        00            .byte	0
02616 08CE                        0F            .byte	$F
02617 08CF                        08            .byte	8
02618                                           ! 726  0x00, 0x00, 0x00, 0x00, 0x00
02619 08D0                        00            .byte	0
02620 08D1                        00            .byte	0
02621 08D2                        00            .byte	0
02622 08D3                        00            .byte	0
02623                                           ! 726 , 0x10, 0x0e, 0x0f, 0xff,
02624 08D4                        00            .byte	0
02625 08D5                        10            .byte	$10
02626 08D6                        0E            .byte	$E
02627 08D7                        0F            .byte	$F
02628 08D8                        FF            .byte	$FF
02629                                           ! 727 },
02630                                           ! 728 {
02631                                           ! 729  80, 24, 16, 0x00, 0x10,
02632 08D9                        50            .byte	$50
02633 08DA                        18            .byte	$18
02634 08DB                        10            .byte	$10
02635 08DC                        00            .byte	0
02636 08DD                        10            .byte	$10
02637                                           ! 730  0x00, 0x03, 0x00, 0x02,
02638 08DE                        00            .byte	0
02639 08DF                        03            .byte	3
02640 08E0                        00            .byte	0
02641 08E1                        02            .byte	2
02642                                           ! 731  0x67,
02643 08E2                        67            .byte	$67
02644                                           ! 732  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02645 08E3                        5F            .byte	$5F
02646 08E4                        4F            .byte	$4F
02647 08E5                        50            .byte	$50
02648 08E6                        82            .byte	$82
02649 08E7                        55            .byte	$55
02650 08E8                        81            .byte	$81
02651 08E9                        BF            .byte	$BF
02652 08EA                        1F            .byte	$1F
02653                                           ! 733  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02654 08EB                        00            .byte	0
02655 08EC                        4F            .byte	$4F
02656 08ED                        0D            .byte	$D
02657 08EE                        0E            .byte	$E
02658 08EF                        00            .byte	0
02659 08F0                        00            .byte	0
02660 08F1                        00            .byte	0
02661 08F2                        00            .byte	0
02662                                           ! 734  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02663 08F3                        9C            .byte	$9C
02664 08F4                        8E            .byte	$8E
02665 08F5                        8F            .byte	$8F
02666 08F6                        28            .byte	$28
02667 08F7                        1F            .byte	$1F
02668 08F8                        96            .byte	$96
02669 08F9                        B9            .byte	$B9
02670 08FA                        A3            .byte	$A3
02671                                           ! 735  0xff,
02672 08FB                        FF            .byte	$FF
02673                                           ! 736  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02674 08FC                        00            .byte	0
02675 08FD                        01            .byte	1
02676 08FE                        02            .byte	2
02677 08FF                        03            .byte	3
02678 0900                        04            .byte	4
02679 0901                        05            .byte	5
02680 0902                        14            .byte	$14
02681 0903                        07            .byte	7
02682                                           ! 737  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02683 0904                        38            .byte	$38
02684 0905                        39            .byte	$39
02685 0906                        3A            .byte	$3A
02686 0907                        3B            .byte	$3B
02687 0908                        3C            .byte	$3C
02688 0909                        3D            .byte	$3D
02689 090A                        3E            .byte	$3E
02690 090B                        3F            .byte	$3F
02691                                           ! 738  0x0c, 0x00, 0x0f, 0x08,
02692 090C                        0C            .byte	$C
02693 090D                        00            .byte	0
02694 090E                        0F            .byte	$F
02695 090F                        08            .byte	8
02696                                           ! 739  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02697 0910                        00            .byte	0
02698 0911                        00            .byte	0
02699 0912                        00            .byte	0
02700 0913                        00            .byte	0
02701 0914                        00            .byte	0
02702 0915                        10            .byte	$10
02703 0916                        0E            .byte	$E
02704 0917                        0F            .byte	$F
02705 0918                        FF            .byte	$FF
02706                                           ! 740 },
02707                                           ! 741 {
02708                                           ! 742  80, 24, 16, 0x00, 0x10,
02709 0919                        50            .byte	$50
02710 091A                        18            .byte	$18
02711 091B                        10            .byte	$10
02712 091C                        00            .byte	0
02713 091D                        10            .byte	$10
02714                                           ! 743  0x00, 0x03, 0x00, 0x02,
02715 091E                        00            .byte	0
02716 091F                        03            .byte	3
02717 0920                        00            .byte	0
02718 0921                        02            .byte	2
02719                                           ! 744  0x66,
02720 0922                        66            .byte	$66
02721                                           ! 745  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02722 0923                        5F            .byte	$5F
02723 0924                        4F            .byte	$4F
02724 0925                        50            .byte	$50
02725 0926                        82            .byte	$82
02726 0927                        55            .byte	$55
02727 0928                        81            .byte	$81
02728 0929                        BF            .byte	$BF
02729 092A                        1F            .byte	$1F
02730                                           ! 746  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02731 092B                        00            .byte	0
02732 092C                        4F            .byte	$4F
02733 092D                        0D            .byte	$D
02734 092E                        0E            .byte	$E
02735 092F                        00            .byte	0
02736 0930                        00            .byte	0
02737 0931                        00            .byte	0
02738 0932                        00            .byte	0
02739                                           ! 747  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02740 0933                        9C            .byte	$9C
02741 0934                        8E            .byte	$8E
02742 0935                        8F            .byte	$8F
02743 0936                        28            .byte	$28
02744 0937                        0F            .byte	$F
02745 0938                        96            .byte	$96
02746 0939                        B9            .byte	$B9
02747 093A                        A3            .byte	$A3
02748                                           ! 748  0xff,
02749 093B                        FF            .byte	$FF
02750                                           ! 749  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02751 093C                        00            .byte	0
02752 093D                        08            .byte	8
02753 093E                        08            .byte	8
02754 093F                        08            .byte	8
02755 0940                        08            .byte	8
02756 0941                        08            .byte	8
02757 0942                        08            .byte	8
02758 0943                        08            .byte	8
02759                                           ! 750  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02760 0944                        10            .byte	$10
02761 0945                        18            .byte	$18
02762 0946                        18            .byte	$18
02763 0947                        18            .byte	$18
02764 0948                        18            .byte	$18
02765 0949                        18            .byte	$18
02766 094A                        18            .byte	$18
02767 094B                        18            .byte	$18
02768                                           ! 751  0x0e, 0x00, 0x0f, 0x08,
02769 094C                        0E            .byte	$E
02770 094D                        00            .byte	0
02771 094E                        0F            .byte	$F
02772 094F                        08            .byte	8
02773                                           ! 752  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02774 0950                        00            .byte	0
02775 0951                        00            .byte	0
02776 0952                        00            .byte	0
02777 0953                        00            .byte	0
02778 0954                        00            .byte	0
02779 0955                        10            .byte	$10
02780 0956                        0A            .byte	$A
02781 0957                        0F            .byte	$F
02782 0958                        FF            .byte	$FF
02783                                           ! 753 },
02784                                           ! 754 {
02785                                           ! 755  80, 29, 16, 0x00, 0xa0,
02786 0959                        50            .byte	$50
02787 095A                        1D            .byte	$1D
02788 095B                        10            .byte	$10
02789 095C                        00            .byte	0
02790 095D                        A0            .byte	$A0
02791                                           ! 756  0x01, 0x0f, 0x00, 0x06,
02792 095E                        01            .byte	1
02793 095F                        0F            .byte	$F
02794 0960                        00            .byte	0
02795 0961                        06            .byte	6
02796                                           ! 757  0xe3,
02797 0962                        E3            .byte	$E3
02798                                           ! 758  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02799 0963                        5F            .byte	$5F
02800 0964                        4F            .byte	$4F
02801 0965                        50            .byte	$50
02802 0966                        82            .byte	$82
02803 0967                        54            .byte	$54
02804 0968                        80            .byte	$80
02805 0969                        0B            .byte	$B
02806 096A                        3E            .byte	$3E
02807                                           ! 759  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02808 096B                        00            .byte	0
02809 096C                        40            .byte	$40
02810 096D                        00            .byte	0
02811 096E                        00            .byte	0
02812 096F                        00            .byte	0
02813 0970                        00            .byte	0
02814 0971                        00            .byte	0
02815 0972                        00            .byte	0
02816                                           ! 760  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xc3,
02817 0973                        EA            .byte	$EA
02818 0974                        8C            .byte	$8C
02819 0975                        DF            .byte	$DF
02820 0976                        28            .byte	$28
02821 0977                        00            .byte	0
02822 0978                        E7            .byte	$E7
02823 0979                        04            .byte	4
02824 097A                        C3            .byte	$C3
02825                                           ! 761  0xff,
02826 097B                        FF            .byte	$FF
02827                                           ! 762  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02828 097C                        00            .byte	0
02829 097D                        3F            .byte	$3F
02830 097E                        00            .byte	0
02831 097F                        3F            .byte	$3F
02832 0980                        00            .byte	0
02833 0981                        3F            .byte	$3F
02834 0982                        00            .byte	0
02835 0983                        3F            .byte	$3F
02836                                           ! 763  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02837 0984                        00            .byte	0
02838 0985                        3F            .byte	$3F
02839 0986                        00            .byte	0
02840 0987                        3F            .byte	$3F
02841 0988                        00            .byte	0
02842 0989                        3F            .byte	$3F
02843 098A                        00            .byte	0
02844 098B                        3F            .byte	$3F
02845                                           ! 764  0x01, 0x00, 0x0f, 0x00,
02846 098C                        01            .byte	1
02847 098D                        00            .byte	0
02848 098E                        0F            .byte	$F
02849 098F                        00            .byte	0
02850                                           ! 765  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02851 0990                        00            .byte	0
02852 0991                        00            .byte	0
02853 0992                        00            .byte	0
02854 0993                        00            .byte	0
02855 0994                        00            .byte	0
02856 0995                        00            .byte	0
02857 0996                        05            .byte	5
02858 0997                        0F            .byte	$F
02859 0998                        FF            .byte	$FF
02860                                           ! 766 },
02861                                           ! 767 {
02862                                           ! 768  80, 29, 16, 0x00, 0xa0,
02863 0999                        50            .byte	$50
02864 099A                        1D            .byte	$1D
02865 099B                        10            .byte	$10
02866 099C                        00            .byte	0
02867 099D                        A0            .byte	$A0
02868                                           ! 769  0x01, 0x0f, 0x00, 0x06,
02869 099E                        01            .byte	1
02870 099F                        0F            .byte	$F
02871 09A0                        00            .byte	0
02872 09A1                        06            .byte	6
02873                                           ! 770  0xe3,
02874 09A2                        E3            .byte	$E3
02875                                           ! 771  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02876 09A3                        5F            .byte	$5F
02877 09A4                        4F            .byte	$4F
02878 09A5                        50            .byte	$50
02879 09A6                        82            .byte	$82
02880 09A7                        54            .byte	$54
02881 09A8                        80            .byte	$80
02882 09A9                        0B            .byte	$B
02883 09AA                        3E            .byte	$3E
02884                                           ! 772  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02885 09AB                        00            .byte	0
02886 09AC                        40            .byte	$40
02887 09AD                        00            .byte	0
02888 09AE                        00            .byte	0
02889 09AF                        00            .byte	0
02890 09B0                        00            .byte	0
02891 09B1                        00            .byte	0
02892 09B2                        00            .byte	0
02893                                           ! 773  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02894 09B3                        EA            .byte	$EA
02895 09B4                        8C            .byte	$8C
02896 09B5                        DF            .byte	$DF
02897 09B6                        28            .byte	$28
02898 09B7                        00            .byte	0
02899 09B8                        E7            .byte	$E7
02900 09B9                        04            .byte	4
02901 09BA                        E3            .byte	$E3
02902                                           ! 774  0xff,
02903 09BB                        FF            .byte	$FF
02904                                           ! 775  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02905 09BC                        00            .byte	0
02906 09BD                        01            .byte	1
02907 09BE                        02            .byte	2
02908 09BF                        03            .byte	3
02909 09C0                        04            .byte	4
02910 09C1                        05            .byte	5
02911 09C2                        14            .byte	$14
02912 09C3                        07            .byte	7
02913                                           ! 776  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02914 09C4                        38            .byte	$38
02915 09C5                        39            .byte	$39
02916 09C6                        3A            .byte	$3A
02917 09C7                        3B            .byte	$3B
02918 09C8                        3C            .byte	$3C
02919 09C9                        3D            .byte	$3D
02920 09CA                        3E            .byte	$3E
02921 09CB                        3F            .byte	$3F
02922                                           ! 777  0x01, 0x00, 0x0f, 0x00,
02923 09CC                        01            .byte	1
02924 09CD                        00            .byte	0
02925 09CE                        0F            .byte	$F
02926 09CF                        00            .byte	0
02927                                           ! 778  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02928 09D0                        00            .byte	0
02929 09D1                        00            .byte	0
02930 09D2                        00            .byte	0
02931 09D3                        00            .byte	0
02932 09D4                        00            .byte	0
02933 09D5                        00            .byte	0
02934 09D6                        05            .byte	5
02935 09D7                        0F            .byte	$F
02936 09D8                        FF            .byte	$FF
02937                                           ! 779 },
02938                                           ! 780 {
02939                                           ! 781  40, 24, 8, 0x00, 0x20,
02940 09D9                        28            .byte	$28
02941 09DA                        18            .byte	$18
02942 09DB                        08            .byte	8
02943 09DC                        00            .byte	0
02944 09DD                        20            .byte	$20
02945                                           ! 782  0x01, 0x0f, 0x00, 0x0e,
02946 09DE                        01            .byte	1
02947 09DF                        0F            .byte	$F
02948 09E0                        00            .byte	0
02949 09E1                        0E            .byte	$E
02950                                           ! 783  0x63,
02951 09E2                        63            .byte	$63
02952                                           ! 784  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02953 09E3                        5F            .byte	$5F
02954 09E4                        4F            .byte	$4F
02955 09E5                        50            .byte	$50
02956 09E6                        82            .byte	$82
02957 09E7                        54            .byte	$54
02958 09E8                        80            .byte	$80
02959 09E9                        BF            .byte	$BF
02960 09EA                        1F            .byte	$1F
02961                                           ! 785  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02962 09EB                        00            .byte	0
02963 09EC                        41            .byte	$41
02964 09ED                        00            .byte	0
02965 09EE                        00            .byte	0
02966 09EF                        00            .byte	0
02967 09F0                        00            .byte	0
02968 09F1                        00            .byte	0
02969 09F2                        00            .byte	0
02970                                           ! 786  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02971 09F3                        9C            .byte	$9C
02972 09F4                        8E            .byte	$8E
02973 09F5                        8F            .byte	$8F
02974 09F6                        28            .byte	$28
02975 09F7                        40            .byte	$40
02976 09F8                        96            .byte	$96
02977 09F9                        B9            .byte	$B9
02978 09FA                        A3            .byte	$A3
02979                                           ! 787  0xff,
02980 09FB                        FF            .byte	$FF
02981                                           ! 788  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02982 09FC                        00            .byte	0
02983 09FD                        01            .byte	1
02984 09FE                        02            .byte	2
02985 09FF                        03            .byte	3
02986 0A00                        04            .byte	4
02987 0A01                        05            .byte	5
02988 0A02                        06            .byte	6
02989 0A03                        07            .byte	7
02990                                           ! 789  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02991 0A04                        08            .byte	8
02992 0A05                        09            .byte	9
02993 0A06                        0A            .byte	$A
02994 0A07                        0B            .byte	$B
02995 0A08                        0C            .byte	$C
02996 0A09                        0D            .byte	$D
02997 0A0A                        0E            .byte	$E
02998 0A0B                        0F            .byte	$F
02999                                           ! 790  0x41, 0x00, 0x0f, 0x00,
03000 0A0C                        41            .byte	$41
03001 0A0D                        00            .byte	0
03002 0A0E                        0F            .byte	$F
03003 0A0F                        00            .byte	0
03004                                           ! 791  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
03005 0A10                        00            .byte	0
03006 0A11                        00            .byte	0
03007 0A12                        00            .byte	0
03008 0A13                        00            .byte	0
03009 0A14                        00            .byte	0
03010 0A15                        40            .byte	$40
03011 0A16                        05            .byte	5
03012 0A17                        0F            .byte	$F
03013 0A18                        FF            .byte	$FF
03014                                           ! 792 },
03015                                           ! 793 {
03016                                           ! 794  100, 36, 16, 0x00, 0x00,
03017 0A19                        64            .byte	$64
03018 0A1A                        24            .byte	$24
03019 0A1B                        10            .byte	$10
03020 0A1C                        00            .byte	0
03021 0A1D                        00            .byte	0
03022                                           ! 795  0x01, 0x0f, 0x00, 0x0
03023 0A1E                        01            .byte	1
03024 0A1F                        0F            .byte	$F
03025 0A20                        00            .byte	0
03026                                           ! 795 6,
03027 0A21                        06            .byte	6
03028                                           ! 796  0xe3,
03029 0A22                        E3            .byte	$E3
03030                                           ! 797  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
03031 0A23                        7F            .byte	$7F
03032 0A24                        63            .byte	$63
03033 0A25                        63            .byte	$63
03034 0A26                        83            .byte	$83
03035 0A27                        6B            .byte	$6B
03036 0A28                        1B            .byte	$1B
03037 0A29                        72            .byte	$72
03038 0A2A                        F0            .byte	$F0
03039                                           ! 798  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03040 0A2B                        00            .byte	0
03041 0A2C                        60            .byte	$60
03042 0A2D                        00            .byte	0
03043 0A2E                        00            .byte	0
03044 0A2F                        00            .byte	0
03045 0A30                        00            .byte	0
03046 0A31                        00            .byte	0
03047 0A32                        00            .byte	0
03048                                           ! 799  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03049 0A33                        59            .byte	$59
03050 0A34                        8D            .byte	$8D
03051 0A35                        57            .byte	$57
03052 0A36                        32            .byte	$32
03053 0A37                        00            .byte	0
03054 0A38                        57            .byte	$57
03055 0A39                        73            .byte	$73
03056 0A3A                        E3            .byte	$E3
03057                                           ! 800  0xff,
03058 0A3B                        FF            .byte	$FF
03059                                           ! 801  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03060 0A3C                        00            .byte	0
03061 0A3D                        01            .byte	1
03062 0A3E                        02            .byte	2
03063 0A3F                        03            .byte	3
03064 0A40                        04            .byte	4
03065 0A41                        05            .byte	5
03066 0A42                        14            .byte	$14
03067 0A43                        07            .byte	7
03068                                           ! 802  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03069 0A44                        38            .byte	$38
03070 0A45                        39            .byte	$39
03071 0A46                        3A            .byte	$3A
03072 0A47                        3B            .byte	$3B
03073 0A48                        3C            .byte	$3C
03074 0A49                        3D            .byte	$3D
03075 0A4A                        3E            .byte	$3E
03076 0A4B                        3F            .byte	$3F
03077                                           ! 803  0x01, 0x00, 0x0f, 0x00,
03078 0A4C                        01            .byte	1
03079 0A4D                        00            .byte	0
03080 0A4E                        0F            .byte	$F
03081 0A4F                        00            .byte	0
03082                                           ! 804  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03083 0A50                        00            .byte	0
03084 0A51                        00            .byte	0
03085 0A52                        00            .byte	0
03086 0A53                        00            .byte	0
03087 0A54                        00            .byte	0
03088 0A55                        00            .byte	0
03089 0A56                        05            .byte	5
03090 0A57                        0F            .byte	$F
03091 0A58                        FF            .byte	$FF
03092                                           ! 805 }
03093                                           ! 806 };
03094                                           !BCC_EOS
03095                                           ! 807 static Bit8u palette0[63+1][3]=
03096                                           ! 808 {
03097                       00000A59            _palette0:
03098                                           ! 809   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03099 0A59                        00            .byte	0
03100 0A5A                        00            .byte	0
03101 0A5B                        00            .byte	0
03102 0A5C                        00            .byte	0
03103 0A5D                        00            .byte	0
03104 0A5E                        00            .byte	0
03105 0A5F                        00            .byte	0
03106 0A60                        00            .byte	0
03107 0A61                        00            .byte	0
03108 0A62                        00            .byte	0
03109 0A63                        00            .byte	0
03110 0A64                        00            .byte	0
03111 0A65                        00            .byte	0
03112 0A66                        00            .byte	0
03113 0A67                        00            .byte	0
03114 0A68                        00            .byte	0
03115 0A69                        00            .byte	0
03116 0A6A                        00            .byte	0
03117 0A6B                        00            .byte	0
03118 0A6C                        00            .byte	0
03119 0A6D                        00            .byte	0
03120 0A6E                        00            .byte	0
03121 0A6F                        00            .byte	0
03122 0A70                        00            .byte	0
03123                                           ! 810   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03124 0A71                        2A            .byte	$2A
03125 0A72                        2A            .byte	$2A
03126 0A73                        2A            .byte	$2A
03127 0A74                        2A            .byte	$2A
03128 0A75                        2A            .byte	$2A
03129 0A76                        2A            .byte	$2A
03130 0A77                        2A            .byte	$2A
03131 0A78                        2A            .byte	$2A
03132 0A79                        2A            .byte	$2A
03133 0A7A                        2A            .byte	$2A
03134 0A7B                        2A            .byte	$2A
03135 0A7C                        2A            .byte	$2A
03136 0A7D                        2A            .byte	$2A
03137 0A7E                        2A            .byte	$2A
03138 0A7F                        2A            .byte	$2A
03139 0A80                        2A            .byte	$2A
03140 0A81                        2A            .byte	$2A
03141 0A82                        2A            .byte	$2A
03142 0A83                        2A            .byte	$2A
03143 0A84                        2A            .byte	$2A
03144 0A85                        2A            .byte	$2A
03145 0A86                        2A            .byte	$2A
03146 0A87                        2A            .byte	$2A
03147 0A88                        2A            .byte	$2A
03148                                           ! 811   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03149 0A89                        2A            .byte	$2A
03150 0A8A                        2A            .byte	$2A
03151 0A8B                        2A            .byte	$2A
03152 0A8C                        2A            .byte	$2A
03153 0A8D                        2A            .byte	$2A
03154 0A8E                        2A            .byte	$2A
03155 0A8F                        2A            .byte	$2A
03156 0A90                        2A            .byte	$2A
03157 0A91                        2A            .byte	$2A
03158 0A92                        2A            .byte	$2A
03159 0A93                        2A            .byte	$2A
03160 0A94                        2A            .byte	$2A
03161 0A95                        2A            .byte	$2A
03162 0A96                        2A            .byte	$2A
03163 0A97                        2A            .byte	$2A
03164 0A98                        2A            .byte	$2A
03165 0A99                        2A            .byte	$2A
03166 0A9A                        2A            .byte	$2A
03167 0A9B                        2A            .byte	$2A
03168 0A9C                        2A            .byte	$2A
03169 0A9D                        2A            .byte	$2A
03170 0A9E                        2A            .byte	$2A
03171 0A9F                        2A            .byte	$2A
03172 0AA0                        2A            .byte	$2A
03173                                           ! 812   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03174 0AA1                        3F            .byte	$3F
03175 0AA2                        3F            .byte	$3F
03176 0AA3                        3F            .byte	$3F
03177 0AA4                        3F            .byte	$3F
03178 0AA5                        3F            .byte	$3F
03179 0AA6                        3F            .byte	$3F
03180 0AA7                        3F            .byte	$3F
03181 0AA8                        3F            .byte	$3F
03182 0AA9                        3F            .byte	$3F
03183 0AAA                        3F            .byte	$3F
03184 0AAB                        3F            .byte	$3F
03185 0AAC                        3F            .byte	$3F
03186 0AAD                        3F            .byte	$3F
03187 0AAE                        3F            .byte	$3F
03188 0AAF                        3F            .byte	$3F
03189 0AB0                        3F            .byte	$3F
03190 0AB1                        3F            .byte	$3F
03191 0AB2                        3F            .byte	$3F
03192 0AB3                        3F            .byte	$3F
03193 0AB4                        3F            .byte	$3F
03194 0AB5                        3F            .byte	$3F
03195 0AB6                        3F            .byte	$3F
03196 0AB7                        3F            .byte	$3F
03197 0AB8                        3F            .byte	$3F
03198                                           ! 813   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03199 0AB9                        00            .byte	0
03200 0ABA                        00            .byte	0
03201 0ABB                        00            .byte	0
03202 0ABC                        00            .byte	0
03203 0ABD                        00            .byte	0
03204 0ABE                        00            .byte	0
03205 0ABF                        00            .byte	0
03206 0AC0                        00            .byte	0
03207 0AC1                        00            .byte	0
03208 0AC2                        00            .byte	0
03209 0AC3                        00            .byte	0
03210 0AC4                        00            .byte	0
03211 0AC5                        00            .byte	0
03212 0AC6                        00            .byte	0
03213 0AC7                        00            .byte	0
03214 0AC8                        00            .byte	0
03215 0AC9                        00            .byte	0
03216 0ACA                        00            .byte	0
03217 0ACB                        00            .byte	0
03218 0ACC                        00            .byte	0
03219 0ACD                        00            .byte	0
03220 0ACE                        00            .byte	0
03221 0ACF                        00            .byte	0
03222 0AD0                        00            .byte	0
03223                                           ! 814   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03224 0AD1                        2A            .byte	$2A
03225 0AD2                        2A            .byte	$2A
03226 0AD3                        2A            .byte	$2A
03227 0AD4                        2A            .byte	$2A
03228 0AD5                        2A            .byte	$2A
03229 0AD6                        2A            .byte	$2A
03230 0AD7                        2A            .byte	$2A
03231 0AD8                        2A            .byte	$2A
03232 0AD9                        2A            .byte	$2A
03233 0ADA                        2A            .byte	$2A
03234 0ADB                        2A            .byte	$2A
03235 0ADC                        2A            .byte	$2A
03236 0ADD                        2A            .byte	$2A
03237 0ADE                        2A            .byte	$2A
03238 0ADF                        2A            .byte	$2A
03239 0AE0                        2A            .byte	$2A
03240 0AE1                        2A            .byte	$2A
03241 0AE2                        2A            .byte	$2A
03242 0AE3                        2A            .byte	$2A
03243 0AE4                        2A            .byte	$2A
03244 0AE5                        2A            .byte	$2A
03245 0AE6                        2A            .byte	$2A
03246 0AE7                        2A            .byte	$2A
03247 0AE8                        2A            .byte	$2A
03248                                           ! 815   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03249 0AE9                        2A            .byte	$2A
03250 0AEA                        2A            .byte	$2A
03251 0AEB                        2A            .byte	$2A
03252 0AEC                        2A            .byte	$2A
03253 0AED                        2A            .byte	$2A
03254 0AEE                        2A            .byte	$2A
03255 0AEF                        2A            .byte	$2A
03256 0AF0                        2A            .byte	$2A
03257 0AF1                        2A            .byte	$2A
03258 0AF2                        2A            .byte	$2A
03259 0AF3                        2A            .byte	$2A
03260 0AF4                        2A            .byte	$2A
03261 0AF5                        2A            .byte	$2A
03262 0AF6                        2A            .byte	$2A
03263 0AF7                        2A            .byte	$2A
03264 0AF8                        2A            .byte	$2A
03265 0AF9                        2A            .byte	$2A
03266 0AFA                        2A            .byte	$2A
03267 0AFB                        2A            .byte	$2A
03268 0AFC                        2A            .byte	$2A
03269 0AFD                        2A            .byte	$2A
03270 0AFE                        2A            .byte	$2A
03271 0AFF                        2A            .byte	$2A
03272 0B00                        2A            .byte	$2A
03273                                           ! 816   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03274 0B01                        3F            .byte	$3F
03275 0B02                        3F            .byte	$3F
03276 0B03                        3F            .byte	$3F
03277 0B04                        3F            .byte	$3F
03278 0B05                        3F            .byte	$3F
03279 0B06                        3F            .byte	$3F
03280 0B07                        3F            .byte	$3F
03281 0B08                        3F            .byte	$3F
03282 0B09                        3F            .byte	$3F
03283 0B0A                        3F            .byte	$3F
03284 0B0B                        3F            .byte	$3F
03285 0B0C                        3F            .byte	$3F
03286 0B0D                        3F            .byte	$3F
03287 0B0E                        3F            .byte	$3F
03288 0B0F                        3F            .byte	$3F
03289 0B10                        3F            .byte	$3F
03290 0B11                        3F            .byte	$3F
03291 0B12                        3F            .byte	$3F
03292 0B13                        3F            .byte	$3F
03293 0B14                        3F            .byte	$3F
03294 0B15                        3F            .byte	$3F
03295 0B16                        3F            .byte	$3F
03296 0B17                        3F            .byte	$3F
03297                                           ! 817 };
03298 0B18                        3F            .byte	$3F
03299                                           !BCC_EOS
03300                                           ! 818 static Bit8u palette1[63+1][3]=
03301                                           ! 819 {
03302                       00000B19            _palette1:
03303                                           ! 820   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03304 0B19                        00            .byte	0
03305 0B1A                        00            .byte	0
03306 0B1B                        00            .byte	0
03307 0B1C                        00            .byte	0
03308 0B1D                        00            .byte	0
03309 0B1E                        2A            .byte	$2A
03310 0B1F                        00            .byte	0
03311 0B20                        2A            .byte	$2A
03312 0B21                        00            .byte	0
03313 0B22                        00            .byte	0
03314 0B23                        2A            .byte	$2A
03315 0B24                        2A            .byte	$2A
03316 0B25                        2A            .byte	$2A
03317 0B26                        00            .byte	0
03318 0B27                        00            .byte	0
03319 0B28                        2A            .byte	$2A
03320 0B29                        00            .byte	0
03321 0B2A                        2A            .byte	$2A
03322 0B2B                        2A            .byte	$2A
03323 0B2C                        15            .byte	$15
03324 0B2D                        00            .byte	0
03325 0B2E                        2A            .byte	$2A
03326 0B2F                        2A            .byte	$2A
03327 0B30                        2A            .byte	$2A
03328                                           ! 821   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03329 0B31                        00            .byte	0
03330 0B32                        00            .byte	0
03331 0B33                        00            .byte	0
03332 0B34                        00            .byte	0
03333 0B35                        00            .byte	0
03334 0B36                        2A            .byte	$2A
03335 0B37                        00            .byte	0
03336 0B38                        2A            .byte	$2A
03337 0B39                        00            .byte	0
03338 0B3A                        00            .byte	0
03339 0B3B                        2A            .byte	$2A
03340 0B3C                        2A            .byte	$2A
03341 0B3D                        2A            .byte	$2A
03342 0B3E                        00            .byte	0
03343 0B3F                        00            .byte	0
03344 0B40                        2A            .byte	$2A
03345 0B41                        00            .byte	0
03346 0B42                        2A            .byte	$2A
03347 0B43                        2A            .byte	$2A
03348 0B44                        15            .byte	$15
03349 0B45                        00            .byte	0
03350 0B46                        2A            .byte	$2A
03351 0B47                        2A            .byte	$2A
03352 0B48                        2A            .byte	$2A
03353                                           ! 822   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03354 0B49                        15            .byte	$15
03355 0B4A                        15            .byte	$15
03356 0B4B                        15            .byte	$15
03357 0B4C                        15            .byte	$15
03358 0B4D                        15            .byte	$15
03359 0B4E                        3F            .byte	$3F
03360 0B4F                        15            .byte	$15
03361 0B50                        3F            .byte	$3F
03362 0B51                        15            .byte	$15
03363 0B52                        15            .byte	$15
03364 0B53                        3F            .byte	$3F
03365 0B54                        3F            .byte	$3F
03366 0B55                        3F            .byte	$3F
03367 0B56                        15            .byte	$15
03368 0B57                        15            .byte	$15
03369 0B58                        3F            .byte	$3F
03370 0B59                        15            .byte	$15
03371 0B5A                        3F            .byte	$3F
03372 0B5B                        3F            .byte	$3F
03373 0B5C                        3F            .byte	$3F
03374 0B5D                        15            .byte	$15
03375 0B5E                        3F            .byte	$3F
03376 0B5F                        3F            .byte	$3F
03377 0B60                        3F            .byte	$3F
03378                                           ! 823   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03379 0B61                        15            .byte	$15
03380 0B62                        15            .byte	$15
03381 0B63                        15            .byte	$15
03382 0B64                        15            .byte	$15
03383 0B65                        15            .byte	$15
03384 0B66                        3F            .byte	$3F
03385 0B67                        15            .byte	$15
03386 0B68                        3F            .byte	$3F
03387 0B69                        15            .byte	$15
03388 0B6A                        15            .byte	$15
03389 0B6B                        3F            .byte	$3F
03390 0B6C                        3F            .byte	$3F
03391 0B6D                        3F            .byte	$3F
03392 0B6E                        15            .byte	$15
03393 0B6F                        15            .byte	$15
03394 0B70                        3F            .byte	$3F
03395 0B71                        15            .byte	$15
03396 0B72                        3F            .byte	$3F
03397 0B73                        3F            .byte	$3F
03398 0B74                        3F            .byte	$3F
03399 0B75                        15            .byte	$15
03400 0B76                        3F            .byte	$3F
03401 0B77                        3F            .byte	$3F
03402 0B78                        3F            .byte	$3F
03403                                           ! 824   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,
03404 0B79                        00            .byte	0
03405 0B7A                        00            .byte	0
03406 0B7B                        00            .byte	0
03407 0B7C                        00            .byte	0
03408 0B7D                        00            .byte	0
03409 0B7E                        2A            .byte	$2A
03410 0B7F                        00            .byte	0
03411 0B80                        2A            .byte	$2A
03412 0B81                        00            .byte	0
03413 0B82                        00            .byte	0
03414 0B83                        2A            .byte	$2A
03415 0B84                        2A            .byte	$2A
03416                                           ! 824 0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03417 0B85                        2A            .byte	$2A
03418 0B86                        00            .byte	0
03419 0B87                        00            .byte	0
03420 0B88                        2A            .byte	$2A
03421 0B89                        00            .byte	0
03422 0B8A                        2A            .byte	$2A
03423 0B8B                        2A            .byte	$2A
03424 0B8C                        15            .byte	$15
03425 0B8D                        00            .byte	0
03426 0B8E                        2A            .byte	$2A
03427 0B8F                        2A            .byte	$2A
03428 0B90                        2A            .byte	$2A
03429                                           ! 825   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03430 0B91                        00            .byte	0
03431 0B92                        00            .byte	0
03432 0B93                        00            .byte	0
03433 0B94                        00            .byte	0
03434 0B95                        00            .byte	0
03435 0B96                        2A            .byte	$2A
03436 0B97                        00            .byte	0
03437 0B98                        2A            .byte	$2A
03438 0B99                        00            .byte	0
03439 0B9A                        00            .byte	0
03440 0B9B                        2A            .byte	$2A
03441 0B9C                        2A            .byte	$2A
03442 0B9D                        2A            .byte	$2A
03443 0B9E                        00            .byte	0
03444 0B9F                        00            .byte	0
03445 0BA0                        2A            .byte	$2A
03446 0BA1                        00            .byte	0
03447 0BA2                        2A            .byte	$2A
03448 0BA3                        2A            .byte	$2A
03449 0BA4                        15            .byte	$15
03450 0BA5                        00            .byte	0
03451 0BA6                        2A            .byte	$2A
03452 0BA7                        2A            .byte	$2A
03453 0BA8                        2A            .byte	$2A
03454                                           ! 826   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03455 0BA9                        15            .byte	$15
03456 0BAA                        15            .byte	$15
03457 0BAB                        15            .byte	$15
03458 0BAC                        15            .byte	$15
03459 0BAD                        15            .byte	$15
03460 0BAE                        3F            .byte	$3F
03461 0BAF                        15            .byte	$15
03462 0BB0                        3F            .byte	$3F
03463 0BB1                        15            .byte	$15
03464 0BB2                        15            .byte	$15
03465 0BB3                        3F            .byte	$3F
03466 0BB4                        3F            .byte	$3F
03467 0BB5                        3F            .byte	$3F
03468 0BB6                        15            .byte	$15
03469 0BB7                        15            .byte	$15
03470 0BB8                        3F            .byte	$3F
03471 0BB9                        15            .byte	$15
03472 0BBA                        3F            .byte	$3F
03473 0BBB                        3F            .byte	$3F
03474 0BBC                        3F            .byte	$3F
03475 0BBD                        15            .byte	$15
03476 0BBE                        3F            .byte	$3F
03477 0BBF                        3F            .byte	$3F
03478 0BC0                        3F            .byte	$3F
03479                                           ! 827   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03480 0BC1                        15            .byte	$15
03481 0BC2                        15            .byte	$15
03482 0BC3                        15            .byte	$15
03483 0BC4                        15            .byte	$15
03484 0BC5                        15            .byte	$15
03485 0BC6                        3F            .byte	$3F
03486 0BC7                        15            .byte	$15
03487 0BC8                        3F            .byte	$3F
03488 0BC9                        15            .byte	$15
03489 0BCA                        15            .byte	$15
03490 0BCB                        3F            .byte	$3F
03491 0BCC                        3F            .byte	$3F
03492 0BCD                        3F            .byte	$3F
03493 0BCE                        15            .byte	$15
03494 0BCF                        15            .byte	$15
03495 0BD0                        3F            .byte	$3F
03496 0BD1                        15            .byte	$15
03497 0BD2                        3F            .byte	$3F
03498 0BD3                        3F            .byte	$3F
03499 0BD4                        3F            .byte	$3F
03500 0BD5                        15            .byte	$15
03501 0BD6                        3F            .byte	$3F
03502 0BD7                        3F            .byte	$3F
03503                                           ! 828 };
03504 0BD8                        3F            .byte	$3F
03505                                           !BCC_EOS
03506                                           ! 829 static Bit8u palette2[63+1][3]=
03507                                           ! 830 {
03508                       00000BD9            _palette2:
03509                                           ! 831   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03510 0BD9                        00            .byte	0
03511 0BDA                        00            .byte	0
03512 0BDB                        00            .byte	0
03513 0BDC                        00            .byte	0
03514 0BDD                        00            .byte	0
03515 0BDE                        2A            .byte	$2A
03516 0BDF                        00            .byte	0
03517 0BE0                        2A            .byte	$2A
03518 0BE1                        00            .byte	0
03519 0BE2                        00            .byte	0
03520 0BE3                        2A            .byte	$2A
03521 0BE4                        2A            .byte	$2A
03522 0BE5                        2A            .byte	$2A
03523 0BE6                        00            .byte	0
03524 0BE7                        00            .byte	0
03525 0BE8                        2A            .byte	$2A
03526 0BE9                        00            .byte	0
03527 0BEA                        2A            .byte	$2A
03528 0BEB                        2A            .byte	$2A
03529 0BEC                        2A            .byte	$2A
03530 0BED                        00            .byte	0
03531 0BEE                        2A            .byte	$2A
03532 0BEF                        2A            .byte	$2A
03533 0BF0                        2A            .byte	$2A
03534                                           ! 832   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03535 0BF1                        00            .byte	0
03536 0BF2                        00            .byte	0
03537 0BF3                        15            .byte	$15
03538 0BF4                        00            .byte	0
03539 0BF5                        00            .byte	0
03540 0BF6                        3F            .byte	$3F
03541 0BF7                        00            .byte	0
03542 0BF8                        2A            .byte	$2A
03543 0BF9                        15            .byte	$15
03544 0BFA                        00            .byte	0
03545 0BFB                        2A            .byte	$2A
03546 0BFC                        3F            .byte	$3F
03547 0BFD                        2A            .byte	$2A
03548 0BFE                        00            .byte	0
03549 0BFF                        15            .byte	$15
03550 0C00                        2A            .byte	$2A
03551 0C01                        00            .byte	0
03552 0C02                        3F            .byte	$3F
03553 0C03                        2A            .byte	$2A
03554 0C04                        2A            .byte	$2A
03555 0C05                        15            .byte	$15
03556 0C06                        2A            .byte	$2A
03557 0C07                        2A            .byte	$2A
03558 0C08                        3F            .byte	$3F
03559                                           ! 833   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03560 0C09                        00            .byte	0
03561 0C0A                        15            .byte	$15
03562 0C0B                        00            .byte	0
03563 0C0C                        00            .byte	0
03564 0C0D                        15            .byte	$15
03565 0C0E                        2A            .byte	$2A
03566 0C0F                        00            .byte	0
03567 0C10                        3F            .byte	$3F
03568 0C11                        00            .byte	0
03569 0C12                        00            .byte	0
03570 0C13                        3F            .byte	$3F
03571 0C14                        2A            .byte	$2A
03572 0C15                        2A            .byte	$2A
03573 0C16                        15            .byte	$15
03574 0C17                        00            .byte	0
03575 0C18                        2A            .byte	$2A
03576 0C19                        15            .byte	$15
03577 0C1A                        2A            .byte	$2A
03578 0C1B                        2A            .byte	$2A
03579 0C1C                        3F            .byte	$3F
03580 0C1D                        00            .byte	0
03581 0C1E                        2A            .byte	$2A
03582 0C1F                        3F            .byte	$3F
03583 0C20                        2A            .byte	$2A
03584                                           ! 834   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03585 0C21                        00            .byte	0
03586 0C22                        15            .byte	$15
03587 0C23                        15            .byte	$15
03588 0C24                        00            .byte	0
03589 0C25                        15            .byte	$15
03590 0C26                        3F            .byte	$3F
03591 0C27                        00            .byte	0
03592 0C28                        3F            .byte	$3F
03593 0C29                        15            .byte	$15
03594 0C2A                        00            .byte	0
03595 0C2B                        3F            .byte	$3F
03596 0C2C                        3F            .byte	$3F
03597 0C2D                        2A            .byte	$2A
03598 0C2E                        15            .byte	$15
03599 0C2F                        15            .byte	$15
03600 0C30                        2A            .byte	$2A
03601 0C31                        15            .byte	$15
03602 0C32                        3F            .byte	$3F
03603 0C33                        2A            .byte	$2A
03604 0C34                        3F            .byte	$3F
03605 0C35                        15            .byte	$15
03606 0C36                        2A            .byte	$2A
03607 0C37                        3F            .byte	$3F
03608 0C38                        3F            .byte	$3F
03609                                           ! 835   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03610 0C39                        15            .byte	$15
03611 0C3A                        00            .byte	0
03612 0C3B                        00            .byte	0
03613 0C3C                        15            .byte	$15
03614 0C3D                        00            .byte	0
03615 0C3E                        2A            .byte	$2A
03616 0C3F                        15            .byte	$15
03617 0C40                        2A            .byte	$2A
03618 0C41                        00            .byte	0
03619 0C42                        15            .byte	$15
03620 0C43                        2A            .byte	$2A
03621 0C44                        2A            .byte	$2A
03622 0C45                        3F            .byte	$3F
03623 0C46                        00            .byte	0
03624 0C47                        00            .byte	0
03625 0C48                        3F            .byte	$3F
03626 0C49                        00            .byte	0
03627 0C4A                        2A            .byte	$2A
03628 0C4B                        3F            .byte	$3F
03629 0C4C                        2A            .byte	$2A
03630 0C4D                        00            .byte	0
03631 0C4E                        3F            .byte	$3F
03632 0C4F                        2A            .byte	$2A
03633 0C50                        2A            .byte	$2A
03634                                           ! 836   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03635 0C51                        15            .byte	$15
03636 0C52                        00            .byte	0
03637 0C53                        15            .byte	$15
03638 0C54                        15            .byte	$15
03639 0C55                        00            .byte	0
03640 0C56                        3F            .byte	$3F
03641 0C57                        15            .byte	$15
03642 0C58                        2A            .byte	$2A
03643 0C59                        15            .byte	$15
03644 0C5A                        15            .byte	$15
03645 0C5B                        2A            .byte	$2A
03646 0C5C                        3F            .byte	$3F
03647 0C5D                        3F            .byte	$3F
03648 0C5E                        00            .byte	0
03649 0C5F                        15            .byte	$15
03650 0C60                        3F            .byte	$3F
03651 0C61                        00            .byte	0
03652 0C62                        3F            .byte	$3F
03653 0C63                        3F            .byte	$3F
03654 0C64                        2A            .byte	$2A
03655 0C65                        15            .byte	$15
03656 0C66                        3F            .byte	$3F
03657 0C67                        2A            .byte	$2A
03658 0C68                        3F            .byte	$3F
03659                                           ! 837   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03660 0C69                        15            .byte	$15
03661 0C6A                        15            .byte	$15
03662 0C6B                        00            .byte	0
03663 0C6C                        15            .byte	$15
03664 0C6D                        15            .byte	$15
03665 0C6E                        2A            .byte	$2A
03666 0C6F                        15            .byte	$15
03667 0C70                        3F            .byte	$3F
03668 0C71                        00            .byte	0
03669 0C72                        15            .byte	$15
03670 0C73                        3F            .byte	$3F
03671 0C74                        2A            .byte	$2A
03672 0C75                        3F            .byte	$3F
03673 0C76                        15            .byte	$15
03674 0C77                        00            .byte	0
03675 0C78                        3F            .byte	$3F
03676 0C79                        15            .byte	$15
03677 0C7A                        2A            .byte	$2A
03678 0C7B                        3F            .byte	$3F
03679 0C7C                        3F            .byte	$3F
03680 0C7D                        00            .byte	0
03681 0C7E                        3F            .byte	$3F
03682 0C7F                        3F            .byte	$3F
03683 0C80                        2A            .byte	$2A
03684                                           ! 838   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03685 0C81                        15            .byte	$15
03686 0C82                        15            .byte	$15
03687 0C83                        15            .byte	$15
03688 0C84                        15            .byte	$15
03689 0C85                        15            .byte	$15
03690 0C86                        3F            .byte	$3F
03691 0C87                        15            .byte	$15
03692 0C88                        3F            .byte	$3F
03693 0C89                        15            .byte	$15
03694 0C8A                        15            .byte	$15
03695 0C8B                        3F            .byte	$3F
03696 0C8C                        3F            .byte	$3F
03697 0C8D                        3F            .byte	$3F
03698 0C8E                        15            .byte	$15
03699 0C8F                        15            .byte	$15
03700 0C90                        3F            .byte	$3F
03701 0C91                        15            .byte	$15
03702 0C92                        3F            .byte	$3F
03703 0C93                        3F            .byte	$3F
03704 0C94                        3F            .byte	$3F
03705 0C95                        15            .byte	$15
03706 0C96                        3F            .byte	$3F
03707 0C97                        3F            .byte	$3F
03708                                           ! 839 };
03709 0C98                        3F            .byte	$3F
03710                                           !BCC_EOS
03711                                           ! 840 static Bit8u palette3[256][3]=
03712                                           ! 841 {
03713                       00000C99            _palette3:
03714                                           ! 842   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03715 0C99                        00            .byte	0
03716 0C9A                        00            .byte	0
03717 0C9B                        00            .byte	0
03718 0C9C                        00            .byte	0
03719 0C9D                        00            .byte	0
03720 0C9E                        2A            .byte	$2A
03721 0C9F                        00            .byte	0
03722 0CA0                        2A            .byte	$2A
03723 0CA1                        00            .byte	0
03724 0CA2                        00            .byte	0
03725 0CA3                        2A            .byte	$2A
03726 0CA4                        2A            .byte	$2A
03727 0CA5                        2A            .byte	$2A
03728 0CA6                        00            .byte	0
03729 0CA7                        00            .byte	0
03730 0CA8                        2A            .byte	$2A
03731 0CA9                        00            .byte	0
03732 0CAA                        2A            .byte	$2A
03733 0CAB                        2A            .byte	$2A
03734 0CAC                        15            .byte	$15
03735 0CAD                        00            .byte	0
03736 0CAE                        2A            .byte	$2A
03737 0CAF                        2A            .byte	$2A
03738 0CB0                        2A            .byte	$2A
03739                                           ! 843   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03740 0CB1                        15            .byte	$15
03741 0CB2                        15            .byte	$15
03742 0CB3                        15            .byte	$15
03743 0CB4                        15            .byte	$15
03744 0CB5                        15            .byte	$15
03745 0CB6                        3F            .byte	$3F
03746 0CB7                        15            .byte	$15
03747 0CB8                        3F            .byte	$3F
03748 0CB9                        15            .byte	$15
03749 0CBA                        15            .byte	$15
03750 0CBB                        3F            .byte	$3F
03751 0CBC                        3F            .byte	$3F
03752 0CBD                        3F            .byte	$3F
03753 0CBE                        15            .byte	$15
03754 0CBF                        15            .byte	$15
03755 0CC0                        3F            .byte	$3F
03756 0CC1                        15            .byte	$15
03757 0CC2                        3F            .byte	$3F
03758 0CC3                        3F            .byte	$3F
03759 0CC4                        3F            .byte	$3F
03760 0CC5                        15            .byte	$15
03761 0CC6                        3F            .byte	$3F
03762 0CC7                        3F            .byte	$3F
03763 0CC8                        3F            .byte	$3F
03764                                           ! 844   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03765 0CC9                        00            .byte	0
03766 0CCA                        00            .byte	0
03767 0CCB                        00            .byte	0
03768 0CCC                        05            .byte	5
03769 0CCD                        05            .byte	5
03770 0CCE                        05            .byte	5
03771 0CCF                        08            .byte	8
03772 0CD0                        08            .byte	8
03773 0CD1                        08            .byte	8
03774 0CD2                        0B            .byte	$B
03775 0CD3                        0B            .byte	$B
03776 0CD4                        0B            .byte	$B
03777 0CD5                        0E            .byte	$E
03778 0CD6                        0E            .byte	$E
03779 0CD7                        0E            .byte	$E
03780 0CD8                        11            .byte	$11
03781 0CD9                        11            .byte	$11
03782 0CDA                        11            .byte	$11
03783 0CDB                        14            .byte	$14
03784 0CDC                        14            .byte	$14
03785 0CDD                        14            .byte	$14
03786 0CDE                        18            .byte	$18
03787 0CDF                        18            .byte	$18
03788 0CE0                        18            .byte	$18
03789                                           ! 845   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 
03790 0CE1                        1C            .byte	$1C
03791 0CE2                        1C            .byte	$1C
03792 0CE3                        1C            .byte	$1C
03793 0CE4                        20            .byte	$20
03794 0CE5                        20            .byte	$20
03795 0CE6                        20            .byte	$20
03796 0CE7                        24            .byte	$24
03797 0CE8                        24            .byte	$24
03798 0CE9                        24            .byte	$24
03799 0CEA                        28            .byte	$28
03800 0CEB                        28            .byte	$28
03801 0CEC                        28            .byte	$28
03802 0CED                        2D            .byte	$2D
03803 0CEE                        2D            .byte	$2D
03804 0CEF                        2D            .byte	$2D
03805 0CF0                        32            .byte	$32
03806 0CF1                        32            .byte	$32
03807 0CF2                        32            .byte	$32
03808                                           ! 845 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03809 0CF3                        38            .byte	$38
03810 0CF4                        38            .byte	$38
03811 0CF5                        38            .byte	$38
03812 0CF6                        3F            .byte	$3F
03813 0CF7                        3F            .byte	$3F
03814 0CF8                        3F            .byte	$3F
03815                                           ! 846   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03816 0CF9                        00            .byte	0
03817 0CFA                        00            .byte	0
03818 0CFB                        3F            .byte	$3F
03819 0CFC                        10            .byte	$10
03820 0CFD                        00            .byte	0
03821 0CFE                        3F            .byte	$3F
03822 0CFF                        1F            .byte	$1F
03823 0D00                        00            .byte	0
03824 0D01                        3F            .byte	$3F
03825 0D02                        2F            .byte	$2F
03826 0D03                        00            .byte	0
03827 0D04                        3F            .byte	$3F
03828 0D05                        3F            .byte	$3F
03829 0D06                        00            .byte	0
03830 0D07                        3F            .byte	$3F
03831 0D08                        3F            .byte	$3F
03832 0D09                        00            .byte	0
03833 0D0A                        2F            .byte	$2F
03834 0D0B                        3F            .byte	$3F
03835 0D0C                        00            .byte	0
03836 0D0D                        1F            .byte	$1F
03837 0D0E                        3F            .byte	$3F
03838 0D0F                        00            .byte	0
03839 0D10                        10            .byte	$10
03840                                           ! 847   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03841 0D11                        3F            .byte	$3F
03842 0D12                        00            .byte	0
03843 0D13                        00            .byte	0
03844 0D14                        3F            .byte	$3F
03845 0D15                        10            .byte	$10
03846 0D16                        00            .byte	0
03847 0D17                        3F            .byte	$3F
03848 0D18                        1F            .byte	$1F
03849 0D19                        00            .byte	0
03850 0D1A                        3F            .byte	$3F
03851 0D1B                        2F            .byte	$2F
03852 0D1C                        00            .byte	0
03853 0D1D                        3F            .byte	$3F
03854 0D1E                        3F            .byte	$3F
03855 0D1F                        00            .byte	0
03856 0D20                        2F            .byte	$2F
03857 0D21                        3F            .byte	$3F
03858 0D22                        00            .byte	0
03859 0D23                        1F            .byte	$1F
03860 0D24                        3F            .byte	$3F
03861 0D25                        00            .byte	0
03862 0D26                        10            .byte	$10
03863 0D27                        3F            .byte	$3F
03864 0D28                        00            .byte	0
03865                                           ! 848   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03866 0D29                        00            .byte	0
03867 0D2A                        3F            .byte	$3F
03868 0D2B                        00            .byte	0
03869 0D2C                        00            .byte	0
03870 0D2D                        3F            .byte	$3F
03871 0D2E                        10            .byte	$10
03872 0D2F                        00            .byte	0
03873 0D30                        3F            .byte	$3F
03874 0D31                        1F            .byte	$1F
03875 0D32                        00            .byte	0
03876 0D33                        3F            .byte	$3F
03877 0D34                        2F            .byte	$2F
03878 0D35                        00            .byte	0
03879 0D36                        3F            .byte	$3F
03880 0D37                        3F            .byte	$3F
03881 0D38                        00            .byte	0
03882 0D39                        2F            .byte	$2F
03883 0D3A                        3F            .byte	$3F
03884 0D3B                        00            .byte	0
03885 0D3C                        1F            .byte	$1F
03886 0D3D                        3F            .byte	$3F
03887 0D3E                        00            .byte	0
03888 0D3F                        10            .byte	$10
03889 0D40                        3F            .byte	$3F
03890                                           ! 849   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03891 0D41                        1F            .byte	$1F
03892 0D42                        1F            .byte	$1F
03893 0D43                        3F            .byte	$3F
03894 0D44                        27            .byte	$27
03895 0D45                        1F            .byte	$1F
03896 0D46                        3F            .byte	$3F
03897 0D47                        2F            .byte	$2F
03898 0D48                        1F            .byte	$1F
03899 0D49                        3F            .byte	$3F
03900 0D4A                        37            .byte	$37
03901 0D4B                        1F            .byte	$1F
03902 0D4C                        3F            .byte	$3F
03903 0D4D                        3F            .byte	$3F
03904 0D4E                        1F            .byte	$1F
03905 0D4F                        3F            .byte	$3F
03906 0D50                        3F            .byte	$3F
03907 0D51                        1F            .byte	$1F
03908 0D52                        37            .byte	$37
03909 0D53                        3F            .byte	$3F
03910 0D54                        1F            .byte	$1F
03911 0D55                        2F            .byte	$2F
03912 0D56                        3F            .byte	$3F
03913 0D57                        1F            .byte	$1F
03914 0D58                        27            .byte	$27
03915                                           ! 850   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03916 0D59                        3F            .byte	$3F
03917 0D5A                        1F            .byte	$1F
03918 0D5B                        1F            .byte	$1F
03919 0D5C                        3F            .byte	$3F
03920 0D5D                        27            .byte	$27
03921 0D5E                        1F            .byte	$1F
03922 0D5F                        3F            .byte	$3F
03923 0D60                        2F            .byte	$2F
03924 0D61                        1F            .byte	$1F
03925 0D62                        3F            .byte	$3F
03926 0D63                        37            .byte	$37
03927 0D64                        1F            .byte	$1F
03928 0D65                        3F            .byte	$3F
03929 0D66                        3F            .byte	$3F
03930 0D67                        1F            .byte	$1F
03931 0D68                        37            .byte	$37
03932 0D69                        3F            .byte	$3F
03933 0D6A                        1F            .byte	$1F
03934 0D6B                        2F            .byte	$2F
03935 0D6C                        3F            .byte	$3F
03936 0D6D                        1F            .byte	$1F
03937 0D6E                        27            .byte	$27
03938 0D6F                        3F            .byte	$3F
03939 0D70                        1F            .byte	$1F
03940                                           ! 851   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03941 0D71                        1F            .byte	$1F
03942 0D72                        3F            .byte	$3F
03943 0D73                        1F            .byte	$1F
03944 0D74                        1F            .byte	$1F
03945 0D75                        3F            .byte	$3F
03946 0D76                        27            .byte	$27
03947 0D77                        1F            .byte	$1F
03948 0D78                        3F            .byte	$3F
03949 0D79                        2F            .byte	$2F
03950 0D7A                        1F            .byte	$1F
03951 0D7B                        3F            .byte	$3F
03952 0D7C                        37            .byte	$37
03953 0D7D                        1F            .byte	$1F
03954 0D7E                        3F            .byte	$3F
03955 0D7F                        3F            .byte	$3F
03956 0D80                        1F            .byte	$1F
03957 0D81                        37            .byte	$37
03958 0D82                        3F            .byte	$3F
03959 0D83                        1F            .byte	$1F
03960 0D84                        2F            .byte	$2F
03961 0D85                        3F            .byte	$3F
03962 0D86                        1F            .byte	$1F
03963 0D87                        27            .byte	$27
03964 0D88                        3F            .byte	$3F
03965                                           ! 852   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03966 0D89                        2D            .byte	$2D
03967 0D8A                        2D            .byte	$2D
03968 0D8B                        3F            .byte	$3F
03969 0D8C                        31            .byte	$31
03970 0D8D                        2D            .byte	$2D
03971 0D8E                        3F            .byte	$3F
03972 0D8F                        36            .byte	$36
03973 0D90                        2D            .byte	$2D
03974 0D91                        3F            .byte	$3F
03975 0D92                        3A            .byte	$3A
03976 0D93                        2D            .byte	$2D
03977 0D94                        3F            .byte	$3F
03978 0D95                        3F            .byte	$3F
03979 0D96                        2D            .byte	$2D
03980 0D97                        3F            .byte	$3F
03981 0D98                        3F            .byte	$3F
03982 0D99                        2D            .byte	$2D
03983 0D9A                        3A            .byte	$3A
03984 0D9B                        3F            .byte	$3F
03985 0D9C                        2D            .byte	$2D
03986 0D9D                        36            .byte	$36
03987 0D9E                        3F            .byte	$3F
03988 0D9F                        2D            .byte	$2D
03989 0DA0                        31            .byte	$31
03990                                           ! 853   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03991 0DA1                        3F            .byte	$3F
03992 0DA2                        2D            .byte	$2D
03993 0DA3                        2D            .byte	$2D
03994 0DA4                        3F            .byte	$3F
03995 0DA5                        31            .byte	$31
03996 0DA6                        2D            .byte	$2D
03997 0DA7                        3F            .byte	$3F
03998 0DA8                        36            .byte	$36
03999 0DA9                        2D            .byte	$2D
04000 0DAA                        3F            .byte	$3F
04001 0DAB                        3A            .byte	$3A
04002 0DAC                        2D            .byte	$2D
04003 0DAD                        3F            .byte	$3F
04004 0DAE                        3F            .byte	$3F
04005 0DAF                        2D            .byte	$2D
04006 0DB0                        3A            .byte	$3A
04007 0DB1                        3F            .byte	$3F
04008 0DB2                        2D            .byte	$2D
04009 0DB3                        36            .byte	$36
04010 0DB4                        3F            .byte	$3F
04011 0DB5                        2D            .byte	$2D
04012 0DB6                        31            .byte	$31
04013 0DB7                        3F            .byte	$3F
04014 0DB8                        2D            .byte	$2D
04015                                           ! 854   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
04016 0DB9                        2D            .byte	$2D
04017 0DBA                        3F            .byte	$3F
04018 0DBB                        2D            .byte	$2D
04019 0DBC                        2D            .byte	$2D
04020 0DBD                        3F            .byte	$3F
04021 0DBE                        31            .byte	$31
04022 0DBF                        2D            .byte	$2D
04023 0DC0                        3F            .byte	$3F
04024 0DC1                        36            .byte	$36
04025 0DC2                        2D            .byte	$2D
04026 0DC3                        3F            .byte	$3F
04027 0DC4                        3A            .byte	$3A
04028 0DC5                        2D            .byte	$2D
04029 0DC6                        3F            .byte	$3F
04030 0DC7                        3F            .byte	$3F
04031 0DC8                        2D            .byte	$2D
04032 0DC9                        3A            .byte	$3A
04033 0DCA                        3F            .byte	$3F
04034 0DCB                        2D            .byte	$2D
04035 0DCC                        36            .byte	$36
04036 0DCD                        3F            .byte	$3F
04037 0DCE                        2D            .byte	$2D
04038 0DCF                        31            .byte	$31
04039 0DD0                        3F            .byte	$3F
04040                                           ! 855   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04041 0DD1                        00            .byte	0
04042 0DD2                        00            .byte	0
04043 0DD3                        1C            .byte	$1C
04044 0DD4                        07            .byte	7
04045 0DD5                        00            .byte	0
04046 0DD6                        1C            .byte	$1C
04047 0DD7                        0E            .byte	$E
04048 0DD8                        00            .byte	0
04049 0DD9                        1C            .byte	$1C
04050 0DDA                        15            .byte	$15
04051 0DDB                        00            .byte	0
04052 0DDC                        1C            .byte	$1C
04053 0DDD                        1C            .byte	$1C
04054 0DDE                        00            .byte	0
04055 0DDF                        1C            .byte	$1C
04056 0DE0                        1C            .byte	$1C
04057 0DE1                        00            .byte	0
04058 0DE2                        15            .byte	$15
04059 0DE3                        1C            .byte	$1C
04060 0DE4                        00            .byte	0
04061 0DE5                        0E            .byte	$E
04062 0DE6                        1C            .byte	$1C
04063 0DE7                        00            .byte	0
04064 0DE8                        07            .byte	7
04065                                           ! 856   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04066 0DE9                        1C            .byte	$1C
04067 0DEA                        00            .byte	0
04068 0DEB                        00            .byte	0
04069 0DEC                        1C            .byte	$1C
04070 0DED                        07            .byte	7
04071 0DEE                        00            .byte	0
04072 0DEF                        1C            .byte	$1C
04073 0DF0                        0E            .byte	$E
04074 0DF1                        00            .byte	0
04075 0DF2                        1C            .byte	$1C
04076 0DF3                        15            .byte	$15
04077 0DF4                        00            .byte	0
04078 0DF5                        1C            .byte	$1C
04079 0DF6                        1C            .byte	$1C
04080 0DF7                        00            .byte	0
04081 0DF8                        15            .byte	$15
04082 0DF9                        1C            .byte	$1C
04083 0DFA                        00            .byte	0
04084 0DFB                        0E            .byte	$E
04085 0DFC                        1C            .byte	$1C
04086 0DFD                        00            .byte	0
04087 0DFE                        07            .byte	7
04088 0DFF                        1C            .byte	$1C
04089 0E00                        00            .byte	0
04090                                           ! 857   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04091 0E01                        00            .byte	0
04092 0E02                        1C            .byte	$1C
04093 0E03                        00            .byte	0
04094 0E04                        00            .byte	0
04095 0E05                        1C            .byte	$1C
04096 0E06                        07            .byte	7
04097 0E07                        00            .byte	0
04098 0E08                        1C            .byte	$1C
04099 0E09                        0E            .byte	$E
04100 0E0A                        00            .byte	0
04101 0E0B                        1C            .byte	$1C
04102 0E0C                        15            .byte	$15
04103 0E0D                        00            .byte	0
04104 0E0E                        1C            .byte	$1C
04105 0E0F                        1C            .byte	$1C
04106 0E10                        00            .byte	0
04107 0E11                        15            .byte	$15
04108 0E12                        1C            .byte	$1C
04109 0E13                        00            .byte	0
04110 0E14                        0E            .byte	$E
04111 0E15                        1C            .byte	$1C
04112 0E16                        00            .byte	0
04113 0E17                        07            .byte	7
04114 0E18                        1C            .byte	$1C
04115                                           ! 858   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04116 0E19                        0E            .byte	$E
04117 0E1A                        0E            .byte	$E
04118 0E1B                        1C            .byte	$1C
04119 0E1C                        11            .byte	$11
04120 0E1D                        0E            .byte	$E
04121 0E1E                        1C            .byte	$1C
04122 0E1F                        15            .byte	$15
04123 0E20                        0E            .byte	$E
04124 0E21                        1C            .byte	$1C
04125 0E22                        18            .byte	$18
04126 0E23                        0E            .byte	$E
04127 0E24                        1C            .byte	$1C
04128 0E25                        1C            .byte	$1C
04129 0E26                        0E            .byte	$E
04130 0E27                        1C            .byte	$1C
04131 0E28                        1C            .byte	$1C
04132 0E29                        0E            .byte	$E
04133 0E2A                        18            .byte	$18
04134 0E2B                        1C            .byte	$1C
04135 0E2C                        0E            .byte	$E
04136 0E2D                        15            .byte	$15
04137 0E2E                        1C            .byte	$1C
04138 0E2F                        0E            .byte	$E
04139 0E30                        11            .byte	$11
04140                                           ! 859   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04141 0E31                        1C            .byte	$1C
04142 0E32                        0E            .byte	$E
04143 0E33                        0E            .byte	$E
04144 0E34                        1C            .byte	$1C
04145 0E35                        11            .byte	$11
04146 0E36                        0E            .byte	$E
04147 0E37                        1C            .byte	$1C
04148 0E38                        15            .byte	$15
04149 0E39                        0E            .byte	$E
04150 0E3A                        1C            .byte	$1C
04151 0E3B                        18            .byte	$18
04152 0E3C                        0E            .byte	$E
04153 0E3D                        1C            .byte	$1C
04154 0E3E                        1C            .byte	$1C
04155 0E3F                        0E            .byte	$E
04156 0E40                        18            .byte	$18
04157 0E41                        1C            .byte	$1C
04158 0E42                        0E            .byte	$E
04159 0E43                        15            .byte	$15
04160 0E44                        1C            .byte	$1C
04161 0E45                        0E            .byte	$E
04162 0E46                        11            .byte	$11
04163 0E47                        1C            .byte	$1C
04164 0E48                        0E            .byte	$E
04165                                           ! 860   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04166 0E49                        0E            .byte	$E
04167 0E4A                        1C            .byte	$1C
04168 0E4B                        0E            .byte	$E
04169 0E4C                        0E            .byte	$E
04170 0E4D                        1C            .byte	$1C
04171 0E4E                        11            .byte	$11
04172 0E4F                        0E            .byte	$E
04173 0E50                        1C            .byte	$1C
04174 0E51                        15            .byte	$15
04175 0E52                        0E            .byte	$E
04176 0E53                        1C            .byte	$1C
04177 0E54                        18            .byte	$18
04178 0E55                        0E            .byte	$E
04179 0E56                        1C            .byte	$1C
04180 0E57                        1C            .byte	$1C
04181 0E58                        0E            .byte	$E
04182 0E59                        18            .byte	$18
04183 0E5A                        1C            .byte	$1C
04184 0E5B                        0E            .byte	$E
04185 0E5C                        15            .byte	$15
04186 0E5D                        1C            .byte	$1C
04187 0E5E                        0E            .byte	$E
04188 0E5F                        11            .byte	$11
04189 0E60                        1C            .byte	$1C
04190                                           ! 861   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 
04191 0E61                        14            .byte	$14
04192 0E62                        14            .byte	$14
04193 0E63                        1C            .byte	$1C
04194 0E64                        16            .byte	$16
04195 0E65                        14            .byte	$14
04196 0E66                        1C            .byte	$1C
04197 0E67                        18            .byte	$18
04198 0E68                        14            .byte	$14
04199 0E69                        1C            .byte	$1C
04200 0E6A                        1A            .byte	$1A
04201 0E6B                        14            .byte	$14
04202 0E6C                        1C            .byte	$1C
04203                                           ! 861 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04204 0E6D                        1C            .byte	$1C
04205 0E6E                        14            .byte	$14
04206 0E6F                        1C            .byte	$1C
04207 0E70                        1C            .byte	$1C
04208 0E71                        14            .byte	$14
04209 0E72                        1A            .byte	$1A
04210 0E73                        1C            .byte	$1C
04211 0E74                        14            .byte	$14
04212 0E75                        18            .byte	$18
04213 0E76                        1C            .byte	$1C
04214 0E77                        14            .byte	$14
04215 0E78                        16            .byte	$16
04216                                           ! 862   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04217 0E79                        1C            .byte	$1C
04218 0E7A                        14            .byte	$14
04219 0E7B                        14            .byte	$14
04220 0E7C                        1C            .byte	$1C
04221 0E7D                        16            .byte	$16
04222 0E7E                        14            .byte	$14
04223 0E7F                        1C            .byte	$1C
04224 0E80                        18            .byte	$18
04225 0E81                        14            .byte	$14
04226 0E82                        1C            .byte	$1C
04227 0E83                        1A            .byte	$1A
04228 0E84                        14            .byte	$14
04229 0E85                        1C            .byte	$1C
04230 0E86                        1C            .byte	$1C
04231 0E87                        14            .byte	$14
04232 0E88                        1A            .byte	$1A
04233 0E89                        1C            .byte	$1C
04234 0E8A                        14            .byte	$14
04235 0E8B                        18            .byte	$18
04236 0E8C                        1C            .byte	$1C
04237 0E8D                        14            .byte	$14
04238 0E8E                        16            .byte	$16
04239 0E8F                        1C            .byte	$1C
04240 0E90                        14            .byte	$14
04241                                           ! 863   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04242 0E91                        14            .byte	$14
04243 0E92                        1C            .byte	$1C
04244 0E93                        14            .byte	$14
04245 0E94                        14            .byte	$14
04246 0E95                        1C            .byte	$1C
04247 0E96                        16            .byte	$16
04248 0E97                        14            .byte	$14
04249 0E98                        1C            .byte	$1C
04250 0E99                        18            .byte	$18
04251 0E9A                        14            .byte	$14
04252 0E9B                        1C            .byte	$1C
04253 0E9C                        1A            .byte	$1A
04254 0E9D                        14            .byte	$14
04255 0E9E                        1C            .byte	$1C
04256 0E9F                        1C            .byte	$1C
04257 0EA0                        14            .byte	$14
04258 0EA1                        1A            .byte	$1A
04259 0EA2                        1C            .byte	$1C
04260 0EA3                        14            .byte	$14
04261 0EA4                        18            .byte	$18
04262 0EA5                        1C            .byte	$1C
04263 0EA6                        14            .byte	$14
04264 0EA7                        16            .byte	$16
04265 0EA8                        1C            .byte	$1C
04266                                           ! 864   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04267 0EA9                        00            .byte	0
04268 0EAA                        00            .byte	0
04269 0EAB                        10            .byte	$10
04270 0EAC                        04            .byte	4
04271 0EAD                        00            .byte	0
04272 0EAE                        10            .byte	$10
04273 0EAF                        08            .byte	8
04274 0EB0                        00            .byte	0
04275 0EB1                        10            .byte	$10
04276 0EB2                        0C            .byte	$C
04277 0EB3                        00            .byte	0
04278 0EB4                        10            .byte	$10
04279 0EB5                        10            .byte	$10
04280 0EB6                        00            .byte	0
04281 0EB7                        10            .byte	$10
04282 0EB8                        10            .byte	$10
04283 0EB9                        00            .byte	0
04284 0EBA                        0C            .byte	$C
04285 0EBB                        10            .byte	$10
04286 0EBC                        00            .byte	0
04287 0EBD                        08            .byte	8
04288 0EBE                        10            .byte	$10
04289 0EBF                        00            .byte	0
04290 0EC0                        04            .byte	4
04291                                           ! 865   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04292 0EC1                        10            .byte	$10
04293 0EC2                        00            .byte	0
04294 0EC3                        00            .byte	0
04295 0EC4                        10            .byte	$10
04296 0EC5                        04            .byte	4
04297 0EC6                        00            .byte	0
04298 0EC7                        10            .byte	$10
04299 0EC8                        08            .byte	8
04300 0EC9                        00            .byte	0
04301 0ECA                        10            .byte	$10
04302 0ECB                        0C            .byte	$C
04303 0ECC                        00            .byte	0
04304 0ECD                        10            .byte	$10
04305 0ECE                        10            .byte	$10
04306 0ECF                        00            .byte	0
04307 0ED0                        0C            .byte	$C
04308 0ED1                        10            .byte	$10
04309 0ED2                        00            .byte	0
04310 0ED3                        08            .byte	8
04311 0ED4                        10            .byte	$10
04312 0ED5                        00            .byte	0
04313 0ED6                        04            .byte	4
04314 0ED7                        10            .byte	$10
04315 0ED8                        00            .byte	0
04316                                           ! 866   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04317 0ED9                        00            .byte	0
04318 0EDA                        10            .byte	$10
04319 0EDB                        00            .byte	0
04320 0EDC                        00            .byte	0
04321 0EDD                        10            .byte	$10
04322 0EDE                        04            .byte	4
04323 0EDF                        00            .byte	0
04324 0EE0                        10            .byte	$10
04325 0EE1                        08            .byte	8
04326 0EE2                        00            .byte	0
04327 0EE3                        10            .byte	$10
04328 0EE4                        0C            .byte	$C
04329 0EE5                        00            .byte	0
04330 0EE6                        10            .byte	$10
04331 0EE7                        10            .byte	$10
04332 0EE8                        00            .byte	0
04333 0EE9                        0C            .byte	$C
04334 0EEA                        10            .byte	$10
04335 0EEB                        00            .byte	0
04336 0EEC                        08            .byte	8
04337 0EED                        10            .byte	$10
04338 0EEE                        00            .byte	0
04339 0EEF                        04            .byte	4
04340 0EF0                        10            .byte	$10
04341                                           ! 867   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04342 0EF1                        08            .byte	8
04343 0EF2                        08            .byte	8
04344 0EF3                        10            .byte	$10
04345 0EF4                        0A            .byte	$A
04346 0EF5                        08            .byte	8
04347 0EF6                        10            .byte	$10
04348 0EF7                        0C            .byte	$C
04349 0EF8                        08            .byte	8
04350 0EF9                        10            .byte	$10
04351 0EFA                        0E            .byte	$E
04352 0EFB                        08            .byte	8
04353 0EFC                        10            .byte	$10
04354 0EFD                        10            .byte	$10
04355 0EFE                        08            .byte	8
04356 0EFF                        10            .byte	$10
04357 0F00                        10            .byte	$10
04358 0F01                        08            .byte	8
04359 0F02                        0E            .byte	$E
04360 0F03                        10            .byte	$10
04361 0F04                        08            .byte	8
04362 0F05                        0C            .byte	$C
04363 0F06                        10            .byte	$10
04364 0F07                        08            .byte	8
04365 0F08                        0A            .byte	$A
04366                                           ! 868   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04367 0F09                        10            .byte	$10
04368 0F0A                        08            .byte	8
04369 0F0B                        08            .byte	8
04370 0F0C                        10            .byte	$10
04371 0F0D                        0A            .byte	$A
04372 0F0E                        08            .byte	8
04373 0F0F                        10            .byte	$10
04374 0F10                        0C            .byte	$C
04375 0F11                        08            .byte	8
04376 0F12                        10            .byte	$10
04377 0F13                        0E            .byte	$E
04378 0F14                        08            .byte	8
04379 0F15                        10            .byte	$10
04380 0F16                        10            .byte	$10
04381 0F17                        08            .byte	8
04382 0F18                        0E            .byte	$E
04383 0F19                        10            .byte	$10
04384 0F1A                        08            .byte	8
04385 0F1B                        0C            .byte	$C
04386 0F1C                        10            .byte	$10
04387 0F1D                        08            .byte	8
04388 0F1E                        0A            .byte	$A
04389 0F1F                        10            .byte	$10
04390 0F20                        08            .byte	8
04391                                           ! 869   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04392 0F21                        08            .byte	8
04393 0F22                        10            .byte	$10
04394 0F23                        08            .byte	8
04395 0F24                        08            .byte	8
04396 0F25                        10            .byte	$10
04397 0F26                        0A            .byte	$A
04398 0F27                        08            .byte	8
04399 0F28                        10            .byte	$10
04400 0F29                        0C            .byte	$C
04401 0F2A                        08            .byte	8
04402 0F2B                        10            .byte	$10
04403 0F2C                        0E            .byte	$E
04404 0F2D                        08            .byte	8
04405 0F2E                        10            .byte	$10
04406 0F2F                        10            .byte	$10
04407 0F30                        08            .byte	8
04408 0F31                        0E            .byte	$E
04409 0F32                        10            .byte	$10
04410 0F33                        08            .byte	8
04411 0F34                        0C            .byte	$C
04412 0F35                        10            .byte	$10
04413 0F36                        08            .byte	8
04414 0F37                        0A            .byte	$A
04415 0F38                        10            .byte	$10
04416                                           ! 870   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04417 0F39                        0B            .byte	$B
04418 0F3A                        0B            .byte	$B
04419 0F3B                        10            .byte	$10
04420 0F3C                        0C            .byte	$C
04421 0F3D                        0B            .byte	$B
04422 0F3E                        10            .byte	$10
04423 0F3F                        0D            .byte	$D
04424 0F40                        0B            .byte	$B
04425 0F41                        10            .byte	$10
04426 0F42                        0F            .byte	$F
04427 0F43                        0B            .byte	$B
04428 0F44                        10            .byte	$10
04429 0F45                        10            .byte	$10
04430 0F46                        0B            .byte	$B
04431 0F47                        10            .byte	$10
04432 0F48                        10            .byte	$10
04433 0F49                        0B            .byte	$B
04434 0F4A                        0F            .byte	$F
04435 0F4B                        10            .byte	$10
04436 0F4C                        0B            .byte	$B
04437 0F4D                        0D            .byte	$D
04438 0F4E                        10            .byte	$10
04439 0F4F                        0B            .byte	$B
04440 0F50                        0C            .byte	$C
04441                                           ! 871   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04442 0F51                        10            .byte	$10
04443 0F52                        0B            .byte	$B
04444 0F53                        0B            .byte	$B
04445 0F54                        10            .byte	$10
04446 0F55                        0C            .byte	$C
04447 0F56                        0B            .byte	$B
04448 0F57                        10            .byte	$10
04449 0F58                        0D            .byte	$D
04450 0F59                        0B            .byte	$B
04451 0F5A                        10            .byte	$10
04452 0F5B                        0F            .byte	$F
04453 0F5C                        0B            .byte	$B
04454 0F5D                        10            .byte	$10
04455 0F5E                        10            .byte	$10
04456 0F5F                        0B            .byte	$B
04457 0F60                        0F            .byte	$F
04458 0F61                        10            .byte	$10
04459 0F62                        0B            .byte	$B
04460 0F63                        0D            .byte	$D
04461 0F64                        10            .byte	$10
04462 0F65                        0B            .byte	$B
04463 0F66                        0C            .byte	$C
04464 0F67                        10            .byte	$10
04465 0F68                        0B            .byte	$B
04466                                           ! 872   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04467 0F69                        0B            .byte	$B
04468 0F6A                        10            .byte	$10
04469 0F6B                        0B            .byte	$B
04470 0F6C                        0B            .byte	$B
04471 0F6D                        10            .byte	$10
04472 0F6E                        0C            .byte	$C
04473 0F6F                        0B            .byte	$B
04474 0F70                        10            .byte	$10
04475 0F71                        0D            .byte	$D
04476 0F72                        0B            .byte	$B
04477 0F73                        10            .byte	$10
04478 0F74                        0F            .byte	$F
04479 0F75                        0B            .byte	$B
04480 0F76                        10            .byte	$10
04481 0F77                        10            .byte	$10
04482 0F78                        0B            .byte	$B
04483 0F79                        0F            .byte	$F
04484 0F7A                        10            .byte	$10
04485 0F7B                        0B            .byte	$B
04486 0F7C                        0D            .byte	$D
04487 0F7D                        10            .byte	$10
04488 0F7E                        0B            .byte	$B
04489 0F7F                        0C            .byte	$C
04490 0F80                        10            .byte	$10
04491                                           ! 873   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04492 0F81                        00            .byte	0
04493 0F82                        00            .byte	0
04494 0F83                        00            .byte	0
04495 0F84                        00            .byte	0
04496 0F85                        00            .byte	0
04497 0F86                        00            .byte	0
04498 0F87                        00            .byte	0
04499 0F88                        00            .byte	0
04500 0F89                        00            .byte	0
04501 0F8A                        00            .byte	0
04502 0F8B                        00            .byte	0
04503 0F8C                        00            .byte	0
04504 0F8D                        00            .byte	0
04505 0F8E                        00            .byte	0
04506 0F8F                        00            .byte	0
04507 0F90                        00            .byte	0
04508 0F91                        00            .byte	0
04509 0F92                        00            .byte	0
04510 0F93                        00            .byte	0
04511 0F94                        00            .byte	0
04512 0F95                        00            .byte	0
04513 0F96                        00            .byte	0
04514 0F97                        00            .byte	0
04515                                           ! 874 };
04516 0F98                        00            .byte	0
04517                                           !BCC_EOS
04518                                           ! 875 static Bit8u static_functionality[0x10]=
04519                                           ! 876 {
04520                       00000F99            _static_functionality:
04521                                           ! 877          0xff,
04522 0F99                        FF            .byte	$FF
04523                                           ! 878          0xe0,
04524 0F9A                        E0            .byte	$E0
04525                                           ! 879          0x0f,
04526 0F9B                        0F            .byte	$F
04527                                           ! 880          0x00, 0x00, 0x00, 0x00,
04528 0F9C                        00            .byte	0
04529 0F9D                        00            .byte	0
04530 0F9E                        00            .byte	0
04531 0F9F                        00            .byte	0
04532                                           ! 881          0x07,
04533 0FA0                        07            .byte	7
04534                                           ! 882          0x02,
04535 0FA1                        02            .byte	2
04536                                           ! 883          0x08,
04537 0FA2                        08            .byte	8
04538                                           ! 884          0xe7,
04539 0FA3                        E7            .byte	$E7
04540                                           ! 885          0x0c,
04541 0FA4                        0C            .byte	$C
04542                                           ! 886          0x00,
04543 0FA5                        00            .byte	0
04544                                           ! 887          0x00,
04545 0FA6                        00            .byte	0
04546                                           ! 888          0x00,
04547 0FA7                        00            .byte	0
04548                                           ! 889          0x00
04549                                           ! 890 };
04550 0FA8                        00            .byte	0
04551                                           !BCC_EOS
04552                                           ! 891 static Bit8u vgafont8[256*8]=
04553                                           ! 892 {
04554                       00000FA9            _vgafont8:
04555                                           ! 893  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04556 0FA9                        00            .byte	0
04557 0FAA                        00            .byte	0
04558 0FAB                        00            .byte	0
04559 0FAC                        00            .byte	0
04560 0FAD                        00            .byte	0
04561 0FAE                        00            .byte	0
04562 0FAF                        00            .byte	0
04563 0FB0                        00            .byte	0
04564                                           ! 894  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04565 0FB1                        7E            .byte	$7E
04566 0FB2                        81            .byte	$81
04567 0FB3                        A5            .byte	$A5
04568 0FB4                        81            .byte	$81
04569 0FB5                        BD            .byte	$BD
04570 0FB6                        99            .byte	$99
04571 0FB7                        81            .byte	$81
04572 0FB8                        7E            .byte	$7E
04573                                           ! 895  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe
04574 0FB9                        7E            .byte	$7E
04575 0FBA                        FF            .byte	$FF
04576 0FBB                        DB            .byte	$DB
04577 0FBC                        FF            .byte	$FF
04578 0FBD                        C3            .byte	$C3
04579                                           ! 895 7, 0xff, 0x7e,
04580 0FBE                        E7            .byte	$E7
04581 0FBF                        FF            .byte	$FF
04582 0FC0                        7E            .byte	$7E
04583                                           ! 896  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04584 0FC1                        6C            .byte	$6C
04585 0FC2                        FE            .byte	$FE
04586 0FC3                        FE            .byte	$FE
04587 0FC4                        FE            .byte	$FE
04588 0FC5                        7C            .byte	$7C
04589 0FC6                        38            .byte	$38
04590 0FC7                        10            .byte	$10
04591 0FC8                        00            .byte	0
04592                                           ! 897  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04593 0FC9                        10            .byte	$10
04594 0FCA                        38            .byte	$38
04595 0FCB                        7C            .byte	$7C
04596 0FCC                        FE            .byte	$FE
04597 0FCD                        7C            .byte	$7C
04598 0FCE                        38            .byte	$38
04599 0FCF                        10            .byte	$10
04600 0FD0                        00            .byte	0
04601                                           ! 898  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04602 0FD1                        38            .byte	$38
04603 0FD2                        7C            .byte	$7C
04604 0FD3                        38            .byte	$38
04605 0FD4                        FE            .byte	$FE
04606 0FD5                        FE            .byte	$FE
04607 0FD6                        7C            .byte	$7C
04608 0FD7                        38            .byte	$38
04609 0FD8                        7C            .byte	$7C
04610                                           ! 899  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04611 0FD9                        10            .byte	$10
04612 0FDA                        10            .byte	$10
04613 0FDB                        38            .byte	$38
04614 0FDC                        7C            .byte	$7C
04615 0FDD                        FE            .byte	$FE
04616 0FDE                        7C            .byte	$7C
04617 0FDF                        38            .byte	$38
04618 0FE0                        7C            .byte	$7C
04619                                           ! 900  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04620 0FE1                        00            .byte	0
04621 0FE2                        00            .byte	0
04622 0FE3                        18            .byte	$18
04623 0FE4                        3C            .byte	$3C
04624 0FE5                        3C            .byte	$3C
04625 0FE6                        18            .byte	$18
04626 0FE7                        00            .byte	0
04627 0FE8                        00            .byte	0
04628                                           ! 901  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04629 0FE9                        FF            .byte	$FF
04630 0FEA                        FF            .byte	$FF
04631 0FEB                        E7            .byte	$E7
04632 0FEC                        C3            .byte	$C3
04633 0FED                        C3            .byte	$C3
04634 0FEE                        E7            .byte	$E7
04635 0FEF                        FF            .byte	$FF
04636 0FF0                        FF            .byte	$FF
04637                                           ! 902  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04638 0FF1                        00            .byte	0
04639 0FF2                        3C            .byte	$3C
04640 0FF3                        66            .byte	$66
04641 0FF4                        42            .byte	$42
04642 0FF5                        42            .byte	$42
04643 0FF6                        66            .byte	$66
04644 0FF7                        3C            .byte	$3C
04645 0FF8                        00            .byte	0
04646                                           ! 903  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04647 0FF9                        FF            .byte	$FF
04648 0FFA                        C3            .byte	$C3
04649 0FFB                        99            .byte	$99
04650 0FFC                        BD            .byte	$BD
04651 0FFD                        BD            .byte	$BD
04652 0FFE                        99            .byte	$99
04653 0FFF                        C3            .byte	$C3
04654 1000                        FF            .byte	$FF
04655                                           ! 904  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04656 1001                        0F            .byte	$F
04657 1002                        07            .byte	7
04658 1003                        0F            .byte	$F
04659 1004                        7D            .byte	$7D
04660 1005                        CC            .byte	$CC
04661 1006                        CC            .byte	$CC
04662 1007                        CC            .byte	$CC
04663 1008                        78            .byte	$78
04664                                           ! 905  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04665 1009                        3C            .byte	$3C
04666 100A                        66            .byte	$66
04667 100B                        66            .byte	$66
04668 100C                        66            .byte	$66
04669 100D                        3C            .byte	$3C
04670 100E                        18            .byte	$18
04671 100F                        7E            .byte	$7E
04672 1010                        18            .byte	$18
04673                                           ! 906  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04674 1011                        3F            .byte	$3F
04675 1012                        33            .byte	$33
04676 1013                        3F            .byte	$3F
04677 1014                        30            .byte	$30
04678 1015                        30            .byte	$30
04679 1016                        70            .byte	$70
04680 1017                        F0            .byte	$F0
04681 1018                        E0            .byte	$E0
04682                                           ! 907  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04683 1019                        7F            .byte	$7F
04684 101A                        63            .byte	$63
04685 101B                        7F            .byte	$7F
04686 101C                        63            .byte	$63
04687 101D                        63            .byte	$63
04688 101E                        67            .byte	$67
04689 101F                        E6            .byte	$E6
04690 1020                        C0            .byte	$C0
04691                                           ! 908  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04692 1021                        99            .byte	$99
04693 1022                        5A            .byte	$5A
04694 1023                        3C            .byte	$3C
04695 1024                        E7            .byte	$E7
04696 1025                        E7            .byte	$E7
04697 1026                        3C            .byte	$3C
04698 1027                        5A            .byte	$5A
04699 1028                        99            .byte	$99
04700                                           ! 909  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04701 1029                        80            .byte	$80
04702 102A                        E0            .byte	$E0
04703 102B                        F8            .byte	$F8
04704 102C                        FE            .byte	$FE
04705 102D                        F8            .byte	$F8
04706 102E                        E0            .byte	$E0
04707 102F                        80            .byte	$80
04708 1030                        00            .byte	0
04709                                           ! 910  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04710 1031                        02            .byte	2
04711 1032                        0E            .byte	$E
04712 1033                        3E            .byte	$3E
04713 1034                        FE            .byte	$FE
04714 1035                        3E            .byte	$3E
04715 1036                        0E            .byte	$E
04716 1037                        02            .byte	2
04717 1038                        00            .byte	0
04718                                           ! 911  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04719 1039                        18            .byte	$18
04720 103A                        3C            .byte	$3C
04721 103B                        7E            .byte	$7E
04722 103C                        18            .byte	$18
04723 103D                        18            .byte	$18
04724 103E                        7E            .byte	$7E
04725 103F                        3C            .byte	$3C
04726 1040                        18            .byte	$18
04727                                           ! 912  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04728 1041                        66            .byte	$66
04729 1042                        66            .byte	$66
04730 1043                        66            .byte	$66
04731 1044                        66            .byte	$66
04732 1045                        66            .byte	$66
04733 1046                        00            .byte	0
04734 1047                        66            .byte	$66
04735 1048                        00            .byte	0
04736                                           ! 913  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04737 1049                        7F            .byte	$7F
04738 104A                        DB            .byte	$DB
04739 104B                        DB            .byte	$DB
04740 104C                        7B            .byte	$7B
04741 104D                        1B            .byte	$1B
04742 104E                        1B            .byte	$1B
04743 104F                        1B            .byte	$1B
04744 1050                        00            .byte	0
04745                                           ! 914  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04746 1051                        3E            .byte	$3E
04747 1052                        63            .byte	$63
04748 1053                        38            .byte	$38
04749 1054                        6C            .byte	$6C
04750 1055                        6C            .byte	$6C
04751 1056                        38            .byte	$38
04752 1057                        CC            .byte	$CC
04753 1058                        78            .byte	$78
04754                                           ! 915  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04755 1059                        00            .byte	0
04756 105A                        00            .byte	0
04757 105B                        00            .byte	0
04758 105C                        00            .byte	0
04759 105D                        7E            .byte	$7E
04760 105E                        7E            .byte	$7E
04761 105F                        7E            .byte	$7E
04762 1060                        00            .byte	0
04763                                           ! 916  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04764 1061                        18            .byte	$18
04765 1062                        3C            .byte	$3C
04766 1063                        7E            .byte	$7E
04767 1064                        18            .byte	$18
04768 1065                        7E            .byte	$7E
04769 1066                        3C            .byte	$3C
04770 1067                        18            .byte	$18
04771 1068                        FF            .byte	$FF
04772                                           ! 917  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04773 1069                        18            .byte	$18
04774 106A                        3C            .byte	$3C
04775 106B                        7E            .byte	$7E
04776 106C                        18            .byte	$18
04777 106D                        18            .byte	$18
04778 106E                        18            .byte	$18
04779 106F                        18            .byte	$18
04780 1070                        00            .byte	0
04781                                           ! 918  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04782 1071                        18            .byte	$18
04783 1072                        18            .byte	$18
04784 1073                        18            .byte	$18
04785 1074                        18            .byte	$18
04786 1075                        7E            .byte	$7E
04787 1076                        3C            .byte	$3C
04788 1077                        18            .byte	$18
04789 1078                        00            .byte	0
04790                                           ! 919  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04791 1079                        00            .byte	0
04792 107A                        18            .byte	$18
04793 107B                        0C            .byte	$C
04794 107C                        FE            .byte	$FE
04795 107D                        0C            .byte	$C
04796 107E                        18            .byte	$18
04797 107F                        00            .byte	0
04798 1080                        00            .byte	0
04799                                           ! 920  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04800 1081                        00            .byte	0
04801 1082                        30            .byte	$30
04802 1083                        60            .byte	$60
04803 1084                        FE            .byte	$FE
04804 1085                        60            .byte	$60
04805 1086                        30            .byte	$30
04806 1087                        00            .byte	0
04807 1088                        00            .byte	0
04808                                           ! 921  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04809 1089                        00            .byte	0
04810 108A                        00            .byte	0
04811 108B                        C0            .byte	$C0
04812 108C                        C0            .byte	$C0
04813 108D                        C0            .byte	$C0
04814 108E                        FE            .byte	$FE
04815 108F                        00            .byte	0
04816 1090                        00            .byte	0
04817                                           ! 922  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04818 1091                        00            .byte	0
04819 1092                        24            .byte	$24
04820 1093                        66            .byte	$66
04821 1094                        FF            .byte	$FF
04822 1095                        66            .byte	$66
04823 1096                        24            .byte	$24
04824 1097                        00            .byte	0
04825 1098                        00            .byte	0
04826                                           ! 923  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04827 1099                        00            .byte	0
04828 109A                        18            .byte	$18
04829 109B                        3C            .byte	$3C
04830 109C                        7E            .byte	$7E
04831 109D                        FF            .byte	$FF
04832 109E                        FF            .byte	$FF
04833 109F                        00            .byte	0
04834 10A0                        00            .byte	0
04835                                           ! 924  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04836 10A1                        00            .byte	0
04837 10A2                        FF            .byte	$FF
04838 10A3                        FF            .byte	$FF
04839 10A4                        7E            .byte	$7E
04840 10A5                        3C            .byte	$3C
04841 10A6                        18            .byte	$18
04842 10A7                        00            .byte	0
04843 10A8                        00            .byte	0
04844                                           ! 925  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04845 10A9                        00            .byte	0
04846 10AA                        00            .byte	0
04847 10AB                        00            .byte	0
04848 10AC                        00            .byte	0
04849 10AD                        00            .byte	0
04850 10AE                        00            .byte	0
04851 10AF                        00            .byte	0
04852 10B0                        00            .byte	0
04853                                           ! 926  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04854 10B1                        30            .byte	$30
04855 10B2                        78            .byte	$78
04856 10B3                        78            .byte	$78
04857 10B4                        30            .byte	$30
04858 10B5                        30            .byte	$30
04859 10B6                        00            .byte	0
04860 10B7                        30            .byte	$30
04861 10B8                        00            .byte	0
04862                                           ! 927  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04863 10B9                        6C            .byte	$6C
04864 10BA                        6C            .byte	$6C
04865 10BB                        6C            .byte	$6C
04866 10BC                        00            .byte	0
04867 10BD                        00            .byte	0
04868 10BE                        00            .byte	0
04869 10BF                        00            .byte	0
04870 10C0                        00            .byte	0
04871                                           ! 928  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04872 10C1                        6C            .byte	$6C
04873 10C2                        6C            .byte	$6C
04874 10C3                        FE            .byte	$FE
04875 10C4                        6C            .byte	$6C
04876 10C5                        FE            .byte	$FE
04877 10C6                        6C            .byte	$6C
04878 10C7                        6C            .byte	$6C
04879 10C8                        00            .byte	0
04880                                           ! 929  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04881 10C9                        30            .byte	$30
04882 10CA                        7C            .byte	$7C
04883 10CB                        C0            .byte	$C0
04884 10CC                        78            .byte	$78
04885 10CD                        0C            .byte	$C
04886 10CE                        F8            .byte	$F8
04887 10CF                        30            .byte	$30
04888 10D0                        00            .byte	0
04889                                           ! 930  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04890 10D1                        00            .byte	0
04891 10D2                        C6            .byte	$C6
04892 10D3                        CC            .byte	$CC
04893 10D4                        18            .byte	$18
04894 10D5                        30            .byte	$30
04895 10D6                        66            .byte	$66
04896 10D7                        C6            .byte	$C6
04897 10D8                        00            .byte	0
04898                                           ! 931  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04899 10D9                        38            .byte	$38
04900 10DA                        6C            .byte	$6C
04901 10DB                        38            .byte	$38
04902 10DC                        76            .byte	$76
04903 10DD                        DC            .byte	$DC
04904 10DE                        CC            .byte	$CC
04905 10DF                        76            .byte	$76
04906 10E0                        00            .byte	0
04907                                           ! 932  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04908 10E1                        60            .byte	$60
04909 10E2                        60            .byte	$60
04910 10E3                        C0            .byte	$C0
04911 10E4                        00            .byte	0
04912 10E5                        00            .byte	0
04913 10E6                        00            .byte	0
04914 10E7                        00            .byte	0
04915 10E8                        00            .byte	0
04916                                           ! 933  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04917 10E9                        18            .byte	$18
04918 10EA                        30            .byte	$30
04919 10EB                        60            .byte	$60
04920 10EC                        60            .byte	$60
04921 10ED                        60            .byte	$60
04922 10EE                        30            .byte	$30
04923 10EF                        18            .byte	$18
04924 10F0                        00            .byte	0
04925                                           ! 934  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04926 10F1                        60            .byte	$60
04927 10F2                        30            .byte	$30
04928 10F3                        18            .byte	$18
04929 10F4                        18            .byte	$18
04930 10F5                        18            .byte	$18
04931 10F6                        30            .byte	$30
04932 10F7                        60            .byte	$60
04933 10F8                        00            .byte	0
04934                                           ! 935  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04935 10F9                        00            .byte	0
04936 10FA                        66            .byte	$66
04937 10FB                        3C            .byte	$3C
04938 10FC                        FF            .byte	$FF
04939 10FD                        3C            .byte	$3C
04940 10FE                        66            .byte	$66
04941 10FF                        00            .byte	0
04942 1100                        00            .byte	0
04943                                           ! 936  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04944 1101                        00            .byte	0
04945 1102                        30            .byte	$30
04946 1103                        30            .byte	$30
04947 1104                        FC            .byte	$FC
04948 1105                        30            .byte	$30
04949 1106                        30            .byte	$30
04950 1107                        00            .byte	0
04951 1108                        00            .byte	0
04952                                           ! 937  0x00, 0x00, 0x00, 0x00,
04953 1109                        00            .byte	0
04954 110A                        00            .byte	0
04955 110B                        00            .byte	0
04956                                           ! 937  0x00, 0x30, 0x30, 0x60,
04957 110C                        00            .byte	0
04958 110D                        00            .byte	0
04959 110E                        30            .byte	$30
04960 110F                        30            .byte	$30
04961 1110                        60            .byte	$60
04962                                           ! 938  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04963 1111                        00            .byte	0
04964 1112                        00            .byte	0
04965 1113                        00            .byte	0
04966 1114                        FC            .byte	$FC
04967 1115                        00            .byte	0
04968 1116                        00            .byte	0
04969 1117                        00            .byte	0
04970 1118                        00            .byte	0
04971                                           ! 939  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04972 1119                        00            .byte	0
04973 111A                        00            .byte	0
04974 111B                        00            .byte	0
04975 111C                        00            .byte	0
04976 111D                        00            .byte	0
04977 111E                        30            .byte	$30
04978 111F                        30            .byte	$30
04979 1120                        00            .byte	0
04980                                           ! 940  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04981 1121                        06            .byte	6
04982 1122                        0C            .byte	$C
04983 1123                        18            .byte	$18
04984 1124                        30            .byte	$30
04985 1125                        60            .byte	$60
04986 1126                        C0            .byte	$C0
04987 1127                        80            .byte	$80
04988 1128                        00            .byte	0
04989                                           ! 941  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04990 1129                        7C            .byte	$7C
04991 112A                        C6            .byte	$C6
04992 112B                        CE            .byte	$CE
04993 112C                        DE            .byte	$DE
04994 112D                        F6            .byte	$F6
04995 112E                        E6            .byte	$E6
04996 112F                        7C            .byte	$7C
04997 1130                        00            .byte	0
04998                                           ! 942  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04999 1131                        30            .byte	$30
05000 1132                        70            .byte	$70
05001 1133                        30            .byte	$30
05002 1134                        30            .byte	$30
05003 1135                        30            .byte	$30
05004 1136                        30            .byte	$30
05005 1137                        FC            .byte	$FC
05006 1138                        00            .byte	0
05007                                           ! 943  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
05008 1139                        78            .byte	$78
05009 113A                        CC            .byte	$CC
05010 113B                        0C            .byte	$C
05011 113C                        38            .byte	$38
05012 113D                        60            .byte	$60
05013 113E                        CC            .byte	$CC
05014 113F                        FC            .byte	$FC
05015 1140                        00            .byte	0
05016                                           ! 944  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
05017 1141                        78            .byte	$78
05018 1142                        CC            .byte	$CC
05019 1143                        0C            .byte	$C
05020 1144                        38            .byte	$38
05021 1145                        0C            .byte	$C
05022 1146                        CC            .byte	$CC
05023 1147                        78            .byte	$78
05024 1148                        00            .byte	0
05025                                           ! 945  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
05026 1149                        1C            .byte	$1C
05027 114A                        3C            .byte	$3C
05028 114B                        6C            .byte	$6C
05029 114C                        CC            .byte	$CC
05030 114D                        FE            .byte	$FE
05031 114E                        0C            .byte	$C
05032 114F                        1E            .byte	$1E
05033 1150                        00            .byte	0
05034                                           ! 946  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05035 1151                        FC            .byte	$FC
05036 1152                        C0            .byte	$C0
05037 1153                        F8            .byte	$F8
05038 1154                        0C            .byte	$C
05039 1155                        0C            .byte	$C
05040 1156                        CC            .byte	$CC
05041 1157                        78            .byte	$78
05042 1158                        00            .byte	0
05043                                           ! 947  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05044 1159                        38            .byte	$38
05045 115A                        60            .byte	$60
05046 115B                        C0            .byte	$C0
05047 115C                        F8            .byte	$F8
05048 115D                        CC            .byte	$CC
05049 115E                        CC            .byte	$CC
05050 115F                        78            .byte	$78
05051 1160                        00            .byte	0
05052                                           ! 948  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05053 1161                        FC            .byte	$FC
05054 1162                        CC            .byte	$CC
05055 1163                        0C            .byte	$C
05056 1164                        18            .byte	$18
05057 1165                        30            .byte	$30
05058 1166                        30            .byte	$30
05059 1167                        30            .byte	$30
05060 1168                        00            .byte	0
05061                                           ! 949  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05062 1169                        78            .byte	$78
05063 116A                        CC            .byte	$CC
05064 116B                        CC            .byte	$CC
05065 116C                        78            .byte	$78
05066 116D                        CC            .byte	$CC
05067 116E                        CC            .byte	$CC
05068 116F                        78            .byte	$78
05069 1170                        00            .byte	0
05070                                           ! 950  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05071 1171                        78            .byte	$78
05072 1172                        CC            .byte	$CC
05073 1173                        CC            .byte	$CC
05074 1174                        7C            .byte	$7C
05075 1175                        0C            .byte	$C
05076 1176                        18            .byte	$18
05077 1177                        70            .byte	$70
05078 1178                        00            .byte	0
05079                                           ! 951  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05080 1179                        00            .byte	0
05081 117A                        30            .byte	$30
05082 117B                        30            .byte	$30
05083 117C                        00            .byte	0
05084 117D                        00            .byte	0
05085 117E                        30            .byte	$30
05086 117F                        30            .byte	$30
05087 1180                        00            .byte	0
05088                                           ! 952  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05089 1181                        00            .byte	0
05090 1182                        30            .byte	$30
05091 1183                        30            .byte	$30
05092 1184                        00            .byte	0
05093 1185                        00            .byte	0
05094 1186                        30            .byte	$30
05095 1187                        30            .byte	$30
05096 1188                        60            .byte	$60
05097                                           ! 953  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05098 1189                        18            .byte	$18
05099 118A                        30            .byte	$30
05100 118B                        60            .byte	$60
05101 118C                        C0            .byte	$C0
05102 118D                        60            .byte	$60
05103 118E                        30            .byte	$30
05104 118F                        18            .byte	$18
05105 1190                        00            .byte	0
05106                                           ! 954  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05107 1191                        00            .byte	0
05108 1192                        00            .byte	0
05109 1193                        FC            .byte	$FC
05110 1194                        00            .byte	0
05111 1195                        00            .byte	0
05112 1196                        FC            .byte	$FC
05113 1197                        00            .byte	0
05114 1198                        00            .byte	0
05115                                           ! 955  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05116 1199                        60            .byte	$60
05117 119A                        30            .byte	$30
05118 119B                        18            .byte	$18
05119 119C                        0C            .byte	$C
05120 119D                        18            .byte	$18
05121 119E                        30            .byte	$30
05122 119F                        60            .byte	$60
05123 11A0                        00            .byte	0
05124                                           ! 956  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05125 11A1                        78            .byte	$78
05126 11A2                        CC            .byte	$CC
05127 11A3                        0C            .byte	$C
05128 11A4                        18            .byte	$18
05129 11A5                        30            .byte	$30
05130 11A6                        00            .byte	0
05131 11A7                        30            .byte	$30
05132 11A8                        00            .byte	0
05133                                           ! 957  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05134 11A9                        7C            .byte	$7C
05135 11AA                        C6            .byte	$C6
05136 11AB                        DE            .byte	$DE
05137 11AC                        DE            .byte	$DE
05138 11AD                        DE            .byte	$DE
05139 11AE                        C0            .byte	$C0
05140 11AF                        78            .byte	$78
05141 11B0                        00            .byte	0
05142                                           ! 958  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05143 11B1                        30            .byte	$30
05144 11B2                        78            .byte	$78
05145 11B3                        CC            .byte	$CC
05146 11B4                        CC            .byte	$CC
05147 11B5                        FC            .byte	$FC
05148 11B6                        CC            .byte	$CC
05149 11B7                        CC            .byte	$CC
05150 11B8                        00            .byte	0
05151                                           ! 959  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05152 11B9                        FC            .byte	$FC
05153 11BA                        66            .byte	$66
05154 11BB                        66            .byte	$66
05155 11BC                        7C            .byte	$7C
05156 11BD                        66            .byte	$66
05157 11BE                        66            .byte	$66
05158 11BF                        FC            .byte	$FC
05159 11C0                        00            .byte	0
05160                                           ! 960  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05161 11C1                        3C            .byte	$3C
05162 11C2                        66            .byte	$66
05163 11C3                        C0            .byte	$C0
05164 11C4                        C0            .byte	$C0
05165 11C5                        C0            .byte	$C0
05166 11C6                        66            .byte	$66
05167 11C7                        3C            .byte	$3C
05168 11C8                        00            .byte	0
05169                                           ! 961  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05170 11C9                        F8            .byte	$F8
05171 11CA                        6C            .byte	$6C
05172 11CB                        66            .byte	$66
05173 11CC                        66            .byte	$66
05174 11CD                        66            .byte	$66
05175 11CE                        6C            .byte	$6C
05176 11CF                        F8            .byte	$F8
05177 11D0                        00            .byte	0
05178                                           ! 962  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05179 11D1                        FE            .byte	$FE
05180 11D2                        62            .byte	$62
05181 11D3                        68            .byte	$68
05182 11D4                        78            .byte	$78
05183 11D5                        68            .byte	$68
05184 11D6                        62            .byte	$62
05185 11D7                        FE            .byte	$FE
05186 11D8                        00            .byte	0
05187                                           ! 963  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05188 11D9                        FE            .byte	$FE
05189 11DA                        62            .byte	$62
05190 11DB                        68            .byte	$68
05191 11DC                        78            .byte	$78
05192 11DD                        68            .byte	$68
05193 11DE                        60            .byte	$60
05194 11DF                        F0            .byte	$F0
05195 11E0                        00            .byte	0
05196                                           ! 964  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05197 11E1                        3C            .byte	$3C
05198 11E2                        66            .byte	$66
05199 11E3                        C0            .byte	$C0
05200 11E4                        C0            .byte	$C0
05201 11E5                        CE            .byte	$CE
05202 11E6                        66            .byte	$66
05203 11E7                        3E            .byte	$3E
05204 11E8                        00            .byte	0
05205                                           ! 965  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05206 11E9                        CC            .byte	$CC
05207 11EA                        CC            .byte	$CC
05208 11EB                        CC            .byte	$CC
05209 11EC                        FC            .byte	$FC
05210 11ED                        CC            .byte	$CC
05211 11EE                        CC            .byte	$CC
05212 11EF                        CC            .byte	$CC
05213 11F0                        00            .byte	0
05214                                           ! 966  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05215 11F1                        78            .byte	$78
05216 11F2                        30            .byte	$30
05217 11F3                        30            .byte	$30
05218 11F4                        30            .byte	$30
05219 11F5                        30            .byte	$30
05220 11F6                        30            .byte	$30
05221 11F7                        78            .byte	$78
05222 11F8                        00            .byte	0
05223                                           ! 967  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05224 11F9                        1E            .byte	$1E
05225 11FA                        0C            .byte	$C
05226 11FB                        0C            .byte	$C
05227 11FC                        0C            .byte	$C
05228 11FD                        CC            .byte	$CC
05229 11FE                        CC            .byte	$CC
05230 11FF                        78            .byte	$78
05231 1200                        00            .byte	0
05232                                           ! 968  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05233 1201                        E6            .byte	$E6
05234 1202                        66            .byte	$66
05235 1203                        6C            .byte	$6C
05236 1204                        78            .byte	$78
05237 1205                        6C            .byte	$6C
05238 1206                        66            .byte	$66
05239 1207                        E6            .byte	$E6
05240 1208                        00            .byte	0
05241                                           ! 969  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05242 1209                        F0            .byte	$F0
05243 120A                        60            .byte	$60
05244 120B                        60            .byte	$60
05245 120C                        60            .byte	$60
05246 120D                        62            .byte	$62
05247 120E                        66            .byte	$66
05248 120F                        FE            .byte	$FE
05249 1210                        00            .byte	0
05250                                           ! 970  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05251 1211                        C6            .byte	$C6
05252 1212                        EE            .byte	$EE
05253 1213                        FE            .byte	$FE
05254 1214                        FE            .byte	$FE
05255 1215                        D6            .byte	$D6
05256 1216                        C6            .byte	$C6
05257 1217                        C6            .byte	$C6
05258 1218                        00            .byte	0
05259                                           ! 971  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05260 1219                        C6            .byte	$C6
05261 121A                        E6            .byte	$E6
05262 121B                        F6            .byte	$F6
05263 121C                        DE            .byte	$DE
05264 121D                        CE            .byte	$CE
05265 121E                        C6            .byte	$C6
05266 121F                        C6            .byte	$C6
05267 1220                        00            .byte	0
05268                                           ! 972  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05269 1221                        38            .byte	$38
05270 1222                        6C            .byte	$6C
05271 1223                        C6            .byte	$C6
05272 1224                        C6            .byte	$C6
05273 1225                        C6            .byte	$C6
05274 1226                        6C            .byte	$6C
05275 1227                        38            .byte	$38
05276 1228                        00            .byte	0
05277                                           ! 973  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05278 1229                        FC            .byte	$FC
05279 122A                        66            .byte	$66
05280 122B                        66            .byte	$66
05281 122C                        7C            .byte	$7C
05282 122D                        60            .byte	$60
05283 122E                        60            .byte	$60
05284 122F                        F0            .byte	$F0
05285 1230                        00            .byte	0
05286                                           ! 974  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05287 1231                        78            .byte	$78
05288 1232                        CC            .byte	$CC
05289 1233                        CC            .byte	$CC
05290 1234                        CC            .byte	$CC
05291 1235                        DC            .byte	$DC
05292 1236                        78            .byte	$78
05293 1237                        1C            .byte	$1C
05294 1238                        00            .byte	0
05295                                           ! 975  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05296 1239                        FC            .byte	$FC
05297 123A                        66            .byte	$66
05298 123B                        66            .byte	$66
05299 123C                        7C            .byte	$7C
05300 123D                        6C            .byte	$6C
05301 123E                        66            .byte	$66
05302 123F                        E6            .byte	$E6
05303 1240                        00            .byte	0
05304                                           ! 976  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05305 1241                        78            .byte	$78
05306 1242                        CC            .byte	$CC
05307 1243                        E0            .byte	$E0
05308 1244                        70            .byte	$70
05309 1245                        1C            .byte	$1C
05310 1246                        CC            .byte	$CC
05311 1247                        78            .byte	$78
05312 1248                        00            .byte	0
05313                                           ! 977  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05314 1249                        FC            .byte	$FC
05315 124A                        B4            .byte	$B4
05316 124B                        30            .byte	$30
05317 124C                        30            .byte	$30
05318 124D                        30            .byte	$30
05319 124E                        30            .byte	$30
05320 124F                        78            .byte	$78
05321 1250                        00            .byte	0
05322                                           ! 978  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05323 1251                        CC            .byte	$CC
05324 1252                        CC            .byte	$CC
05325 1253                        CC            .byte	$CC
05326 1254                        CC            .byte	$CC
05327 1255                        CC            .byte	$CC
05328 1256                        CC            .byte	$CC
05329 1257                        FC            .byte	$FC
05330 1258                        00            .byte	0
05331                                           ! 979  0xcc, 0xcc, 0
05332 1259                        CC            .byte	$CC
05333 125A                        CC            .byte	$CC
05334                                           ! 979 xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05335 125B                        CC            .byte	$CC
05336 125C                        CC            .byte	$CC
05337 125D                        CC            .byte	$CC
05338 125E                        78            .byte	$78
05339 125F                        30            .byte	$30
05340 1260                        00            .byte	0
05341                                           ! 980  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05342 1261                        C6            .byte	$C6
05343 1262                        C6            .byte	$C6
05344 1263                        C6            .byte	$C6
05345 1264                        D6            .byte	$D6
05346 1265                        FE            .byte	$FE
05347 1266                        EE            .byte	$EE
05348 1267                        C6            .byte	$C6
05349 1268                        00            .byte	0
05350                                           ! 981  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05351 1269                        C6            .byte	$C6
05352 126A                        C6            .byte	$C6
05353 126B                        6C            .byte	$6C
05354 126C                        38            .byte	$38
05355 126D                        38            .byte	$38
05356 126E                        6C            .byte	$6C
05357 126F                        C6            .byte	$C6
05358 1270                        00            .byte	0
05359                                           ! 982  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05360 1271                        CC            .byte	$CC
05361 1272                        CC            .byte	$CC
05362 1273                        CC            .byte	$CC
05363 1274                        78            .byte	$78
05364 1275                        30            .byte	$30
05365 1276                        30            .byte	$30
05366 1277                        78            .byte	$78
05367 1278                        00            .byte	0
05368                                           ! 983  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05369 1279                        FE            .byte	$FE
05370 127A                        C6            .byte	$C6
05371 127B                        8C            .byte	$8C
05372 127C                        18            .byte	$18
05373 127D                        32            .byte	$32
05374 127E                        66            .byte	$66
05375 127F                        FE            .byte	$FE
05376 1280                        00            .byte	0
05377                                           ! 984  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05378 1281                        78            .byte	$78
05379 1282                        60            .byte	$60
05380 1283                        60            .byte	$60
05381 1284                        60            .byte	$60
05382 1285                        60            .byte	$60
05383 1286                        60            .byte	$60
05384 1287                        78            .byte	$78
05385 1288                        00            .byte	0
05386                                           ! 985  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05387 1289                        C0            .byte	$C0
05388 128A                        60            .byte	$60
05389 128B                        30            .byte	$30
05390 128C                        18            .byte	$18
05391 128D                        0C            .byte	$C
05392 128E                        06            .byte	6
05393 128F                        02            .byte	2
05394 1290                        00            .byte	0
05395                                           ! 986  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05396 1291                        78            .byte	$78
05397 1292                        18            .byte	$18
05398 1293                        18            .byte	$18
05399 1294                        18            .byte	$18
05400 1295                        18            .byte	$18
05401 1296                        18            .byte	$18
05402 1297                        78            .byte	$78
05403 1298                        00            .byte	0
05404                                           ! 987  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05405 1299                        10            .byte	$10
05406 129A                        38            .byte	$38
05407 129B                        6C            .byte	$6C
05408 129C                        C6            .byte	$C6
05409 129D                        00            .byte	0
05410 129E                        00            .byte	0
05411 129F                        00            .byte	0
05412 12A0                        00            .byte	0
05413                                           ! 988  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05414 12A1                        00            .byte	0
05415 12A2                        00            .byte	0
05416 12A3                        00            .byte	0
05417 12A4                        00            .byte	0
05418 12A5                        00            .byte	0
05419 12A6                        00            .byte	0
05420 12A7                        00            .byte	0
05421 12A8                        FF            .byte	$FF
05422                                           ! 989  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05423 12A9                        30            .byte	$30
05424 12AA                        30            .byte	$30
05425 12AB                        18            .byte	$18
05426 12AC                        00            .byte	0
05427 12AD                        00            .byte	0
05428 12AE                        00            .byte	0
05429 12AF                        00            .byte	0
05430 12B0                        00            .byte	0
05431                                           ! 990  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05432 12B1                        00            .byte	0
05433 12B2                        00            .byte	0
05434 12B3                        78            .byte	$78
05435 12B4                        0C            .byte	$C
05436 12B5                        7C            .byte	$7C
05437 12B6                        CC            .byte	$CC
05438 12B7                        76            .byte	$76
05439 12B8                        00            .byte	0
05440                                           ! 991  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05441 12B9                        E0            .byte	$E0
05442 12BA                        60            .byte	$60
05443 12BB                        60            .byte	$60
05444 12BC                        7C            .byte	$7C
05445 12BD                        66            .byte	$66
05446 12BE                        66            .byte	$66
05447 12BF                        DC            .byte	$DC
05448 12C0                        00            .byte	0
05449                                           ! 992  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05450 12C1                        00            .byte	0
05451 12C2                        00            .byte	0
05452 12C3                        78            .byte	$78
05453 12C4                        CC            .byte	$CC
05454 12C5                        C0            .byte	$C0
05455 12C6                        CC            .byte	$CC
05456 12C7                        78            .byte	$78
05457 12C8                        00            .byte	0
05458                                           ! 993  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05459 12C9                        1C            .byte	$1C
05460 12CA                        0C            .byte	$C
05461 12CB                        0C            .byte	$C
05462 12CC                        7C            .byte	$7C
05463 12CD                        CC            .byte	$CC
05464 12CE                        CC            .byte	$CC
05465 12CF                        76            .byte	$76
05466 12D0                        00            .byte	0
05467                                           ! 994  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05468 12D1                        00            .byte	0
05469 12D2                        00            .byte	0
05470 12D3                        78            .byte	$78
05471 12D4                        CC            .byte	$CC
05472 12D5                        FC            .byte	$FC
05473 12D6                        C0            .byte	$C0
05474 12D7                        78            .byte	$78
05475 12D8                        00            .byte	0
05476                                           ! 995  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05477 12D9                        38            .byte	$38
05478 12DA                        6C            .byte	$6C
05479 12DB                        60            .byte	$60
05480 12DC                        F0            .byte	$F0
05481 12DD                        60            .byte	$60
05482 12DE                        60            .byte	$60
05483 12DF                        F0            .byte	$F0
05484 12E0                        00            .byte	0
05485                                           ! 996  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05486 12E1                        00            .byte	0
05487 12E2                        00            .byte	0
05488 12E3                        76            .byte	$76
05489 12E4                        CC            .byte	$CC
05490 12E5                        CC            .byte	$CC
05491 12E6                        7C            .byte	$7C
05492 12E7                        0C            .byte	$C
05493 12E8                        F8            .byte	$F8
05494                                           ! 997  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05495 12E9                        E0            .byte	$E0
05496 12EA                        60            .byte	$60
05497 12EB                        6C            .byte	$6C
05498 12EC                        76            .byte	$76
05499 12ED                        66            .byte	$66
05500 12EE                        66            .byte	$66
05501 12EF                        E6            .byte	$E6
05502 12F0                        00            .byte	0
05503                                           ! 998  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05504 12F1                        30            .byte	$30
05505 12F2                        00            .byte	0
05506 12F3                        70            .byte	$70
05507 12F4                        30            .byte	$30
05508 12F5                        30            .byte	$30
05509 12F6                        30            .byte	$30
05510 12F7                        78            .byte	$78
05511 12F8                        00            .byte	0
05512                                           ! 999  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05513 12F9                        0C            .byte	$C
05514 12FA                        00            .byte	0
05515 12FB                        0C            .byte	$C
05516 12FC                        0C            .byte	$C
05517 12FD                        0C            .byte	$C
05518 12FE                        CC            .byte	$CC
05519 12FF                        CC            .byte	$CC
05520 1300                        78            .byte	$78
05521                                           ! 1000  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05522 1301                        E0            .byte	$E0
05523 1302                        60            .byte	$60
05524 1303                        66            .byte	$66
05525 1304                        6C            .byte	$6C
05526 1305                        78            .byte	$78
05527 1306                        6C            .byte	$6C
05528 1307                        E6            .byte	$E6
05529 1308                        00            .byte	0
05530                                           ! 1001  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05531 1309                        70            .byte	$70
05532 130A                        30            .byte	$30
05533 130B                        30            .byte	$30
05534 130C                        30            .byte	$30
05535 130D                        30            .byte	$30
05536 130E                        30            .byte	$30
05537 130F                        78            .byte	$78
05538 1310                        00            .byte	0
05539                                           ! 1002  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05540 1311                        00            .byte	0
05541 1312                        00            .byte	0
05542 1313                        CC            .byte	$CC
05543 1314                        FE            .byte	$FE
05544 1315                        FE            .byte	$FE
05545 1316                        D6            .byte	$D6
05546 1317                        C6            .byte	$C6
05547 1318                        00            .byte	0
05548                                           ! 1003  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05549 1319                        00            .byte	0
05550 131A                        00            .byte	0
05551 131B                        F8            .byte	$F8
05552 131C                        CC            .byte	$CC
05553 131D                        CC            .byte	$CC
05554 131E                        CC            .byte	$CC
05555 131F                        CC            .byte	$CC
05556 1320                        00            .byte	0
05557                                           ! 1004  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05558 1321                        00            .byte	0
05559 1322                        00            .byte	0
05560 1323                        78            .byte	$78
05561 1324                        CC            .byte	$CC
05562 1325                        CC            .byte	$CC
05563 1326                        CC            .byte	$CC
05564 1327                        78            .byte	$78
05565 1328                        00            .byte	0
05566                                           ! 1005  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05567 1329                        00            .byte	0
05568 132A                        00            .byte	0
05569 132B                        DC            .byte	$DC
05570 132C                        66            .byte	$66
05571 132D                        66            .byte	$66
05572 132E                        7C            .byte	$7C
05573 132F                        60            .byte	$60
05574 1330                        F0            .byte	$F0
05575                                           ! 1006  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05576 1331                        00            .byte	0
05577 1332                        00            .byte	0
05578 1333                        76            .byte	$76
05579 1334                        CC            .byte	$CC
05580 1335                        CC            .byte	$CC
05581 1336                        7C            .byte	$7C
05582 1337                        0C            .byte	$C
05583 1338                        1E            .byte	$1E
05584                                           ! 1007  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05585 1339                        00            .byte	0
05586 133A                        00            .byte	0
05587 133B                        DC            .byte	$DC
05588 133C                        76            .byte	$76
05589 133D                        66            .byte	$66
05590 133E                        60            .byte	$60
05591 133F                        F0            .byte	$F0
05592 1340                        00            .byte	0
05593                                           ! 1008  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05594 1341                        00            .byte	0
05595 1342                        00            .byte	0
05596 1343                        7C            .byte	$7C
05597 1344                        C0            .byte	$C0
05598 1345                        78            .byte	$78
05599 1346                        0C            .byte	$C
05600 1347                        F8            .byte	$F8
05601 1348                        00            .byte	0
05602                                           ! 1009  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05603 1349                        10            .byte	$10
05604 134A                        30            .byte	$30
05605 134B                        7C            .byte	$7C
05606 134C                        30            .byte	$30
05607 134D                        30            .byte	$30
05608 134E                        34            .byte	$34
05609 134F                        18            .byte	$18
05610 1350                        00            .byte	0
05611                                           ! 1010  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05612 1351                        00            .byte	0
05613 1352                        00            .byte	0
05614 1353                        CC            .byte	$CC
05615 1354                        CC            .byte	$CC
05616 1355                        CC            .byte	$CC
05617 1356                        CC            .byte	$CC
05618 1357                        76            .byte	$76
05619 1358                        00            .byte	0
05620                                           ! 1011  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05621 1359                        00            .byte	0
05622 135A                        00            .byte	0
05623 135B                        CC            .byte	$CC
05624 135C                        CC            .byte	$CC
05625 135D                        CC            .byte	$CC
05626 135E                        78            .byte	$78
05627 135F                        30            .byte	$30
05628 1360                        00            .byte	0
05629                                           ! 1012  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05630 1361                        00            .byte	0
05631 1362                        00            .byte	0
05632 1363                        C6            .byte	$C6
05633 1364                        D6            .byte	$D6
05634 1365                        FE            .byte	$FE
05635 1366                        FE            .byte	$FE
05636 1367                        6C            .byte	$6C
05637 1368                        00            .byte	0
05638                                           ! 1013  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05639 1369                        00            .byte	0
05640 136A                        00            .byte	0
05641 136B                        C6            .byte	$C6
05642 136C                        6C            .byte	$6C
05643 136D                        38            .byte	$38
05644 136E                        6C            .byte	$6C
05645 136F                        C6            .byte	$C6
05646 1370                        00            .byte	0
05647                                           ! 1014  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05648 1371                        00            .byte	0
05649 1372                        00            .byte	0
05650 1373                        CC            .byte	$CC
05651 1374                        CC            .byte	$CC
05652 1375                        CC            .byte	$CC
05653 1376                        7C            .byte	$7C
05654 1377                        0C            .byte	$C
05655 1378                        F8            .byte	$F8
05656                                           ! 1015  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05657 1379                        00            .byte	0
05658 137A                        00            .byte	0
05659 137B                        FC            .byte	$FC
05660 137C                        98            .byte	$98
05661 137D                        30            .byte	$30
05662 137E                        64            .byte	$64
05663 137F                        FC            .byte	$FC
05664 1380                        00            .byte	0
05665                                           ! 1016  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05666 1381                        1C            .byte	$1C
05667 1382                        30            .byte	$30
05668 1383                        30            .byte	$30
05669 1384                        E0            .byte	$E0
05670 1385                        30            .byte	$30
05671 1386                        30            .byte	$30
05672 1387                        1C            .byte	$1C
05673 1388                        00            .byte	0
05674                                           ! 1017  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05675 1389                        18            .byte	$18
05676 138A                        18            .byte	$18
05677 138B                        18            .byte	$18
05678 138C                        00            .byte	0
05679 138D                        18            .byte	$18
05680 138E                        18            .byte	$18
05681 138F                        18            .byte	$18
05682 1390                        00            .byte	0
05683                                           ! 1018  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05684 1391                        E0            .byte	$E0
05685 1392                        30            .byte	$30
05686 1393                        30            .byte	$30
05687 1394                        1C            .byte	$1C
05688 1395                        30            .byte	$30
05689 1396                        30            .byte	$30
05690 1397                        E0            .byte	$E0
05691 1398                        00            .byte	0
05692                                           ! 1019  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05693 1399                        76            .byte	$76
05694 139A                        DC            .byte	$DC
05695 139B                        00            .byte	0
05696 139C                        00            .byte	0
05697 139D                        00            .byte	0
05698 139E                        00            .byte	0
05699 139F                        00            .byte	0
05700 13A0                        00            .byte	0
05701                                           ! 1020  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05702 13A1                        00            .byte	0
05703 13A2                        10            .byte	$10
05704 13A3                        38            .byte	$38
05705 13A4                        6C            .byte	$6C
05706 13A5                        C6            .byte	$C6
05707 13A6                        C6            .byte	$C6
05708 13A7                        FE            .byte	$FE
05709 13A8                        00            .byte	0
05710                                           ! 1021  0x7
05711                                           ! 1021 8, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05712 13A9                        78            .byte	$78
05713 13AA                        CC            .byte	$CC
05714 13AB                        C0            .byte	$C0
05715 13AC                        CC            .byte	$CC
05716 13AD                        78            .byte	$78
05717 13AE                        18            .byte	$18
05718 13AF                        0C            .byte	$C
05719 13B0                        78            .byte	$78
05720                                           ! 1022  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05721 13B1                        00            .byte	0
05722 13B2                        CC            .byte	$CC
05723 13B3                        00            .byte	0
05724 13B4                        CC            .byte	$CC
05725 13B5                        CC            .byte	$CC
05726 13B6                        CC            .byte	$CC
05727 13B7                        7E            .byte	$7E
05728 13B8                        00            .byte	0
05729                                           ! 1023  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05730 13B9                        1C            .byte	$1C
05731 13BA                        00            .byte	0
05732 13BB                        78            .byte	$78
05733 13BC                        CC            .byte	$CC
05734 13BD                        FC            .byte	$FC
05735 13BE                        C0            .byte	$C0
05736 13BF                        78            .byte	$78
05737 13C0                        00            .byte	0
05738                                           ! 1024  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05739 13C1                        7E            .byte	$7E
05740 13C2                        C3            .byte	$C3
05741 13C3                        3C            .byte	$3C
05742 13C4                        06            .byte	6
05743 13C5                        3E            .byte	$3E
05744 13C6                        66            .byte	$66
05745 13C7                        3F            .byte	$3F
05746 13C8                        00            .byte	0
05747                                           ! 1025  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05748 13C9                        CC            .byte	$CC
05749 13CA                        00            .byte	0
05750 13CB                        78            .byte	$78
05751 13CC                        0C            .byte	$C
05752 13CD                        7C            .byte	$7C
05753 13CE                        CC            .byte	$CC
05754 13CF                        7E            .byte	$7E
05755 13D0                        00            .byte	0
05756                                           ! 1026  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05757 13D1                        E0            .byte	$E0
05758 13D2                        00            .byte	0
05759 13D3                        78            .byte	$78
05760 13D4                        0C            .byte	$C
05761 13D5                        7C            .byte	$7C
05762 13D6                        CC            .byte	$CC
05763 13D7                        7E            .byte	$7E
05764 13D8                        00            .byte	0
05765                                           ! 1027  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05766 13D9                        30            .byte	$30
05767 13DA                        30            .byte	$30
05768 13DB                        78            .byte	$78
05769 13DC                        0C            .byte	$C
05770 13DD                        7C            .byte	$7C
05771 13DE                        CC            .byte	$CC
05772 13DF                        7E            .byte	$7E
05773 13E0                        00            .byte	0
05774                                           ! 1028  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05775 13E1                        00            .byte	0
05776 13E2                        00            .byte	0
05777 13E3                        78            .byte	$78
05778 13E4                        C0            .byte	$C0
05779 13E5                        C0            .byte	$C0
05780 13E6                        78            .byte	$78
05781 13E7                        0C            .byte	$C
05782 13E8                        38            .byte	$38
05783                                           ! 1029  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05784 13E9                        7E            .byte	$7E
05785 13EA                        C3            .byte	$C3
05786 13EB                        3C            .byte	$3C
05787 13EC                        66            .byte	$66
05788 13ED                        7E            .byte	$7E
05789 13EE                        60            .byte	$60
05790 13EF                        3C            .byte	$3C
05791 13F0                        00            .byte	0
05792                                           ! 1030  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05793 13F1                        CC            .byte	$CC
05794 13F2                        00            .byte	0
05795 13F3                        78            .byte	$78
05796 13F4                        CC            .byte	$CC
05797 13F5                        FC            .byte	$FC
05798 13F6                        C0            .byte	$C0
05799 13F7                        78            .byte	$78
05800 13F8                        00            .byte	0
05801                                           ! 1031  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05802 13F9                        E0            .byte	$E0
05803 13FA                        00            .byte	0
05804 13FB                        78            .byte	$78
05805 13FC                        CC            .byte	$CC
05806 13FD                        FC            .byte	$FC
05807 13FE                        C0            .byte	$C0
05808 13FF                        78            .byte	$78
05809 1400                        00            .byte	0
05810                                           ! 1032  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05811 1401                        CC            .byte	$CC
05812 1402                        00            .byte	0
05813 1403                        70            .byte	$70
05814 1404                        30            .byte	$30
05815 1405                        30            .byte	$30
05816 1406                        30            .byte	$30
05817 1407                        78            .byte	$78
05818 1408                        00            .byte	0
05819                                           ! 1033  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05820 1409                        7C            .byte	$7C
05821 140A                        C6            .byte	$C6
05822 140B                        38            .byte	$38
05823 140C                        18            .byte	$18
05824 140D                        18            .byte	$18
05825 140E                        18            .byte	$18
05826 140F                        3C            .byte	$3C
05827 1410                        00            .byte	0
05828                                           ! 1034  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05829 1411                        E0            .byte	$E0
05830 1412                        00            .byte	0
05831 1413                        70            .byte	$70
05832 1414                        30            .byte	$30
05833 1415                        30            .byte	$30
05834 1416                        30            .byte	$30
05835 1417                        78            .byte	$78
05836 1418                        00            .byte	0
05837                                           ! 1035  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05838 1419                        C6            .byte	$C6
05839 141A                        38            .byte	$38
05840 141B                        6C            .byte	$6C
05841 141C                        C6            .byte	$C6
05842 141D                        FE            .byte	$FE
05843 141E                        C6            .byte	$C6
05844 141F                        C6            .byte	$C6
05845 1420                        00            .byte	0
05846                                           ! 1036  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05847 1421                        30            .byte	$30
05848 1422                        30            .byte	$30
05849 1423                        00            .byte	0
05850 1424                        78            .byte	$78
05851 1425                        CC            .byte	$CC
05852 1426                        FC            .byte	$FC
05853 1427                        CC            .byte	$CC
05854 1428                        00            .byte	0
05855                                           ! 1037  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05856 1429                        1C            .byte	$1C
05857 142A                        00            .byte	0
05858 142B                        FC            .byte	$FC
05859 142C                        60            .byte	$60
05860 142D                        78            .byte	$78
05861 142E                        60            .byte	$60
05862 142F                        FC            .byte	$FC
05863 1430                        00            .byte	0
05864                                           ! 1038  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05865 1431                        00            .byte	0
05866 1432                        00            .byte	0
05867 1433                        7F            .byte	$7F
05868 1434                        0C            .byte	$C
05869 1435                        7F            .byte	$7F
05870 1436                        CC            .byte	$CC
05871 1437                        7F            .byte	$7F
05872 1438                        00            .byte	0
05873                                           ! 1039  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05874 1439                        3E            .byte	$3E
05875 143A                        6C            .byte	$6C
05876 143B                        CC            .byte	$CC
05877 143C                        FE            .byte	$FE
05878 143D                        CC            .byte	$CC
05879 143E                        CC            .byte	$CC
05880 143F                        CE            .byte	$CE
05881 1440                        00            .byte	0
05882                                           ! 1040  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05883 1441                        78            .byte	$78
05884 1442                        CC            .byte	$CC
05885 1443                        00            .byte	0
05886 1444                        78            .byte	$78
05887 1445                        CC            .byte	$CC
05888 1446                        CC            .byte	$CC
05889 1447                        78            .byte	$78
05890 1448                        00            .byte	0
05891                                           ! 1041  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05892 1449                        00            .byte	0
05893 144A                        CC            .byte	$CC
05894 144B                        00            .byte	0
05895 144C                        78            .byte	$78
05896 144D                        CC            .byte	$CC
05897 144E                        CC            .byte	$CC
05898 144F                        78            .byte	$78
05899 1450                        00            .byte	0
05900                                           ! 1042  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05901 1451                        00            .byte	0
05902 1452                        E0            .byte	$E0
05903 1453                        00            .byte	0
05904 1454                        78            .byte	$78
05905 1455                        CC            .byte	$CC
05906 1456                        CC            .byte	$CC
05907 1457                        78            .byte	$78
05908 1458                        00            .byte	0
05909                                           ! 1043  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05910 1459                        78            .byte	$78
05911 145A                        CC            .byte	$CC
05912 145B                        00            .byte	0
05913 145C                        CC            .byte	$CC
05914 145D                        CC            .byte	$CC
05915 145E                        CC            .byte	$CC
05916 145F                        7E            .byte	$7E
05917 1460                        00            .byte	0
05918                                           ! 1044  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05919 1461                        00            .byte	0
05920 1462                        E0            .byte	$E0
05921 1463                        00            .byte	0
05922 1464                        CC            .byte	$CC
05923 1465                        CC            .byte	$CC
05924 1466                        CC            .byte	$CC
05925 1467                        7E            .byte	$7E
05926 1468                        00            .byte	0
05927                                           ! 1045  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05928 1469                        00            .byte	0
05929 146A                        CC            .byte	$CC
05930 146B                        00            .byte	0
05931 146C                        CC            .byte	$CC
05932 146D                        CC            .byte	$CC
05933 146E                        7C            .byte	$7C
05934 146F                        0C            .byte	$C
05935 1470                        F8            .byte	$F8
05936                                           ! 1046  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05937 1471                        C3            .byte	$C3
05938 1472                        18            .byte	$18
05939 1473                        3C            .byte	$3C
05940 1474                        66            .byte	$66
05941 1475                        66            .byte	$66
05942 1476                        3C            .byte	$3C
05943 1477                        18            .byte	$18
05944 1478                        00            .byte	0
05945                                           ! 1047  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05946 1479                        CC            .byte	$CC
05947 147A                        00            .byte	0
05948 147B                        CC            .byte	$CC
05949 147C                        CC            .byte	$CC
05950 147D                        CC            .byte	$CC
05951 147E                        CC            .byte	$CC
05952 147F                        78            .byte	$78
05953 1480                        00            .byte	0
05954                                           ! 1048  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05955 1481                        18            .byte	$18
05956 1482                        18            .byte	$18
05957 1483                        7E            .byte	$7E
05958 1484                        C0            .byte	$C0
05959 1485                        C0            .byte	$C0
05960 1486                        7E            .byte	$7E
05961 1487                        18            .byte	$18
05962 1488                        18            .byte	$18
05963                                           ! 1049  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05964 1489                        38            .byte	$38
05965 148A                        6C            .byte	$6C
05966 148B                        64            .byte	$64
05967 148C                        F0            .byte	$F0
05968 148D                        60            .byte	$60
05969 148E                        E6            .byte	$E6
05970 148F                        FC            .byte	$FC
05971 1490                        00            .byte	0
05972                                           ! 1050  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05973 1491                        CC            .byte	$CC
05974 1492                        CC            .byte	$CC
05975 1493                        78            .byte	$78
05976 1494                        FC            .byte	$FC
05977 1495                        30            .byte	$30
05978 1496                        FC            .byte	$FC
05979 1497                        30            .byte	$30
05980 1498                        30            .byte	$30
05981                                           ! 1051  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05982 1499                        F8            .byte	$F8
05983 149A                        CC            .byte	$CC
05984 149B                        CC            .byte	$CC
05985 149C                        FA            .byte	$FA
05986 149D                        C6            .byte	$C6
05987 149E                        CF            .byte	$CF
05988 149F                        C6            .byte	$C6
05989 14A0                        C7            .byte	$C7
05990                                           ! 1052  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05991 14A1                        0E            .byte	$E
05992 14A2                        1B            .byte	$1B
05993 14A3                        18            .byte	$18
05994 14A4                        3C            .byte	$3C
05995 14A5                        18            .byte	$18
05996 14A6                        18            .byte	$18
05997 14A7                        D8            .byte	$D8
05998 14A8                        70            .byte	$70
05999                                           ! 1053  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
06000 14A9                        1C            .byte	$1C
06001 14AA                        00            .byte	0
06002 14AB                        78            .byte	$78
06003 14AC                        0C            .byte	$C
06004 14AD                        7C            .byte	$7C
06005 14AE                        CC            .byte	$CC
06006 14AF                        7E            .byte	$7E
06007 14B0                        00            .byte	0
06008                                           ! 1054  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
06009 14B1                        38            .byte	$38
06010 14B2                        00            .byte	0
06011 14B3                        70            .byte	$70
06012 14B4                        30            .byte	$30
06013 14B5                        30            .byte	$30
06014 14B6                        30            .byte	$30
06015 14B7                        78            .byte	$78
06016 14B8                        00            .byte	0
06017                                           ! 1055  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
06018 14B9                        00            .byte	0
06019 14BA                        1C            .byte	$1C
06020 14BB                        00            .byte	0
06021 14BC                        78            .byte	$78
06022 14BD                        CC            .byte	$CC
06023 14BE                        CC            .byte	$CC
06024 14BF                        78            .byte	$78
06025 14C0                        00            .byte	0
06026                                           ! 1056  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
06027 14C1                        00            .byte	0
06028 14C2                        1C            .byte	$1C
06029 14C3                        00            .byte	0
06030 14C4                        CC            .byte	$CC
06031 14C5                        CC            .byte	$CC
06032 14C6                        CC            .byte	$CC
06033 14C7                        7E            .byte	$7E
06034 14C8                        00            .byte	0
06035                                           ! 1057  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06036 14C9                        00            .byte	0
06037 14CA                        F8            .byte	$F8
06038 14CB                        00            .byte	0
06039 14CC                        F8            .byte	$F8
06040 14CD                        CC            .byte	$CC
06041 14CE                        CC            .byte	$CC
06042 14CF                        CC            .byte	$CC
06043 14D0                        00            .byte	0
06044                                           ! 1058  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06045 14D1                        FC            .byte	$FC
06046 14D2                        00            .byte	0
06047 14D3                        CC            .byte	$CC
06048 14D4                        EC            .byte	$EC
06049 14D5                        FC            .byte	$FC
06050 14D6                        DC            .byte	$DC
06051 14D7                        CC            .byte	$CC
06052 14D8                        00            .byte	0
06053                                           ! 1059  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06054 14D9                        3C            .byte	$3C
06055 14DA                        6C            .byte	$6C
06056 14DB                        6C            .byte	$6C
06057 14DC                        3E            .byte	$3E
06058 14DD                        00            .byte	0
06059 14DE                        7E            .byte	$7E
06060 14DF                        00            .byte	0
06061 14E0                        00            .byte	0
06062                                           ! 1060  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06063 14E1                        38            .byte	$38
06064 14E2                        6C            .byte	$6C
06065 14E3                        6C            .byte	$6C
06066 14E4                        38            .byte	$38
06067 14E5                        00            .byte	0
06068 14E6                        7C            .byte	$7C
06069 14E7                        00            .byte	0
06070 14E8                        00            .byte	0
06071                                           ! 1061  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06072 14E9                        30            .byte	$30
06073 14EA                        00            .byte	0
06074 14EB                        30            .byte	$30
06075 14EC                        60            .byte	$60
06076 14ED                        C0            .byte	$C0
06077 14EE                        CC            .byte	$CC
06078 14EF                        78            .byte	$78
06079 14F0                        00            .byte	0
06080                                           ! 1062  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 
06081 14F1                        00            .byte	0
06082 14F2                        00            .byte	0
06083 14F3                        00            .byte	0
06084 14F4                        FC            .byte	$FC
06085 14F5                        C0            .byte	$C0
06086 14F6                        C0            .byte	$C0
06087 14F7                        00            .byte	0
06088                                           ! 1062 0x00,
06089 14F8                        00            .byte	0
06090                                           ! 1063  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06091 14F9                        00            .byte	0
06092 14FA                        00            .byte	0
06093 14FB                        00            .byte	0
06094 14FC                        FC            .byte	$FC
06095 14FD                        0C            .byte	$C
06096 14FE                        0C            .byte	$C
06097 14FF                        00            .byte	0
06098 1500                        00            .byte	0
06099                                           ! 1064  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06100 1501                        C3            .byte	$C3
06101 1502                        C6            .byte	$C6
06102 1503                        CC            .byte	$CC
06103 1504                        DE            .byte	$DE
06104 1505                        33            .byte	$33
06105 1506                        66            .byte	$66
06106 1507                        CC            .byte	$CC
06107 1508                        0F            .byte	$F
06108                                           ! 1065  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06109 1509                        C3            .byte	$C3
06110 150A                        C6            .byte	$C6
06111 150B                        CC            .byte	$CC
06112 150C                        DB            .byte	$DB
06113 150D                        37            .byte	$37
06114 150E                        6F            .byte	$6F
06115 150F                        CF            .byte	$CF
06116 1510                        03            .byte	3
06117                                           ! 1066  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06118 1511                        18            .byte	$18
06119 1512                        18            .byte	$18
06120 1513                        00            .byte	0
06121 1514                        18            .byte	$18
06122 1515                        18            .byte	$18
06123 1516                        18            .byte	$18
06124 1517                        18            .byte	$18
06125 1518                        00            .byte	0
06126                                           ! 1067  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06127 1519                        00            .byte	0
06128 151A                        33            .byte	$33
06129 151B                        66            .byte	$66
06130 151C                        CC            .byte	$CC
06131 151D                        66            .byte	$66
06132 151E                        33            .byte	$33
06133 151F                        00            .byte	0
06134 1520                        00            .byte	0
06135                                           ! 1068  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06136 1521                        00            .byte	0
06137 1522                        CC            .byte	$CC
06138 1523                        66            .byte	$66
06139 1524                        33            .byte	$33
06140 1525                        66            .byte	$66
06141 1526                        CC            .byte	$CC
06142 1527                        00            .byte	0
06143 1528                        00            .byte	0
06144                                           ! 1069  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06145 1529                        22            .byte	$22
06146 152A                        88            .byte	$88
06147 152B                        22            .byte	$22
06148 152C                        88            .byte	$88
06149 152D                        22            .byte	$22
06150 152E                        88            .byte	$88
06151 152F                        22            .byte	$22
06152 1530                        88            .byte	$88
06153                                           ! 1070  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06154 1531                        55            .byte	$55
06155 1532                        AA            .byte	$AA
06156 1533                        55            .byte	$55
06157 1534                        AA            .byte	$AA
06158 1535                        55            .byte	$55
06159 1536                        AA            .byte	$AA
06160 1537                        55            .byte	$55
06161 1538                        AA            .byte	$AA
06162                                           ! 1071  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06163 1539                        DB            .byte	$DB
06164 153A                        77            .byte	$77
06165 153B                        DB            .byte	$DB
06166 153C                        EE            .byte	$EE
06167 153D                        DB            .byte	$DB
06168 153E                        77            .byte	$77
06169 153F                        DB            .byte	$DB
06170 1540                        EE            .byte	$EE
06171                                           ! 1072  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06172 1541                        18            .byte	$18
06173 1542                        18            .byte	$18
06174 1543                        18            .byte	$18
06175 1544                        18            .byte	$18
06176 1545                        18            .byte	$18
06177 1546                        18            .byte	$18
06178 1547                        18            .byte	$18
06179 1548                        18            .byte	$18
06180                                           ! 1073  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06181 1549                        18            .byte	$18
06182 154A                        18            .byte	$18
06183 154B                        18            .byte	$18
06184 154C                        18            .byte	$18
06185 154D                        F8            .byte	$F8
06186 154E                        18            .byte	$18
06187 154F                        18            .byte	$18
06188 1550                        18            .byte	$18
06189                                           ! 1074  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06190 1551                        18            .byte	$18
06191 1552                        18            .byte	$18
06192 1553                        F8            .byte	$F8
06193 1554                        18            .byte	$18
06194 1555                        F8            .byte	$F8
06195 1556                        18            .byte	$18
06196 1557                        18            .byte	$18
06197 1558                        18            .byte	$18
06198                                           ! 1075  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06199 1559                        36            .byte	$36
06200 155A                        36            .byte	$36
06201 155B                        36            .byte	$36
06202 155C                        36            .byte	$36
06203 155D                        F6            .byte	$F6
06204 155E                        36            .byte	$36
06205 155F                        36            .byte	$36
06206 1560                        36            .byte	$36
06207                                           ! 1076  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06208 1561                        00            .byte	0
06209 1562                        00            .byte	0
06210 1563                        00            .byte	0
06211 1564                        00            .byte	0
06212 1565                        FE            .byte	$FE
06213 1566                        36            .byte	$36
06214 1567                        36            .byte	$36
06215 1568                        36            .byte	$36
06216                                           ! 1077  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06217 1569                        00            .byte	0
06218 156A                        00            .byte	0
06219 156B                        F8            .byte	$F8
06220 156C                        18            .byte	$18
06221 156D                        F8            .byte	$F8
06222 156E                        18            .byte	$18
06223 156F                        18            .byte	$18
06224 1570                        18            .byte	$18
06225                                           ! 1078  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06226 1571                        36            .byte	$36
06227 1572                        36            .byte	$36
06228 1573                        F6            .byte	$F6
06229 1574                        06            .byte	6
06230 1575                        F6            .byte	$F6
06231 1576                        36            .byte	$36
06232 1577                        36            .byte	$36
06233 1578                        36            .byte	$36
06234                                           ! 1079  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06235 1579                        36            .byte	$36
06236 157A                        36            .byte	$36
06237 157B                        36            .byte	$36
06238 157C                        36            .byte	$36
06239 157D                        36            .byte	$36
06240 157E                        36            .byte	$36
06241 157F                        36            .byte	$36
06242 1580                        36            .byte	$36
06243                                           ! 1080  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06244 1581                        00            .byte	0
06245 1582                        00            .byte	0
06246 1583                        FE            .byte	$FE
06247 1584                        06            .byte	6
06248 1585                        F6            .byte	$F6
06249 1586                        36            .byte	$36
06250 1587                        36            .byte	$36
06251 1588                        36            .byte	$36
06252                                           ! 1081  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06253 1589                        36            .byte	$36
06254 158A                        36            .byte	$36
06255 158B                        F6            .byte	$F6
06256 158C                        06            .byte	6
06257 158D                        FE            .byte	$FE
06258 158E                        00            .byte	0
06259 158F                        00            .byte	0
06260 1590                        00            .byte	0
06261                                           ! 1082  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06262 1591                        36            .byte	$36
06263 1592                        36            .byte	$36
06264 1593                        36            .byte	$36
06265 1594                        36            .byte	$36
06266 1595                        FE            .byte	$FE
06267 1596                        00            .byte	0
06268 1597                        00            .byte	0
06269 1598                        00            .byte	0
06270                                           ! 1083  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06271 1599                        18            .byte	$18
06272 159A                        18            .byte	$18
06273 159B                        F8            .byte	$F8
06274 159C                        18            .byte	$18
06275 159D                        F8            .byte	$F8
06276 159E                        00            .byte	0
06277 159F                        00            .byte	0
06278 15A0                        00            .byte	0
06279                                           ! 1084  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06280 15A1                        00            .byte	0
06281 15A2                        00            .byte	0
06282 15A3                        00            .byte	0
06283 15A4                        00            .byte	0
06284 15A5                        F8            .byte	$F8
06285 15A6                        18            .byte	$18
06286 15A7                        18            .byte	$18
06287 15A8                        18            .byte	$18
06288                                           ! 1085  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06289 15A9                        18            .byte	$18
06290 15AA                        18            .byte	$18
06291 15AB                        18            .byte	$18
06292 15AC                        18            .byte	$18
06293 15AD                        1F            .byte	$1F
06294 15AE                        00            .byte	0
06295 15AF                        00            .byte	0
06296 15B0                        00            .byte	0
06297                                           ! 1086  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06298 15B1                        18            .byte	$18
06299 15B2                        18            .byte	$18
06300 15B3                        18            .byte	$18
06301 15B4                        18            .byte	$18
06302 15B5                        FF            .byte	$FF
06303 15B6                        00            .byte	0
06304 15B7                        00            .byte	0
06305 15B8                        00            .byte	0
06306                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06307 15B9                        00            .byte	0
06308 15BA                        00            .byte	0
06309 15BB                        00            .byte	0
06310 15BC                        00            .byte	0
06311 15BD                        FF            .byte	$FF
06312 15BE                        18            .byte	$18
06313 15BF                        18            .byte	$18
06314 15C0                        18            .byte	$18
06315                                           ! 1088  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06316 15C1                        18            .byte	$18
06317 15C2                        18            .byte	$18
06318 15C3                        18            .byte	$18
06319 15C4                        18            .byte	$18
06320 15C5                        1F            .byte	$1F
06321 15C6                        18            .byte	$18
06322 15C7                        18            .byte	$18
06323 15C8                        18            .byte	$18
06324                                           ! 1089  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06325 15C9                        00            .byte	0
06326 15CA                        00            .byte	0
06327 15CB                        00            .byte	0
06328 15CC                        00            .byte	0
06329 15CD                        FF            .byte	$FF
06330 15CE                        00            .byte	0
06331 15CF                        00            .byte	0
06332 15D0                        00            .byte	0
06333                                           ! 1090  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06334 15D1                        18            .byte	$18
06335 15D2                        18            .byte	$18
06336 15D3                        18            .byte	$18
06337 15D4                        18            .byte	$18
06338 15D5                        FF            .byte	$FF
06339 15D6                        18            .byte	$18
06340 15D7                        18            .byte	$18
06341 15D8                        18            .byte	$18
06342                                           ! 1091  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06343 15D9                        18            .byte	$18
06344 15DA                        18            .byte	$18
06345 15DB                        1F            .byte	$1F
06346 15DC                        18            .byte	$18
06347 15DD                        1F            .byte	$1F
06348 15DE                        18            .byte	$18
06349 15DF                        18            .byte	$18
06350 15E0                        18            .byte	$18
06351                                           ! 1092  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06352 15E1                        36            .byte	$36
06353 15E2                        36            .byte	$36
06354 15E3                        36            .byte	$36
06355 15E4                        36            .byte	$36
06356 15E5                        37            .byte	$37
06357 15E6                        36            .byte	$36
06358 15E7                        36            .byte	$36
06359 15E8                        36            .byte	$36
06360                                           ! 1093  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06361 15E9                        36            .byte	$36
06362 15EA                        36            .byte	$36
06363 15EB                        37            .byte	$37
06364 15EC                        30            .byte	$30
06365 15ED                        3F            .byte	$3F
06366 15EE                        00            .byte	0
06367 15EF                        00            .byte	0
06368 15F0                        00            .byte	0
06369                                           ! 1094  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06370 15F1                        00            .byte	0
06371 15F2                        00            .byte	0
06372 15F3                        3F            .byte	$3F
06373 15F4                        30            .byte	$30
06374 15F5                        37            .byte	$37
06375 15F6                        36            .byte	$36
06376 15F7                        36            .byte	$36
06377 15F8                        36            .byte	$36
06378                                           ! 1095  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06379 15F9                        36            .byte	$36
06380 15FA                        36            .byte	$36
06381 15FB                        F7            .byte	$F7
06382 15FC                        00            .byte	0
06383 15FD                        FF            .byte	$FF
06384 15FE                        00            .byte	0
06385 15FF                        00            .byte	0
06386 1600                        00            .byte	0
06387                                           ! 1096  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06388 1601                        00            .byte	0
06389 1602                        00            .byte	0
06390 1603                        FF            .byte	$FF
06391 1604                        00            .byte	0
06392 1605                        F7            .byte	$F7
06393 1606                        36            .byte	$36
06394 1607                        36            .byte	$36
06395 1608                        36            .byte	$36
06396                                           ! 1097  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06397 1609                        36            .byte	$36
06398 160A                        36            .byte	$36
06399 160B                        37            .byte	$37
06400 160C                        30            .byte	$30
06401 160D                        37            .byte	$37
06402 160E                        36            .byte	$36
06403 160F                        36            .byte	$36
06404 1610                        36            .byte	$36
06405                                           ! 1098  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06406 1611                        00            .byte	0
06407 1612                        00            .byte	0
06408 1613                        FF            .byte	$FF
06409 1614                        00            .byte	0
06410 1615                        FF            .byte	$FF
06411 1616                        00            .byte	0
06412 1617                        00            .byte	0
06413 1618                        00            .byte	0
06414                                           ! 1099  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06415 1619                        36            .byte	$36
06416 161A                        36            .byte	$36
06417 161B                        F7            .byte	$F7
06418 161C                        00            .byte	0
06419 161D                        F7            .byte	$F7
06420 161E                        36            .byte	$36
06421 161F                        36            .byte	$36
06422 1620                        36            .byte	$36
06423                                           ! 1100  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06424 1621                        18            .byte	$18
06425 1622                        18            .byte	$18
06426 1623                        FF            .byte	$FF
06427 1624                        00            .byte	0
06428 1625                        FF            .byte	$FF
06429 1626                        00            .byte	0
06430 1627                        00            .byte	0
06431 1628                        00            .byte	0
06432                                           ! 1101  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06433 1629                        36            .byte	$36
06434 162A                        36            .byte	$36
06435 162B                        36            .byte	$36
06436 162C                        36            .byte	$36
06437 162D                        FF            .byte	$FF
06438 162E                        00            .byte	0
06439 162F                        00            .byte	0
06440 1630                        00            .byte	0
06441                                           ! 1102  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06442 1631                        00            .byte	0
06443 1632                        00            .byte	0
06444 1633                        FF            .byte	$FF
06445 1634                        00            .byte	0
06446 1635                        FF            .byte	$FF
06447 1636                        18            .byte	$18
06448 1637                        18            .byte	$18
06449 1638                        18            .byte	$18
06450                                           ! 1103  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06451 1639                        00            .byte	0
06452 163A                        00            .byte	0
06453 163B                        00            .byte	0
06454 163C                        00            .byte	0
06455 163D                        FF            .byte	$FF
06456 163E                        36            .byte	$36
06457 163F                        36            .byte	$36
06458 1640                        36            .byte	$36
06459                                           ! 1104  0x36, 0x36, 0x36, 0x36, 0x3f, 0x
06460 1641                        36            .byte	$36
06461 1642                        36            .byte	$36
06462 1643                        36            .byte	$36
06463 1644                        36            .byte	$36
06464 1645                        3F            .byte	$3F
06465                                           ! 1104 00, 0x00, 0x00,
06466 1646                        00            .byte	0
06467 1647                        00            .byte	0
06468 1648                        00            .byte	0
06469                                           ! 1105  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06470 1649                        18            .byte	$18
06471 164A                        18            .byte	$18
06472 164B                        1F            .byte	$1F
06473 164C                        18            .byte	$18
06474 164D                        1F            .byte	$1F
06475 164E                        00            .byte	0
06476 164F                        00            .byte	0
06477 1650                        00            .byte	0
06478                                           ! 1106  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06479 1651                        00            .byte	0
06480 1652                        00            .byte	0
06481 1653                        1F            .byte	$1F
06482 1654                        18            .byte	$18
06483 1655                        1F            .byte	$1F
06484 1656                        18            .byte	$18
06485 1657                        18            .byte	$18
06486 1658                        18            .byte	$18
06487                                           ! 1107  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06488 1659                        00            .byte	0
06489 165A                        00            .byte	0
06490 165B                        00            .byte	0
06491 165C                        00            .byte	0
06492 165D                        3F            .byte	$3F
06493 165E                        36            .byte	$36
06494 165F                        36            .byte	$36
06495 1660                        36            .byte	$36
06496                                           ! 1108  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06497 1661                        36            .byte	$36
06498 1662                        36            .byte	$36
06499 1663                        36            .byte	$36
06500 1664                        36            .byte	$36
06501 1665                        FF            .byte	$FF
06502 1666                        36            .byte	$36
06503 1667                        36            .byte	$36
06504 1668                        36            .byte	$36
06505                                           ! 1109  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06506 1669                        18            .byte	$18
06507 166A                        18            .byte	$18
06508 166B                        FF            .byte	$FF
06509 166C                        18            .byte	$18
06510 166D                        FF            .byte	$FF
06511 166E                        18            .byte	$18
06512 166F                        18            .byte	$18
06513 1670                        18            .byte	$18
06514                                           ! 1110  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06515 1671                        18            .byte	$18
06516 1672                        18            .byte	$18
06517 1673                        18            .byte	$18
06518 1674                        18            .byte	$18
06519 1675                        F8            .byte	$F8
06520 1676                        00            .byte	0
06521 1677                        00            .byte	0
06522 1678                        00            .byte	0
06523                                           ! 1111  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06524 1679                        00            .byte	0
06525 167A                        00            .byte	0
06526 167B                        00            .byte	0
06527 167C                        00            .byte	0
06528 167D                        1F            .byte	$1F
06529 167E                        18            .byte	$18
06530 167F                        18            .byte	$18
06531 1680                        18            .byte	$18
06532                                           ! 1112  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06533 1681                        FF            .byte	$FF
06534 1682                        FF            .byte	$FF
06535 1683                        FF            .byte	$FF
06536 1684                        FF            .byte	$FF
06537 1685                        FF            .byte	$FF
06538 1686                        FF            .byte	$FF
06539 1687                        FF            .byte	$FF
06540 1688                        FF            .byte	$FF
06541                                           ! 1113  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06542 1689                        00            .byte	0
06543 168A                        00            .byte	0
06544 168B                        00            .byte	0
06545 168C                        00            .byte	0
06546 168D                        FF            .byte	$FF
06547 168E                        FF            .byte	$FF
06548 168F                        FF            .byte	$FF
06549 1690                        FF            .byte	$FF
06550                                           ! 1114  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06551 1691                        F0            .byte	$F0
06552 1692                        F0            .byte	$F0
06553 1693                        F0            .byte	$F0
06554 1694                        F0            .byte	$F0
06555 1695                        F0            .byte	$F0
06556 1696                        F0            .byte	$F0
06557 1697                        F0            .byte	$F0
06558 1698                        F0            .byte	$F0
06559                                           ! 1115  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06560 1699                        0F            .byte	$F
06561 169A                        0F            .byte	$F
06562 169B                        0F            .byte	$F
06563 169C                        0F            .byte	$F
06564 169D                        0F            .byte	$F
06565 169E                        0F            .byte	$F
06566 169F                        0F            .byte	$F
06567 16A0                        0F            .byte	$F
06568                                           ! 1116  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06569 16A1                        FF            .byte	$FF
06570 16A2                        FF            .byte	$FF
06571 16A3                        FF            .byte	$FF
06572 16A4                        FF            .byte	$FF
06573 16A5                        00            .byte	0
06574 16A6                        00            .byte	0
06575 16A7                        00            .byte	0
06576 16A8                        00            .byte	0
06577                                           ! 1117  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06578 16A9                        00            .byte	0
06579 16AA                        00            .byte	0
06580 16AB                        76            .byte	$76
06581 16AC                        DC            .byte	$DC
06582 16AD                        C8            .byte	$C8
06583 16AE                        DC            .byte	$DC
06584 16AF                        76            .byte	$76
06585 16B0                        00            .byte	0
06586                                           ! 1118  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06587 16B1                        00            .byte	0
06588 16B2                        78            .byte	$78
06589 16B3                        CC            .byte	$CC
06590 16B4                        F8            .byte	$F8
06591 16B5                        CC            .byte	$CC
06592 16B6                        F8            .byte	$F8
06593 16B7                        C0            .byte	$C0
06594 16B8                        C0            .byte	$C0
06595                                           ! 1119  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06596 16B9                        00            .byte	0
06597 16BA                        FC            .byte	$FC
06598 16BB                        CC            .byte	$CC
06599 16BC                        C0            .byte	$C0
06600 16BD                        C0            .byte	$C0
06601 16BE                        C0            .byte	$C0
06602 16BF                        C0            .byte	$C0
06603 16C0                        00            .byte	0
06604                                           ! 1120  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06605 16C1                        00            .byte	0
06606 16C2                        FE            .byte	$FE
06607 16C3                        6C            .byte	$6C
06608 16C4                        6C            .byte	$6C
06609 16C5                        6C            .byte	$6C
06610 16C6                        6C            .byte	$6C
06611 16C7                        6C            .byte	$6C
06612 16C8                        00            .byte	0
06613                                           ! 1121  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06614 16C9                        FC            .byte	$FC
06615 16CA                        CC            .byte	$CC
06616 16CB                        60            .byte	$60
06617 16CC                        30            .byte	$30
06618 16CD                        60            .byte	$60
06619 16CE                        CC            .byte	$CC
06620 16CF                        FC            .byte	$FC
06621 16D0                        00            .byte	0
06622                                           ! 1122  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06623 16D1                        00            .byte	0
06624 16D2                        00            .byte	0
06625 16D3                        7E            .byte	$7E
06626 16D4                        D8            .byte	$D8
06627 16D5                        D8            .byte	$D8
06628 16D6                        D8            .byte	$D8
06629 16D7                        70            .byte	$70
06630 16D8                        00            .byte	0
06631                                           ! 1123  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06632 16D9                        00            .byte	0
06633 16DA                        66            .byte	$66
06634 16DB                        66            .byte	$66
06635 16DC                        66            .byte	$66
06636 16DD                        66            .byte	$66
06637 16DE                        7C            .byte	$7C
06638 16DF                        60            .byte	$60
06639 16E0                        C0            .byte	$C0
06640                                           ! 1124  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06641 16E1                        00            .byte	0
06642 16E2                        76            .byte	$76
06643 16E3                        DC            .byte	$DC
06644 16E4                        18            .byte	$18
06645 16E5                        18            .byte	$18
06646 16E6                        18            .byte	$18
06647 16E7                        18            .byte	$18
06648 16E8                        00            .byte	0
06649                                           ! 1125  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06650 16E9                        FC            .byte	$FC
06651 16EA                        30            .byte	$30
06652 16EB                        78            .byte	$78
06653 16EC                        CC            .byte	$CC
06654 16ED                        CC            .byte	$CC
06655 16EE                        78            .byte	$78
06656 16EF                        30            .byte	$30
06657 16F0                        FC            .byte	$FC
06658                                           ! 1126  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06659 16F1                        38            .byte	$38
06660 16F2                        6C            .byte	$6C
06661 16F3                        C6            .byte	$C6
06662 16F4                        FE            .byte	$FE
06663 16F5                        C6            .byte	$C6
06664 16F6                        6C            .byte	$6C
06665 16F7                        38            .byte	$38
06666 16F8                        00            .byte	0
06667                                           ! 1127  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06668 16F9                        38            .byte	$38
06669 16FA                        6C            .byte	$6C
06670 16FB                        C6            .byte	$C6
06671 16FC                        C6            .byte	$C6
06672 16FD                        6C            .byte	$6C
06673 16FE                        6C            .byte	$6C
06674 16FF                        EE            .byte	$EE
06675 1700                        00            .byte	0
06676                                           ! 1128  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06677 1701                        1C            .byte	$1C
06678 1702                        30            .byte	$30
06679 1703                        18            .byte	$18
06680 1704                        7C            .byte	$7C
06681 1705                        CC            .byte	$CC
06682 1706                        CC            .byte	$CC
06683 1707                        78            .byte	$78
06684 1708                        00            .byte	0
06685                                           ! 1129  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06686 1709                        00            .byte	0
06687 170A                        00            .byte	0
06688 170B                        7E            .byte	$7E
06689 170C                        DB            .byte	$DB
06690 170D                        DB            .byte	$DB
06691 170E                        7E            .byte	$7E
06692 170F                        00            .byte	0
06693 1710                        00            .byte	0
06694                                           ! 1130  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06695 1711                        06            .byte	6
06696 1712                        0C            .byte	$C
06697 1713                        7E            .byte	$7E
06698 1714                        DB            .byte	$DB
06699 1715                        DB            .byte	$DB
06700 1716                        7E            .byte	$7E
06701 1717                        60            .byte	$60
06702 1718                        C0            .byte	$C0
06703                                           ! 1131  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06704 1719                        38            .byte	$38
06705 171A                        60            .byte	$60
06706 171B                        C0            .byte	$C0
06707 171C                        F8            .byte	$F8
06708 171D                        C0            .byte	$C0
06709 171E                        60            .byte	$60
06710 171F                        38            .byte	$38
06711 1720                        00            .byte	0
06712                                           ! 1132  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06713 1721                        78            .byte	$78
06714 1722                        CC            .byte	$CC
06715 1723                        CC            .byte	$CC
06716 1724                        CC            .byte	$CC
06717 1725                        CC            .byte	$CC
06718 1726                        CC            .byte	$CC
06719 1727                        CC            .byte	$CC
06720 1728                        00            .byte	0
06721                                           ! 1133  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06722 1729                        00            .byte	0
06723 172A                        FC            .byte	$FC
06724 172B                        00            .byte	0
06725 172C                        FC            .byte	$FC
06726 172D                        00            .byte	0
06727 172E                        FC            .byte	$FC
06728 172F                        00            .byte	0
06729 1730                        00            .byte	0
06730                                           ! 1134  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06731 1731                        30            .byte	$30
06732 1732                        30            .byte	$30
06733 1733                        FC            .byte	$FC
06734 1734                        30            .byte	$30
06735 1735                        30            .byte	$30
06736 1736                        00            .byte	0
06737 1737                        FC            .byte	$FC
06738 1738                        00            .byte	0
06739                                           ! 1135  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06740 1739                        60            .byte	$60
06741 173A                        30            .byte	$30
06742 173B                        18            .byte	$18
06743 173C                        30            .byte	$30
06744 173D                        60            .byte	$60
06745 173E                        00            .byte	0
06746 173F                        FC            .byte	$FC
06747 1740                        00            .byte	0
06748                                           ! 1136  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06749 1741                        18            .byte	$18
06750 1742                        30            .byte	$30
06751 1743                        60            .byte	$60
06752 1744                        30            .byte	$30
06753 1745                        18            .byte	$18
06754 1746                        00            .byte	0
06755 1747                        FC            .byte	$FC
06756 1748                        00            .byte	0
06757                                           ! 1137  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06758 1749                        0E            .byte	$E
06759 174A                        1B            .byte	$1B
06760 174B                        1B            .byte	$1B
06761 174C                        18            .byte	$18
06762 174D                        18            .byte	$18
06763 174E                        18            .byte	$18
06764 174F                        18            .byte	$18
06765 1750                        18            .byte	$18
06766                                           ! 1138  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06767 1751                        18            .byte	$18
06768 1752                        18            .byte	$18
06769 1753                        18            .byte	$18
06770 1754                        18            .byte	$18
06771 1755                        18            .byte	$18
06772 1756                        D8            .byte	$D8
06773 1757                        D8            .byte	$D8
06774 1758                        70            .byte	$70
06775                                           ! 1139  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06776 1759                        30            .byte	$30
06777 175A                        30            .byte	$30
06778 175B                        00            .byte	0
06779 175C                        FC            .byte	$FC
06780 175D                        00            .byte	0
06781 175E                        30            .byte	$30
06782 175F                        30            .byte	$30
06783 1760                        00            .byte	0
06784                                           ! 1140  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06785 1761                        00            .byte	0
06786 1762                        76            .byte	$76
06787 1763                        DC            .byte	$DC
06788 1764                        00            .byte	0
06789 1765                        76            .byte	$76
06790 1766                        DC            .byte	$DC
06791 1767                        00            .byte	0
06792 1768                        00            .byte	0
06793                                           ! 1141  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06794 1769                        38            .byte	$38
06795 176A                        6C            .byte	$6C
06796 176B                        6C            .byte	$6C
06797 176C                        38            .byte	$38
06798 176D                        00            .byte	0
06799 176E                        00            .byte	0
06800 176F                        00            .byte	0
06801 1770                        00            .byte	0
06802                                           ! 1142  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06803 1771                        00            .byte	0
06804 1772                        00            .byte	0
06805 1773                        00            .byte	0
06806 1774                        18            .byte	$18
06807 1775                        18            .byte	$18
06808 1776                        00            .byte	0
06809 1777                        00            .byte	0
06810 1778                        00            .byte	0
06811                                           ! 1143  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06812 1779                        00            .byte	0
06813 177A                        00            .byte	0
06814 177B                        00            .byte	0
06815 177C                        00            .byte	0
06816 177D                        18            .byte	$18
06817 177E                        00            .byte	0
06818 177F                        00            .byte	0
06819 1780                        00            .byte	0
06820                                           ! 1144  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06821 1781                        0F            .byte	$F
06822 1782                        0C            .byte	$C
06823 1783                        0C            .byte	$C
06824 1784                        0C            .byte	$C
06825 1785                        EC            .byte	$EC
06826 1786                        6C            .byte	$6C
06827 1787                        3C            .byte	$3C
06828 1788                        1C            .byte	$1C
06829                                           ! 1145  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06830 1789                        78            .byte	$78
06831 178A                        6C            .byte	$6C
06832 178B                        6C            .byte	$6C
06833 178C                        6C            .byte	$6C
06834 178D                        6C            .byte	$6C
06835 178E                        00            .byte	0
06836 178F                        00            .byte	0
06837 1790                        00            .byte	0
06838                                           ! 1146  0x70, 0x18, 0x30, 0x60
06839 1791                        70            .byte	$70
06840 1792                        18            .byte	$18
06841 1793                        30            .byte	$30
06842                                           ! 1146 , 0x78, 0x00, 0x00, 0x00,
06843 1794                        60            .byte	$60
06844 1795                        78            .byte	$78
06845 1796                        00            .byte	0
06846 1797                        00            .byte	0
06847 1798                        00            .byte	0
06848                                           ! 1147  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06849 1799                        00            .byte	0
06850 179A                        00            .byte	0
06851 179B                        3C            .byte	$3C
06852 179C                        3C            .byte	$3C
06853 179D                        3C            .byte	$3C
06854 179E                        3C            .byte	$3C
06855 179F                        00            .byte	0
06856 17A0                        00            .byte	0
06857                                           ! 1148  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06858 17A1                        00            .byte	0
06859 17A2                        00            .byte	0
06860 17A3                        00            .byte	0
06861 17A4                        00            .byte	0
06862 17A5                        00            .byte	0
06863 17A6                        00            .byte	0
06864 17A7                        00            .byte	0
06865                                           ! 1149 };
06866 17A8                        00            .byte	0
06867                                           !BCC_EOS
06868                                           ! 1150 static Bit8u vgafont14[256*14]=
06869                                           ! 1151 {
06870                       000017A9            _vgafont14:
06871                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06872 17A9                        00            .byte	0
06873 17AA                        00            .byte	0
06874 17AB                        00            .byte	0
06875 17AC                        00            .byte	0
06876 17AD                        00            .byte	0
06877 17AE                        00            .byte	0
06878 17AF                        00            .byte	0
06879 17B0                        00            .byte	0
06880 17B1                        00            .byte	0
06881 17B2                        00            .byte	0
06882 17B3                        00            .byte	0
06883 17B4                        00            .byte	0
06884 17B5                        00            .byte	0
06885 17B6                        00            .byte	0
06886                                           ! 1153  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06887 17B7                        00            .byte	0
06888 17B8                        00            .byte	0
06889 17B9                        7E            .byte	$7E
06890 17BA                        81            .byte	$81
06891 17BB                        A5            .byte	$A5
06892 17BC                        81            .byte	$81
06893 17BD                        81            .byte	$81
06894 17BE                        BD            .byte	$BD
06895 17BF                        99            .byte	$99
06896 17C0                        81            .byte	$81
06897 17C1                        7E            .byte	$7E
06898 17C2                        00            .byte	0
06899 17C3                        00            .byte	0
06900 17C4                        00            .byte	0
06901                                           ! 1154  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06902 17C5                        00            .byte	0
06903 17C6                        00            .byte	0
06904 17C7                        7E            .byte	$7E
06905 17C8                        FF            .byte	$FF
06906 17C9                        DB            .byte	$DB
06907 17CA                        FF            .byte	$FF
06908 17CB                        FF            .byte	$FF
06909 17CC                        C3            .byte	$C3
06910 17CD                        E7            .byte	$E7
06911 17CE                        FF            .byte	$FF
06912 17CF                        7E            .byte	$7E
06913 17D0                        00            .byte	0
06914 17D1                        00            .byte	0
06915 17D2                        00            .byte	0
06916                                           ! 1155  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06917 17D3                        00            .byte	0
06918 17D4                        00            .byte	0
06919 17D5                        00            .byte	0
06920 17D6                        6C            .byte	$6C
06921 17D7                        FE            .byte	$FE
06922 17D8                        FE            .byte	$FE
06923 17D9                        FE            .byte	$FE
06924 17DA                        FE            .byte	$FE
06925 17DB                        7C            .byte	$7C
06926 17DC                        38            .byte	$38
06927 17DD                        10            .byte	$10
06928 17DE                        00            .byte	0
06929 17DF                        00            .byte	0
06930 17E0                        00            .byte	0
06931                                           ! 1156  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06932 17E1                        00            .byte	0
06933 17E2                        00            .byte	0
06934 17E3                        00            .byte	0
06935 17E4                        10            .byte	$10
06936 17E5                        38            .byte	$38
06937 17E6                        7C            .byte	$7C
06938 17E7                        FE            .byte	$FE
06939 17E8                        7C            .byte	$7C
06940 17E9                        38            .byte	$38
06941 17EA                        10            .byte	$10
06942 17EB                        00            .byte	0
06943 17EC                        00            .byte	0
06944 17ED                        00            .byte	0
06945 17EE                        00            .byte	0
06946                                           ! 1157  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06947 17EF                        00            .byte	0
06948 17F0                        00            .byte	0
06949 17F1                        18            .byte	$18
06950 17F2                        3C            .byte	$3C
06951 17F3                        3C            .byte	$3C
06952 17F4                        E7            .byte	$E7
06953 17F5                        E7            .byte	$E7
06954 17F6                        E7            .byte	$E7
06955 17F7                        18            .byte	$18
06956 17F8                        18            .byte	$18
06957 17F9                        3C            .byte	$3C
06958 17FA                        00            .byte	0
06959 17FB                        00            .byte	0
06960 17FC                        00            .byte	0
06961                                           ! 1158  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06962 17FD                        00            .byte	0
06963 17FE                        00            .byte	0
06964 17FF                        18            .byte	$18
06965 1800                        3C            .byte	$3C
06966 1801                        7E            .byte	$7E
06967 1802                        FF            .byte	$FF
06968 1803                        FF            .byte	$FF
06969 1804                        7E            .byte	$7E
06970 1805                        18            .byte	$18
06971 1806                        18            .byte	$18
06972 1807                        3C            .byte	$3C
06973 1808                        00            .byte	0
06974 1809                        00            .byte	0
06975 180A                        00            .byte	0
06976                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06977 180B                        00            .byte	0
06978 180C                        00            .byte	0
06979 180D                        00            .byte	0
06980 180E                        00            .byte	0
06981 180F                        00            .byte	0
06982 1810                        18            .byte	$18
06983 1811                        3C            .byte	$3C
06984 1812                        3C            .byte	$3C
06985 1813                        18            .byte	$18
06986 1814                        00            .byte	0
06987 1815                        00            .byte	0
06988 1816                        00            .byte	0
06989 1817                        00            .byte	0
06990 1818                        00            .byte	0
06991                                           ! 1160  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06992 1819                        FF            .byte	$FF
06993 181A                        FF            .byte	$FF
06994 181B                        FF            .byte	$FF
06995 181C                        FF            .byte	$FF
06996 181D                        FF            .byte	$FF
06997 181E                        E7            .byte	$E7
06998 181F                        C3            .byte	$C3
06999 1820                        C3            .byte	$C3
07000 1821                        E7            .byte	$E7
07001 1822                        FF            .byte	$FF
07002 1823                        FF            .byte	$FF
07003 1824                        FF            .byte	$FF
07004 1825                        FF            .byte	$FF
07005 1826                        FF            .byte	$FF
07006                                           ! 1161  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
07007 1827                        00            .byte	0
07008 1828                        00            .byte	0
07009 1829                        00            .byte	0
07010 182A                        00            .byte	0
07011 182B                        3C            .byte	$3C
07012 182C                        66            .byte	$66
07013 182D                        42            .byte	$42
07014 182E                        42            .byte	$42
07015 182F                        66            .byte	$66
07016 1830                        3C            .byte	$3C
07017 1831                        00            .byte	0
07018 1832                        00            .byte	0
07019 1833                        00            .byte	0
07020 1834                        00            .byte	0
07021                                           ! 1162  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
07022 1835                        FF            .byte	$FF
07023 1836                        FF            .byte	$FF
07024 1837                        FF            .byte	$FF
07025 1838                        FF            .byte	$FF
07026 1839                        C3            .byte	$C3
07027 183A                        99            .byte	$99
07028 183B                        BD            .byte	$BD
07029 183C                        BD            .byte	$BD
07030 183D                        99            .byte	$99
07031 183E                        C3            .byte	$C3
07032 183F                        FF            .byte	$FF
07033 1840                        FF            .byte	$FF
07034 1841                        FF            .byte	$FF
07035 1842                        FF            .byte	$FF
07036                                           ! 1163  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07037 1843                        00            .byte	0
07038 1844                        00            .byte	0
07039 1845                        1E            .byte	$1E
07040 1846                        0E            .byte	$E
07041 1847                        1A            .byte	$1A
07042 1848                        32            .byte	$32
07043 1849                        78            .byte	$78
07044 184A                        CC            .byte	$CC
07045 184B                        CC            .byte	$CC
07046 184C                        CC            .byte	$CC
07047 184D                        78            .byte	$78
07048 184E                        00            .byte	0
07049 184F                        00            .byte	0
07050 1850                        00            .byte	0
07051                                           ! 1164  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07052 1851                        00            .byte	0
07053 1852                        00            .byte	0
07054 1853                        3C            .byte	$3C
07055 1854                        66            .byte	$66
07056 1855                        66            .byte	$66
07057 1856                        66            .byte	$66
07058 1857                        3C            .byte	$3C
07059 1858                        18            .byte	$18
07060 1859                        7E            .byte	$7E
07061 185A                        18            .byte	$18
07062 185B                        18            .byte	$18
07063 185C                        00            .byte	0
07064 185D                        00            .byte	0
07065 185E                        00            .byte	0
07066                                           ! 1165  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07067 185F                        00            .byte	0
07068 1860                        00            .byte	0
07069 1861                        3F            .byte	$3F
07070 1862                        33            .byte	$33
07071 1863                        3F            .byte	$3F
07072 1864                        30            .byte	$30
07073 1865                        30            .byte	$30
07074 1866                        30            .byte	$30
07075 1867                        70            .byte	$70
07076 1868                        F0            .byte	$F0
07077 1869                        E0            .byte	$E0
07078 186A                        00            .byte	0
07079 186B                        00            .byte	0
07080 186C                        00            .byte	0
07081                                           ! 1166  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07082 186D                        00            .byte	0
07083 186E                        00            .byte	0
07084 186F                        7F            .byte	$7F
07085 1870                        63            .byte	$63
07086 1871                        7F            .byte	$7F
07087 1872                        63            .byte	$63
07088 1873                        63            .byte	$63
07089 1874                        63            .byte	$63
07090 1875                        67            .byte	$67
07091 1876                        E7            .byte	$E7
07092 1877                        E6            .byte	$E6
07093 1878                        C0            .byte	$C0
07094 1879                        00            .byte	0
07095 187A                        00            .byte	0
07096                                           ! 1167  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07097 187B                        00            .byte	0
07098 187C                        00            .byte	0
07099 187D                        18            .byte	$18
07100 187E                        18            .byte	$18
07101 187F                        DB            .byte	$DB
07102 1880                        3C            .byte	$3C
07103 1881                        E7            .byte	$E7
07104 1882                        3C            .byte	$3C
07105 1883                        DB            .byte	$DB
07106 1884                        18            .byte	$18
07107 1885                        18            .byte	$18
07108 1886                        00            .byte	0
07109 1887                        00            .byte	0
07110 1888                        00            .byte	0
07111                                           ! 1168  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07112 1889                        00            .byte	0
07113 188A                        00            .byte	0
07114 188B                        80            .byte	$80
07115 188C                        C0            .byte	$C0
07116 188D                        E0            .byte	$E0
07117 188E                        F8            .byte	$F8
07118 188F                        FE            .byte	$FE
07119 1890                        F8            .byte	$F8
07120 1891                        E0            .byte	$E0
07121 1892                        C0            .byte	$C0
07122 1893                        80            .byte	$80
07123 1894                        00            .byte	0
07124 1895                        00            .byte	0
07125 1896                        00            .byte	0
07126                                           ! 1169  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07127 1897                        00            .byte	0
07128 1898                        00            .byte	0
07129 1899                        02            .byte	2
07130 189A                        06            .byte	6
07131 189B                        0E            .byte	$E
07132 189C                        3E            .byte	$3E
07133 189D                        FE            .byte	$FE
07134 189E                        3E            .byte	$3E
07135 189F                        0E            .byte	$E
07136 18A0                        06            .byte	6
07137 18A1                        02            .byte	2
07138 18A2                        00            .byte	0
07139 18A3                        00            .byte	0
07140 18A4                        00            .byte	0
07141                                           ! 1170  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07142 18A5                        00            .byte	0
07143 18A6                        00            .byte	0
07144 18A7                        18            .byte	$18
07145 18A8                        3C            .byte	$3C
07146 18A9                        7E            .byte	$7E
07147 18AA                        18            .byte	$18
07148 18AB                        18            .byte	$18
07149 18AC                        18            .byte	$18
07150 18AD                        7E            .byte	$7E
07151 18AE                        3C            .byte	$3C
07152 18AF                        18            .byte	$18
07153 18B0                        00            .byte	0
07154 18B1                        00            .byte	0
07155 18B2                        00            .byte	0
07156                                           ! 1171  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07157 18B3                        00            .byte	0
07158 18B4                        00            .byte	0
07159 18B5                        66            .byte	$66
07160 18B6                        66            .byte	$66
07161 18B7                        66            .byte	$66
07162 18B8                        66            .byte	$66
07163 18B9                        66            .byte	$66
07164 18BA                        66            .byte	$66
07165 18BB                        00            .byte	0
07166 18BC                        66            .byte	$66
07167 18BD                        66            .byte	$66
07168 18BE                        00            .byte	0
07169 18BF                        00            .byte	0
07170 18C0                        00            .byte	0
07171                                           ! 1172  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07172 18C1                        00            .byte	0
07173 18C2                        00            .byte	0
07174 18C3                        7F            .byte	$7F
07175 18C4                        DB            .byte	$DB
07176 18C5                        DB            .byte	$DB
07177 18C6                        DB            .byte	$DB
07178 18C7                        7B            .byte	$7B
07179 18C8                        1B            .byte	$1B
07180 18C9                        1B            .byte	$1B
07181 18CA                        1B            .byte	$1B
07182 18CB                        1B            .byte	$1B
07183 18CC                        00            .byte	0
07184 18CD                        00            .byte	0
07185 18CE                        00            .byte	0
07186                                           ! 1173  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07187 18CF                        00            .byte	0
07188 18D0                        7C            .byte	$7C
07189 18D1                        C6            .byte	$C6
07190 18D2                        60            .byte	$60
07191 18D3                        38            .byte	$38
07192 18D4                        6C            .byte	$6C
07193 18D5                        C6            .byte	$C6
07194 18D6                        C6            .byte	$C6
07195 18D7                        6C            .byte	$6C
07196 18D8                        38            .byte	$38
07197 18D9                        0C            .byte	$C
07198 18DA                        C6            .byte	$C6
07199 18DB                        7C            .byte	$7C
07200 18DC                        00            .byte	0
07201                                           ! 1174  0x00, 0x00, 0x00,
07202 18DD                        00            .byte	0
07203 18DE                        00            .byte	0
07204                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07205 18DF                        00            .byte	0
07206 18E0                        00            .byte	0
07207 18E1                        00            .byte	0
07208 18E2                        00            .byte	0
07209 18E3                        00            .byte	0
07210 18E4                        00            .byte	0
07211 18E5                        FE            .byte	$FE
07212 18E6                        FE            .byte	$FE
07213 18E7                        FE            .byte	$FE
07214 18E8                        00            .byte	0
07215 18E9                        00            .byte	0
07216 18EA                        00            .byte	0
07217                                           ! 1175  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07218 18EB                        00            .byte	0
07219 18EC                        00            .byte	0
07220 18ED                        18            .byte	$18
07221 18EE                        3C            .byte	$3C
07222 18EF                        7E            .byte	$7E
07223 18F0                        18            .byte	$18
07224 18F1                        18            .byte	$18
07225 18F2                        18            .byte	$18
07226 18F3                        7E            .byte	$7E
07227 18F4                        3C            .byte	$3C
07228 18F5                        18            .byte	$18
07229 18F6                        7E            .byte	$7E
07230 18F7                        00            .byte	0
07231 18F8                        00            .byte	0
07232                                           ! 1176  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07233 18F9                        00            .byte	0
07234 18FA                        00            .byte	0
07235 18FB                        18            .byte	$18
07236 18FC                        3C            .byte	$3C
07237 18FD                        7E            .byte	$7E
07238 18FE                        18            .byte	$18
07239 18FF                        18            .byte	$18
07240 1900                        18            .byte	$18
07241 1901                        18            .byte	$18
07242 1902                        18            .byte	$18
07243 1903                        18            .byte	$18
07244 1904                        00            .byte	0
07245 1905                        00            .byte	0
07246 1906                        00            .byte	0
07247                                           ! 1177  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07248 1907                        00            .byte	0
07249 1908                        00            .byte	0
07250 1909                        18            .byte	$18
07251 190A                        18            .byte	$18
07252 190B                        18            .byte	$18
07253 190C                        18            .byte	$18
07254 190D                        18            .byte	$18
07255 190E                        18            .byte	$18
07256 190F                        7E            .byte	$7E
07257 1910                        3C            .byte	$3C
07258 1911                        18            .byte	$18
07259 1912                        00            .byte	0
07260 1913                        00            .byte	0
07261 1914                        00            .byte	0
07262                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07263 1915                        00            .byte	0
07264 1916                        00            .byte	0
07265 1917                        00            .byte	0
07266 1918                        00            .byte	0
07267 1919                        18            .byte	$18
07268 191A                        0C            .byte	$C
07269 191B                        FE            .byte	$FE
07270 191C                        0C            .byte	$C
07271 191D                        18            .byte	$18
07272 191E                        00            .byte	0
07273 191F                        00            .byte	0
07274 1920                        00            .byte	0
07275 1921                        00            .byte	0
07276 1922                        00            .byte	0
07277                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07278 1923                        00            .byte	0
07279 1924                        00            .byte	0
07280 1925                        00            .byte	0
07281 1926                        00            .byte	0
07282 1927                        30            .byte	$30
07283 1928                        60            .byte	$60
07284 1929                        FE            .byte	$FE
07285 192A                        60            .byte	$60
07286 192B                        30            .byte	$30
07287 192C                        00            .byte	0
07288 192D                        00            .byte	0
07289 192E                        00            .byte	0
07290 192F                        00            .byte	0
07291 1930                        00            .byte	0
07292                                           ! 1180  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07293 1931                        00            .byte	0
07294 1932                        00            .byte	0
07295 1933                        00            .byte	0
07296 1934                        00            .byte	0
07297 1935                        00            .byte	0
07298 1936                        C0            .byte	$C0
07299 1937                        C0            .byte	$C0
07300 1938                        C0            .byte	$C0
07301 1939                        FE            .byte	$FE
07302 193A                        00            .byte	0
07303 193B                        00            .byte	0
07304 193C                        00            .byte	0
07305 193D                        00            .byte	0
07306 193E                        00            .byte	0
07307                                           ! 1181  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07308 193F                        00            .byte	0
07309 1940                        00            .byte	0
07310 1941                        00            .byte	0
07311 1942                        00            .byte	0
07312 1943                        28            .byte	$28
07313 1944                        6C            .byte	$6C
07314 1945                        FE            .byte	$FE
07315 1946                        6C            .byte	$6C
07316 1947                        28            .byte	$28
07317 1948                        00            .byte	0
07318 1949                        00            .byte	0
07319 194A                        00            .byte	0
07320 194B                        00            .byte	0
07321 194C                        00            .byte	0
07322                                           ! 1182  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07323 194D                        00            .byte	0
07324 194E                        00            .byte	0
07325 194F                        00            .byte	0
07326 1950                        10            .byte	$10
07327 1951                        38            .byte	$38
07328 1952                        38            .byte	$38
07329 1953                        7C            .byte	$7C
07330 1954                        7C            .byte	$7C
07331 1955                        FE            .byte	$FE
07332 1956                        FE            .byte	$FE
07333 1957                        00            .byte	0
07334 1958                        00            .byte	0
07335 1959                        00            .byte	0
07336 195A                        00            .byte	0
07337                                           ! 1183  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07338 195B                        00            .byte	0
07339 195C                        00            .byte	0
07340 195D                        00            .byte	0
07341 195E                        FE            .byte	$FE
07342 195F                        FE            .byte	$FE
07343 1960                        7C            .byte	$7C
07344 1961                        7C            .byte	$7C
07345 1962                        38            .byte	$38
07346 1963                        38            .byte	$38
07347 1964                        10            .byte	$10
07348 1965                        00            .byte	0
07349 1966                        00            .byte	0
07350 1967                        00            .byte	0
07351 1968                        00            .byte	0
07352                                           ! 1184  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07353 1969                        00            .byte	0
07354 196A                        00            .byte	0
07355 196B                        00            .byte	0
07356 196C                        00            .byte	0
07357 196D                        00            .byte	0
07358 196E                        00            .byte	0
07359 196F                        00            .byte	0
07360 1970                        00            .byte	0
07361 1971                        00            .byte	0
07362 1972                        00            .byte	0
07363 1973                        00            .byte	0
07364 1974                        00            .byte	0
07365 1975                        00            .byte	0
07366 1976                        00            .byte	0
07367                                           ! 1185  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07368 1977                        00            .byte	0
07369 1978                        00            .byte	0
07370 1979                        18            .byte	$18
07371 197A                        3C            .byte	$3C
07372 197B                        3C            .byte	$3C
07373 197C                        3C            .byte	$3C
07374 197D                        18            .byte	$18
07375 197E                        18            .byte	$18
07376 197F                        00            .byte	0
07377 1980                        18            .byte	$18
07378 1981                        18            .byte	$18
07379 1982                        00            .byte	0
07380 1983                        00            .byte	0
07381 1984                        00            .byte	0
07382                                           ! 1186  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07383 1985                        00            .byte	0
07384 1986                        66            .byte	$66
07385 1987                        66            .byte	$66
07386 1988                        66            .byte	$66
07387 1989                        24            .byte	$24
07388 198A                        00            .byte	0
07389 198B                        00            .byte	0
07390 198C                        00            .byte	0
07391 198D                        00            .byte	0
07392 198E                        00            .byte	0
07393 198F                        00            .byte	0
07394 1990                        00            .byte	0
07395 1991                        00            .byte	0
07396 1992                        00            .byte	0
07397                                           ! 1187  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07398 1993                        00            .byte	0
07399 1994                        00            .byte	0
07400 1995                        6C            .byte	$6C
07401 1996                        6C            .byte	$6C
07402 1997                        FE            .byte	$FE
07403 1998                        6C            .byte	$6C
07404 1999                        6C            .byte	$6C
07405 199A                        6C            .byte	$6C
07406 199B                        FE            .byte	$FE
07407 199C                        6C            .byte	$6C
07408 199D                        6C            .byte	$6C
07409 199E                        00            .byte	0
07410 199F                        00            .byte	0
07411 19A0                        00            .byte	0
07412                                           ! 1188  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07413 19A1                        18            .byte	$18
07414 19A2                        18            .byte	$18
07415 19A3                        7C            .byte	$7C
07416 19A4                        C6            .byte	$C6
07417 19A5                        C2            .byte	$C2
07418 19A6                        C0            .byte	$C0
07419 19A7                        7C            .byte	$7C
07420 19A8                        06            .byte	6
07421 19A9                        86            .byte	$86
07422 19AA                        C6            .byte	$C6
07423 19AB                        7C            .byte	$7C
07424 19AC                        18            .byte	$18
07425 19AD                        18            .byte	$18
07426 19AE                        00            .byte	0
07427                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07428 19AF                        00            .byte	0
07429 19B0                        00            .byte	0
07430 19B1                        00            .byte	0
07431 19B2                        00            .byte	0
07432 19B3                        C2            .byte	$C2
07433 19B4                        C6            .byte	$C6
07434 19B5                        0C            .byte	$C
07435 19B6                        18            .byte	$18
07436 19B7                        30            .byte	$30
07437 19B8                        66            .byte	$66
07438 19B9                        C6            .byte	$C6
07439 19BA                        00            .byte	0
07440 19BB                        00            .byte	0
07441 19BC                        00            .byte	0
07442                                           ! 1190  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07443 19BD                        00            .byte	0
07444 19BE                        00            .byte	0
07445 19BF                        38            .byte	$38
07446 19C0                        6C            .byte	$6C
07447 19C1                        6C            .byte	$6C
07448 19C2                        38            .byte	$38
07449 19C3                        76            .byte	$76
07450 19C4                        DC            .byte	$DC
07451 19C5                        CC            .byte	$CC
07452 19C6                        CC            .byte	$CC
07453 19C7                        76            .byte	$76
07454 19C8                        00            .byte	0
07455 19C9                        00            .byte	0
07456 19CA                        00            .byte	0
07457                                           ! 1191  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07458 19CB                        00            .byte	0
07459 19CC                        30            .byte	$30
07460 19CD                        30            .byte	$30
07461 19CE                        30            .byte	$30
07462 19CF                        60            .byte	$60
07463 19D0                        00            .byte	0
07464 19D1                        00            .byte	0
07465 19D2                        00            .byte	0
07466 19D3                        00            .byte	0
07467 19D4                        00            .byte	0
07468 19D5                        00            .byte	0
07469 19D6                        00            .byte	0
07470 19D7                        00            .byte	0
07471 19D8                        00            .byte	0
07472                                           ! 1192  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07473 19D9                        00            .byte	0
07474 19DA                        00            .byte	0
07475 19DB                        0C            .byte	$C
07476 19DC                        18            .byte	$18
07477 19DD                        30            .byte	$30
07478 19DE                        30            .byte	$30
07479 19DF                        30            .byte	$30
07480 19E0                        30            .byte	$30
07481 19E1                        30            .byte	$30
07482 19E2                        18            .byte	$18
07483 19E3                        0C            .byte	$C
07484 19E4                        00            .byte	0
07485 19E5                        00            .byte	0
07486 19E6                        00            .byte	0
07487                                           ! 1193  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07488 19E7                        00            .byte	0
07489 19E8                        00            .byte	0
07490 19E9                        30            .byte	$30
07491 19EA                        18            .byte	$18
07492 19EB                        0C            .byte	$C
07493 19EC                        0C            .byte	$C
07494 19ED                        0C            .byte	$C
07495 19EE                        0C            .byte	$C
07496 19EF                        0C            .byte	$C
07497 19F0                        18            .byte	$18
07498 19F1                        30            .byte	$30
07499 19F2                        00            .byte	0
07500 19F3                        00            .byte	0
07501 19F4                        00            .byte	0
07502                                           ! 1194  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07503 19F5                        00            .byte	0
07504 19F6                        00            .byte	0
07505 19F7                        00            .byte	0
07506 19F8                        00            .byte	0
07507 19F9                        66            .byte	$66
07508 19FA                        3C            .byte	$3C
07509 19FB                        FF            .byte	$FF
07510 19FC                        3C            .byte	$3C
07511 19FD                        66            .byte	$66
07512 19FE                        00            .byte	0
07513 19FF                        00            .byte	0
07514 1A00                        00            .byte	0
07515 1A01                        00            .byte	0
07516 1A02                        00            .byte	0
07517                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07518 1A03                        00            .byte	0
07519 1A04                        00            .byte	0
07520 1A05                        00            .byte	0
07521 1A06                        00            .byte	0
07522 1A07                        18            .byte	$18
07523 1A08                        18            .byte	$18
07524 1A09                        7E            .byte	$7E
07525 1A0A                        18            .byte	$18
07526 1A0B                        18            .byte	$18
07527 1A0C                        00            .byte	0
07528 1A0D                        00            .byte	0
07529 1A0E                        00            .byte	0
07530 1A0F                        00            .byte	0
07531 1A10                        00            .byte	0
07532                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07533 1A11                        00            .byte	0
07534 1A12                        00            .byte	0
07535 1A13                        00            .byte	0
07536 1A14                        00            .byte	0
07537 1A15                        00            .byte	0
07538 1A16                        00            .byte	0
07539 1A17                        00            .byte	0
07540 1A18                        00            .byte	0
07541 1A19                        18            .byte	$18
07542 1A1A                        18            .byte	$18
07543 1A1B                        18            .byte	$18
07544 1A1C                        30            .byte	$30
07545 1A1D                        00            .byte	0
07546 1A1E                        00            .byte	0
07547                                           ! 1197  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07548 1A1F                        00            .byte	0
07549 1A20                        00            .byte	0
07550 1A21                        00            .byte	0
07551 1A22                        00            .byte	0
07552 1A23                        00            .byte	0
07553 1A24                        00            .byte	0
07554 1A25                        FE            .byte	$FE
07555 1A26                        00            .byte	0
07556 1A27                        00            .byte	0
07557 1A28                        00            .byte	0
07558 1A29                        00            .byte	0
07559 1A2A                        00            .byte	0
07560 1A2B                        00            .byte	0
07561 1A2C                        00            .byte	0
07562                                           ! 1198  0x00, 0x00, 0x00, 0x00, 0
07563 1A2D                        00            .byte	0
07564 1A2E                        00            .byte	0
07565 1A2F                        00            .byte	0
07566 1A30                        00            .byte	0
07567                                           ! 1198 x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07568 1A31                        00            .byte	0
07569 1A32                        00            .byte	0
07570 1A33                        00            .byte	0
07571 1A34                        00            .byte	0
07572 1A35                        00            .byte	0
07573 1A36                        18            .byte	$18
07574 1A37                        18            .byte	$18
07575 1A38                        00            .byte	0
07576 1A39                        00            .byte	0
07577 1A3A                        00            .byte	0
07578                                           ! 1199  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07579 1A3B                        00            .byte	0
07580 1A3C                        00            .byte	0
07581 1A3D                        02            .byte	2
07582 1A3E                        06            .byte	6
07583 1A3F                        0C            .byte	$C
07584 1A40                        18            .byte	$18
07585 1A41                        30            .byte	$30
07586 1A42                        60            .byte	$60
07587 1A43                        C0            .byte	$C0
07588 1A44                        80            .byte	$80
07589 1A45                        00            .byte	0
07590 1A46                        00            .byte	0
07591 1A47                        00            .byte	0
07592 1A48                        00            .byte	0
07593                                           ! 1200  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07594 1A49                        00            .byte	0
07595 1A4A                        00            .byte	0
07596 1A4B                        7C            .byte	$7C
07597 1A4C                        C6            .byte	$C6
07598 1A4D                        CE            .byte	$CE
07599 1A4E                        DE            .byte	$DE
07600 1A4F                        F6            .byte	$F6
07601 1A50                        E6            .byte	$E6
07602 1A51                        C6            .byte	$C6
07603 1A52                        C6            .byte	$C6
07604 1A53                        7C            .byte	$7C
07605 1A54                        00            .byte	0
07606 1A55                        00            .byte	0
07607 1A56                        00            .byte	0
07608                                           ! 1201  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07609 1A57                        00            .byte	0
07610 1A58                        00            .byte	0
07611 1A59                        18            .byte	$18
07612 1A5A                        38            .byte	$38
07613 1A5B                        78            .byte	$78
07614 1A5C                        18            .byte	$18
07615 1A5D                        18            .byte	$18
07616 1A5E                        18            .byte	$18
07617 1A5F                        18            .byte	$18
07618 1A60                        18            .byte	$18
07619 1A61                        7E            .byte	$7E
07620 1A62                        00            .byte	0
07621 1A63                        00            .byte	0
07622 1A64                        00            .byte	0
07623                                           ! 1202  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07624 1A65                        00            .byte	0
07625 1A66                        00            .byte	0
07626 1A67                        7C            .byte	$7C
07627 1A68                        C6            .byte	$C6
07628 1A69                        06            .byte	6
07629 1A6A                        0C            .byte	$C
07630 1A6B                        18            .byte	$18
07631 1A6C                        30            .byte	$30
07632 1A6D                        60            .byte	$60
07633 1A6E                        C6            .byte	$C6
07634 1A6F                        FE            .byte	$FE
07635 1A70                        00            .byte	0
07636 1A71                        00            .byte	0
07637 1A72                        00            .byte	0
07638                                           ! 1203  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07639 1A73                        00            .byte	0
07640 1A74                        00            .byte	0
07641 1A75                        7C            .byte	$7C
07642 1A76                        C6            .byte	$C6
07643 1A77                        06            .byte	6
07644 1A78                        06            .byte	6
07645 1A79                        3C            .byte	$3C
07646 1A7A                        06            .byte	6
07647 1A7B                        06            .byte	6
07648 1A7C                        C6            .byte	$C6
07649 1A7D                        7C            .byte	$7C
07650 1A7E                        00            .byte	0
07651 1A7F                        00            .byte	0
07652 1A80                        00            .byte	0
07653                                           ! 1204  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07654 1A81                        00            .byte	0
07655 1A82                        00            .byte	0
07656 1A83                        0C            .byte	$C
07657 1A84                        1C            .byte	$1C
07658 1A85                        3C            .byte	$3C
07659 1A86                        6C            .byte	$6C
07660 1A87                        CC            .byte	$CC
07661 1A88                        FE            .byte	$FE
07662 1A89                        0C            .byte	$C
07663 1A8A                        0C            .byte	$C
07664 1A8B                        1E            .byte	$1E
07665 1A8C                        00            .byte	0
07666 1A8D                        00            .byte	0
07667 1A8E                        00            .byte	0
07668                                           ! 1205  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07669 1A8F                        00            .byte	0
07670 1A90                        00            .byte	0
07671 1A91                        FE            .byte	$FE
07672 1A92                        C0            .byte	$C0
07673 1A93                        C0            .byte	$C0
07674 1A94                        C0            .byte	$C0
07675 1A95                        FC            .byte	$FC
07676 1A96                        06            .byte	6
07677 1A97                        06            .byte	6
07678 1A98                        C6            .byte	$C6
07679 1A99                        7C            .byte	$7C
07680 1A9A                        00            .byte	0
07681 1A9B                        00            .byte	0
07682 1A9C                        00            .byte	0
07683                                           ! 1206  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07684 1A9D                        00            .byte	0
07685 1A9E                        00            .byte	0
07686 1A9F                        38            .byte	$38
07687 1AA0                        60            .byte	$60
07688 1AA1                        C0            .byte	$C0
07689 1AA2                        C0            .byte	$C0
07690 1AA3                        FC            .byte	$FC
07691 1AA4                        C6            .byte	$C6
07692 1AA5                        C6            .byte	$C6
07693 1AA6                        C6            .byte	$C6
07694 1AA7                        7C            .byte	$7C
07695 1AA8                        00            .byte	0
07696 1AA9                        00            .byte	0
07697 1AAA                        00            .byte	0
07698                                           ! 1207  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07699 1AAB                        00            .byte	0
07700 1AAC                        00            .byte	0
07701 1AAD                        FE            .byte	$FE
07702 1AAE                        C6            .byte	$C6
07703 1AAF                        06            .byte	6
07704 1AB0                        0C            .byte	$C
07705 1AB1                        18            .byte	$18
07706 1AB2                        30            .byte	$30
07707 1AB3                        30            .byte	$30
07708 1AB4                        30            .byte	$30
07709 1AB5                        30            .byte	$30
07710 1AB6                        00            .byte	0
07711 1AB7                        00            .byte	0
07712 1AB8                        00            .byte	0
07713                                           ! 1208  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07714 1AB9                        00            .byte	0
07715 1ABA                        00            .byte	0
07716 1ABB                        7C            .byte	$7C
07717 1ABC                        C6            .byte	$C6
07718 1ABD                        C6            .byte	$C6
07719 1ABE                        C6            .byte	$C6
07720 1ABF                        7C            .byte	$7C
07721 1AC0                        C6            .byte	$C6
07722 1AC1                        C6            .byte	$C6
07723 1AC2                        C6            .byte	$C6
07724 1AC3                        7C            .byte	$7C
07725 1AC4                        00            .byte	0
07726 1AC5                        00            .byte	0
07727 1AC6                        00            .byte	0
07728                                           ! 1209  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07729 1AC7                        00            .byte	0
07730 1AC8                        00            .byte	0
07731 1AC9                        7C            .byte	$7C
07732 1ACA                        C6            .byte	$C6
07733 1ACB                        C6            .byte	$C6
07734 1ACC                        C6            .byte	$C6
07735 1ACD                        7E            .byte	$7E
07736 1ACE                        06            .byte	6
07737 1ACF                        06            .byte	6
07738 1AD0                        0C            .byte	$C
07739 1AD1                        78            .byte	$78
07740 1AD2                        00            .byte	0
07741 1AD3                        00            .byte	0
07742 1AD4                        00            .byte	0
07743                                           ! 1210  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07744 1AD5                        00            .byte	0
07745 1AD6                        00            .byte	0
07746 1AD7                        00            .byte	0
07747 1AD8                        18            .byte	$18
07748 1AD9                        18            .byte	$18
07749 1ADA                        00            .byte	0
07750 1ADB                        00            .byte	0
07751 1ADC                        00            .byte	0
07752 1ADD                        18            .byte	$18
07753 1ADE                        18            .byte	$18
07754 1ADF                        00            .byte	0
07755 1AE0                        00            .byte	0
07756 1AE1                        00            .byte	0
07757 1AE2                        00            .byte	0
07758                                           ! 1211  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07759 1AE3                        00            .byte	0
07760 1AE4                        00            .byte	0
07761 1AE5                        00            .byte	0
07762 1AE6                        18            .byte	$18
07763 1AE7                        18            .byte	$18
07764 1AE8                        00            .byte	0
07765 1AE9                        00            .byte	0
07766 1AEA                        00            .byte	0
07767 1AEB                        18            .byte	$18
07768 1AEC                        18            .byte	$18
07769 1AED                        30            .byte	$30
07770 1AEE                        00            .byte	0
07771 1AEF                        00            .byte	0
07772 1AF0                        00            .byte	0
07773                                           ! 1212  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07774 1AF1                        00            .byte	0
07775 1AF2                        00            .byte	0
07776 1AF3                        06            .byte	6
07777 1AF4                        0C            .byte	$C
07778 1AF5                        18            .byte	$18
07779 1AF6                        30            .byte	$30
07780 1AF7                        60            .byte	$60
07781 1AF8                        30            .byte	$30
07782 1AF9                        18            .byte	$18
07783 1AFA                        0C            .byte	$C
07784 1AFB                        06            .byte	6
07785 1AFC                        00            .byte	0
07786 1AFD                        00            .byte	0
07787 1AFE                        00            .byte	0
07788                                           ! 1213  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07789 1AFF                        00            .byte	0
07790 1B00                        00            .byte	0
07791 1B01                        00            .byte	0
07792 1B02                        00            .byte	0
07793 1B03                        00            .byte	0
07794 1B04                        7E            .byte	$7E
07795 1B05                        00            .byte	0
07796 1B06                        00            .byte	0
07797 1B07                        7E            .byte	$7E
07798 1B08                        00            .byte	0
07799 1B09                        00            .byte	0
07800 1B0A                        00            .byte	0
07801 1B0B                        00            .byte	0
07802 1B0C                        00            .byte	0
07803                                           ! 1214  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07804 1B0D                        00            .byte	0
07805 1B0E                        00            .byte	0
07806 1B0F                        60            .byte	$60
07807 1B10                        30            .byte	$30
07808 1B11                        18            .byte	$18
07809 1B12                        0C            .byte	$C
07810 1B13                        06            .byte	6
07811 1B14                        0C            .byte	$C
07812 1B15                        18            .byte	$18
07813 1B16                        30            .byte	$30
07814 1B17                        60            .byte	$60
07815 1B18                        00            .byte	0
07816 1B19                        00            .byte	0
07817 1B1A                        00            .byte	0
07818                                           ! 1215  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07819 1B1B                        00            .byte	0
07820 1B1C                        00            .byte	0
07821 1B1D                        7C            .byte	$7C
07822 1B1E                        C6            .byte	$C6
07823 1B1F                        C6            .byte	$C6
07824 1B20                        0C            .byte	$C
07825 1B21                        18            .byte	$18
07826 1B22                        18            .byte	$18
07827 1B23                        00            .byte	0
07828 1B24                        18            .byte	$18
07829 1B25                        18            .byte	$18
07830 1B26                        00            .byte	0
07831 1B27                        00            .byte	0
07832 1B28                        00            .byte	0
07833                                           ! 1216  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07834 1B29                        00            .byte	0
07835 1B2A                        00            .byte	0
07836 1B2B                        7C            .byte	$7C
07837 1B2C                        C6            .byte	$C6
07838 1B2D                        C6            .byte	$C6
07839 1B2E                        DE            .byte	$DE
07840 1B2F                        DE            .byte	$DE
07841 1B30                        DE            .byte	$DE
07842 1B31                        DC            .byte	$DC
07843 1B32                        C0            .byte	$C0
07844 1B33                        7C            .byte	$7C
07845 1B34                        00            .byte	0
07846 1B35                        00            .byte	0
07847 1B36                        00            .byte	0
07848                                           ! 1217  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07849 1B37                        00            .byte	0
07850 1B38                        00            .byte	0
07851 1B39                        10            .byte	$10
07852 1B3A                        38            .byte	$38
07853 1B3B                        6C            .byte	$6C
07854 1B3C                        C6            .byte	$C6
07855 1B3D                        C6            .byte	$C6
07856 1B3E                        FE            .byte	$FE
07857 1B3F                        C6            .byte	$C6
07858 1B40                        C6            .byte	$C6
07859 1B41                        C6            .byte	$C6
07860 1B42                        00            .byte	0
07861 1B43                        00            .byte	0
07862 1B44                        00            .byte	0
07863                                           ! 1218  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07864 1B45                        00            .byte	0
07865 1B46                        00            .byte	0
07866 1B47                        FC            .byte	$FC
07867 1B48                        66            .byte	$66
07868 1B49                        66            .byte	$66
07869 1B4A                        66            .byte	$66
07870 1B4B                        7C            .byte	$7C
07871 1B4C                        66            .byte	$66
07872 1B4D                        66            .byte	$66
07873 1B4E                        66            .byte	$66
07874 1B4F                        FC            .byte	$FC
07875 1B50                        00            .byte	0
07876 1B51                        00            .byte	0
07877 1B52                        00            .byte	0
07878                                           ! 1219  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07879 1B53                        00            .byte	0
07880 1B54                        00            .byte	0
07881 1B55                        3C            .byte	$3C
07882 1B56                        66            .byte	$66
07883 1B57                        C2            .byte	$C2
07884 1B58                        C0            .byte	$C0
07885 1B59                        C0            .byte	$C0
07886 1B5A                        C0            .byte	$C0
07887 1B5B                        C2            .byte	$C2
07888 1B5C                        66            .byte	$66
07889 1B5D                        3C            .byte	$3C
07890 1B5E                        00            .byte	0
07891 1B5F                        00            .byte	0
07892 1B60                        00            .byte	0
07893                                           ! 1220  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07894 1B61                        00            .byte	0
07895 1B62                        00            .byte	0
07896 1B63                        F8            .byte	$F8
07897 1B64                        6C            .byte	$6C
07898 1B65                        66            .byte	$66
07899 1B66                        66            .byte	$66
07900 1B67                        66            .byte	$66
07901 1B68                        66            .byte	$66
07902 1B69                        66            .byte	$66
07903 1B6A                        6C            .byte	$6C
07904 1B6B                        F8            .byte	$F8
07905 1B6C                        00            .byte	0
07906 1B6D                        00            .byte	0
07907 1B6E                        00            .byte	0
07908                                           ! 1221  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07909 1B6F                        00            .byte	0
07910 1B70                        00            .byte	0
07911 1B71                        FE            .byte	$FE
07912 1B72                        66            .byte	$66
07913 1B73                        62            .byte	$62
07914 1B74                        68            .byte	$68
07915 1B75                        78            .byte	$78
07916 1B76                        68            .byte	$68
07917 1B77                        62            .byte	$62
07918 1B78                        66            .byte	$66
07919 1B79                        FE            .byte	$FE
07920 1B7A                        00            .byte	0
07921 1B7B                        00            .byte	0
07922 1B7C                        00            .byte	0
07923                                           ! 1222  0x00, 0x00, 0xfe, 0x66, 0x62, 0x6
07924 1B7D                        00            .byte	0
07925 1B7E                        00            .byte	0
07926 1B7F                        FE            .byte	$FE
07927 1B80                        66            .byte	$66
07928 1B81                        62            .byte	$62
07929                                           ! 1222 8, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07930 1B82                        68            .byte	$68
07931 1B83                        78            .byte	$78
07932 1B84                        68            .byte	$68
07933 1B85                        60            .byte	$60
07934 1B86                        60            .byte	$60
07935 1B87                        F0            .byte	$F0
07936 1B88                        00            .byte	0
07937 1B89                        00            .byte	0
07938 1B8A                        00            .byte	0
07939                                           ! 1223  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07940 1B8B                        00            .byte	0
07941 1B8C                        00            .byte	0
07942 1B8D                        3C            .byte	$3C
07943 1B8E                        66            .byte	$66
07944 1B8F                        C2            .byte	$C2
07945 1B90                        C0            .byte	$C0
07946 1B91                        C0            .byte	$C0
07947 1B92                        DE            .byte	$DE
07948 1B93                        C6            .byte	$C6
07949 1B94                        66            .byte	$66
07950 1B95                        3A            .byte	$3A
07951 1B96                        00            .byte	0
07952 1B97                        00            .byte	0
07953 1B98                        00            .byte	0
07954                                           ! 1224  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07955 1B99                        00            .byte	0
07956 1B9A                        00            .byte	0
07957 1B9B                        C6            .byte	$C6
07958 1B9C                        C6            .byte	$C6
07959 1B9D                        C6            .byte	$C6
07960 1B9E                        C6            .byte	$C6
07961 1B9F                        FE            .byte	$FE
07962 1BA0                        C6            .byte	$C6
07963 1BA1                        C6            .byte	$C6
07964 1BA2                        C6            .byte	$C6
07965 1BA3                        C6            .byte	$C6
07966 1BA4                        00            .byte	0
07967 1BA5                        00            .byte	0
07968 1BA6                        00            .byte	0
07969                                           ! 1225  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07970 1BA7                        00            .byte	0
07971 1BA8                        00            .byte	0
07972 1BA9                        3C            .byte	$3C
07973 1BAA                        18            .byte	$18
07974 1BAB                        18            .byte	$18
07975 1BAC                        18            .byte	$18
07976 1BAD                        18            .byte	$18
07977 1BAE                        18            .byte	$18
07978 1BAF                        18            .byte	$18
07979 1BB0                        18            .byte	$18
07980 1BB1                        3C            .byte	$3C
07981 1BB2                        00            .byte	0
07982 1BB3                        00            .byte	0
07983 1BB4                        00            .byte	0
07984                                           ! 1226  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07985 1BB5                        00            .byte	0
07986 1BB6                        00            .byte	0
07987 1BB7                        1E            .byte	$1E
07988 1BB8                        0C            .byte	$C
07989 1BB9                        0C            .byte	$C
07990 1BBA                        0C            .byte	$C
07991 1BBB                        0C            .byte	$C
07992 1BBC                        0C            .byte	$C
07993 1BBD                        CC            .byte	$CC
07994 1BBE                        CC            .byte	$CC
07995 1BBF                        78            .byte	$78
07996 1BC0                        00            .byte	0
07997 1BC1                        00            .byte	0
07998 1BC2                        00            .byte	0
07999                                           ! 1227  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08000 1BC3                        00            .byte	0
08001 1BC4                        00            .byte	0
08002 1BC5                        E6            .byte	$E6
08003 1BC6                        66            .byte	$66
08004 1BC7                        6C            .byte	$6C
08005 1BC8                        6C            .byte	$6C
08006 1BC9                        78            .byte	$78
08007 1BCA                        6C            .byte	$6C
08008 1BCB                        6C            .byte	$6C
08009 1BCC                        66            .byte	$66
08010 1BCD                        E6            .byte	$E6
08011 1BCE                        00            .byte	0
08012 1BCF                        00            .byte	0
08013 1BD0                        00            .byte	0
08014                                           ! 1228  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
08015 1BD1                        00            .byte	0
08016 1BD2                        00            .byte	0
08017 1BD3                        F0            .byte	$F0
08018 1BD4                        60            .byte	$60
08019 1BD5                        60            .byte	$60
08020 1BD6                        60            .byte	$60
08021 1BD7                        60            .byte	$60
08022 1BD8                        60            .byte	$60
08023 1BD9                        62            .byte	$62
08024 1BDA                        66            .byte	$66
08025 1BDB                        FE            .byte	$FE
08026 1BDC                        00            .byte	0
08027 1BDD                        00            .byte	0
08028 1BDE                        00            .byte	0
08029                                           ! 1229  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08030 1BDF                        00            .byte	0
08031 1BE0                        00            .byte	0
08032 1BE1                        C6            .byte	$C6
08033 1BE2                        EE            .byte	$EE
08034 1BE3                        FE            .byte	$FE
08035 1BE4                        FE            .byte	$FE
08036 1BE5                        D6            .byte	$D6
08037 1BE6                        C6            .byte	$C6
08038 1BE7                        C6            .byte	$C6
08039 1BE8                        C6            .byte	$C6
08040 1BE9                        C6            .byte	$C6
08041 1BEA                        00            .byte	0
08042 1BEB                        00            .byte	0
08043 1BEC                        00            .byte	0
08044                                           ! 1230  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08045 1BED                        00            .byte	0
08046 1BEE                        00            .byte	0
08047 1BEF                        C6            .byte	$C6
08048 1BF0                        E6            .byte	$E6
08049 1BF1                        F6            .byte	$F6
08050 1BF2                        FE            .byte	$FE
08051 1BF3                        DE            .byte	$DE
08052 1BF4                        CE            .byte	$CE
08053 1BF5                        C6            .byte	$C6
08054 1BF6                        C6            .byte	$C6
08055 1BF7                        C6            .byte	$C6
08056 1BF8                        00            .byte	0
08057 1BF9                        00            .byte	0
08058 1BFA                        00            .byte	0
08059                                           ! 1231  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08060 1BFB                        00            .byte	0
08061 1BFC                        00            .byte	0
08062 1BFD                        38            .byte	$38
08063 1BFE                        6C            .byte	$6C
08064 1BFF                        C6            .byte	$C6
08065 1C00                        C6            .byte	$C6
08066 1C01                        C6            .byte	$C6
08067 1C02                        C6            .byte	$C6
08068 1C03                        C6            .byte	$C6
08069 1C04                        6C            .byte	$6C
08070 1C05                        38            .byte	$38
08071 1C06                        00            .byte	0
08072 1C07                        00            .byte	0
08073 1C08                        00            .byte	0
08074                                           ! 1232  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08075 1C09                        00            .byte	0
08076 1C0A                        00            .byte	0
08077 1C0B                        FC            .byte	$FC
08078 1C0C                        66            .byte	$66
08079 1C0D                        66            .byte	$66
08080 1C0E                        66            .byte	$66
08081 1C0F                        7C            .byte	$7C
08082 1C10                        60            .byte	$60
08083 1C11                        60            .byte	$60
08084 1C12                        60            .byte	$60
08085 1C13                        F0            .byte	$F0
08086 1C14                        00            .byte	0
08087 1C15                        00            .byte	0
08088 1C16                        00            .byte	0
08089                                           ! 1233  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08090 1C17                        00            .byte	0
08091 1C18                        00            .byte	0
08092 1C19                        7C            .byte	$7C
08093 1C1A                        C6            .byte	$C6
08094 1C1B                        C6            .byte	$C6
08095 1C1C                        C6            .byte	$C6
08096 1C1D                        C6            .byte	$C6
08097 1C1E                        D6            .byte	$D6
08098 1C1F                        DE            .byte	$DE
08099 1C20                        7C            .byte	$7C
08100 1C21                        0C            .byte	$C
08101 1C22                        0E            .byte	$E
08102 1C23                        00            .byte	0
08103 1C24                        00            .byte	0
08104                                           ! 1234  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08105 1C25                        00            .byte	0
08106 1C26                        00            .byte	0
08107 1C27                        FC            .byte	$FC
08108 1C28                        66            .byte	$66
08109 1C29                        66            .byte	$66
08110 1C2A                        66            .byte	$66
08111 1C2B                        7C            .byte	$7C
08112 1C2C                        6C            .byte	$6C
08113 1C2D                        66            .byte	$66
08114 1C2E                        66            .byte	$66
08115 1C2F                        E6            .byte	$E6
08116 1C30                        00            .byte	0
08117 1C31                        00            .byte	0
08118 1C32                        00            .byte	0
08119                                           ! 1235  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08120 1C33                        00            .byte	0
08121 1C34                        00            .byte	0
08122 1C35                        7C            .byte	$7C
08123 1C36                        C6            .byte	$C6
08124 1C37                        C6            .byte	$C6
08125 1C38                        60            .byte	$60
08126 1C39                        38            .byte	$38
08127 1C3A                        0C            .byte	$C
08128 1C3B                        C6            .byte	$C6
08129 1C3C                        C6            .byte	$C6
08130 1C3D                        7C            .byte	$7C
08131 1C3E                        00            .byte	0
08132 1C3F                        00            .byte	0
08133 1C40                        00            .byte	0
08134                                           ! 1236  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08135 1C41                        00            .byte	0
08136 1C42                        00            .byte	0
08137 1C43                        7E            .byte	$7E
08138 1C44                        7E            .byte	$7E
08139 1C45                        5A            .byte	$5A
08140 1C46                        18            .byte	$18
08141 1C47                        18            .byte	$18
08142 1C48                        18            .byte	$18
08143 1C49                        18            .byte	$18
08144 1C4A                        18            .byte	$18
08145 1C4B                        3C            .byte	$3C
08146 1C4C                        00            .byte	0
08147 1C4D                        00            .byte	0
08148 1C4E                        00            .byte	0
08149                                           ! 1237  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08150 1C4F                        00            .byte	0
08151 1C50                        00            .byte	0
08152 1C51                        C6            .byte	$C6
08153 1C52                        C6            .byte	$C6
08154 1C53                        C6            .byte	$C6
08155 1C54                        C6            .byte	$C6
08156 1C55                        C6            .byte	$C6
08157 1C56                        C6            .byte	$C6
08158 1C57                        C6            .byte	$C6
08159 1C58                        C6            .byte	$C6
08160 1C59                        7C            .byte	$7C
08161 1C5A                        00            .byte	0
08162 1C5B                        00            .byte	0
08163 1C5C                        00            .byte	0
08164                                           ! 1238  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08165 1C5D                        00            .byte	0
08166 1C5E                        00            .byte	0
08167 1C5F                        C6            .byte	$C6
08168 1C60                        C6            .byte	$C6
08169 1C61                        C6            .byte	$C6
08170 1C62                        C6            .byte	$C6
08171 1C63                        C6            .byte	$C6
08172 1C64                        C6            .byte	$C6
08173 1C65                        6C            .byte	$6C
08174 1C66                        38            .byte	$38
08175 1C67                        10            .byte	$10
08176 1C68                        00            .byte	0
08177 1C69                        00            .byte	0
08178 1C6A                        00            .byte	0
08179                                           ! 1239  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08180 1C6B                        00            .byte	0
08181 1C6C                        00            .byte	0
08182 1C6D                        C6            .byte	$C6
08183 1C6E                        C6            .byte	$C6
08184 1C6F                        C6            .byte	$C6
08185 1C70                        C6            .byte	$C6
08186 1C71                        D6            .byte	$D6
08187 1C72                        D6            .byte	$D6
08188 1C73                        FE            .byte	$FE
08189 1C74                        7C            .byte	$7C
08190 1C75                        6C            .byte	$6C
08191 1C76                        00            .byte	0
08192 1C77                        00            .byte	0
08193 1C78                        00            .byte	0
08194                                           ! 1240  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08195 1C79                        00            .byte	0
08196 1C7A                        00            .byte	0
08197 1C7B                        C6            .byte	$C6
08198 1C7C                        C6            .byte	$C6
08199 1C7D                        6C            .byte	$6C
08200 1C7E                        38            .byte	$38
08201 1C7F                        38            .byte	$38
08202 1C80                        38            .byte	$38
08203 1C81                        6C            .byte	$6C
08204 1C82                        C6            .byte	$C6
08205 1C83                        C6            .byte	$C6
08206 1C84                        00            .byte	0
08207 1C85                        00            .byte	0
08208 1C86                        00            .byte	0
08209                                           ! 1241  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08210 1C87                        00            .byte	0
08211 1C88                        00            .byte	0
08212 1C89                        66            .byte	$66
08213 1C8A                        66            .byte	$66
08214 1C8B                        66            .byte	$66
08215 1C8C                        66            .byte	$66
08216 1C8D                        3C            .byte	$3C
08217 1C8E                        18            .byte	$18
08218 1C8F                        18            .byte	$18
08219 1C90                        18            .byte	$18
08220 1C91                        3C            .byte	$3C
08221 1C92                        00            .byte	0
08222 1C93                        00            .byte	0
08223 1C94                        00            .byte	0
08224                                           ! 1242  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08225 1C95                        00            .byte	0
08226 1C96                        00            .byte	0
08227 1C97                        FE            .byte	$FE
08228 1C98                        C6            .byte	$C6
08229 1C99                        8C            .byte	$8C
08230 1C9A                        18            .byte	$18
08231 1C9B                        30            .byte	$30
08232 1C9C                        60            .byte	$60
08233 1C9D                        C2            .byte	$C2
08234 1C9E                        C6            .byte	$C6
08235 1C9F                        FE            .byte	$FE
08236 1CA0                        00            .byte	0
08237 1CA1                        00            .byte	0
08238 1CA2                        00            .byte	0
08239                                           ! 1243  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08240 1CA3                        00            .byte	0
08241 1CA4                        00            .byte	0
08242 1CA5                        3C            .byte	$3C
08243 1CA6                        30            .byte	$30
08244 1CA7                        30            .byte	$30
08245 1CA8                        30            .byte	$30
08246 1CA9                        30            .byte	$30
08247 1CAA                        30            .byte	$30
08248 1CAB                        30            .byte	$30
08249 1CAC                        30            .byte	$30
08250 1CAD                        3C            .byte	$3C
08251 1CAE                        00            .byte	0
08252 1CAF                        00            .byte	0
08253 1CB0                        00            .byte	0
08254                                           ! 1244  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08255 1CB1                        00            .byte	0
08256 1CB2                        00            .byte	0
08257 1CB3                        80            .byte	$80
08258 1CB4                        C0            .byte	$C0
08259 1CB5                        E0            .byte	$E0
08260 1CB6                        70            .byte	$70
08261 1CB7                        38            .byte	$38
08262 1CB8                        1C            .byte	$1C
08263 1CB9                        0E            .byte	$E
08264 1CBA                        06            .byte	6
08265 1CBB                        02            .byte	2
08266 1CBC                        00            .byte	0
08267 1CBD                        00            .byte	0
08268 1CBE                        00            .byte	0
08269                                           ! 1245  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08270 1CBF                        00            .byte	0
08271 1CC0                        00            .byte	0
08272 1CC1                        3C            .byte	$3C
08273 1CC2                        0C            .byte	$C
08274 1CC3                        0C            .byte	$C
08275 1CC4                        0C            .byte	$C
08276 1CC5                        0C            .byte	$C
08277 1CC6                        0C            .byte	$C
08278 1CC7                        0C            .byte	$C
08279 1CC8                        0C            .byte	$C
08280 1CC9                        3C            .byte	$3C
08281 1CCA                        00            .byte	0
08282 1CCB                        00            .byte	0
08283 1CCC                        00            .byte	0
08284                                           ! 1246  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08285 1CCD                        10            .byte	$10
08286 1CCE                        38            .byte	$38
08287 1CCF                        6C            .byte	$6C
08288 1CD0                        C6            .byte	$C6
08289 1CD1                        00            .byte	0
08290 1CD2                        00            .byte	0
08291                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08292 1CD3                        00            .byte	0
08293 1CD4                        00            .byte	0
08294 1CD5                        00            .byte	0
08295 1CD6                        00            .byte	0
08296 1CD7                        00            .byte	0
08297 1CD8                        00            .byte	0
08298 1CD9                        00            .byte	0
08299 1CDA                        00            .byte	0
08300                                           ! 1247  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08301 1CDB                        00            .byte	0
08302 1CDC                        00            .byte	0
08303 1CDD                        00            .byte	0
08304 1CDE                        00            .byte	0
08305 1CDF                        00            .byte	0
08306 1CE0                        00            .byte	0
08307 1CE1                        00            .byte	0
08308 1CE2                        00            .byte	0
08309 1CE3                        00            .byte	0
08310 1CE4                        00            .byte	0
08311 1CE5                        00            .byte	0
08312 1CE6                        00            .byte	0
08313 1CE7                        FF            .byte	$FF
08314 1CE8                        00            .byte	0
08315                                           ! 1248  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08316 1CE9                        30            .byte	$30
08317 1CEA                        30            .byte	$30
08318 1CEB                        18            .byte	$18
08319 1CEC                        00            .byte	0
08320 1CED                        00            .byte	0
08321 1CEE                        00            .byte	0
08322 1CEF                        00            .byte	0
08323 1CF0                        00            .byte	0
08324 1CF1                        00            .byte	0
08325 1CF2                        00            .byte	0
08326 1CF3                        00            .byte	0
08327 1CF4                        00            .byte	0
08328 1CF5                        00            .byte	0
08329 1CF6                        00            .byte	0
08330                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08331 1CF7                        00            .byte	0
08332 1CF8                        00            .byte	0
08333 1CF9                        00            .byte	0
08334 1CFA                        00            .byte	0
08335 1CFB                        00            .byte	0
08336 1CFC                        78            .byte	$78
08337 1CFD                        0C            .byte	$C
08338 1CFE                        7C            .byte	$7C
08339 1CFF                        CC            .byte	$CC
08340 1D00                        CC            .byte	$CC
08341 1D01                        76            .byte	$76
08342 1D02                        00            .byte	0
08343 1D03                        00            .byte	0
08344 1D04                        00            .byte	0
08345                                           ! 1250  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08346 1D05                        00            .byte	0
08347 1D06                        00            .byte	0
08348 1D07                        E0            .byte	$E0
08349 1D08                        60            .byte	$60
08350 1D09                        60            .byte	$60
08351 1D0A                        78            .byte	$78
08352 1D0B                        6C            .byte	$6C
08353 1D0C                        66            .byte	$66
08354 1D0D                        66            .byte	$66
08355 1D0E                        66            .byte	$66
08356 1D0F                        7C            .byte	$7C
08357 1D10                        00            .byte	0
08358 1D11                        00            .byte	0
08359 1D12                        00            .byte	0
08360                                           ! 1251  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08361 1D13                        00            .byte	0
08362 1D14                        00            .byte	0
08363 1D15                        00            .byte	0
08364 1D16                        00            .byte	0
08365 1D17                        00            .byte	0
08366 1D18                        7C            .byte	$7C
08367 1D19                        C6            .byte	$C6
08368 1D1A                        C0            .byte	$C0
08369 1D1B                        C0            .byte	$C0
08370 1D1C                        C6            .byte	$C6
08371 1D1D                        7C            .byte	$7C
08372 1D1E                        00            .byte	0
08373 1D1F                        00            .byte	0
08374 1D20                        00            .byte	0
08375                                           ! 1252  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08376 1D21                        00            .byte	0
08377 1D22                        00            .byte	0
08378 1D23                        1C            .byte	$1C
08379 1D24                        0C            .byte	$C
08380 1D25                        0C            .byte	$C
08381 1D26                        3C            .byte	$3C
08382 1D27                        6C            .byte	$6C
08383 1D28                        CC            .byte	$CC
08384 1D29                        CC            .byte	$CC
08385 1D2A                        CC            .byte	$CC
08386 1D2B                        76            .byte	$76
08387 1D2C                        00            .byte	0
08388 1D2D                        00            .byte	0
08389 1D2E                        00            .byte	0
08390                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08391 1D2F                        00            .byte	0
08392 1D30                        00            .byte	0
08393 1D31                        00            .byte	0
08394 1D32                        00            .byte	0
08395 1D33                        00            .byte	0
08396 1D34                        7C            .byte	$7C
08397 1D35                        C6            .byte	$C6
08398 1D36                        FE            .byte	$FE
08399 1D37                        C0            .byte	$C0
08400 1D38                        C6            .byte	$C6
08401 1D39                        7C            .byte	$7C
08402 1D3A                        00            .byte	0
08403 1D3B                        00            .byte	0
08404 1D3C                        00            .byte	0
08405                                           ! 1254  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08406 1D3D                        00            .byte	0
08407 1D3E                        00            .byte	0
08408 1D3F                        38            .byte	$38
08409 1D40                        6C            .byte	$6C
08410 1D41                        64            .byte	$64
08411 1D42                        60            .byte	$60
08412 1D43                        F0            .byte	$F0
08413 1D44                        60            .byte	$60
08414 1D45                        60            .byte	$60
08415 1D46                        60            .byte	$60
08416 1D47                        F0            .byte	$F0
08417 1D48                        00            .byte	0
08418 1D49                        00            .byte	0
08419 1D4A                        00            .byte	0
08420                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08421 1D4B                        00            .byte	0
08422 1D4C                        00            .byte	0
08423 1D4D                        00            .byte	0
08424 1D4E                        00            .byte	0
08425 1D4F                        00            .byte	0
08426 1D50                        76            .byte	$76
08427 1D51                        CC            .byte	$CC
08428 1D52                        CC            .byte	$CC
08429 1D53                        CC            .byte	$CC
08430 1D54                        7C            .byte	$7C
08431 1D55                        0C            .byte	$C
08432 1D56                        CC            .byte	$CC
08433 1D57                        78            .byte	$78
08434 1D58                        00            .byte	0
08435                                           ! 1256  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08436 1D59                        00            .byte	0
08437 1D5A                        00            .byte	0
08438 1D5B                        E0            .byte	$E0
08439 1D5C                        60            .byte	$60
08440 1D5D                        60            .byte	$60
08441 1D5E                        6C            .byte	$6C
08442 1D5F                        76            .byte	$76
08443 1D60                        66            .byte	$66
08444 1D61                        66            .byte	$66
08445 1D62                        66            .byte	$66
08446 1D63                        E6            .byte	$E6
08447 1D64                        00            .byte	0
08448 1D65                        00            .byte	0
08449 1D66                        00            .byte	0
08450                                           ! 1257  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08451 1D67                        00            .byte	0
08452 1D68                        00            .byte	0
08453 1D69                        18            .byte	$18
08454 1D6A                        18            .byte	$18
08455 1D6B                        00            .byte	0
08456 1D6C                        38            .byte	$38
08457 1D6D                        18            .byte	$18
08458 1D6E                        18            .byte	$18
08459 1D6F                        18            .byte	$18
08460 1D70                        18            .byte	$18
08461 1D71                        3C            .byte	$3C
08462 1D72                        00            .byte	0
08463 1D73                        00            .byte	0
08464 1D74                        00            .byte	0
08465                                           ! 1258  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08466 1D75                        00            .byte	0
08467 1D76                        00            .byte	0
08468 1D77                        06            .byte	6
08469 1D78                        06            .byte	6
08470 1D79                        00            .byte	0
08471 1D7A                        0E            .byte	$E
08472 1D7B                        06            .byte	6
08473 1D7C                        06            .byte	6
08474 1D7D                        06            .byte	6
08475 1D7E                        06            .byte	6
08476 1D7F                        66            .byte	$66
08477 1D80                        66            .byte	$66
08478 1D81                        3C            .byte	$3C
08479 1D82                        00            .byte	0
08480                                           ! 1259  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08481 1D83                        00            .byte	0
08482 1D84                        00            .byte	0
08483 1D85                        E0            .byte	$E0
08484 1D86                        60            .byte	$60
08485 1D87                        60            .byte	$60
08486 1D88                        66            .byte	$66
08487 1D89                        6C            .byte	$6C
08488 1D8A                        78            .byte	$78
08489 1D8B                        6C            .byte	$6C
08490 1D8C                        66            .byte	$66
08491 1D8D                        E6            .byte	$E6
08492 1D8E                        00            .byte	0
08493 1D8F                        00            .byte	0
08494 1D90                        00            .byte	0
08495                                           ! 1260  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08496 1D91                        00            .byte	0
08497 1D92                        00            .byte	0
08498 1D93                        38            .byte	$38
08499 1D94                        18            .byte	$18
08500 1D95                        18            .byte	$18
08501 1D96                        18            .byte	$18
08502 1D97                        18            .byte	$18
08503 1D98                        18            .byte	$18
08504 1D99                        18            .byte	$18
08505 1D9A                        18            .byte	$18
08506 1D9B                        3C            .byte	$3C
08507 1D9C                        00            .byte	0
08508 1D9D                        00            .byte	0
08509 1D9E                        00            .byte	0
08510                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08511 1D9F                        00            .byte	0
08512 1DA0                        00            .byte	0
08513 1DA1                        00            .byte	0
08514 1DA2                        00            .byte	0
08515 1DA3                        00            .byte	0
08516 1DA4                        EC            .byte	$EC
08517 1DA5                        FE            .byte	$FE
08518 1DA6                        D6            .byte	$D6
08519 1DA7                        D6            .byte	$D6
08520 1DA8                        D6            .byte	$D6
08521 1DA9                        C6            .byte	$C6
08522 1DAA                        00            .byte	0
08523 1DAB                        00            .byte	0
08524 1DAC                        00            .byte	0
08525                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08526 1DAD                        00            .byte	0
08527 1DAE                        00            .byte	0
08528 1DAF                        00            .byte	0
08529 1DB0                        00            .byte	0
08530 1DB1                        00            .byte	0
08531 1DB2                        DC            .byte	$DC
08532 1DB3                        66            .byte	$66
08533 1DB4                        66            .byte	$66
08534 1DB5                        66            .byte	$66
08535 1DB6                        66            .byte	$66
08536 1DB7                        66            .byte	$66
08537 1DB8                        00            .byte	0
08538 1DB9                        00            .byte	0
08539 1DBA                        00            .byte	0
08540                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08541 1DBB                        00            .byte	0
08542 1DBC                        00            .byte	0
08543 1DBD                        00            .byte	0
08544 1DBE                        00            .byte	0
08545 1DBF                        00            .byte	0
08546 1DC0                        7C            .byte	$7C
08547 1DC1                        C6            .byte	$C6
08548 1DC2                        C6            .byte	$C6
08549 1DC3                        C6            .byte	$C6
08550 1DC4                        C6            .byte	$C6
08551 1DC5                        7C            .byte	$7C
08552 1DC6                        00            .byte	0
08553 1DC7                        00            .byte	0
08554 1DC8                        00            .byte	0
08555                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08556 1DC9                        00            .byte	0
08557 1DCA                        00            .byte	0
08558 1DCB                        00            .byte	0
08559 1DCC                        00            .byte	0
08560 1DCD                        00            .byte	0
08561 1DCE                        DC            .byte	$DC
08562 1DCF                        66            .byte	$66
08563 1DD0                        66            .byte	$66
08564 1DD1                        66            .byte	$66
08565 1DD2                        7C            .byte	$7C
08566 1DD3                        60            .byte	$60
08567 1DD4                        60            .byte	$60
08568 1DD5                        F0            .byte	$F0
08569 1DD6                        00            .byte	0
08570                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08571 1DD7                        00            .byte	0
08572 1DD8                        00            .byte	0
08573 1DD9                        00            .byte	0
08574 1DDA                        00            .byte	0
08575 1DDB                        00            .byte	0
08576 1DDC                        76            .byte	$76
08577 1DDD                        CC            .byte	$CC
08578 1DDE                        CC            .byte	$CC
08579 1DDF                        CC            .byte	$CC
08580 1DE0                        7C            .byte	$7C
08581 1DE1                        0C            .byte	$C
08582 1DE2                        0C            .byte	$C
08583 1DE3                        1E            .byte	$1E
08584 1DE4                        00            .byte	0
08585                                           ! 1266  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08586 1DE5                        00            .byte	0
08587 1DE6                        00            .byte	0
08588 1DE7                        00            .byte	0
08589 1DE8                        00            .byte	0
08590 1DE9                        00            .byte	0
08591 1DEA                        DC            .byte	$DC
08592 1DEB                        76            .byte	$76
08593 1DEC                        66            .byte	$66
08594 1DED                        60            .byte	$60
08595 1DEE                        60            .byte	$60
08596 1DEF                        F0            .byte	$F0
08597 1DF0                        00            .byte	0
08598 1DF1                        00            .byte	0
08599 1DF2                        00            .byte	0
08600                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08601 1DF3                        00            .byte	0
08602 1DF4                        00            .byte	0
08603 1DF5                        00            .byte	0
08604 1DF6                        00            .byte	0
08605 1DF7                        00            .byte	0
08606 1DF8                        7C            .byte	$7C
08607 1DF9                        C6            .byte	$C6
08608 1DFA                        70            .byte	$70
08609 1DFB                        1C            .byte	$1C
08610 1DFC                        C6            .byte	$C6
08611 1DFD                        7C            .byte	$7C
08612 1DFE                        00            .byte	0
08613 1DFF                        00            .byte	0
08614 1E00                        00            .byte	0
08615                                           ! 1268  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08616 1E01                        00            .byte	0
08617 1E02                        00            .byte	0
08618 1E03                        10            .byte	$10
08619 1E04                        30            .byte	$30
08620 1E05                        30            .byte	$30
08621 1E06                        FC            .byte	$FC
08622 1E07                        30            .byte	$30
08623 1E08                        30            .byte	$30
08624 1E09                        30            .byte	$30
08625 1E0A                        36            .byte	$36
08626 1E0B                        1C            .byte	$1C
08627 1E0C                        00            .byte	0
08628 1E0D                        00            .byte	0
08629 1E0E                        00            .byte	0
08630                                           ! 1269  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08631 1E0F                        00            .byte	0
08632 1E10                        00            .byte	0
08633 1E11                        00            .byte	0
08634 1E12                        00            .byte	0
08635 1E13                        00            .byte	0
08636 1E14                        CC            .byte	$CC
08637 1E15                        CC            .byte	$CC
08638 1E16                        CC            .byte	$CC
08639 1E17                        CC            .byte	$CC
08640 1E18                        CC            .byte	$CC
08641 1E19                        76            .byte	$76
08642 1E1A                        00            .byte	0
08643 1E1B                        00            .byte	0
08644 1E1C                        00            .byte	0
08645                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0
08646 1E1D                        00            .byte	0
08647 1E1E                        00            .byte	0
08648 1E1F                        00            .byte	0
08649 1E20                        00            .byte	0
08650 1E21                        00            .byte	0
08651 1E22                        66            .byte	$66
08652 1E23                        66            .byte	$66
08653 1E24                        66            .byte	$66
08654                                           ! 1270 x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08655 1E25                        66            .byte	$66
08656 1E26                        3C            .byte	$3C
08657 1E27                        18            .byte	$18
08658 1E28                        00            .byte	0
08659 1E29                        00            .byte	0
08660 1E2A                        00            .byte	0
08661                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08662 1E2B                        00            .byte	0
08663 1E2C                        00            .byte	0
08664 1E2D                        00            .byte	0
08665 1E2E                        00            .byte	0
08666 1E2F                        00            .byte	0
08667 1E30                        C6            .byte	$C6
08668 1E31                        C6            .byte	$C6
08669 1E32                        D6            .byte	$D6
08670 1E33                        D6            .byte	$D6
08671 1E34                        FE            .byte	$FE
08672 1E35                        6C            .byte	$6C
08673 1E36                        00            .byte	0
08674 1E37                        00            .byte	0
08675 1E38                        00            .byte	0
08676                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08677 1E39                        00            .byte	0
08678 1E3A                        00            .byte	0
08679 1E3B                        00            .byte	0
08680 1E3C                        00            .byte	0
08681 1E3D                        00            .byte	0
08682 1E3E                        C6            .byte	$C6
08683 1E3F                        6C            .byte	$6C
08684 1E40                        38            .byte	$38
08685 1E41                        38            .byte	$38
08686 1E42                        6C            .byte	$6C
08687 1E43                        C6            .byte	$C6
08688 1E44                        00            .byte	0
08689 1E45                        00            .byte	0
08690 1E46                        00            .byte	0
08691                                           ! 1273  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08692 1E47                        00            .byte	0
08693 1E48                        00            .byte	0
08694 1E49                        00            .byte	0
08695 1E4A                        00            .byte	0
08696 1E4B                        00            .byte	0
08697 1E4C                        C6            .byte	$C6
08698 1E4D                        C6            .byte	$C6
08699 1E4E                        C6            .byte	$C6
08700 1E4F                        C6            .byte	$C6
08701 1E50                        7E            .byte	$7E
08702 1E51                        06            .byte	6
08703 1E52                        0C            .byte	$C
08704 1E53                        F8            .byte	$F8
08705 1E54                        00            .byte	0
08706                                           ! 1274  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08707 1E55                        00            .byte	0
08708 1E56                        00            .byte	0
08709 1E57                        00            .byte	0
08710 1E58                        00            .byte	0
08711 1E59                        00            .byte	0
08712 1E5A                        FE            .byte	$FE
08713 1E5B                        CC            .byte	$CC
08714 1E5C                        18            .byte	$18
08715 1E5D                        30            .byte	$30
08716 1E5E                        66            .byte	$66
08717 1E5F                        FE            .byte	$FE
08718 1E60                        00            .byte	0
08719 1E61                        00            .byte	0
08720 1E62                        00            .byte	0
08721                                           ! 1275  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08722 1E63                        00            .byte	0
08723 1E64                        00            .byte	0
08724 1E65                        0E            .byte	$E
08725 1E66                        18            .byte	$18
08726 1E67                        18            .byte	$18
08727 1E68                        18            .byte	$18
08728 1E69                        70            .byte	$70
08729 1E6A                        18            .byte	$18
08730 1E6B                        18            .byte	$18
08731 1E6C                        18            .byte	$18
08732 1E6D                        0E            .byte	$E
08733 1E6E                        00            .byte	0
08734 1E6F                        00            .byte	0
08735 1E70                        00            .byte	0
08736                                           ! 1276  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08737 1E71                        00            .byte	0
08738 1E72                        00            .byte	0
08739 1E73                        18            .byte	$18
08740 1E74                        18            .byte	$18
08741 1E75                        18            .byte	$18
08742 1E76                        18            .byte	$18
08743 1E77                        00            .byte	0
08744 1E78                        18            .byte	$18
08745 1E79                        18            .byte	$18
08746 1E7A                        18            .byte	$18
08747 1E7B                        18            .byte	$18
08748 1E7C                        00            .byte	0
08749 1E7D                        00            .byte	0
08750 1E7E                        00            .byte	0
08751                                           ! 1277  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08752 1E7F                        00            .byte	0
08753 1E80                        00            .byte	0
08754 1E81                        70            .byte	$70
08755 1E82                        18            .byte	$18
08756 1E83                        18            .byte	$18
08757 1E84                        18            .byte	$18
08758 1E85                        0E            .byte	$E
08759 1E86                        18            .byte	$18
08760 1E87                        18            .byte	$18
08761 1E88                        18            .byte	$18
08762 1E89                        70            .byte	$70
08763 1E8A                        00            .byte	0
08764 1E8B                        00            .byte	0
08765 1E8C                        00            .byte	0
08766                                           ! 1278  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08767 1E8D                        00            .byte	0
08768 1E8E                        00            .byte	0
08769 1E8F                        76            .byte	$76
08770 1E90                        DC            .byte	$DC
08771 1E91                        00            .byte	0
08772 1E92                        00            .byte	0
08773 1E93                        00            .byte	0
08774 1E94                        00            .byte	0
08775 1E95                        00            .byte	0
08776 1E96                        00            .byte	0
08777 1E97                        00            .byte	0
08778 1E98                        00            .byte	0
08779 1E99                        00            .byte	0
08780 1E9A                        00            .byte	0
08781                                           ! 1279  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08782 1E9B                        00            .byte	0
08783 1E9C                        00            .byte	0
08784 1E9D                        00            .byte	0
08785 1E9E                        00            .byte	0
08786 1E9F                        10            .byte	$10
08787 1EA0                        38            .byte	$38
08788 1EA1                        6C            .byte	$6C
08789 1EA2                        C6            .byte	$C6
08790 1EA3                        C6            .byte	$C6
08791 1EA4                        FE            .byte	$FE
08792 1EA5                        00            .byte	0
08793 1EA6                        00            .byte	0
08794 1EA7                        00            .byte	0
08795 1EA8                        00            .byte	0
08796                                           ! 1280  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08797 1EA9                        00            .byte	0
08798 1EAA                        00            .byte	0
08799 1EAB                        3C            .byte	$3C
08800 1EAC                        66            .byte	$66
08801 1EAD                        C2            .byte	$C2
08802 1EAE                        C0            .byte	$C0
08803 1EAF                        C0            .byte	$C0
08804 1EB0                        C2            .byte	$C2
08805 1EB1                        66            .byte	$66
08806 1EB2                        3C            .byte	$3C
08807 1EB3                        0C            .byte	$C
08808 1EB4                        06            .byte	6
08809 1EB5                        7C            .byte	$7C
08810 1EB6                        00            .byte	0
08811                                           ! 1281  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08812 1EB7                        00            .byte	0
08813 1EB8                        00            .byte	0
08814 1EB9                        CC            .byte	$CC
08815 1EBA                        CC            .byte	$CC
08816 1EBB                        00            .byte	0
08817 1EBC                        CC            .byte	$CC
08818 1EBD                        CC            .byte	$CC
08819 1EBE                        CC            .byte	$CC
08820 1EBF                        CC            .byte	$CC
08821 1EC0                        CC            .byte	$CC
08822 1EC1                        76            .byte	$76
08823 1EC2                        00            .byte	0
08824 1EC3                        00            .byte	0
08825 1EC4                        00            .byte	0
08826                                           ! 1282  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08827 1EC5                        00            .byte	0
08828 1EC6                        0C            .byte	$C
08829 1EC7                        18            .byte	$18
08830 1EC8                        30            .byte	$30
08831 1EC9                        00            .byte	0
08832 1ECA                        7C            .byte	$7C
08833 1ECB                        C6            .byte	$C6
08834 1ECC                        FE            .byte	$FE
08835 1ECD                        C0            .byte	$C0
08836 1ECE                        C6            .byte	$C6
08837 1ECF                        7C            .byte	$7C
08838 1ED0                        00            .byte	0
08839 1ED1                        00            .byte	0
08840 1ED2                        00            .byte	0
08841                                           ! 1283  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08842 1ED3                        00            .byte	0
08843 1ED4                        10            .byte	$10
08844 1ED5                        38            .byte	$38
08845 1ED6                        6C            .byte	$6C
08846 1ED7                        00            .byte	0
08847 1ED8                        78            .byte	$78
08848 1ED9                        0C            .byte	$C
08849 1EDA                        7C            .byte	$7C
08850 1EDB                        CC            .byte	$CC
08851 1EDC                        CC            .byte	$CC
08852 1EDD                        76            .byte	$76
08853 1EDE                        00            .byte	0
08854 1EDF                        00            .byte	0
08855 1EE0                        00            .byte	0
08856                                           ! 1284  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08857 1EE1                        00            .byte	0
08858 1EE2                        00            .byte	0
08859 1EE3                        CC            .byte	$CC
08860 1EE4                        CC            .byte	$CC
08861 1EE5                        00            .byte	0
08862 1EE6                        78            .byte	$78
08863 1EE7                        0C            .byte	$C
08864 1EE8                        7C            .byte	$7C
08865 1EE9                        CC            .byte	$CC
08866 1EEA                        CC            .byte	$CC
08867 1EEB                        76            .byte	$76
08868 1EEC                        00            .byte	0
08869 1EED                        00            .byte	0
08870 1EEE                        00            .byte	0
08871                                           ! 1285  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08872 1EEF                        00            .byte	0
08873 1EF0                        60            .byte	$60
08874 1EF1                        30            .byte	$30
08875 1EF2                        18            .byte	$18
08876 1EF3                        00            .byte	0
08877 1EF4                        78            .byte	$78
08878 1EF5                        0C            .byte	$C
08879 1EF6                        7C            .byte	$7C
08880 1EF7                        CC            .byte	$CC
08881 1EF8                        CC            .byte	$CC
08882 1EF9                        76            .byte	$76
08883 1EFA                        00            .byte	0
08884 1EFB                        00            .byte	0
08885 1EFC                        00            .byte	0
08886                                           ! 1286  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08887 1EFD                        00            .byte	0
08888 1EFE                        38            .byte	$38
08889 1EFF                        6C            .byte	$6C
08890 1F00                        38            .byte	$38
08891 1F01                        00            .byte	0
08892 1F02                        78            .byte	$78
08893 1F03                        0C            .byte	$C
08894 1F04                        7C            .byte	$7C
08895 1F05                        CC            .byte	$CC
08896 1F06                        CC            .byte	$CC
08897 1F07                        76            .byte	$76
08898 1F08                        00            .byte	0
08899 1F09                        00            .byte	0
08900 1F0A                        00            .byte	0
08901                                           ! 1287  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08902 1F0B                        00            .byte	0
08903 1F0C                        00            .byte	0
08904 1F0D                        00            .byte	0
08905 1F0E                        00            .byte	0
08906 1F0F                        3C            .byte	$3C
08907 1F10                        66            .byte	$66
08908 1F11                        60            .byte	$60
08909 1F12                        66            .byte	$66
08910 1F13                        3C            .byte	$3C
08911 1F14                        0C            .byte	$C
08912 1F15                        06            .byte	6
08913 1F16                        3C            .byte	$3C
08914 1F17                        00            .byte	0
08915 1F18                        00            .byte	0
08916                                           ! 1288  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08917 1F19                        00            .byte	0
08918 1F1A                        10            .byte	$10
08919 1F1B                        38            .byte	$38
08920 1F1C                        6C            .byte	$6C
08921 1F1D                        00            .byte	0
08922 1F1E                        7C            .byte	$7C
08923 1F1F                        C6            .byte	$C6
08924 1F20                        FE            .byte	$FE
08925 1F21                        C0            .byte	$C0
08926 1F22                        C6            .byte	$C6
08927 1F23                        7C            .byte	$7C
08928 1F24                        00            .byte	0
08929 1F25                        00            .byte	0
08930 1F26                        00            .byte	0
08931                                           ! 1289  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08932 1F27                        00            .byte	0
08933 1F28                        00            .byte	0
08934 1F29                        CC            .byte	$CC
08935 1F2A                        CC            .byte	$CC
08936 1F2B                        00            .byte	0
08937 1F2C                        7C            .byte	$7C
08938 1F2D                        C6            .byte	$C6
08939 1F2E                        FE            .byte	$FE
08940 1F2F                        C0            .byte	$C0
08941 1F30                        C6            .byte	$C6
08942 1F31                        7C            .byte	$7C
08943 1F32                        00            .byte	0
08944 1F33                        00            .byte	0
08945 1F34                        00            .byte	0
08946                                           ! 1290  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08947 1F35                        00            .byte	0
08948 1F36                        60            .byte	$60
08949 1F37                        30            .byte	$30
08950 1F38                        18            .byte	$18
08951 1F39                        00            .byte	0
08952 1F3A                        7C            .byte	$7C
08953 1F3B                        C6            .byte	$C6
08954 1F3C                        FE            .byte	$FE
08955 1F3D                        C0            .byte	$C0
08956 1F3E                        C6            .byte	$C6
08957 1F3F                        7C            .byte	$7C
08958 1F40                        00            .byte	0
08959 1F41                        00            .byte	0
08960 1F42                        00            .byte	0
08961                                           ! 1291  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08962 1F43                        00            .byte	0
08963 1F44                        00            .byte	0
08964 1F45                        66            .byte	$66
08965 1F46                        66            .byte	$66
08966 1F47                        00            .byte	0
08967 1F48                        38            .byte	$38
08968 1F49                        18            .byte	$18
08969 1F4A                        18            .byte	$18
08970 1F4B                        18            .byte	$18
08971 1F4C                        18            .byte	$18
08972 1F4D                        3C            .byte	$3C
08973 1F4E                        00            .byte	0
08974 1F4F                        00            .byte	0
08975 1F50                        00            .byte	0
08976                                           ! 1292  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08977 1F51                        00            .byte	0
08978 1F52                        18            .byte	$18
08979 1F53                        3C            .byte	$3C
08980 1F54                        66            .byte	$66
08981 1F55                        00            .byte	0
08982 1F56                        38            .byte	$38
08983 1F57                        18            .byte	$18
08984 1F58                        18            .byte	$18
08985 1F59                        18            .byte	$18
08986 1F5A                        18            .byte	$18
08987 1F5B                        3C            .byte	$3C
08988 1F5C                        00            .byte	0
08989 1F5D                        00            .byte	0
08990 1F5E                        00            .byte	0
08991                                           ! 1293  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08992 1F5F                        00            .byte	0
08993 1F60                        60            .byte	$60
08994 1F61                        30            .byte	$30
08995 1F62                        18            .byte	$18
08996 1F63                        00            .byte	0
08997 1F64                        38            .byte	$38
08998 1F65                        18            .byte	$18
08999 1F66                        18            .byte	$18
09000 1F67                        18            .byte	$18
09001 1F68                        18            .byte	$18
09002 1F69                        3C            .byte	$3C
09003 1F6A                        00            .byte	0
09004 1F6B                        00            .byte	0
09005 1F6C                        00            .byte	0
09006                                           ! 1294  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc
09007 1F6D                        00            .byte	0
09008 1F6E                        C6            .byte	$C6
09009 1F6F                        C6            .byte	$C6
09010 1F70                        10            .byte	$10
09011 1F71                        38            .byte	$38
09012 1F72                        6C            .byte	$6C
09013 1F73                        C6            .byte	$C6
09014 1F74                        C6            .byte	$C6
09015 1F75                        FE            .byte	$FE
09016                                           ! 1294 6, 0xc6, 0x00, 0x00, 0x00,
09017 1F76                        C6            .byte	$C6
09018 1F77                        C6            .byte	$C6
09019 1F78                        00            .byte	0
09020 1F79                        00            .byte	0
09021 1F7A                        00            .byte	0
09022                                           ! 1295  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09023 1F7B                        38            .byte	$38
09024 1F7C                        6C            .byte	$6C
09025 1F7D                        38            .byte	$38
09026 1F7E                        00            .byte	0
09027 1F7F                        38            .byte	$38
09028 1F80                        6C            .byte	$6C
09029 1F81                        C6            .byte	$C6
09030 1F82                        C6            .byte	$C6
09031 1F83                        FE            .byte	$FE
09032 1F84                        C6            .byte	$C6
09033 1F85                        C6            .byte	$C6
09034 1F86                        00            .byte	0
09035 1F87                        00            .byte	0
09036 1F88                        00            .byte	0
09037                                           ! 1296  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09038 1F89                        18            .byte	$18
09039 1F8A                        30            .byte	$30
09040 1F8B                        60            .byte	$60
09041 1F8C                        00            .byte	0
09042 1F8D                        FE            .byte	$FE
09043 1F8E                        66            .byte	$66
09044 1F8F                        60            .byte	$60
09045 1F90                        7C            .byte	$7C
09046 1F91                        60            .byte	$60
09047 1F92                        66            .byte	$66
09048 1F93                        FE            .byte	$FE
09049 1F94                        00            .byte	0
09050 1F95                        00            .byte	0
09051 1F96                        00            .byte	0
09052                                           ! 1297  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09053 1F97                        00            .byte	0
09054 1F98                        00            .byte	0
09055 1F99                        00            .byte	0
09056 1F9A                        00            .byte	0
09057 1F9B                        CC            .byte	$CC
09058 1F9C                        76            .byte	$76
09059 1F9D                        36            .byte	$36
09060 1F9E                        7E            .byte	$7E
09061 1F9F                        D8            .byte	$D8
09062 1FA0                        D8            .byte	$D8
09063 1FA1                        6E            .byte	$6E
09064 1FA2                        00            .byte	0
09065 1FA3                        00            .byte	0
09066 1FA4                        00            .byte	0
09067                                           ! 1298  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09068 1FA5                        00            .byte	0
09069 1FA6                        00            .byte	0
09070 1FA7                        3E            .byte	$3E
09071 1FA8                        6C            .byte	$6C
09072 1FA9                        CC            .byte	$CC
09073 1FAA                        CC            .byte	$CC
09074 1FAB                        FE            .byte	$FE
09075 1FAC                        CC            .byte	$CC
09076 1FAD                        CC            .byte	$CC
09077 1FAE                        CC            .byte	$CC
09078 1FAF                        CE            .byte	$CE
09079 1FB0                        00            .byte	0
09080 1FB1                        00            .byte	0
09081 1FB2                        00            .byte	0
09082                                           ! 1299  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09083 1FB3                        00            .byte	0
09084 1FB4                        10            .byte	$10
09085 1FB5                        38            .byte	$38
09086 1FB6                        6C            .byte	$6C
09087 1FB7                        00            .byte	0
09088 1FB8                        7C            .byte	$7C
09089 1FB9                        C6            .byte	$C6
09090 1FBA                        C6            .byte	$C6
09091 1FBB                        C6            .byte	$C6
09092 1FBC                        C6            .byte	$C6
09093 1FBD                        7C            .byte	$7C
09094 1FBE                        00            .byte	0
09095 1FBF                        00            .byte	0
09096 1FC0                        00            .byte	0
09097                                           ! 1300  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09098 1FC1                        00            .byte	0
09099 1FC2                        00            .byte	0
09100 1FC3                        C6            .byte	$C6
09101 1FC4                        C6            .byte	$C6
09102 1FC5                        00            .byte	0
09103 1FC6                        7C            .byte	$7C
09104 1FC7                        C6            .byte	$C6
09105 1FC8                        C6            .byte	$C6
09106 1FC9                        C6            .byte	$C6
09107 1FCA                        C6            .byte	$C6
09108 1FCB                        7C            .byte	$7C
09109 1FCC                        00            .byte	0
09110 1FCD                        00            .byte	0
09111 1FCE                        00            .byte	0
09112                                           ! 1301  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09113 1FCF                        00            .byte	0
09114 1FD0                        60            .byte	$60
09115 1FD1                        30            .byte	$30
09116 1FD2                        18            .byte	$18
09117 1FD3                        00            .byte	0
09118 1FD4                        7C            .byte	$7C
09119 1FD5                        C6            .byte	$C6
09120 1FD6                        C6            .byte	$C6
09121 1FD7                        C6            .byte	$C6
09122 1FD8                        C6            .byte	$C6
09123 1FD9                        7C            .byte	$7C
09124 1FDA                        00            .byte	0
09125 1FDB                        00            .byte	0
09126 1FDC                        00            .byte	0
09127                                           ! 1302  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09128 1FDD                        00            .byte	0
09129 1FDE                        30            .byte	$30
09130 1FDF                        78            .byte	$78
09131 1FE0                        CC            .byte	$CC
09132 1FE1                        00            .byte	0
09133 1FE2                        CC            .byte	$CC
09134 1FE3                        CC            .byte	$CC
09135 1FE4                        CC            .byte	$CC
09136 1FE5                        CC            .byte	$CC
09137 1FE6                        CC            .byte	$CC
09138 1FE7                        76            .byte	$76
09139 1FE8                        00            .byte	0
09140 1FE9                        00            .byte	0
09141 1FEA                        00            .byte	0
09142                                           ! 1303  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09143 1FEB                        00            .byte	0
09144 1FEC                        60            .byte	$60
09145 1FED                        30            .byte	$30
09146 1FEE                        18            .byte	$18
09147 1FEF                        00            .byte	0
09148 1FF0                        CC            .byte	$CC
09149 1FF1                        CC            .byte	$CC
09150 1FF2                        CC            .byte	$CC
09151 1FF3                        CC            .byte	$CC
09152 1FF4                        CC            .byte	$CC
09153 1FF5                        76            .byte	$76
09154 1FF6                        00            .byte	0
09155 1FF7                        00            .byte	0
09156 1FF8                        00            .byte	0
09157                                           ! 1304  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09158 1FF9                        00            .byte	0
09159 1FFA                        00            .byte	0
09160 1FFB                        C6            .byte	$C6
09161 1FFC                        C6            .byte	$C6
09162 1FFD                        00            .byte	0
09163 1FFE                        C6            .byte	$C6
09164 1FFF                        C6            .byte	$C6
09165 2000                        C6            .byte	$C6
09166 2001                        C6            .byte	$C6
09167 2002                        7E            .byte	$7E
09168 2003                        06            .byte	6
09169 2004                        0C            .byte	$C
09170 2005                        78            .byte	$78
09171 2006                        00            .byte	0
09172                                           ! 1305  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09173 2007                        00            .byte	0
09174 2008                        C6            .byte	$C6
09175 2009                        C6            .byte	$C6
09176 200A                        38            .byte	$38
09177 200B                        6C            .byte	$6C
09178 200C                        C6            .byte	$C6
09179 200D                        C6            .byte	$C6
09180 200E                        C6            .byte	$C6
09181 200F                        C6            .byte	$C6
09182 2010                        6C            .byte	$6C
09183 2011                        38            .byte	$38
09184 2012                        00            .byte	0
09185 2013                        00            .byte	0
09186 2014                        00            .byte	0
09187                                           ! 1306  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09188 2015                        00            .byte	0
09189 2016                        C6            .byte	$C6
09190 2017                        C6            .byte	$C6
09191 2018                        00            .byte	0
09192 2019                        C6            .byte	$C6
09193 201A                        C6            .byte	$C6
09194 201B                        C6            .byte	$C6
09195 201C                        C6            .byte	$C6
09196 201D                        C6            .byte	$C6
09197 201E                        C6            .byte	$C6
09198 201F                        7C            .byte	$7C
09199 2020                        00            .byte	0
09200 2021                        00            .byte	0
09201 2022                        00            .byte	0
09202                                           ! 1307  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09203 2023                        00            .byte	0
09204 2024                        18            .byte	$18
09205 2025                        18            .byte	$18
09206 2026                        3C            .byte	$3C
09207 2027                        66            .byte	$66
09208 2028                        60            .byte	$60
09209 2029                        60            .byte	$60
09210 202A                        66            .byte	$66
09211 202B                        3C            .byte	$3C
09212 202C                        18            .byte	$18
09213 202D                        18            .byte	$18
09214 202E                        00            .byte	0
09215 202F                        00            .byte	0
09216 2030                        00            .byte	0
09217                                           ! 1308  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09218 2031                        00            .byte	0
09219 2032                        38            .byte	$38
09220 2033                        6C            .byte	$6C
09221 2034                        64            .byte	$64
09222 2035                        60            .byte	$60
09223 2036                        F0            .byte	$F0
09224 2037                        60            .byte	$60
09225 2038                        60            .byte	$60
09226 2039                        60            .byte	$60
09227 203A                        E6            .byte	$E6
09228 203B                        FC            .byte	$FC
09229 203C                        00            .byte	0
09230 203D                        00            .byte	0
09231 203E                        00            .byte	0
09232                                           ! 1309  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09233 203F                        00            .byte	0
09234 2040                        00            .byte	0
09235 2041                        66            .byte	$66
09236 2042                        66            .byte	$66
09237 2043                        3C            .byte	$3C
09238 2044                        18            .byte	$18
09239 2045                        7E            .byte	$7E
09240 2046                        18            .byte	$18
09241 2047                        7E            .byte	$7E
09242 2048                        18            .byte	$18
09243 2049                        18            .byte	$18
09244 204A                        00            .byte	0
09245 204B                        00            .byte	0
09246 204C                        00            .byte	0
09247                                           ! 1310  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09248 204D                        00            .byte	0
09249 204E                        F8            .byte	$F8
09250 204F                        CC            .byte	$CC
09251 2050                        CC            .byte	$CC
09252 2051                        F8            .byte	$F8
09253 2052                        C4            .byte	$C4
09254 2053                        CC            .byte	$CC
09255 2054                        DE            .byte	$DE
09256 2055                        CC            .byte	$CC
09257 2056                        CC            .byte	$CC
09258 2057                        C6            .byte	$C6
09259 2058                        00            .byte	0
09260 2059                        00            .byte	0
09261 205A                        00            .byte	0
09262                                           ! 1311  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09263 205B                        00            .byte	0
09264 205C                        0E            .byte	$E
09265 205D                        1B            .byte	$1B
09266 205E                        18            .byte	$18
09267 205F                        18            .byte	$18
09268 2060                        18            .byte	$18
09269 2061                        7E            .byte	$7E
09270 2062                        18            .byte	$18
09271 2063                        18            .byte	$18
09272 2064                        18            .byte	$18
09273 2065                        18            .byte	$18
09274 2066                        D8            .byte	$D8
09275 2067                        70            .byte	$70
09276 2068                        00            .byte	0
09277                                           ! 1312  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09278 2069                        00            .byte	0
09279 206A                        18            .byte	$18
09280 206B                        30            .byte	$30
09281 206C                        60            .byte	$60
09282 206D                        00            .byte	0
09283 206E                        78            .byte	$78
09284 206F                        0C            .byte	$C
09285 2070                        7C            .byte	$7C
09286 2071                        CC            .byte	$CC
09287 2072                        CC            .byte	$CC
09288 2073                        76            .byte	$76
09289 2074                        00            .byte	0
09290 2075                        00            .byte	0
09291 2076                        00            .byte	0
09292                                           ! 1313  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09293 2077                        00            .byte	0
09294 2078                        0C            .byte	$C
09295 2079                        18            .byte	$18
09296 207A                        30            .byte	$30
09297 207B                        00            .byte	0
09298 207C                        38            .byte	$38
09299 207D                        18            .byte	$18
09300 207E                        18            .byte	$18
09301 207F                        18            .byte	$18
09302 2080                        18            .byte	$18
09303 2081                        3C            .byte	$3C
09304 2082                        00            .byte	0
09305 2083                        00            .byte	0
09306 2084                        00            .byte	0
09307                                           ! 1314  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09308 2085                        00            .byte	0
09309 2086                        18            .byte	$18
09310 2087                        30            .byte	$30
09311 2088                        60            .byte	$60
09312 2089                        00            .byte	0
09313 208A                        7C            .byte	$7C
09314 208B                        C6            .byte	$C6
09315 208C                        C6            .byte	$C6
09316 208D                        C6            .byte	$C6
09317 208E                        C6            .byte	$C6
09318 208F                        7C            .byte	$7C
09319 2090                        00            .byte	0
09320 2091                        00            .byte	0
09321 2092                        00            .byte	0
09322                                           ! 1315  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09323 2093                        00            .byte	0
09324 2094                        18            .byte	$18
09325 2095                        30            .byte	$30
09326 2096                        60            .byte	$60
09327 2097                        00            .byte	0
09328 2098                        CC            .byte	$CC
09329 2099                        CC            .byte	$CC
09330 209A                        CC            .byte	$CC
09331 209B                        CC            .byte	$CC
09332 209C                        CC            .byte	$CC
09333 209D                        76            .byte	$76
09334 209E                        00            .byte	0
09335 209F                        00            .byte	0
09336 20A0                        00            .byte	0
09337                                           ! 1316  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09338 20A1                        00            .byte	0
09339 20A2                        00            .byte	0
09340 20A3                        76            .byte	$76
09341 20A4                        DC            .byte	$DC
09342 20A5                        00            .byte	0
09343 20A6                        DC            .byte	$DC
09344 20A7                        66            .byte	$66
09345 20A8                        66            .byte	$66
09346 20A9                        66            .byte	$66
09347 20AA                        66            .byte	$66
09348 20AB                        66            .byte	$66
09349 20AC                        00            .byte	0
09350 20AD                        00            .byte	0
09351 20AE                        00            .byte	0
09352                                           ! 1317  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09353 20AF                        76            .byte	$76
09354 20B0                        DC            .byte	$DC
09355 20B1                        00            .byte	0
09356 20B2                        C6            .byte	$C6
09357 20B3                        E6            .byte	$E6
09358 20B4                        F6            .byte	$F6
09359 20B5                        FE            .byte	$FE
09360 20B6                        DE            .byte	$DE
09361 20B7                        CE            .byte	$CE
09362 20B8                        C6            .byte	$C6
09363 20B9                        C6            .byte	$C6
09364 20BA                        00            .byte	0
09365 20BB                        00            .byte	0
09366 20BC                        00            .byte	0
09367                                           ! 1318  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
09368 20BD                        00            .byte	0
09369 20BE                        3C            .byte	$3C
09370 20BF                        6C            .byte	$6C
09371 20C0                        6C            .byte	$6C
09372 20C1                        3E            .byte	$3E
09373 20C2                        00            .byte	0
09374 20C3                        7E            .byte	$7E
09375 20C4                        00            .byte	0
09376 20C5                        00            .byte	0
09377 20C6                        00            .byte	0
09378                                           ! 1318  0x00, 0x00, 0x00,
09379 20C7                        00            .byte	0
09380 20C8                        00            .byte	0
09381 20C9                        00            .byte	0
09382 20CA                        00            .byte	0
09383                                           ! 1319  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09384 20CB                        00            .byte	0
09385 20CC                        38            .byte	$38
09386 20CD                        6C            .byte	$6C
09387 20CE                        6C            .byte	$6C
09388 20CF                        38            .byte	$38
09389 20D0                        00            .byte	0
09390 20D1                        7C            .byte	$7C
09391 20D2                        00            .byte	0
09392 20D3                        00            .byte	0
09393 20D4                        00            .byte	0
09394 20D5                        00            .byte	0
09395 20D6                        00            .byte	0
09396 20D7                        00            .byte	0
09397 20D8                        00            .byte	0
09398                                           ! 1320  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09399 20D9                        00            .byte	0
09400 20DA                        00            .byte	0
09401 20DB                        30            .byte	$30
09402 20DC                        30            .byte	$30
09403 20DD                        00            .byte	0
09404 20DE                        30            .byte	$30
09405 20DF                        30            .byte	$30
09406 20E0                        60            .byte	$60
09407 20E1                        C6            .byte	$C6
09408 20E2                        C6            .byte	$C6
09409 20E3                        7C            .byte	$7C
09410 20E4                        00            .byte	0
09411 20E5                        00            .byte	0
09412 20E6                        00            .byte	0
09413                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09414 20E7                        00            .byte	0
09415 20E8                        00            .byte	0
09416 20E9                        00            .byte	0
09417 20EA                        00            .byte	0
09418 20EB                        00            .byte	0
09419 20EC                        00            .byte	0
09420 20ED                        FE            .byte	$FE
09421 20EE                        C0            .byte	$C0
09422 20EF                        C0            .byte	$C0
09423 20F0                        C0            .byte	$C0
09424 20F1                        00            .byte	0
09425 20F2                        00            .byte	0
09426 20F3                        00            .byte	0
09427 20F4                        00            .byte	0
09428                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09429 20F5                        00            .byte	0
09430 20F6                        00            .byte	0
09431 20F7                        00            .byte	0
09432 20F8                        00            .byte	0
09433 20F9                        00            .byte	0
09434 20FA                        00            .byte	0
09435 20FB                        FE            .byte	$FE
09436 20FC                        06            .byte	6
09437 20FD                        06            .byte	6
09438 20FE                        06            .byte	6
09439 20FF                        00            .byte	0
09440 2100                        00            .byte	0
09441 2101                        00            .byte	0
09442 2102                        00            .byte	0
09443                                           ! 1323  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09444 2103                        00            .byte	0
09445 2104                        C0            .byte	$C0
09446 2105                        C0            .byte	$C0
09447 2106                        C6            .byte	$C6
09448 2107                        CC            .byte	$CC
09449 2108                        D8            .byte	$D8
09450 2109                        30            .byte	$30
09451 210A                        60            .byte	$60
09452 210B                        DC            .byte	$DC
09453 210C                        86            .byte	$86
09454 210D                        0C            .byte	$C
09455 210E                        18            .byte	$18
09456 210F                        3E            .byte	$3E
09457 2110                        00            .byte	0
09458                                           ! 1324  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09459 2111                        00            .byte	0
09460 2112                        C0            .byte	$C0
09461 2113                        C0            .byte	$C0
09462 2114                        C6            .byte	$C6
09463 2115                        CC            .byte	$CC
09464 2116                        D8            .byte	$D8
09465 2117                        30            .byte	$30
09466 2118                        66            .byte	$66
09467 2119                        CE            .byte	$CE
09468 211A                        9E            .byte	$9E
09469 211B                        3E            .byte	$3E
09470 211C                        06            .byte	6
09471 211D                        06            .byte	6
09472 211E                        00            .byte	0
09473                                           ! 1325  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09474 211F                        00            .byte	0
09475 2120                        00            .byte	0
09476 2121                        18            .byte	$18
09477 2122                        18            .byte	$18
09478 2123                        00            .byte	0
09479 2124                        18            .byte	$18
09480 2125                        18            .byte	$18
09481 2126                        3C            .byte	$3C
09482 2127                        3C            .byte	$3C
09483 2128                        3C            .byte	$3C
09484 2129                        18            .byte	$18
09485 212A                        00            .byte	0
09486 212B                        00            .byte	0
09487 212C                        00            .byte	0
09488                                           ! 1326  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09489 212D                        00            .byte	0
09490 212E                        00            .byte	0
09491 212F                        00            .byte	0
09492 2130                        00            .byte	0
09493 2131                        36            .byte	$36
09494 2132                        6C            .byte	$6C
09495 2133                        D8            .byte	$D8
09496 2134                        6C            .byte	$6C
09497 2135                        36            .byte	$36
09498 2136                        00            .byte	0
09499 2137                        00            .byte	0
09500 2138                        00            .byte	0
09501 2139                        00            .byte	0
09502 213A                        00            .byte	0
09503                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09504 213B                        00            .byte	0
09505 213C                        00            .byte	0
09506 213D                        00            .byte	0
09507 213E                        00            .byte	0
09508 213F                        D8            .byte	$D8
09509 2140                        6C            .byte	$6C
09510 2141                        36            .byte	$36
09511 2142                        6C            .byte	$6C
09512 2143                        D8            .byte	$D8
09513 2144                        00            .byte	0
09514 2145                        00            .byte	0
09515 2146                        00            .byte	0
09516 2147                        00            .byte	0
09517 2148                        00            .byte	0
09518                                           ! 1328  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09519 2149                        11            .byte	$11
09520 214A                        44            .byte	$44
09521 214B                        11            .byte	$11
09522 214C                        44            .byte	$44
09523 214D                        11            .byte	$11
09524 214E                        44            .byte	$44
09525 214F                        11            .byte	$11
09526 2150                        44            .byte	$44
09527 2151                        11            .byte	$11
09528 2152                        44            .byte	$44
09529 2153                        11            .byte	$11
09530 2154                        44            .byte	$44
09531 2155                        11            .byte	$11
09532 2156                        44            .byte	$44
09533                                           ! 1329  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09534 2157                        55            .byte	$55
09535 2158                        AA            .byte	$AA
09536 2159                        55            .byte	$55
09537 215A                        AA            .byte	$AA
09538 215B                        55            .byte	$55
09539 215C                        AA            .byte	$AA
09540 215D                        55            .byte	$55
09541 215E                        AA            .byte	$AA
09542 215F                        55            .byte	$55
09543 2160                        AA            .byte	$AA
09544 2161                        55            .byte	$55
09545 2162                        AA            .byte	$AA
09546 2163                        55            .byte	$55
09547 2164                        AA            .byte	$AA
09548                                           ! 1330  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09549 2165                        DD            .byte	$DD
09550 2166                        77            .byte	$77
09551 2167                        DD            .byte	$DD
09552 2168                        77            .byte	$77
09553 2169                        DD            .byte	$DD
09554 216A                        77            .byte	$77
09555 216B                        DD            .byte	$DD
09556 216C                        77            .byte	$77
09557 216D                        DD            .byte	$DD
09558 216E                        77            .byte	$77
09559 216F                        DD            .byte	$DD
09560 2170                        77            .byte	$77
09561 2171                        DD            .byte	$DD
09562 2172                        77            .byte	$77
09563                                           ! 1331  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09564 2173                        18            .byte	$18
09565 2174                        18            .byte	$18
09566 2175                        18            .byte	$18
09567 2176                        18            .byte	$18
09568 2177                        18            .byte	$18
09569 2178                        18            .byte	$18
09570 2179                        18            .byte	$18
09571 217A                        18            .byte	$18
09572 217B                        18            .byte	$18
09573 217C                        18            .byte	$18
09574 217D                        18            .byte	$18
09575 217E                        18            .byte	$18
09576 217F                        18            .byte	$18
09577 2180                        18            .byte	$18
09578                                           ! 1332  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09579 2181                        18            .byte	$18
09580 2182                        18            .byte	$18
09581 2183                        18            .byte	$18
09582 2184                        18            .byte	$18
09583 2185                        18            .byte	$18
09584 2186                        18            .byte	$18
09585 2187                        18            .byte	$18
09586 2188                        F8            .byte	$F8
09587 2189                        18            .byte	$18
09588 218A                        18            .byte	$18
09589 218B                        18            .byte	$18
09590 218C                        18            .byte	$18
09591 218D                        18            .byte	$18
09592 218E                        18            .byte	$18
09593                                           ! 1333  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09594 218F                        18            .byte	$18
09595 2190                        18            .byte	$18
09596 2191                        18            .byte	$18
09597 2192                        18            .byte	$18
09598 2193                        18            .byte	$18
09599 2194                        F8            .byte	$F8
09600 2195                        18            .byte	$18
09601 2196                        F8            .byte	$F8
09602 2197                        18            .byte	$18
09603 2198                        18            .byte	$18
09604 2199                        18            .byte	$18
09605 219A                        18            .byte	$18
09606 219B                        18            .byte	$18
09607 219C                        18            .byte	$18
09608                                           ! 1334  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09609 219D                        36            .byte	$36
09610 219E                        36            .byte	$36
09611 219F                        36            .byte	$36
09612 21A0                        36            .byte	$36
09613 21A1                        36            .byte	$36
09614 21A2                        36            .byte	$36
09615 21A3                        36            .byte	$36
09616 21A4                        F6            .byte	$F6
09617 21A5                        36            .byte	$36
09618 21A6                        36            .byte	$36
09619 21A7                        36            .byte	$36
09620 21A8                        36            .byte	$36
09621 21A9                        36            .byte	$36
09622 21AA                        36            .byte	$36
09623                                           ! 1335  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09624 21AB                        00            .byte	0
09625 21AC                        00            .byte	0
09626 21AD                        00            .byte	0
09627 21AE                        00            .byte	0
09628 21AF                        00            .byte	0
09629 21B0                        00            .byte	0
09630 21B1                        00            .byte	0
09631 21B2                        FE            .byte	$FE
09632 21B3                        36            .byte	$36
09633 21B4                        36            .byte	$36
09634 21B5                        36            .byte	$36
09635 21B6                        36            .byte	$36
09636 21B7                        36            .byte	$36
09637 21B8                        36            .byte	$36
09638                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09639 21B9                        00            .byte	0
09640 21BA                        00            .byte	0
09641 21BB                        00            .byte	0
09642 21BC                        00            .byte	0
09643 21BD                        00            .byte	0
09644 21BE                        F8            .byte	$F8
09645 21BF                        18            .byte	$18
09646 21C0                        F8            .byte	$F8
09647 21C1                        18            .byte	$18
09648 21C2                        18            .byte	$18
09649 21C3                        18            .byte	$18
09650 21C4                        18            .byte	$18
09651 21C5                        18            .byte	$18
09652 21C6                        18            .byte	$18
09653                                           ! 1337  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09654 21C7                        36            .byte	$36
09655 21C8                        36            .byte	$36
09656 21C9                        36            .byte	$36
09657 21CA                        36            .byte	$36
09658 21CB                        36            .byte	$36
09659 21CC                        F6            .byte	$F6
09660 21CD                        06            .byte	6
09661 21CE                        F6            .byte	$F6
09662 21CF                        36            .byte	$36
09663 21D0                        36            .byte	$36
09664 21D1                        36            .byte	$36
09665 21D2                        36            .byte	$36
09666 21D3                        36            .byte	$36
09667 21D4                        36            .byte	$36
09668                                           ! 1338  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09669 21D5                        36            .byte	$36
09670 21D6                        36            .byte	$36
09671 21D7                        36            .byte	$36
09672 21D8                        36            .byte	$36
09673 21D9                        36            .byte	$36
09674 21DA                        36            .byte	$36
09675 21DB                        36            .byte	$36
09676 21DC                        36            .byte	$36
09677 21DD                        36            .byte	$36
09678 21DE                        36            .byte	$36
09679 21DF                        36            .byte	$36
09680 21E0                        36            .byte	$36
09681 21E1                        36            .byte	$36
09682 21E2                        36            .byte	$36
09683                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09684 21E3                        00            .byte	0
09685 21E4                        00            .byte	0
09686 21E5                        00            .byte	0
09687 21E6                        00            .byte	0
09688 21E7                        00            .byte	0
09689 21E8                        FE            .byte	$FE
09690 21E9                        06            .byte	6
09691 21EA                        F6            .byte	$F6
09692 21EB                        36            .byte	$36
09693 21EC                        36            .byte	$36
09694 21ED                        36            .byte	$36
09695 21EE                        36            .byte	$36
09696 21EF                        36            .byte	$36
09697 21F0                        36            .byte	$36
09698                                           ! 1340  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09699 21F1                        36            .byte	$36
09700 21F2                        36            .byte	$36
09701 21F3                        36            .byte	$36
09702 21F4                        36            .byte	$36
09703 21F5                        36            .byte	$36
09704 21F6                        F6            .byte	$F6
09705 21F7                        06            .byte	6
09706 21F8                        FE            .byte	$FE
09707 21F9                        00            .byte	0
09708 21FA                        00            .byte	0
09709 21FB                        00            .byte	0
09710 21FC                        00            .byte	0
09711 21FD                        00            .byte	0
09712 21FE                        00            .byte	0
09713                                           ! 1341  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09714 21FF                        36            .byte	$36
09715 2200                        36            .byte	$36
09716 2201                        36            .byte	$36
09717 2202                        36            .byte	$36
09718 2203                        36            .byte	$36
09719 2204                        36            .byte	$36
09720 2205                        36            .byte	$36
09721 2206                        FE            .byte	$FE
09722 2207                        00            .byte	0
09723 2208                        00            .byte	0
09724 2209                        00            .byte	0
09725 220A                        00            .byte	0
09726 220B                        00            .byte	0
09727 220C                        00            .byte	0
09728                                           ! 1342  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0
09729 220D                        18            .byte	$18
09730 220E                        18            .byte	$18
09731 220F                        18            .byte	$18
09732 2210                        18            .byte	$18
09733 2211                        18            .byte	$18
09734 2212                        F8            .byte	$F8
09735 2213                        18            .byte	$18
09736 2214                        F8            .byte	$F8
09737 2215                        00            .byte	0
09738 2216                        00            .byte	0
09739 2217                        00            .byte	0
09740 2218                        00            .byte	0
09741                                           ! 1342 x00, 0x00,
09742 2219                        00            .byte	0
09743 221A                        00            .byte	0
09744                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09745 221B                        00            .byte	0
09746 221C                        00            .byte	0
09747 221D                        00            .byte	0
09748 221E                        00            .byte	0
09749 221F                        00            .byte	0
09750 2220                        00            .byte	0
09751 2221                        00            .byte	0
09752 2222                        F8            .byte	$F8
09753 2223                        18            .byte	$18
09754 2224                        18            .byte	$18
09755 2225                        18            .byte	$18
09756 2226                        18            .byte	$18
09757 2227                        18            .byte	$18
09758 2228                        18            .byte	$18
09759                                           ! 1344  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09760 2229                        18            .byte	$18
09761 222A                        18            .byte	$18
09762 222B                        18            .byte	$18
09763 222C                        18            .byte	$18
09764 222D                        18            .byte	$18
09765 222E                        18            .byte	$18
09766 222F                        18            .byte	$18
09767 2230                        1F            .byte	$1F
09768 2231                        00            .byte	0
09769 2232                        00            .byte	0
09770 2233                        00            .byte	0
09771 2234                        00            .byte	0
09772 2235                        00            .byte	0
09773 2236                        00            .byte	0
09774                                           ! 1345  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09775 2237                        18            .byte	$18
09776 2238                        18            .byte	$18
09777 2239                        18            .byte	$18
09778 223A                        18            .byte	$18
09779 223B                        18            .byte	$18
09780 223C                        18            .byte	$18
09781 223D                        18            .byte	$18
09782 223E                        FF            .byte	$FF
09783 223F                        00            .byte	0
09784 2240                        00            .byte	0
09785 2241                        00            .byte	0
09786 2242                        00            .byte	0
09787 2243                        00            .byte	0
09788 2244                        00            .byte	0
09789                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09790 2245                        00            .byte	0
09791 2246                        00            .byte	0
09792 2247                        00            .byte	0
09793 2248                        00            .byte	0
09794 2249                        00            .byte	0
09795 224A                        00            .byte	0
09796 224B                        00            .byte	0
09797 224C                        FF            .byte	$FF
09798 224D                        18            .byte	$18
09799 224E                        18            .byte	$18
09800 224F                        18            .byte	$18
09801 2250                        18            .byte	$18
09802 2251                        18            .byte	$18
09803 2252                        18            .byte	$18
09804                                           ! 1347  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09805 2253                        18            .byte	$18
09806 2254                        18            .byte	$18
09807 2255                        18            .byte	$18
09808 2256                        18            .byte	$18
09809 2257                        18            .byte	$18
09810 2258                        18            .byte	$18
09811 2259                        18            .byte	$18
09812 225A                        1F            .byte	$1F
09813 225B                        18            .byte	$18
09814 225C                        18            .byte	$18
09815 225D                        18            .byte	$18
09816 225E                        18            .byte	$18
09817 225F                        18            .byte	$18
09818 2260                        18            .byte	$18
09819                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09820 2261                        00            .byte	0
09821 2262                        00            .byte	0
09822 2263                        00            .byte	0
09823 2264                        00            .byte	0
09824 2265                        00            .byte	0
09825 2266                        00            .byte	0
09826 2267                        00            .byte	0
09827 2268                        FF            .byte	$FF
09828 2269                        00            .byte	0
09829 226A                        00            .byte	0
09830 226B                        00            .byte	0
09831 226C                        00            .byte	0
09832 226D                        00            .byte	0
09833 226E                        00            .byte	0
09834                                           ! 1349  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09835 226F                        18            .byte	$18
09836 2270                        18            .byte	$18
09837 2271                        18            .byte	$18
09838 2272                        18            .byte	$18
09839 2273                        18            .byte	$18
09840 2274                        18            .byte	$18
09841 2275                        18            .byte	$18
09842 2276                        FF            .byte	$FF
09843 2277                        18            .byte	$18
09844 2278                        18            .byte	$18
09845 2279                        18            .byte	$18
09846 227A                        18            .byte	$18
09847 227B                        18            .byte	$18
09848 227C                        18            .byte	$18
09849                                           ! 1350  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09850 227D                        18            .byte	$18
09851 227E                        18            .byte	$18
09852 227F                        18            .byte	$18
09853 2280                        18            .byte	$18
09854 2281                        18            .byte	$18
09855 2282                        1F            .byte	$1F
09856 2283                        18            .byte	$18
09857 2284                        1F            .byte	$1F
09858 2285                        18            .byte	$18
09859 2286                        18            .byte	$18
09860 2287                        18            .byte	$18
09861 2288                        18            .byte	$18
09862 2289                        18            .byte	$18
09863 228A                        18            .byte	$18
09864                                           ! 1351  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09865 228B                        36            .byte	$36
09866 228C                        36            .byte	$36
09867 228D                        36            .byte	$36
09868 228E                        36            .byte	$36
09869 228F                        36            .byte	$36
09870 2290                        36            .byte	$36
09871 2291                        36            .byte	$36
09872 2292                        37            .byte	$37
09873 2293                        36            .byte	$36
09874 2294                        36            .byte	$36
09875 2295                        36            .byte	$36
09876 2296                        36            .byte	$36
09877 2297                        36            .byte	$36
09878 2298                        36            .byte	$36
09879                                           ! 1352  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09880 2299                        36            .byte	$36
09881 229A                        36            .byte	$36
09882 229B                        36            .byte	$36
09883 229C                        36            .byte	$36
09884 229D                        36            .byte	$36
09885 229E                        37            .byte	$37
09886 229F                        30            .byte	$30
09887 22A0                        3F            .byte	$3F
09888 22A1                        00            .byte	0
09889 22A2                        00            .byte	0
09890 22A3                        00            .byte	0
09891 22A4                        00            .byte	0
09892 22A5                        00            .byte	0
09893 22A6                        00            .byte	0
09894                                           ! 1353  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09895 22A7                        00            .byte	0
09896 22A8                        00            .byte	0
09897 22A9                        00            .byte	0
09898 22AA                        00            .byte	0
09899 22AB                        00            .byte	0
09900 22AC                        3F            .byte	$3F
09901 22AD                        30            .byte	$30
09902 22AE                        37            .byte	$37
09903 22AF                        36            .byte	$36
09904 22B0                        36            .byte	$36
09905 22B1                        36            .byte	$36
09906 22B2                        36            .byte	$36
09907 22B3                        36            .byte	$36
09908 22B4                        36            .byte	$36
09909                                           ! 1354  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09910 22B5                        36            .byte	$36
09911 22B6                        36            .byte	$36
09912 22B7                        36            .byte	$36
09913 22B8                        36            .byte	$36
09914 22B9                        36            .byte	$36
09915 22BA                        F7            .byte	$F7
09916 22BB                        00            .byte	0
09917 22BC                        FF            .byte	$FF
09918 22BD                        00            .byte	0
09919 22BE                        00            .byte	0
09920 22BF                        00            .byte	0
09921 22C0                        00            .byte	0
09922 22C1                        00            .byte	0
09923 22C2                        00            .byte	0
09924                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09925 22C3                        00            .byte	0
09926 22C4                        00            .byte	0
09927 22C5                        00            .byte	0
09928 22C6                        00            .byte	0
09929 22C7                        00            .byte	0
09930 22C8                        FF            .byte	$FF
09931 22C9                        00            .byte	0
09932 22CA                        F7            .byte	$F7
09933 22CB                        36            .byte	$36
09934 22CC                        36            .byte	$36
09935 22CD                        36            .byte	$36
09936 22CE                        36            .byte	$36
09937 22CF                        36            .byte	$36
09938 22D0                        36            .byte	$36
09939                                           ! 1356  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09940 22D1                        36            .byte	$36
09941 22D2                        36            .byte	$36
09942 22D3                        36            .byte	$36
09943 22D4                        36            .byte	$36
09944 22D5                        36            .byte	$36
09945 22D6                        37            .byte	$37
09946 22D7                        30            .byte	$30
09947 22D8                        37            .byte	$37
09948 22D9                        36            .byte	$36
09949 22DA                        36            .byte	$36
09950 22DB                        36            .byte	$36
09951 22DC                        36            .byte	$36
09952 22DD                        36            .byte	$36
09953 22DE                        36            .byte	$36
09954                                           ! 1357  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09955 22DF                        00            .byte	0
09956 22E0                        00            .byte	0
09957 22E1                        00            .byte	0
09958 22E2                        00            .byte	0
09959 22E3                        00            .byte	0
09960 22E4                        FF            .byte	$FF
09961 22E5                        00            .byte	0
09962 22E6                        FF            .byte	$FF
09963 22E7                        00            .byte	0
09964 22E8                        00            .byte	0
09965 22E9                        00            .byte	0
09966 22EA                        00            .byte	0
09967 22EB                        00            .byte	0
09968 22EC                        00            .byte	0
09969                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09970 22ED                        36            .byte	$36
09971 22EE                        36            .byte	$36
09972 22EF                        36            .byte	$36
09973 22F0                        36            .byte	$36
09974 22F1                        36            .byte	$36
09975 22F2                        F7            .byte	$F7
09976 22F3                        00            .byte	0
09977 22F4                        F7            .byte	$F7
09978 22F5                        36            .byte	$36
09979 22F6                        36            .byte	$36
09980 22F7                        36            .byte	$36
09981 22F8                        36            .byte	$36
09982 22F9                        36            .byte	$36
09983 22FA                        36            .byte	$36
09984                                           ! 1359  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09985 22FB                        18            .byte	$18
09986 22FC                        18            .byte	$18
09987 22FD                        18            .byte	$18
09988 22FE                        18            .byte	$18
09989 22FF                        18            .byte	$18
09990 2300                        FF            .byte	$FF
09991 2301                        00            .byte	0
09992 2302                        FF            .byte	$FF
09993 2303                        00            .byte	0
09994 2304                        00            .byte	0
09995 2305                        00            .byte	0
09996 2306                        00            .byte	0
09997 2307                        00            .byte	0
09998 2308                        00            .byte	0
09999                                           ! 1360  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10000 2309                        36            .byte	$36
10001 230A                        36            .byte	$36
10002 230B                        36            .byte	$36
10003 230C                        36            .byte	$36
10004 230D                        36            .byte	$36
10005 230E                        36            .byte	$36
10006 230F                        36            .byte	$36
10007 2310                        FF            .byte	$FF
10008 2311                        00            .byte	0
10009 2312                        00            .byte	0
10010 2313                        00            .byte	0
10011 2314                        00            .byte	0
10012 2315                        00            .byte	0
10013 2316                        00            .byte	0
10014                                           ! 1361  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10015 2317                        00            .byte	0
10016 2318                        00            .byte	0
10017 2319                        00            .byte	0
10018 231A                        00            .byte	0
10019 231B                        00            .byte	0
10020 231C                        FF            .byte	$FF
10021 231D                        00            .byte	0
10022 231E                        FF            .byte	$FF
10023 231F                        18            .byte	$18
10024 2320                        18            .byte	$18
10025 2321                        18            .byte	$18
10026 2322                        18            .byte	$18
10027 2323                        18            .byte	$18
10028 2324                        18            .byte	$18
10029                                           ! 1362  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10030 2325                        00            .byte	0
10031 2326                        00            .byte	0
10032 2327                        00            .byte	0
10033 2328                        00            .byte	0
10034 2329                        00            .byte	0
10035 232A                        00            .byte	0
10036 232B                        00            .byte	0
10037 232C                        FF            .byte	$FF
10038 232D                        36            .byte	$36
10039 232E                        36            .byte	$36
10040 232F                        36            .byte	$36
10041 2330                        36            .byte	$36
10042 2331                        36            .byte	$36
10043 2332                        36            .byte	$36
10044                                           ! 1363  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10045 2333                        36            .byte	$36
10046 2334                        36            .byte	$36
10047 2335                        36            .byte	$36
10048 2336                        36            .byte	$36
10049 2337                        36            .byte	$36
10050 2338                        36            .byte	$36
10051 2339                        36            .byte	$36
10052 233A                        3F            .byte	$3F
10053 233B                        00            .byte	0
10054 233C                        00            .byte	0
10055 233D                        00            .byte	0
10056 233E                        00            .byte	0
10057 233F                        00            .byte	0
10058 2340                        00            .byte	0
10059                                           ! 1364  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10060 2341                        18            .byte	$18
10061 2342                        18            .byte	$18
10062 2343                        18            .byte	$18
10063 2344                        18            .byte	$18
10064 2345                        18            .byte	$18
10065 2346                        1F            .byte	$1F
10066 2347                        18            .byte	$18
10067 2348                        1F            .byte	$1F
10068 2349                        00            .byte	0
10069 234A                        00            .byte	0
10070 234B                        00            .byte	0
10071 234C                        00            .byte	0
10072 234D                        00            .byte	0
10073 234E                        00            .byte	0
10074                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10075 234F                        00            .byte	0
10076 2350                        00            .byte	0
10077 2351                        00            .byte	0
10078 2352                        00            .byte	0
10079 2353                        00            .byte	0
10080 2354                        1F            .byte	$1F
10081 2355                        18            .byte	$18
10082 2356                        1F            .byte	$1F
10083 2357                        18            .byte	$18
10084 2358                        18            .byte	$18
10085 2359                        18            .byte	$18
10086 235A                        18            .byte	$18
10087 235B                        18            .byte	$18
10088 235C                        18            .byte	$18
10089                                           ! 1366  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3
10090 235D                        00            .byte	0
10091 235E                        00            .byte	0
10092 235F                        00            .byte	0
10093 2360                        00            .byte	0
10094 2361                        00            .byte	0
10095 2362                        00            .byte	0
10096 2363                        00            .byte	0
10097 2364                        3F            .byte	$3F
10098 2365                        36            .byte	$36
10099 2366                        36            .byte	$36
10100 2367                        36            .byte	$36
10101 2368                        36            .byte	$36
10102 2369                        36            .byte	$36
10103                                           ! 1366 6,
10104 236A                        36            .byte	$36
10105                                           ! 1367  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10106 236B                        36            .byte	$36
10107 236C                        36            .byte	$36
10108 236D                        36            .byte	$36
10109 236E                        36            .byte	$36
10110 236F                        36            .byte	$36
10111 2370                        36            .byte	$36
10112 2371                        36            .byte	$36
10113 2372                        FF            .byte	$FF
10114 2373                        36            .byte	$36
10115 2374                        36            .byte	$36
10116 2375                        36            .byte	$36
10117 2376                        36            .byte	$36
10118 2377                        36            .byte	$36
10119 2378                        36            .byte	$36
10120                                           ! 1368  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10121 2379                        18            .byte	$18
10122 237A                        18            .byte	$18
10123 237B                        18            .byte	$18
10124 237C                        18            .byte	$18
10125 237D                        18            .byte	$18
10126 237E                        FF            .byte	$FF
10127 237F                        18            .byte	$18
10128 2380                        FF            .byte	$FF
10129 2381                        18            .byte	$18
10130 2382                        18            .byte	$18
10131 2383                        18            .byte	$18
10132 2384                        18            .byte	$18
10133 2385                        18            .byte	$18
10134 2386                        18            .byte	$18
10135                                           ! 1369  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10136 2387                        18            .byte	$18
10137 2388                        18            .byte	$18
10138 2389                        18            .byte	$18
10139 238A                        18            .byte	$18
10140 238B                        18            .byte	$18
10141 238C                        18            .byte	$18
10142 238D                        18            .byte	$18
10143 238E                        F8            .byte	$F8
10144 238F                        00            .byte	0
10145 2390                        00            .byte	0
10146 2391                        00            .byte	0
10147 2392                        00            .byte	0
10148 2393                        00            .byte	0
10149 2394                        00            .byte	0
10150                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10151 2395                        00            .byte	0
10152 2396                        00            .byte	0
10153 2397                        00            .byte	0
10154 2398                        00            .byte	0
10155 2399                        00            .byte	0
10156 239A                        00            .byte	0
10157 239B                        00            .byte	0
10158 239C                        1F            .byte	$1F
10159 239D                        18            .byte	$18
10160 239E                        18            .byte	$18
10161 239F                        18            .byte	$18
10162 23A0                        18            .byte	$18
10163 23A1                        18            .byte	$18
10164 23A2                        18            .byte	$18
10165                                           ! 1371  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10166 23A3                        FF            .byte	$FF
10167 23A4                        FF            .byte	$FF
10168 23A5                        FF            .byte	$FF
10169 23A6                        FF            .byte	$FF
10170 23A7                        FF            .byte	$FF
10171 23A8                        FF            .byte	$FF
10172 23A9                        FF            .byte	$FF
10173 23AA                        FF            .byte	$FF
10174 23AB                        FF            .byte	$FF
10175 23AC                        FF            .byte	$FF
10176 23AD                        FF            .byte	$FF
10177 23AE                        FF            .byte	$FF
10178 23AF                        FF            .byte	$FF
10179 23B0                        FF            .byte	$FF
10180                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10181 23B1                        00            .byte	0
10182 23B2                        00            .byte	0
10183 23B3                        00            .byte	0
10184 23B4                        00            .byte	0
10185 23B5                        00            .byte	0
10186 23B6                        00            .byte	0
10187 23B7                        00            .byte	0
10188 23B8                        FF            .byte	$FF
10189 23B9                        FF            .byte	$FF
10190 23BA                        FF            .byte	$FF
10191 23BB                        FF            .byte	$FF
10192 23BC                        FF            .byte	$FF
10193 23BD                        FF            .byte	$FF
10194 23BE                        FF            .byte	$FF
10195                                           ! 1373  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10196 23BF                        F0            .byte	$F0
10197 23C0                        F0            .byte	$F0
10198 23C1                        F0            .byte	$F0
10199 23C2                        F0            .byte	$F0
10200 23C3                        F0            .byte	$F0
10201 23C4                        F0            .byte	$F0
10202 23C5                        F0            .byte	$F0
10203 23C6                        F0            .byte	$F0
10204 23C7                        F0            .byte	$F0
10205 23C8                        F0            .byte	$F0
10206 23C9                        F0            .byte	$F0
10207 23CA                        F0            .byte	$F0
10208 23CB                        F0            .byte	$F0
10209 23CC                        F0            .byte	$F0
10210                                           ! 1374  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10211 23CD                        0F            .byte	$F
10212 23CE                        0F            .byte	$F
10213 23CF                        0F            .byte	$F
10214 23D0                        0F            .byte	$F
10215 23D1                        0F            .byte	$F
10216 23D2                        0F            .byte	$F
10217 23D3                        0F            .byte	$F
10218 23D4                        0F            .byte	$F
10219 23D5                        0F            .byte	$F
10220 23D6                        0F            .byte	$F
10221 23D7                        0F            .byte	$F
10222 23D8                        0F            .byte	$F
10223 23D9                        0F            .byte	$F
10224 23DA                        0F            .byte	$F
10225                                           ! 1375  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10226 23DB                        FF            .byte	$FF
10227 23DC                        FF            .byte	$FF
10228 23DD                        FF            .byte	$FF
10229 23DE                        FF            .byte	$FF
10230 23DF                        FF            .byte	$FF
10231 23E0                        FF            .byte	$FF
10232 23E1                        FF            .byte	$FF
10233 23E2                        00            .byte	0
10234 23E3                        00            .byte	0
10235 23E4                        00            .byte	0
10236 23E5                        00            .byte	0
10237 23E6                        00            .byte	0
10238 23E7                        00            .byte	0
10239 23E8                        00            .byte	0
10240                                           ! 1376  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10241 23E9                        00            .byte	0
10242 23EA                        00            .byte	0
10243 23EB                        00            .byte	0
10244 23EC                        00            .byte	0
10245 23ED                        00            .byte	0
10246 23EE                        76            .byte	$76
10247 23EF                        DC            .byte	$DC
10248 23F0                        D8            .byte	$D8
10249 23F1                        D8            .byte	$D8
10250 23F2                        DC            .byte	$DC
10251 23F3                        76            .byte	$76
10252 23F4                        00            .byte	0
10253 23F5                        00            .byte	0
10254 23F6                        00            .byte	0
10255                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10256 23F7                        00            .byte	0
10257 23F8                        00            .byte	0
10258 23F9                        00            .byte	0
10259 23FA                        00            .byte	0
10260 23FB                        7C            .byte	$7C
10261 23FC                        C6            .byte	$C6
10262 23FD                        FC            .byte	$FC
10263 23FE                        C6            .byte	$C6
10264 23FF                        C6            .byte	$C6
10265 2400                        FC            .byte	$FC
10266 2401                        C0            .byte	$C0
10267 2402                        C0            .byte	$C0
10268 2403                        40            .byte	$40
10269 2404                        00            .byte	0
10270                                           ! 1378  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10271 2405                        00            .byte	0
10272 2406                        00            .byte	0
10273 2407                        FE            .byte	$FE
10274 2408                        C6            .byte	$C6
10275 2409                        C6            .byte	$C6
10276 240A                        C0            .byte	$C0
10277 240B                        C0            .byte	$C0
10278 240C                        C0            .byte	$C0
10279 240D                        C0            .byte	$C0
10280 240E                        C0            .byte	$C0
10281 240F                        C0            .byte	$C0
10282 2410                        00            .byte	0
10283 2411                        00            .byte	0
10284 2412                        00            .byte	0
10285                                           ! 1379  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10286 2413                        00            .byte	0
10287 2414                        00            .byte	0
10288 2415                        00            .byte	0
10289 2416                        00            .byte	0
10290 2417                        FE            .byte	$FE
10291 2418                        6C            .byte	$6C
10292 2419                        6C            .byte	$6C
10293 241A                        6C            .byte	$6C
10294 241B                        6C            .byte	$6C
10295 241C                        6C            .byte	$6C
10296 241D                        6C            .byte	$6C
10297 241E                        00            .byte	0
10298 241F                        00            .byte	0
10299 2420                        00            .byte	0
10300                                           ! 1380  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10301 2421                        00            .byte	0
10302 2422                        00            .byte	0
10303 2423                        FE            .byte	$FE
10304 2424                        C6            .byte	$C6
10305 2425                        60            .byte	$60
10306 2426                        30            .byte	$30
10307 2427                        18            .byte	$18
10308 2428                        30            .byte	$30
10309 2429                        60            .byte	$60
10310 242A                        C6            .byte	$C6
10311 242B                        FE            .byte	$FE
10312 242C                        00            .byte	0
10313 242D                        00            .byte	0
10314 242E                        00            .byte	0
10315                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10316 242F                        00            .byte	0
10317 2430                        00            .byte	0
10318 2431                        00            .byte	0
10319 2432                        00            .byte	0
10320 2433                        00            .byte	0
10321 2434                        7E            .byte	$7E
10322 2435                        D8            .byte	$D8
10323 2436                        D8            .byte	$D8
10324 2437                        D8            .byte	$D8
10325 2438                        D8            .byte	$D8
10326 2439                        70            .byte	$70
10327 243A                        00            .byte	0
10328 243B                        00            .byte	0
10329 243C                        00            .byte	0
10330                                           ! 1382  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10331 243D                        00            .byte	0
10332 243E                        00            .byte	0
10333 243F                        00            .byte	0
10334 2440                        00            .byte	0
10335 2441                        66            .byte	$66
10336 2442                        66            .byte	$66
10337 2443                        66            .byte	$66
10338 2444                        66            .byte	$66
10339 2445                        7C            .byte	$7C
10340 2446                        60            .byte	$60
10341 2447                        60            .byte	$60
10342 2448                        C0            .byte	$C0
10343 2449                        00            .byte	0
10344 244A                        00            .byte	0
10345                                           ! 1383  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10346 244B                        00            .byte	0
10347 244C                        00            .byte	0
10348 244D                        00            .byte	0
10349 244E                        00            .byte	0
10350 244F                        76            .byte	$76
10351 2450                        DC            .byte	$DC
10352 2451                        18            .byte	$18
10353 2452                        18            .byte	$18
10354 2453                        18            .byte	$18
10355 2454                        18            .byte	$18
10356 2455                        18            .byte	$18
10357 2456                        00            .byte	0
10358 2457                        00            .byte	0
10359 2458                        00            .byte	0
10360                                           ! 1384  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10361 2459                        00            .byte	0
10362 245A                        00            .byte	0
10363 245B                        7E            .byte	$7E
10364 245C                        18            .byte	$18
10365 245D                        3C            .byte	$3C
10366 245E                        66            .byte	$66
10367 245F                        66            .byte	$66
10368 2460                        66            .byte	$66
10369 2461                        3C            .byte	$3C
10370 2462                        18            .byte	$18
10371 2463                        7E            .byte	$7E
10372 2464                        00            .byte	0
10373 2465                        00            .byte	0
10374 2466                        00            .byte	0
10375                                           ! 1385  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10376 2467                        00            .byte	0
10377 2468                        00            .byte	0
10378 2469                        38            .byte	$38
10379 246A                        6C            .byte	$6C
10380 246B                        C6            .byte	$C6
10381 246C                        C6            .byte	$C6
10382 246D                        FE            .byte	$FE
10383 246E                        C6            .byte	$C6
10384 246F                        C6            .byte	$C6
10385 2470                        6C            .byte	$6C
10386 2471                        38            .byte	$38
10387 2472                        00            .byte	0
10388 2473                        00            .byte	0
10389 2474                        00            .byte	0
10390                                           ! 1386  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10391 2475                        00            .byte	0
10392 2476                        00            .byte	0
10393 2477                        38            .byte	$38
10394 2478                        6C            .byte	$6C
10395 2479                        C6            .byte	$C6
10396 247A                        C6            .byte	$C6
10397 247B                        C6            .byte	$C6
10398 247C                        6C            .byte	$6C
10399 247D                        6C            .byte	$6C
10400 247E                        6C            .byte	$6C
10401 247F                        EE            .byte	$EE
10402 2480                        00            .byte	0
10403 2481                        00            .byte	0
10404 2482                        00            .byte	0
10405                                           ! 1387  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10406 2483                        00            .byte	0
10407 2484                        00            .byte	0
10408 2485                        1E            .byte	$1E
10409 2486                        30            .byte	$30
10410 2487                        18            .byte	$18
10411 2488                        0C            .byte	$C
10412 2489                        3E            .byte	$3E
10413 248A                        66            .byte	$66
10414 248B                        66            .byte	$66
10415 248C                        66            .byte	$66
10416 248D                        3C            .byte	$3C
10417 248E                        00            .byte	0
10418 248F                        00            .byte	0
10419 2490                        00            .byte	0
10420                                           ! 1388  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10421 2491                        00            .byte	0
10422 2492                        00            .byte	0
10423 2493                        00            .byte	0
10424 2494                        00            .byte	0
10425 2495                        00            .byte	0
10426 2496                        7E            .byte	$7E
10427 2497                        DB            .byte	$DB
10428 2498                        DB            .byte	$DB
10429 2499                        7E            .byte	$7E
10430 249A                        00            .byte	0
10431 249B                        00            .byte	0
10432 249C                        00            .byte	0
10433 249D                        00            .byte	0
10434 249E                        00            .byte	0
10435                                           ! 1389  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10436 249F                        00            .byte	0
10437 24A0                        00            .byte	0
10438 24A1                        03            .byte	3
10439 24A2                        06            .byte	6
10440 24A3                        7E            .byte	$7E
10441 24A4                        DB            .byte	$DB
10442 24A5                        DB            .byte	$DB
10443 24A6                        F3            .byte	$F3
10444 24A7                        7E            .byte	$7E
10445 24A8                        60            .byte	$60
10446 24A9                        C0            .byte	$C0
10447 24AA                        00            .byte	0
10448 24AB                        00            .byte	0
10449 24AC                        00            .byte	0
10450                                           ! 1390  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10451 24AD                        00            .byte	0
10452 24AE                        00            .byte	0
10453 24AF                        1C            .byte	$1C
10454 24B0                        30            .byte	$30
10455 24B1                        60            .byte	$60
10456 24B2                        60            .byte	$60
10457 24B3                        7C            .byte	$7C
10458 24B4                        60            .byte	$60
10459 24B5                        60            .byte	$60
10460 24B6                        30            .byte	$30
10461 24B7                        1C            .byte	$1C
10462 24B8                        00            .byte	0
10463 24B9                        00            .byte	0
10464 24BA                        00            .byte	0
10465                                           ! 1391  0x00
10466                                           ! 1391 , 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10467 24BB                        00            .byte	0
10468 24BC                        00            .byte	0
10469 24BD                        00            .byte	0
10470 24BE                        7C            .byte	$7C
10471 24BF                        C6            .byte	$C6
10472 24C0                        C6            .byte	$C6
10473 24C1                        C6            .byte	$C6
10474 24C2                        C6            .byte	$C6
10475 24C3                        C6            .byte	$C6
10476 24C4                        C6            .byte	$C6
10477 24C5                        C6            .byte	$C6
10478 24C6                        00            .byte	0
10479 24C7                        00            .byte	0
10480 24C8                        00            .byte	0
10481                                           ! 1392  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10482 24C9                        00            .byte	0
10483 24CA                        00            .byte	0
10484 24CB                        00            .byte	0
10485 24CC                        FE            .byte	$FE
10486 24CD                        00            .byte	0
10487 24CE                        00            .byte	0
10488 24CF                        FE            .byte	$FE
10489 24D0                        00            .byte	0
10490 24D1                        00            .byte	0
10491 24D2                        FE            .byte	$FE
10492 24D3                        00            .byte	0
10493 24D4                        00            .byte	0
10494 24D5                        00            .byte	0
10495 24D6                        00            .byte	0
10496                                           ! 1393  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10497 24D7                        00            .byte	0
10498 24D8                        00            .byte	0
10499 24D9                        00            .byte	0
10500 24DA                        18            .byte	$18
10501 24DB                        18            .byte	$18
10502 24DC                        7E            .byte	$7E
10503 24DD                        18            .byte	$18
10504 24DE                        18            .byte	$18
10505 24DF                        00            .byte	0
10506 24E0                        00            .byte	0
10507 24E1                        FF            .byte	$FF
10508 24E2                        00            .byte	0
10509 24E3                        00            .byte	0
10510 24E4                        00            .byte	0
10511                                           ! 1394  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10512 24E5                        00            .byte	0
10513 24E6                        00            .byte	0
10514 24E7                        30            .byte	$30
10515 24E8                        18            .byte	$18
10516 24E9                        0C            .byte	$C
10517 24EA                        06            .byte	6
10518 24EB                        0C            .byte	$C
10519 24EC                        18            .byte	$18
10520 24ED                        30            .byte	$30
10521 24EE                        00            .byte	0
10522 24EF                        7E            .byte	$7E
10523 24F0                        00            .byte	0
10524 24F1                        00            .byte	0
10525 24F2                        00            .byte	0
10526                                           ! 1395  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10527 24F3                        00            .byte	0
10528 24F4                        00            .byte	0
10529 24F5                        0C            .byte	$C
10530 24F6                        18            .byte	$18
10531 24F7                        30            .byte	$30
10532 24F8                        60            .byte	$60
10533 24F9                        30            .byte	$30
10534 24FA                        18            .byte	$18
10535 24FB                        0C            .byte	$C
10536 24FC                        00            .byte	0
10537 24FD                        7E            .byte	$7E
10538 24FE                        00            .byte	0
10539 24FF                        00            .byte	0
10540 2500                        00            .byte	0
10541                                           ! 1396  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10542 2501                        00            .byte	0
10543 2502                        00            .byte	0
10544 2503                        0E            .byte	$E
10545 2504                        1B            .byte	$1B
10546 2505                        1B            .byte	$1B
10547 2506                        18            .byte	$18
10548 2507                        18            .byte	$18
10549 2508                        18            .byte	$18
10550 2509                        18            .byte	$18
10551 250A                        18            .byte	$18
10552 250B                        18            .byte	$18
10553 250C                        18            .byte	$18
10554 250D                        18            .byte	$18
10555 250E                        18            .byte	$18
10556                                           ! 1397  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10557 250F                        18            .byte	$18
10558 2510                        18            .byte	$18
10559 2511                        18            .byte	$18
10560 2512                        18            .byte	$18
10561 2513                        18            .byte	$18
10562 2514                        18            .byte	$18
10563 2515                        18            .byte	$18
10564 2516                        18            .byte	$18
10565 2517                        D8            .byte	$D8
10566 2518                        D8            .byte	$D8
10567 2519                        70            .byte	$70
10568 251A                        00            .byte	0
10569 251B                        00            .byte	0
10570 251C                        00            .byte	0
10571                                           ! 1398  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10572 251D                        00            .byte	0
10573 251E                        00            .byte	0
10574 251F                        00            .byte	0
10575 2520                        18            .byte	$18
10576 2521                        18            .byte	$18
10577 2522                        00            .byte	0
10578 2523                        7E            .byte	$7E
10579 2524                        00            .byte	0
10580 2525                        18            .byte	$18
10581 2526                        18            .byte	$18
10582 2527                        00            .byte	0
10583 2528                        00            .byte	0
10584 2529                        00            .byte	0
10585 252A                        00            .byte	0
10586                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10587 252B                        00            .byte	0
10588 252C                        00            .byte	0
10589 252D                        00            .byte	0
10590 252E                        00            .byte	0
10591 252F                        76            .byte	$76
10592 2530                        DC            .byte	$DC
10593 2531                        00            .byte	0
10594 2532                        76            .byte	$76
10595 2533                        DC            .byte	$DC
10596 2534                        00            .byte	0
10597 2535                        00            .byte	0
10598 2536                        00            .byte	0
10599 2537                        00            .byte	0
10600 2538                        00            .byte	0
10601                                           ! 1400  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10602 2539                        00            .byte	0
10603 253A                        38            .byte	$38
10604 253B                        6C            .byte	$6C
10605 253C                        6C            .byte	$6C
10606 253D                        38            .byte	$38
10607 253E                        00            .byte	0
10608 253F                        00            .byte	0
10609 2540                        00            .byte	0
10610 2541                        00            .byte	0
10611 2542                        00            .byte	0
10612 2543                        00            .byte	0
10613 2544                        00            .byte	0
10614 2545                        00            .byte	0
10615 2546                        00            .byte	0
10616                                           ! 1401  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10617 2547                        00            .byte	0
10618 2548                        00            .byte	0
10619 2549                        00            .byte	0
10620 254A                        00            .byte	0
10621 254B                        00            .byte	0
10622 254C                        00            .byte	0
10623 254D                        18            .byte	$18
10624 254E                        18            .byte	$18
10625 254F                        00            .byte	0
10626 2550                        00            .byte	0
10627 2551                        00            .byte	0
10628 2552                        00            .byte	0
10629 2553                        00            .byte	0
10630 2554                        00            .byte	0
10631                                           ! 1402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10632 2555                        00            .byte	0
10633 2556                        00            .byte	0
10634 2557                        00            .byte	0
10635 2558                        00            .byte	0
10636 2559                        00            .byte	0
10637 255A                        00            .byte	0
10638 255B                        00            .byte	0
10639 255C                        18            .byte	$18
10640 255D                        00            .byte	0
10641 255E                        00            .byte	0
10642 255F                        00            .byte	0
10643 2560                        00            .byte	0
10644 2561                        00            .byte	0
10645 2562                        00            .byte	0
10646                                           ! 1403  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10647 2563                        00            .byte	0
10648 2564                        0F            .byte	$F
10649 2565                        0C            .byte	$C
10650 2566                        0C            .byte	$C
10651 2567                        0C            .byte	$C
10652 2568                        0C            .byte	$C
10653 2569                        0C            .byte	$C
10654 256A                        EC            .byte	$EC
10655 256B                        6C            .byte	$6C
10656 256C                        3C            .byte	$3C
10657 256D                        1C            .byte	$1C
10658 256E                        00            .byte	0
10659 256F                        00            .byte	0
10660 2570                        00            .byte	0
10661                                           ! 1404  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10662 2571                        00            .byte	0
10663 2572                        D8            .byte	$D8
10664 2573                        6C            .byte	$6C
10665 2574                        6C            .byte	$6C
10666 2575                        6C            .byte	$6C
10667 2576                        6C            .byte	$6C
10668 2577                        6C            .byte	$6C
10669 2578                        00            .byte	0
10670 2579                        00            .byte	0
10671 257A                        00            .byte	0
10672 257B                        00            .byte	0
10673 257C                        00            .byte	0
10674 257D                        00            .byte	0
10675 257E                        00            .byte	0
10676                                           ! 1405  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10677 257F                        00            .byte	0
10678 2580                        70            .byte	$70
10679 2581                        D8            .byte	$D8
10680 2582                        30            .byte	$30
10681 2583                        60            .byte	$60
10682 2584                        C8            .byte	$C8
10683 2585                        F8            .byte	$F8
10684 2586                        00            .byte	0
10685 2587                        00            .byte	0
10686 2588                        00            .byte	0
10687 2589                        00            .byte	0
10688 258A                        00            .byte	0
10689 258B                        00            .byte	0
10690 258C                        00            .byte	0
10691                                           ! 1406  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10692 258D                        00            .byte	0
10693 258E                        00            .byte	0
10694 258F                        00            .byte	0
10695 2590                        00            .byte	0
10696 2591                        7C            .byte	$7C
10697 2592                        7C            .byte	$7C
10698 2593                        7C            .byte	$7C
10699 2594                        7C            .byte	$7C
10700 2595                        7C            .byte	$7C
10701 2596                        7C            .byte	$7C
10702 2597                        00            .byte	0
10703 2598                        00            .byte	0
10704 2599                        00            .byte	0
10705 259A                        00            .byte	0
10706                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10707 259B                        00            .byte	0
10708 259C                        00            .byte	0
10709 259D                        00            .byte	0
10710 259E                        00            .byte	0
10711 259F                        00            .byte	0
10712 25A0                        00            .byte	0
10713 25A1                        00            .byte	0
10714 25A2                        00            .byte	0
10715 25A3                        00            .byte	0
10716 25A4                        00            .byte	0
10717 25A5                        00            .byte	0
10718 25A6                        00            .byte	0
10719 25A7                        00            .byte	0
10720                                           ! 1408 };
10721 25A8                        00            .byte	0
10722                                           !BCC_EOS
10723                                           ! 1409 static Bit8u vgafont16[256*16]=
10724                                           ! 1410 {
10725                       000025A9            _vgafont16:
10726                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10727 25A9                        00            .byte	0
10728 25AA                        00            .byte	0
10729 25AB                        00            .byte	0
10730 25AC                        00            .byte	0
10731 25AD                        00            .byte	0
10732 25AE                        00            .byte	0
10733 25AF                        00            .byte	0
10734 25B0                        00            .byte	0
10735 25B1                        00            .byte	0
10736 25B2                        00            .byte	0
10737 25B3                        00            .byte	0
10738 25B4                        00            .byte	0
10739 25B5                        00            .byte	0
10740 25B6                        00            .byte	0
10741 25B7                        00            .byte	0
10742 25B8                        00            .byte	0
10743                                           ! 1412  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10744 25B9                        00            .byte	0
10745 25BA                        00            .byte	0
10746 25BB                        7E            .byte	$7E
10747 25BC                        81            .byte	$81
10748 25BD                        A5            .byte	$A5
10749 25BE                        81            .byte	$81
10750 25BF                        81            .byte	$81
10751 25C0                        BD            .byte	$BD
10752 25C1                        99            .byte	$99
10753 25C2                        81            .byte	$81
10754 25C3                        81            .byte	$81
10755 25C4                        7E            .byte	$7E
10756 25C5                        00            .byte	0
10757 25C6                        00            .byte	0
10758 25C7                        00            .byte	0
10759 25C8                        00            .byte	0
10760                                           ! 1413  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10761 25C9                        00            .byte	0
10762 25CA                        00            .byte	0
10763 25CB                        7E            .byte	$7E
10764 25CC                        FF            .byte	$FF
10765 25CD                        DB            .byte	$DB
10766 25CE                        FF            .byte	$FF
10767 25CF                        FF            .byte	$FF
10768 25D0                        C3            .byte	$C3
10769 25D1                        E7            .byte	$E7
10770 25D2                        FF            .byte	$FF
10771 25D3                        FF            .byte	$FF
10772 25D4                        7E            .byte	$7E
10773 25D5                        00            .byte	0
10774 25D6                        00            .byte	0
10775 25D7                        00            .byte	0
10776 25D8                        00            .byte	0
10777                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10778 25D9                        00            .byte	0
10779 25DA                        00            .byte	0
10780 25DB                        00            .byte	0
10781 25DC                        00            .byte	0
10782 25DD                        6C            .byte	$6C
10783 25DE                        FE            .byte	$FE
10784 25DF                        FE            .byte	$FE
10785 25E0                        FE            .byte	$FE
10786 25E1                        FE            .byte	$FE
10787 25E2                        7C            .byte	$7C
10788 25E3                        38            .byte	$38
10789 25E4                        10            .byte	$10
10790 25E5                        00            .byte	0
10791 25E6                        00            .byte	0
10792 25E7                        00            .byte	0
10793 25E8                        00            .byte	0
10794                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10795 25E9                        00            .byte	0
10796 25EA                        00            .byte	0
10797 25EB                        00            .byte	0
10798 25EC                        00            .byte	0
10799 25ED                        10            .byte	$10
10800 25EE                        38            .byte	$38
10801 25EF                        7C            .byte	$7C
10802 25F0                        FE            .byte	$FE
10803 25F1                        7C            .byte	$7C
10804 25F2                        38            .byte	$38
10805 25F3                        10            .byte	$10
10806 25F4                        00            .byte	0
10807 25F5                        00            .byte	0
10808 25F6                        00            .byte	0
10809 25F7                        00            .byte	0
10810 25F8                        00            .byte	0
10811                                           ! 1416  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x
10812 25F9                        00            .byte	0
10813 25FA                        00            .byte	0
10814 25FB                        00            .byte	0
10815 25FC                        18            .byte	$18
10816 25FD                        3C            .byte	$3C
10817 25FE                        3C            .byte	$3C
10818 25FF                        E7            .byte	$E7
10819 2600                        E7            .byte	$E7
10820 2601                        E7            .byte	$E7
10821 2602                        18            .byte	$18
10822 2603                        18            .byte	$18
10823 2604                        3C            .byte	$3C
10824 2605                        00            .byte	0
10825 2606                        00            .byte	0
10826                                           ! 1416 00, 0x00,
10827 2607                        00            .byte	0
10828 2608                        00            .byte	0
10829                                           ! 1417  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10830 2609                        00            .byte	0
10831 260A                        00            .byte	0
10832 260B                        00            .byte	0
10833 260C                        18            .byte	$18
10834 260D                        3C            .byte	$3C
10835 260E                        7E            .byte	$7E
10836 260F                        FF            .byte	$FF
10837 2610                        FF            .byte	$FF
10838 2611                        7E            .byte	$7E
10839 2612                        18            .byte	$18
10840 2613                        18            .byte	$18
10841 2614                        3C            .byte	$3C
10842 2615                        00            .byte	0
10843 2616                        00            .byte	0
10844 2617                        00            .byte	0
10845 2618                        00            .byte	0
10846                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10847 2619                        00            .byte	0
10848 261A                        00            .byte	0
10849 261B                        00            .byte	0
10850 261C                        00            .byte	0
10851 261D                        00            .byte	0
10852 261E                        00            .byte	0
10853 261F                        18            .byte	$18
10854 2620                        3C            .byte	$3C
10855 2621                        3C            .byte	$3C
10856 2622                        18            .byte	$18
10857 2623                        00            .byte	0
10858 2624                        00            .byte	0
10859 2625                        00            .byte	0
10860 2626                        00            .byte	0
10861 2627                        00            .byte	0
10862 2628                        00            .byte	0
10863                                           ! 1419  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10864 2629                        FF            .byte	$FF
10865 262A                        FF            .byte	$FF
10866 262B                        FF            .byte	$FF
10867 262C                        FF            .byte	$FF
10868 262D                        FF            .byte	$FF
10869 262E                        FF            .byte	$FF
10870 262F                        E7            .byte	$E7
10871 2630                        C3            .byte	$C3
10872 2631                        C3            .byte	$C3
10873 2632                        E7            .byte	$E7
10874 2633                        FF            .byte	$FF
10875 2634                        FF            .byte	$FF
10876 2635                        FF            .byte	$FF
10877 2636                        FF            .byte	$FF
10878 2637                        FF            .byte	$FF
10879 2638                        FF            .byte	$FF
10880                                           ! 1420  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10881 2639                        00            .byte	0
10882 263A                        00            .byte	0
10883 263B                        00            .byte	0
10884 263C                        00            .byte	0
10885 263D                        00            .byte	0
10886 263E                        3C            .byte	$3C
10887 263F                        66            .byte	$66
10888 2640                        42            .byte	$42
10889 2641                        42            .byte	$42
10890 2642                        66            .byte	$66
10891 2643                        3C            .byte	$3C
10892 2644                        00            .byte	0
10893 2645                        00            .byte	0
10894 2646                        00            .byte	0
10895 2647                        00            .byte	0
10896 2648                        00            .byte	0
10897                                           ! 1421  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10898 2649                        FF            .byte	$FF
10899 264A                        FF            .byte	$FF
10900 264B                        FF            .byte	$FF
10901 264C                        FF            .byte	$FF
10902 264D                        FF            .byte	$FF
10903 264E                        C3            .byte	$C3
10904 264F                        99            .byte	$99
10905 2650                        BD            .byte	$BD
10906 2651                        BD            .byte	$BD
10907 2652                        99            .byte	$99
10908 2653                        C3            .byte	$C3
10909 2654                        FF            .byte	$FF
10910 2655                        FF            .byte	$FF
10911 2656                        FF            .byte	$FF
10912 2657                        FF            .byte	$FF
10913 2658                        FF            .byte	$FF
10914                                           ! 1422  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10915 2659                        00            .byte	0
10916 265A                        00            .byte	0
10917 265B                        1E            .byte	$1E
10918 265C                        0E            .byte	$E
10919 265D                        1A            .byte	$1A
10920 265E                        32            .byte	$32
10921 265F                        78            .byte	$78
10922 2660                        CC            .byte	$CC
10923 2661                        CC            .byte	$CC
10924 2662                        CC            .byte	$CC
10925 2663                        CC            .byte	$CC
10926 2664                        78            .byte	$78
10927 2665                        00            .byte	0
10928 2666                        00            .byte	0
10929 2667                        00            .byte	0
10930 2668                        00            .byte	0
10931                                           ! 1423  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10932 2669                        00            .byte	0
10933 266A                        00            .byte	0
10934 266B                        3C            .byte	$3C
10935 266C                        66            .byte	$66
10936 266D                        66            .byte	$66
10937 266E                        66            .byte	$66
10938 266F                        66            .byte	$66
10939 2670                        3C            .byte	$3C
10940 2671                        18            .byte	$18
10941 2672                        7E            .byte	$7E
10942 2673                        18            .byte	$18
10943 2674                        18            .byte	$18
10944 2675                        00            .byte	0
10945 2676                        00            .byte	0
10946 2677                        00            .byte	0
10947 2678                        00            .byte	0
10948                                           ! 1424  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10949 2679                        00            .byte	0
10950 267A                        00            .byte	0
10951 267B                        3F            .byte	$3F
10952 267C                        33            .byte	$33
10953 267D                        3F            .byte	$3F
10954 267E                        30            .byte	$30
10955 267F                        30            .byte	$30
10956 2680                        30            .byte	$30
10957 2681                        30            .byte	$30
10958 2682                        70            .byte	$70
10959 2683                        F0            .byte	$F0
10960 2684                        E0            .byte	$E0
10961 2685                        00            .byte	0
10962 2686                        00            .byte	0
10963 2687                        00            .byte	0
10964 2688                        00            .byte	0
10965                                           ! 1425  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10966 2689                        00            .byte	0
10967 268A                        00            .byte	0
10968 268B                        7F            .byte	$7F
10969 268C                        63            .byte	$63
10970 268D                        7F            .byte	$7F
10971 268E                        63            .byte	$63
10972 268F                        63            .byte	$63
10973 2690                        63            .byte	$63
10974 2691                        63            .byte	$63
10975 2692                        67            .byte	$67
10976 2693                        E7            .byte	$E7
10977 2694                        E6            .byte	$E6
10978 2695                        C0            .byte	$C0
10979 2696                        00            .byte	0
10980 2697                        00            .byte	0
10981 2698                        00            .byte	0
10982                                           ! 1426  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10983 2699                        00            .byte	0
10984 269A                        00            .byte	0
10985 269B                        00            .byte	0
10986 269C                        18            .byte	$18
10987 269D                        18            .byte	$18
10988 269E                        DB            .byte	$DB
10989 269F                        3C            .byte	$3C
10990 26A0                        E7            .byte	$E7
10991 26A1                        3C            .byte	$3C
10992 26A2                        DB            .byte	$DB
10993 26A3                        18            .byte	$18
10994 26A4                        18            .byte	$18
10995 26A5                        00            .byte	0
10996 26A6                        00            .byte	0
10997 26A7                        00            .byte	0
10998 26A8                        00            .byte	0
10999                                           ! 1427  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11000 26A9                        00            .byte	0
11001 26AA                        80            .byte	$80
11002 26AB                        C0            .byte	$C0
11003 26AC                        E0            .byte	$E0
11004 26AD                        F0            .byte	$F0
11005 26AE                        F8            .byte	$F8
11006 26AF                        FE            .byte	$FE
11007 26B0                        F8            .byte	$F8
11008 26B1                        F0            .byte	$F0
11009 26B2                        E0            .byte	$E0
11010 26B3                        C0            .byte	$C0
11011 26B4                        80            .byte	$80
11012 26B5                        00            .byte	0
11013 26B6                        00            .byte	0
11014 26B7                        00            .byte	0
11015 26B8                        00            .byte	0
11016                                           ! 1428  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11017 26B9                        00            .byte	0
11018 26BA                        02            .byte	2
11019 26BB                        06            .byte	6
11020 26BC                        0E            .byte	$E
11021 26BD                        1E            .byte	$1E
11022 26BE                        3E            .byte	$3E
11023 26BF                        FE            .byte	$FE
11024 26C0                        3E            .byte	$3E
11025 26C1                        1E            .byte	$1E
11026 26C2                        0E            .byte	$E
11027 26C3                        06            .byte	6
11028 26C4                        02            .byte	2
11029 26C5                        00            .byte	0
11030 26C6                        00            .byte	0
11031 26C7                        00            .byte	0
11032 26C8                        00            .byte	0
11033                                           ! 1429  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11034 26C9                        00            .byte	0
11035 26CA                        00            .byte	0
11036 26CB                        18            .byte	$18
11037 26CC                        3C            .byte	$3C
11038 26CD                        7E            .byte	$7E
11039 26CE                        18            .byte	$18
11040 26CF                        18            .byte	$18
11041 26D0                        18            .byte	$18
11042 26D1                        7E            .byte	$7E
11043 26D2                        3C            .byte	$3C
11044 26D3                        18            .byte	$18
11045 26D4                        00            .byte	0
11046 26D5                        00            .byte	0
11047 26D6                        00            .byte	0
11048 26D7                        00            .byte	0
11049 26D8                        00            .byte	0
11050                                           ! 1430  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11051 26D9                        00            .byte	0
11052 26DA                        00            .byte	0
11053 26DB                        66            .byte	$66
11054 26DC                        66            .byte	$66
11055 26DD                        66            .byte	$66
11056 26DE                        66            .byte	$66
11057 26DF                        66            .byte	$66
11058 26E0                        66            .byte	$66
11059 26E1                        66            .byte	$66
11060 26E2                        00            .byte	0
11061 26E3                        66            .byte	$66
11062 26E4                        66            .byte	$66
11063 26E5                        00            .byte	0
11064 26E6                        00            .byte	0
11065 26E7                        00            .byte	0
11066 26E8                        00            .byte	0
11067                                           ! 1431  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11068 26E9                        00            .byte	0
11069 26EA                        00            .byte	0
11070 26EB                        7F            .byte	$7F
11071 26EC                        DB            .byte	$DB
11072 26ED                        DB            .byte	$DB
11073 26EE                        DB            .byte	$DB
11074 26EF                        7B            .byte	$7B
11075 26F0                        1B            .byte	$1B
11076 26F1                        1B            .byte	$1B
11077 26F2                        1B            .byte	$1B
11078 26F3                        1B            .byte	$1B
11079 26F4                        1B            .byte	$1B
11080 26F5                        00            .byte	0
11081 26F6                        00            .byte	0
11082 26F7                        00            .byte	0
11083 26F8                        00            .byte	0
11084                                           ! 1432  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11085 26F9                        00            .byte	0
11086 26FA                        7C            .byte	$7C
11087 26FB                        C6            .byte	$C6
11088 26FC                        60            .byte	$60
11089 26FD                        38            .byte	$38
11090 26FE                        6C            .byte	$6C
11091 26FF                        C6            .byte	$C6
11092 2700                        C6            .byte	$C6
11093 2701                        6C            .byte	$6C
11094 2702                        38            .byte	$38
11095 2703                        0C            .byte	$C
11096 2704                        C6            .byte	$C6
11097 2705                        7C            .byte	$7C
11098 2706                        00            .byte	0
11099 2707                        00            .byte	0
11100 2708                        00            .byte	0
11101                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11102 2709                        00            .byte	0
11103 270A                        00            .byte	0
11104 270B                        00            .byte	0
11105 270C                        00            .byte	0
11106 270D                        00            .byte	0
11107 270E                        00            .byte	0
11108 270F                        00            .byte	0
11109 2710                        00            .byte	0
11110 2711                        FE            .byte	$FE
11111 2712                        FE            .byte	$FE
11112 2713                        FE            .byte	$FE
11113 2714                        FE            .byte	$FE
11114 2715                        00            .byte	0
11115 2716                        00            .byte	0
11116 2717                        00            .byte	0
11117 2718                        00            .byte	0
11118                                           ! 1434  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11119 2719                        00            .byte	0
11120 271A                        00            .byte	0
11121 271B                        18            .byte	$18
11122 271C                        3C            .byte	$3C
11123 271D                        7E            .byte	$7E
11124 271E                        18            .byte	$18
11125 271F                        18            .byte	$18
11126 2720                        18            .byte	$18
11127 2721                        7E            .byte	$7E
11128 2722                        3C            .byte	$3C
11129 2723                        18            .byte	$18
11130 2724                        7E            .byte	$7E
11131 2725                        00            .byte	0
11132 2726                        00            .byte	0
11133 2727                        00            .byte	0
11134 2728                        00            .byte	0
11135                                           ! 1435  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11136 2729                        00            .byte	0
11137 272A                        00            .byte	0
11138 272B                        18            .byte	$18
11139 272C                        3C            .byte	$3C
11140 272D                        7E            .byte	$7E
11141 272E                        18            .byte	$18
11142 272F                        18            .byte	$18
11143 2730                        18            .byte	$18
11144 2731                        18            .byte	$18
11145 2732                        18            .byte	$18
11146 2733                        18            .byte	$18
11147 2734                        18            .byte	$18
11148 2735                        00            .byte	0
11149 2736                        00            .byte	0
11150 2737                        00            .byte	0
11151 2738                        00            .byte	0
11152                                           ! 1436  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11153 2739                        00            .byte	0
11154 273A                        00            .byte	0
11155 273B                        18            .byte	$18
11156 273C                        18            .byte	$18
11157 273D                        18            .byte	$18
11158 273E                        18            .byte	$18
11159 273F                        18            .byte	$18
11160 2740                        18            .byte	$18
11161 2741                        18            .byte	$18
11162 2742                        7E            .byte	$7E
11163 2743                        3C            .byte	$3C
11164 2744                        18            .byte	$18
11165 2745                        00            .byte	0
11166 2746                        00            .byte	0
11167 2747                        00            .byte	0
11168 2748                        00            .byte	0
11169                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11170 2749                        00            .byte	0
11171 274A                        00            .byte	0
11172 274B                        00            .byte	0
11173 274C                        00            .byte	0
11174 274D                        00            .byte	0
11175 274E                        18            .byte	$18
11176 274F                        0C            .byte	$C
11177 2750                        FE            .byte	$FE
11178 2751                        0C            .byte	$C
11179 2752                        18            .byte	$18
11180 2753                        00            .byte	0
11181 2754                        00            .byte	0
11182 2755                        00            .byte	0
11183 2756                        00            .byte	0
11184 2757                        00            .byte	0
11185 2758                        00            .byte	0
11186                                           ! 1438  
11187                                           ! 1438 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11188 2759                        00            .byte	0
11189 275A                        00            .byte	0
11190 275B                        00            .byte	0
11191 275C                        00            .byte	0
11192 275D                        00            .byte	0
11193 275E                        30            .byte	$30
11194 275F                        60            .byte	$60
11195 2760                        FE            .byte	$FE
11196 2761                        60            .byte	$60
11197 2762                        30            .byte	$30
11198 2763                        00            .byte	0
11199 2764                        00            .byte	0
11200 2765                        00            .byte	0
11201 2766                        00            .byte	0
11202 2767                        00            .byte	0
11203 2768                        00            .byte	0
11204                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11205 2769                        00            .byte	0
11206 276A                        00            .byte	0
11207 276B                        00            .byte	0
11208 276C                        00            .byte	0
11209 276D                        00            .byte	0
11210 276E                        00            .byte	0
11211 276F                        C0            .byte	$C0
11212 2770                        C0            .byte	$C0
11213 2771                        C0            .byte	$C0
11214 2772                        FE            .byte	$FE
11215 2773                        00            .byte	0
11216 2774                        00            .byte	0
11217 2775                        00            .byte	0
11218 2776                        00            .byte	0
11219 2777                        00            .byte	0
11220 2778                        00            .byte	0
11221                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11222 2779                        00            .byte	0
11223 277A                        00            .byte	0
11224 277B                        00            .byte	0
11225 277C                        00            .byte	0
11226 277D                        00            .byte	0
11227 277E                        24            .byte	$24
11228 277F                        66            .byte	$66
11229 2780                        FF            .byte	$FF
11230 2781                        66            .byte	$66
11231 2782                        24            .byte	$24
11232 2783                        00            .byte	0
11233 2784                        00            .byte	0
11234 2785                        00            .byte	0
11235 2786                        00            .byte	0
11236 2787                        00            .byte	0
11237 2788                        00            .byte	0
11238                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11239 2789                        00            .byte	0
11240 278A                        00            .byte	0
11241 278B                        00            .byte	0
11242 278C                        00            .byte	0
11243 278D                        10            .byte	$10
11244 278E                        38            .byte	$38
11245 278F                        38            .byte	$38
11246 2790                        7C            .byte	$7C
11247 2791                        7C            .byte	$7C
11248 2792                        FE            .byte	$FE
11249 2793                        FE            .byte	$FE
11250 2794                        00            .byte	0
11251 2795                        00            .byte	0
11252 2796                        00            .byte	0
11253 2797                        00            .byte	0
11254 2798                        00            .byte	0
11255                                           ! 1442  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11256 2799                        00            .byte	0
11257 279A                        00            .byte	0
11258 279B                        00            .byte	0
11259 279C                        00            .byte	0
11260 279D                        FE            .byte	$FE
11261 279E                        FE            .byte	$FE
11262 279F                        7C            .byte	$7C
11263 27A0                        7C            .byte	$7C
11264 27A1                        38            .byte	$38
11265 27A2                        38            .byte	$38
11266 27A3                        10            .byte	$10
11267 27A4                        00            .byte	0
11268 27A5                        00            .byte	0
11269 27A6                        00            .byte	0
11270 27A7                        00            .byte	0
11271 27A8                        00            .byte	0
11272                                           ! 1443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11273 27A9                        00            .byte	0
11274 27AA                        00            .byte	0
11275 27AB                        00            .byte	0
11276 27AC                        00            .byte	0
11277 27AD                        00            .byte	0
11278 27AE                        00            .byte	0
11279 27AF                        00            .byte	0
11280 27B0                        00            .byte	0
11281 27B1                        00            .byte	0
11282 27B2                        00            .byte	0
11283 27B3                        00            .byte	0
11284 27B4                        00            .byte	0
11285 27B5                        00            .byte	0
11286 27B6                        00            .byte	0
11287 27B7                        00            .byte	0
11288 27B8                        00            .byte	0
11289                                           ! 1444  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11290 27B9                        00            .byte	0
11291 27BA                        00            .byte	0
11292 27BB                        18            .byte	$18
11293 27BC                        3C            .byte	$3C
11294 27BD                        3C            .byte	$3C
11295 27BE                        3C            .byte	$3C
11296 27BF                        18            .byte	$18
11297 27C0                        18            .byte	$18
11298 27C1                        18            .byte	$18
11299 27C2                        00            .byte	0
11300 27C3                        18            .byte	$18
11301 27C4                        18            .byte	$18
11302 27C5                        00            .byte	0
11303 27C6                        00            .byte	0
11304 27C7                        00            .byte	0
11305 27C8                        00            .byte	0
11306                                           ! 1445  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11307 27C9                        00            .byte	0
11308 27CA                        66            .byte	$66
11309 27CB                        66            .byte	$66
11310 27CC                        66            .byte	$66
11311 27CD                        24            .byte	$24
11312 27CE                        00            .byte	0
11313 27CF                        00            .byte	0
11314 27D0                        00            .byte	0
11315 27D1                        00            .byte	0
11316 27D2                        00            .byte	0
11317 27D3                        00            .byte	0
11318 27D4                        00            .byte	0
11319 27D5                        00            .byte	0
11320 27D6                        00            .byte	0
11321 27D7                        00            .byte	0
11322 27D8                        00            .byte	0
11323                                           ! 1446  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11324 27D9                        00            .byte	0
11325 27DA                        00            .byte	0
11326 27DB                        00            .byte	0
11327 27DC                        6C            .byte	$6C
11328 27DD                        6C            .byte	$6C
11329 27DE                        FE            .byte	$FE
11330 27DF                        6C            .byte	$6C
11331 27E0                        6C            .byte	$6C
11332 27E1                        6C            .byte	$6C
11333 27E2                        FE            .byte	$FE
11334 27E3                        6C            .byte	$6C
11335 27E4                        6C            .byte	$6C
11336 27E5                        00            .byte	0
11337 27E6                        00            .byte	0
11338 27E7                        00            .byte	0
11339 27E8                        00            .byte	0
11340                                           ! 1447  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11341 27E9                        18            .byte	$18
11342 27EA                        18            .byte	$18
11343 27EB                        7C            .byte	$7C
11344 27EC                        C6            .byte	$C6
11345 27ED                        C2            .byte	$C2
11346 27EE                        C0            .byte	$C0
11347 27EF                        7C            .byte	$7C
11348 27F0                        06            .byte	6
11349 27F1                        06            .byte	6
11350 27F2                        86            .byte	$86
11351 27F3                        C6            .byte	$C6
11352 27F4                        7C            .byte	$7C
11353 27F5                        18            .byte	$18
11354 27F6                        18            .byte	$18
11355 27F7                        00            .byte	0
11356 27F8                        00            .byte	0
11357                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11358 27F9                        00            .byte	0
11359 27FA                        00            .byte	0
11360 27FB                        00            .byte	0
11361 27FC                        00            .byte	0
11362 27FD                        C2            .byte	$C2
11363 27FE                        C6            .byte	$C6
11364 27FF                        0C            .byte	$C
11365 2800                        18            .byte	$18
11366 2801                        30            .byte	$30
11367 2802                        60            .byte	$60
11368 2803                        C6            .byte	$C6
11369 2804                        86            .byte	$86
11370 2805                        00            .byte	0
11371 2806                        00            .byte	0
11372 2807                        00            .byte	0
11373 2808                        00            .byte	0
11374                                           ! 1449  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11375 2809                        00            .byte	0
11376 280A                        00            .byte	0
11377 280B                        38            .byte	$38
11378 280C                        6C            .byte	$6C
11379 280D                        6C            .byte	$6C
11380 280E                        38            .byte	$38
11381 280F                        76            .byte	$76
11382 2810                        DC            .byte	$DC
11383 2811                        CC            .byte	$CC
11384 2812                        CC            .byte	$CC
11385 2813                        CC            .byte	$CC
11386 2814                        76            .byte	$76
11387 2815                        00            .byte	0
11388 2816                        00            .byte	0
11389 2817                        00            .byte	0
11390 2818                        00            .byte	0
11391                                           ! 1450  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11392 2819                        00            .byte	0
11393 281A                        30            .byte	$30
11394 281B                        30            .byte	$30
11395 281C                        30            .byte	$30
11396 281D                        60            .byte	$60
11397 281E                        00            .byte	0
11398 281F                        00            .byte	0
11399 2820                        00            .byte	0
11400 2821                        00            .byte	0
11401 2822                        00            .byte	0
11402 2823                        00            .byte	0
11403 2824                        00            .byte	0
11404 2825                        00            .byte	0
11405 2826                        00            .byte	0
11406 2827                        00            .byte	0
11407 2828                        00            .byte	0
11408                                           ! 1451  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11409 2829                        00            .byte	0
11410 282A                        00            .byte	0
11411 282B                        0C            .byte	$C
11412 282C                        18            .byte	$18
11413 282D                        30            .byte	$30
11414 282E                        30            .byte	$30
11415 282F                        30            .byte	$30
11416 2830                        30            .byte	$30
11417 2831                        30            .byte	$30
11418 2832                        30            .byte	$30
11419 2833                        18            .byte	$18
11420 2834                        0C            .byte	$C
11421 2835                        00            .byte	0
11422 2836                        00            .byte	0
11423 2837                        00            .byte	0
11424 2838                        00            .byte	0
11425                                           ! 1452  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11426 2839                        00            .byte	0
11427 283A                        00            .byte	0
11428 283B                        30            .byte	$30
11429 283C                        18            .byte	$18
11430 283D                        0C            .byte	$C
11431 283E                        0C            .byte	$C
11432 283F                        0C            .byte	$C
11433 2840                        0C            .byte	$C
11434 2841                        0C            .byte	$C
11435 2842                        0C            .byte	$C
11436 2843                        18            .byte	$18
11437 2844                        30            .byte	$30
11438 2845                        00            .byte	0
11439 2846                        00            .byte	0
11440 2847                        00            .byte	0
11441 2848                        00            .byte	0
11442                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11443 2849                        00            .byte	0
11444 284A                        00            .byte	0
11445 284B                        00            .byte	0
11446 284C                        00            .byte	0
11447 284D                        00            .byte	0
11448 284E                        66            .byte	$66
11449 284F                        3C            .byte	$3C
11450 2850                        FF            .byte	$FF
11451 2851                        3C            .byte	$3C
11452 2852                        66            .byte	$66
11453 2853                        00            .byte	0
11454 2854                        00            .byte	0
11455 2855                        00            .byte	0
11456 2856                        00            .byte	0
11457 2857                        00            .byte	0
11458 2858                        00            .byte	0
11459                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11460 2859                        00            .byte	0
11461 285A                        00            .byte	0
11462 285B                        00            .byte	0
11463 285C                        00            .byte	0
11464 285D                        00            .byte	0
11465 285E                        18            .byte	$18
11466 285F                        18            .byte	$18
11467 2860                        7E            .byte	$7E
11468 2861                        18            .byte	$18
11469 2862                        18            .byte	$18
11470 2863                        00            .byte	0
11471 2864                        00            .byte	0
11472 2865                        00            .byte	0
11473 2866                        00            .byte	0
11474 2867                        00            .byte	0
11475 2868                        00            .byte	0
11476                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11477 2869                        00            .byte	0
11478 286A                        00            .byte	0
11479 286B                        00            .byte	0
11480 286C                        00            .byte	0
11481 286D                        00            .byte	0
11482 286E                        00            .byte	0
11483 286F                        00            .byte	0
11484 2870                        00            .byte	0
11485 2871                        00            .byte	0
11486 2872                        18            .byte	$18
11487 2873                        18            .byte	$18
11488 2874                        18            .byte	$18
11489 2875                        30            .byte	$30
11490 2876                        00            .byte	0
11491 2877                        00            .byte	0
11492 2878                        00            .byte	0
11493                                           ! 1456  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11494 2879                        00            .byte	0
11495 287A                        00            .byte	0
11496 287B                        00            .byte	0
11497 287C                        00            .byte	0
11498 287D                        00            .byte	0
11499 287E                        00            .byte	0
11500 287F                        00            .byte	0
11501 2880                        FE            .byte	$FE
11502 2881                        00            .byte	0
11503 2882                        00            .byte	0
11504 2883                        00            .byte	0
11505 2884                        00            .byte	0
11506 2885                        00            .byte	0
11507 2886                        00            .byte	0
11508 2887                        00            .byte	0
11509 2888                        00            .byte	0
11510                                           ! 1457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11511 2889                        00            .byte	0
11512 288A                        00            .byte	0
11513 288B                        00            .byte	0
11514 288C                        00            .byte	0
11515 288D                        00            .byte	0
11516 288E                        00            .byte	0
11517 288F                        00            .byte	0
11518 2890                        00            .byte	0
11519 2891                        00            .byte	0
11520 2892                        00            .byte	0
11521 2893                        18            .byte	$18
11522 2894                        18            .byte	$18
11523 2895                        00            .byte	0
11524 2896                        00            .byte	0
11525 2897                        00            .byte	0
11526 2898                        00            .byte	0
11527                                           ! 1458  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11528 2899                        00            .byte	0
11529 289A                        00            .byte	0
11530 289B                        00            .byte	0
11531 289C                        00            .byte	0
11532 289D                        02            .byte	2
11533 289E                        06            .byte	6
11534 289F                        0C            .byte	$C
11535 28A0                        18            .byte	$18
11536 28A1                        30            .byte	$30
11537 28A2                        60            .byte	$60
11538 28A3                        C0            .byte	$C0
11539 28A4                        80            .byte	$80
11540 28A5                        00            .byte	0
11541 28A6                        00            .byte	0
11542 28A7                        00            .byte	0
11543 28A8                        00            .byte	0
11544                                           ! 1459  0x00, 0x00,
11545 28A9                        00            .byte	0
11546                                           ! 1459  0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11547 28AA                        00            .byte	0
11548 28AB                        3C            .byte	$3C
11549 28AC                        66            .byte	$66
11550 28AD                        C3            .byte	$C3
11551 28AE                        C3            .byte	$C3
11552 28AF                        DB            .byte	$DB
11553 28B0                        DB            .byte	$DB
11554 28B1                        C3            .byte	$C3
11555 28B2                        C3            .byte	$C3
11556 28B3                        66            .byte	$66
11557 28B4                        3C            .byte	$3C
11558 28B5                        00            .byte	0
11559 28B6                        00            .byte	0
11560 28B7                        00            .byte	0
11561 28B8                        00            .byte	0
11562                                           ! 1460  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11563 28B9                        00            .byte	0
11564 28BA                        00            .byte	0
11565 28BB                        18            .byte	$18
11566 28BC                        38            .byte	$38
11567 28BD                        78            .byte	$78
11568 28BE                        18            .byte	$18
11569 28BF                        18            .byte	$18
11570 28C0                        18            .byte	$18
11571 28C1                        18            .byte	$18
11572 28C2                        18            .byte	$18
11573 28C3                        18            .byte	$18
11574 28C4                        7E            .byte	$7E
11575 28C5                        00            .byte	0
11576 28C6                        00            .byte	0
11577 28C7                        00            .byte	0
11578 28C8                        00            .byte	0
11579                                           ! 1461  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11580 28C9                        00            .byte	0
11581 28CA                        00            .byte	0
11582 28CB                        7C            .byte	$7C
11583 28CC                        C6            .byte	$C6
11584 28CD                        06            .byte	6
11585 28CE                        0C            .byte	$C
11586 28CF                        18            .byte	$18
11587 28D0                        30            .byte	$30
11588 28D1                        60            .byte	$60
11589 28D2                        C0            .byte	$C0
11590 28D3                        C6            .byte	$C6
11591 28D4                        FE            .byte	$FE
11592 28D5                        00            .byte	0
11593 28D6                        00            .byte	0
11594 28D7                        00            .byte	0
11595 28D8                        00            .byte	0
11596                                           ! 1462  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11597 28D9                        00            .byte	0
11598 28DA                        00            .byte	0
11599 28DB                        7C            .byte	$7C
11600 28DC                        C6            .byte	$C6
11601 28DD                        06            .byte	6
11602 28DE                        06            .byte	6
11603 28DF                        3C            .byte	$3C
11604 28E0                        06            .byte	6
11605 28E1                        06            .byte	6
11606 28E2                        06            .byte	6
11607 28E3                        C6            .byte	$C6
11608 28E4                        7C            .byte	$7C
11609 28E5                        00            .byte	0
11610 28E6                        00            .byte	0
11611 28E7                        00            .byte	0
11612 28E8                        00            .byte	0
11613                                           ! 1463  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11614 28E9                        00            .byte	0
11615 28EA                        00            .byte	0
11616 28EB                        0C            .byte	$C
11617 28EC                        1C            .byte	$1C
11618 28ED                        3C            .byte	$3C
11619 28EE                        6C            .byte	$6C
11620 28EF                        CC            .byte	$CC
11621 28F0                        FE            .byte	$FE
11622 28F1                        0C            .byte	$C
11623 28F2                        0C            .byte	$C
11624 28F3                        0C            .byte	$C
11625 28F4                        1E            .byte	$1E
11626 28F5                        00            .byte	0
11627 28F6                        00            .byte	0
11628 28F7                        00            .byte	0
11629 28F8                        00            .byte	0
11630                                           ! 1464  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11631 28F9                        00            .byte	0
11632 28FA                        00            .byte	0
11633 28FB                        FE            .byte	$FE
11634 28FC                        C0            .byte	$C0
11635 28FD                        C0            .byte	$C0
11636 28FE                        C0            .byte	$C0
11637 28FF                        FC            .byte	$FC
11638 2900                        06            .byte	6
11639 2901                        06            .byte	6
11640 2902                        06            .byte	6
11641 2903                        C6            .byte	$C6
11642 2904                        7C            .byte	$7C
11643 2905                        00            .byte	0
11644 2906                        00            .byte	0
11645 2907                        00            .byte	0
11646 2908                        00            .byte	0
11647                                           ! 1465  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11648 2909                        00            .byte	0
11649 290A                        00            .byte	0
11650 290B                        38            .byte	$38
11651 290C                        60            .byte	$60
11652 290D                        C0            .byte	$C0
11653 290E                        C0            .byte	$C0
11654 290F                        FC            .byte	$FC
11655 2910                        C6            .byte	$C6
11656 2911                        C6            .byte	$C6
11657 2912                        C6            .byte	$C6
11658 2913                        C6            .byte	$C6
11659 2914                        7C            .byte	$7C
11660 2915                        00            .byte	0
11661 2916                        00            .byte	0
11662 2917                        00            .byte	0
11663 2918                        00            .byte	0
11664                                           ! 1466  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11665 2919                        00            .byte	0
11666 291A                        00            .byte	0
11667 291B                        FE            .byte	$FE
11668 291C                        C6            .byte	$C6
11669 291D                        06            .byte	6
11670 291E                        06            .byte	6
11671 291F                        0C            .byte	$C
11672 2920                        18            .byte	$18
11673 2921                        30            .byte	$30
11674 2922                        30            .byte	$30
11675 2923                        30            .byte	$30
11676 2924                        30            .byte	$30
11677 2925                        00            .byte	0
11678 2926                        00            .byte	0
11679 2927                        00            .byte	0
11680 2928                        00            .byte	0
11681                                           ! 1467  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11682 2929                        00            .byte	0
11683 292A                        00            .byte	0
11684 292B                        7C            .byte	$7C
11685 292C                        C6            .byte	$C6
11686 292D                        C6            .byte	$C6
11687 292E                        C6            .byte	$C6
11688 292F                        7C            .byte	$7C
11689 2930                        C6            .byte	$C6
11690 2931                        C6            .byte	$C6
11691 2932                        C6            .byte	$C6
11692 2933                        C6            .byte	$C6
11693 2934                        7C            .byte	$7C
11694 2935                        00            .byte	0
11695 2936                        00            .byte	0
11696 2937                        00            .byte	0
11697 2938                        00            .byte	0
11698                                           ! 1468  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11699 2939                        00            .byte	0
11700 293A                        00            .byte	0
11701 293B                        7C            .byte	$7C
11702 293C                        C6            .byte	$C6
11703 293D                        C6            .byte	$C6
11704 293E                        C6            .byte	$C6
11705 293F                        7E            .byte	$7E
11706 2940                        06            .byte	6
11707 2941                        06            .byte	6
11708 2942                        06            .byte	6
11709 2943                        0C            .byte	$C
11710 2944                        78            .byte	$78
11711 2945                        00            .byte	0
11712 2946                        00            .byte	0
11713 2947                        00            .byte	0
11714 2948                        00            .byte	0
11715                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11716 2949                        00            .byte	0
11717 294A                        00            .byte	0
11718 294B                        00            .byte	0
11719 294C                        00            .byte	0
11720 294D                        18            .byte	$18
11721 294E                        18            .byte	$18
11722 294F                        00            .byte	0
11723 2950                        00            .byte	0
11724 2951                        00            .byte	0
11725 2952                        18            .byte	$18
11726 2953                        18            .byte	$18
11727 2954                        00            .byte	0
11728 2955                        00            .byte	0
11729 2956                        00            .byte	0
11730 2957                        00            .byte	0
11731 2958                        00            .byte	0
11732                                           ! 1470  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11733 2959                        00            .byte	0
11734 295A                        00            .byte	0
11735 295B                        00            .byte	0
11736 295C                        00            .byte	0
11737 295D                        18            .byte	$18
11738 295E                        18            .byte	$18
11739 295F                        00            .byte	0
11740 2960                        00            .byte	0
11741 2961                        00            .byte	0
11742 2962                        18            .byte	$18
11743 2963                        18            .byte	$18
11744 2964                        30            .byte	$30
11745 2965                        00            .byte	0
11746 2966                        00            .byte	0
11747 2967                        00            .byte	0
11748 2968                        00            .byte	0
11749                                           ! 1471  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11750 2969                        00            .byte	0
11751 296A                        00            .byte	0
11752 296B                        00            .byte	0
11753 296C                        06            .byte	6
11754 296D                        0C            .byte	$C
11755 296E                        18            .byte	$18
11756 296F                        30            .byte	$30
11757 2970                        60            .byte	$60
11758 2971                        30            .byte	$30
11759 2972                        18            .byte	$18
11760 2973                        0C            .byte	$C
11761 2974                        06            .byte	6
11762 2975                        00            .byte	0
11763 2976                        00            .byte	0
11764 2977                        00            .byte	0
11765 2978                        00            .byte	0
11766                                           ! 1472  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11767 2979                        00            .byte	0
11768 297A                        00            .byte	0
11769 297B                        00            .byte	0
11770 297C                        00            .byte	0
11771 297D                        00            .byte	0
11772 297E                        7E            .byte	$7E
11773 297F                        00            .byte	0
11774 2980                        00            .byte	0
11775 2981                        7E            .byte	$7E
11776 2982                        00            .byte	0
11777 2983                        00            .byte	0
11778 2984                        00            .byte	0
11779 2985                        00            .byte	0
11780 2986                        00            .byte	0
11781 2987                        00            .byte	0
11782 2988                        00            .byte	0
11783                                           ! 1473  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11784 2989                        00            .byte	0
11785 298A                        00            .byte	0
11786 298B                        00            .byte	0
11787 298C                        60            .byte	$60
11788 298D                        30            .byte	$30
11789 298E                        18            .byte	$18
11790 298F                        0C            .byte	$C
11791 2990                        06            .byte	6
11792 2991                        0C            .byte	$C
11793 2992                        18            .byte	$18
11794 2993                        30            .byte	$30
11795 2994                        60            .byte	$60
11796 2995                        00            .byte	0
11797 2996                        00            .byte	0
11798 2997                        00            .byte	0
11799 2998                        00            .byte	0
11800                                           ! 1474  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11801 2999                        00            .byte	0
11802 299A                        00            .byte	0
11803 299B                        7C            .byte	$7C
11804 299C                        C6            .byte	$C6
11805 299D                        C6            .byte	$C6
11806 299E                        0C            .byte	$C
11807 299F                        18            .byte	$18
11808 29A0                        18            .byte	$18
11809 29A1                        18            .byte	$18
11810 29A2                        00            .byte	0
11811 29A3                        18            .byte	$18
11812 29A4                        18            .byte	$18
11813 29A5                        00            .byte	0
11814 29A6                        00            .byte	0
11815 29A7                        00            .byte	0
11816 29A8                        00            .byte	0
11817                                           ! 1475  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11818 29A9                        00            .byte	0
11819 29AA                        00            .byte	0
11820 29AB                        00            .byte	0
11821 29AC                        7C            .byte	$7C
11822 29AD                        C6            .byte	$C6
11823 29AE                        C6            .byte	$C6
11824 29AF                        DE            .byte	$DE
11825 29B0                        DE            .byte	$DE
11826 29B1                        DE            .byte	$DE
11827 29B2                        DC            .byte	$DC
11828 29B3                        C0            .byte	$C0
11829 29B4                        7C            .byte	$7C
11830 29B5                        00            .byte	0
11831 29B6                        00            .byte	0
11832 29B7                        00            .byte	0
11833 29B8                        00            .byte	0
11834                                           ! 1476  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11835 29B9                        00            .byte	0
11836 29BA                        00            .byte	0
11837 29BB                        10            .byte	$10
11838 29BC                        38            .byte	$38
11839 29BD                        6C            .byte	$6C
11840 29BE                        C6            .byte	$C6
11841 29BF                        C6            .byte	$C6
11842 29C0                        FE            .byte	$FE
11843 29C1                        C6            .byte	$C6
11844 29C2                        C6            .byte	$C6
11845 29C3                        C6            .byte	$C6
11846 29C4                        C6            .byte	$C6
11847 29C5                        00            .byte	0
11848 29C6                        00            .byte	0
11849 29C7                        00            .byte	0
11850 29C8                        00            .byte	0
11851                                           ! 1477  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11852 29C9                        00            .byte	0
11853 29CA                        00            .byte	0
11854 29CB                        FC            .byte	$FC
11855 29CC                        66            .byte	$66
11856 29CD                        66            .byte	$66
11857 29CE                        66            .byte	$66
11858 29CF                        7C            .byte	$7C
11859 29D0                        66            .byte	$66
11860 29D1                        66            .byte	$66
11861 29D2                        66            .byte	$66
11862 29D3                        66            .byte	$66
11863 29D4                        FC            .byte	$FC
11864 29D5                        00            .byte	0
11865 29D6                        00            .byte	0
11866 29D7                        00            .byte	0
11867 29D8                        00            .byte	0
11868                                           ! 1478  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11869 29D9                        00            .byte	0
11870 29DA                        00            .byte	0
11871 29DB                        3C            .byte	$3C
11872 29DC                        66            .byte	$66
11873 29DD                        C2            .byte	$C2
11874 29DE                        C0            .byte	$C0
11875 29DF                        C0            .byte	$C0
11876 29E0                        C0            .byte	$C0
11877 29E1                        C0            .byte	$C0
11878 29E2                        C2            .byte	$C2
11879 29E3                        66            .byte	$66
11880 29E4                        3C            .byte	$3C
11881 29E5                        00            .byte	0
11882 29E6                        00            .byte	0
11883 29E7                        00            .byte	0
11884 29E8                        00            .byte	0
11885                                           ! 1479  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11886 29E9                        00            .byte	0
11887 29EA                        00            .byte	0
11888 29EB                        F8            .byte	$F8
11889 29EC                        6C            .byte	$6C
11890 29ED                        66            .byte	$66
11891 29EE                        66            .byte	$66
11892 29EF                        66            .byte	$66
11893 29F0                        66            .byte	$66
11894 29F1                        66            .byte	$66
11895 29F2                        66            .byte	$66
11896 29F3                        6C            .byte	$6C
11897 29F4                        F8            .byte	$F8
11898 29F5                        00            .byte	0
11899 29F6                        00            .byte	0
11900 29F7                        00            .byte	0
11901 29F8                        00            .byte	0
11902                                           ! 1480  0x00, 0x00, 0xfe, 0x66
11903 29F9                        00            .byte	0
11904 29FA                        00            .byte	0
11905 29FB                        FE            .byte	$FE
11906                                           ! 1480 , 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11907 29FC                        66            .byte	$66
11908 29FD                        62            .byte	$62
11909 29FE                        68            .byte	$68
11910 29FF                        78            .byte	$78
11911 2A00                        68            .byte	$68
11912 2A01                        60            .byte	$60
11913 2A02                        62            .byte	$62
11914 2A03                        66            .byte	$66
11915 2A04                        FE            .byte	$FE
11916 2A05                        00            .byte	0
11917 2A06                        00            .byte	0
11918 2A07                        00            .byte	0
11919 2A08                        00            .byte	0
11920                                           ! 1481  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11921 2A09                        00            .byte	0
11922 2A0A                        00            .byte	0
11923 2A0B                        FE            .byte	$FE
11924 2A0C                        66            .byte	$66
11925 2A0D                        62            .byte	$62
11926 2A0E                        68            .byte	$68
11927 2A0F                        78            .byte	$78
11928 2A10                        68            .byte	$68
11929 2A11                        60            .byte	$60
11930 2A12                        60            .byte	$60
11931 2A13                        60            .byte	$60
11932 2A14                        F0            .byte	$F0
11933 2A15                        00            .byte	0
11934 2A16                        00            .byte	0
11935 2A17                        00            .byte	0
11936 2A18                        00            .byte	0
11937                                           ! 1482  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11938 2A19                        00            .byte	0
11939 2A1A                        00            .byte	0
11940 2A1B                        3C            .byte	$3C
11941 2A1C                        66            .byte	$66
11942 2A1D                        C2            .byte	$C2
11943 2A1E                        C0            .byte	$C0
11944 2A1F                        C0            .byte	$C0
11945 2A20                        DE            .byte	$DE
11946 2A21                        C6            .byte	$C6
11947 2A22                        C6            .byte	$C6
11948 2A23                        66            .byte	$66
11949 2A24                        3A            .byte	$3A
11950 2A25                        00            .byte	0
11951 2A26                        00            .byte	0
11952 2A27                        00            .byte	0
11953 2A28                        00            .byte	0
11954                                           ! 1483  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11955 2A29                        00            .byte	0
11956 2A2A                        00            .byte	0
11957 2A2B                        C6            .byte	$C6
11958 2A2C                        C6            .byte	$C6
11959 2A2D                        C6            .byte	$C6
11960 2A2E                        C6            .byte	$C6
11961 2A2F                        FE            .byte	$FE
11962 2A30                        C6            .byte	$C6
11963 2A31                        C6            .byte	$C6
11964 2A32                        C6            .byte	$C6
11965 2A33                        C6            .byte	$C6
11966 2A34                        C6            .byte	$C6
11967 2A35                        00            .byte	0
11968 2A36                        00            .byte	0
11969 2A37                        00            .byte	0
11970 2A38                        00            .byte	0
11971                                           ! 1484  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11972 2A39                        00            .byte	0
11973 2A3A                        00            .byte	0
11974 2A3B                        3C            .byte	$3C
11975 2A3C                        18            .byte	$18
11976 2A3D                        18            .byte	$18
11977 2A3E                        18            .byte	$18
11978 2A3F                        18            .byte	$18
11979 2A40                        18            .byte	$18
11980 2A41                        18            .byte	$18
11981 2A42                        18            .byte	$18
11982 2A43                        18            .byte	$18
11983 2A44                        3C            .byte	$3C
11984 2A45                        00            .byte	0
11985 2A46                        00            .byte	0
11986 2A47                        00            .byte	0
11987 2A48                        00            .byte	0
11988                                           ! 1485  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11989 2A49                        00            .byte	0
11990 2A4A                        00            .byte	0
11991 2A4B                        1E            .byte	$1E
11992 2A4C                        0C            .byte	$C
11993 2A4D                        0C            .byte	$C
11994 2A4E                        0C            .byte	$C
11995 2A4F                        0C            .byte	$C
11996 2A50                        0C            .byte	$C
11997 2A51                        CC            .byte	$CC
11998 2A52                        CC            .byte	$CC
11999 2A53                        CC            .byte	$CC
12000 2A54                        78            .byte	$78
12001 2A55                        00            .byte	0
12002 2A56                        00            .byte	0
12003 2A57                        00            .byte	0
12004 2A58                        00            .byte	0
12005                                           ! 1486  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12006 2A59                        00            .byte	0
12007 2A5A                        00            .byte	0
12008 2A5B                        E6            .byte	$E6
12009 2A5C                        66            .byte	$66
12010 2A5D                        66            .byte	$66
12011 2A5E                        6C            .byte	$6C
12012 2A5F                        78            .byte	$78
12013 2A60                        78            .byte	$78
12014 2A61                        6C            .byte	$6C
12015 2A62                        66            .byte	$66
12016 2A63                        66            .byte	$66
12017 2A64                        E6            .byte	$E6
12018 2A65                        00            .byte	0
12019 2A66                        00            .byte	0
12020 2A67                        00            .byte	0
12021 2A68                        00            .byte	0
12022                                           ! 1487  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12023 2A69                        00            .byte	0
12024 2A6A                        00            .byte	0
12025 2A6B                        F0            .byte	$F0
12026 2A6C                        60            .byte	$60
12027 2A6D                        60            .byte	$60
12028 2A6E                        60            .byte	$60
12029 2A6F                        60            .byte	$60
12030 2A70                        60            .byte	$60
12031 2A71                        60            .byte	$60
12032 2A72                        62            .byte	$62
12033 2A73                        66            .byte	$66
12034 2A74                        FE            .byte	$FE
12035 2A75                        00            .byte	0
12036 2A76                        00            .byte	0
12037 2A77                        00            .byte	0
12038 2A78                        00            .byte	0
12039                                           ! 1488  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12040 2A79                        00            .byte	0
12041 2A7A                        00            .byte	0
12042 2A7B                        C3            .byte	$C3
12043 2A7C                        E7            .byte	$E7
12044 2A7D                        FF            .byte	$FF
12045 2A7E                        FF            .byte	$FF
12046 2A7F                        DB            .byte	$DB
12047 2A80                        C3            .byte	$C3
12048 2A81                        C3            .byte	$C3
12049 2A82                        C3            .byte	$C3
12050 2A83                        C3            .byte	$C3
12051 2A84                        C3            .byte	$C3
12052 2A85                        00            .byte	0
12053 2A86                        00            .byte	0
12054 2A87                        00            .byte	0
12055 2A88                        00            .byte	0
12056                                           ! 1489  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12057 2A89                        00            .byte	0
12058 2A8A                        00            .byte	0
12059 2A8B                        C6            .byte	$C6
12060 2A8C                        E6            .byte	$E6
12061 2A8D                        F6            .byte	$F6
12062 2A8E                        FE            .byte	$FE
12063 2A8F                        DE            .byte	$DE
12064 2A90                        CE            .byte	$CE
12065 2A91                        C6            .byte	$C6
12066 2A92                        C6            .byte	$C6
12067 2A93                        C6            .byte	$C6
12068 2A94                        C6            .byte	$C6
12069 2A95                        00            .byte	0
12070 2A96                        00            .byte	0
12071 2A97                        00            .byte	0
12072 2A98                        00            .byte	0
12073                                           ! 1490  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12074 2A99                        00            .byte	0
12075 2A9A                        00            .byte	0
12076 2A9B                        7C            .byte	$7C
12077 2A9C                        C6            .byte	$C6
12078 2A9D                        C6            .byte	$C6
12079 2A9E                        C6            .byte	$C6
12080 2A9F                        C6            .byte	$C6
12081 2AA0                        C6            .byte	$C6
12082 2AA1                        C6            .byte	$C6
12083 2AA2                        C6            .byte	$C6
12084 2AA3                        C6            .byte	$C6
12085 2AA4                        7C            .byte	$7C
12086 2AA5                        00            .byte	0
12087 2AA6                        00            .byte	0
12088 2AA7                        00            .byte	0
12089 2AA8                        00            .byte	0
12090                                           ! 1491  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12091 2AA9                        00            .byte	0
12092 2AAA                        00            .byte	0
12093 2AAB                        FC            .byte	$FC
12094 2AAC                        66            .byte	$66
12095 2AAD                        66            .byte	$66
12096 2AAE                        66            .byte	$66
12097 2AAF                        7C            .byte	$7C
12098 2AB0                        60            .byte	$60
12099 2AB1                        60            .byte	$60
12100 2AB2                        60            .byte	$60
12101 2AB3                        60            .byte	$60
12102 2AB4                        F0            .byte	$F0
12103 2AB5                        00            .byte	0
12104 2AB6                        00            .byte	0
12105 2AB7                        00            .byte	0
12106 2AB8                        00            .byte	0
12107                                           ! 1492  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12108 2AB9                        00            .byte	0
12109 2ABA                        00            .byte	0
12110 2ABB                        7C            .byte	$7C
12111 2ABC                        C6            .byte	$C6
12112 2ABD                        C6            .byte	$C6
12113 2ABE                        C6            .byte	$C6
12114 2ABF                        C6            .byte	$C6
12115 2AC0                        C6            .byte	$C6
12116 2AC1                        C6            .byte	$C6
12117 2AC2                        D6            .byte	$D6
12118 2AC3                        DE            .byte	$DE
12119 2AC4                        7C            .byte	$7C
12120 2AC5                        0C            .byte	$C
12121 2AC6                        0E            .byte	$E
12122 2AC7                        00            .byte	0
12123 2AC8                        00            .byte	0
12124                                           ! 1493  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12125 2AC9                        00            .byte	0
12126 2ACA                        00            .byte	0
12127 2ACB                        FC            .byte	$FC
12128 2ACC                        66            .byte	$66
12129 2ACD                        66            .byte	$66
12130 2ACE                        66            .byte	$66
12131 2ACF                        7C            .byte	$7C
12132 2AD0                        6C            .byte	$6C
12133 2AD1                        66            .byte	$66
12134 2AD2                        66            .byte	$66
12135 2AD3                        66            .byte	$66
12136 2AD4                        E6            .byte	$E6
12137 2AD5                        00            .byte	0
12138 2AD6                        00            .byte	0
12139 2AD7                        00            .byte	0
12140 2AD8                        00            .byte	0
12141                                           ! 1494  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12142 2AD9                        00            .byte	0
12143 2ADA                        00            .byte	0
12144 2ADB                        7C            .byte	$7C
12145 2ADC                        C6            .byte	$C6
12146 2ADD                        C6            .byte	$C6
12147 2ADE                        60            .byte	$60
12148 2ADF                        38            .byte	$38
12149 2AE0                        0C            .byte	$C
12150 2AE1                        06            .byte	6
12151 2AE2                        C6            .byte	$C6
12152 2AE3                        C6            .byte	$C6
12153 2AE4                        7C            .byte	$7C
12154 2AE5                        00            .byte	0
12155 2AE6                        00            .byte	0
12156 2AE7                        00            .byte	0
12157 2AE8                        00            .byte	0
12158                                           ! 1495  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12159 2AE9                        00            .byte	0
12160 2AEA                        00            .byte	0
12161 2AEB                        FF            .byte	$FF
12162 2AEC                        DB            .byte	$DB
12163 2AED                        99            .byte	$99
12164 2AEE                        18            .byte	$18
12165 2AEF                        18            .byte	$18
12166 2AF0                        18            .byte	$18
12167 2AF1                        18            .byte	$18
12168 2AF2                        18            .byte	$18
12169 2AF3                        18            .byte	$18
12170 2AF4                        3C            .byte	$3C
12171 2AF5                        00            .byte	0
12172 2AF6                        00            .byte	0
12173 2AF7                        00            .byte	0
12174 2AF8                        00            .byte	0
12175                                           ! 1496  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12176 2AF9                        00            .byte	0
12177 2AFA                        00            .byte	0
12178 2AFB                        C6            .byte	$C6
12179 2AFC                        C6            .byte	$C6
12180 2AFD                        C6            .byte	$C6
12181 2AFE                        C6            .byte	$C6
12182 2AFF                        C6            .byte	$C6
12183 2B00                        C6            .byte	$C6
12184 2B01                        C6            .byte	$C6
12185 2B02                        C6            .byte	$C6
12186 2B03                        C6            .byte	$C6
12187 2B04                        7C            .byte	$7C
12188 2B05                        00            .byte	0
12189 2B06                        00            .byte	0
12190 2B07                        00            .byte	0
12191 2B08                        00            .byte	0
12192                                           ! 1497  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12193 2B09                        00            .byte	0
12194 2B0A                        00            .byte	0
12195 2B0B                        C3            .byte	$C3
12196 2B0C                        C3            .byte	$C3
12197 2B0D                        C3            .byte	$C3
12198 2B0E                        C3            .byte	$C3
12199 2B0F                        C3            .byte	$C3
12200 2B10                        C3            .byte	$C3
12201 2B11                        C3            .byte	$C3
12202 2B12                        66            .byte	$66
12203 2B13                        3C            .byte	$3C
12204 2B14                        18            .byte	$18
12205 2B15                        00            .byte	0
12206 2B16                        00            .byte	0
12207 2B17                        00            .byte	0
12208 2B18                        00            .byte	0
12209                                           ! 1498  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12210 2B19                        00            .byte	0
12211 2B1A                        00            .byte	0
12212 2B1B                        C3            .byte	$C3
12213 2B1C                        C3            .byte	$C3
12214 2B1D                        C3            .byte	$C3
12215 2B1E                        C3            .byte	$C3
12216 2B1F                        C3            .byte	$C3
12217 2B20                        DB            .byte	$DB
12218 2B21                        DB            .byte	$DB
12219 2B22                        FF            .byte	$FF
12220 2B23                        66            .byte	$66
12221 2B24                        66            .byte	$66
12222 2B25                        00            .byte	0
12223 2B26                        00            .byte	0
12224 2B27                        00            .byte	0
12225 2B28                        00            .byte	0
12226                                           ! 1499  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12227 2B29                        00            .byte	0
12228 2B2A                        00            .byte	0
12229 2B2B                        C3            .byte	$C3
12230 2B2C                        C3            .byte	$C3
12231 2B2D                        66            .byte	$66
12232 2B2E                        3C            .byte	$3C
12233 2B2F                        18            .byte	$18
12234 2B30                        18            .byte	$18
12235 2B31                        3C            .byte	$3C
12236 2B32                        66            .byte	$66
12237 2B33                        C3            .byte	$C3
12238 2B34                        C3            .byte	$C3
12239 2B35                        00            .byte	0
12240 2B36                        00            .byte	0
12241 2B37                        00            .byte	0
12242 2B38                        00            .byte	0
12243                                           ! 1500  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12244 2B39                        00            .byte	0
12245 2B3A                        00            .byte	0
12246 2B3B                        C3            .byte	$C3
12247 2B3C                        C3            .byte	$C3
12248 2B3D                        C3            .byte	$C3
12249 2B3E                        66            .byte	$66
12250 2B3F                        3C            .byte	$3C
12251 2B40                        18            .byte	$18
12252 2B41                        18            .byte	$18
12253 2B42                        18            .byte	$18
12254 2B43                        18            .byte	$18
12255 2B44                        3C            .byte	$3C
12256 2B45                        00            .byte	0
12257 2B46                        00            .byte	0
12258 2B47                        00            .byte	0
12259 2B48                        00            .byte	0
12260                                           ! 1501  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0
12261 2B49                        00            .byte	0
12262 2B4A                        00            .byte	0
12263 2B4B                        FF            .byte	$FF
12264 2B4C                        C3            .byte	$C3
12265 2B4D                        86            .byte	$86
12266                                           ! 1501 c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12267 2B4E                        0C            .byte	$C
12268 2B4F                        18            .byte	$18
12269 2B50                        30            .byte	$30
12270 2B51                        60            .byte	$60
12271 2B52                        C1            .byte	$C1
12272 2B53                        C3            .byte	$C3
12273 2B54                        FF            .byte	$FF
12274 2B55                        00            .byte	0
12275 2B56                        00            .byte	0
12276 2B57                        00            .byte	0
12277 2B58                        00            .byte	0
12278                                           ! 1502  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12279 2B59                        00            .byte	0
12280 2B5A                        00            .byte	0
12281 2B5B                        3C            .byte	$3C
12282 2B5C                        30            .byte	$30
12283 2B5D                        30            .byte	$30
12284 2B5E                        30            .byte	$30
12285 2B5F                        30            .byte	$30
12286 2B60                        30            .byte	$30
12287 2B61                        30            .byte	$30
12288 2B62                        30            .byte	$30
12289 2B63                        30            .byte	$30
12290 2B64                        3C            .byte	$3C
12291 2B65                        00            .byte	0
12292 2B66                        00            .byte	0
12293 2B67                        00            .byte	0
12294 2B68                        00            .byte	0
12295                                           ! 1503  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12296 2B69                        00            .byte	0
12297 2B6A                        00            .byte	0
12298 2B6B                        00            .byte	0
12299 2B6C                        80            .byte	$80
12300 2B6D                        C0            .byte	$C0
12301 2B6E                        E0            .byte	$E0
12302 2B6F                        70            .byte	$70
12303 2B70                        38            .byte	$38
12304 2B71                        1C            .byte	$1C
12305 2B72                        0E            .byte	$E
12306 2B73                        06            .byte	6
12307 2B74                        02            .byte	2
12308 2B75                        00            .byte	0
12309 2B76                        00            .byte	0
12310 2B77                        00            .byte	0
12311 2B78                        00            .byte	0
12312                                           ! 1504  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12313 2B79                        00            .byte	0
12314 2B7A                        00            .byte	0
12315 2B7B                        3C            .byte	$3C
12316 2B7C                        0C            .byte	$C
12317 2B7D                        0C            .byte	$C
12318 2B7E                        0C            .byte	$C
12319 2B7F                        0C            .byte	$C
12320 2B80                        0C            .byte	$C
12321 2B81                        0C            .byte	$C
12322 2B82                        0C            .byte	$C
12323 2B83                        0C            .byte	$C
12324 2B84                        3C            .byte	$3C
12325 2B85                        00            .byte	0
12326 2B86                        00            .byte	0
12327 2B87                        00            .byte	0
12328 2B88                        00            .byte	0
12329                                           ! 1505  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12330 2B89                        10            .byte	$10
12331 2B8A                        38            .byte	$38
12332 2B8B                        6C            .byte	$6C
12333 2B8C                        C6            .byte	$C6
12334 2B8D                        00            .byte	0
12335 2B8E                        00            .byte	0
12336 2B8F                        00            .byte	0
12337 2B90                        00            .byte	0
12338 2B91                        00            .byte	0
12339 2B92                        00            .byte	0
12340 2B93                        00            .byte	0
12341 2B94                        00            .byte	0
12342 2B95                        00            .byte	0
12343 2B96                        00            .byte	0
12344 2B97                        00            .byte	0
12345 2B98                        00            .byte	0
12346                                           ! 1506  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12347 2B99                        00            .byte	0
12348 2B9A                        00            .byte	0
12349 2B9B                        00            .byte	0
12350 2B9C                        00            .byte	0
12351 2B9D                        00            .byte	0
12352 2B9E                        00            .byte	0
12353 2B9F                        00            .byte	0
12354 2BA0                        00            .byte	0
12355 2BA1                        00            .byte	0
12356 2BA2                        00            .byte	0
12357 2BA3                        00            .byte	0
12358 2BA4                        00            .byte	0
12359 2BA5                        00            .byte	0
12360 2BA6                        FF            .byte	$FF
12361 2BA7                        00            .byte	0
12362 2BA8                        00            .byte	0
12363                                           ! 1507  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12364 2BA9                        30            .byte	$30
12365 2BAA                        30            .byte	$30
12366 2BAB                        18            .byte	$18
12367 2BAC                        00            .byte	0
12368 2BAD                        00            .byte	0
12369 2BAE                        00            .byte	0
12370 2BAF                        00            .byte	0
12371 2BB0                        00            .byte	0
12372 2BB1                        00            .byte	0
12373 2BB2                        00            .byte	0
12374 2BB3                        00            .byte	0
12375 2BB4                        00            .byte	0
12376 2BB5                        00            .byte	0
12377 2BB6                        00            .byte	0
12378 2BB7                        00            .byte	0
12379 2BB8                        00            .byte	0
12380                                           ! 1508  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12381 2BB9                        00            .byte	0
12382 2BBA                        00            .byte	0
12383 2BBB                        00            .byte	0
12384 2BBC                        00            .byte	0
12385 2BBD                        00            .byte	0
12386 2BBE                        78            .byte	$78
12387 2BBF                        0C            .byte	$C
12388 2BC0                        7C            .byte	$7C
12389 2BC1                        CC            .byte	$CC
12390 2BC2                        CC            .byte	$CC
12391 2BC3                        CC            .byte	$CC
12392 2BC4                        76            .byte	$76
12393 2BC5                        00            .byte	0
12394 2BC6                        00            .byte	0
12395 2BC7                        00            .byte	0
12396 2BC8                        00            .byte	0
12397                                           ! 1509  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12398 2BC9                        00            .byte	0
12399 2BCA                        00            .byte	0
12400 2BCB                        E0            .byte	$E0
12401 2BCC                        60            .byte	$60
12402 2BCD                        60            .byte	$60
12403 2BCE                        78            .byte	$78
12404 2BCF                        6C            .byte	$6C
12405 2BD0                        66            .byte	$66
12406 2BD1                        66            .byte	$66
12407 2BD2                        66            .byte	$66
12408 2BD3                        66            .byte	$66
12409 2BD4                        7C            .byte	$7C
12410 2BD5                        00            .byte	0
12411 2BD6                        00            .byte	0
12412 2BD7                        00            .byte	0
12413 2BD8                        00            .byte	0
12414                                           ! 1510  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12415 2BD9                        00            .byte	0
12416 2BDA                        00            .byte	0
12417 2BDB                        00            .byte	0
12418 2BDC                        00            .byte	0
12419 2BDD                        00            .byte	0
12420 2BDE                        7C            .byte	$7C
12421 2BDF                        C6            .byte	$C6
12422 2BE0                        C0            .byte	$C0
12423 2BE1                        C0            .byte	$C0
12424 2BE2                        C0            .byte	$C0
12425 2BE3                        C6            .byte	$C6
12426 2BE4                        7C            .byte	$7C
12427 2BE5                        00            .byte	0
12428 2BE6                        00            .byte	0
12429 2BE7                        00            .byte	0
12430 2BE8                        00            .byte	0
12431                                           ! 1511  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12432 2BE9                        00            .byte	0
12433 2BEA                        00            .byte	0
12434 2BEB                        1C            .byte	$1C
12435 2BEC                        0C            .byte	$C
12436 2BED                        0C            .byte	$C
12437 2BEE                        3C            .byte	$3C
12438 2BEF                        6C            .byte	$6C
12439 2BF0                        CC            .byte	$CC
12440 2BF1                        CC            .byte	$CC
12441 2BF2                        CC            .byte	$CC
12442 2BF3                        CC            .byte	$CC
12443 2BF4                        76            .byte	$76
12444 2BF5                        00            .byte	0
12445 2BF6                        00            .byte	0
12446 2BF7                        00            .byte	0
12447 2BF8                        00            .byte	0
12448                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12449 2BF9                        00            .byte	0
12450 2BFA                        00            .byte	0
12451 2BFB                        00            .byte	0
12452 2BFC                        00            .byte	0
12453 2BFD                        00            .byte	0
12454 2BFE                        7C            .byte	$7C
12455 2BFF                        C6            .byte	$C6
12456 2C00                        FE            .byte	$FE
12457 2C01                        C0            .byte	$C0
12458 2C02                        C0            .byte	$C0
12459 2C03                        C6            .byte	$C6
12460 2C04                        7C            .byte	$7C
12461 2C05                        00            .byte	0
12462 2C06                        00            .byte	0
12463 2C07                        00            .byte	0
12464 2C08                        00            .byte	0
12465                                           ! 1513  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12466 2C09                        00            .byte	0
12467 2C0A                        00            .byte	0
12468 2C0B                        38            .byte	$38
12469 2C0C                        6C            .byte	$6C
12470 2C0D                        64            .byte	$64
12471 2C0E                        60            .byte	$60
12472 2C0F                        F0            .byte	$F0
12473 2C10                        60            .byte	$60
12474 2C11                        60            .byte	$60
12475 2C12                        60            .byte	$60
12476 2C13                        60            .byte	$60
12477 2C14                        F0            .byte	$F0
12478 2C15                        00            .byte	0
12479 2C16                        00            .byte	0
12480 2C17                        00            .byte	0
12481 2C18                        00            .byte	0
12482                                           ! 1514  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12483 2C19                        00            .byte	0
12484 2C1A                        00            .byte	0
12485 2C1B                        00            .byte	0
12486 2C1C                        00            .byte	0
12487 2C1D                        00            .byte	0
12488 2C1E                        76            .byte	$76
12489 2C1F                        CC            .byte	$CC
12490 2C20                        CC            .byte	$CC
12491 2C21                        CC            .byte	$CC
12492 2C22                        CC            .byte	$CC
12493 2C23                        CC            .byte	$CC
12494 2C24                        7C            .byte	$7C
12495 2C25                        0C            .byte	$C
12496 2C26                        CC            .byte	$CC
12497 2C27                        78            .byte	$78
12498 2C28                        00            .byte	0
12499                                           ! 1515  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12500 2C29                        00            .byte	0
12501 2C2A                        00            .byte	0
12502 2C2B                        E0            .byte	$E0
12503 2C2C                        60            .byte	$60
12504 2C2D                        60            .byte	$60
12505 2C2E                        6C            .byte	$6C
12506 2C2F                        76            .byte	$76
12507 2C30                        66            .byte	$66
12508 2C31                        66            .byte	$66
12509 2C32                        66            .byte	$66
12510 2C33                        66            .byte	$66
12511 2C34                        E6            .byte	$E6
12512 2C35                        00            .byte	0
12513 2C36                        00            .byte	0
12514 2C37                        00            .byte	0
12515 2C38                        00            .byte	0
12516                                           ! 1516  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12517 2C39                        00            .byte	0
12518 2C3A                        00            .byte	0
12519 2C3B                        18            .byte	$18
12520 2C3C                        18            .byte	$18
12521 2C3D                        00            .byte	0
12522 2C3E                        38            .byte	$38
12523 2C3F                        18            .byte	$18
12524 2C40                        18            .byte	$18
12525 2C41                        18            .byte	$18
12526 2C42                        18            .byte	$18
12527 2C43                        18            .byte	$18
12528 2C44                        3C            .byte	$3C
12529 2C45                        00            .byte	0
12530 2C46                        00            .byte	0
12531 2C47                        00            .byte	0
12532 2C48                        00            .byte	0
12533                                           ! 1517  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12534 2C49                        00            .byte	0
12535 2C4A                        00            .byte	0
12536 2C4B                        06            .byte	6
12537 2C4C                        06            .byte	6
12538 2C4D                        00            .byte	0
12539 2C4E                        0E            .byte	$E
12540 2C4F                        06            .byte	6
12541 2C50                        06            .byte	6
12542 2C51                        06            .byte	6
12543 2C52                        06            .byte	6
12544 2C53                        06            .byte	6
12545 2C54                        06            .byte	6
12546 2C55                        66            .byte	$66
12547 2C56                        66            .byte	$66
12548 2C57                        3C            .byte	$3C
12549 2C58                        00            .byte	0
12550                                           ! 1518  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12551 2C59                        00            .byte	0
12552 2C5A                        00            .byte	0
12553 2C5B                        E0            .byte	$E0
12554 2C5C                        60            .byte	$60
12555 2C5D                        60            .byte	$60
12556 2C5E                        66            .byte	$66
12557 2C5F                        6C            .byte	$6C
12558 2C60                        78            .byte	$78
12559 2C61                        78            .byte	$78
12560 2C62                        6C            .byte	$6C
12561 2C63                        66            .byte	$66
12562 2C64                        E6            .byte	$E6
12563 2C65                        00            .byte	0
12564 2C66                        00            .byte	0
12565 2C67                        00            .byte	0
12566 2C68                        00            .byte	0
12567                                           ! 1519  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12568 2C69                        00            .byte	0
12569 2C6A                        00            .byte	0
12570 2C6B                        38            .byte	$38
12571 2C6C                        18            .byte	$18
12572 2C6D                        18            .byte	$18
12573 2C6E                        18            .byte	$18
12574 2C6F                        18            .byte	$18
12575 2C70                        18            .byte	$18
12576 2C71                        18            .byte	$18
12577 2C72                        18            .byte	$18
12578 2C73                        18            .byte	$18
12579 2C74                        3C            .byte	$3C
12580 2C75                        00            .byte	0
12581 2C76                        00            .byte	0
12582 2C77                        00            .byte	0
12583 2C78                        00            .byte	0
12584                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12585 2C79                        00            .byte	0
12586 2C7A                        00            .byte	0
12587 2C7B                        00            .byte	0
12588 2C7C                        00            .byte	0
12589 2C7D                        00            .byte	0
12590 2C7E                        E6            .byte	$E6
12591 2C7F                        FF            .byte	$FF
12592 2C80                        DB            .byte	$DB
12593 2C81                        DB            .byte	$DB
12594 2C82                        DB            .byte	$DB
12595 2C83                        DB            .byte	$DB
12596 2C84                        DB            .byte	$DB
12597 2C85                        00            .byte	0
12598 2C86                        00            .byte	0
12599 2C87                        00            .byte	0
12600 2C88                        00            .byte	0
12601                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12602 2C89                        00            .byte	0
12603 2C8A                        00            .byte	0
12604 2C8B                        00            .byte	0
12605 2C8C                        00            .byte	0
12606 2C8D                        00            .byte	0
12607 2C8E                        DC            .byte	$DC
12608 2C8F                        66            .byte	$66
12609 2C90                        66            .byte	$66
12610 2C91                        66            .byte	$66
12611 2C92                        66            .byte	$66
12612 2C93                        66            .byte	$66
12613 2C94                        66            .byte	$66
12614 2C95                        00            .byte	0
12615 2C96                        00            .byte	0
12616 2C97                        00            .byte	0
12617 2C98                        00            .byte	0
12618                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x
12619 2C99                        00            .byte	0
12620 2C9A                        00            .byte	0
12621 2C9B                        00            .byte	0
12622 2C9C                        00            .byte	0
12623 2C9D                        00            .byte	0
12624 2C9E                        7C            .byte	$7C
12625 2C9F                        C6            .byte	$C6
12626                                           ! 1522 c6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12627 2CA0                        C6            .byte	$C6
12628 2CA1                        C6            .byte	$C6
12629 2CA2                        C6            .byte	$C6
12630 2CA3                        C6            .byte	$C6
12631 2CA4                        7C            .byte	$7C
12632 2CA5                        00            .byte	0
12633 2CA6                        00            .byte	0
12634 2CA7                        00            .byte	0
12635 2CA8                        00            .byte	0
12636                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12637 2CA9                        00            .byte	0
12638 2CAA                        00            .byte	0
12639 2CAB                        00            .byte	0
12640 2CAC                        00            .byte	0
12641 2CAD                        00            .byte	0
12642 2CAE                        DC            .byte	$DC
12643 2CAF                        66            .byte	$66
12644 2CB0                        66            .byte	$66
12645 2CB1                        66            .byte	$66
12646 2CB2                        66            .byte	$66
12647 2CB3                        66            .byte	$66
12648 2CB4                        7C            .byte	$7C
12649 2CB5                        60            .byte	$60
12650 2CB6                        60            .byte	$60
12651 2CB7                        F0            .byte	$F0
12652 2CB8                        00            .byte	0
12653                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12654 2CB9                        00            .byte	0
12655 2CBA                        00            .byte	0
12656 2CBB                        00            .byte	0
12657 2CBC                        00            .byte	0
12658 2CBD                        00            .byte	0
12659 2CBE                        76            .byte	$76
12660 2CBF                        CC            .byte	$CC
12661 2CC0                        CC            .byte	$CC
12662 2CC1                        CC            .byte	$CC
12663 2CC2                        CC            .byte	$CC
12664 2CC3                        CC            .byte	$CC
12665 2CC4                        7C            .byte	$7C
12666 2CC5                        0C            .byte	$C
12667 2CC6                        0C            .byte	$C
12668 2CC7                        1E            .byte	$1E
12669 2CC8                        00            .byte	0
12670                                           ! 1525  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12671 2CC9                        00            .byte	0
12672 2CCA                        00            .byte	0
12673 2CCB                        00            .byte	0
12674 2CCC                        00            .byte	0
12675 2CCD                        00            .byte	0
12676 2CCE                        DC            .byte	$DC
12677 2CCF                        76            .byte	$76
12678 2CD0                        66            .byte	$66
12679 2CD1                        60            .byte	$60
12680 2CD2                        60            .byte	$60
12681 2CD3                        60            .byte	$60
12682 2CD4                        F0            .byte	$F0
12683 2CD5                        00            .byte	0
12684 2CD6                        00            .byte	0
12685 2CD7                        00            .byte	0
12686 2CD8                        00            .byte	0
12687                                           ! 1526  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12688 2CD9                        00            .byte	0
12689 2CDA                        00            .byte	0
12690 2CDB                        00            .byte	0
12691 2CDC                        00            .byte	0
12692 2CDD                        00            .byte	0
12693 2CDE                        7C            .byte	$7C
12694 2CDF                        C6            .byte	$C6
12695 2CE0                        60            .byte	$60
12696 2CE1                        38            .byte	$38
12697 2CE2                        0C            .byte	$C
12698 2CE3                        C6            .byte	$C6
12699 2CE4                        7C            .byte	$7C
12700 2CE5                        00            .byte	0
12701 2CE6                        00            .byte	0
12702 2CE7                        00            .byte	0
12703 2CE8                        00            .byte	0
12704                                           ! 1527  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12705 2CE9                        00            .byte	0
12706 2CEA                        00            .byte	0
12707 2CEB                        10            .byte	$10
12708 2CEC                        30            .byte	$30
12709 2CED                        30            .byte	$30
12710 2CEE                        FC            .byte	$FC
12711 2CEF                        30            .byte	$30
12712 2CF0                        30            .byte	$30
12713 2CF1                        30            .byte	$30
12714 2CF2                        30            .byte	$30
12715 2CF3                        36            .byte	$36
12716 2CF4                        1C            .byte	$1C
12717 2CF5                        00            .byte	0
12718 2CF6                        00            .byte	0
12719 2CF7                        00            .byte	0
12720 2CF8                        00            .byte	0
12721                                           ! 1528  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12722 2CF9                        00            .byte	0
12723 2CFA                        00            .byte	0
12724 2CFB                        00            .byte	0
12725 2CFC                        00            .byte	0
12726 2CFD                        00            .byte	0
12727 2CFE                        CC            .byte	$CC
12728 2CFF                        CC            .byte	$CC
12729 2D00                        CC            .byte	$CC
12730 2D01                        CC            .byte	$CC
12731 2D02                        CC            .byte	$CC
12732 2D03                        CC            .byte	$CC
12733 2D04                        76            .byte	$76
12734 2D05                        00            .byte	0
12735 2D06                        00            .byte	0
12736 2D07                        00            .byte	0
12737 2D08                        00            .byte	0
12738                                           ! 1529  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12739 2D09                        00            .byte	0
12740 2D0A                        00            .byte	0
12741 2D0B                        00            .byte	0
12742 2D0C                        00            .byte	0
12743 2D0D                        00            .byte	0
12744 2D0E                        C3            .byte	$C3
12745 2D0F                        C3            .byte	$C3
12746 2D10                        C3            .byte	$C3
12747 2D11                        C3            .byte	$C3
12748 2D12                        66            .byte	$66
12749 2D13                        3C            .byte	$3C
12750 2D14                        18            .byte	$18
12751 2D15                        00            .byte	0
12752 2D16                        00            .byte	0
12753 2D17                        00            .byte	0
12754 2D18                        00            .byte	0
12755                                           ! 1530  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12756 2D19                        00            .byte	0
12757 2D1A                        00            .byte	0
12758 2D1B                        00            .byte	0
12759 2D1C                        00            .byte	0
12760 2D1D                        00            .byte	0
12761 2D1E                        C3            .byte	$C3
12762 2D1F                        C3            .byte	$C3
12763 2D20                        C3            .byte	$C3
12764 2D21                        DB            .byte	$DB
12765 2D22                        DB            .byte	$DB
12766 2D23                        FF            .byte	$FF
12767 2D24                        66            .byte	$66
12768 2D25                        00            .byte	0
12769 2D26                        00            .byte	0
12770 2D27                        00            .byte	0
12771 2D28                        00            .byte	0
12772                                           ! 1531  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12773 2D29                        00            .byte	0
12774 2D2A                        00            .byte	0
12775 2D2B                        00            .byte	0
12776 2D2C                        00            .byte	0
12777 2D2D                        00            .byte	0
12778 2D2E                        C3            .byte	$C3
12779 2D2F                        66            .byte	$66
12780 2D30                        3C            .byte	$3C
12781 2D31                        18            .byte	$18
12782 2D32                        3C            .byte	$3C
12783 2D33                        66            .byte	$66
12784 2D34                        C3            .byte	$C3
12785 2D35                        00            .byte	0
12786 2D36                        00            .byte	0
12787 2D37                        00            .byte	0
12788 2D38                        00            .byte	0
12789                                           ! 1532  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12790 2D39                        00            .byte	0
12791 2D3A                        00            .byte	0
12792 2D3B                        00            .byte	0
12793 2D3C                        00            .byte	0
12794 2D3D                        00            .byte	0
12795 2D3E                        C6            .byte	$C6
12796 2D3F                        C6            .byte	$C6
12797 2D40                        C6            .byte	$C6
12798 2D41                        C6            .byte	$C6
12799 2D42                        C6            .byte	$C6
12800 2D43                        C6            .byte	$C6
12801 2D44                        7E            .byte	$7E
12802 2D45                        06            .byte	6
12803 2D46                        0C            .byte	$C
12804 2D47                        F8            .byte	$F8
12805 2D48                        00            .byte	0
12806                                           ! 1533  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12807 2D49                        00            .byte	0
12808 2D4A                        00            .byte	0
12809 2D4B                        00            .byte	0
12810 2D4C                        00            .byte	0
12811 2D4D                        00            .byte	0
12812 2D4E                        FE            .byte	$FE
12813 2D4F                        CC            .byte	$CC
12814 2D50                        18            .byte	$18
12815 2D51                        30            .byte	$30
12816 2D52                        60            .byte	$60
12817 2D53                        C6            .byte	$C6
12818 2D54                        FE            .byte	$FE
12819 2D55                        00            .byte	0
12820 2D56                        00            .byte	0
12821 2D57                        00            .byte	0
12822 2D58                        00            .byte	0
12823                                           ! 1534  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12824 2D59                        00            .byte	0
12825 2D5A                        00            .byte	0
12826 2D5B                        0E            .byte	$E
12827 2D5C                        18            .byte	$18
12828 2D5D                        18            .byte	$18
12829 2D5E                        18            .byte	$18
12830 2D5F                        70            .byte	$70
12831 2D60                        18            .byte	$18
12832 2D61                        18            .byte	$18
12833 2D62                        18            .byte	$18
12834 2D63                        18            .byte	$18
12835 2D64                        0E            .byte	$E
12836 2D65                        00            .byte	0
12837 2D66                        00            .byte	0
12838 2D67                        00            .byte	0
12839 2D68                        00            .byte	0
12840                                           ! 1535  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12841 2D69                        00            .byte	0
12842 2D6A                        00            .byte	0
12843 2D6B                        18            .byte	$18
12844 2D6C                        18            .byte	$18
12845 2D6D                        18            .byte	$18
12846 2D6E                        18            .byte	$18
12847 2D6F                        00            .byte	0
12848 2D70                        18            .byte	$18
12849 2D71                        18            .byte	$18
12850 2D72                        18            .byte	$18
12851 2D73                        18            .byte	$18
12852 2D74                        18            .byte	$18
12853 2D75                        00            .byte	0
12854 2D76                        00            .byte	0
12855 2D77                        00            .byte	0
12856 2D78                        00            .byte	0
12857                                           ! 1536  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12858 2D79                        00            .byte	0
12859 2D7A                        00            .byte	0
12860 2D7B                        70            .byte	$70
12861 2D7C                        18            .byte	$18
12862 2D7D                        18            .byte	$18
12863 2D7E                        18            .byte	$18
12864 2D7F                        0E            .byte	$E
12865 2D80                        18            .byte	$18
12866 2D81                        18            .byte	$18
12867 2D82                        18            .byte	$18
12868 2D83                        18            .byte	$18
12869 2D84                        70            .byte	$70
12870 2D85                        00            .byte	0
12871 2D86                        00            .byte	0
12872 2D87                        00            .byte	0
12873 2D88                        00            .byte	0
12874                                           ! 1537  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12875 2D89                        00            .byte	0
12876 2D8A                        00            .byte	0
12877 2D8B                        76            .byte	$76
12878 2D8C                        DC            .byte	$DC
12879 2D8D                        00            .byte	0
12880 2D8E                        00            .byte	0
12881 2D8F                        00            .byte	0
12882 2D90                        00            .byte	0
12883 2D91                        00            .byte	0
12884 2D92                        00            .byte	0
12885 2D93                        00            .byte	0
12886 2D94                        00            .byte	0
12887 2D95                        00            .byte	0
12888 2D96                        00            .byte	0
12889 2D97                        00            .byte	0
12890 2D98                        00            .byte	0
12891                                           ! 1538  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12892 2D99                        00            .byte	0
12893 2D9A                        00            .byte	0
12894 2D9B                        00            .byte	0
12895 2D9C                        00            .byte	0
12896 2D9D                        10            .byte	$10
12897 2D9E                        38            .byte	$38
12898 2D9F                        6C            .byte	$6C
12899 2DA0                        C6            .byte	$C6
12900 2DA1                        C6            .byte	$C6
12901 2DA2                        C6            .byte	$C6
12902 2DA3                        FE            .byte	$FE
12903 2DA4                        00            .byte	0
12904 2DA5                        00            .byte	0
12905 2DA6                        00            .byte	0
12906 2DA7                        00            .byte	0
12907 2DA8                        00            .byte	0
12908                                           ! 1539  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12909 2DA9                        00            .byte	0
12910 2DAA                        00            .byte	0
12911 2DAB                        3C            .byte	$3C
12912 2DAC                        66            .byte	$66
12913 2DAD                        C2            .byte	$C2
12914 2DAE                        C0            .byte	$C0
12915 2DAF                        C0            .byte	$C0
12916 2DB0                        C0            .byte	$C0
12917 2DB1                        C2            .byte	$C2
12918 2DB2                        66            .byte	$66
12919 2DB3                        3C            .byte	$3C
12920 2DB4                        0C            .byte	$C
12921 2DB5                        06            .byte	6
12922 2DB6                        7C            .byte	$7C
12923 2DB7                        00            .byte	0
12924 2DB8                        00            .byte	0
12925                                           ! 1540  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12926 2DB9                        00            .byte	0
12927 2DBA                        00            .byte	0
12928 2DBB                        CC            .byte	$CC
12929 2DBC                        00            .byte	0
12930 2DBD                        00            .byte	0
12931 2DBE                        CC            .byte	$CC
12932 2DBF                        CC            .byte	$CC
12933 2DC0                        CC            .byte	$CC
12934 2DC1                        CC            .byte	$CC
12935 2DC2                        CC            .byte	$CC
12936 2DC3                        CC            .byte	$CC
12937 2DC4                        76            .byte	$76
12938 2DC5                        00            .byte	0
12939 2DC6                        00            .byte	0
12940 2DC7                        00            .byte	0
12941 2DC8                        00            .byte	0
12942                                           ! 1541  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12943 2DC9                        00            .byte	0
12944 2DCA                        0C            .byte	$C
12945 2DCB                        18            .byte	$18
12946 2DCC                        30            .byte	$30
12947 2DCD                        00            .byte	0
12948 2DCE                        7C            .byte	$7C
12949 2DCF                        C6            .byte	$C6
12950 2DD0                        FE            .byte	$FE
12951 2DD1                        C0            .byte	$C0
12952 2DD2                        C0            .byte	$C0
12953 2DD3                        C6            .byte	$C6
12954 2DD4                        7C            .byte	$7C
12955 2DD5                        00            .byte	0
12956 2DD6                        00            .byte	0
12957 2DD7                        00            .byte	0
12958 2DD8                        00            .byte	0
12959                                           ! 1542  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12960 2DD9                        00            .byte	0
12961 2DDA                        10            .byte	$10
12962 2DDB                        38            .byte	$38
12963 2DDC                        6C            .byte	$6C
12964 2DDD                        00            .byte	0
12965 2DDE                        78            .byte	$78
12966 2DDF                        0C            .byte	$C
12967 2DE0                        7C            .byte	$7C
12968 2DE1                        CC            .byte	$CC
12969 2DE2                        CC            .byte	$CC
12970 2DE3                        CC            .byte	$CC
12971 2DE4                        76            .byte	$76
12972 2DE5                        00            .byte	0
12973 2DE6                        00            .byte	0
12974 2DE7                        00            .byte	0
12975 2DE8                        00            .byte	0
12976                                           ! 1543  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0
12977 2DE9                        00            .byte	0
12978 2DEA                        00            .byte	0
12979 2DEB                        CC            .byte	$CC
12980 2DEC                        00            .byte	0
12981 2DED                        00            .byte	0
12982 2DEE                        78            .byte	$78
12983 2DEF                        0C            .byte	$C
12984 2DF0                        7C            .byte	$7C
12985 2DF1                        CC            .byte	$CC
12986                                           ! 1543 xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12987 2DF2                        CC            .byte	$CC
12988 2DF3                        CC            .byte	$CC
12989 2DF4                        76            .byte	$76
12990 2DF5                        00            .byte	0
12991 2DF6                        00            .byte	0
12992 2DF7                        00            .byte	0
12993 2DF8                        00            .byte	0
12994                                           ! 1544  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12995 2DF9                        00            .byte	0
12996 2DFA                        60            .byte	$60
12997 2DFB                        30            .byte	$30
12998 2DFC                        18            .byte	$18
12999 2DFD                        00            .byte	0
13000 2DFE                        78            .byte	$78
13001 2DFF                        0C            .byte	$C
13002 2E00                        7C            .byte	$7C
13003 2E01                        CC            .byte	$CC
13004 2E02                        CC            .byte	$CC
13005 2E03                        CC            .byte	$CC
13006 2E04                        76            .byte	$76
13007 2E05                        00            .byte	0
13008 2E06                        00            .byte	0
13009 2E07                        00            .byte	0
13010 2E08                        00            .byte	0
13011                                           ! 1545  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13012 2E09                        00            .byte	0
13013 2E0A                        38            .byte	$38
13014 2E0B                        6C            .byte	$6C
13015 2E0C                        38            .byte	$38
13016 2E0D                        00            .byte	0
13017 2E0E                        78            .byte	$78
13018 2E0F                        0C            .byte	$C
13019 2E10                        7C            .byte	$7C
13020 2E11                        CC            .byte	$CC
13021 2E12                        CC            .byte	$CC
13022 2E13                        CC            .byte	$CC
13023 2E14                        76            .byte	$76
13024 2E15                        00            .byte	0
13025 2E16                        00            .byte	0
13026 2E17                        00            .byte	0
13027 2E18                        00            .byte	0
13028                                           ! 1546  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
13029 2E19                        00            .byte	0
13030 2E1A                        00            .byte	0
13031 2E1B                        00            .byte	0
13032 2E1C                        00            .byte	0
13033 2E1D                        3C            .byte	$3C
13034 2E1E                        66            .byte	$66
13035 2E1F                        60            .byte	$60
13036 2E20                        60            .byte	$60
13037 2E21                        66            .byte	$66
13038 2E22                        3C            .byte	$3C
13039 2E23                        0C            .byte	$C
13040 2E24                        06            .byte	6
13041 2E25                        3C            .byte	$3C
13042 2E26                        00            .byte	0
13043 2E27                        00            .byte	0
13044 2E28                        00            .byte	0
13045                                           ! 1547  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13046 2E29                        00            .byte	0
13047 2E2A                        10            .byte	$10
13048 2E2B                        38            .byte	$38
13049 2E2C                        6C            .byte	$6C
13050 2E2D                        00            .byte	0
13051 2E2E                        7C            .byte	$7C
13052 2E2F                        C6            .byte	$C6
13053 2E30                        FE            .byte	$FE
13054 2E31                        C0            .byte	$C0
13055 2E32                        C0            .byte	$C0
13056 2E33                        C6            .byte	$C6
13057 2E34                        7C            .byte	$7C
13058 2E35                        00            .byte	0
13059 2E36                        00            .byte	0
13060 2E37                        00            .byte	0
13061 2E38                        00            .byte	0
13062                                           ! 1548  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13063 2E39                        00            .byte	0
13064 2E3A                        00            .byte	0
13065 2E3B                        C6            .byte	$C6
13066 2E3C                        00            .byte	0
13067 2E3D                        00            .byte	0
13068 2E3E                        7C            .byte	$7C
13069 2E3F                        C6            .byte	$C6
13070 2E40                        FE            .byte	$FE
13071 2E41                        C0            .byte	$C0
13072 2E42                        C0            .byte	$C0
13073 2E43                        C6            .byte	$C6
13074 2E44                        7C            .byte	$7C
13075 2E45                        00            .byte	0
13076 2E46                        00            .byte	0
13077 2E47                        00            .byte	0
13078 2E48                        00            .byte	0
13079                                           ! 1549  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13080 2E49                        00            .byte	0
13081 2E4A                        60            .byte	$60
13082 2E4B                        30            .byte	$30
13083 2E4C                        18            .byte	$18
13084 2E4D                        00            .byte	0
13085 2E4E                        7C            .byte	$7C
13086 2E4F                        C6            .byte	$C6
13087 2E50                        FE            .byte	$FE
13088 2E51                        C0            .byte	$C0
13089 2E52                        C0            .byte	$C0
13090 2E53                        C6            .byte	$C6
13091 2E54                        7C            .byte	$7C
13092 2E55                        00            .byte	0
13093 2E56                        00            .byte	0
13094 2E57                        00            .byte	0
13095 2E58                        00            .byte	0
13096                                           ! 1550  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13097 2E59                        00            .byte	0
13098 2E5A                        00            .byte	0
13099 2E5B                        66            .byte	$66
13100 2E5C                        00            .byte	0
13101 2E5D                        00            .byte	0
13102 2E5E                        38            .byte	$38
13103 2E5F                        18            .byte	$18
13104 2E60                        18            .byte	$18
13105 2E61                        18            .byte	$18
13106 2E62                        18            .byte	$18
13107 2E63                        18            .byte	$18
13108 2E64                        3C            .byte	$3C
13109 2E65                        00            .byte	0
13110 2E66                        00            .byte	0
13111 2E67                        00            .byte	0
13112 2E68                        00            .byte	0
13113                                           ! 1551  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13114 2E69                        00            .byte	0
13115 2E6A                        18            .byte	$18
13116 2E6B                        3C            .byte	$3C
13117 2E6C                        66            .byte	$66
13118 2E6D                        00            .byte	0
13119 2E6E                        38            .byte	$38
13120 2E6F                        18            .byte	$18
13121 2E70                        18            .byte	$18
13122 2E71                        18            .byte	$18
13123 2E72                        18            .byte	$18
13124 2E73                        18            .byte	$18
13125 2E74                        3C            .byte	$3C
13126 2E75                        00            .byte	0
13127 2E76                        00            .byte	0
13128 2E77                        00            .byte	0
13129 2E78                        00            .byte	0
13130                                           ! 1552  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13131 2E79                        00            .byte	0
13132 2E7A                        60            .byte	$60
13133 2E7B                        30            .byte	$30
13134 2E7C                        18            .byte	$18
13135 2E7D                        00            .byte	0
13136 2E7E                        38            .byte	$38
13137 2E7F                        18            .byte	$18
13138 2E80                        18            .byte	$18
13139 2E81                        18            .byte	$18
13140 2E82                        18            .byte	$18
13141 2E83                        18            .byte	$18
13142 2E84                        3C            .byte	$3C
13143 2E85                        00            .byte	0
13144 2E86                        00            .byte	0
13145 2E87                        00            .byte	0
13146 2E88                        00            .byte	0
13147                                           ! 1553  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13148 2E89                        00            .byte	0
13149 2E8A                        C6            .byte	$C6
13150 2E8B                        00            .byte	0
13151 2E8C                        10            .byte	$10
13152 2E8D                        38            .byte	$38
13153 2E8E                        6C            .byte	$6C
13154 2E8F                        C6            .byte	$C6
13155 2E90                        C6            .byte	$C6
13156 2E91                        FE            .byte	$FE
13157 2E92                        C6            .byte	$C6
13158 2E93                        C6            .byte	$C6
13159 2E94                        C6            .byte	$C6
13160 2E95                        00            .byte	0
13161 2E96                        00            .byte	0
13162 2E97                        00            .byte	0
13163 2E98                        00            .byte	0
13164                                           ! 1554  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13165 2E99                        38            .byte	$38
13166 2E9A                        6C            .byte	$6C
13167 2E9B                        38            .byte	$38
13168 2E9C                        00            .byte	0
13169 2E9D                        38            .byte	$38
13170 2E9E                        6C            .byte	$6C
13171 2E9F                        C6            .byte	$C6
13172 2EA0                        C6            .byte	$C6
13173 2EA1                        FE            .byte	$FE
13174 2EA2                        C6            .byte	$C6
13175 2EA3                        C6            .byte	$C6
13176 2EA4                        C6            .byte	$C6
13177 2EA5                        00            .byte	0
13178 2EA6                        00            .byte	0
13179 2EA7                        00            .byte	0
13180 2EA8                        00            .byte	0
13181                                           ! 1555  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13182 2EA9                        18            .byte	$18
13183 2EAA                        30            .byte	$30
13184 2EAB                        60            .byte	$60
13185 2EAC                        00            .byte	0
13186 2EAD                        FE            .byte	$FE
13187 2EAE                        66            .byte	$66
13188 2EAF                        60            .byte	$60
13189 2EB0                        7C            .byte	$7C
13190 2EB1                        60            .byte	$60
13191 2EB2                        60            .byte	$60
13192 2EB3                        66            .byte	$66
13193 2EB4                        FE            .byte	$FE
13194 2EB5                        00            .byte	0
13195 2EB6                        00            .byte	0
13196 2EB7                        00            .byte	0
13197 2EB8                        00            .byte	0
13198                                           ! 1556  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13199 2EB9                        00            .byte	0
13200 2EBA                        00            .byte	0
13201 2EBB                        00            .byte	0
13202 2EBC                        00            .byte	0
13203 2EBD                        00            .byte	0
13204 2EBE                        6E            .byte	$6E
13205 2EBF                        3B            .byte	$3B
13206 2EC0                        1B            .byte	$1B
13207 2EC1                        7E            .byte	$7E
13208 2EC2                        D8            .byte	$D8
13209 2EC3                        DC            .byte	$DC
13210 2EC4                        77            .byte	$77
13211 2EC5                        00            .byte	0
13212 2EC6                        00            .byte	0
13213 2EC7                        00            .byte	0
13214 2EC8                        00            .byte	0
13215                                           ! 1557  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13216 2EC9                        00            .byte	0
13217 2ECA                        00            .byte	0
13218 2ECB                        3E            .byte	$3E
13219 2ECC                        6C            .byte	$6C
13220 2ECD                        CC            .byte	$CC
13221 2ECE                        CC            .byte	$CC
13222 2ECF                        FE            .byte	$FE
13223 2ED0                        CC            .byte	$CC
13224 2ED1                        CC            .byte	$CC
13225 2ED2                        CC            .byte	$CC
13226 2ED3                        CC            .byte	$CC
13227 2ED4                        CE            .byte	$CE
13228 2ED5                        00            .byte	0
13229 2ED6                        00            .byte	0
13230 2ED7                        00            .byte	0
13231 2ED8                        00            .byte	0
13232                                           ! 1558  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13233 2ED9                        00            .byte	0
13234 2EDA                        10            .byte	$10
13235 2EDB                        38            .byte	$38
13236 2EDC                        6C            .byte	$6C
13237 2EDD                        00            .byte	0
13238 2EDE                        7C            .byte	$7C
13239 2EDF                        C6            .byte	$C6
13240 2EE0                        C6            .byte	$C6
13241 2EE1                        C6            .byte	$C6
13242 2EE2                        C6            .byte	$C6
13243 2EE3                        C6            .byte	$C6
13244 2EE4                        7C            .byte	$7C
13245 2EE5                        00            .byte	0
13246 2EE6                        00            .byte	0
13247 2EE7                        00            .byte	0
13248 2EE8                        00            .byte	0
13249                                           ! 1559  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13250 2EE9                        00            .byte	0
13251 2EEA                        00            .byte	0
13252 2EEB                        C6            .byte	$C6
13253 2EEC                        00            .byte	0
13254 2EED                        00            .byte	0
13255 2EEE                        7C            .byte	$7C
13256 2EEF                        C6            .byte	$C6
13257 2EF0                        C6            .byte	$C6
13258 2EF1                        C6            .byte	$C6
13259 2EF2                        C6            .byte	$C6
13260 2EF3                        C6            .byte	$C6
13261 2EF4                        7C            .byte	$7C
13262 2EF5                        00            .byte	0
13263 2EF6                        00            .byte	0
13264 2EF7                        00            .byte	0
13265 2EF8                        00            .byte	0
13266                                           ! 1560  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13267 2EF9                        00            .byte	0
13268 2EFA                        60            .byte	$60
13269 2EFB                        30            .byte	$30
13270 2EFC                        18            .byte	$18
13271 2EFD                        00            .byte	0
13272 2EFE                        7C            .byte	$7C
13273 2EFF                        C6            .byte	$C6
13274 2F00                        C6            .byte	$C6
13275 2F01                        C6            .byte	$C6
13276 2F02                        C6            .byte	$C6
13277 2F03                        C6            .byte	$C6
13278 2F04                        7C            .byte	$7C
13279 2F05                        00            .byte	0
13280 2F06                        00            .byte	0
13281 2F07                        00            .byte	0
13282 2F08                        00            .byte	0
13283                                           ! 1561  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13284 2F09                        00            .byte	0
13285 2F0A                        30            .byte	$30
13286 2F0B                        78            .byte	$78
13287 2F0C                        CC            .byte	$CC
13288 2F0D                        00            .byte	0
13289 2F0E                        CC            .byte	$CC
13290 2F0F                        CC            .byte	$CC
13291 2F10                        CC            .byte	$CC
13292 2F11                        CC            .byte	$CC
13293 2F12                        CC            .byte	$CC
13294 2F13                        CC            .byte	$CC
13295 2F14                        76            .byte	$76
13296 2F15                        00            .byte	0
13297 2F16                        00            .byte	0
13298 2F17                        00            .byte	0
13299 2F18                        00            .byte	0
13300                                           ! 1562  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13301 2F19                        00            .byte	0
13302 2F1A                        60            .byte	$60
13303 2F1B                        30            .byte	$30
13304 2F1C                        18            .byte	$18
13305 2F1D                        00            .byte	0
13306 2F1E                        CC            .byte	$CC
13307 2F1F                        CC            .byte	$CC
13308 2F20                        CC            .byte	$CC
13309 2F21                        CC            .byte	$CC
13310 2F22                        CC            .byte	$CC
13311 2F23                        CC            .byte	$CC
13312 2F24                        76            .byte	$76
13313 2F25                        00            .byte	0
13314 2F26                        00            .byte	0
13315 2F27                        00            .byte	0
13316 2F28                        00            .byte	0
13317                                           ! 1563  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13318 2F29                        00            .byte	0
13319 2F2A                        00            .byte	0
13320 2F2B                        C6            .byte	$C6
13321 2F2C                        00            .byte	0
13322 2F2D                        00            .byte	0
13323 2F2E                        C6            .byte	$C6
13324 2F2F                        C6            .byte	$C6
13325 2F30                        C6            .byte	$C6
13326 2F31                        C6            .byte	$C6
13327 2F32                        C6            .byte	$C6
13328 2F33                        C6            .byte	$C6
13329 2F34                        7E            .byte	$7E
13330 2F35                        06            .byte	6
13331 2F36                        0C            .byte	$C
13332 2F37                        78            .byte	$78
13333 2F38                        00            .byte	0
13334                                           ! 1564  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 
13335 2F39                        00            .byte	0
13336 2F3A                        C6            .byte	$C6
13337 2F3B                        00            .byte	0
13338 2F3C                        7C            .byte	$7C
13339 2F3D                        C6            .byte	$C6
13340 2F3E                        C6            .byte	$C6
13341 2F3F                        C6            .byte	$C6
13342 2F40                        C6            .byte	$C6
13343 2F41                        C6            .byte	$C6
13344 2F42                        C6            .byte	$C6
13345 2F43                        C6            .byte	$C6
13346                                           ! 1564 0x7c, 0x00, 0x00, 0x00, 0x00,
13347 2F44                        7C            .byte	$7C
13348 2F45                        00            .byte	0
13349 2F46                        00            .byte	0
13350 2F47                        00            .byte	0
13351 2F48                        00            .byte	0
13352                                           ! 1565  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13353 2F49                        00            .byte	0
13354 2F4A                        C6            .byte	$C6
13355 2F4B                        00            .byte	0
13356 2F4C                        C6            .byte	$C6
13357 2F4D                        C6            .byte	$C6
13358 2F4E                        C6            .byte	$C6
13359 2F4F                        C6            .byte	$C6
13360 2F50                        C6            .byte	$C6
13361 2F51                        C6            .byte	$C6
13362 2F52                        C6            .byte	$C6
13363 2F53                        C6            .byte	$C6
13364 2F54                        7C            .byte	$7C
13365 2F55                        00            .byte	0
13366 2F56                        00            .byte	0
13367 2F57                        00            .byte	0
13368 2F58                        00            .byte	0
13369                                           ! 1566  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13370 2F59                        00            .byte	0
13371 2F5A                        18            .byte	$18
13372 2F5B                        18            .byte	$18
13373 2F5C                        7E            .byte	$7E
13374 2F5D                        C3            .byte	$C3
13375 2F5E                        C0            .byte	$C0
13376 2F5F                        C0            .byte	$C0
13377 2F60                        C0            .byte	$C0
13378 2F61                        C3            .byte	$C3
13379 2F62                        7E            .byte	$7E
13380 2F63                        18            .byte	$18
13381 2F64                        18            .byte	$18
13382 2F65                        00            .byte	0
13383 2F66                        00            .byte	0
13384 2F67                        00            .byte	0
13385 2F68                        00            .byte	0
13386                                           ! 1567  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13387 2F69                        00            .byte	0
13388 2F6A                        38            .byte	$38
13389 2F6B                        6C            .byte	$6C
13390 2F6C                        64            .byte	$64
13391 2F6D                        60            .byte	$60
13392 2F6E                        F0            .byte	$F0
13393 2F6F                        60            .byte	$60
13394 2F70                        60            .byte	$60
13395 2F71                        60            .byte	$60
13396 2F72                        60            .byte	$60
13397 2F73                        E6            .byte	$E6
13398 2F74                        FC            .byte	$FC
13399 2F75                        00            .byte	0
13400 2F76                        00            .byte	0
13401 2F77                        00            .byte	0
13402 2F78                        00            .byte	0
13403                                           ! 1568  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13404 2F79                        00            .byte	0
13405 2F7A                        00            .byte	0
13406 2F7B                        C3            .byte	$C3
13407 2F7C                        66            .byte	$66
13408 2F7D                        3C            .byte	$3C
13409 2F7E                        18            .byte	$18
13410 2F7F                        FF            .byte	$FF
13411 2F80                        18            .byte	$18
13412 2F81                        FF            .byte	$FF
13413 2F82                        18            .byte	$18
13414 2F83                        18            .byte	$18
13415 2F84                        18            .byte	$18
13416 2F85                        00            .byte	0
13417 2F86                        00            .byte	0
13418 2F87                        00            .byte	0
13419 2F88                        00            .byte	0
13420                                           ! 1569  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13421 2F89                        00            .byte	0
13422 2F8A                        FC            .byte	$FC
13423 2F8B                        66            .byte	$66
13424 2F8C                        66            .byte	$66
13425 2F8D                        7C            .byte	$7C
13426 2F8E                        62            .byte	$62
13427 2F8F                        66            .byte	$66
13428 2F90                        6F            .byte	$6F
13429 2F91                        66            .byte	$66
13430 2F92                        66            .byte	$66
13431 2F93                        66            .byte	$66
13432 2F94                        F3            .byte	$F3
13433 2F95                        00            .byte	0
13434 2F96                        00            .byte	0
13435 2F97                        00            .byte	0
13436 2F98                        00            .byte	0
13437                                           ! 1570  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13438 2F99                        00            .byte	0
13439 2F9A                        0E            .byte	$E
13440 2F9B                        1B            .byte	$1B
13441 2F9C                        18            .byte	$18
13442 2F9D                        18            .byte	$18
13443 2F9E                        18            .byte	$18
13444 2F9F                        7E            .byte	$7E
13445 2FA0                        18            .byte	$18
13446 2FA1                        18            .byte	$18
13447 2FA2                        18            .byte	$18
13448 2FA3                        18            .byte	$18
13449 2FA4                        18            .byte	$18
13450 2FA5                        D8            .byte	$D8
13451 2FA6                        70            .byte	$70
13452 2FA7                        00            .byte	0
13453 2FA8                        00            .byte	0
13454                                           ! 1571  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13455 2FA9                        00            .byte	0
13456 2FAA                        18            .byte	$18
13457 2FAB                        30            .byte	$30
13458 2FAC                        60            .byte	$60
13459 2FAD                        00            .byte	0
13460 2FAE                        78            .byte	$78
13461 2FAF                        0C            .byte	$C
13462 2FB0                        7C            .byte	$7C
13463 2FB1                        CC            .byte	$CC
13464 2FB2                        CC            .byte	$CC
13465 2FB3                        CC            .byte	$CC
13466 2FB4                        76            .byte	$76
13467 2FB5                        00            .byte	0
13468 2FB6                        00            .byte	0
13469 2FB7                        00            .byte	0
13470 2FB8                        00            .byte	0
13471                                           ! 1572  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13472 2FB9                        00            .byte	0
13473 2FBA                        0C            .byte	$C
13474 2FBB                        18            .byte	$18
13475 2FBC                        30            .byte	$30
13476 2FBD                        00            .byte	0
13477 2FBE                        38            .byte	$38
13478 2FBF                        18            .byte	$18
13479 2FC0                        18            .byte	$18
13480 2FC1                        18            .byte	$18
13481 2FC2                        18            .byte	$18
13482 2FC3                        18            .byte	$18
13483 2FC4                        3C            .byte	$3C
13484 2FC5                        00            .byte	0
13485 2FC6                        00            .byte	0
13486 2FC7                        00            .byte	0
13487 2FC8                        00            .byte	0
13488                                           ! 1573  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13489 2FC9                        00            .byte	0
13490 2FCA                        18            .byte	$18
13491 2FCB                        30            .byte	$30
13492 2FCC                        60            .byte	$60
13493 2FCD                        00            .byte	0
13494 2FCE                        7C            .byte	$7C
13495 2FCF                        C6            .byte	$C6
13496 2FD0                        C6            .byte	$C6
13497 2FD1                        C6            .byte	$C6
13498 2FD2                        C6            .byte	$C6
13499 2FD3                        C6            .byte	$C6
13500 2FD4                        7C            .byte	$7C
13501 2FD5                        00            .byte	0
13502 2FD6                        00            .byte	0
13503 2FD7                        00            .byte	0
13504 2FD8                        00            .byte	0
13505                                           ! 1574  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13506 2FD9                        00            .byte	0
13507 2FDA                        18            .byte	$18
13508 2FDB                        30            .byte	$30
13509 2FDC                        60            .byte	$60
13510 2FDD                        00            .byte	0
13511 2FDE                        CC            .byte	$CC
13512 2FDF                        CC            .byte	$CC
13513 2FE0                        CC            .byte	$CC
13514 2FE1                        CC            .byte	$CC
13515 2FE2                        CC            .byte	$CC
13516 2FE3                        CC            .byte	$CC
13517 2FE4                        76            .byte	$76
13518 2FE5                        00            .byte	0
13519 2FE6                        00            .byte	0
13520 2FE7                        00            .byte	0
13521 2FE8                        00            .byte	0
13522                                           ! 1575  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13523 2FE9                        00            .byte	0
13524 2FEA                        00            .byte	0
13525 2FEB                        76            .byte	$76
13526 2FEC                        DC            .byte	$DC
13527 2FED                        00            .byte	0
13528 2FEE                        DC            .byte	$DC
13529 2FEF                        66            .byte	$66
13530 2FF0                        66            .byte	$66
13531 2FF1                        66            .byte	$66
13532 2FF2                        66            .byte	$66
13533 2FF3                        66            .byte	$66
13534 2FF4                        66            .byte	$66
13535 2FF5                        00            .byte	0
13536 2FF6                        00            .byte	0
13537 2FF7                        00            .byte	0
13538 2FF8                        00            .byte	0
13539                                           ! 1576  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13540 2FF9                        76            .byte	$76
13541 2FFA                        DC            .byte	$DC
13542 2FFB                        00            .byte	0
13543 2FFC                        C6            .byte	$C6
13544 2FFD                        E6            .byte	$E6
13545 2FFE                        F6            .byte	$F6
13546 2FFF                        FE            .byte	$FE
13547 3000                        DE            .byte	$DE
13548 3001                        CE            .byte	$CE
13549 3002                        C6            .byte	$C6
13550 3003                        C6            .byte	$C6
13551 3004                        C6            .byte	$C6
13552 3005                        00            .byte	0
13553 3006                        00            .byte	0
13554 3007                        00            .byte	0
13555 3008                        00            .byte	0
13556                                           ! 1577  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13557 3009                        00            .byte	0
13558 300A                        3C            .byte	$3C
13559 300B                        6C            .byte	$6C
13560 300C                        6C            .byte	$6C
13561 300D                        3E            .byte	$3E
13562 300E                        00            .byte	0
13563 300F                        7E            .byte	$7E
13564 3010                        00            .byte	0
13565 3011                        00            .byte	0
13566 3012                        00            .byte	0
13567 3013                        00            .byte	0
13568 3014                        00            .byte	0
13569 3015                        00            .byte	0
13570 3016                        00            .byte	0
13571 3017                        00            .byte	0
13572 3018                        00            .byte	0
13573                                           ! 1578  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13574 3019                        00            .byte	0
13575 301A                        38            .byte	$38
13576 301B                        6C            .byte	$6C
13577 301C                        6C            .byte	$6C
13578 301D                        38            .byte	$38
13579 301E                        00            .byte	0
13580 301F                        7C            .byte	$7C
13581 3020                        00            .byte	0
13582 3021                        00            .byte	0
13583 3022                        00            .byte	0
13584 3023                        00            .byte	0
13585 3024                        00            .byte	0
13586 3025                        00            .byte	0
13587 3026                        00            .byte	0
13588 3027                        00            .byte	0
13589 3028                        00            .byte	0
13590                                           ! 1579  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13591 3029                        00            .byte	0
13592 302A                        00            .byte	0
13593 302B                        30            .byte	$30
13594 302C                        30            .byte	$30
13595 302D                        00            .byte	0
13596 302E                        30            .byte	$30
13597 302F                        30            .byte	$30
13598 3030                        60            .byte	$60
13599 3031                        C0            .byte	$C0
13600 3032                        C6            .byte	$C6
13601 3033                        C6            .byte	$C6
13602 3034                        7C            .byte	$7C
13603 3035                        00            .byte	0
13604 3036                        00            .byte	0
13605 3037                        00            .byte	0
13606 3038                        00            .byte	0
13607                                           ! 1580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13608 3039                        00            .byte	0
13609 303A                        00            .byte	0
13610 303B                        00            .byte	0
13611 303C                        00            .byte	0
13612 303D                        00            .byte	0
13613 303E                        00            .byte	0
13614 303F                        FE            .byte	$FE
13615 3040                        C0            .byte	$C0
13616 3041                        C0            .byte	$C0
13617 3042                        C0            .byte	$C0
13618 3043                        C0            .byte	$C0
13619 3044                        00            .byte	0
13620 3045                        00            .byte	0
13621 3046                        00            .byte	0
13622 3047                        00            .byte	0
13623 3048                        00            .byte	0
13624                                           ! 1581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13625 3049                        00            .byte	0
13626 304A                        00            .byte	0
13627 304B                        00            .byte	0
13628 304C                        00            .byte	0
13629 304D                        00            .byte	0
13630 304E                        00            .byte	0
13631 304F                        FE            .byte	$FE
13632 3050                        06            .byte	6
13633 3051                        06            .byte	6
13634 3052                        06            .byte	6
13635 3053                        06            .byte	6
13636 3054                        00            .byte	0
13637 3055                        00            .byte	0
13638 3056                        00            .byte	0
13639 3057                        00            .byte	0
13640 3058                        00            .byte	0
13641                                           ! 1582  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13642 3059                        00            .byte	0
13643 305A                        C0            .byte	$C0
13644 305B                        C0            .byte	$C0
13645 305C                        C2            .byte	$C2
13646 305D                        C6            .byte	$C6
13647 305E                        CC            .byte	$CC
13648 305F                        18            .byte	$18
13649 3060                        30            .byte	$30
13650 3061                        60            .byte	$60
13651 3062                        CE            .byte	$CE
13652 3063                        9B            .byte	$9B
13653 3064                        06            .byte	6
13654 3065                        0C            .byte	$C
13655 3066                        1F            .byte	$1F
13656 3067                        00            .byte	0
13657 3068                        00            .byte	0
13658                                           ! 1583  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13659 3069                        00            .byte	0
13660 306A                        C0            .byte	$C0
13661 306B                        C0            .byte	$C0
13662 306C                        C2            .byte	$C2
13663 306D                        C6            .byte	$C6
13664 306E                        CC            .byte	$CC
13665 306F                        18            .byte	$18
13666 3070                        30            .byte	$30
13667 3071                        66            .byte	$66
13668 3072                        CE            .byte	$CE
13669 3073                        96            .byte	$96
13670 3074                        3E            .byte	$3E
13671 3075                        06            .byte	6
13672 3076                        06            .byte	6
13673 3077                        00            .byte	0
13674 3078                        00            .byte	0
13675                                           ! 1584  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13676 3079                        00            .byte	0
13677 307A                        00            .byte	0
13678 307B                        18            .byte	$18
13679 307C                        18            .byte	$18
13680 307D                        00            .byte	0
13681 307E                        18            .byte	$18
13682 307F                        18            .byte	$18
13683 3080                        18            .byte	$18
13684 3081                        3C            .byte	$3C
13685 3082                        3C            .byte	$3C
13686 3083                        3C            .byte	$3C
13687 3084                        18            .byte	$18
13688 3085                        00            .byte	0
13689 3086                        00            .byte	0
13690 3087                        00            .byte	0
13691 3088                        00            .byte	0
13692                                           ! 1585  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00,
13693 3089                        00            .byte	0
13694 308A                        00            .byte	0
13695 308B                        00            .byte	0
13696 308C                        00            .byte	0
13697 308D                        00            .byte	0
13698 308E                        36            .byte	$36
13699 308F                        6C            .byte	$6C
13700 3090                        D8            .byte	$D8
13701 3091                        6C            .byte	$6C
13702 3092                        36            .byte	$36
13703 3093                        00            .byte	0
13704 3094                        00            .byte	0
13705                                           ! 1585  0x00, 0x00, 0x00,
13706 3095                        00            .byte	0
13707 3096                        00            .byte	0
13708 3097                        00            .byte	0
13709 3098                        00            .byte	0
13710                                           ! 1586  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13711 3099                        00            .byte	0
13712 309A                        00            .byte	0
13713 309B                        00            .byte	0
13714 309C                        00            .byte	0
13715 309D                        00            .byte	0
13716 309E                        D8            .byte	$D8
13717 309F                        6C            .byte	$6C
13718 30A0                        36            .byte	$36
13719 30A1                        6C            .byte	$6C
13720 30A2                        D8            .byte	$D8
13721 30A3                        00            .byte	0
13722 30A4                        00            .byte	0
13723 30A5                        00            .byte	0
13724 30A6                        00            .byte	0
13725 30A7                        00            .byte	0
13726 30A8                        00            .byte	0
13727                                           ! 1587  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13728 30A9                        11            .byte	$11
13729 30AA                        44            .byte	$44
13730 30AB                        11            .byte	$11
13731 30AC                        44            .byte	$44
13732 30AD                        11            .byte	$11
13733 30AE                        44            .byte	$44
13734 30AF                        11            .byte	$11
13735 30B0                        44            .byte	$44
13736 30B1                        11            .byte	$11
13737 30B2                        44            .byte	$44
13738 30B3                        11            .byte	$11
13739 30B4                        44            .byte	$44
13740 30B5                        11            .byte	$11
13741 30B6                        44            .byte	$44
13742 30B7                        11            .byte	$11
13743 30B8                        44            .byte	$44
13744                                           ! 1588  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13745 30B9                        55            .byte	$55
13746 30BA                        AA            .byte	$AA
13747 30BB                        55            .byte	$55
13748 30BC                        AA            .byte	$AA
13749 30BD                        55            .byte	$55
13750 30BE                        AA            .byte	$AA
13751 30BF                        55            .byte	$55
13752 30C0                        AA            .byte	$AA
13753 30C1                        55            .byte	$55
13754 30C2                        AA            .byte	$AA
13755 30C3                        55            .byte	$55
13756 30C4                        AA            .byte	$AA
13757 30C5                        55            .byte	$55
13758 30C6                        AA            .byte	$AA
13759 30C7                        55            .byte	$55
13760 30C8                        AA            .byte	$AA
13761                                           ! 1589  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13762 30C9                        DD            .byte	$DD
13763 30CA                        77            .byte	$77
13764 30CB                        DD            .byte	$DD
13765 30CC                        77            .byte	$77
13766 30CD                        DD            .byte	$DD
13767 30CE                        77            .byte	$77
13768 30CF                        DD            .byte	$DD
13769 30D0                        77            .byte	$77
13770 30D1                        DD            .byte	$DD
13771 30D2                        77            .byte	$77
13772 30D3                        DD            .byte	$DD
13773 30D4                        77            .byte	$77
13774 30D5                        DD            .byte	$DD
13775 30D6                        77            .byte	$77
13776 30D7                        DD            .byte	$DD
13777 30D8                        77            .byte	$77
13778                                           ! 1590  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13779 30D9                        18            .byte	$18
13780 30DA                        18            .byte	$18
13781 30DB                        18            .byte	$18
13782 30DC                        18            .byte	$18
13783 30DD                        18            .byte	$18
13784 30DE                        18            .byte	$18
13785 30DF                        18            .byte	$18
13786 30E0                        18            .byte	$18
13787 30E1                        18            .byte	$18
13788 30E2                        18            .byte	$18
13789 30E3                        18            .byte	$18
13790 30E4                        18            .byte	$18
13791 30E5                        18            .byte	$18
13792 30E6                        18            .byte	$18
13793 30E7                        18            .byte	$18
13794 30E8                        18            .byte	$18
13795                                           ! 1591  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13796 30E9                        18            .byte	$18
13797 30EA                        18            .byte	$18
13798 30EB                        18            .byte	$18
13799 30EC                        18            .byte	$18
13800 30ED                        18            .byte	$18
13801 30EE                        18            .byte	$18
13802 30EF                        18            .byte	$18
13803 30F0                        F8            .byte	$F8
13804 30F1                        18            .byte	$18
13805 30F2                        18            .byte	$18
13806 30F3                        18            .byte	$18
13807 30F4                        18            .byte	$18
13808 30F5                        18            .byte	$18
13809 30F6                        18            .byte	$18
13810 30F7                        18            .byte	$18
13811 30F8                        18            .byte	$18
13812                                           ! 1592  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13813 30F9                        18            .byte	$18
13814 30FA                        18            .byte	$18
13815 30FB                        18            .byte	$18
13816 30FC                        18            .byte	$18
13817 30FD                        18            .byte	$18
13818 30FE                        F8            .byte	$F8
13819 30FF                        18            .byte	$18
13820 3100                        F8            .byte	$F8
13821 3101                        18            .byte	$18
13822 3102                        18            .byte	$18
13823 3103                        18            .byte	$18
13824 3104                        18            .byte	$18
13825 3105                        18            .byte	$18
13826 3106                        18            .byte	$18
13827 3107                        18            .byte	$18
13828 3108                        18            .byte	$18
13829                                           ! 1593  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13830 3109                        36            .byte	$36
13831 310A                        36            .byte	$36
13832 310B                        36            .byte	$36
13833 310C                        36            .byte	$36
13834 310D                        36            .byte	$36
13835 310E                        36            .byte	$36
13836 310F                        36            .byte	$36
13837 3110                        F6            .byte	$F6
13838 3111                        36            .byte	$36
13839 3112                        36            .byte	$36
13840 3113                        36            .byte	$36
13841 3114                        36            .byte	$36
13842 3115                        36            .byte	$36
13843 3116                        36            .byte	$36
13844 3117                        36            .byte	$36
13845 3118                        36            .byte	$36
13846                                           ! 1594  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13847 3119                        00            .byte	0
13848 311A                        00            .byte	0
13849 311B                        00            .byte	0
13850 311C                        00            .byte	0
13851 311D                        00            .byte	0
13852 311E                        00            .byte	0
13853 311F                        00            .byte	0
13854 3120                        FE            .byte	$FE
13855 3121                        36            .byte	$36
13856 3122                        36            .byte	$36
13857 3123                        36            .byte	$36
13858 3124                        36            .byte	$36
13859 3125                        36            .byte	$36
13860 3126                        36            .byte	$36
13861 3127                        36            .byte	$36
13862 3128                        36            .byte	$36
13863                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13864 3129                        00            .byte	0
13865 312A                        00            .byte	0
13866 312B                        00            .byte	0
13867 312C                        00            .byte	0
13868 312D                        00            .byte	0
13869 312E                        F8            .byte	$F8
13870 312F                        18            .byte	$18
13871 3130                        F8            .byte	$F8
13872 3131                        18            .byte	$18
13873 3132                        18            .byte	$18
13874 3133                        18            .byte	$18
13875 3134                        18            .byte	$18
13876 3135                        18            .byte	$18
13877 3136                        18            .byte	$18
13878 3137                        18            .byte	$18
13879 3138                        18            .byte	$18
13880                                           ! 1596  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13881 3139                        36            .byte	$36
13882 313A                        36            .byte	$36
13883 313B                        36            .byte	$36
13884 313C                        36            .byte	$36
13885 313D                        36            .byte	$36
13886 313E                        F6            .byte	$F6
13887 313F                        06            .byte	6
13888 3140                        F6            .byte	$F6
13889 3141                        36            .byte	$36
13890 3142                        36            .byte	$36
13891 3143                        36            .byte	$36
13892 3144                        36            .byte	$36
13893 3145                        36            .byte	$36
13894 3146                        36            .byte	$36
13895 3147                        36            .byte	$36
13896 3148                        36            .byte	$36
13897                                           ! 1597  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13898 3149                        36            .byte	$36
13899 314A                        36            .byte	$36
13900 314B                        36            .byte	$36
13901 314C                        36            .byte	$36
13902 314D                        36            .byte	$36
13903 314E                        36            .byte	$36
13904 314F                        36            .byte	$36
13905 3150                        36            .byte	$36
13906 3151                        36            .byte	$36
13907 3152                        36            .byte	$36
13908 3153                        36            .byte	$36
13909 3154                        36            .byte	$36
13910 3155                        36            .byte	$36
13911 3156                        36            .byte	$36
13912 3157                        36            .byte	$36
13913 3158                        36            .byte	$36
13914                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13915 3159                        00            .byte	0
13916 315A                        00            .byte	0
13917 315B                        00            .byte	0
13918 315C                        00            .byte	0
13919 315D                        00            .byte	0
13920 315E                        FE            .byte	$FE
13921 315F                        06            .byte	6
13922 3160                        F6            .byte	$F6
13923 3161                        36            .byte	$36
13924 3162                        36            .byte	$36
13925 3163                        36            .byte	$36
13926 3164                        36            .byte	$36
13927 3165                        36            .byte	$36
13928 3166                        36            .byte	$36
13929 3167                        36            .byte	$36
13930 3168                        36            .byte	$36
13931                                           ! 1599  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13932 3169                        36            .byte	$36
13933 316A                        36            .byte	$36
13934 316B                        36            .byte	$36
13935 316C                        36            .byte	$36
13936 316D                        36            .byte	$36
13937 316E                        F6            .byte	$F6
13938 316F                        06            .byte	6
13939 3170                        FE            .byte	$FE
13940 3171                        00            .byte	0
13941 3172                        00            .byte	0
13942 3173                        00            .byte	0
13943 3174                        00            .byte	0
13944 3175                        00            .byte	0
13945 3176                        00            .byte	0
13946 3177                        00            .byte	0
13947 3178                        00            .byte	0
13948                                           ! 1600  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13949 3179                        36            .byte	$36
13950 317A                        36            .byte	$36
13951 317B                        36            .byte	$36
13952 317C                        36            .byte	$36
13953 317D                        36            .byte	$36
13954 317E                        36            .byte	$36
13955 317F                        36            .byte	$36
13956 3180                        FE            .byte	$FE
13957 3181                        00            .byte	0
13958 3182                        00            .byte	0
13959 3183                        00            .byte	0
13960 3184                        00            .byte	0
13961 3185                        00            .byte	0
13962 3186                        00            .byte	0
13963 3187                        00            .byte	0
13964 3188                        00            .byte	0
13965                                           ! 1601  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13966 3189                        18            .byte	$18
13967 318A                        18            .byte	$18
13968 318B                        18            .byte	$18
13969 318C                        18            .byte	$18
13970 318D                        18            .byte	$18
13971 318E                        F8            .byte	$F8
13972 318F                        18            .byte	$18
13973 3190                        F8            .byte	$F8
13974 3191                        00            .byte	0
13975 3192                        00            .byte	0
13976 3193                        00            .byte	0
13977 3194                        00            .byte	0
13978 3195                        00            .byte	0
13979 3196                        00            .byte	0
13980 3197                        00            .byte	0
13981 3198                        00            .byte	0
13982                                           ! 1602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13983 3199                        00            .byte	0
13984 319A                        00            .byte	0
13985 319B                        00            .byte	0
13986 319C                        00            .byte	0
13987 319D                        00            .byte	0
13988 319E                        00            .byte	0
13989 319F                        00            .byte	0
13990 31A0                        F8            .byte	$F8
13991 31A1                        18            .byte	$18
13992 31A2                        18            .byte	$18
13993 31A3                        18            .byte	$18
13994 31A4                        18            .byte	$18
13995 31A5                        18            .byte	$18
13996 31A6                        18            .byte	$18
13997 31A7                        18            .byte	$18
13998 31A8                        18            .byte	$18
13999                                           ! 1603  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14000 31A9                        18            .byte	$18
14001 31AA                        18            .byte	$18
14002 31AB                        18            .byte	$18
14003 31AC                        18            .byte	$18
14004 31AD                        18            .byte	$18
14005 31AE                        18            .byte	$18
14006 31AF                        18            .byte	$18
14007 31B0                        1F            .byte	$1F
14008 31B1                        00            .byte	0
14009 31B2                        00            .byte	0
14010 31B3                        00            .byte	0
14011 31B4                        00            .byte	0
14012 31B5                        00            .byte	0
14013 31B6                        00            .byte	0
14014 31B7                        00            .byte	0
14015 31B8                        00            .byte	0
14016                                           ! 1604  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14017 31B9                        18            .byte	$18
14018 31BA                        18            .byte	$18
14019 31BB                        18            .byte	$18
14020 31BC                        18            .byte	$18
14021 31BD                        18            .byte	$18
14022 31BE                        18            .byte	$18
14023 31BF                        18            .byte	$18
14024 31C0                        FF            .byte	$FF
14025 31C1                        00            .byte	0
14026 31C2                        00            .byte	0
14027 31C3                        00            .byte	0
14028 31C4                        00            .byte	0
14029 31C5                        00            .byte	0
14030 31C6                        00            .byte	0
14031 31C7                        00            .byte	0
14032 31C8                        00            .byte	0
14033                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14034 31C9                        00            .byte	0
14035 31CA                        00            .byte	0
14036 31CB                        00            .byte	0
14037 31CC                        00            .byte	0
14038 31CD                        00            .byte	0
14039 31CE                        00            .byte	0
14040 31CF                        00            .byte	0
14041 31D0                        FF            .byte	$FF
14042 31D1                        18            .byte	$18
14043 31D2                        18            .byte	$18
14044 31D3                        18            .byte	$18
14045 31D4                        18            .byte	$18
14046 31D5                        18            .byte	$18
14047 31D6                        18            .byte	$18
14048 31D7                        18            .byte	$18
14049 31D8                        18            .byte	$18
14050                                           ! 1606  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
14051 31D9                        18            .byte	$18
14052 31DA                        18            .byte	$18
14053 31DB                        18            .byte	$18
14054 31DC                        18            .byte	$18
14055 31DD                        18            .byte	$18
14056 31DE                        18            .byte	$18
14057 31DF                        18            .byte	$18
14058 31E0                        1F            .byte	$1F
14059 31E1                        18            .byte	$18
14060 31E2                        18            .byte	$18
14061 31E3                        18            .byte	$18
14062 31E4                        18            .byte	$18
14063 31E5                        18            .byte	$18
14064 31E6                        18            .byte	$18
14065                                           ! 1606 , 0x18,
14066 31E7                        18            .byte	$18
14067 31E8                        18            .byte	$18
14068                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14069 31E9                        00            .byte	0
14070 31EA                        00            .byte	0
14071 31EB                        00            .byte	0
14072 31EC                        00            .byte	0
14073 31ED                        00            .byte	0
14074 31EE                        00            .byte	0
14075 31EF                        00            .byte	0
14076 31F0                        FF            .byte	$FF
14077 31F1                        00            .byte	0
14078 31F2                        00            .byte	0
14079 31F3                        00            .byte	0
14080 31F4                        00            .byte	0
14081 31F5                        00            .byte	0
14082 31F6                        00            .byte	0
14083 31F7                        00            .byte	0
14084 31F8                        00            .byte	0
14085                                           ! 1608  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14086 31F9                        18            .byte	$18
14087 31FA                        18            .byte	$18
14088 31FB                        18            .byte	$18
14089 31FC                        18            .byte	$18
14090 31FD                        18            .byte	$18
14091 31FE                        18            .byte	$18
14092 31FF                        18            .byte	$18
14093 3200                        FF            .byte	$FF
14094 3201                        18            .byte	$18
14095 3202                        18            .byte	$18
14096 3203                        18            .byte	$18
14097 3204                        18            .byte	$18
14098 3205                        18            .byte	$18
14099 3206                        18            .byte	$18
14100 3207                        18            .byte	$18
14101 3208                        18            .byte	$18
14102                                           ! 1609  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14103 3209                        18            .byte	$18
14104 320A                        18            .byte	$18
14105 320B                        18            .byte	$18
14106 320C                        18            .byte	$18
14107 320D                        18            .byte	$18
14108 320E                        1F            .byte	$1F
14109 320F                        18            .byte	$18
14110 3210                        1F            .byte	$1F
14111 3211                        18            .byte	$18
14112 3212                        18            .byte	$18
14113 3213                        18            .byte	$18
14114 3214                        18            .byte	$18
14115 3215                        18            .byte	$18
14116 3216                        18            .byte	$18
14117 3217                        18            .byte	$18
14118 3218                        18            .byte	$18
14119                                           ! 1610  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14120 3219                        36            .byte	$36
14121 321A                        36            .byte	$36
14122 321B                        36            .byte	$36
14123 321C                        36            .byte	$36
14124 321D                        36            .byte	$36
14125 321E                        36            .byte	$36
14126 321F                        36            .byte	$36
14127 3220                        37            .byte	$37
14128 3221                        36            .byte	$36
14129 3222                        36            .byte	$36
14130 3223                        36            .byte	$36
14131 3224                        36            .byte	$36
14132 3225                        36            .byte	$36
14133 3226                        36            .byte	$36
14134 3227                        36            .byte	$36
14135 3228                        36            .byte	$36
14136                                           ! 1611  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14137 3229                        36            .byte	$36
14138 322A                        36            .byte	$36
14139 322B                        36            .byte	$36
14140 322C                        36            .byte	$36
14141 322D                        36            .byte	$36
14142 322E                        37            .byte	$37
14143 322F                        30            .byte	$30
14144 3230                        3F            .byte	$3F
14145 3231                        00            .byte	0
14146 3232                        00            .byte	0
14147 3233                        00            .byte	0
14148 3234                        00            .byte	0
14149 3235                        00            .byte	0
14150 3236                        00            .byte	0
14151 3237                        00            .byte	0
14152 3238                        00            .byte	0
14153                                           ! 1612  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14154 3239                        00            .byte	0
14155 323A                        00            .byte	0
14156 323B                        00            .byte	0
14157 323C                        00            .byte	0
14158 323D                        00            .byte	0
14159 323E                        3F            .byte	$3F
14160 323F                        30            .byte	$30
14161 3240                        37            .byte	$37
14162 3241                        36            .byte	$36
14163 3242                        36            .byte	$36
14164 3243                        36            .byte	$36
14165 3244                        36            .byte	$36
14166 3245                        36            .byte	$36
14167 3246                        36            .byte	$36
14168 3247                        36            .byte	$36
14169 3248                        36            .byte	$36
14170                                           ! 1613  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14171 3249                        36            .byte	$36
14172 324A                        36            .byte	$36
14173 324B                        36            .byte	$36
14174 324C                        36            .byte	$36
14175 324D                        36            .byte	$36
14176 324E                        F7            .byte	$F7
14177 324F                        00            .byte	0
14178 3250                        FF            .byte	$FF
14179 3251                        00            .byte	0
14180 3252                        00            .byte	0
14181 3253                        00            .byte	0
14182 3254                        00            .byte	0
14183 3255                        00            .byte	0
14184 3256                        00            .byte	0
14185 3257                        00            .byte	0
14186 3258                        00            .byte	0
14187                                           ! 1614  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14188 3259                        00            .byte	0
14189 325A                        00            .byte	0
14190 325B                        00            .byte	0
14191 325C                        00            .byte	0
14192 325D                        00            .byte	0
14193 325E                        FF            .byte	$FF
14194 325F                        00            .byte	0
14195 3260                        F7            .byte	$F7
14196 3261                        36            .byte	$36
14197 3262                        36            .byte	$36
14198 3263                        36            .byte	$36
14199 3264                        36            .byte	$36
14200 3265                        36            .byte	$36
14201 3266                        36            .byte	$36
14202 3267                        36            .byte	$36
14203 3268                        36            .byte	$36
14204                                           ! 1615  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14205 3269                        36            .byte	$36
14206 326A                        36            .byte	$36
14207 326B                        36            .byte	$36
14208 326C                        36            .byte	$36
14209 326D                        36            .byte	$36
14210 326E                        37            .byte	$37
14211 326F                        30            .byte	$30
14212 3270                        37            .byte	$37
14213 3271                        36            .byte	$36
14214 3272                        36            .byte	$36
14215 3273                        36            .byte	$36
14216 3274                        36            .byte	$36
14217 3275                        36            .byte	$36
14218 3276                        36            .byte	$36
14219 3277                        36            .byte	$36
14220 3278                        36            .byte	$36
14221                                           ! 1616  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14222 3279                        00            .byte	0
14223 327A                        00            .byte	0
14224 327B                        00            .byte	0
14225 327C                        00            .byte	0
14226 327D                        00            .byte	0
14227 327E                        FF            .byte	$FF
14228 327F                        00            .byte	0
14229 3280                        FF            .byte	$FF
14230 3281                        00            .byte	0
14231 3282                        00            .byte	0
14232 3283                        00            .byte	0
14233 3284                        00            .byte	0
14234 3285                        00            .byte	0
14235 3286                        00            .byte	0
14236 3287                        00            .byte	0
14237 3288                        00            .byte	0
14238                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14239 3289                        36            .byte	$36
14240 328A                        36            .byte	$36
14241 328B                        36            .byte	$36
14242 328C                        36            .byte	$36
14243 328D                        36            .byte	$36
14244 328E                        F7            .byte	$F7
14245 328F                        00            .byte	0
14246 3290                        F7            .byte	$F7
14247 3291                        36            .byte	$36
14248 3292                        36            .byte	$36
14249 3293                        36            .byte	$36
14250 3294                        36            .byte	$36
14251 3295                        36            .byte	$36
14252 3296                        36            .byte	$36
14253 3297                        36            .byte	$36
14254 3298                        36            .byte	$36
14255                                           ! 1618  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14256 3299                        18            .byte	$18
14257 329A                        18            .byte	$18
14258 329B                        18            .byte	$18
14259 329C                        18            .byte	$18
14260 329D                        18            .byte	$18
14261 329E                        FF            .byte	$FF
14262 329F                        00            .byte	0
14263 32A0                        FF            .byte	$FF
14264 32A1                        00            .byte	0
14265 32A2                        00            .byte	0
14266 32A3                        00            .byte	0
14267 32A4                        00            .byte	0
14268 32A5                        00            .byte	0
14269 32A6                        00            .byte	0
14270 32A7                        00            .byte	0
14271 32A8                        00            .byte	0
14272                                           ! 1619  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14273 32A9                        36            .byte	$36
14274 32AA                        36            .byte	$36
14275 32AB                        36            .byte	$36
14276 32AC                        36            .byte	$36
14277 32AD                        36            .byte	$36
14278 32AE                        36            .byte	$36
14279 32AF                        36            .byte	$36
14280 32B0                        FF            .byte	$FF
14281 32B1                        00            .byte	0
14282 32B2                        00            .byte	0
14283 32B3                        00            .byte	0
14284 32B4                        00            .byte	0
14285 32B5                        00            .byte	0
14286 32B6                        00            .byte	0
14287 32B7                        00            .byte	0
14288 32B8                        00            .byte	0
14289                                           ! 1620  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14290 32B9                        00            .byte	0
14291 32BA                        00            .byte	0
14292 32BB                        00            .byte	0
14293 32BC                        00            .byte	0
14294 32BD                        00            .byte	0
14295 32BE                        FF            .byte	$FF
14296 32BF                        00            .byte	0
14297 32C0                        FF            .byte	$FF
14298 32C1                        18            .byte	$18
14299 32C2                        18            .byte	$18
14300 32C3                        18            .byte	$18
14301 32C4                        18            .byte	$18
14302 32C5                        18            .byte	$18
14303 32C6                        18            .byte	$18
14304 32C7                        18            .byte	$18
14305 32C8                        18            .byte	$18
14306                                           ! 1621  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14307 32C9                        00            .byte	0
14308 32CA                        00            .byte	0
14309 32CB                        00            .byte	0
14310 32CC                        00            .byte	0
14311 32CD                        00            .byte	0
14312 32CE                        00            .byte	0
14313 32CF                        00            .byte	0
14314 32D0                        FF            .byte	$FF
14315 32D1                        36            .byte	$36
14316 32D2                        36            .byte	$36
14317 32D3                        36            .byte	$36
14318 32D4                        36            .byte	$36
14319 32D5                        36            .byte	$36
14320 32D6                        36            .byte	$36
14321 32D7                        36            .byte	$36
14322 32D8                        36            .byte	$36
14323                                           ! 1622  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14324 32D9                        36            .byte	$36
14325 32DA                        36            .byte	$36
14326 32DB                        36            .byte	$36
14327 32DC                        36            .byte	$36
14328 32DD                        36            .byte	$36
14329 32DE                        36            .byte	$36
14330 32DF                        36            .byte	$36
14331 32E0                        3F            .byte	$3F
14332 32E1                        00            .byte	0
14333 32E2                        00            .byte	0
14334 32E3                        00            .byte	0
14335 32E4                        00            .byte	0
14336 32E5                        00            .byte	0
14337 32E6                        00            .byte	0
14338 32E7                        00            .byte	0
14339 32E8                        00            .byte	0
14340                                           ! 1623  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14341 32E9                        18            .byte	$18
14342 32EA                        18            .byte	$18
14343 32EB                        18            .byte	$18
14344 32EC                        18            .byte	$18
14345 32ED                        18            .byte	$18
14346 32EE                        1F            .byte	$1F
14347 32EF                        18            .byte	$18
14348 32F0                        1F            .byte	$1F
14349 32F1                        00            .byte	0
14350 32F2                        00            .byte	0
14351 32F3                        00            .byte	0
14352 32F4                        00            .byte	0
14353 32F5                        00            .byte	0
14354 32F6                        00            .byte	0
14355 32F7                        00            .byte	0
14356 32F8                        00            .byte	0
14357                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14358 32F9                        00            .byte	0
14359 32FA                        00            .byte	0
14360 32FB                        00            .byte	0
14361 32FC                        00            .byte	0
14362 32FD                        00            .byte	0
14363 32FE                        1F            .byte	$1F
14364 32FF                        18            .byte	$18
14365 3300                        1F            .byte	$1F
14366 3301                        18            .byte	$18
14367 3302                        18            .byte	$18
14368 3303                        18            .byte	$18
14369 3304                        18            .byte	$18
14370 3305                        18            .byte	$18
14371 3306                        18            .byte	$18
14372 3307                        18            .byte	$18
14373 3308                        18            .byte	$18
14374                                           ! 1625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14375 3309                        00            .byte	0
14376 330A                        00            .byte	0
14377 330B                        00            .byte	0
14378 330C                        00            .byte	0
14379 330D                        00            .byte	0
14380 330E                        00            .byte	0
14381 330F                        00            .byte	0
14382 3310                        3F            .byte	$3F
14383 3311                        36            .byte	$36
14384 3312                        36            .byte	$36
14385 3313                        36            .byte	$36
14386 3314                        36            .byte	$36
14387 3315                        36            .byte	$36
14388 3316                        36            .byte	$36
14389 3317                        36            .byte	$36
14390 3318                        36            .byte	$36
14391                                           ! 1626  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14392 3319                        36            .byte	$36
14393 331A                        36            .byte	$36
14394 331B                        36            .byte	$36
14395 331C                        36            .byte	$36
14396 331D                        36            .byte	$36
14397 331E                        36            .byte	$36
14398 331F                        36            .byte	$36
14399 3320                        FF            .byte	$FF
14400 3321                        36            .byte	$36
14401 3322                        36            .byte	$36
14402 3323                        36            .byte	$36
14403 3324                        36            .byte	$36
14404 3325                        36            .byte	$36
14405 3326                        36            .byte	$36
14406 3327                        36            .byte	$36
14407 3328                        36            .byte	$36
14408                                           ! 1627  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14409 3329                        18            .byte	$18
14410 332A                        18            .byte	$18
14411 332B                        18            .byte	$18
14412 332C                        18            .byte	$18
14413 332D                        18            .byte	$18
14414 332E                        FF            .byte	$FF
14415 332F                        18            .byte	$18
14416 3330                        FF            .byte	$FF
14417 3331                        18            .byte	$18
14418 3332                        18            .byte	$18
14419 3333                        18            .byte	$18
14420 3334                        18            .byte	$18
14421 3335                        18            .byte	$18
14422 3336                        18            .byte	$18
14423 3337                        18            .byte	$18
14424 3338                        18            .byte	$18
14425                                           ! 1628  0x
14426                                           ! 1628 18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14427 3339                        18            .byte	$18
14428 333A                        18            .byte	$18
14429 333B                        18            .byte	$18
14430 333C                        18            .byte	$18
14431 333D                        18            .byte	$18
14432 333E                        18            .byte	$18
14433 333F                        18            .byte	$18
14434 3340                        F8            .byte	$F8
14435 3341                        00            .byte	0
14436 3342                        00            .byte	0
14437 3343                        00            .byte	0
14438 3344                        00            .byte	0
14439 3345                        00            .byte	0
14440 3346                        00            .byte	0
14441 3347                        00            .byte	0
14442 3348                        00            .byte	0
14443                                           ! 1629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14444 3349                        00            .byte	0
14445 334A                        00            .byte	0
14446 334B                        00            .byte	0
14447 334C                        00            .byte	0
14448 334D                        00            .byte	0
14449 334E                        00            .byte	0
14450 334F                        00            .byte	0
14451 3350                        1F            .byte	$1F
14452 3351                        18            .byte	$18
14453 3352                        18            .byte	$18
14454 3353                        18            .byte	$18
14455 3354                        18            .byte	$18
14456 3355                        18            .byte	$18
14457 3356                        18            .byte	$18
14458 3357                        18            .byte	$18
14459 3358                        18            .byte	$18
14460                                           ! 1630  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14461 3359                        FF            .byte	$FF
14462 335A                        FF            .byte	$FF
14463 335B                        FF            .byte	$FF
14464 335C                        FF            .byte	$FF
14465 335D                        FF            .byte	$FF
14466 335E                        FF            .byte	$FF
14467 335F                        FF            .byte	$FF
14468 3360                        FF            .byte	$FF
14469 3361                        FF            .byte	$FF
14470 3362                        FF            .byte	$FF
14471 3363                        FF            .byte	$FF
14472 3364                        FF            .byte	$FF
14473 3365                        FF            .byte	$FF
14474 3366                        FF            .byte	$FF
14475 3367                        FF            .byte	$FF
14476 3368                        FF            .byte	$FF
14477                                           ! 1631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14478 3369                        00            .byte	0
14479 336A                        00            .byte	0
14480 336B                        00            .byte	0
14481 336C                        00            .byte	0
14482 336D                        00            .byte	0
14483 336E                        00            .byte	0
14484 336F                        00            .byte	0
14485 3370                        FF            .byte	$FF
14486 3371                        FF            .byte	$FF
14487 3372                        FF            .byte	$FF
14488 3373                        FF            .byte	$FF
14489 3374                        FF            .byte	$FF
14490 3375                        FF            .byte	$FF
14491 3376                        FF            .byte	$FF
14492 3377                        FF            .byte	$FF
14493 3378                        FF            .byte	$FF
14494                                           ! 1632  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14495 3379                        F0            .byte	$F0
14496 337A                        F0            .byte	$F0
14497 337B                        F0            .byte	$F0
14498 337C                        F0            .byte	$F0
14499 337D                        F0            .byte	$F0
14500 337E                        F0            .byte	$F0
14501 337F                        F0            .byte	$F0
14502 3380                        F0            .byte	$F0
14503 3381                        F0            .byte	$F0
14504 3382                        F0            .byte	$F0
14505 3383                        F0            .byte	$F0
14506 3384                        F0            .byte	$F0
14507 3385                        F0            .byte	$F0
14508 3386                        F0            .byte	$F0
14509 3387                        F0            .byte	$F0
14510 3388                        F0            .byte	$F0
14511                                           ! 1633  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14512 3389                        0F            .byte	$F
14513 338A                        0F            .byte	$F
14514 338B                        0F            .byte	$F
14515 338C                        0F            .byte	$F
14516 338D                        0F            .byte	$F
14517 338E                        0F            .byte	$F
14518 338F                        0F            .byte	$F
14519 3390                        0F            .byte	$F
14520 3391                        0F            .byte	$F
14521 3392                        0F            .byte	$F
14522 3393                        0F            .byte	$F
14523 3394                        0F            .byte	$F
14524 3395                        0F            .byte	$F
14525 3396                        0F            .byte	$F
14526 3397                        0F            .byte	$F
14527 3398                        0F            .byte	$F
14528                                           ! 1634  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14529 3399                        FF            .byte	$FF
14530 339A                        FF            .byte	$FF
14531 339B                        FF            .byte	$FF
14532 339C                        FF            .byte	$FF
14533 339D                        FF            .byte	$FF
14534 339E                        FF            .byte	$FF
14535 339F                        FF            .byte	$FF
14536 33A0                        00            .byte	0
14537 33A1                        00            .byte	0
14538 33A2                        00            .byte	0
14539 33A3                        00            .byte	0
14540 33A4                        00            .byte	0
14541 33A5                        00            .byte	0
14542 33A6                        00            .byte	0
14543 33A7                        00            .byte	0
14544 33A8                        00            .byte	0
14545                                           ! 1635  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14546 33A9                        00            .byte	0
14547 33AA                        00            .byte	0
14548 33AB                        00            .byte	0
14549 33AC                        00            .byte	0
14550 33AD                        00            .byte	0
14551 33AE                        76            .byte	$76
14552 33AF                        DC            .byte	$DC
14553 33B0                        D8            .byte	$D8
14554 33B1                        D8            .byte	$D8
14555 33B2                        D8            .byte	$D8
14556 33B3                        DC            .byte	$DC
14557 33B4                        76            .byte	$76
14558 33B5                        00            .byte	0
14559 33B6                        00            .byte	0
14560 33B7                        00            .byte	0
14561 33B8                        00            .byte	0
14562                                           ! 1636  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14563 33B9                        00            .byte	0
14564 33BA                        00            .byte	0
14565 33BB                        78            .byte	$78
14566 33BC                        CC            .byte	$CC
14567 33BD                        CC            .byte	$CC
14568 33BE                        CC            .byte	$CC
14569 33BF                        D8            .byte	$D8
14570 33C0                        CC            .byte	$CC
14571 33C1                        C6            .byte	$C6
14572 33C2                        C6            .byte	$C6
14573 33C3                        C6            .byte	$C6
14574 33C4                        CC            .byte	$CC
14575 33C5                        00            .byte	0
14576 33C6                        00            .byte	0
14577 33C7                        00            .byte	0
14578 33C8                        00            .byte	0
14579                                           ! 1637  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14580 33C9                        00            .byte	0
14581 33CA                        00            .byte	0
14582 33CB                        FE            .byte	$FE
14583 33CC                        C6            .byte	$C6
14584 33CD                        C6            .byte	$C6
14585 33CE                        C0            .byte	$C0
14586 33CF                        C0            .byte	$C0
14587 33D0                        C0            .byte	$C0
14588 33D1                        C0            .byte	$C0
14589 33D2                        C0            .byte	$C0
14590 33D3                        C0            .byte	$C0
14591 33D4                        C0            .byte	$C0
14592 33D5                        00            .byte	0
14593 33D6                        00            .byte	0
14594 33D7                        00            .byte	0
14595 33D8                        00            .byte	0
14596                                           ! 1638  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14597 33D9                        00            .byte	0
14598 33DA                        00            .byte	0
14599 33DB                        00            .byte	0
14600 33DC                        00            .byte	0
14601 33DD                        FE            .byte	$FE
14602 33DE                        6C            .byte	$6C
14603 33DF                        6C            .byte	$6C
14604 33E0                        6C            .byte	$6C
14605 33E1                        6C            .byte	$6C
14606 33E2                        6C            .byte	$6C
14607 33E3                        6C            .byte	$6C
14608 33E4                        6C            .byte	$6C
14609 33E5                        00            .byte	0
14610 33E6                        00            .byte	0
14611 33E7                        00            .byte	0
14612 33E8                        00            .byte	0
14613                                           ! 1639  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14614 33E9                        00            .byte	0
14615 33EA                        00            .byte	0
14616 33EB                        00            .byte	0
14617 33EC                        FE            .byte	$FE
14618 33ED                        C6            .byte	$C6
14619 33EE                        60            .byte	$60
14620 33EF                        30            .byte	$30
14621 33F0                        18            .byte	$18
14622 33F1                        30            .byte	$30
14623 33F2                        60            .byte	$60
14624 33F3                        C6            .byte	$C6
14625 33F4                        FE            .byte	$FE
14626 33F5                        00            .byte	0
14627 33F6                        00            .byte	0
14628 33F7                        00            .byte	0
14629 33F8                        00            .byte	0
14630                                           ! 1640  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14631 33F9                        00            .byte	0
14632 33FA                        00            .byte	0
14633 33FB                        00            .byte	0
14634 33FC                        00            .byte	0
14635 33FD                        00            .byte	0
14636 33FE                        7E            .byte	$7E
14637 33FF                        D8            .byte	$D8
14638 3400                        D8            .byte	$D8
14639 3401                        D8            .byte	$D8
14640 3402                        D8            .byte	$D8
14641 3403                        D8            .byte	$D8
14642 3404                        70            .byte	$70
14643 3405                        00            .byte	0
14644 3406                        00            .byte	0
14645 3407                        00            .byte	0
14646 3408                        00            .byte	0
14647                                           ! 1641  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14648 3409                        00            .byte	0
14649 340A                        00            .byte	0
14650 340B                        00            .byte	0
14651 340C                        00            .byte	0
14652 340D                        66            .byte	$66
14653 340E                        66            .byte	$66
14654 340F                        66            .byte	$66
14655 3410                        66            .byte	$66
14656 3411                        66            .byte	$66
14657 3412                        7C            .byte	$7C
14658 3413                        60            .byte	$60
14659 3414                        60            .byte	$60
14660 3415                        C0            .byte	$C0
14661 3416                        00            .byte	0
14662 3417                        00            .byte	0
14663 3418                        00            .byte	0
14664                                           ! 1642  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14665 3419                        00            .byte	0
14666 341A                        00            .byte	0
14667 341B                        00            .byte	0
14668 341C                        00            .byte	0
14669 341D                        76            .byte	$76
14670 341E                        DC            .byte	$DC
14671 341F                        18            .byte	$18
14672 3420                        18            .byte	$18
14673 3421                        18            .byte	$18
14674 3422                        18            .byte	$18
14675 3423                        18            .byte	$18
14676 3424                        18            .byte	$18
14677 3425                        00            .byte	0
14678 3426                        00            .byte	0
14679 3427                        00            .byte	0
14680 3428                        00            .byte	0
14681                                           ! 1643  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14682 3429                        00            .byte	0
14683 342A                        00            .byte	0
14684 342B                        00            .byte	0
14685 342C                        7E            .byte	$7E
14686 342D                        18            .byte	$18
14687 342E                        3C            .byte	$3C
14688 342F                        66            .byte	$66
14689 3430                        66            .byte	$66
14690 3431                        66            .byte	$66
14691 3432                        3C            .byte	$3C
14692 3433                        18            .byte	$18
14693 3434                        7E            .byte	$7E
14694 3435                        00            .byte	0
14695 3436                        00            .byte	0
14696 3437                        00            .byte	0
14697 3438                        00            .byte	0
14698                                           ! 1644  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14699 3439                        00            .byte	0
14700 343A                        00            .byte	0
14701 343B                        00            .byte	0
14702 343C                        38            .byte	$38
14703 343D                        6C            .byte	$6C
14704 343E                        C6            .byte	$C6
14705 343F                        C6            .byte	$C6
14706 3440                        FE            .byte	$FE
14707 3441                        C6            .byte	$C6
14708 3442                        C6            .byte	$C6
14709 3443                        6C            .byte	$6C
14710 3444                        38            .byte	$38
14711 3445                        00            .byte	0
14712 3446                        00            .byte	0
14713 3447                        00            .byte	0
14714 3448                        00            .byte	0
14715                                           ! 1645  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14716 3449                        00            .byte	0
14717 344A                        00            .byte	0
14718 344B                        38            .byte	$38
14719 344C                        6C            .byte	$6C
14720 344D                        C6            .byte	$C6
14721 344E                        C6            .byte	$C6
14722 344F                        C6            .byte	$C6
14723 3450                        6C            .byte	$6C
14724 3451                        6C            .byte	$6C
14725 3452                        6C            .byte	$6C
14726 3453                        6C            .byte	$6C
14727 3454                        EE            .byte	$EE
14728 3455                        00            .byte	0
14729 3456                        00            .byte	0
14730 3457                        00            .byte	0
14731 3458                        00            .byte	0
14732                                           ! 1646  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14733 3459                        00            .byte	0
14734 345A                        00            .byte	0
14735 345B                        1E            .byte	$1E
14736 345C                        30            .byte	$30
14737 345D                        18            .byte	$18
14738 345E                        0C            .byte	$C
14739 345F                        3E            .byte	$3E
14740 3460                        66            .byte	$66
14741 3461                        66            .byte	$66
14742 3462                        66            .byte	$66
14743 3463                        66            .byte	$66
14744 3464                        3C            .byte	$3C
14745 3465                        00            .byte	0
14746 3466                        00            .byte	0
14747 3467                        00            .byte	0
14748 3468                        00            .byte	0
14749                                           ! 1647  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14750 3469                        00            .byte	0
14751 346A                        00            .byte	0
14752 346B                        00            .byte	0
14753 346C                        00            .byte	0
14754 346D                        00            .byte	0
14755 346E                        7E            .byte	$7E
14756 346F                        DB            .byte	$DB
14757 3470                        DB            .byte	$DB
14758 3471                        DB            .byte	$DB
14759 3472                        7E            .byte	$7E
14760 3473                        00            .byte	0
14761 3474                        00            .byte	0
14762 3475                        00            .byte	0
14763 3476                        00            .byte	0
14764 3477                        00            .byte	0
14765 3478                        00            .byte	0
14766                                           ! 1648  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14767 3479                        00            .byte	0
14768 347A                        00            .byte	0
14769 347B                        00            .byte	0
14770 347C                        03            .byte	3
14771 347D                        06            .byte	6
14772 347E                        7E            .byte	$7E
14773 347F                        DB            .byte	$DB
14774 3480                        DB            .byte	$DB
14775 3481                        F3            .byte	$F3
14776 3482                        7E            .byte	$7E
14777 3483                        60            .byte	$60
14778 3484                        C0            .byte	$C0
14779 3485                        00            .byte	0
14780 3486                        00            .byte	0
14781 3487                        00            .byte	0
14782 3488                        00            .byte	0
14783                                           ! 1649  0x00, 0x00, 0
14784 3489                        00            .byte	0
14785 348A                        00            .byte	0
14786                                           ! 1649 x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14787 348B                        1C            .byte	$1C
14788 348C                        30            .byte	$30
14789 348D                        60            .byte	$60
14790 348E                        60            .byte	$60
14791 348F                        7C            .byte	$7C
14792 3490                        60            .byte	$60
14793 3491                        60            .byte	$60
14794 3492                        60            .byte	$60
14795 3493                        30            .byte	$30
14796 3494                        1C            .byte	$1C
14797 3495                        00            .byte	0
14798 3496                        00            .byte	0
14799 3497                        00            .byte	0
14800 3498                        00            .byte	0
14801                                           ! 1650  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14802 3499                        00            .byte	0
14803 349A                        00            .byte	0
14804 349B                        00            .byte	0
14805 349C                        7C            .byte	$7C
14806 349D                        C6            .byte	$C6
14807 349E                        C6            .byte	$C6
14808 349F                        C6            .byte	$C6
14809 34A0                        C6            .byte	$C6
14810 34A1                        C6            .byte	$C6
14811 34A2                        C6            .byte	$C6
14812 34A3                        C6            .byte	$C6
14813 34A4                        C6            .byte	$C6
14814 34A5                        00            .byte	0
14815 34A6                        00            .byte	0
14816 34A7                        00            .byte	0
14817 34A8                        00            .byte	0
14818                                           ! 1651  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14819 34A9                        00            .byte	0
14820 34AA                        00            .byte	0
14821 34AB                        00            .byte	0
14822 34AC                        00            .byte	0
14823 34AD                        FE            .byte	$FE
14824 34AE                        00            .byte	0
14825 34AF                        00            .byte	0
14826 34B0                        FE            .byte	$FE
14827 34B1                        00            .byte	0
14828 34B2                        00            .byte	0
14829 34B3                        FE            .byte	$FE
14830 34B4                        00            .byte	0
14831 34B5                        00            .byte	0
14832 34B6                        00            .byte	0
14833 34B7                        00            .byte	0
14834 34B8                        00            .byte	0
14835                                           ! 1652  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14836 34B9                        00            .byte	0
14837 34BA                        00            .byte	0
14838 34BB                        00            .byte	0
14839 34BC                        00            .byte	0
14840 34BD                        18            .byte	$18
14841 34BE                        18            .byte	$18
14842 34BF                        7E            .byte	$7E
14843 34C0                        18            .byte	$18
14844 34C1                        18            .byte	$18
14845 34C2                        00            .byte	0
14846 34C3                        00            .byte	0
14847 34C4                        FF            .byte	$FF
14848 34C5                        00            .byte	0
14849 34C6                        00            .byte	0
14850 34C7                        00            .byte	0
14851 34C8                        00            .byte	0
14852                                           ! 1653  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14853 34C9                        00            .byte	0
14854 34CA                        00            .byte	0
14855 34CB                        00            .byte	0
14856 34CC                        30            .byte	$30
14857 34CD                        18            .byte	$18
14858 34CE                        0C            .byte	$C
14859 34CF                        06            .byte	6
14860 34D0                        0C            .byte	$C
14861 34D1                        18            .byte	$18
14862 34D2                        30            .byte	$30
14863 34D3                        00            .byte	0
14864 34D4                        7E            .byte	$7E
14865 34D5                        00            .byte	0
14866 34D6                        00            .byte	0
14867 34D7                        00            .byte	0
14868 34D8                        00            .byte	0
14869                                           ! 1654  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14870 34D9                        00            .byte	0
14871 34DA                        00            .byte	0
14872 34DB                        00            .byte	0
14873 34DC                        0C            .byte	$C
14874 34DD                        18            .byte	$18
14875 34DE                        30            .byte	$30
14876 34DF                        60            .byte	$60
14877 34E0                        30            .byte	$30
14878 34E1                        18            .byte	$18
14879 34E2                        0C            .byte	$C
14880 34E3                        00            .byte	0
14881 34E4                        7E            .byte	$7E
14882 34E5                        00            .byte	0
14883 34E6                        00            .byte	0
14884 34E7                        00            .byte	0
14885 34E8                        00            .byte	0
14886                                           ! 1655  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14887 34E9                        00            .byte	0
14888 34EA                        00            .byte	0
14889 34EB                        0E            .byte	$E
14890 34EC                        1B            .byte	$1B
14891 34ED                        1B            .byte	$1B
14892 34EE                        18            .byte	$18
14893 34EF                        18            .byte	$18
14894 34F0                        18            .byte	$18
14895 34F1                        18            .byte	$18
14896 34F2                        18            .byte	$18
14897 34F3                        18            .byte	$18
14898 34F4                        18            .byte	$18
14899 34F5                        18            .byte	$18
14900 34F6                        18            .byte	$18
14901 34F7                        18            .byte	$18
14902 34F8                        18            .byte	$18
14903                                           ! 1656  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14904 34F9                        18            .byte	$18
14905 34FA                        18            .byte	$18
14906 34FB                        18            .byte	$18
14907 34FC                        18            .byte	$18
14908 34FD                        18            .byte	$18
14909 34FE                        18            .byte	$18
14910 34FF                        18            .byte	$18
14911 3500                        18            .byte	$18
14912 3501                        D8            .byte	$D8
14913 3502                        D8            .byte	$D8
14914 3503                        D8            .byte	$D8
14915 3504                        70            .byte	$70
14916 3505                        00            .byte	0
14917 3506                        00            .byte	0
14918 3507                        00            .byte	0
14919 3508                        00            .byte	0
14920                                           ! 1657  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14921 3509                        00            .byte	0
14922 350A                        00            .byte	0
14923 350B                        00            .byte	0
14924 350C                        00            .byte	0
14925 350D                        18            .byte	$18
14926 350E                        18            .byte	$18
14927 350F                        00            .byte	0
14928 3510                        7E            .byte	$7E
14929 3511                        00            .byte	0
14930 3512                        18            .byte	$18
14931 3513                        18            .byte	$18
14932 3514                        00            .byte	0
14933 3515                        00            .byte	0
14934 3516                        00            .byte	0
14935 3517                        00            .byte	0
14936 3518                        00            .byte	0
14937                                           ! 1658  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14938 3519                        00            .byte	0
14939 351A                        00            .byte	0
14940 351B                        00            .byte	0
14941 351C                        00            .byte	0
14942 351D                        00            .byte	0
14943 351E                        76            .byte	$76
14944 351F                        DC            .byte	$DC
14945 3520                        00            .byte	0
14946 3521                        76            .byte	$76
14947 3522                        DC            .byte	$DC
14948 3523                        00            .byte	0
14949 3524                        00            .byte	0
14950 3525                        00            .byte	0
14951 3526                        00            .byte	0
14952 3527                        00            .byte	0
14953 3528                        00            .byte	0
14954                                           ! 1659  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14955 3529                        00            .byte	0
14956 352A                        38            .byte	$38
14957 352B                        6C            .byte	$6C
14958 352C                        6C            .byte	$6C
14959 352D                        38            .byte	$38
14960 352E                        00            .byte	0
14961 352F                        00            .byte	0
14962 3530                        00            .byte	0
14963 3531                        00            .byte	0
14964 3532                        00            .byte	0
14965 3533                        00            .byte	0
14966 3534                        00            .byte	0
14967 3535                        00            .byte	0
14968 3536                        00            .byte	0
14969 3537                        00            .byte	0
14970 3538                        00            .byte	0
14971                                           ! 1660  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14972 3539                        00            .byte	0
14973 353A                        00            .byte	0
14974 353B                        00            .byte	0
14975 353C                        00            .byte	0
14976 353D                        00            .byte	0
14977 353E                        00            .byte	0
14978 353F                        00            .byte	0
14979 3540                        18            .byte	$18
14980 3541                        18            .byte	$18
14981 3542                        00            .byte	0
14982 3543                        00            .byte	0
14983 3544                        00            .byte	0
14984 3545                        00            .byte	0
14985 3546                        00            .byte	0
14986 3547                        00            .byte	0
14987 3548                        00            .byte	0
14988                                           ! 1661  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14989 3549                        00            .byte	0
14990 354A                        00            .byte	0
14991 354B                        00            .byte	0
14992 354C                        00            .byte	0
14993 354D                        00            .byte	0
14994 354E                        00            .byte	0
14995 354F                        00            .byte	0
14996 3550                        00            .byte	0
14997 3551                        18            .byte	$18
14998 3552                        00            .byte	0
14999 3553                        00            .byte	0
15000 3554                        00            .byte	0
15001 3555                        00            .byte	0
15002 3556                        00            .byte	0
15003 3557                        00            .byte	0
15004 3558                        00            .byte	0
15005                                           ! 1662  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
15006 3559                        00            .byte	0
15007 355A                        0F            .byte	$F
15008 355B                        0C            .byte	$C
15009 355C                        0C            .byte	$C
15010 355D                        0C            .byte	$C
15011 355E                        0C            .byte	$C
15012 355F                        0C            .byte	$C
15013 3560                        EC            .byte	$EC
15014 3561                        6C            .byte	$6C
15015 3562                        6C            .byte	$6C
15016 3563                        3C            .byte	$3C
15017 3564                        1C            .byte	$1C
15018 3565                        00            .byte	0
15019 3566                        00            .byte	0
15020 3567                        00            .byte	0
15021 3568                        00            .byte	0
15022                                           ! 1663  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15023 3569                        00            .byte	0
15024 356A                        D8            .byte	$D8
15025 356B                        6C            .byte	$6C
15026 356C                        6C            .byte	$6C
15027 356D                        6C            .byte	$6C
15028 356E                        6C            .byte	$6C
15029 356F                        6C            .byte	$6C
15030 3570                        00            .byte	0
15031 3571                        00            .byte	0
15032 3572                        00            .byte	0
15033 3573                        00            .byte	0
15034 3574                        00            .byte	0
15035 3575                        00            .byte	0
15036 3576                        00            .byte	0
15037 3577                        00            .byte	0
15038 3578                        00            .byte	0
15039                                           ! 1664  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15040 3579                        00            .byte	0
15041 357A                        70            .byte	$70
15042 357B                        D8            .byte	$D8
15043 357C                        30            .byte	$30
15044 357D                        60            .byte	$60
15045 357E                        C8            .byte	$C8
15046 357F                        F8            .byte	$F8
15047 3580                        00            .byte	0
15048 3581                        00            .byte	0
15049 3582                        00            .byte	0
15050 3583                        00            .byte	0
15051 3584                        00            .byte	0
15052 3585                        00            .byte	0
15053 3586                        00            .byte	0
15054 3587                        00            .byte	0
15055 3588                        00            .byte	0
15056                                           ! 1665  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15057 3589                        00            .byte	0
15058 358A                        00            .byte	0
15059 358B                        00            .byte	0
15060 358C                        00            .byte	0
15061 358D                        7C            .byte	$7C
15062 358E                        7C            .byte	$7C
15063 358F                        7C            .byte	$7C
15064 3590                        7C            .byte	$7C
15065 3591                        7C            .byte	$7C
15066 3592                        7C            .byte	$7C
15067 3593                        7C            .byte	$7C
15068 3594                        00            .byte	0
15069 3595                        00            .byte	0
15070 3596                        00            .byte	0
15071 3597                        00            .byte	0
15072 3598                        00            .byte	0
15073                                           ! 1666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15074 3599                        00            .byte	0
15075 359A                        00            .byte	0
15076 359B                        00            .byte	0
15077 359C                        00            .byte	0
15078 359D                        00            .byte	0
15079 359E                        00            .byte	0
15080 359F                        00            .byte	0
15081 35A0                        00            .byte	0
15082 35A1                        00            .byte	0
15083 35A2                        00            .byte	0
15084 35A3                        00            .byte	0
15085 35A4                        00            .byte	0
15086 35A5                        00            .byte	0
15087 35A6                        00            .byte	0
15088 35A7                        00            .byte	0
15089                                           ! 1667 };
15090 35A8                        00            .byte	0
15091                                           !BCC_EOS
15092                                           ! 1668 static Bit8u vgafont14alt[1]={0x00};
15093                       000035A9            _vgafont14alt:
15094 35A9                        00            .byte	0
15095                                           !BCC_EOS
15096                                           ! 1669 static Bit8u vgafont16alt[1]={0x00};
15097                       000035AA            _vgafont16alt:
15098 35AA                        00            .byte	0
15099                                           !BCC_EOS
15100                                           ! 1670 #asm
15101                                           !BCC_ASM
15102                       000035AB            init_vga_card:
15103                                           ;; switch to color mode and enable CPU access 480 lines
15104 35AB           BA                   03C2    mov dx, #0x3C2
15105 35AE           B0                     C3    mov al, #0xC3
15106 35B0           EE                           outb dx,al
15107                                           ;; more than 64k 3C4/04
15108 35B1           BA                   03C4    mov dx, #0x3C4
15109 35B4           B0                     04    mov al, #0x04
15110 35B6           EE                           outb dx,al
15111 35B7           BA                   03C5    mov dx, #0x3C5
15112 35BA           B0                     02    mov al, #0x02
15113 35BC           EE                           outb dx,al
15114 35BD           BB                   35C7    mov bx, #msg_vga_init
15115 35C0           53                           push bx
15116 35C1           E8         4AB6              call _printf
15117 35C4           44                           inc sp
15118 35C5           44                           inc sp
15119 35C6           C3                           ret
15120                       000035C7            msg_vga_init:
15121 35C7                        56            .ascii "VGABios $Id: vgabios.c,v 1.75 2011/10/15 14:07:21 vruppert Exp $"
15122 3607                        0D            .byte 0x0d,0x0a,0x00
15123                                           ! 1692 endasm
15124                                           !BCC_ENDASM
15125                                           ! 1693 #asm
15126                                           !BCC_ASM
15127                       0000360A            init_bios_area:
15128 360A           1E                           push ds
15129 360B           B8                   0040    mov ax, # 0x40
15130 360E           8ED8                         mov ds, ax
15131                                           ;; init detected hardware BIOS Area
15132 3610           BB                   0010    mov bx, # 0x10
15133 3613           8B07                         mov ax, [bx]
15134 3615           25                   FFCF    and ax, #0xffcf
15135                                           ;; set 80x25 color (not clear from RBIL but usual)
15136 3618           0D                   0020    or ax, #0x0020
15137 361B           8907                         mov [bx], ax
15138                                           ;; Just for the first int10 find its children
15139                                           ;; the default char height
15140 361D           BB                   0085    mov bx, # 0x85
15141 3620           B0                     10    mov al, #0x10
15142 3622           8807                         mov [bx], al
15143                                           ;; Clear the screen
15144 3624           BB                   0087    mov bx, # 0x87
15145 3627           B0                     60    mov al, #0x60
15146 3629           8807                         mov [bx], al
15147                                           ;; Set the basic screen we have
15148 362B           BB                   0088    mov bx, # 0x88
15149 362E           B0                     F9    mov al, #0xf9
15150 3630           8807                         mov [bx], al
15151                                           ;; Set the basic modeset options
15152 3632           BB                   0089    mov bx, # 0x89
15153 3635           B0                     51    mov al, #0x51
15154 3637           8807                         mov [bx], al
15155                                           ;; Set the default MSR
15156 3639           BB                   0065    mov bx, # 0x65
15157 363C           B0                     09    mov al, #0x09
15158 363E           8807                         mov [bx], al
15159 3640           1F                           pop ds
15160 3641           C3                           ret
15161                       00003642            _video_save_pointer_table:
15162 3642                      02D9              .word _video_param_table
15163 3644                      C000              .word 0xc000
15164 3646                      0000              .word 0
15165 3648                      0000              .word 0
15166 364A                      0000              .word 0
15167 364C                      0000              .word 0
15168 364E                      0000              .word 0
15169 3650                      0000              .word 0
15170 3652                      0000              .word 0
15171 3654                      0000              .word 0
15172 3656                      0000              .word 0
15173 3658                      0000              .word 0
15174 365A                      0000              .word 0
15175 365C                      0000              .word 0
15176                                           ! 1743 endasm
15177                                           !BCC_ENDASM
15178                                           ! 1744 static void display_splash_screen()
15179                                           ! 1745 {
15180                                           
15181                       0000365E            _display_splash_screen:
15182                                           ! 1746 }
15183 365E           C3                         ret
15184                                           ! 1747 static void display_info()
15185                                           ! 1748 {
15186                       0000365F            _display_info:
15187                                           ! 1749 #asm
15188                                           !BCC_ASM
15189 365F           B8                   C000   mov ax,#0xc000
15190 3662           8ED8                        mov ds,ax
15191 3664           BE                   0022   mov si,#vgabios_name
15192 3667           E8         0013             call _display_string
15193 366A           BE                   003E   mov si,#vgabios_version
15194 366D           E8         000D             call _display_string
15195                                            ;;mov si,#vgabios_copyright
15196                                            ;;call _display_string
15197                                            ;;mov si,#crlf
15198                                            ;;call _display_string
15199 3670           BE                   0084   mov si,#vgabios_license
15200 3673           E8         0007             call _display_string
15201 3676           BE                   00B9   mov si,#vgabios_website
15202 3679           E8         0001             call _display_string
15203                                           ! 1764 endasm
15204                                           !BCC_ENDASM
15205                                           ! 1765 }
15206 367C           C3                         ret
15207                                           ! 1766 static void display_string()
15208                                           ! 1767 {
15209                       0000367D            _display_string:
15210                                           ! 1768 #asm
15211                                           !BCC_ASM
15212 367D           8CD8                        mov ax,ds
15213 367F           8EC0                        mov es,ax
15214 3681           89F7                        mov di,si
15215 3683           31C9                        xor cx,cx
15216 3685           F7D1                        not cx
15217 3687           30C0                        xor al,al
15218 3689           FC                          cld
15219 368A           F2                          repne
15220 368B           AE                           scasb
15221 368C           F7D1                        not cx
15222 368E           49                          dec cx
15223 368F           51                          push cx
15224 3690           B8                   0300   mov ax,#0x0300
15225 3693           BB                   0000   mov bx,#0x0000
15226 3696           CD                     10   int #0x10
15227 3698           59                          pop cx
15228 3699           B8                   1301   mov ax,#0x1301
15229 369C           BB                   000B   mov bx,#0x000b
15230 369F           89F5                        mov bp,si
15231 36A1           CD                     10   int #0x10
15232                                           ! 1789 endasm
15233                                           !BCC_ENDASM
15234                                           ! 1790 }
15235 36A3           C3                         ret
15236                                           ! 1791 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15237                                           ! 1792   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15238                       000036A4            _int10_debugmsg:
15239                                           !BCC_EOS
15240                                           ! 1793 {
15241                                           ! 1794  if(( AX >> 8 )!=0x0E)
15242 36A4           55                         push	bp
15243 36A5           89E5                       mov	bp,sp
15244                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15245 36A7           8B46         12            mov	ax,$12[bp]
15246 36AA           88E0                       mov	al,ah
15247 36AC           30E4                       xor	ah,ah
15248                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
15249 36AE           3D                   000E  cmp	ax,*$E
15250 36B1           74           20            je  	.1
15251                       000036B3            .2:
15252                                           ! 1795   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
15253                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15254 36B3           FF76         0E            push	$E[bp]
15255                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15256 36B6           FF76         10            push	$10[bp]
15257                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15258 36B9           FF76         0C            push	$C[bp]
15259                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15260 36BC           8A46         12            mov	al,$12[bp]
15261                                           ! Debug: list unsigned char = al+0 (used reg = )
15262 36BF           30E4                       xor	ah,ah
15263 36C1           50                         push	ax
15264                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
15265 36C2           8B46         12            mov	ax,$12[bp]
15266 36C5           88E0                       mov	al,ah
15267 36C7           30E4                       xor	ah,ah
15268                                           ! Debug: list unsigned int = ax+0 (used reg = )
15269 36C9           50                         push	ax
15270                                           ! Debug: list * char = .3+0 (used reg = )
15271 36CA           BB                   A826  mov	bx,#.3
15272 36CD           53                         push	bx
15273                                           ! Debug: func () void = printf+0 (used reg = )
15274 36CE           E8         49A9            call	_printf
15275 36D1           89EC                       mov	sp,bp
15276                                           !BCC_EOS
15277                                           ! 1796 }
15278                       000036D3            .1:
15279 36D3           5D                         pop	bp
15280 36D4           C3                         ret
15281                                           ! 1797 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15282                                           ! Register BX used in function int10_debugmsg
15283                                           ! 1798   Bit16u DI, SI, BP, S
15284                       000036D5            _int10_func:
15285                                           ! 1798 P, BX, DX, CX, AX, ES, DS, FLAGS;
15286                                           !BCC_EOS
15287                                           ! 1799 {
15288                                           ! 1800  switch(( AX >> 8 ))
15289 36D5           55                         push	bp
15290 36D6           89E5                       mov	bp,sp
15291                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15292 36D8           8B46         12            mov	ax,$12[bp]
15293 36DB           88E0                       mov	al,ah
15294 36DD           30E4                       xor	ah,ah
15295                                           ! 1801   {
15296 36DF           E9         04F7            br 	.6
15297                                           ! 1802    case 0x00:
15298                                           ! 1803      biosfn_set_video_mode(( AX & 0x00ff ));
15299                       000036E2            .7:
15300                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15301 36E2           8A46         12            mov	al,$12[bp]
15302                                           ! Debug: list unsigned char = al+0 (used reg = )
15303 36E5           30E4                       xor	ah,ah
15304 36E7           50                         push	ax
15305                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15306 36E8           E8         0642            call	_biosfn_set_video_mode
15307 36EB           44                         inc	sp
15308 36EC           44                         inc	sp
15309                                           !BCC_EOS
15310                                           ! 1804      switch(( AX & 0x00ff )&0x7F)
15311                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15312 36ED           8A46         12            mov	al,$12[bp]
15313                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15314 36F0           24                     7F  and	al,*$7F
15315                                           ! 1805       {case 6:
15316 36F2           EB           24            jmp .A
15317                                           ! 1806         AX = ((AX & 0xff00) | (0x3F));
15318                       000036F4            .B:
15319                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15320 36F4           8B46         12            mov	ax,$12[bp]
15321 36F7           30C0                       xor	al,al
15322                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15323 36F9           0C                     3F  or	al,*$3F
15324                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15325 36FB           8946         12            mov	$12[bp],ax
15326                                           !BCC_EOS
15327                                           ! 1807         break;
15328 36FE           EB           3D            jmp .8
15329                                           !BCC_EOS
15330                                           ! 1808        case 0:
15331                                           ! 1809        case 1:
15332                       00003700            .C:
15333                                           ! 1810        case 2:
15334                       00003700            .D:
15335                                           ! 1811        case 3:
15336                       00003700            .E:
15337                                           ! 1812        case 4:
15338                       00003700            .F:
15339                                           ! 1813        case 5:
15340                       00003700            .10:
15341                                           ! 1814        case 7:
15342                       00003700            .11:
15343                                           ! 1815         AX = ((AX & 0xff00) | (0x30));
15344                       00003700            .12:
15345                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15346 3700           8B46         12            mov	ax,$12[bp]
15347 3703           30C0                       xor	al,al
15348                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15349 3705           0C                     30  or	al,*$30
15350                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15351 3707           8946         12            mov	$12[bp],ax
15352                                           !BCC_EOS
15353                                           ! 1816         break;
15354 370A           EB           31            jmp .8
15355                                           !BCC_EOS
15356                                           ! 1817       default:
15357                                           ! 1818         AX = ((AX & 0xff00) | (0x20));
15358                       0000370C            .13:
15359                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15360 370C           8B46         12            mov	ax,$12[bp]
15361 370F           30C0                       xor	al,al
15362                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15363 3711           0C                     20  or	al,*$20
15364                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15365 3713           8946         12            mov	$12[bp],ax
15366                                           !BCC_EOS
15367                                           ! 1819       }
15368                                           ! 1820      break;
15369 3716           EB           25            jmp .8
15370                       00003718            .A:
15371 3718           2C                     00  sub	al,*0
15372 371A           72           F0            jb 	.13
15373 371C           3C                     07  cmp	al,*7
15374 371E           77           1B            ja  	.14
15375 3720           30E4                       xor	ah,ah
15376 3722           D1E0                       shl	ax,*1
15377 3724           89C3                       mov	bx,ax
15378 3726           2E                         seg	cs
15379 3727           FFA7       372B            br	.15[bx]
15380                       0000372B            .15:
15381 372B                      3700            .word	.C
15382 372D                      3700            .word	.D
15383 372F                      3700            .word	.E
15384 3731                      3700            .word	.F
15385 3733                      3700            .word	.10
15386 3735                      3700            .word	.11
15387 3737                      36F4            .word	.B
15388 3739                      3700            .word	.12
15389                       0000373B            .14:
15390 373B           EB           CF            jmp	.13
15391                       0000373D            .8:
15392 373D           E9         04EF            br 	.4
15393                                           !BCC_EOS
15394                                           ! 1821    case 0x01:
15395                                           ! 1822      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15396                       00003740            .16:
15397                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15398 3740           8A46         10            mov	al,$10[bp]
15399                                           ! Debug: list unsigned char = al+0 (used reg = )
15400 3743           30E4                       xor	ah,ah
15401 3745           50                         push	ax
15402                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15403 3746           8B46         10            mov	ax,$10[bp]
15404 3749           88E0                       mov	al,ah
15405 374B           30E4                       xor	ah,ah
15406                                           ! Debug: list unsigned int = ax+0 (used reg = )
15407 374D           50                         push	ax
15408                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15409 374E           E8         0B92            call	_biosfn_set_cursor_shape
15410 3751           83C4                   04  add	sp,*4
15411                                           !BCC_EOS
15412                                           ! 1823      break;
15413 3754           E9         04D8            br 	.4
15414                                           !BCC_EOS
15415                                           ! 1824    case 0x02:
15416                                           ! 1825      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15417                       00003757            .17:
15418                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15419 3757           FF76         0E            push	$E[bp]
15420                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15421 375A           8B46         0C            mov	ax,$C[bp]
15422 375D           88E0                       mov	al,ah
15423 375F           30E4                       xor	ah,ah
15424                                           ! Debug: list unsigned int = ax+0 (used reg = )
15425 3761           50                         push	ax
15426                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15427 3762           E8         0C99            call	_biosfn_set_cursor_pos
15428 3765           83C4                   04  add	sp,*4
15429                                           !BCC_EOS
15430                                           ! 1826      break;
15431 3768           E9         04C4            br 	.4
15432                                           !BCC_EOS
15433                                           ! 1827    case 0x03:
15434                                           ! 1828      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15435                       0000376B            .18:
15436                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15437 376B           8D5E         0E            lea	bx,$E[bp]
15438 376E           53                         push	bx
15439                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15440 376F           8D5E         10            lea	bx,$10[bp]
15441 3772           53                         push	bx
15442                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15443 3773           8B46         0C            mov	ax,$C[bp]
15444 3776           88E0                       mov	al,ah
15445 3778           30E4                       xor	ah,ah
15446                                           ! Debug: list unsigned int = ax+0 (used reg = )
15447 377A           50                         push	ax
15448                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15449 377B           E8         0D80            call	_biosfn_get_cursor_pos
15450 377E           83C4                   06  add	sp,*6
15451                                           !BCC_EOS
15452                                           ! 1829      break;
15453 3781           E9         04AB            br 	.4
15454                                           !BCC_EOS
15455                                           ! 1830    case 0x04:
15456                                           ! 1831      unimplemented();
15457                       00003784            .19:
15458                                           ! Debug: func () void = unimplemented+0 (used reg = )
15459 3784           E8         48D7            call	_unimplemented
15460                                           !BCC_EOS
15461                                           ! 1832      AX=0x00;
15462                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15463 3787           31C0                       xor	ax,ax
15464 3789           8946         12            mov	$12[bp],ax
15465                                           !BCC_EOS
15466                                           ! 1833      BX=0x00;
15467                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15468 378C           31C0                       xor	ax,ax
15469 378E           8946         0C            mov	$C[bp],ax
15470                                           !BCC_EOS
15471                                           ! 1834      CX=0x00;
15472                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15473 3791           31C0                       xor	ax,ax
15474 3793           8946         10            mov	$10[bp],ax
15475                                           !BCC_EOS
15476                                           ! 1835      DX=0x00;
15477                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15478 3796           31C0                       xor	ax,ax
15479 3798           8946         0E            mov	$E[bp],ax
15480                                           !BCC_EOS
15481                                           ! 1836      break;
15482 379B           E9         0491            br 	.4
15483                                           !BCC_EOS
15484                                           ! 1837    case 0x05:
15485                                           ! 1838      biosfn_set_active_page(( AX & 0x00ff ));
15486                       0000379E            .1A:
15487                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15488 379E           8A46         12            mov	al,$12[bp]
15489                                           ! Debug: list unsigned char = al+0 (used reg = )
15490 37A1           30E4                       xor	ah,ah
15491 37A3           50                         push	ax
15492                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15493 37A4           E8         0DCC            call	_biosfn_set_active_page
15494 37A7           44                         inc	sp
15495 37A8           44                         inc	sp
15496                                           !BCC_EOS
15497                                           ! 1839      break;
15498 37A9           E9         0483            br 	.4
15499                                           !BCC_EOS
15500                                           ! 1840    case 0x06:
15501                                           ! 1841      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15502                       000037AC            .1B:
15503                                           ! Debug: list int = const 1 (used reg = )
15504 37AC           B8                   0001  mov	ax,*1
15505 37AF           50                         push	ax
15506                                           ! Debug: list int = const $FF (used reg = )
15507 37B0           B8                   00FF  mov	ax,#$FF
15508 37B3           50                         push	ax
15509                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15510 37B4           8A46         0E            mov	al,$E[bp]
15511                                           ! Debug: list unsigned char = al+0 (used reg = )
15512 37B7           30E4                       xor	ah,ah
15513 37B9           50                         push	ax
15514                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15515 37BA           8B46         0E            mov	ax,$E[bp]
15516 37BD           88E0                       mov	al,ah
15517 37BF           30E4                       xor	ah,ah
15518                                           ! Debug: list unsigned int = ax+0 (used reg = )
15519 37C1           50                         push	ax
15520                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15521 37C2           8A46         10            mov	al,$10[bp]
15522                                           ! Debug: list unsigned char = al+0 (used reg = )
15523 37C5           30E4                       xor	ah,ah
15524 37C7           50                         push	ax
15525                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15526 37C8           8B46         10            mov	ax,$10[bp]
15527 37CB           88E0                       mov	al,ah
15528 37CD           30E4                       xor	ah,ah
15529                                           ! Debug: list unsigned int = ax+0 (used reg = )
15530 37CF           50                         push	ax
15531                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15532 37D0           8B46         0C            mov	ax,$C[bp]
15533 37D3           88E0                       mov	al,ah
15534 37D5           30E4                       xor	ah,ah
15535                                           ! Debug: list unsigned int = ax+0 (used reg = )
15536 37D7           50                         push	ax
15537                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15538 37D8           8A46         12            mov	al,$12[bp]
15539                                           ! Debug: list unsigned char = al+0 (used reg = )
15540 37DB           30E4                       xor	ah,ah
15541 37DD           50                         push	ax
15542                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15543 37DE           E8         1228            call	_biosfn_scroll
15544 37E1           83C4                   10  add	sp,*$10
15545                                           !BCC_EOS
15546                                           ! 1842      break;
15547 37E4           E9         0448            br 	.4
15548                                           !BCC_EOS
15549                                           ! 1843    case 0x07:
15550                                           ! 1844      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15551                       000037E7            .1C:
15552                                           ! Debug: list int = const 0 (used reg = )
15553 37E7           31C0                       xor	ax,ax
15554 37E9           50                         push	ax
15555                                           ! Debug: list int = const $FF (used reg = )
15556 37EA           B8                   00FF  mov	ax,#$FF
15557 37ED           50                         push	ax
15558                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15559 37EE           8A46         0E            mov	al,$E[bp]
15560                                           ! Debug: list unsigned char = al+0 (used reg = )
15561 37F1           30E4                       xor	ah,ah
15562 37F3           50                         push	ax
15563                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15564 37F4           8B46         0E            mov	ax,$E[bp]
15565 37F7           88E0                       mov	al,ah
15566 37F9           30E4                       xor	ah,ah
15567                                           ! Debug: list unsigned int = ax+0 (used reg = )
15568 37FB           50                         push	ax
15569                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15570 37FC           8A46         10            mov	al,$10[bp]
15571                                           ! Debug: list unsigned char = al+0 (used reg = )
15572 37FF           30E4                       xor	ah,ah
15573 3801           50                         push	ax
15574                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15575 3802           8B46         10            mov	ax,$10[bp]
15576 3805           88E0                       mov	al,ah
15577 3807           30E4                       xor	ah,ah
15578                                           ! Debug: list unsigned int = ax+0 (used reg = )
15579 3809           50                         push	ax
15580                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15581 380A           8B46         0C            mov	ax,$C[bp]
15582 380D           88E0                       mov	al,ah
15583 380F           30E4                       xor	ah,ah
15584                                           ! Debug: list unsigned int = ax+0 (used reg = )
15585 3811           50                         push	ax
15586                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15587 3812           8A46         12            mov	al,$12[bp]
15588                                           ! Debug: list unsigned char = al+0 (used reg = )
15589 3815           30E4                       xor	ah,ah
15590 3817           50                         push	ax
15591                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15592 3818           E8         11EE            call	_biosfn_scroll
15593 381B           83C4                   10  add	sp,*$10
15594                                           !BCC_EOS
15595                                           ! 1845      break;
15596 381E           E9         040E            br 	.4
15597                                           !BCC_EOS
15598                                           ! 1846    case 0x08:
15599                                           ! 1847      biosfn_read_char_attr(( BX >> 8 ),&AX);
15600                       00003821            .1D:
15601                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15602 3821           8D5E         12            lea	bx,$12[bp]
15603 3824           53                         push	bx
15604                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15605 3825           8B46         0C            mov	ax,$C[bp]
15606 3828           88E0                       mov	al,ah
15607 382A           30E4                       xor	ah,ah
15608                                           ! Debug: list unsigned int = ax+0 (used reg = )
15609 382C           50                         push	ax
15610                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15611 382D           E8         18FC            call	_biosfn_read_char_attr
15612 3830           83C4                   04  add	sp,*4
15613                                           !BCC_EOS
15614                                           ! 1848      break;
15615 3833           E9         03F9            br 	.4
15616                                           !BCC_EOS
15617                                           ! 1849    case 0x09:
15618                                           ! 1850      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15619                       00003836            .1E:
15620                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15621 3836           FF76         10            push	$10[bp]
15622                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15623 3839           8A46         0C            mov	al,$C[bp]
15624                                           ! Debug: list unsigned char = al+0 (used reg = )
15625 383C           30E4                       xor	ah,ah
15626 383E           50                         push	ax
15627                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15628 383F           8B46         0C            mov	ax,$C[bp]
15629 3842           88E0                       mov	al,ah
15630 3844           30E4                       xor	ah,ah
15631                                           ! Debug: list unsigned int = ax+0 (used reg = )
15632 3846           50                         push	ax
15633                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15634 3847           8A46         12            mov	al,$12[bp]
15635                                           ! Debug: list unsigned char = al+0 (used reg = )
15636 384A           30E4                       xor	ah,ah
15637 384C           50                         push	ax
15638                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15639 384D           E8         1E26            call	_biosfn_write_char_attr
15640 3850           83C4                   08  add	sp,*8
15641                                           !BCC_EOS
15642                                           ! 1851      break;
15643 3853           E9         03D9            br 	.4
15644                                           !BCC_EOS
15645                                           ! 1852    case 0x0A:
15646                                           ! 1853      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15647                       00003856            .1F:
15648                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15649 3856           FF76         10            push	$10[bp]
15650                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15651 3859           8A46         0C            mov	al,$C[bp]
15652                                           ! Debug: list unsigned char = al+0 (used reg = )
15653 385C           30E4                       xor	ah,ah
15654 385E           50                         push	ax
15655                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15656 385F           8B46         0C            mov	ax,$C[bp]
15657 3862           88E0                       mov	al,ah
15658 3864           30E4                       xor	ah,ah
15659                                           ! Debug: list unsigned int = ax+0 (used reg = )
15660 3866           50                         push	ax
15661                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15662 3867           8A46         12            mov	al,$12[bp]
15663                                           ! Debug: list unsigned char = al+0 (used reg = )
15664 386A           30E4                       xor	ah,ah
15665 386C           50                         push	ax
15666                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15667 386D           E8         1FF1            call	_biosfn_write_char_only
15668 3870           83C4                   08  add	sp,*8
15669                                           !BCC_EOS
15670                                           ! 1854      break;
15671 3873           E9         03B9            br 	.4
15672                                           !BCC_EOS
15673                                           ! 1855    case 0x0C:
15674                                           ! 1856      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15675                       00003876            .20:
15676                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15677 3876           FF76         0E            push	$E[bp]
15678                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15679 3879           FF76         10            push	$10[bp]
15680                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15681 387C           8A46         12            mov	al,$12[bp]
15682                                           ! Debug: list unsigned char = al+0 (used reg = )
15683 387F           30E4                       xor	ah,ah
15684 3881           50                         push	ax
15685                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15686 3882           8B46         0C            mov	ax,$C[bp]
15687 3885           88E0                       mov	al,ah
15688 3887           30E4                       xor	ah,ah
15689                                           ! Debug: list unsigned int = ax+0 (used reg = )
15690 3889           50                         push	ax
15691                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15692 388A           E8         223F            call	_biosfn_write_pixel
15693 388D           83C4                   08  add	sp,*8
15694                                           !BCC_EOS
15695                                           ! 1857      break;
15696 3890           E9         039C            br 	.4
15697                                           !BCC_EOS
15698                                           ! 1858    case 0x0D:
15699                                           ! 1859      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15700                       00003893            .21:
15701                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15702 3893           8D5E         12            lea	bx,$12[bp]
15703 3896           53                         push	bx
15704                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15705 3897           FF76         0E            push	$E[bp]
15706                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15707 389A           FF76         10            push	$10[bp]
15708                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15709 389D           8B46         0C            mov	ax,$C[bp]
15710 38A0           88E0                       mov	al,ah
15711 38A2           30E4                       xor	ah,ah
15712                                           ! Debug: list unsigned int = ax+0 (used reg = )
15713 38A4           50                         push	ax
15714                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15715 38A5           E8         24C5            call	_biosfn_read_pixel
15716 38A8           83C4                   08  add	sp,*8
15717                                           !BCC_EOS
15718                                           ! 1860      break;
15719 38AB           E9         0381            br 	.4
15720                                           !BCC_EOS
15721                                           ! 1861    case 0x0E:
15722                                           ! 1862      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15723                       000038AE            .22:
15724                                           ! Debug: list int = const 2 (used reg = )
15725 38AE           B8                   0002  mov	ax,*2
15726 38B1           50                         push	ax
15727                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15728 38B2           8A46         0C            mov	al,$C[bp]
15729                                           ! Debug: list unsigned char = al+0 (used reg = )
15730 38B5           30E4                       xor	ah,ah
15731 38B7           50                         push	ax
15732                                           ! Debug: list int = const $FF (used reg = )
15733 38B8           B8                   00FF  mov	ax,#$FF
15734 38BB           50                         push	ax
15735                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15736 38BC           8A46         12            mov	al,$12[bp]
15737                                           ! Debug: list unsigned char = al+0 (used reg = )
15738 38BF           30E4                       xor	ah,ah
15739 38C1           50                         push	ax
15740                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15741 38C2           E8         26B1            call	_biosfn_write_teletype
15742 38C5           83C4                   08  add	sp,*8
15743                                           !BCC_EOS
15744                                           ! 1863      break;
15745 38C8           E9         0364            br 	.4
15746                                           !BCC_EOS
15747                                           ! 1864    case 0x10:
15748                                           ! 1865      biosfn_perform_gray_scale_summing(BX,CX);
15749                       000038CB            .23:
15750                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15751 38CB           FF76         10            push	$10[bp]
15752                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15753 38CE           FF76         0C            push	$C[bp]
15754                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15755 38D1           E8         2CEE            call	_biosfn_perform_gray_scale_summing
15756 38D4           83C4                   04  add	sp,*4
15757                                           !BCC_EOS
15758                                           ! 1866      break;
15759 38D7           E9         0355            br 	.4
15760                                           !BCC_EOS
15761                                           ! 1867    case 0x11:
15762                                           ! 1868      switch(( AX & 0x00ff ))
15763                       000038DA            .24:
15764                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15765 38DA           8A46         12            mov	al,$12[bp]
15766                                           ! 1869       {
15767 38DD           E9         00E4            br 	.27
15768                                           ! 1870        case 0x00:
15769                                           ! 1871        case 0x10:
15770                       000038E0            .28:
15771                                           ! 1872         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15772                       000038E0            .29:
15773                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15774 38E0           8B46         0C            mov	ax,$C[bp]
15775 38E3           88E0                       mov	al,ah
15776 38E5           30E4                       xor	ah,ah
15777                                           ! Debug: list unsigned int = ax+0 (used reg = )
15778 38E7           50                         push	ax
15779                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15780 38E8           8A46         0C            mov	al,$C[bp]
15781                                           ! Debug: list unsigned char = al+0 (used reg = )
15782 38EB           30E4                       xor	ah,ah
15783 38ED           50                         push	ax
15784                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15785 38EE           FF76         0E            push	$E[bp]
15786                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15787 38F1           FF76         10            push	$10[bp]
15788                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15789 38F4           FF76         08            push	8[bp]
15790                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15791 38F7           FF76         16            push	$16[bp]
15792                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15793 38FA           8A46         12            mov	al,$12[bp]
15794                                           ! Debug: list unsigned char = al+0 (used reg = )
15795 38FD           30E4                       xor	ah,ah
15796 38FF           50                         push	ax
15797                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15798 3900           E8         2F66            call	_biosfn_load_text_user_pat
15799 3903           83C4                   0E  add	sp,*$E
15800                                           !BCC_EOS
15801                                           ! 1873         break;
15802 3906           E9         0111            br 	.25
15803                                           !BCC_EOS
15804                                           ! 1874        case 0x01:
15805                                           ! 1875        case 0x11:
15806                       00003909            .2A:
15807                                           ! 1876         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15808                       00003909            .2B:
15809                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15810 3909           8A46         0C            mov	al,$C[bp]
15811                                           ! Debug: list unsigned char = al+0 (used reg = )
15812 390C           30E4                       xor	ah,ah
15813 390E           50                         push	ax
15814                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15815 390F           8A46         12            mov	al,$12[bp]
15816                                           ! Debug: list unsigned char = al+0 (used reg = )
15817 3912           30E4                       xor	ah,ah
15818 3914           50                         push	ax
15819                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15820 3915           E8         2FED            call	_biosfn_load_text_8_14_pat
15821 3918           83C4                   04  add	sp,*4
15822                                           !BCC_EOS
15823                                           ! 1877         b
15824                                           ! 1877 reak;
15825 391B           E9         00FC            br 	.25
15826                                           !BCC_EOS
15827                                           ! 1878        case 0x02:
15828                                           ! 1879        case 0x12:
15829                       0000391E            .2C:
15830                                           ! 1880         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15831                       0000391E            .2D:
15832                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15833 391E           8A46         0C            mov	al,$C[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 3921           30E4                       xor	ah,ah
15836 3923           50                         push	ax
15837                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15838 3924           8A46         12            mov	al,$12[bp]
15839                                           ! Debug: list unsigned char = al+0 (used reg = )
15840 3927           30E4                       xor	ah,ah
15841 3929           50                         push	ax
15842                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15843 392A           E8         306F            call	_biosfn_load_text_8_8_pat
15844 392D           83C4                   04  add	sp,*4
15845                                           !BCC_EOS
15846                                           ! 1881         break;
15847 3930           E9         00E7            br 	.25
15848                                           !BCC_EOS
15849                                           ! 1882        case 0x04:
15850                                           ! 1883        case 0x14:
15851                       00003933            .2E:
15852                                           ! 1884         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15853                       00003933            .2F:
15854                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15855 3933           8A46         0C            mov	al,$C[bp]
15856                                           ! Debug: list unsigned char = al+0 (used reg = )
15857 3936           30E4                       xor	ah,ah
15858 3938           50                         push	ax
15859                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15860 3939           8A46         12            mov	al,$12[bp]
15861                                           ! Debug: list unsigned char = al+0 (used reg = )
15862 393C           30E4                       xor	ah,ah
15863 393E           50                         push	ax
15864                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15865 393F           E8         30F8            call	_biosfn_load_text_8_16_pat
15866 3942           83C4                   04  add	sp,*4
15867                                           !BCC_EOS
15868                                           ! 1885         break;
15869 3945           E9         00D2            br 	.25
15870                                           !BCC_EOS
15871                                           ! 1886        case 0x20:
15872                                           ! 1887         biosfn_load_gfx_8_8_chars(ES,BP);
15873                       00003948            .30:
15874                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15875 3948           FF76         08            push	8[bp]
15876                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15877 394B           FF76         16            push	$16[bp]
15878                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15879 394E           E8         317A            call	_biosfn_load_gfx_8_8_chars
15880 3951           83C4                   04  add	sp,*4
15881                                           !BCC_EOS
15882                                           ! 1888         break;
15883 3954           E9         00C3            br 	.25
15884                                           !BCC_EOS
15885                                           ! 1889        case 0x21:
15886                                           ! 1890         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15887                       00003957            .31:
15888                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15889 3957           8A46         0E            mov	al,$E[bp]
15890                                           ! Debug: list unsigned char = al+0 (used reg = )
15891 395A           30E4                       xor	ah,ah
15892 395C           50                         push	ax
15893                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15894 395D           8A46         0C            mov	al,$C[bp]
15895                                           ! Debug: list unsigned char = al+0 (used reg = )
15896 3960           30E4                       xor	ah,ah
15897 3962           50                         push	ax
15898                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15899 3963           FF76         10            push	$10[bp]
15900                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15901 3966           FF76         08            push	8[bp]
15902                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15903 3969           FF76         16            push	$16[bp]
15904                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15905 396C           E8         3190            call	_biosfn_load_gfx_user_chars
15906 396F           83C4                   0A  add	sp,*$A
15907                                           !BCC_EOS
15908                                           ! 1891         break;
15909 3972           E9         00A5            br 	.25
15910                                           !BCC_EOS
15911                                           ! 1892        case 0x22:
15912                                           ! 1893         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15913                       00003975            .32:
15914                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15915 3975           8A46         0C            mov	al,$C[bp]
15916                                           ! Debug: list unsigned char = al+0 (used reg = )
15917 3978           30E4                       xor	ah,ah
15918 397A           50                         push	ax
15919                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15920 397B           E8         3227            call	_biosfn_load_gfx_8_14_chars
15921 397E           44                         inc	sp
15922 397F           44                         inc	sp
15923                                           !BCC_EOS
15924                                           ! 1894         break;
15925 3980           E9         0097            br 	.25
15926                                           !BCC_EOS
15927                                           ! 1895        case 0x23:
15928                                           ! 1896         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15929                       00003983            .33:
15930                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15931 3983           8A46         0C            mov	al,$C[bp]
15932                                           ! Debug: list unsigned char = al+0 (used reg = )
15933 3986           30E4                       xor	ah,ah
15934 3988           50                         push	ax
15935                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15936 3989           E8         32A0            call	_biosfn_load_gfx_8_8_dd_chars
15937 398C           44                         inc	sp
15938 398D           44                         inc	sp
15939                                           !BCC_EOS
15940                                           ! 1897         break;
15941 398E           E9         0089            br 	.25
15942                                           !BCC_EOS
15943                                           ! 1898        case 0x24:
15944                                           ! 1899         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15945                       00003991            .34:
15946                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15947 3991           8A46         0C            mov	al,$C[bp]
15948                                           ! Debug: list unsigned char = al+0 (used reg = )
15949 3994           30E4                       xor	ah,ah
15950 3996           50                         push	ax
15951                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15952 3997           E8         3319            call	_biosfn_load_gfx_8_16_chars
15953 399A           44                         inc	sp
15954 399B           44                         inc	sp
15955                                           !BCC_EOS
15956                                           ! 1900         break;
15957 399C           E9         007B            br 	.25
15958                                           !BCC_EOS
15959                                           ! 1901        case 0x30:
15960                                           ! 1902         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15961                       0000399F            .35:
15962                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15963 399F           8D5E         0E            lea	bx,$E[bp]
15964 39A2           53                         push	bx
15965                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15966 39A3           8D5E         10            lea	bx,$10[bp]
15967 39A6           53                         push	bx
15968                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15969 39A7           8D5E         08            lea	bx,8[bp]
15970 39AA           53                         push	bx
15971                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15972 39AB           8D5E         16            lea	bx,$16[bp]
15973 39AE           53                         push	bx
15974                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15975 39AF           8B46         0C            mov	ax,$C[bp]
15976 39B2           88E0                       mov	al,ah
15977 39B4           30E4                       xor	ah,ah
15978                                           ! Debug: list unsigned int = ax+0 (used reg = )
15979 39B6           50                         push	ax
15980                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15981 39B7           E8         3380            call	_biosfn_get_font_info
15982 39BA           83C4                   0A  add	sp,*$A
15983                                           !BCC_EOS
15984                                           ! 1903         break;
15985 39BD           EB           5B            jmp .25
15986                                           !BCC_EOS
15987                                           ! 1904        default:
15988                                           ! 1905         unknown();
15989                       000039BF            .36:
15990                                           ! Debug: func () void = unknown+0 (used reg = )
15991 39BF           E8         46AA            call	_unknown
15992                                           !BCC_EOS
15993                                           ! 1906       }
15994                                           ! 1907      break;
15995 39C2           EB           56            jmp .25
15996                       000039C4            .27:
15997 39C4           2C                     00  sub	al,*0
15998 39C6         0F84         FF16            beq 	.28
15999 39CA           2C                     01  sub	al,*1
16000 39CC         0F84         FF39            beq 	.2A
16001 39D0           2C                     01  sub	al,*1
16002 39D2         0F84         FF48            beq 	.2C
16003 39D6           2C                     02  sub	al,*2
16004 39D8         0F84         FF57            beq 	.2E
16005 39DC           2C                     0C  sub	al,*$C
16006 39DE         0F84         FEFE            beq 	.29
16007 39E2           2C                     01  sub	al,*1
16008 39E4         0F84         FF21            beq 	.2B
16009 39E8           2C                     01  sub	al,*1
16010 39EA         0F84         FF30            beq 	.2D
16011 39EE           2C                     02  sub	al,*2
16012 39F0         0F84         FF3F            beq 	.2F
16013 39F4           2C                     0C  sub	al,*$C
16014 39F6         0F84         FF4E            beq 	.30
16015 39FA           2C                     01  sub	al,*1
16016 39FC         0F84         FF57            beq 	.31
16017 3A00           2C                     01  sub	al,*1
16018 3A02         0F84         FF6F            beq 	.32
16019 3A06           2C                     01  sub	al,*1
16020 3A08         0F84         FF77            beq 	.33
16021 3A0C           2C                     01  sub	al,*1
16022 3A0E         0F84         FF7F            beq 	.34
16023 3A12           2C                     0C  sub	al,*$C
16024 3A14         0F84         FF87            beq 	.35
16025 3A18           EB           A5            jmp	.36
16026                       00003A1A            .25:
16027 3A1A           E9         0212            br 	.4
16028                                           !BCC_EOS
16029                                           ! 1908    case 0x12:
16030                                           ! 1909      switch(( BX & 0x00ff ))
16031                       00003A1D            .37:
16032                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
16033 3A1D           8A46         0C            mov	al,$C[bp]
16034                                           ! 1910       {
16035 3A20           EB           3F            jmp .3A
16036                                           ! 1911        case 0x20:
16037                                           ! 1912         biosfn_alternate_prtsc();
16038                       00003A22            .3B:
16039                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
16040 3A22           E8         3500            call	_biosfn_alternate_prtsc
16041                                           !BCC_EOS
16042                                           ! 1913         break;
16043 3A25           EB           48            jmp .38
16044                                           !BCC_EOS
16045                                           ! 1914        case 0x35:
16046                                           ! 1915         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
16047                       00003A27            .3C:
16048                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
16049 3A27           FF76         0E            push	$E[bp]
16050                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16051 3A2A           FF76         16            push	$16[bp]
16052                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
16053 3A2D           8A46         12            mov	al,$12[bp]
16054                                           ! Debug: list unsigned char = al+0 (used reg = )
16055 3A30           30E4                       xor	ah,ah
16056 3A32           50                         push	ax
16057                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
16058 3A33           E8         3606            call	_biosfn_switch_video_interface
16059 3A36           83C4                   06  add	sp,*6
16060                                           !BCC_EOS
16061                                           ! 1916         AX = ((AX & 0xff00) | (0x12));
16062                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16063 3A39           8B46         12            mov	ax,$12[bp]
16064 3A3C           30C0                       xor	al,al
16065                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16066 3A3E           0C                     12  or	al,*$12
16067                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16068 3A40           8946         12            mov	$12[bp],ax
16069                                           !BCC_EOS
16070                                           ! 1917         break;
16071 3A43           EB           2A            jmp .38
16072                                           !BCC_EOS
16073                                           ! 1918        case 0x36:
16074                                           ! 1919         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16075                       00003A45            .3D:
16076                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16077 3A45           8A46         12            mov	al,$12[bp]
16078                                           ! Debug: list unsigned char = al+0 (used reg = )
16079 3A48           30E4                       xor	ah,ah
16080 3A4A           50                         push	ax
16081                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16082 3A4B           E8         35F6            call	_biosfn_enable_video_refresh_control
16083 3A4E           44                         inc	sp
16084 3A4F           44                         inc	sp
16085                                           !BCC_EOS
16086                                           ! 1920         AX = ((AX & 0xff00) | (0x12));
16087                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16088 3A50           8B46         12            mov	ax,$12[bp]
16089 3A53           30C0                       xor	al,al
16090                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16091 3A55           0C                     12  or	al,*$12
16092                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16093 3A57           8946         12            mov	$12[bp],ax
16094                                           !BCC_EOS
16095                                           ! 1921         break;
16096 3A5A           EB           13            jmp .38
16097                                           !BCC_EOS
16098                                           ! 1922        default:
16099                                           ! 1923         unknown();
16100                       00003A5C            .3E:
16101                                           ! Debug: func () void = unknown+0 (used reg = )
16102 3A5C           E8         460D            call	_unknown
16103                                           !BCC_EOS
16104                                           ! 1924       }
16105                                           ! 1925      break;
16106 3A5F           EB           0E            jmp .38
16107                       00003A61            .3A:
16108 3A61           2C                     20  sub	al,*$20
16109 3A63           74           BD            je 	.3B
16110 3A65           2C                     15  sub	al,*$15
16111 3A67           74           BE            je 	.3C
16112 3A69           2C                     01  sub	al,*1
16113 3A6B           74           D8            je 	.3D
16114 3A6D           EB           ED            jmp	.3E
16115                       00003A6F            .38:
16116 3A6F           E9         01BD            br 	.4
16117                                           !BCC_EOS
16118                                           ! 1926    case 0x13:
16119                                           ! 1927      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16120                       00003A72            .3F:
16121                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16122 3A72           FF76         08            push	8[bp]
16123                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16124 3A75           FF76         16            push	$16[bp]
16125                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16126 3A78           8A46         0E            mov	al,$E[bp]
16127                                           ! Debug: list unsigned char = al+0 (used reg = )
16128 3A7B           30E4                       xor	ah,ah
16129 3A7D           50                         push	ax
16130                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16131 3A7E           8B46         0E            mov	ax,$E[bp]
16132 3A81           88E0                       mov	al,ah
16133 3A83           30E4                       xor	ah,ah
16134                                           ! Debug: list unsigned int = ax+0 (used reg = )
16135 3A85           50                         push	ax
16136                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16137 3A86           FF76         10            push	$10[bp]
16138                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16139 3A89           8A46         0C            mov	al,$C[bp]
16140                                           ! Debug: list unsigned char = al+0 (used reg = )
16141 3A8C           30E4                       xor	ah,ah
16142 3A8E           50                         push	ax
16143                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16144 3A8F           8B46         0C            mov	ax,$C[bp]
16145 3A92           88E0                       mov	al,ah
16146 3A94           30E4                       xor	ah,ah
16147                                           ! Debug: list unsigned int = ax+0 (used reg = )
16148 3A96           50                         push	ax
16149                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16150 3A97           8A46         12            mov	al,$12[bp]
16151                                           ! Debug: list unsigned char = al+0 (used reg = )
16152 3A9A           30E4                       xor	ah,ah
16153 3A9C           50                         push	ax
16154                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16155 3A9D           E8         35AC            call	_biosfn_write_string
16156 3AA0           83C4                   10  add	sp,*$10
16157                                           !BCC_EOS
16158                                           ! 1928      break;
16159 3AA3           E9         0189            br 	.4
16160                                           !BCC_EOS
16161                                           ! 1929    case 0x1B:
16162                                           ! 1930      biosfn_read_state_info(BX,ES,DI);
16163                       00003AA6            .40:
16164                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16165 3AA6           FF76         04            push	4[bp]
16166                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16167 3AA9           FF76         16            push	$16[bp]
16168                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16169 3AAC           FF76         0C            push	$C[bp]
16170                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16171 3AAF           E8         36E6            call	_biosfn_read_state_info
16172 3AB2           83C4                   06  add	sp,*6
16173                                           !BCC_EOS
16174                                           ! 1931      AX = ((AX & 0xff00) | (0x1B));
16175                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16176 3AB5           8B46         12            mov	ax,$12[bp]
16177 3AB8           30C0                       xor	al,al
16178                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16179 3ABA           0C                     1B  or	al,*$1B
16180                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16181 3ABC           8946         12            mov	$12[bp],ax
16182                                           !BCC_EOS
16183                                           ! 1932      break;
16184 3ABF           E9         016D            br 	.4
16185                                           !BCC_EOS
16186                                           ! 1933    case 0x1C:
16187                                           ! 1934      switch(( AX & 0x00ff ))
16188                       00003AC2            .41:
16189                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16190 3AC2           8A46         12            mov	al,$12[bp]
16191                                           ! 1935       {
16192 3AC5           EB           36            jmp .44
16193                                           ! 1936        case 0x00:
16194                                           ! 1937         biosfn_read_video_state_size(CX,&BX);
16195                       00003AC7            .45:
16196                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16197 3AC7           8D5E         0C            lea	bx,$C[bp]
16198 3ACA           53                         push	bx
16199                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16200 3ACB           FF76         10            push	$10[bp]
16201                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16202 3ACE           E8         3846            call	_biosfn_read_video_state_size
16203 3AD1           83C4                   04  add	sp,*4
16204                                           !BCC_EOS
16205                                           ! 1938         break;
16206 3AD4           EB           35            jmp .42
16207                                           !BCC_EOS
16208                                           ! 1939        case 0x01:
16209                                           ! 1940         biosfn_save_video_state(CX,ES,BX);
16210                       00003AD6            .46:
16211                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16212 3AD6           FF76         0C            push	$C[bp]
16213                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16214 3AD9           FF76         16            push	$16[bp]
16215                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16216 3ADC           FF76         10            push	$10[bp]
16217                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16218 3ADF           E8         3859            call	_biosfn_save_video_state
16219 3AE2           83C4                   06  add	sp,*6
16220                                           !BCC_EOS
16221                                           ! 1941         break;
16222 3AE5           EB           24            jmp .42
16223                                           !BCC_EOS
16224                                           ! 1942        case 0x02:
16225                                           ! 1943         biosfn_restore_video_state(CX,ES,BX);
16226                       00003AE7            .47:
16227                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16228 3AE7           FF76         0C            push	$C[bp]
16229                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16230 3AEA           FF76         16            push	$16[bp]
16231                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16232 3AED           FF76         10            push	$10[bp]
16233                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16234 3AF0           E8         3E12            call	_biosfn_restore_video_state
16235 3AF3           83C4                   06  add	sp,*6
16236                                           !BCC_EOS
16237                                           ! 1944         break;
16238 3AF6           EB           13            jmp .42
16239                                           !BCC_EOS
16240                                           ! 1945        default:
16241                                           ! 1946         unknown();
16242                       00003AF8            .48:
16243                                           ! Debug: func () void = unknown+0 (used reg = )
16244 3AF8           E8         4571            call	_unknown
16245                                           !BCC_EOS
16246                                           ! 1947       }
16247                                           ! 1948      AX = ((AX & 0xff00) | (0x1C));
16248 3AFB           EB           0E            jmp .42
16249                       00003AFD            .44:
16250 3AFD           2C                     00  sub	al,*0
16251 3AFF           74           C6            je 	.45
16252 3B01           2C                     01  sub	al,*1
16253 3B03           74           D1            je 	.46
16254 3B05           2C                     01  sub	al,*1
16255 3B07           74           DE            je 	.47
16256 3B09           EB           ED            jmp	.48
16257                       00003B0B            .42:
16258                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16259 3B0B           8B46         12            mov	ax,$12[bp]
16260 3B0E           30C0                       xor	al,al
16261                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16262 3B10           0C                     1C  or	al,*$1C
16263                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16264 3B12           8946         12            mov	$12[bp],ax
16265                                           !BCC_EOS
16266                                           ! 1949      break;
16267 3B15           E9         0117            br 	.4
16268                                           !BCC_EOS
16269                                           ! 1950    case 0x4f:
16270                                           ! 1951      if (vbe_has_vbe_display()) {
16271                       00003B18            .49:
16272                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16273 3B18           E8         5FE1            call	_vbe_has_vbe_display
16274 3B1B           85C0                       test	ax,ax
16275 3B1D         0F84         00AB            beq 	.4A
16276                       00003B21            .4B:
16277                                           ! 1952        switch(( AX & 0x00ff ))
16278                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16279 3B21           8A46         12            mov	al,$12[bp]
16280                                           ! 1953        {
16281 3B24           E9         0078            br 	.4E
16282                                           ! 1954          case 0x00:
16283                                           ! 1955           vbe_biosfn_return_controller_information(&
16284                       00003B27            .4F:
16285                                           ! 1955 AX,ES,DI);
16286                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16287 3B27           FF76         04            push	4[bp]
16288                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16289 3B2A           FF76         16            push	$16[bp]
16290                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16291 3B2D           8D5E         12            lea	bx,$12[bp]
16292 3B30           53                         push	bx
16293                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16294 3B31           E8         603F            call	_vbe_biosfn_return_controller_information
16295 3B34           83C4                   06  add	sp,*6
16296                                           !BCC_EOS
16297                                           ! 1956           break;
16298 3B37           E9         0090            br 	.4C
16299                                           !BCC_EOS
16300                                           ! 1957          case 0x01:
16301                                           ! 1958           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16302                       00003B3A            .50:
16303                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16304 3B3A           FF76         04            push	4[bp]
16305                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16306 3B3D           FF76         16            push	$16[bp]
16307                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16308 3B40           FF76         10            push	$10[bp]
16309                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16310 3B43           8D5E         12            lea	bx,$12[bp]
16311 3B46           53                         push	bx
16312                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16313 3B47           E8         62D3            call	_vbe_biosfn_return_mode_information
16314 3B4A           83C4                   08  add	sp,*8
16315                                           !BCC_EOS
16316                                           ! 1959           break;
16317 3B4D           E9         007A            br 	.4C
16318                                           !BCC_EOS
16319                                           ! 1960          case 0x02:
16320                                           ! 1961           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16321                       00003B50            .51:
16322                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16323 3B50           FF76         04            push	4[bp]
16324                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16325 3B53           FF76         16            push	$16[bp]
16326                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16327 3B56           FF76         0C            push	$C[bp]
16328                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16329 3B59           8D5E         12            lea	bx,$12[bp]
16330 3B5C           53                         push	bx
16331                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16332 3B5D           E8         6406            call	_vbe_biosfn_set_mode
16333 3B60           83C4                   08  add	sp,*8
16334                                           !BCC_EOS
16335                                           ! 1962           break;
16336 3B63           EB           65            jmp .4C
16337                                           !BCC_EOS
16338                                           ! 1963          case 0x04:
16339                                           ! 1964           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16340                       00003B65            .52:
16341                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16342 3B65           8D5E         0C            lea	bx,$C[bp]
16343 3B68           53                         push	bx
16344                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16345 3B69           FF76         16            push	$16[bp]
16346                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16347 3B6C           FF76         0E            push	$E[bp]
16348                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16349 3B6F           FF76         10            push	$10[bp]
16350                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16351 3B72           8D5E         12            lea	bx,$12[bp]
16352 3B75           53                         push	bx
16353                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16354 3B76           E8         676D            call	_vbe_biosfn_save_restore_state
16355 3B79           83C4                   0A  add	sp,*$A
16356                                           !BCC_EOS
16357                                           ! 1965           break;
16358 3B7C           EB           4C            jmp .4C
16359                                           !BCC_EOS
16360                                           ! 1966          case 0x09:
16361                                           ! 1967           unimplemented();
16362                       00003B7E            .53:
16363                                           ! Debug: func () void = unimplemented+0 (used reg = )
16364 3B7E           E8         44DD            call	_unimplemented
16365                                           !BCC_EOS
16366                                           ! 1968           AX=0x100;
16367                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16368 3B81           B8                   0100  mov	ax,#$100
16369 3B84           8946         12            mov	$12[bp],ax
16370                                           !BCC_EOS
16371                                           ! 1969           break;
16372 3B87           EB           41            jmp .4C
16373                                           !BCC_EOS
16374                                           ! 1970          case 0x0A:
16375                                           ! 1971           unimplemented();
16376                       00003B89            .54:
16377                                           ! Debug: func () void = unimplemented+0 (used reg = )
16378 3B89           E8         44D2            call	_unimplemented
16379                                           !BCC_EOS
16380                                           ! 1972           AX=0x100;
16381                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16382 3B8C           B8                   0100  mov	ax,#$100
16383 3B8F           8946         12            mov	$12[bp],ax
16384                                           !BCC_EOS
16385                                           ! 1973           break;
16386 3B92           EB           36            jmp .4C
16387                                           !BCC_EOS
16388                                           ! 1974          default:
16389                                           ! 1975           unknown();
16390                       00003B94            .55:
16391                                           ! Debug: func () void = unknown+0 (used reg = )
16392 3B94           E8         44D5            call	_unknown
16393                                           !BCC_EOS
16394                                           ! 1976           AX=0x100;
16395                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16396 3B97           B8                   0100  mov	ax,#$100
16397 3B9A           8946         12            mov	$12[bp],ax
16398                                           !BCC_EOS
16399                                           ! 1977           }
16400                                           ! 1978         }
16401 3B9D           EB           2B            jmp .4C
16402                       00003B9F            .4E:
16403 3B9F           2C                     00  sub	al,*0
16404 3BA1           72           F1            jb 	.55
16405 3BA3           3C                     0A  cmp	al,*$A
16406 3BA5           77           21            ja  	.56
16407 3BA7           30E4                       xor	ah,ah
16408 3BA9           D1E0                       shl	ax,*1
16409 3BAB           89C3                       mov	bx,ax
16410 3BAD           2E                         seg	cs
16411 3BAE           FFA7       3BB2            br	.57[bx]
16412                       00003BB2            .57:
16413 3BB2                      3B27            .word	.4F
16414 3BB4                      3B3A            .word	.50
16415 3BB6                      3B50            .word	.51
16416 3BB8                      3B94            .word	.55
16417 3BBA                      3B65            .word	.52
16418 3BBC                      3B94            .word	.55
16419 3BBE                      3B94            .word	.55
16420 3BC0                      3B94            .word	.55
16421 3BC2                      3B94            .word	.55
16422 3BC4                      3B7E            .word	.53
16423 3BC6                      3B89            .word	.54
16424                       00003BC8            .56:
16425 3BC8           EB           CA            jmp	.55
16426                       00003BCA            .4C:
16427                                           ! 1979         else {
16428 3BCA           EB           06            jmp .58
16429                       00003BCC            .4A:
16430                                           ! 1980           AX=0x0100;
16431                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16432 3BCC           B8                   0100  mov	ax,#$100
16433 3BCF           8946         12            mov	$12[bp],ax
16434                                           !BCC_EOS
16435                                           ! 1981           }
16436                                           ! 1982         break;
16437                       00003BD2            .58:
16438 3BD2           EB           5B            jmp .4
16439                                           !BCC_EOS
16440                                           ! 1983    default:
16441                                           ! 1984      unknown();
16442                       00003BD4            .59:
16443                                           ! Debug: func () void = unknown+0 (used reg = )
16444 3BD4           E8         4495            call	_unknown
16445                                           !BCC_EOS
16446                                           ! 1985   }
16447                                           ! 1986 }
16448 3BD7           EB           56            jmp .4
16449                       00003BD9            .6:
16450 3BD9           2D                   0000  sub	ax,*0
16451 3BDC           7C           F6            jl 	.59
16452 3BDE           3D                   001C  cmp	ax,*$1C
16453 3BE1           77           43            ja  	.5A
16454 3BE3           D1E0                       shl	ax,*1
16455 3BE5           89C3                       mov	bx,ax
16456 3BE7           2E                         seg	cs
16457 3BE8           FFA7       3BEC            br	.5B[bx]
16458                       00003BEC            .5B:
16459 3BEC                      36E2            .word	.7
16460 3BEE                      3740            .word	.16
16461 3BF0                      3757            .word	.17
16462 3BF2                      376B            .word	.18
16463 3BF4                      3784            .word	.19
16464 3BF6                      379E            .word	.1A
16465 3BF8                      37AC            .word	.1B
16466 3BFA                      37E7            .word	.1C
16467 3BFC                      3821            .word	.1D
16468 3BFE                      3836            .word	.1E
16469 3C00                      3856            .word	.1F
16470 3C02                      3BD4            .word	.59
16471 3C04                      3876            .word	.20
16472 3C06                      3893            .word	.21
16473 3C08                      38AE            .word	.22
16474 3C0A                      3BD4            .word	.59
16475 3C0C                      38CB            .word	.23
16476 3C0E                      38DA            .word	.24
16477 3C10                      3A1D            .word	.37
16478 3C12                      3A72            .word	.3F
16479 3C14                      3BD4            .word	.59
16480 3C16                      3BD4            .word	.59
16481 3C18                      3BD4            .word	.59
16482 3C1A                      3BD4            .word	.59
16483 3C1C                      3BD4            .word	.59
16484 3C1E                      3BD4            .word	.59
16485 3C20                      3BD4            .word	.59
16486 3C22                      3AA6            .word	.40
16487 3C24                      3AC2            .word	.41
16488                       00003C26            .5A:
16489 3C26           2D                   004F  sub	ax,*$4F
16490 3C29         0F84         FEEB            beq 	.49
16491 3C2D           EB           A5            jmp	.59
16492                       00003C2F            .4:
16493                       FFFFFFFE            ..FFFF	=	-2
16494 3C2F           5D                         pop	bp
16495 3C30           C3                         ret
16496                                           ! 1987 static void load_dac_palette(num) Bit8u num;
16497                                           ! Register BX used in function int10_func
16498                       00003C31            _load_dac_palette:
16499                                           !BCC_EOS
16500                                           ! 1988 {
16501                                           ! 1989   Bit8u *palette;
16502                                           !BCC_EOS
16503                                           ! 1990   Bit16u i;
16504                                           !BCC_EOS
16505                                           ! 1991   outb(0x3c8,0x00);
16506 3C31           55                         push	bp
16507 3C32           89E5                       mov	bp,sp
16508 3C34           83C4                   FC  add	sp,*-4
16509                                           ! Debug: list int = const 0 (used reg = )
16510 3C37           31C0                       xor	ax,ax
16511 3C39           50                         push	ax
16512                                           ! Debug: list int = const $3C8 (used reg = )
16513 3C3A           B8                   03C8  mov	ax,#$3C8
16514 3C3D           50                         push	ax
16515                                           ! Debug: func () void = outb+0 (used reg = )
16516 3C3E           E8         43FA            call	_outb
16517 3C41           83C4                   04  add	sp,*4
16518                                           !BCC_EOS
16519                                           ! 1992   switch (num)
16520 3C44           8A46         04            mov	al,4[bp]
16521                                           ! 1993   {
16522 3C47           EB           22            jmp .5E
16523                                           ! 1994     case 0:
16524                                           ! 1995       palette=&palette0;
16525                       00003C49            .5F:
16526                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+6-4] (used reg = )
16527 3C49           BB                   0A59  mov	bx,#_palette0
16528 3C4C           895E         FE            mov	-2[bp],bx
16529                                           !BCC_EOS
16530                                           ! 1996       break;
16531 3C4F           EB           2A            jmp .5C
16532                                           !BCC_EOS
16533                                           ! 1997     case 1:
16534                                           ! 1998       palette=&palette1;
16535                       00003C51            .60:
16536                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+6-4] (used reg = )
16537 3C51           BB                   0B19  mov	bx,#_palette1
16538 3C54           895E         FE            mov	-2[bp],bx
16539                                           !BCC_EOS
16540                                           ! 1999       break;
16541 3C57           EB           22            jmp .5C
16542                                           !BCC_EOS
16543                                           ! 2000     case 2:
16544                                           ! 2001       palette=&palette2;
16545                       00003C59            .61:
16546                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+6-4] (used reg = )
16547 3C59           BB                   0BD9  mov	bx,#_palette2
16548 3C5C           895E         FE            mov	-2[bp],bx
16549                                           !BCC_EOS
16550                                           ! 2002       break;
16551 3C5F           EB           1A            jmp .5C
16552                                           !BCC_EOS
16553                                           ! 2003     case 3:
16554                                           ! 2004       palette=&palette3;
16555                       00003C61            .62:
16556                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+6-4] (used reg = )
16557 3C61           BB                   0C99  mov	bx,#_palette3
16558 3C64           895E         FE            mov	-2[bp],bx
16559                                           !BCC_EOS
16560                                           ! 2005       break;
16561 3C67           EB           12            jmp .5C
16562                                           !BCC_EOS
16563                                           ! 2006   }
16564                                           ! 2007   for (i=0;i<0x0100;i++)
16565 3C69           EB           10            jmp .5C
16566                       00003C6B            .5E:
16567 3C6B           2C                     00  sub	al,*0
16568 3C6D           74           DA            je 	.5F
16569 3C6F           2C                     01  sub	al,*1
16570 3C71           74           DE            je 	.60
16571 3C73           2C                     01  sub	al,*1
16572 3C75           74           E2            je 	.61
16573 3C77           2C                     01  sub	al,*1
16574 3C79           74           E6            je 	.62
16575                       00003C7B            .5C:
16576                       FFFFFFFA            ..FFFE	=	-6
16577                                           ! Debug: eq int = const 0 to unsigned short i = [S+6-6] (used reg = )
16578 3C7B           31C0                       xor	ax,ax
16579 3C7D           8946         FC            mov	-4[bp],ax
16580                                           !BCC_EOS
16581                                           !BCC_EOS
16582                                           ! 2008   {
16583 3C80           E9         009C            br 	.65
16584                       00003C83            .66:
16585                                           ! 2009     if(i<=dac_regs[num])
16586                                           ! Debug: ptradd unsigned char num = [S+6+2] to [4] unsigned char = dac_regs+0 (used reg = )
16587 3C83           8A46         04            mov	al,4[bp]
16588 3C86           30E4                       xor	ah,ah
16589 3C88           89C3                       mov	bx,ax
16590                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+6-6] (used reg = )
16591 3C8A           8A87       02D5            mov	al,_dac_regs[bx]
16592 3C8E           30E4                       xor	ah,ah
16593 3C90           3B46         FC            cmp	ax,-4[bp]
16594 3C93           72           5C            jb  	.67
16595                       00003C95            .68:
16596                                           ! 2010     {
16597                                           ! 2011       outb(0x3c9,palette[(i*3)+0]);
16598                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16599 3C95           8B46         FC            mov	ax,-4[bp]
16600 3C98           89C2                       mov	dx,ax
16601 3C9A           D1E0                       shl	ax,*1
16602 3C9C           01D0                       add	ax,dx
16603                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16604                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+6-4] (used reg = )
16605 3C9E           0346         FE            add	ax,-2[bp]
16606 3CA1           89C3                       mov	bx,ax
16607                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16608 3CA3           8A07                       mov	al,[bx]
16609 3CA5           30E4                       xor	ah,ah
16610 3CA7           50                         push	ax
16611                                           ! Debug: list int = const $3C9 (used reg = )
16612 3CA8           B8                   03C9  mov	ax,#$3C9
16613 3CAB           50                         push	ax
16614                                           ! Debug: func () void = outb+0 (used reg = )
16615 3CAC           E8         438C            call	_outb
16616 3CAF           83C4                   04  add	sp,*4
16617                                           !BCC_EOS
16618                                           ! 2012       outb(0x3c9,palette[(i*3)+1]);
16619                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16620 3CB2           8B46         FC            mov	ax,-4[bp]
16621 3CB5           89C2                       mov	dx,ax
16622 3CB7           D1E0                       shl	ax,*1
16623 3CB9           01D0                       add	ax,dx
16624                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16625                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+6-4] (used reg = )
16626 3CBB           40                         inc	ax
16627 3CBC           0346         FE            add	ax,-2[bp]
16628 3CBF           89C3                       mov	bx,ax
16629                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16630 3CC1           8A07                       mov	al,[bx]
16631 3CC3           30E4                       xor	ah,ah
16632 3CC5           50                         push	ax
16633                                           ! Debug: list int = const $3C9 (used reg = )
16634 3CC6           B8                   03C9  mov	ax,#$3C9
16635 3CC9           50                         push	ax
16636                                           ! Debug: func () void = outb+0 (used reg = )
16637 3CCA           E8         436E            call	_outb
16638 3CCD           83C4                   04  add	sp,*4
16639                                           !BCC_EOS
16640                                           ! 2013       outb(0x3c9,palette[(i*3)+2]);
16641                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16642 3CD0           8B46         FC            mov	ax,-4[bp]
16643 3CD3           89C2                       mov	dx,ax
16644 3CD5           D1E0                       shl	ax,*1
16645 3CD7           01D0                       add	ax,dx
16646                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16647                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+6-4] (used reg = )
16648 3CD9           40                         inc	ax
16649 3CDA           40                         inc	ax
16650 3CDB           0346         FE            add	ax,-2[bp]
16651 3CDE           89C3                       mov	bx,ax
16652                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16653 3CE0           8A07                       mov	al,[bx]
16654 3CE2           30E4                       xor	ah,ah
16655 3CE4           50                         push	ax
16656                                           ! Debug: list int = const $3C9 (used reg = )
16657 3CE5           B8                   03C9  mov	ax,#$3C9
16658 3CE8           50                         push	ax
16659                                           ! Debug: func () void = outb+0 (used reg = )
16660 3CE9           E8         434F            call	_outb
16661 3CEC           83C4                   04  add	sp,*4
16662                                           !BCC_EOS
16663                                           ! 2014     }
16664                                           ! 2015     else
16665                                           ! 2016     {
16666 3CEF           EB           27            jmp .69
16667                       00003CF1            .67:
16668                                           ! 2017       outb(0x3c9,0);
16669                                           ! Debug: list int = const 0 (used reg = )
16670 3CF1           31C0                       xor	ax,ax
16671 3CF3           50                         push	ax
16672                                           ! Debug: list int = const $3C9 (used reg = )
16673 3CF4           B8                   03C9  mov	ax,#$3C9
16674 3CF7           50                         push	ax
16675                                           ! Debug: func () void = outb+0 (used reg = )
16676 3CF8           E8         4340            call	_outb
16677 3CFB           83C4                   04  add	sp,*4
16678                                           !BCC_EOS
16679                                           ! 2018       outb(0x3c9,0);
16680                                           ! Debug: list int = const 0 (used reg = )
16681 3CFE           31C0                       xor	ax,ax
16682 3D00           50                         push	ax
16683                                           ! Debug: list int = const $3C9 (used reg = )
16684 3D01           B8                   03C9  mov	ax,#$3C9
16685 3D04           50                         push	ax
16686                                           ! Debug: func () void = outb+0 (used reg = )
16687 3D05           E8         4333            call	_outb
16688 3D08           83C4                   04  add	sp,*4
16689                                           !BCC_EOS
16690                                           ! 2019       outb(0x3c9,0);
16691                                           ! Debug: list int = const 0 (used reg = )
16692 3D0B           31C0                       xor	ax,ax
16693 3D0D           50                         push	ax
16694                                           ! Debug: list int = const $3C9 (used reg = )
16695 3D0E           B8                   03C9  mov	ax,#$3C9
16696 3D11           50                         push	ax
16697                                           ! Debug: func () void = outb+0 (used reg = )
16698 3D12           E8         4326            call	_outb
16699 3D15           83C4                   04  add	sp,*4
16700                                           !BCC_EOS
16701                                           ! 2020     }
16702                                           ! 2021   }
16703                       00003D18            .69:
16704                                           ! 2022 }
16705                       00003D18            .64:
16706                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
16707 3D18           8B46         FC            mov	ax,-4[bp]
16708 3D1B           40                         inc	ax
16709 3D1C           8946         FC            mov	-4[bp],ax
16710                       00003D1F            .65:
16711                                           ! Debug: lt int = const $100 to unsigned short i = [S+6-6] (used reg = )
16712 3D1F           8B46         FC            mov	ax,-4[bp]
16713 3D22           3D                   0100  cmp	ax,#$100
16714 3D25         0F82         FF5A            blo 	.66
16715                       00003D29            .6A:
16716                       00003D29            .63:
16717 3D29           89EC                       mov	sp,bp
16718 3D2B           5D                         pop	bp
16719 3D2C           C3                         ret
16720                                           ! 2023 static void biosfn_set_video_mode(mode) Bit8u mode;
16721                                           ! Register BX used in function load_dac_palette
16722                       00003D2D            _biosfn_set_video_mode:
16723                                           !BCC_EOS
16724                                           ! 2024 {
16725                                           ! 2025   Bit8u noclearmem=mode&0x80;
16726 3D2D           55                         push	bp
16727 3D2E           89E5                       mov	bp,sp
16728 3D30           4C                         dec	sp
16729                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16730 3D31           8A46         04            mov	al,4[bp]
16731 3D34           24                     80  and	al,#$80
16732                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16733 3D36           8846         FF            mov	-1[bp],al
16734                                           !BCC_EOS
16735                                           ! 2026   Bit8u line,mmask,*palette,vpti;
16736                                           !BCC_EOS
16737                                           ! 2027   Bit16u i,twidth,theightm1,cheight;
16738                                           !BCC_EOS
16739                                           ! 2028   Bit8u modeset_ctl,video_ctl,vga_switches;
16740                                           !BCC_EOS
16741                                           ! 2029   Bit16u crtc_addr;
16742                                           !BCC_EOS
16743                                           ! 2030   if (vbe_has_vbe_display()) {
16744 3D39           83C4                   EB  add	sp,*-$15
16745                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16746 3D3C           E8         5DBD            call	_vbe_has_vbe_display
16747 3D3F           85C0                       test	ax,ax
16748 3D41           74           08            je  	.6B
16749                       00003D43            .6C:
16750                                           ! 2031     dispi_set_enable(0x00);
16751                                           ! Debug: list int = const 0 (used reg = )
16752 3D43           31C0                       xor	ax,ax
16753 3D45           50                         push	ax
16754                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16755 3D46           E8         5B80            call	_dispi_set_enable
16756 3D49           44                         inc	sp
16757 3D4A           44                         inc	sp
16758                                           !BCC_EOS
16759                                           ! 2032   }
16760                                           ! 2033   mode=mode&0x7f;
16761                       00003D4B            .6B:
16762                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16763 3D4B           8A46         04            mov	al,4[bp]
16764 3D4E           24                     7F  and	al,*$7F
16765                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16766 3D50           8846         04            mov	4[bp],al
16767                                           !BCC_EOS
16768                                           ! 2034   line=find_vga_entry(mode);
16769                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16770 3D53           8A46         04            mov	al,4[bp]
16771 3D56           30E4                       xor	ah,ah
16772 3D58           50                         push	ax
16773                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16774 3D59           E8         4187            call	_find_vga_entry
16775 3D5C           44                         inc	sp
16776 3D5D           44                         inc	sp
16777                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16778 3D5E           8846         FE            mov	-2[bp],al
16779                                           !BCC_EOS
16780                                           ! 2035   printf("mode search %02x found line %02x\n",mode,line);
16781                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16782 3D61           8A46         FE            mov	al,-2[bp]
16783 3D64           30E4                       xor	ah,ah
16784 3D66           50                         push	ax
16785                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16786 3D67           8A46         04            mov	al,4[bp]
16787 3D6A           30E4                       xor	ah,ah
16788 3D6C           50                         push	ax
16789                                           ! Debug: list * char = .6D+0 (used reg = )
16790 3D6D           BB                   A804  mov	bx,#.6D
16791 3D70           53                         push	bx
16792                                           ! Debug: func () void = printf+0 (used reg = )
16793 3D71           E8         4306            call	_printf
16794 3D74           83C4                   06  add	sp,*6
16795                                           !BCC_EOS
16796                                           ! 2036   if(line==0xFF)
16797                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16798 3D77           8A46         FE            mov	al,-2[bp]
16799 3D7A           3C                     FF  cmp	al,#$FF
16800 3D7C           75           04            jne 	.6E
16801                       00003D7E            .6F:
16802                                           ! 2037     return;
16803 3D7E           89EC                       mov	sp,bp
16804 3D80           5D                         pop	bp
16805 3D81           C3                         ret
16806                                           !BCC_EOS
16807                                           ! 2038   vpti=line_to_vpti[line];
16808                       00003D82            .6E:
16809                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] unsigned char = line_to_vpti+0 (used reg = )
16810 3D82           8A46         FE            mov	al,-2[bp]
16811 3D85           30E4                       xor	ah,ah
16812 3D87           89C3                       mov	bx,ax
16813                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16814 3D89           8A87       02C3            mov	al,_line_to_vpti[bx]
16815 3D8D           8846         F9            mov	-7[bp],al
16816                                           !BCC_EOS
16817                                           ! 2039   twidth=video_param_table[vpti].twidth;
16818                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16819 3D90           8A46         F9            mov	al,-7[bp]
16820 3D93           30E4                       xor	ah,ah
16821 3D95           B1                     06  mov	cl,*6
16822 3D97           D3E0                       shl	ax,cl
16823 3D99           89C3                       mov	bx,ax
16824                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16825 3D9B           8A87       02D9            mov	al,_video_param_table[bx]
16826 3D9F           30E4                       xor	ah,ah
16827 3DA1           8946         F4            mov	-$C[bp],ax
16828                                           !BCC_EOS
16829                                           ! 2040   theightm1=video_param_table[vpti].theightm1;
16830                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16831 3DA4           8A46         F9            mov	al,-7[bp]
16832 3DA7           30E4                       xor	ah,ah
16833 3DA9           B1                     06  mov	cl,*6
16834 3DAB           D3E0                       shl	ax,cl
16835 3DAD           89C3                       mov	bx,ax
16836 3DAF           81C3                 02D9  add	bx,#_video_param_table
16837                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16838 3DB3           8A47         01            mov	al,1[bx]
16839 3DB6           30E4                       xor	ah,ah
16840 3DB8           8946         F2            mov	-$E[bp],ax
16841                                           !BCC_EOS
16842                                           ! 2041   cheight=video_param_table[vpti].cheight;
16843                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16844 3DBB           8A46         F9            mov	al,-7[bp]
16845 3DBE           30E4                       xor	ah,ah
16846 3DC0           B1                     06  mov	cl,*6
16847 3DC2           D3E0                       shl	ax,cl
16848 3DC4           89C3                       mov	bx,ax
16849 3DC6           81C3                 02D9  add	bx,#_video_param_table
16850                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16851 3DCA           8A47         02            mov	al,2[bx]
16852 3DCD           30E4                       xor	ah,ah
16853 3DCF           8946         F0            mov	-$10[bp],ax
16854                                           !BCC_EOS
16855                                           ! 2042   video_ctl=read_byte(0x40,0x87);
16856                                           ! Debug: list int = const $87 (used reg = )
16857 3DD2           B8                   0087  mov	ax,#$87
16858 3DD5           50                         push	ax
16859                                           ! Debug: list int = const $40 (used reg = )
16860 3DD6           B8                   0040  mov	ax,*$40
16861 3DD9           50                         push	ax
16862                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16863 3DDA           E8         41F2            call	_read_byte
16864 3DDD           83C4                   04  add	sp,*4
16865                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16866 3DE0           8846         EE            mov	-$12[bp],al
16867                                           !BCC_EOS
16868                                           ! 2043   vga_switches=read_byte(0x40,0x88);
16869                                           ! Debug: list int = const $88 (used reg = )
16870 3DE3           B8                   0088  mov	ax,#$88
16871 3DE6           50                         push	ax
16872                                           ! Debug: list int = const $40 (used reg = )
16873 3DE7           B8                   0040  mov	ax,*$40
16874 3DEA           50                         push	ax
16875                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16876 3DEB           E8         41E1            call	_read_byte
16877 3DEE           83C4                   04  add	sp,*4
16878                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16879 3DF1           8846         ED            mov	-$13[bp],al
16880                                           !BCC_EOS
16881                                           ! 2044   modeset_ctl=read_byte(0x40,0x89);
16882                                           ! Debug: list int = const $89 (used reg = )
16883 3DF4           B8                   0089  mov	ax,#$89
16884 3DF7           50                         push	ax
16885                                           ! Debug: list int = const $40 (used reg = )
16886 3DF8           B8                   0040  mov	ax,*$40
16887 3DFB           50                         push	ax
16888                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16889 3DFC           E8         41D0            call	_read_byte
16890 3DFF           83C4                   04  add	sp,*4
16891                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16892 3E02           8846         EF            mov	-$11[bp],al
16893                                           !BCC_EOS
16894                                           ! 2045   if((modeset_ctl&0x08)==0)
16895                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16896 3E05           8A46         EF            mov	al,-$11[bp]
16897 3E08           24                     08  and	al,*8
16898                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16899 3E0A           84C0                       test	al,al
16900 3E0C           75           4F            jne 	.70
16901                       00003E0E            .71:
16902                                           ! 2046   {
16903                                           ! 2047     outb(0x3c6,vga_modes[line].pelmask);
16904                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16905 3E0E           8A46         FE            mov	al,-2[bp]
16906 3E11           30E4                       xor	ah,ah
16907 3E13           B1                     03  mov	cl,*3
16908 3E15           D3E0                       shl	ax,cl
16909 3E17           89C3                       mov	bx,ax
16910 3E19           81C3                 0233  add	bx,#_vga_modes
16911                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16912 3E1D           8A47         06            mov	al,6[bx]
16913 3E20           30E4                       xor	ah,ah
16914 3E22           50                         push	ax
16915                                           ! Debug: list int = const $3C6 (used reg = )
16916 3E23           B8                   03C6  mov	ax,#$3C6
16917 3E26           50                         push	ax
16918                                           ! Debug: func () void = outb+0 (used reg = )
16919 3E27           E8         4211            call	_outb
16920 3E2A           83C4                   04  add	sp,*4
16921                                           !BCC_EOS
16922                                           ! 2048     load_dac_palette(vga_modes[line].dacmodel);
16923                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16924 3E2D           8A46         FE            mov	al,-2[bp]
16925 3E30           30E4                       xor	ah,ah
16926 3E32           B1                     03  mov	cl,*3
16927 3E34           D3E0                       shl	ax,cl
16928 3E36           89C3                       mov	bx,ax
16929 3E38           81C3                 0233  add	bx,#_vga_modes
16930                                           ! Debug: list unsigned char = [bx+7] (used reg = )
16931 3E3C           8A47         07            mov	al,7[bx]
16932 3E3F           30E4                       xor	ah,ah
16933 3E41           50                         push	ax
16934                                           ! Debug: func () void = load_dac_palette+0 (used reg = )
16935 3E42           E8         FDEC            call	_load_dac_palette
16936 3E45           44                         inc	sp
16937 3E46           44                         inc	sp
16938                                           !BCC_EOS
16939                                           ! 2049     if((m
16940                                           ! 2049 odeset_ctl&0x02)==0x02)
16941                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16942 3E47           8A46         EF            mov	al,-$11[bp]
16943 3E4A           24                     02  and	al,*2
16944                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16945 3E4C           3C                     02  cmp	al,*2
16946 3E4E           75           0D            jne 	.72
16947                       00003E50            .73:
16948                                           ! 2050     {
16949                                           ! 2051       biosfn_perform_gray_scale_summing(0x00, 0x100);
16950                                           ! Debug: list int = const $100 (used reg = )
16951 3E50           B8                   0100  mov	ax,#$100
16952 3E53           50                         push	ax
16953                                           ! Debug: list int = const 0 (used reg = )
16954 3E54           31C0                       xor	ax,ax
16955 3E56           50                         push	ax
16956                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16957 3E57           E8         2768            call	_biosfn_perform_gray_scale_summing
16958 3E5A           83C4                   04  add	sp,*4
16959                                           !BCC_EOS
16960                                           ! 2052     }
16961                                           ! 2053   }
16962                       00003E5D            .72:
16963                                           ! 2054   inb(0x3da);
16964                       00003E5D            .70:
16965                                           ! Debug: list int = const $3DA (used reg = )
16966 3E5D           B8                   03DA  mov	ax,#$3DA
16967 3E60           50                         push	ax
16968                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16969 3E61           E8         41C1            call	_inb
16970 3E64           44                         inc	sp
16971 3E65           44                         inc	sp
16972                                           !BCC_EOS
16973                                           ! 2055  for(i=0;i<=0x13;i++)
16974                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16975 3E66           31C0                       xor	ax,ax
16976 3E68           8946         F6            mov	-$A[bp],ax
16977                                           !BCC_EOS
16978                                           !BCC_EOS
16979                                           ! 2056   {outb(0x3c0,i);
16980 3E6B           EB           38            jmp .76
16981                       00003E6D            .77:
16982                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16983 3E6D           FF76         F6            push	-$A[bp]
16984                                           ! Debug: list int = const $3C0 (used reg = )
16985 3E70           B8                   03C0  mov	ax,#$3C0
16986 3E73           50                         push	ax
16987                                           ! Debug: func () void = outb+0 (used reg = )
16988 3E74           E8         41C4            call	_outb
16989 3E77           83C4                   04  add	sp,*4
16990                                           !BCC_EOS
16991                                           ! 2057    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16992                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16993 3E7A           8A46         F9            mov	al,-7[bp]
16994 3E7D           30E4                       xor	ah,ah
16995 3E7F           B1                     06  mov	cl,*6
16996 3E81           D3E0                       shl	ax,cl
16997 3E83           89C3                       mov	bx,ax
16998 3E85           81C3                 02D9  add	bx,#_video_param_table
16999                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
17000 3E89           8B46         F6            mov	ax,-$A[bp]
17001 3E8C           01C3                       add	bx,ax
17002                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
17003 3E8E           8A47         23            mov	al,$23[bx]
17004 3E91           30E4                       xor	ah,ah
17005 3E93           50                         push	ax
17006                                           ! Debug: list int = const $3C0 (used reg = )
17007 3E94           B8                   03C0  mov	ax,#$3C0
17008 3E97           50                         push	ax
17009                                           ! Debug: func () void = outb+0 (used reg = )
17010 3E98           E8         41A0            call	_outb
17011 3E9B           83C4                   04  add	sp,*4
17012                                           !BCC_EOS
17013                                           ! 2058   }
17014                                           ! 2059  outb(0x3c0,0x14);
17015                       00003E9E            .75:
17016                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17017 3E9E           8B46         F6            mov	ax,-$A[bp]
17018 3EA1           40                         inc	ax
17019 3EA2           8946         F6            mov	-$A[bp],ax
17020                       00003EA5            .76:
17021                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
17022 3EA5           8B46         F6            mov	ax,-$A[bp]
17023 3EA8           3D                   0013  cmp	ax,*$13
17024 3EAB           76           C0            jbe	.77
17025                       00003EAD            .78:
17026                       00003EAD            .74:
17027                                           ! Debug: list int = const $14 (used reg = )
17028 3EAD           B8                   0014  mov	ax,*$14
17029 3EB0           50                         push	ax
17030                                           ! Debug: list int = const $3C0 (used reg = )
17031 3EB1           B8                   03C0  mov	ax,#$3C0
17032 3EB4           50                         push	ax
17033                                           ! Debug: func () void = outb+0 (used reg = )
17034 3EB5           E8         4183            call	_outb
17035 3EB8           83C4                   04  add	sp,*4
17036                                           !BCC_EOS
17037                                           ! 2060  outb(0x3c0,0x00);
17038                                           ! Debug: list int = const 0 (used reg = )
17039 3EBB           31C0                       xor	ax,ax
17040 3EBD           50                         push	ax
17041                                           ! Debug: list int = const $3C0 (used reg = )
17042 3EBE           B8                   03C0  mov	ax,#$3C0
17043 3EC1           50                         push	ax
17044                                           ! Debug: func () void = outb+0 (used reg = )
17045 3EC2           E8         4176            call	_outb
17046 3EC5           83C4                   04  add	sp,*4
17047                                           !BCC_EOS
17048                                           ! 2061  outb(0x3c4,0);
17049                                           ! Debug: list int = const 0 (used reg = )
17050 3EC8           31C0                       xor	ax,ax
17051 3ECA           50                         push	ax
17052                                           ! Debug: list int = const $3C4 (used reg = )
17053 3ECB           B8                   03C4  mov	ax,#$3C4
17054 3ECE           50                         push	ax
17055                                           ! Debug: func () void = outb+0 (used reg = )
17056 3ECF           E8         4169            call	_outb
17057 3ED2           83C4                   04  add	sp,*4
17058                                           !BCC_EOS
17059                                           ! 2062  outb(0x3c5,0x03);
17060                                           ! Debug: list int = const 3 (used reg = )
17061 3ED5           B8                   0003  mov	ax,*3
17062 3ED8           50                         push	ax
17063                                           ! Debug: list int = const $3C5 (used reg = )
17064 3ED9           B8                   03C5  mov	ax,#$3C5
17065 3EDC           50                         push	ax
17066                                           ! Debug: func () void = outb+0 (used reg = )
17067 3EDD           E8         415B            call	_outb
17068 3EE0           83C4                   04  add	sp,*4
17069                                           !BCC_EOS
17070                                           ! 2063  for(i=1;i<=4;i++)
17071                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17072 3EE3           B8                   0001  mov	ax,*1
17073 3EE6           8946         F6            mov	-$A[bp],ax
17074                                           !BCC_EOS
17075                                           !BCC_EOS
17076                                           ! 2064   {outb(0x3c4,i);
17077 3EE9           EB           3F            jmp .7B
17078                       00003EEB            .7C:
17079                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17080 3EEB           FF76         F6            push	-$A[bp]
17081                                           ! Debug: list int = const $3C4 (used reg = )
17082 3EEE           B8                   03C4  mov	ax,#$3C4
17083 3EF1           50                         push	ax
17084                                           ! Debug: func () void = outb+0 (used reg = )
17085 3EF2           E8         4146            call	_outb
17086 3EF5           83C4                   04  add	sp,*4
17087                                           !BCC_EOS
17088                                           ! 2065    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
17089                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17090 3EF8           8B46         F6            mov	ax,-$A[bp]
17091 3EFB           48                         dec	ax
17092 3EFC           50                         push	ax
17093                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
17094 3EFD           8A46         F9            mov	al,-7[bp]
17095 3F00           30E4                       xor	ah,ah
17096 3F02           B1                     06  mov	cl,*6
17097 3F04           D3E0                       shl	ax,cl
17098 3F06           89C3                       mov	bx,ax
17099 3F08           81C3                 02D9  add	bx,#_video_param_table
17100                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
17101 3F0C           8B46         E8            mov	ax,-$18[bp]
17102 3F0F           01C3                       add	bx,ax
17103 3F11           44                         inc	sp
17104 3F12           44                         inc	sp
17105                                           ! Debug: list unsigned char = [bx+5] (used reg = )
17106 3F13           8A47         05            mov	al,5[bx]
17107 3F16           30E4                       xor	ah,ah
17108 3F18           50                         push	ax
17109                                           ! Debug: list int = const $3C5 (used reg = )
17110 3F19           B8                   03C5  mov	ax,#$3C5
17111 3F1C           50                         push	ax
17112                                           ! Debug: func () void = outb+0 (used reg = )
17113 3F1D           E8         411B            call	_outb
17114 3F20           83C4                   04  add	sp,*4
17115                                           !BCC_EOS
17116                                           ! 2066   }
17117                                           ! 2067  for(i=0;i<=8;i++)
17118                       00003F23            .7A:
17119                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17120 3F23           8B46         F6            mov	ax,-$A[bp]
17121 3F26           40                         inc	ax
17122 3F27           8946         F6            mov	-$A[bp],ax
17123                       00003F2A            .7B:
17124                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17125 3F2A           8B46         F6            mov	ax,-$A[bp]
17126 3F2D           3D                   0004  cmp	ax,*4
17127 3F30           76           B9            jbe	.7C
17128                       00003F32            .7D:
17129                       00003F32            .79:
17130                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17131 3F32           31C0                       xor	ax,ax
17132 3F34           8946         F6            mov	-$A[bp],ax
17133                                           !BCC_EOS
17134                                           !BCC_EOS
17135                                           ! 2068   {outb(0x3ce,i);
17136 3F37           EB           38            jmp .80
17137                       00003F39            .81:
17138                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17139 3F39           FF76         F6            push	-$A[bp]
17140                                           ! Debug: list int = const $3CE (used reg = )
17141 3F3C           B8                   03CE  mov	ax,#$3CE
17142 3F3F           50                         push	ax
17143                                           ! Debug: func () void = outb+0 (used reg = )
17144 3F40           E8         40F8            call	_outb
17145 3F43           83C4                   04  add	sp,*4
17146                                           !BCC_EOS
17147                                           ! 2069    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17148                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17149 3F46           8A46         F9            mov	al,-7[bp]
17150 3F49           30E4                       xor	ah,ah
17151 3F4B           B1                     06  mov	cl,*6
17152 3F4D           D3E0                       shl	ax,cl
17153 3F4F           89C3                       mov	bx,ax
17154 3F51           81C3                 02D9  add	bx,#_video_param_table
17155                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17156 3F55           8B46         F6            mov	ax,-$A[bp]
17157 3F58           01C3                       add	bx,ax
17158                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17159 3F5A           8A47         37            mov	al,$37[bx]
17160 3F5D           30E4                       xor	ah,ah
17161 3F5F           50                         push	ax
17162                                           ! Debug: list int = const $3CF (used reg = )
17163 3F60           B8                   03CF  mov	ax,#$3CF
17164 3F63           50                         push	ax
17165                                           ! Debug: func () void = outb+0 (used reg = )
17166 3F64           E8         40D4            call	_outb
17167 3F67           83C4                   04  add	sp,*4
17168                                           !BCC_EOS
17169                                           ! 2070   }
17170                                           ! 2071  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17171                       00003F6A            .7F:
17172                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17173 3F6A           8B46         F6            mov	ax,-$A[bp]
17174 3F6D           40                         inc	ax
17175 3F6E           8946         F6            mov	-$A[bp],ax
17176                       00003F71            .80:
17177                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17178 3F71           8B46         F6            mov	ax,-$A[bp]
17179 3F74           3D                   0008  cmp	ax,*8
17180 3F77           76           C0            jbe	.81
17181                       00003F79            .82:
17182                       00003F79            .7E:
17183                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17184 3F79           8A46         FE            mov	al,-2[bp]
17185 3F7C           30E4                       xor	ah,ah
17186 3F7E           B1                     03  mov	cl,*3
17187 3F80           D3E0                       shl	ax,cl
17188 3F82           89C3                       mov	bx,ax
17189 3F84           81C3                 0233  add	bx,#_vga_modes
17190                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17191 3F88           8A47         02            mov	al,2[bx]
17192 3F8B           3C                     01  cmp	al,*1
17193 3F8D           75           05            jne 	.83
17194                       00003F8F            .84:
17195 3F8F           B8                   03B4  mov	ax,#$3B4
17196 3F92           EB           03            jmp .85
17197                       00003F94            .83:
17198 3F94           B8                   03D4  mov	ax,#$3D4
17199                       00003F97            .85:
17200                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17201 3F97           8946         EA            mov	-$16[bp],ax
17202                                           !BCC_EOS
17203                                           ! 2072  outw(crtc_addr,0x0011);
17204                                           ! Debug: list int = const $11 (used reg = )
17205 3F9A           B8                   0011  mov	ax,*$11
17206 3F9D           50                         push	ax
17207                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17208 3F9E           FF76         EA            push	-$16[bp]
17209                                           ! Debug: func () void = outw+0 (used reg = )
17210 3FA1           E8         40A7            call	_outw
17211 3FA4           83C4                   04  add	sp,*4
17212                                           !BCC_EOS
17213                                           ! 2073  for(i=0;i<=0x18;i++)
17214                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17215 3FA7           31C0                       xor	ax,ax
17216 3FA9           8946         F6            mov	-$A[bp],ax
17217                                           !BCC_EOS
17218                                           !BCC_EOS
17219                                           ! 2074   {outb(crtc_addr,i);
17220 3FAC           EB           38            jmp .88
17221                       00003FAE            .89:
17222                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17223 3FAE           FF76         F6            push	-$A[bp]
17224                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17225 3FB1           FF76         EA            push	-$16[bp]
17226                                           ! Debug: func () void = outb+0 (used reg = )
17227 3FB4           E8         4084            call	_outb
17228 3FB7           83C4                   04  add	sp,*4
17229                                           !BCC_EOS
17230                                           ! 2075    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17231                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17232 3FBA           8A46         F9            mov	al,-7[bp]
17233 3FBD           30E4                       xor	ah,ah
17234 3FBF           B1                     06  mov	cl,*6
17235 3FC1           D3E0                       shl	ax,cl
17236 3FC3           89C3                       mov	bx,ax
17237 3FC5           81C3                 02D9  add	bx,#_video_param_table
17238                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17239 3FC9           8B46         F6            mov	ax,-$A[bp]
17240 3FCC           01C3                       add	bx,ax
17241                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17242 3FCE           8A47         0A            mov	al,$A[bx]
17243 3FD1           30E4                       xor	ah,ah
17244 3FD3           50                         push	ax
17245                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17246 3FD4           8B46         EA            mov	ax,-$16[bp]
17247                                           ! Debug: list unsigned int = ax+1 (used reg = )
17248 3FD7           40                         inc	ax
17249 3FD8           50                         push	ax
17250                                           ! Debug: func () void = outb+0 (used reg = )
17251 3FD9           E8         405F            call	_outb
17252 3FDC           83C4                   04  add	sp,*4
17253                                           !BCC_EOS
17254                                           ! 2076   }
17255                                           ! 2077  outb(0x3c2,video_param_table[vpti].miscreg);
17256                       00003FDF            .87:
17257                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17258 3FDF           8B46         F6            mov	ax,-$A[bp]
17259 3FE2           40                         inc	ax
17260 3FE3           8946         F6            mov	-$A[bp],ax
17261                       00003FE6            .88:
17262                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17263 3FE6           8B46         F6            mov	ax,-$A[bp]
17264 3FE9           3D                   0018  cmp	ax,*$18
17265 3FEC           76           C0            jbe	.89
17266                       00003FEE            .8A:
17267                       00003FEE            .86:
17268                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17269 3FEE           8A46         F9            mov	al,-7[bp]
17270 3FF1           30E4                       xor	ah,ah
17271 3FF3           B1                     06  mov	cl,*6
17272 3FF5           D3E0                       shl	ax,cl
17273 3FF7           89C3                       mov	bx,ax
17274 3FF9           81C3                 02D9  add	bx,#_video_param_table
17275                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17276 3FFD           8A47         09            mov	al,9[bx]
17277 4000           30E4                       xor	ah,ah
17278 4002           50                         push	ax
17279                                           ! Debug: list int = const $3C2 (used reg = )
17280 4003           B8                   03C2  mov	ax,#$3C2
17281 4006           50                         push	ax
17282                                           ! Debug: func () void = outb+0 (used reg = )
17283 4007           E8         4031            call	_outb
17284 400A           83C4                   04  add	sp,*4
17285                                           !BCC_EOS
17286                                           ! 2078  outb(0x3c0,0x20);
17287                                           ! Debug: list int = const $20 (used reg = )
17288 400D           B8                   0020  mov	ax,*$20
17289 4010           50                         push	ax
17290                                           ! Debug: list int = const $3C0 (used reg = )
17291 4011           B8                   03C0  mov	ax,#$3C0
17292 4014           50                         push	ax
17293                                           ! Debug: func () void = outb+0 (used reg = )
17294 4015           E8         4023            call	_outb
17295 4018           83C4                   04  add	sp,*4
17296                                           !BCC_EOS
17297                                           ! 2079  inb(0x3da);
17298                                           ! Debug: list int = const $3DA (used reg = )
17299 401B           B8                   03DA  mov	ax,#$3DA
17300 401E           50                         push	ax
17301                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17302 401F           E8         4003            call	_inb
17303 4022           44                         inc	sp
17304 4023           44                         inc	sp
17305                                           !BCC_EOS
17306                                           ! 2080  if(noclearmem==0x00)
17307                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17308 4024           8A46         FF            mov	al,-1[bp]
17309 4027           84C0                       test	al,al
17310 4029         0F85         00C1            bne 	.8B
17311                       0000402D            .8C:
17312                                           ! 2081   {
17313                                           ! 2082    if(vga_modes[line].class==0x00)
17314                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17315 402D           8A46         FE            mov	al,-2[bp]
17316 4030           30E4                       xor	ah,ah
17317 4032           B1                     03  mov	cl,*3
17318 4034           D3E0                       shl	ax,cl
17319 4036           89C3                       mov	bx,ax
17320 4038           81C3                 0233  add	bx,#_vga_modes
17321                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17322 403C           8A47         01            mov	al,1[bx]
17323 403F           84C0                       test	al,al
17324 4041           75           26            jne 	.8D
17325                       00004043            .8E:
17326                                           ! 2083     {
17327                                           ! 2084      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17328                                           ! Debug: list int = const $4000 (used reg = )
17329 4043           B8                   4000  mov	ax,#$4000
17330 4046           50                         push	ax
17331                                           ! Debug: list int = const $720 (used reg = )
17332 4047           B8                   0720  mov	ax,#$720
17333 404A           50                         push	ax
17334                                           ! Debug: list int = const 0 (used reg = )
17335 404B           31C0                       xor	ax,ax
17336 404D           50                         push	ax
17337                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
17338 404E           8A46         FE            mov	al,-2[bp]
17339 4051           30E4                       xor	ah,ah
17340 4053           B1                     03  mov	cl,*3
17341 4055           D3E0                       shl	ax,cl
17342 4057           89C3                       mov	bx,ax
17343 4059           81C3                 0233  add	bx,#_vga_modes
17344                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17345 405D           FF77         04            push	4[bx]
17346                                           ! Debug: func () void = memsetw+0 (used reg = )
17347 4060           E8         3EE7            call	_memsetw
17348 4063           83C4                   08  add	sp,*8
17349                                           !BCC_EOS
17350                                           ! 2085     }
17351                                           ! 2086    else
17352                                           ! 2087     {
17353 4066           E9         0085            br 	.8F
17354                       00004069            .8D:
17355                                           ! 2088      if(mode<0x0d)
17356                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17357 4069           8A46         04            mov	al,4[bp]
17358 406C           3C                     0D  cmp	al,*$D
17359 406E           73           24            jae 	.90
17360                       00004070            .91:
17361                                           ! 2089       {
17362                                           ! 2090        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17363                                           ! Debug: list int = const $4000 (used reg = )
17364 4070           B8                   4000  mov	ax,#$4000
17365 4073           50                         push	ax
17366                                           ! Debug: list int = const 0 (used reg = )
17367 4074           31C0                       xor	ax,ax
17368 4076           50                         push	ax
17369                                           ! Debug: list int = const 0 (used reg = )
17370 4077           31C0                       xor	ax,ax
17371 4079           50                         push	ax
17372                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
17373 407A           8A46         FE            mov	al,-2[bp]
17374 407D           30E4                       xor	ah,ah
17375 407F           B1                     03  mov	cl,*3
17376 4081           D3E0                       shl	ax,cl
17377 4083           89C3                       mov	bx,ax
17378 4085           81C3                 0233  add	bx,#_vga_modes
17379                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17380 4089           FF77         04            push	4[bx]
17381                                           ! Debug: func () void = memsetw+0 (used reg = )
17382 408C           E8         3EBB            call	_memsetw
17383 408F           83C4                   08  add	sp,*8
17384                                           !BCC_EOS
17385                                           ! 2091       }
17386                                           ! 2092      else
17387                                           ! 2093       {
17388 4092           EB           5A            jmp .92
17389                       00004094            .90:
17390                                           ! 2094        outb( 0x3c4, 0x02 );
17391                                           ! Debug: list int = const 2 (used reg = )
17392 4094           B8                   0002  mov	ax,*2
17393 4097           50                         push	ax
17394                                           ! Debug: list int = const $3C4 (used reg = )
17395 4098           B8                   03C4  mov	ax,#$3C4
17396 409B           50                         push	ax
17397                                           ! Debug: func () void = outb+0 (used reg = )
17398 409C           E8         3F9C            call	_outb
17399 409F           83C4                   04  add	sp,*4
17400                                           !BCC_EOS
17401                                           ! 2095        mmask = inb( 0x3c5 );
17402                                           ! Debug: list int = const $3C5 (used reg = )
17403 40A2           B8                   03C5  mov	ax,#$3C5
17404 40A5           50                         push	ax
17405                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17406 40A6           E8         3F7C            call	_inb
17407 40A9           44                         inc	sp
17408 40AA           44                         inc	sp
17409                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17410 40AB           8846         FD            mov	-3[bp],al
17411                                           !BCC_EOS
17412                                           ! 2096        outb( 0x3c5, 0x0f );
17413                                           ! Debug: list int = const $F (used reg = )
17414 40AE           B8                   000F  mov	ax,*$F
17415 40B1           50                         push	ax
17416                                           ! Debug: list int = const $3C5 (used reg = )
17417 40B2           B8                   03C5  mov	ax,#$3C5
17418 40B5           50                         push	ax
17419                                           ! Debug: func () void = outb+0 (used reg = )
17420 40B6           E8         3F82            call	_outb
17421 40B9           83C4                   04  add	sp,*4
17422                                           !BCC_EOS
17423                                           ! 2097        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17424                                           ! Debug: list unsigned int = const $8000 (used reg = )
17425 40BC           B8                   8000  mov	ax,#$8000
17426 40BF           50                         push	ax
17427                                           ! Debug: list int = const 0 (used reg = )
17428 40C0           31C0                       xor	ax,ax
17429 40C2           50                         push	ax
17430                                           ! Debug: list int = const 0 (used reg = )
17431 40C3           31C0                       xor	ax,ax
17432 40C5           50                         push	ax
17433                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
17434 40C6           8A46         FE            mov	al,-2[bp]
17435 40C9           30E4                       xor	ah,ah
17436 40CB           B1                     03  mov	cl,*3
17437 40CD           D3E0                       shl	ax,cl
17438 40CF           89C3                       mov	bx,ax
17439 40D1           81C3                 0233  add	bx,#_vga_modes
17440                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17441 40D5           FF77         04            push	4[bx]
17442                                           ! Debug: func () void = memsetw+0 (used reg = )
17443 40D8           E8         3E6F            call	_memsetw
17444 40DB           83C4                   08  add	sp,*8
17445                                           !BCC_EOS
17446                                           ! 2098        outb( 0x3c5, mmask );
17447                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17448 40DE           8A46         FD            mov	al,-3[bp]
17449 40E1           30E4                       xor	ah,ah
17450 40E3           50                         push	ax
17451                                           ! Debug: list int = const $3C5 (used reg = )
17452 40E4           B8                   03C5  mov	ax,#$3C5
17453 40E7           50                         push	ax
17454                                           ! Debug: func () void = outb+0 (used reg = )
17455 40E8           E8         3F50            call	_outb
17456 40EB           83C4                   04  add	sp,*4
17457                                           !BCC_EOS
17458                                           ! 2099       }
17459                                           ! 2100     }
17460                       000040EE            .92:
17461                                           ! 2101   }
17462                       000040EE            .8F:
17463                                           ! 2102  write_byte(0x40,0x49,mode);
17464                       000040EE            .8B:
17465                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17466 40EE           8A46         04            mov	al,4[bp]
17467 40F1           30E4                       xor	ah,ah
17468 40F3           50                         push	ax
17469                                           ! Debug: list int = const $49 (used reg = )
17470 40F4           B8                   0049  mov	ax,*$49
17471 40F7           50                         push	ax
17472                                           ! Debug: list int = const $40 (used reg = )
17473 40F8           B8                   0040  mov	ax,*$40
17474 40FB           50                         push	ax
17475                                           ! Debug: func () void = write_byte+0 (used reg = )
17476 40FC           E8         3EF6            call	_write_byte
17477 40FF           83C4                   06  add	sp,*6
17478                                           !BCC_EOS
17479                                           ! 2103  write_word(0x40,0x4A,twidth);
17480                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17481 4102           FF76         F4            push	-$C[bp]
17482                                           ! Debug: list int = const $4A (used reg = )
17483 4105           B8                   004A  mov	ax,*$4A
17484 4108           50                         push	ax
17485                                           ! Debug: list int = const $40 (used reg = )
17486 4109           B8                   0040  mov	ax,*$40
17487 410C           50                         push	ax
17488                                           ! Debug: func () void = write_word+0 (used reg = )
17489 410D           E8         3EFD            call	_write_word
17490 4110           83C4                   06  add	sp,*6
17491                                           !BCC_EOS
17492                                           ! 2104  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17493                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17494 4113           8A46         F9            mov	al,-7[bp]
17495 4116           30E4                       xor	ah,ah
17496 4118           B1                     06  mov	cl,*6
17497 411A           D3E0                       shl	ax,cl
17498 411C           89C3                       mov	bx,ax
17499 411E           81C3                 02D9  add	bx,#_video_param_table
17500                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17501                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17502                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17503 4122           FF77         03            push	3[bx]
17504                                           ! Debug: list int = const $4C (used reg = )
17505 4125           B8                   004C  mov	ax,*$4C
17506 4128           50                         push	ax
17507                                           ! Debug: list int = const $40 (used reg = )
17508 4129           B8                   0040  mov	ax,*$40
17509 412C           50                         push	ax
17510                                           ! Debug: func () void = write_word+0 (used reg = )
17511 412D           E8         3EDD            call	_write_word
17512 4130           83C4                   06  add	sp,*6
17513                                           !BCC_EOS
17514                                           ! 2105  write_word(0x40,0x63,crtc_addr);
17515                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17516 4133           FF76         EA            push	-$16[bp]
17517                                           ! Debug: list int = const $63 (used reg = )
17518 4136           B8                   0063  mov	ax,*$63
17519 4139           50                         push	ax
17520                                           ! Debug: list int = const $40 (used reg = )
17521 413A           B8                   0040  mov	ax,*$40
17522 413D           50                         push	ax
17523                                           ! Debug: func () void = write_word+0 (used reg = )
17524 413E           E8         3ECC            call	_write_word
17525 4141           83C4                   06  add	sp,*6
17526                                           !BCC_EOS
17527                                           ! 2106  write_byte(0x40,0x84,theightm1);
17528                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17529 4144           FF76         F2            push	-$E[bp]
17530                                           ! Debug: list int = const $84 (used reg = )
17531 4147           B8                   0084  mov	ax,#$84
17532 414A           50                         push	ax
17533                                           ! Debug: list int = const $40 (used reg = )
17534 414B           B8                   0040  mov	ax,*$40
17535 414E           50                         push	ax
17536                                           ! Debug: func () void = write_byte+0 (used reg = )
17537 414F           E8         3EA3            call	_write_byte
17538 4152           83C4                   06  add	sp,*6
17539                                           !BCC_EOS
17540                                           ! 2107  write_word(0x40,0x85,cheight);
17541                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17542 4155           FF76         F0            push	-$10[bp]
17543                                           ! Debug: list int = const $85 (used reg = )
17544 4158           B8                   0085  mov	ax,#$85
17545 415B           50                         push	ax
17546                                           ! Debug: list int = const $40 (used reg = )
17547 415C           B8                   0040  mov	ax,*$40
17548 415F           50                         push	ax
17549                                           ! Debug: func () void = write_word+0 (used reg = )
17550 4160           E8         3EAA            call	_write_word
17551 4163           83C4                   06  add	sp,*6
17552                                           !BCC_EOS
17553                                           ! 2108  write_byte(0x40,0x87,(0x60|noclearmem));
17554                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17555                                           ! Debug: expression subtree swapping
17556 4166           8A46         FF            mov	al,-1[bp]
17557 4169           0C                     60  or	al,*$60
17558                                           ! Debug: list unsigned char = al+0 (used reg = )
17559 416B           30E4                       xor	ah,ah
17560 416D           50                         push	ax
17561                                           ! Debug: list int = const $87 (used reg = )
17562 416E           B8                   0087  mov	ax,#$87
17563 4171           50                         push	ax
17564                                           ! Debug: list int = const $40 (used reg = )
17565 4172           B8                   0040  mov	ax,*$40
17566 4175           50                         push	ax
17567                                           ! Debug: func () void = write_byte+0 (used reg = )
17568 4176           E8         3E7C            call	_write_byte
17569 4179           83C4                   06  add	sp,*6
17570                                           !BCC_EOS
17571                                           ! 2109  write_byte(0x40,0x88,0xF9);
17572                                           ! Debug: list int = const $F9 (used reg = )
17573 417C           B8                   00F9  mov	ax,#$F9
17574 417F           50                         push	ax
17575                                           ! Debug: list int = const $88 (used reg = )
17576 4180           B8                   0088  mov	ax,#$88
17577 4183           50                         push	ax
17578                                           ! Debug: list int = const $40 (used reg = )
17579 4184           B8                   0040  mov	ax,*$40
17580 4187           50                         push	ax
17581                                           ! Debug: func () void = write_byte+0 (used reg = )
17582 4188           E8         3E6A            call	_write_byte
17583 418B           83C4                   06  add	sp,*6
17584                                           !BCC_EOS
17585                                           ! 2110  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17586                                           ! Debug: list int = const $89 (used reg = )
17587 418E           B8                   0089  mov	ax,#$89
17588 4191           50                         push	ax
17589                                           ! Debug: list int = const $40 (used reg = )
17590 4192           B8                   0040  mov	ax,*$40
17591 4195           50                         push	ax
17592                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17593 4196           E8         3E36            call	_read_byte
17594 4199           83C4                   04  add	sp,*4
17595                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17596 419C           24                     7F  and	al,*$7F
17597                                           ! Debug: list unsigned char = al+0 (used reg = )
17598 419E           30E4                       xor	ah,ah
17599 41A0           50                         push	ax
17600                                           ! Debug: list int = const $89 (used reg = )
17601 41A1           B8                   0089  mov	ax,#$89
17602 41A4           50                         push	ax
17603                                           ! Debug: list int = const $40 (used reg = )
17604 41A5           B8                   0040  mov	ax,*$40
17605 41A8           50                         push	ax
17606                                           ! Debug: func () void = write_byte+0 (used reg = )
17607 41A9           E8         3E49            call	_write_byte
17608 41AC           83C4                   06  add	sp,*6
17609                                           !BCC_EOS
17610                                           ! 2111  write_byte(0x40,0x8A,0x08);
17611                                           ! Debug: list int = const 8 (used reg = )
17612 41AF           B8                   0008  mov	ax,*8
17613 41B2           50                         push	ax
17614                                           ! Debug: list int = const $8A (used reg = )
17615 41B3           B8                   008A  mov	ax,#$8A
17616 41B6           50                         push	ax
17617                                           ! Debug: list int = const $40 (used reg = )
17618 41B7           B8                   0040  mov	ax,*$40
17619 41BA           50                         push	ax
17620                                           ! Debug: func () void = write_byte+0 (used reg = )
17621 41BB           E8         3E37            call	_write_byte
17622 41BE           83C4                   06  add	sp,*6
17623                                           !BCC_EOS
17624                                           ! 2112  write_word(0x40,0xA8, video_save_pointer_table);
17625                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17626 41C1           BB                   3642  mov	bx,#_video_save_pointer_table
17627 41C4           53                         push	bx
17628                                           ! Debug: list int = const $A8 (used reg = )
17629 41C5           B8                   00A8  mov	ax,#$A8
17630 41C8           50                         push	ax
17631                                           ! Debug: list int = const $40 (used reg = )
17632 41C9           B8                   0040  mov	ax,*$40
17633 41CC           50                         push	ax
17634                                           ! Debug: func () void = write_word+0 (used reg = )
17635 41CD           E8         3E3D            call	_write_word
17636 41D0           83C4                   06  add	sp,*6
17637                                           !BCC_EOS
17638                                           ! 2113  write_word(0x40,0xA8 +2, 0xc000);
17639                                           ! Debug: list unsigned int = const $C000 (used reg = )
17640 41D3           B8                   C000  mov	ax,#$C000
17641 41D6           50                         push	ax
17642                                           ! Debug: list int = const $AA (used reg = )
17643 41D7           B8                   00AA  mov	ax,#$AA
17644 41DA           50                         push	ax
17645                                           ! Debug: list int = const $40 (used reg = )
17646 41DB           B8                   0040  mov	ax,*$40
17647 41DE           50                         push	ax
17648                                           ! Debug: func () void = write_word+0 (used reg = )
17649 41DF           E8         3E2B            call	_write_word
17650 41E2           83C4                   06  add	sp,*6
17651                                           !BCC_EOS
17652                                           ! 2114  write_byte(0x40,0x65,0x00);
17653                                           ! Debug: list int = const 0 (used reg = )
17654 41E5           31C0                       xor	ax,ax
17655 41E7           50                         push	ax
17656                                           ! Debug: list int = const $65 (used reg = )
17657 41E8           B8                   0065  mov	ax,*$65
17658 41EB           50                         push	ax
17659                                           ! Debug: list int = const $40 (used reg = )
17660 41EC           B8                   0040  mov	ax,*$40
17661 41EF           50                         push	ax
17662                                           ! Debug: func () void = write_byte+0 (used reg = )
17663 41F0           E8         3E02            call	_write_byte
17664 41F3           83C4                   06  add	sp,*6
17665                                           !BCC_EOS
17666                                           ! 2115  write_byte(0x40,0x66,0x00);
17667                                           ! Debug: list int = const 0 (used reg = )
17668 41F6           31C0                       xor	ax,ax
17669 41F8           50                         push	ax
17670                                           ! Debug: list int = const $66 (used reg = )
17671 41F9           B8                   0066  mov	ax,*$66
17672 41FC           50                         push	ax
17673                                           ! Debug: list int = const $40 (used reg = )
17674 41FD           B8                   0040  mov	ax,*$40
17675 4200           50                         push	ax
17676                                           ! Debug: func () void = write_byte+0 (used reg = )
17677 4201           E8         3DF1            call	_write_byte
17678 4204           83C4                   06  add	sp,*6
17679                                           !BCC_EOS
17680                                           ! 2116  if(vga_modes[line].class==0x00)
17681                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17682 4207           8A46         FE            mov	al,-2[bp]
17683 420A           30E4                       xor	ah,ah
17684 420C           B1                     03  mov	cl,*3
17685 420E           D3E0                       shl	ax,cl
17686 4210           89C3                       mov	bx,ax
17687 4212           81C3                 0233  add	bx,#_vga_modes
17688                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17689 4216           8A47         01            mov	al,1[bx]
17690 4219           84C0                       test	al,al
17691 421B           75           0E            jne 	.93
17692                       0000421D            .94:
17693                                           ! 2117   {
17694                                           ! 2118    biosfn_set_cursor_shape(0x06,0x07);
17695                                           ! Debug: list int = const 7 (used reg = )
17696 421D           B8                   0007  mov	ax,*7
17697 4220           50                         push	ax
17698                                           ! Debug: list int = const 6 (used reg = )
17699 4221           B8                   0006  mov	ax,*6
17700 4224           50                         push	ax
17701                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17702 4225           E8         00BB            call	_biosfn_set_cursor_shape
17703 4228           83C4                   04  add	sp,*4
17704                                           !BCC_EOS
17705                                           ! 2119   }
17706                                           ! 2120  for(i=0;i<8;i++)
17707                       0000422B            .93:
17708                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17709 422B           31C0                       xor	ax,ax
17710 422D           8946         F6            mov	-$A[bp],ax
17711                                           !BCC_EOS
17712                                           !BCC_EOS
17713                                           ! 2121   biosfn_set_cursor_pos(i,0x0000);
17714 4230           EB           13            jmp .97
17715                       00004232            .98:
17716                                           ! Debug: list int = const 0 (used reg = )
17717 4232           31C0                       xor	ax,ax
17718 4234           50                         push	ax
17719                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17720 4235           FF76         F6            push	-$A[bp]
17721                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17722 4238           E8         01C3            call	_biosfn_set_cursor_pos
17723 423B           83C4                   04  add	sp,*4
17724                                           !BCC_EOS
17725                                           ! 2122  biosfn_set_active_page(0x00);
17726                       0000423E            .96:
17727                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17728 423E           8B46         F6            mov	ax,-$A[bp]
17729 4241           40                         inc	ax
17730 4242           8946         F6            mov	-$A[bp],ax
17731                       00004245            .97:
17732                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17733 4245           8B46         F6            mov	ax,-$A[bp]
17734 4248           3D                   0008  cmp	ax,*8
17735 424B           72           E5            jb 	.98
17736                       0000424D            .99:
17737                       0000424D            .95:
17738                                           ! Debug: list int = const 0 (used reg = )
17739 424D           31C0                       xor	ax,ax
17740 424F           50                         push	ax
17741                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17742 4250           E8         0320            call	_biosfn_set_active_page
17743 4253           44                         inc	sp
17744 4254           44                         inc	sp
17745                                           !BCC_EOS
17746                                           ! 2123  if(vga_modes[line].class==0x00)
17747                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17748 4255           8A46         FE            mov	al,-2[bp]
17749 4258           30E4                       xor	ah,ah
17750 425A           B1                     03  mov	cl,*3
17751 425C           D3E0                       shl	ax,cl
17752 425E           89C3                       mov	bx,ax
17753 4260           81C3                 0233  add	bx,#_vga_modes
17754                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17755 4264           8A47         01            mov	al,1[bx]
17756 4267           84C0                       test	al,al
17757 4269           75           0E            jne 	.9A
17758                       0000426B            .9B:
17759                                           ! 2124   {
17760                                           ! 2125 #asm
17761                                           !BCC_EOS
17762                                           !BCC_ASM
17763                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17764                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17765                       00000008            _biosfn_set_video_mode.theightm1	set	8
17766                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17767                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17768                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17769                       00000014            _biosfn_set_video_mode.line	set	$14
17770                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17771                       00000006            _biosfn_set_video_mode.cheight	set	6
17772                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17773                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17774                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17775                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17776                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17777                       0000000C            _biosfn_set_video_mode.i	set	$C
17778                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17779                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17780                       00000004            .biosfn_set_video_mode.mode	set	4
17781                       00000010            _biosfn_set_video_mode.palette	set	$10
17782                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17783                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17784                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17785                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17786                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17787                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17788                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17789                       00000013            _biosfn_set_video_mode.mmask	set	$13
17790                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17791                                             ;; copy and activate 8x16 font
17792 426B           B8                   1104    mov ax, #0x1104
17793 426E           B3                     00    mov bl, #0x00
17794 4270           CD                     10    int #0x10
17795 4272           B8                   1103    mov ax, #0x1103
17796 4275           B3                     00    mov bl, #0x00
17797 4277           CD                     10    int #0x10
17798                                           ! 2133 endasm
17799                                           !BCC_ENDASM
17800                                           !BCC_EOS
17801                                           ! 2134   }
17802                                           ! 2135 #asm
17803                       00004279            .9A:
17804                                           !BCC_EOS
17805                                           !BCC_ASM
17806                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17807                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17808                       00000008            _biosfn_set_video_mode.theightm1	set	8
17809                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17810                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17811                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17812                       00000014            _biosfn_set_video_mode.line	set	$14
17813                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17814                       00000006            _biosfn_set_video_mode.cheight	set	6
17815                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17816                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17817                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17818                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17819                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17820                       0000000C            _biosfn_set_video_mode.i	set	$C
17821                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17822                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17823                       00000004            .biosfn_set_video_mode.mode	set	4
17824                       00000010            _biosfn_set_video_mode.palette	set	$10
17825                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17826                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17827                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17828                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17829                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17830                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17831                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17832                       00000013            _biosfn_set_video_mode.mmask	set	$13
17833                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17834                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4279           1E                           push ds
 +a   427A           31C0                         xor ax, ax
 +a   427C           8ED8                         mov ds, ax
 +a   427E           B8                   13A9    mov ax,  #_vgafont8+128*8
 +a   4281           A3         007C              mov 0x1f*4, ax
 +a   4284           B8                   C000    mov ax,  #0xC000
 +a   4287           A3         007E              mov 0x1f*4+2, ax
 +a   428A           1F                           pop ds
17835                                           ! 2137 endasm
17836                                           !BCC_ENDASM
17837                                           !BCC_EOS
17838                                           ! 2138   switch(cheight)
17839 428B           8B46         F0            mov	ax,-$10[bp]
17840                                           ! 2139    {case 8:
17841 428E           E9         003F            br 	.9E
17842                                           ! 2140 #asm
17843                       00004291            .9F:
17844                                           !BCC_EOS
17845                                           !BCC_ASM
17846                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17847                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17848                       00000008            _biosfn_set_video_mode.theightm1	set	8
17849                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17850                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17851                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17852                       00000014            _biosfn_set_video_mode.line	set	$14
17853                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17854                       00000006            _biosfn_set_video_mode.cheight	set	6
17855                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17856                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17857                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17858                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17859                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17860                       0000000C            _biosfn_set_video_mode.i	set	$C
17861                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17862                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17863                       00000004            .biosfn_set_video_mode.mode	set	4
17864                       00000010            _biosfn_set_video_mode.palette	set	$10
17865                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17866                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17867                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17868                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17869                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17870                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17871                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17872                       00000013            _biosfn_set_video_mode.mmask	set	$13
17873                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17874                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   4291           1E                           push ds
 +a   4292           31C0                         xor ax, ax
 +a   4294           8ED8                         mov ds, ax
 +a   4296           B8                   0FA9    mov ax,  #_vgafont8
 +a   4299           A3         010C              mov 0x43*4, ax
 +a   429C           B8                   C000    mov ax,  #0xC000
 +a   429F           A3         010E              mov 0x43*4+2, ax
 +a   42A2           1F                           pop ds
17875                                           ! 2142 endasm
17876                                           !BCC_ENDASM
17877                                           !BCC_EOS
17878                                           ! 2143      break;
17879 42A3           E9         0039            br 	.9C
17880                                           !BCC_EOS
17881                                           ! 2144     case 14:
17882                                           ! 2145 #asm
17883                       000042A6            .A0:
17884                                           !BCC_EOS
17885                                           !BCC_ASM
17886                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17887                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17888                       00000008            _biosfn_set_video_mode.theightm1	set	8
17889                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17890                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17891                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17892                       00000014            _biosfn_set_video_mode.line	set	$14
17893                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17894                       00000006            _biosfn_set_video_mode.cheight	set	6
17895                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17896                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17897                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17898                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17899                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17900                       0000000C            _biosfn_set_video_mode.i	set	$C
17901                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17902                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17903                       00000004            .biosfn_set_video_mode.mode	set	4
17904                       00000010            _biosfn_set_video_mode.palette	set	$10
17905                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17906                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17907                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17908                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17909                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17910                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17911                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17912                       00000013            _biosfn_set_video_mode.mmask	set	$13
17913                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17914                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   42A6           1E                           push ds
 +a   42A7           31C0                         xor ax, ax
 +a   42A9           8ED8                         mov ds, ax
 +a   42AB           B8                   17A9    mov ax,  #_vgafont14
 +a   42AE           A3         010C              mov 0x43*4, ax
 +a   42B1           B8                   C000    mov ax,  #0xC000
 +a   42B4           A3         010E              mov 0x43*4+2, ax
 +a   42B7           1F                           pop ds
17915                                           ! 2147 endasm
17916                                           !BCC_ENDASM
17917                                           !BCC_EOS
17918                                           ! 2148      break;
17919 42B8           EB           25            jmp .9C
17920                                           !BCC_EOS
17921                                           ! 2149     case 16:
17922                                           ! 2150 #asm
17923                       000042BA            .A1:
17924                                           !BCC_EOS
17925                                           !BCC_ASM
17926                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17927                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17928                       00000008            _biosfn_set_video_mode.theightm1	set	8
17929                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17930                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17931                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17932                       00000014            _biosfn_set_video_mode.line	set	$14
17933                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17934                       00000006            _biosfn_set_video_mode.cheight	set	6
17935                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17936                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17937                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17938                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17939                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17940                       0000000C            _biosfn_set_video_mode.i	set	$C
17941                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17942                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17943                       00000004            .biosfn_set_video_mode.mode	set	4
17944                       00000010            _biosfn_set_video_mode.palette	set	$10
17945                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17946                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17947                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17948                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17949                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17950                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17951                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17952                       00000013            _biosfn_set_video_mode.mmask	set	$13
17953                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17954                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   42BA           1E                           push ds
 +a   42BB           31C0                         xor ax, ax
 +a   42BD           8ED8                         mov ds, ax
 +a   42BF           B8                   25A9    mov ax,  #_vgafont16
 +a   42C2           A3         010C              mov 0x43*4, ax
 +a   42C5           B8                   C000    mov ax,  #0xC000
 +a   42C8           A3         010E              mov 0x43*4+2, ax
 +a   42CB           1F                           pop ds
17955                                           ! 2152 endasm
17956                                           !BCC_ENDASM
17957                                           !BCC_EOS
17958                                           ! 2153      break;
17959 42CC           EB           11            jmp .9C
17960                                           !BCC_EOS
17961                                           ! 2154    }
17962                                           ! 2155 }
17963 42CE           EB           0F            jmp .9C
17964                       000042D0            .9E:
17965 42D0           2D                   0008  sub	ax,*8
17966 42D3           74           BC            je 	.9F
17967 42D5           2D                   0006  sub	ax,*6
17968 42D8           74           CC            je 	.A0
17969 42DA           2D                   0002  sub	ax,*2
17970 42DD           74           DB            je 	.A1
17971                       000042DF            .9C:
17972                       FFFFFFE8            ..FFFD	=	-$18
17973 42DF           89EC                       mov	sp,bp
17974 42E1           5D                         pop	bp
17975 42E2           C3                         ret
17976                                           ! 2156 static void biosfn_set_cursor_shape (CH,CL)
17977                                           ! Register BX used in function biosfn_set_video_mode
17978                                           ! 2157 Bit8u CH;Bit8u CL;
17979                       000042E3            _biosfn_set_cursor_shape:
17980                                           !BCC_EOS
17981                                           !BCC_EOS
17982                                           ! 2158 {Bit16u cheight,curs,crtc_addr;
17983                                           !BCC_EOS
17984                                           ! 2159  Bit8u modeset_ctl;
17985                                           !BCC_EOS
17986                                           ! 2160  CH&=0x3f;
17987 42E3           55                         push	bp
17988 42E4           89E5                       mov	bp,sp
17989 42E6           83C4                   F8  add	sp,*-8
17990                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17991 42E9           8A46         04            mov	al,4[bp]
17992 42EC           24                     3F  and	al,*$3F
17993 42EE           8846         04            mov	4[bp],al
17994                                           !BCC_EOS
17995                                           ! 2161  CL&=0x1f;
17996                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17997 42F1           8A46         06            mov	al,6[bp]
17998 42F4           24                     1F  and	al,*$1F
17999 42F6           8846         06            mov	6[bp],al
18000                                           !BCC_EOS
18001                                           ! 2162  curs=(CH<<8)+CL;
18002                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
18003 42F9           8A46         04            mov	al,4[bp]
18004 42FC           30E4                       xor	ah,ah
18005 42FE           88C4                       mov	ah,al
18006 4300           30C0                       xor	al,al
18007                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
18008 4302           0246         06            add	al,6[bp]
18009 4305           80D4                   00  adc	ah,*0
18010                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
18011 4308           8946         FC            mov	-4[bp],ax
18012                                           !BCC_EOS
18013                                           ! 2163  write_word(0x40,0x60,curs);
18014                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
18015 430B           FF76         FC            push	-4[bp]
18016                                           ! Debug: list int = const $60 (used reg = )
18017 430E           B8                   0060  mov	ax,*$60
18018 4311           50                         push	ax
18019                                           ! Debug: list int = const $40 (used reg = )
18020 4312           B8                   0040  mov	ax,*$40
18021 4315           50                         push	ax
18022                                           ! Debug: func () void = write_word+0 (used reg = )
18023 4316           E8         3CF4            call	_write_word
18024 4319           83C4                   06  add	sp,*6
18025                                           !BCC_EOS
18026                                           ! 2164  modeset_ctl=read_byte(0x40,0x89);
18027                                           ! Debug: list int = const $89 (used reg = )
18028 431C           B8                   0089  mov	ax,#$89
18029 431F           50                         push	ax
18030                                           ! Debug: list int = const $40 (used reg = )
18031 4320           B8                   0040  mov	ax,*$40
18032 4323           50                         push	ax
18033                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18034 4324           E8         3CA8            call	_read_byte
18035 4327           83C4                   04  add	sp,*4
18036                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
18037 432A           8846         F9            mov	-7[bp],al
18038                                           !BCC_EOS
18039                                           ! 2165  cheight = read_word(0x40,0x85);
18040                                           ! Debug: list int = const $85 (used reg = )
18041 432D           B8                   0085  mov	ax,#$85
18042 4330           50                         push	ax
18043                                           ! Debug: list int = const $40 (used reg = )
18044 4331           B8                   0040  mov	ax,*$40
18045 4334           50                         push	ax
18046                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18047 4335           E8         3CAA            call	_read_word
18048 4338           83C4                   04  add	sp,*4
18049                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
18050 433B           8946         FE            mov	-2[bp],ax
18051                                           !BCC_EOS
18052                                           ! 2166  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
18053                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
18054 433E           8A46         F9            mov	al,-7[bp]
18055 4341           24                     01  and	al,*1
18056 4343           84C0                       test	al,al
18057 4345           74           66            je  	.A2
18058                       00004347            .A6:
18059                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
18060 4347           8B46         FE            mov	ax,-2[bp]
18061 434A           3D                   0008  cmp	ax,*8
18062 434D           76           5E            jbe 	.A2
18063                       0000434F            .A5:
18064                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
18065 434F           8A46         06            mov	al,6[bp]
18066 4352           3C                     08  cmp	al,*8
18067 4354           73           57            jae 	.A2
18068                       00004356            .A4:
18069                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
18070 4356           8A46         04            mov	al,4[bp]
18071 4359           3C                     20  cmp	al,*$20
18072 435B           73           50            jae 	.A2
18073                       0000435D            .A3:
18074                                           ! 2167   {
18075                                           ! 2168    if(CL!=(CH+1))
18076                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18077 435D           8A46         04            mov	al,4[bp]
18078 4360           30E4                       xor	ah,ah
18079                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
18080                                           ! Debug: expression subtree swapping
18081 4362           40                         inc	ax
18082 4363           50                         push	ax
18083 4364           8A46         06            mov	al,6[bp]
18084 4367           30E4                       xor	ah,ah
18085 4369           3B46         F6            cmp	ax,-$A[bp]
18086 436C           8D66         F8            lea	sp,-8[bp]
18087 436F           74           15            je  	.A7
18088                       00004371            .A8:
18089                                           ! 2169     {
18090                                           ! 2170      CH = ((CH+1) * cheight / 8) -1;
18091                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18092 4371           8A46         04            mov	al,4[bp]
18093 4374           30E4                       xor	ah,ah
18094                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18095 4376           40                         inc	ax
18096 4377           8B4E         FE            mov	cx,-2[bp]
18097 437A           F7E9                       imul	cx
18098                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18099 437C           B1                     03  mov	cl,*3
18100 437E           D3E8                       shr	ax,cl
18101                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18102                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
18103 4380           48                         dec	ax
18104 4381           8846         04            mov	4[bp],al
18105                                           !BCC_EOS
18106                                           ! 2171     }
18107                                           ! 2172    else
18108                                           ! 2173     {
18109 4384           EB           14            jmp .A9
18110                       00004386            .A7:
18111                                           ! 2174      CH = ((CL+1) * cheight / 8) - 2;
18112                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18113 4386           8A46         06            mov	al,6[bp]
18114 4389           30E4                       xor	ah,ah
18115                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18116 438B           40                         inc	ax
18117 438C           8B4E         FE            mov	cx,-2[bp]
18118 438F           F7E9                       imul	cx
18119                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18120 4391           B1                     03  mov	cl,*3
18121 4393           D3E8                       shr	ax,cl
18122                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18123                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18124 4395           48                         dec	ax
18125 4396           48                         dec	ax
18126 4397           8846         04            mov	4[bp],al
18127                                           !BCC_EOS
18128                                           ! 2175     }
18129                                           ! 2176    CL = ((CL+1) * cheight / 8) - 1;
18130                       0000439A            .A9:
18131                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18132 439A           8A46         06            mov	al,6[bp]
18133 439D           30E4                       xor	ah,ah
18134                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18135 439F           40                         inc	ax
18136 43A0           8B4E         FE            mov	cx,-2[bp]
18137 43A3           F7E9                       imul	cx
18138                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18139 43A5           B1                     03  mov	cl,*3
18140 43A7           D3E8                       shr	ax,cl
18141                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18142                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18143 43A9           48                         dec	ax
18144 43AA           8846         06            mov	6[bp],al
18145                                           !BCC_EOS
18146                                           ! 2177   }
18147                                           ! 2178  crtc_addr=read_word(0x40,0x63);
18148                       000043AD            .A2:
18149                                           ! Debug: list int = const $63 (used reg = )
18150 43AD           B8                   0063  mov	ax,*$63
18151 43B0           50                         push	ax
18152                                           ! Debug: list int = const $40 (used reg = )
18153 43B1           B8                   0040  mov	ax,*$40
18154 43B4           50                         push	ax
18155                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18156 43B5           E8         3C2A            call	_read_word
18157 43B8           83C4                   04  add	sp,*4
18158                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18159 43BB           8946         FA            mov	-6[bp],ax
18160                                           !BCC_EOS
18161                                           ! 2179  outb(crtc_addr,0x0a);
18162                                           ! Debug: list int = const $A (used reg = )
18163 43BE           B8                   000A  mov	ax,*$A
18164 43C1           50                         push	ax
18165                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18166 43C2           FF76         FA            push	-6[bp]
18167                                           ! Debug: func () void = outb+0 (used reg = )
18168 43C5           E8         3C73            call	_outb
18169 43C8           83C4                   04  add	sp,*4
18170                                           !BCC_EOS
18171                                           ! 2180  outb(crtc_addr+1,CH);
18172                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18173 43CB           8A46         04            mov	al,4[bp]
18174 43CE           30E4                       xor	ah,ah
18175 43D0           50                         push	ax
18176                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18177 43D1           8B46         FA            mov	ax,-6[bp]
18178                                           ! Debug: list unsigned int = ax+1 (used reg = )
18179 43D4           40                         inc	ax
18180 43D5           50                         push	ax
18181                                           ! Debug: func () void = outb+0 (used reg = )
18182 43D6           E8         3C62            call	_outb
18183 43D9           83C4                   04  add	sp,*4
18184                                           !BCC_EOS
18185                                           ! 2181  outb(crtc_addr,0x0b);
18186                                           ! Debug: list int = const $B (used reg = )
18187 43DC           B8                   000B  mov	ax,*$B
18188 43DF           50                         push	ax
18189                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18190 43E0           FF76         FA            push	-6[bp]
18191                                           ! Debug: func () void = outb+0 (used reg = )
18192 43E3           E8         3C55            call	_outb
18193 43E6           83C4                   04  add	sp,*4
18194                                           !BCC_EOS
18195                                           ! 2182  outb(crtc_addr+1,CL);
18196                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18197 43E9           8A46         06            mov	al,6[bp]
18198 43EC           30E4                       xor	ah,ah
18199 43EE           50                         push	ax
18200                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18201 43EF           8B46         FA            mov	ax,-6[bp]
18202                                           ! Debug: list unsigned int = ax+1 (used reg = )
18203 43F2           40                         inc	ax
18204 43F3           50                         push	ax
18205                                           ! Debug: func () void = outb+0 (used reg = )
18206 43F4           E8         3C44            call	_outb
18207 43F7           83C4                   04  add	sp,*4
18208                                           !BCC_EOS
18209                                           ! 2183 }
18210 43FA           89EC                       mov	sp,bp
18211 43FC           5D                         pop	bp
18212 43FD           C3                         ret
18213                                           ! 2184 static void biosfn_set_cursor_pos (page, cursor)
18214                                           ! 2185 Bit8u page;Bit16u cursor;
18215                       000043FE            _biosfn_set_cursor_pos:
18216                                           !BCC_EOS
18217                                           !BCC_EOS
18218                                           ! 2186 {
18219                                           ! 2187  Bit8u xcurs,ycurs,current;
18220                                           !BCC_EOS
18221                                           ! 2188  Bit16u nbcols,nbrows,address,crtc_addr;
18222                                           !BCC_EOS
18223                                           ! 2189  if(page>7)return;
18224 43FE           55                         push	bp
18225 43FF           89E5                       mov	bp,sp
18226 4401           83C4                   F4  add	sp,*-$C
18227                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18228 4404           8A46         04            mov	al,4[bp]
18229 4407           3C                     07  cmp	al,*7
18230 4409           76           04            jbe 	.AA
18231                       0000440B            .AB:
18232 440B           89EC                       mov	sp,bp
18233 440D           5D                         pop	bp
18234 440E           C3                         ret
18235                                           !BCC_EOS
18236                                           ! 2190  write_word(0x40, 0x50 +2*page, cursor);
18237                       0000440F            .AA:
18238                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18239 440F           FF76         06            push	6[bp]
18240                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18241                                           ! Debug: expression subtree swapping
18242 4412           8A46         04            mov	al,4[bp]
18243 4415           30E4                       xor	ah,ah
18244 4417           D1E0                       shl	ax,*1
18245                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18246                                           ! Debug: expression subtree swapping
18247                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18248 4419           05                   0050  add	ax,*$50
18249 441C           50                         push	ax
18250                                           ! Debug: list int = const $40 (used reg = )
18251 441D           B8                   0040  mov	ax,*$40
18252 4420           50                         push	ax
18253                                           ! Debug: func () void = write_word+0 (used reg = )
18254 4421           E8         3BE9            call	_write_word
18255 4424           83C4                   06  add	sp,*6
18256                                           !BCC_EOS
18257                                           ! 2191  current=read_byte(0x40,0x62);
18258                                           ! Debug: list int = const $62 (used reg = )
18259 4427           B8                   0062  mov	ax,*$62
18260 442A           50                         push	ax
18261                                           ! Debug: list int = const $40 (used reg = )
18262 442B           B8                   0040  mov	ax,*$40
18263 442E           50                         push	ax
18264                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18265 442F           E8         3B9D            call	_read_byte
18266 4432           83C4                   04  add	sp,*4
18267                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18268 4435           8846         FD            mov	-3[bp],al
18269                                           !BCC_EOS
18270                                           ! 2192  if(page==current)
18271                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18272 4438           8A46         04            mov	al,4[bp]
18273 443B           3A46         FD            cmp	al,-3[bp]
18274 443E         0F85         00B8            bne 	.AC
18275                       00004442            .AD:
18276                                           ! 2193   {
18277                                           ! 2194    nbcols=read_word(0x40,0x4A);
18278                                           ! Debug: list int = const $4A (used reg = )
18279 4442           B8                   004A  mov	ax,*$4A
18280 4445           50                         push	ax
18281                                           ! Debug: list int = const $40 (used reg = )
18282 4446           B8                   0040  mov	ax,*$40
18283 4449           50                         push	ax
18284                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18285 444A           E8         3B95            call	_read_word
18286 444D           83C4                   04  add	sp,*4
18287                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18288 4450           8946         FA            mov	-6[bp],ax
18289                                           !BCC_EOS
18290                                           ! 2195    nbrows=read_byte(0x40,0x84)+1;
18291                                           ! Debug: list int = const $84 (used reg = )
18292 4453           B8                   0084  mov	ax,#$84
18293 4456           50                         push	ax
18294                                           ! Debug: list int = const $40 (used reg = )
18295 4457           B8                   0040  mov	ax,*$40
18296 445A           50                         push	ax
18297                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18298 445B           E8         3B71            call	_read_byte
18299 445E           83C4                   04  add	sp,*4
18300                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18301 4461           30E4                       xor	ah,ah
18302                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18303 4463           40                         inc	ax
18304 4464           8946         F8            mov	-8[bp],ax
18305                                           !BCC_EOS
18306                                           ! 2196    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18307                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18308 4467           8A46         06            mov	al,6[bp]
18309                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18310 446A           8846         FF            mov	-1[bp],al
18311                                           !BCC_EOS
18312                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18313 446D           8B46         06            mov	ax,6[bp]
18314 4470           30C0                       xor	al,al
18315                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18316 4472           88E0                       mov	al,ah
18317 4474           30E4                       xor	ah,ah
18318                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18319 4476           8846         FE            mov	-2[bp],al
18320                                           !BCC_EOS
18321                                           ! 2197    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18322                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18323 4479           8A46         FE            mov	al,-2[bp]
18324 447C           30E4                       xor	ah,ah
18325 447E           8B4E         FA            mov	cx,-6[bp]
18326 4481           F7E9                       imul	cx
18327 4483           50                         push	ax
18328                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18329 4484           8B46         FA            mov	ax,-6[bp]
18330 4487           8B4E         F8            mov	cx,-8[bp]
18331 448A           F7E9                       imul	cx
18332                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18333 448C           0C                     FF  or	al,#$FF
18334                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18335                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18336 448E           89C3                       mov	bx,ax
18337 4490           8A46         04            mov	al,4[bp]
18338 4493           30E4                       xor	ah,ah
18339 4495           93                         xchg	ax,bx
18340 4496           40                         inc	ax
18341 4497           89D9                       mov	cx,bx
18342 4499           F7E9                       imul	cx
18343                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18344 449B           0246         FF            add	al,-1[bp]
18345 449E           80D4                   00  adc	ah,*0
18346                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18347 44A1           0346         F2            add	ax,-$E[bp]
18348 44A4           44                         inc	sp
18349 44A5           44                         inc	sp
18350                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18351 44A6           8946         F6            mov	-$A[bp],ax
18352                                           !BCC_EOS
18353                                           ! 2198    crtc_addr=read_word(0x40,0x63);
18354                                           ! Debug: list int = const $63 (used reg = )
18355 44A9           B8                   0063  mov	ax,*$63
18356 44AC           50                         push	ax
18357                                           ! Debug: list int = const $40 (used reg = )
18358 44AD           B8                   0040  mov	ax,*$40
18359 44B0           50                         push	ax
18360                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18361 44B1           E8         3B2E            call	_read_word
18362 44B4           83C4                   04  add	sp,*4
18363                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18364 44B7           8946         F4            mov	-$C[bp],ax
18365                                           !BCC_EOS
18366                                           ! 2199    outb(crtc_addr,0x0e);
18367                                           ! Debug: list int = const $E (used reg = )
18368 44BA           B8                   000E  mov	ax,*$E
18369 44BD           50                         push	ax
18370                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18371 44BE           FF76         F4            push	-$C[bp]
18372                                           ! Debug: func () void = outb+0 (used reg = )
18373 44C1           E8         3B77            call	_outb
18374 44C4           83C4                   04  add	sp,*4
18375                                           !BCC_EOS
18376                                           ! 2200    outb(crtc_addr+1,(address&0xff00)>>8);
18377                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18378 44C7           8B46         F6            mov	ax,-$A[bp]
18379 44CA           30C0                       xor	al,al
18380                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18381 44CC           88E0                       mov	al,ah
18382 44CE           30E4                       xor	ah,ah
18383                                           ! Debug: list unsigned int = ax+0 (used reg = )
18384 44D0           50                         push	ax
18385                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18386 44D1           8B46         F4            mov	ax,-$C[bp]
18387                                           ! Debug: list unsigned int = ax+1 (used reg = )
18388 44D4           40                         inc	ax
18389 44D5           50                         push	ax
18390                                           ! Debug: func () void = outb+0 (used reg = )
18391 44D6           E8         3B62            call	_outb
18392 44D9           83C4                   04  add	sp,*4
18393                                           !BCC_EOS
18394                                           ! 2201    outb(crtc_addr,0x0f);
18395                                           ! Debug: list int = const $F (used reg = )
18396 44DC           B8                   000F  mov	ax,*$F
18397 44DF           50                         push	ax
18398                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18399 44E0           FF76         F4            push	-$C[bp]
18400                                           ! Debug: func () void = outb+0 (used reg = )
18401 44E3           E8         3B55            call	_outb
18402 44E6           83C4                   04  add	sp,*4
18403                                           !BCC_EOS
18404                                           ! 2202    outb(crtc_addr+1,address&0x00ff);
18405                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18406 44E9           8A46         F6            mov	al,-$A[bp]
18407                                           ! Debug: list unsigned char = al+0 (used reg = )
18408 44EC           30E4                       xor	ah,ah
18409 44EE           50                         push	ax
18410                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18411 44EF           8B46         F4            mov	ax,-$C[bp]
18412                                           ! Debug: list unsigned int = ax+1 (used reg = )
18413 44F2           40                         inc	ax
18414 44F3           50                         push	ax
18415                                           ! Debug: func () void = outb+0 (used reg = )
18416 44F4           E8         3B44            call	_outb
18417 44F7           83C4                   04  add	sp,*4
18418                                           !BCC_EOS
18419                                           ! 2203   }
18420                                           ! 2204 }
18421                       000044FA            .AC:
18422 44FA           89EC                       mov	sp,bp
18423 44FC           5D                         pop	bp
18424 44FD           C3                         ret
18425                                           ! 2205 static void biosfn_get_cursor_pos (page,shape, pos)
18426                                           ! Register BX used in function biosfn_set_cursor_pos
18427                                           ! 2206 Bit8u page;Bit16u *shape;Bit16u *pos;
18428                       000044FE            _biosfn_get_cursor_pos:
18429                                           !BCC_EOS
18430                                           !BCC_EOS
18431                                           !BCC_EOS
18432                                           ! 2207 {
18433                                           ! 2208  Bit16u ss=get_SS();
18434 44FE           55                         push	bp
18435 44FF           89E5                       mov	bp,sp
18436 4501           4C                         dec	sp
18437 4502           4C                         dec	sp
18438                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18439 4503           E8         3B55            call	_get_SS
18440                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18441 4506           8946         FE            mov	-2[bp],ax
18442                                           !BCC_EOS
18443                                           ! 2209  write_word(ss, shape, 0);
18444                                           ! Debug: list int = const 0 (used reg = )
18445 4509           31C0                       xor	ax,ax
18446 450B           50                         push	ax
18447                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18448 450C           FF76         06            push	6[bp]
18449                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18450 450F           FF76         FE            push	-2[bp]
18451                                           ! Debug: func () void = write_word+0 (used reg = )
18452 4512           E8         3AF8            call	_write_word
18453 4515           83C4                   06  add	sp,*6
18454                                           !BCC_EOS
18455                                           ! 2210  write_word(ss, pos, 0);
18456                                           ! Debug: list int = const 0 (used reg = )
18457 4518           31C0                       xor	ax,ax
18458 451A           50                         push	ax
18459                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18460 451B           FF76         08            push	8[bp]
18461                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18462 451E           FF76         FE            push	-2[bp]
18463                                           ! Debug: func () void = write_word+0 (used reg = )
18464 4521           E8         3AE9            call	_write_word
18465 4524           83C4                   06  add	sp,*6
18466                                           !BCC_EOS
18467                                           ! 2211  if(page>7)return;
18468                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18469 4527           8A46         04            mov	al,4[bp]
18470 452A           3C                     07  cmp	al,*7
18471 452C           76           04            jbe 	.AE
18472                       0000452E            .AF:
18473 452E           89EC                       mov	sp,bp
18474 4530           5D                         pop	bp
18475 4531           C3                         ret
18476                                           !BCC_EOS
18477                                           ! 2212  write_word(ss,shape,read_word(0x40,0x60));
18478                       00004532            .AE:
18479                                           ! Debug: list int = const $60 (used reg = )
18480 4532           B8                   0060  mov	ax,*$60
18481 4535           50                         push	ax
18482                                           ! Debug: list int = const $40 (used reg = )
18483 4536           B8                   0040  mov	ax,*$40
18484 4539           50                         push	ax
18485                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18486 453A           E8         3AA5            call	_read_word
18487 453D           83C4                   04  add	sp,*4
18488                                           ! Debug: list unsigned short = ax+0 (used reg = )
18489 4540           50                         push	ax
18490                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18491 4541           FF76         06            push	6[bp]
18492                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18493 4544           FF76         FE            push	-2[bp]
18494                                           ! Debug: func () void = write_word+0 (used reg = )
18495 4547           E8         3AC3            call	_write_word
18496 454A           83C4                   06  add	sp,*6
18497                                           !BCC_EOS
18498                                           ! 2213  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18499                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18500 454D           8A46         04            mov	al,4[bp]
18501 4550           30E4                       xor	ah,ah
18502 4552           D1E0                       shl	ax,*1
18503                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18504                                           ! Debug: expression subtree swapping
18505                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18506 4554           05                   0050  add	ax,*$50
18507 4557           50                         push	ax
18508                                           ! Debug: list int = const $40 (used reg = )
18509 4558           B8                   0040  mov	ax,*$40
18510 455B           50                         push	ax
18511                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18512 455C           E8         3A83            call	_read_word
18513 455F           83C4                   04  add	sp,*4
18514                                           ! Debug: list unsigned short = ax+0 (used reg = )
18515 4562           50                         push	ax
18516                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18517 4563           FF76         08            push	8[bp]
18518                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18519 4566           FF76         FE            push	-2[bp]
18520                                           ! Debug: func () void = write_word+0 (used reg = )
18521 4569           E8         3AA1            call	_write_word
18522 456C           83C4                   06  add	sp,*6
18523                                           !BCC_EOS
18524                                           ! 2214 }
18525 456F           89EC                       mov	sp,bp
18526 4571           5D                         pop	bp
18527 4572           C3                         ret
18528                                           ! 2215 static void biosfn_set_active_page (page)
18529                                           ! 2216 Bit8u page;
18530                       00004573            _biosfn_set_active_page:
18531                                           !BCC_EOS
18532                                           ! 2217 {
18533                                           ! 2218  Bit16u cursor,dummy,crtc_addr;
18534                                           !BCC_EOS
18535                                           ! 2219  Bit16u nbcols,nbrows,address;
18536                                           !BCC_EOS
18537                                           ! 2220  Bit8u mode,line;
18538                                           !BCC_EOS
18539                                           ! 2221  if(page>7)return;
18540 4573           55                         push	bp
18541 4574           89E5                       mov	bp,sp
18542 4576           83C4                   F2  add	sp,*-$E
18543                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18544 4579           8A46         04            mov	al,4[bp]
18545 457C           3C                     07  cmp	al,*7
18546 457E           76           04            jbe 	.B0
18547                       00004580            .B1:
18548 4580           89EC                       mov	sp,bp
18549 4582           5D                         pop	bp
18550 4583           C3                         ret
18551                                           !BCC_EOS
18552                                           ! 2222  mode=read_byte(0x40,0x49);
18553                       00004584            .B0:
18554                                           ! Debug: list int = const $49 (used reg = )
18555 4584           B8                   0049  mov	ax,*$49
18556 4587           50                         push	ax
18557                                           ! Debug: list int = const $40 (used reg = )
18558 4588           B8                   0040  mov	ax,*$40
18559 458B           50                         push	ax
18560                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18561 458C           E8         3A40            call	_read_byte
18562 458F           83C4                   04  add	sp,*4
18563                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18564 4592           8846         F3            mov	-$D[bp],al
18565                                           !BCC_EOS
18566                                           ! 2223  line=find_vga_entry(mode);
18567                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18568 4595           8A46         F3            mov	al,-$D[bp]
18569 4598           30E4                       xor	ah,ah
18570 459A           50                         push	ax
18571                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18572 459B           E8         3945            call	_find_vga_entry
18573 459E           44                         inc	sp
18574 459F           44                         inc	sp
18575                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18576 45A0           8846         F2            mov	-$E[bp],al
18577                                           !BCC_EOS
18578                                           ! 2224 
18579                                           ! 2224  if(line==0xFF)return;
18580                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18581 45A3           8A46         F2            mov	al,-$E[bp]
18582 45A6           3C                     FF  cmp	al,#$FF
18583 45A8           75           04            jne 	.B2
18584                       000045AA            .B3:
18585 45AA           89EC                       mov	sp,bp
18586 45AC           5D                         pop	bp
18587 45AD           C3                         ret
18588                                           !BCC_EOS
18589                                           ! 2225  biosfn_get_cursor_pos(page,&dummy,&cursor);
18590                       000045AE            .B2:
18591                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18592 45AE           8D5E         FE            lea	bx,-2[bp]
18593 45B1           53                         push	bx
18594                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18595 45B2           8D5E         FC            lea	bx,-4[bp]
18596 45B5           53                         push	bx
18597                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18598 45B6           8A46         04            mov	al,4[bp]
18599 45B9           30E4                       xor	ah,ah
18600 45BB           50                         push	ax
18601                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18602 45BC           E8         FF3F            call	_biosfn_get_cursor_pos
18603 45BF           83C4                   06  add	sp,*6
18604                                           !BCC_EOS
18605                                           ! 2226  if(vga_modes[line].class==0x00)
18606                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$12] struct  = vga_modes+0 (used reg = )
18607 45C2           8A46         F2            mov	al,-$E[bp]
18608 45C5           30E4                       xor	ah,ah
18609 45C7           B1                     03  mov	cl,*3
18610 45C9           D3E0                       shl	ax,cl
18611 45CB           89C3                       mov	bx,ax
18612 45CD           81C3                 0233  add	bx,#_vga_modes
18613                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18614 45D1           8A47         01            mov	al,1[bx]
18615 45D4           84C0                       test	al,al
18616 45D6           75           6E            jne 	.B4
18617                       000045D8            .B5:
18618                                           ! 2227   {
18619                                           ! 2228    nbcols=read_word(0x40,0x4A);
18620                                           ! Debug: list int = const $4A (used reg = )
18621 45D8           B8                   004A  mov	ax,*$4A
18622 45DB           50                         push	ax
18623                                           ! Debug: list int = const $40 (used reg = )
18624 45DC           B8                   0040  mov	ax,*$40
18625 45DF           50                         push	ax
18626                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18627 45E0           E8         39FF            call	_read_word
18628 45E3           83C4                   04  add	sp,*4
18629                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18630 45E6           8946         F8            mov	-8[bp],ax
18631                                           !BCC_EOS
18632                                           ! 2229    nbrows=read_byte(0x40,0x84)+1;
18633                                           ! Debug: list int = const $84 (used reg = )
18634 45E9           B8                   0084  mov	ax,#$84
18635 45EC           50                         push	ax
18636                                           ! Debug: list int = const $40 (used reg = )
18637 45ED           B8                   0040  mov	ax,*$40
18638 45F0           50                         push	ax
18639                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18640 45F1           E8         39DB            call	_read_byte
18641 45F4           83C4                   04  add	sp,*4
18642                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18643 45F7           30E4                       xor	ah,ah
18644                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18645 45F9           40                         inc	ax
18646 45FA           8946         F6            mov	-$A[bp],ax
18647                                           !BCC_EOS
18648                                           ! 2230    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18649                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18650 45FD           8B46         F8            mov	ax,-8[bp]
18651 4600           8B4E         F6            mov	cx,-$A[bp]
18652 4603           F7E9                       imul	cx
18653                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18654 4605           D1E0                       shl	ax,*1
18655                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18656 4607           0C                     FF  or	al,#$FF
18657                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18658                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18659 4609           89C3                       mov	bx,ax
18660 460B           8A46         04            mov	al,4[bp]
18661 460E           30E4                       xor	ah,ah
18662 4610           93                         xchg	ax,bx
18663 4611           40                         inc	ax
18664 4612           89D9                       mov	cx,bx
18665 4614           F7E9                       imul	cx
18666                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18667 4616           8946         F4            mov	-$C[bp],ax
18668                                           !BCC_EOS
18669                                           ! 2231    write_word(0x40,0x4E,address);
18670                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18671 4619           FF76         F4            push	-$C[bp]
18672                                           ! Debug: list int = const $4E (used reg = )
18673 461C           B8                   004E  mov	ax,*$4E
18674 461F           50                         push	ax
18675                                           ! Debug: list int = const $40 (used reg = )
18676 4620           B8                   0040  mov	ax,*$40
18677 4623           50                         push	ax
18678                                           ! Debug: func () void = write_word+0 (used reg = )
18679 4624           E8         39E6            call	_write_word
18680 4627           83C4                   06  add	sp,*6
18681                                           !BCC_EOS
18682                                           ! 2232    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18683                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18684 462A           8B46         F8            mov	ax,-8[bp]
18685 462D           8B4E         F6            mov	cx,-$A[bp]
18686 4630           F7E9                       imul	cx
18687                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18688 4632           0C                     FF  or	al,#$FF
18689                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18690                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18691 4634           89C3                       mov	bx,ax
18692 4636           8A46         04            mov	al,4[bp]
18693 4639           30E4                       xor	ah,ah
18694 463B           93                         xchg	ax,bx
18695 463C           40                         inc	ax
18696 463D           89D9                       mov	cx,bx
18697 463F           F7E9                       imul	cx
18698                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18699 4641           8946         F4            mov	-$C[bp],ax
18700                                           !BCC_EOS
18701                                           ! 2233   }
18702                                           ! 2234  else
18703                                           ! 2235   {
18704 4644           EB           24            jmp .B6
18705                       00004646            .B4:
18706                                           ! 2236    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18707                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$12] unsigned char = line_to_vpti+0 (used reg = )
18708 4646           8A46         F2            mov	al,-$E[bp]
18709 4649           30E4                       xor	ah,ah
18710 464B           89C3                       mov	bx,ax
18711                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18712 464D           8A87       02C3            mov	al,_line_to_vpti[bx]
18713 4651           30E4                       xor	ah,ah
18714 4653           B1                     06  mov	cl,*6
18715 4655           D3E0                       shl	ax,cl
18716 4657           89C3                       mov	bx,ax
18717 4659           81C3                 02D9  add	bx,#_video_param_table
18718                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18719                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18720                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18721 465D           8A46         04            mov	al,4[bp]
18722 4660           30E4                       xor	ah,ah
18723 4662           8B4F         03            mov	cx,3[bx]
18724 4665           F7E9                       imul	cx
18725                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18726 4667           8946         F4            mov	-$C[bp],ax
18727                                           !BCC_EOS
18728                                           ! 2237   }
18729                                           ! 2238  crtc_addr=read_word(0x40,0x63);
18730                       0000466A            .B6:
18731                                           ! Debug: list int = const $63 (used reg = )
18732 466A           B8                   0063  mov	ax,*$63
18733 466D           50                         push	ax
18734                                           ! Debug: list int = const $40 (used reg = )
18735 466E           B8                   0040  mov	ax,*$40
18736 4671           50                         push	ax
18737                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18738 4672           E8         396D            call	_read_word
18739 4675           83C4                   04  add	sp,*4
18740                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18741 4678           8946         FA            mov	-6[bp],ax
18742                                           !BCC_EOS
18743                                           ! 2239  outb(crtc_addr,0x0c);
18744                                           ! Debug: list int = const $C (used reg = )
18745 467B           B8                   000C  mov	ax,*$C
18746 467E           50                         push	ax
18747                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18748 467F           FF76         FA            push	-6[bp]
18749                                           ! Debug: func () void = outb+0 (used reg = )
18750 4682           E8         39B6            call	_outb
18751 4685           83C4                   04  add	sp,*4
18752                                           !BCC_EOS
18753                                           ! 2240  outb(crtc_addr+1,(address&0xff00)>>8);
18754                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18755 4688           8B46         F4            mov	ax,-$C[bp]
18756 468B           30C0                       xor	al,al
18757                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18758 468D           88E0                       mov	al,ah
18759 468F           30E4                       xor	ah,ah
18760                                           ! Debug: list unsigned int = ax+0 (used reg = )
18761 4691           50                         push	ax
18762                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18763 4692           8B46         FA            mov	ax,-6[bp]
18764                                           ! Debug: list unsigned int = ax+1 (used reg = )
18765 4695           40                         inc	ax
18766 4696           50                         push	ax
18767                                           ! Debug: func () void = outb+0 (used reg = )
18768 4697           E8         39A1            call	_outb
18769 469A           83C4                   04  add	sp,*4
18770                                           !BCC_EOS
18771                                           ! 2241  outb(crtc_addr,0x0d);
18772                                           ! Debug: list int = const $D (used reg = )
18773 469D           B8                   000D  mov	ax,*$D
18774 46A0           50                         push	ax
18775                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18776 46A1           FF76         FA            push	-6[bp]
18777                                           ! Debug: func () void = outb+0 (used reg = )
18778 46A4           E8         3994            call	_outb
18779 46A7           83C4                   04  add	sp,*4
18780                                           !BCC_EOS
18781                                           ! 2242  outb(crtc_addr+1,address&0x00ff);
18782                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18783 46AA           8A46         F4            mov	al,-$C[bp]
18784                                           ! Debug: list unsigned char = al+0 (used reg = )
18785 46AD           30E4                       xor	ah,ah
18786 46AF           50                         push	ax
18787                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18788 46B0           8B46         FA            mov	ax,-6[bp]
18789                                           ! Debug: list unsigned int = ax+1 (used reg = )
18790 46B3           40                         inc	ax
18791 46B4           50                         push	ax
18792                                           ! Debug: func () void = outb+0 (used reg = )
18793 46B5           E8         3983            call	_outb
18794 46B8           83C4                   04  add	sp,*4
18795                                           !BCC_EOS
18796                                           ! 2243  write_byte(0x40,0x62,page);
18797                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18798 46BB           8A46         04            mov	al,4[bp]
18799 46BE           30E4                       xor	ah,ah
18800 46C0           50                         push	ax
18801                                           ! Debug: list int = const $62 (used reg = )
18802 46C1           B8                   0062  mov	ax,*$62
18803 46C4           50                         push	ax
18804                                           ! Debug: list int = const $40 (used reg = )
18805 46C5           B8                   0040  mov	ax,*$40
18806 46C8           50                         push	ax
18807                                           ! Debug: func () void = write_byte+0 (used reg = )
18808 46C9           E8         3929            call	_write_byte
18809 46CC           83C4                   06  add	sp,*6
18810                                           !BCC_EOS
18811                                           ! 2244  printf("Set active page %02x address %04x\n",page,address);
18812                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18813 46CF           FF76         F4            push	-$C[bp]
18814                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18815 46D2           8A46         04            mov	al,4[bp]
18816 46D5           30E4                       xor	ah,ah
18817 46D7           50                         push	ax
18818                                           ! Debug: list * char = .B7+0 (used reg = )
18819 46D8           BB                   A7E1  mov	bx,#.B7
18820 46DB           53                         push	bx
18821                                           ! Debug: func () void = printf+0 (used reg = )
18822 46DC           E8         399B            call	_printf
18823 46DF           83C4                   06  add	sp,*6
18824                                           !BCC_EOS
18825                                           ! 2245  biosfn_set_cursor_pos(page,cursor);
18826                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18827 46E2           FF76         FE            push	-2[bp]
18828                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18829 46E5           8A46         04            mov	al,4[bp]
18830 46E8           30E4                       xor	ah,ah
18831 46EA           50                         push	ax
18832                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18833 46EB           E8         FD10            call	_biosfn_set_cursor_pos
18834 46EE           83C4                   04  add	sp,*4
18835                                           !BCC_EOS
18836                                           ! 2246 }
18837 46F1           89EC                       mov	sp,bp
18838 46F3           5D                         pop	bp
18839 46F4           C3                         ret
18840                                           ! 2247 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18841                                           ! Register BX used in function biosfn_set_active_page
18842                                           ! 2248 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18843                       000046F5            _vgamem_copy_pl4:
18844                                           !BCC_EOS
18845                                           !BCC_EOS
18846                                           !BCC_EOS
18847                                           !BCC_EOS
18848                                           !BCC_EOS
18849                                           !BCC_EOS
18850                                           ! 2249 {
18851                                           ! 2250  Bit16u src,dest;
18852                                           !BCC_EOS
18853                                           ! 2251  Bit8u i;
18854                                           !BCC_EOS
18855                                           ! 2252  src=ysrc*cheight*nbcols+xstart;
18856 46F5           55                         push	bp
18857 46F6           89E5                       mov	bp,sp
18858 46F8           83C4                   FA  add	sp,*-6
18859                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18860 46FB           8A46         0E            mov	al,$E[bp]
18861 46FE           30E4                       xor	ah,ah
18862 4700           89C3                       mov	bx,ax
18863 4702           8A46         06            mov	al,6[bp]
18864 4705           30E4                       xor	ah,ah
18865 4707           89D9                       mov	cx,bx
18866 4709           F7E9                       imul	cx
18867                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18868 470B           89C3                       mov	bx,ax
18869 470D           8A46         0C            mov	al,$C[bp]
18870 4710           30E4                       xor	ah,ah
18871 4712           93                         xchg	ax,bx
18872 4713           89D9                       mov	cx,bx
18873 4715           F7E9                       imul	cx
18874                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18875 4717           0246         04            add	al,4[bp]
18876 471A           80D4                   00  adc	ah,*0
18877                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18878 471D           8946         FE            mov	-2[bp],ax
18879                                           !BCC_EOS
18880                                           ! 2253  dest=ydest*cheight*nbcols+xstart;
18881                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18882 4720           8A46         0E            mov	al,$E[bp]
18883 4723           30E4                       xor	ah,ah
18884 4725           89C3                       mov	bx,ax
18885 4727           8A46         08            mov	al,8[bp]
18886 472A           30E4                       xor	ah,ah
18887 472C           89D9                       mov	cx,bx
18888 472E           F7E9                       imul	cx
18889                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18890 4730           89C3                       mov	bx,ax
18891 4732           8A46         0C            mov	al,$C[bp]
18892 4735           30E4                       xor	ah,ah
18893 4737           93                         xchg	ax,bx
18894 4738           89D9                       mov	cx,bx
18895 473A           F7E9                       imul	cx
18896                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18897 473C           0246         04            add	al,4[bp]
18898 473F           80D4                   00  adc	ah,*0
18899                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18900 4742           8946         FC            mov	-4[bp],ax
18901                                           !BCC_EOS
18902                                           ! 2254  outw(0x3ce, 0x0105);
18903                                           ! Debug: list int = const $105 (used reg = )
18904 4745           B8                   0105  mov	ax,#$105
18905 4748           50                         push	ax
18906                                           ! Debug: list int = const $3CE (used reg = )
18907 4749           B8                   03CE  mov	ax,#$3CE
18908 474C           50                         push	ax
18909                                           ! Debug: func () void = outw+0 (used reg = )
18910 474D           E8         38FB            call	_outw
18911 4750           83C4                   04  add	sp,*4
18912                                           !BCC_EOS
18913                                           ! 2255  for(i=0;i<cheight;i++)
18914                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18915 4753           30C0                       xor	al,al
18916 4755           8846         FB            mov	-5[bp],al
18917                                           !BCC_EOS
18918                                           !BCC_EOS
18919                                           ! 2256   {
18920 4758           EB           43            jmp .BA
18921                       0000475A            .BB:
18922                                           ! 2257    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18923                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18924 475A           8A46         0A            mov	al,$A[bp]
18925 475D           30E4                       xor	ah,ah
18926 475F           50                         push	ax
18927                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18928 4760           8A46         0C            mov	al,$C[bp]
18929 4763           30E4                       xor	ah,ah
18930 4765           89C3                       mov	bx,ax
18931 4767           8A46         FB            mov	al,-5[bp]
18932 476A           30E4                       xor	ah,ah
18933 476C           89D9                       mov	cx,bx
18934 476E           F7E9                       imul	cx
18935                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18936                                           ! Debug: expression subtree swapping
18937 4770           0346         FE            add	ax,-2[bp]
18938                                           ! Debug: list unsigned int = ax+0 (used reg = )
18939 4773           50                         push	ax
18940                                           ! Debug: list unsigned int = const $A000 (used reg = )
18941 4774           B8                   A000  mov	ax,#$A000
18942 4777           50                         push	ax
18943                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18944 4778           8A46         0C            mov	al,$C[bp]
18945 477B           30E4                       xor	ah,ah
18946 477D           89C3                       mov	bx,ax
18947 477F           8A46         FB            mov	al,-5[bp]
18948 4782           30E4                       xor	ah,ah
18949 4784           89D9                       mov	cx,bx
18950 4786           F7E9                       imul	cx
18951                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18952                                           ! Debug: expression subtree swapping
18953 4788           0346         FC            add	ax,-4[bp]
18954                                           ! Debug: list unsigned int = ax+0 (used reg = )
18955 478B           50                         push	ax
18956                                           ! Debug: list unsigned int = const $A000 (used reg = )
18957 478C           B8                   A000  mov	ax,#$A000
18958 478F           50                         push	ax
18959                                           ! Debug: func () void = memcpyb+0 (used reg = )
18960 4790           E8         37DC            call	_memcpyb
18961 4793           83C4                   0A  add	sp,*$A
18962                                           !BCC_EOS
18963                                           ! 2258   }
18964                                           ! 2259  outw(0x3ce, 0x0005);
18965                       00004796            .B9:
18966                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18967 4796           8A46         FB            mov	al,-5[bp]
18968 4799           40                         inc	ax
18969 479A           8846         FB            mov	-5[bp],al
18970                       0000479D            .BA:
18971                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18972 479D           8A46         FB            mov	al,-5[bp]
18973 47A0           3A46         0E            cmp	al,$E[bp]
18974 47A3           72           B5            jb 	.BB
18975                       000047A5            .BC:
18976                       000047A5            .B8:
18977                                           ! Debug: list int = const 5 (used reg = )
18978 47A5           B8                   0005  mov	ax,*5
18979 47A8           50                         push	ax
18980                                           ! Debug: list int = const $3CE (used reg = )
18981 47A9           B8                   03CE  mov	ax,#$3CE
18982 47AC           50                         push	ax
18983                                           ! Debug: func () void = outw+0 (used reg = )
18984 47AD           E8         389B            call	_outw
18985 47B0           83C4                   04  add	sp,*4
18986                                           !BCC_EOS
18987                                           ! 2260 }
18988 47B3           89EC                       mov	sp,bp
18989 47B5           5D                         pop	bp
18990 47B6           C3                         ret
18991                                           ! 2261 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18992                                           ! Register BX used in function vgamem_copy_pl4
18993                                           ! 2262 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18994                       000047B7            _vgamem_fill_pl4:
18995                                           !BCC_EOS
18996                                           !BCC_EOS
18997                                           !BCC_EOS
18998                                           !BCC_EOS
18999                                           !BCC_EOS
19000                                           !BCC_EOS
19001                                           ! 2263 {
19002                                           ! 2264  Bit16u dest;
19003                                           !BCC_EOS
19004                                           ! 2265  Bit8u i;
19005                                           !BCC_EOS
19006                                           ! 2266  dest=ystart*cheight*nbcols+xstart;
19007 47B7           55                         push	bp
19008 47B8           89E5                       mov	bp,sp
19009 47BA           83C4                   FC  add	sp,*-4
19010                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19011 47BD           8A46         0C            mov	al,$C[bp]
19012 47C0           30E4                       xor	ah,ah
19013 47C2           89C3                       mov	bx,ax
19014 47C4           8A46         06            mov	al,6[bp]
19015 47C7           30E4                       xor	ah,ah
19016 47C9           89D9                       mov	cx,bx
19017 47CB           F7E9                       imul	cx
19018                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19019 47CD           89C3                       mov	bx,ax
19020 47CF           8A46         0A            mov	al,$A[bp]
19021 47D2           30E4                       xor	ah,ah
19022 47D4           93                         xchg	ax,bx
19023 47D5           89D9                       mov	cx,bx
19024 47D7           F7E9                       imul	cx
19025                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19026 47D9           0246         04            add	al,4[bp]
19027 47DC           80D4                   00  adc	ah,*0
19028                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19029 47DF           8946         FE            mov	-2[bp],ax
19030                                           !BCC_EOS
19031                                           ! 2267  outw(0x3ce, 0x0205);
19032                                           ! Debug: list int = const $205 (used reg = )
19033 47E2           B8                   0205  mov	ax,#$205
19034 47E5           50                         push	ax
19035                                           ! Debug: list int = const $3CE (used reg = )
19036 47E6           B8                   03CE  mov	ax,#$3CE
19037 47E9           50                         push	ax
19038                                           ! Debug: func () void = outw+0 (used reg = )
19039 47EA           E8         385E            call	_outw
19040 47ED           83C4                   04  add	sp,*4
19041                                           !BCC_EOS
19042                                           ! 2268  for(i=0;i<cheight;i++)
19043                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19044 47F0           30C0                       xor	al,al
19045 47F2           8846         FD            mov	-3[bp],al
19046                                           !BCC_EOS
19047                                           !BCC_EOS
19048                                           ! 2269   {
19049 47F5           EB           31            jmp .BF
19050                       000047F7            .C0:
19051                                           ! 2270    memsetb(0xa000,dest+i*nbcols,attr,cols);
19052                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19053 47F7           8A46         08            mov	al,8[bp]
19054 47FA           30E4                       xor	ah,ah
19055 47FC           50                         push	ax
19056                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19057 47FD           8A46         0E            mov	al,$E[bp]
19058 4800           30E4                       xor	ah,ah
19059 4802           50                         push	ax
19060                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
19061 4803           8A46         0A            mov	al,$A[bp]
19062 4806           30E4                       xor	ah,ah
19063 4808           89C3                       mov	bx,ax
19064 480A           8A46         FD            mov	al,-3[bp]
19065 480D           30E4                       xor	ah,ah
19066 480F           89D9                       mov	cx,bx
19067 4811           F7E9                       imul	cx
19068                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19069                                           ! Debug: expression subtree swapping
19070 4813           0346         FE            add	ax,-2[bp]
19071                                           ! Debug: list unsigned int = ax+0 (used reg = )
19072 4816           50                         push	ax
19073                                           ! Debug: list unsigned int = const $A000 (used reg = )
19074 4817           B8                   A000  mov	ax,#$A000
19075 481A           50                         push	ax
19076                                           ! Debug: func () void = memsetb+0 (used reg = )
19077 481B           E8         3707            call	_memsetb
19078 481E           83C4                   08  add	sp,*8
19079                                           !BCC_EOS
19080                                           ! 2271   }
19081                                           ! 2272  outw(0x3ce, 0x0005);
19082                       00004821            .BE:
19083                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19084 4821           8A46         FD            mov	al,-3[bp]
19085 4824           40                         inc	ax
19086 4825           8846         FD            mov	-3[bp],al
19087                       00004828            .BF:
19088                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19089 4828           8A46         FD            mov	al,-3[bp]
19090 482B           3A46         0C            cmp	al,$C[bp]
19091 482E           72           C7            jb 	.C0
19092                       00004830            .C1:
19093                       00004830            .BD:
19094                                           ! Debug: list int = const 5 (used reg = )
19095 4830           B8                   0005  mov	ax,*5
19096 4833           50                         push	ax
19097                                           ! Debug: list int = const $3CE (used reg = )
19098 4834           B8                   03CE  mov	ax,#$3CE
19099 4837           50                         push	ax
19100                                           ! Debug: func () void = outw+0 (used reg = )
19101 4838           E8         3810            call	_outw
19102 483B           83C4                   04  add	sp,*4
19103                                           !BCC_EOS
19104                                           ! 2273 }
19105 483E           89EC                       mov	sp,bp
19106 4840           5D                         pop	bp
19107 4841           C3                         ret
19108                                           ! 2274 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
19109                                           ! Register BX used in function vgamem_fill_pl4
19110                                           ! 2275 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
19111                       00004842            _vgamem_copy_cga:
19112                                           !BCC_EOS
19113                                           !BCC_EOS
19114                                           !BCC_EOS
19115                                           !BCC_EOS
19116                                           !BCC_EOS
19117                                           !BCC_EOS
19118                                           ! 2276 {
19119                                           ! 2277  Bit16u src,dest;
19120                                           !BCC_EOS
19121                                           ! 2278  Bit8u i;
19122                                           !BCC_EOS
19123                                           ! 2279  src=((ysrc*cheight*nbcols)>>1)+xstart;
19124 4842           55                         push	bp
19125 4843           89E5                       mov	bp,sp
19126 4845           83C4                   FA  add	sp,*-6
19127                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19128 4848           8A46         0E            mov	al,$E[bp]
19129 484B           30E4                       xor	ah,ah
19130 484D           89C3                       mov	bx,ax
19131 484F           8A46         06            mov	al,6[bp]
19132 4852           30E4                       xor	ah,ah
19133 4854           89D9                       mov	cx,bx
19134 4856           F7E9                       imul	cx
19135                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19136 4858           89C3                       mov	bx,ax
19137 485A           8A46         0C            mov	al,$C[bp]
19138 485D           30E4                       xor	ah,ah
19139 485F           93                         xchg	ax,bx
19140 4860           89D9                       mov	cx,bx
19141 4862           F7E9                       imul	cx
19142                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19143 4864           D1E8                       shr	ax,*1
19144                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19145 4866           0246         04            add	al,4[bp]
19146 4869           80D4                   00  adc	ah,*0
19147                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19148 486C           8946         FE            mov	-2[bp],ax
19149                                           !BCC_EOS
19150                                           ! 2280  dest=((ydest*cheight*nbcols)>>1)+xstart;
19151                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19152 486F           8A46         0E            mov	al,$E[bp]
19153 4872           30E4                       xor	ah,ah
19154 4874           89C3                       mov	bx,ax
19155 4876           8A46         08            mov	al,8[bp]
19156 4879           30E4                       xor	ah,ah
19157 487B           89D9                       mov	cx,bx
19158 487D           F7E9                       imul	cx
19159                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19160 487F           89C3                       mov	bx,ax
19161 4881           8A46         0C            mov	al,$C[bp]
19162 4884           30E4                       xor	ah,ah
19163 4886           93                         xchg	ax,bx
19164 4887           89D9                       mov	cx,bx
19165 4889           F7E9                       imul	cx
19166                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19167 488B           D1E8                       shr	ax,*1
19168                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19169 488D           0246         04            add	al,4[bp]
19170 4890           80D4                   00  adc	ah,*0
19171                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19172 4893           8946         FC            mov	-4[bp],ax
19173                                           !BCC_EOS
19174                                           ! 2281  for(i=0;i<cheight;i++)
19175                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19176 4896           30C0                       xor	al,al
19177 4898           8846         FB            mov	-5[bp],al
19178                                           !BCC_EOS
19179                                           !BCC_EOS
19180                                           ! 2282   {
19181 489B           E9         00A8            br 	.C4
19182                       0000489E            .C5:
19183                                           ! 2283    if (i & 1)
19184                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19185 489E           8A46         FB            mov	al,-5[bp]
19186 48A1           24                     01  and	al,*1
19187 48A3           84C0                       test	al,al
19188 48A5           74           56            je  	.C6
19189                       000048A7            .C7:
19190                                           ! 2284      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19191                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19192 48A7           8A46         0A            mov	al,$A[bp]
19193 48AA           30E4                       xor	ah,ah
19194 48AC           50                         push	ax
19195                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19196 48AD           8A46         FB            mov	al,-5[bp]
19197 48B0           30E4                       xor	ah,ah
19198 48B2           D1E8                       shr	ax,*1
19199                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19200 48B4           89C3                       mov	bx,ax
19201 48B6           8A46         0C            mov	al,$C[bp]
19202 48B9           30E4                       xor	ah,ah
19203 48BB           93                         xchg	ax,bx
19204 48BC           89D9                       mov	cx,bx
19205 48BE           F7E9                       imul	cx
19206 48C0           50                         push	ax
19207                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19208                                           ! Debug: expression subtree swapping
19209 48C1           8B46         FE            mov	ax,-2[bp]
19210                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19211 48C4           05                   2000  add	ax,#$2000
19212 48C7           0346         F6            add	ax,-$A[bp]
19213 48CA           44                         inc	sp
19214 48CB           44                         inc	sp
19215                                           ! Debug: list unsigned int = ax+0 (used reg = )
19216 48CC           50                         push	ax
19217                                           ! Debug: list unsigned int = const $B800 (used reg = )
19218 48CD           B8                   B800  mov	ax,#$B800
19219 48D0           50                         push	ax
19220                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19221 48D1           8A46         FB            mov	al,-5[bp]
19222 48D4           30E4                       xor	ah,ah
19223 48D6           D1E8                       shr	ax,*1
19224                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19225 48D8           89C3                       mov	bx,ax
19226 48DA           8A46         0C            mov	al,$C[bp]
19227 48DD           30E4                       xor	ah,ah
19228 48DF           93                         xchg	ax,bx
19229 48E0           89D9                       mov	cx,bx
19230 48E2           F7E9                       imul	cx
19231 48E4           50                         push	ax
19232                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19233                                           ! Debug: expression subtree swapping
19234 48E5           8B46         FC            mov	ax,-4[bp]
19235                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19236 48E8           05                   2000  add	ax,#$2000
19237 48EB           0346         F2            add	ax,-$E[bp]
19238 48EE           44                         inc	sp
19239 48EF           44                         inc	sp
19240                                           ! Debug: list unsigned int = ax+0 (used reg = )
19241 48F0           50                         push	ax
19242                                           ! Debug: list unsigned int = const $B800 (used reg = )
19243 48F1           B8                   B800  mov	ax,#$B800
19244 48F4           50                         push	ax
19245                                           ! Debug: func () void = memcpyb+0 (used reg = )
19246 48F5           E8         3677            call	_memcpyb
19247 48F8           83C4                   0A  add	sp,*$A
19248                                           !BCC_EOS
19249                                           ! 2285    else
19250                                           ! 2286      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19251 48FB           EB           42            jmp .C8
19252                       000048FD            .C6:
19253                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19254 48FD           8A46         0A            mov	al,$A[bp]
19255 4900           30E4                       xor	ah,ah
19256 4902           50                         push	ax
19257                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19258 4903           8A46         FB            mov	al,-5[bp]
19259 4906           30E4                       xor	ah,ah
19260 4908           D1E8                       shr	ax,*1
19261                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19262 490A           89C3                       mov	bx,ax
19263 490C           8A46         0C            mov	al,$C[bp]
19264 490F           30E4                       xor	ah,ah
19265 4911           93                         xchg	ax,bx
19266 4912           89D9                       mov	cx,bx
19267 4914           F7E9                       imul	cx
19268                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19269                                           ! Debug: expression subtree swapping
19270 4916           0346         FE            add	ax,-2[bp]
19271                                           ! Debug: list unsigned int = ax+0 (used reg = )
19272 4919           50                         push	ax
19273                                           ! Debug: list unsigned int = const $B800 (used reg = )
19274 491A           B8                   B800  mov	ax,#$B800
19275 491D           50                         push	ax
19276                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19277 491E           8A46         FB            mov	al,-5[bp]
19278 4921           30E4                       xor	ah,ah
19279 4923           D1E8                       shr	ax,*1
19280                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19281 4925           89C3                       mov	bx,ax
19282 4927           8A46         0C            mov	al,$C[bp]
19283 492A           30E4                       xor	ah,ah
19284 492C           93                         xchg	ax,bx
19285 492D           89D9                       mov	cx,bx
19286 492F           F7E9                       imul	cx
19287                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19288                                           ! Debug: expression subtree swapping
19289 4931           0346         FC            add	ax,-4[bp]
19290                                           ! Debug: list unsigned int = ax+0 (used reg = )
19291 4934           50                         push	ax
19292                                           ! Debug: list unsigned int = const $B800 (used reg = )
19293 4935           B8                   B800  mov	ax,#$B800
19294 4938           50                         push	ax
19295                                           ! Debug: func () void = memcpyb+0 (used reg = )
19296 4939           E8         3633            call	_memcpyb
19297 493C           83C4                   0A  add	sp,*$A
19298                                           !BCC_EOS
19299                                           ! 2287   }
19300                       0000493F            .C8:
19301                                           ! 2288 }
19302                       0000493F            .C3:
19303                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19304 493F           8A46         FB            mov	al,-5[bp]
19305 4942           40                         inc	ax
19306 4943           8846         FB            mov	-5[bp],al
19307                       00004946            .C4:
19308                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19309 4946           8A46         FB            mov	al,-5[bp]
19310 4949           3A46         0E            cmp	al,$E[bp]
19311 494C         0F82         FF4E            blo 	.C5
19312                       00004950            .C9:
19313                       00004950            .C2:
19314 4950           89EC                       mov	sp,bp
19315 4952           5D                         pop	bp
19316 4953           C3                         ret
19317                                           ! 2289 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19318                                           ! Register BX used in function vgamem_copy_cga
19319                                           ! 2290 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19320                       00004954            _vgamem_fill_cga:
19321                                           !BCC_EOS
19322                                           !BCC_EOS
19323                                           !BCC_EOS
19324                                           !BCC_EOS
19325                                           !BCC_EOS
19326                                           !BCC_EOS
19327                                           ! 2291 {
19328                                           ! 2292  Bit16u dest;
19329                                           !BCC_EOS
19330                                           ! 2293  Bit8u i;
19331                                           !BCC_EOS
19332                                           ! 2294  dest=((ystart*cheig
19333 4954           55                         push	bp
19334 4955           89E5                       mov	bp,sp
19335 4957           83C4                   FC  add	sp,*-4
19336                                           ! 2294 ht*nbcols)>>1)+xstart;
19337                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19338 495A           8A46         0C            mov	al,$C[bp]
19339 495D           30E4                       xor	ah,ah
19340 495F           89C3                       mov	bx,ax
19341 4961           8A46         06            mov	al,6[bp]
19342 4964           30E4                       xor	ah,ah
19343 4966           89D9                       mov	cx,bx
19344 4968           F7E9                       imul	cx
19345                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19346 496A           89C3                       mov	bx,ax
19347 496C           8A46         0A            mov	al,$A[bp]
19348 496F           30E4                       xor	ah,ah
19349 4971           93                         xchg	ax,bx
19350 4972           89D9                       mov	cx,bx
19351 4974           F7E9                       imul	cx
19352                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19353 4976           D1E8                       shr	ax,*1
19354                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19355 4978           0246         04            add	al,4[bp]
19356 497B           80D4                   00  adc	ah,*0
19357                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19358 497E           8946         FE            mov	-2[bp],ax
19359                                           !BCC_EOS
19360                                           ! 2295  for(i=0;i<cheight;i++)
19361                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19362 4981           30C0                       xor	al,al
19363 4983           8846         FD            mov	-3[bp],al
19364                                           !BCC_EOS
19365                                           !BCC_EOS
19366                                           ! 2296   {
19367 4986           EB           75            jmp .CC
19368                       00004988            .CD:
19369                                           ! 2297    if (i & 1)
19370                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19371 4988           8A46         FD            mov	al,-3[bp]
19372 498B           24                     01  and	al,*1
19373 498D           84C0                       test	al,al
19374 498F           74           38            je  	.CE
19375                       00004991            .CF:
19376                                           ! 2298      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19377                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19378 4991           8A46         08            mov	al,8[bp]
19379 4994           30E4                       xor	ah,ah
19380 4996           50                         push	ax
19381                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19382 4997           8A46         0E            mov	al,$E[bp]
19383 499A           30E4                       xor	ah,ah
19384 499C           50                         push	ax
19385                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19386 499D           8A46         FD            mov	al,-3[bp]
19387 49A0           30E4                       xor	ah,ah
19388 49A2           D1E8                       shr	ax,*1
19389                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19390 49A4           89C3                       mov	bx,ax
19391 49A6           8A46         0A            mov	al,$A[bp]
19392 49A9           30E4                       xor	ah,ah
19393 49AB           93                         xchg	ax,bx
19394 49AC           89D9                       mov	cx,bx
19395 49AE           F7E9                       imul	cx
19396 49B0           50                         push	ax
19397                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19398                                           ! Debug: expression subtree swapping
19399 49B1           8B46         FE            mov	ax,-2[bp]
19400                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19401 49B4           05                   2000  add	ax,#$2000
19402 49B7           0346         F6            add	ax,-$A[bp]
19403 49BA           44                         inc	sp
19404 49BB           44                         inc	sp
19405                                           ! Debug: list unsigned int = ax+0 (used reg = )
19406 49BC           50                         push	ax
19407                                           ! Debug: list unsigned int = const $B800 (used reg = )
19408 49BD           B8                   B800  mov	ax,#$B800
19409 49C0           50                         push	ax
19410                                           ! Debug: func () void = memsetb+0 (used reg = )
19411 49C1           E8         3561            call	_memsetb
19412 49C4           83C4                   08  add	sp,*8
19413                                           !BCC_EOS
19414                                           ! 2299    else
19415                                           ! 2300      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19416 49C7           EB           2D            jmp .D0
19417                       000049C9            .CE:
19418                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19419 49C9           8A46         08            mov	al,8[bp]
19420 49CC           30E4                       xor	ah,ah
19421 49CE           50                         push	ax
19422                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19423 49CF           8A46         0E            mov	al,$E[bp]
19424 49D2           30E4                       xor	ah,ah
19425 49D4           50                         push	ax
19426                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19427 49D5           8A46         FD            mov	al,-3[bp]
19428 49D8           30E4                       xor	ah,ah
19429 49DA           D1E8                       shr	ax,*1
19430                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19431 49DC           89C3                       mov	bx,ax
19432 49DE           8A46         0A            mov	al,$A[bp]
19433 49E1           30E4                       xor	ah,ah
19434 49E3           93                         xchg	ax,bx
19435 49E4           89D9                       mov	cx,bx
19436 49E6           F7E9                       imul	cx
19437                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19438                                           ! Debug: expression subtree swapping
19439 49E8           0346         FE            add	ax,-2[bp]
19440                                           ! Debug: list unsigned int = ax+0 (used reg = )
19441 49EB           50                         push	ax
19442                                           ! Debug: list unsigned int = const $B800 (used reg = )
19443 49EC           B8                   B800  mov	ax,#$B800
19444 49EF           50                         push	ax
19445                                           ! Debug: func () void = memsetb+0 (used reg = )
19446 49F0           E8         3532            call	_memsetb
19447 49F3           83C4                   08  add	sp,*8
19448                                           !BCC_EOS
19449                                           ! 2301   }
19450                       000049F6            .D0:
19451                                           ! 2302 }
19452                       000049F6            .CB:
19453                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19454 49F6           8A46         FD            mov	al,-3[bp]
19455 49F9           40                         inc	ax
19456 49FA           8846         FD            mov	-3[bp],al
19457                       000049FD            .CC:
19458                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19459 49FD           8A46         FD            mov	al,-3[bp]
19460 4A00           3A46         0C            cmp	al,$C[bp]
19461 4A03           72           83            jb 	.CD
19462                       00004A05            .D1:
19463                       00004A05            .CA:
19464 4A05           89EC                       mov	sp,bp
19465 4A07           5D                         pop	bp
19466 4A08           C3                         ret
19467                                           ! 2303 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19468                                           ! Register BX used in function vgamem_fill_cga
19469                                           ! 2304 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19470                       00004A09            _biosfn_scroll:
19471                                           !BCC_EOS
19472                                           !BCC_EOS
19473                                           !BCC_EOS
19474                                           !BCC_EOS
19475                                           !BCC_EOS
19476                                           !BCC_EOS
19477                                           !BCC_EOS
19478                                           !BCC_EOS
19479                                           ! 2305 {
19480                                           ! 2306  Bit8u mode,line,cheight,bpp,cols;
19481                                           !BCC_EOS
19482                                           ! 2307  Bit16u nbcols,nbrows,i;
19483                                           !BCC_EOS
19484                                           ! 2308  Bit16u address;
19485                                           !BCC_EOS
19486                                           ! 2309  if(rul>rlr)return;
19487 4A09           55                         push	bp
19488 4A0A           89E5                       mov	bp,sp
19489 4A0C           83C4                   F2  add	sp,*-$E
19490                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19491 4A0F           8A46         08            mov	al,8[bp]
19492 4A12           3A46         0C            cmp	al,$C[bp]
19493 4A15           76           04            jbe 	.D2
19494                       00004A17            .D3:
19495 4A17           89EC                       mov	sp,bp
19496 4A19           5D                         pop	bp
19497 4A1A           C3                         ret
19498                                           !BCC_EOS
19499                                           ! 2310  if(cul>clr)return;
19500                       00004A1B            .D2:
19501                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19502 4A1B           8A46         0A            mov	al,$A[bp]
19503 4A1E           3A46         0E            cmp	al,$E[bp]
19504 4A21           76           04            jbe 	.D4
19505                       00004A23            .D5:
19506 4A23           89EC                       mov	sp,bp
19507 4A25           5D                         pop	bp
19508 4A26           C3                         ret
19509                                           !BCC_EOS
19510                                           ! 2311  mode=read_byte(0x40,0x49);
19511                       00004A27            .D4:
19512                                           ! Debug: list int = const $49 (used reg = )
19513 4A27           B8                   0049  mov	ax,*$49
19514 4A2A           50                         push	ax
19515                                           ! Debug: list int = const $40 (used reg = )
19516 4A2B           B8                   0040  mov	ax,*$40
19517 4A2E           50                         push	ax
19518                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19519 4A2F           E8         359D            call	_read_byte
19520 4A32           83C4                   04  add	sp,*4
19521                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19522 4A35           8846         FF            mov	-1[bp],al
19523                                           !BCC_EOS
19524                                           ! 2312  line=find_vga_entry(mode);
19525                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19526 4A38           8A46         FF            mov	al,-1[bp]
19527 4A3B           30E4                       xor	ah,ah
19528 4A3D           50                         push	ax
19529                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19530 4A3E           E8         34A2            call	_find_vga_entry
19531 4A41           44                         inc	sp
19532 4A42           44                         inc	sp
19533                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19534 4A43           8846         FE            mov	-2[bp],al
19535                                           !BCC_EOS
19536                                           ! 2313  if(line==0xFF)return;
19537                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19538 4A46           8A46         FE            mov	al,-2[bp]
19539 4A49           3C                     FF  cmp	al,#$FF
19540 4A4B           75           04            jne 	.D6
19541                       00004A4D            .D7:
19542 4A4D           89EC                       mov	sp,bp
19543 4A4F           5D                         pop	bp
19544 4A50           C3                         ret
19545                                           !BCC_EOS
19546                                           ! 2314  nbrows=read_byte(0x40,0x84)+1;
19547                       00004A51            .D6:
19548                                           ! Debug: list int = const $84 (used reg = )
19549 4A51           B8                   0084  mov	ax,#$84
19550 4A54           50                         push	ax
19551                                           ! Debug: list int = const $40 (used reg = )
19552 4A55           B8                   0040  mov	ax,*$40
19553 4A58           50                         push	ax
19554                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19555 4A59           E8         3573            call	_read_byte
19556 4A5C           83C4                   04  add	sp,*4
19557                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19558 4A5F           30E4                       xor	ah,ah
19559                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19560 4A61           40                         inc	ax
19561 4A62           8946         F6            mov	-$A[bp],ax
19562                                           !BCC_EOS
19563                                           ! 2315  nbcols=read_word(0x40,0x4A);
19564                                           ! Debug: list int = const $4A (used reg = )
19565 4A65           B8                   004A  mov	ax,*$4A
19566 4A68           50                         push	ax
19567                                           ! Debug: list int = const $40 (used reg = )
19568 4A69           B8                   0040  mov	ax,*$40
19569 4A6C           50                         push	ax
19570                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19571 4A6D           E8         3572            call	_read_word
19572 4A70           83C4                   04  add	sp,*4
19573                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19574 4A73           8946         F8            mov	-8[bp],ax
19575                                           !BCC_EOS
19576                                           ! 2316  if(page==0xFF)
19577                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19578 4A76           8A46         10            mov	al,$10[bp]
19579 4A79           3C                     FF  cmp	al,#$FF
19580 4A7B           75           11            jne 	.D8
19581                       00004A7D            .D9:
19582                                           ! 2317   page=read_byte(0x40,0x62);
19583                                           ! Debug: list int = const $62 (used reg = )
19584 4A7D           B8                   0062  mov	ax,*$62
19585 4A80           50                         push	ax
19586                                           ! Debug: list int = const $40 (used reg = )
19587 4A81           B8                   0040  mov	ax,*$40
19588 4A84           50                         push	ax
19589                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19590 4A85           E8         3547            call	_read_byte
19591 4A88           83C4                   04  add	sp,*4
19592                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19593 4A8B           8846         10            mov	$10[bp],al
19594                                           !BCC_EOS
19595                                           ! 2318  if(rlr>=nbrows)rlr=nbrows-1;
19596                       00004A8E            .D8:
19597                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19598 4A8E           8A46         0C            mov	al,$C[bp]
19599 4A91           30E4                       xor	ah,ah
19600 4A93           3B46         F6            cmp	ax,-$A[bp]
19601 4A96           72           07            jb  	.DA
19602                       00004A98            .DB:
19603                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19604 4A98           8B46         F6            mov	ax,-$A[bp]
19605                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19606 4A9B           48                         dec	ax
19607 4A9C           8846         0C            mov	$C[bp],al
19608                                           !BCC_EOS
19609                                           ! 2319  if(clr>=nbcols)clr=nbcols-1;
19610                       00004A9F            .DA:
19611                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19612 4A9F           8A46         0E            mov	al,$E[bp]
19613 4AA2           30E4                       xor	ah,ah
19614 4AA4           3B46         F8            cmp	ax,-8[bp]
19615 4AA7           72           07            jb  	.DC
19616                       00004AA9            .DD:
19617                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19618 4AA9           8B46         F8            mov	ax,-8[bp]
19619                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19620 4AAC           48                         dec	ax
19621 4AAD           8846         0E            mov	$E[bp],al
19622                                           !BCC_EOS
19623                                           ! 2320  if(nblines>nbrows)nblines=0;
19624                       00004AB0            .DC:
19625                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19626 4AB0           8A46         04            mov	al,4[bp]
19627 4AB3           30E4                       xor	ah,ah
19628 4AB5           3B46         F6            cmp	ax,-$A[bp]
19629 4AB8           76           05            jbe 	.DE
19630                       00004ABA            .DF:
19631                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19632 4ABA           30C0                       xor	al,al
19633 4ABC           8846         04            mov	4[bp],al
19634                                           !BCC_EOS
19635                                           ! 2321  cols=clr-cul+1;
19636                       00004ABF            .DE:
19637                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19638 4ABF           8A46         0E            mov	al,$E[bp]
19639 4AC2           30E4                       xor	ah,ah
19640 4AC4           2A46         0A            sub	al,$A[bp]
19641 4AC7           80DC                   00  sbb	ah,*0
19642                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19643                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19644 4ACA           40                         inc	ax
19645 4ACB           8846         FB            mov	-5[bp],al
19646                                           !BCC_EOS
19647                                           ! 2322  if(vga_modes[line].class==0x00)
19648                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
19649 4ACE           8A46         FE            mov	al,-2[bp]
19650 4AD1           30E4                       xor	ah,ah
19651 4AD3           B1                     03  mov	cl,*3
19652 4AD5           D3E0                       shl	ax,cl
19653 4AD7           89C3                       mov	bx,ax
19654 4AD9           81C3                 0233  add	bx,#_vga_modes
19655                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19656 4ADD           8A47         01            mov	al,1[bx]
19657 4AE0           84C0                       test	al,al
19658 4AE2         0F85         0269            bne 	.E0
19659                       00004AE6            .E1:
19660                                           ! 2323   {
19661                                           ! 2324    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19662                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19663 4AE6           8B46         F8            mov	ax,-8[bp]
19664 4AE9           8B4E         F6            mov	cx,-$A[bp]
19665 4AEC           F7E9                       imul	cx
19666                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19667 4AEE           D1E0                       shl	ax,*1
19668                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19669 4AF0           0C                     FF  or	al,#$FF
19670                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19671                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19672 4AF2           89C3                       mov	bx,ax
19673 4AF4           8A46         10            mov	al,$10[bp]
19674 4AF7           30E4                       xor	ah,ah
19675 4AF9           93                         xchg	ax,bx
19676 4AFA           40                         inc	ax
19677 4AFB           89D9                       mov	cx,bx
19678 4AFD           F7E9                       imul	cx
19679                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19680 4AFF           8946         F2            mov	-$E[bp],ax
19681                                           !BCC_EOS
19682                                           ! 2325    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19683                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19684 4B02           8A46         10            mov	al,$10[bp]
19685 4B05           30E4                       xor	ah,ah
19686 4B07           50                         push	ax
19687                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19688 4B08           FF76         F8            push	-8[bp]
19689                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19690 4B0B           FF76         F6            push	-$A[bp]
19691                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19692 4B0E           FF76         F2            push	-$E[bp]
19693                                           ! Debug: list * char = .E2+0 (used reg = )
19694 4B11           BB                   A7BA  mov	bx,#.E2
19695 4B14           53                         push	bx
19696                                           ! Debug: func () void = printf+0 (used reg = )
19697 4B15           E8         3562            call	_printf
19698 4B18           83C4                   0A  add	sp,*$A
19699                                           !BCC_EOS
19700                                           ! 2326    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19701                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19702 4B1B           8A46         04            mov	al,4[bp]
19703 4B1E           84C0                       test	al,al
19704 4B20           75           67            jne 	.E3
19705                       00004B22            .E8:
19706                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19707 4B22           8A46         08            mov	al,8[bp]
19708 4B25           84C0                       test	al,al
19709 4B27           75           60            jne 	.E3
19710                       00004B29            .E7:
19711                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19712 4B29           8A46         0A            mov	al,$A[bp]
19713 4B2C           84C0                       test	al,al
19714 4B2E           75           59            jne 	.E3
19715                       00004B30            .E6:
19716                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19717 4B30           8B46         F6            mov	ax,-$A[bp]
19718                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19719                                           ! Debug: expression subtree swapping
19720 4B33           48                         dec	ax
19721 4B34           50                         push	ax
19722 4B35           8A46         0C            mov	al,$C[bp]
19723 4B38           30E4                       xor	ah,ah
19724 4B3A           3B46         F0            cmp	ax,-$10[bp]
19725 4B3D           8D66         F2            lea	sp,-$E[bp]
19726 4B40           75           47            jne 	.E3
19727                       00004B42            .E5:
19728                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19729 4B42           8B46         F8            mov	ax,-8[bp]
19730                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19731                                           ! Debug: expression subtree swapping
19732 4B45           48                         dec	ax
19733 4B46           50                         push	ax
19734 4B47           8A46         0E            mov	al,$E[bp]
19735 4B4A           30E4                       xor	ah,ah
19736 4B4C           3B46         F0            cmp	ax,-$10[bp]
19737 4B4F           8D66         F2            lea	sp,-$E[bp]
19738 4B52           75           35            jne 	.E3
19739                       00004B54            .E4:
19740                                           ! 2327     {
19741                                           ! 2328      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19742                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19743 4B54           8B46         F6            mov	ax,-$A[bp]
19744 4B57           8B4E         F8            mov	cx,-8[bp]
19745 4B5A           F7E9                       imul	cx
19746                                           ! Debug: list unsigned int = ax+0 (used reg = )
19747 4B5C           50                         push	ax
19748                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19749 4B5D           8A46         06            mov	al,6[bp]
19750 4B60           30E4                       xor	ah,ah
19751                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19752 4B62           B9                   0100  mov	cx,#$100
19753 4B65           F7E9                       imul	cx
19754                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19755                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19756 4B67           05                   0020  add	ax,*$20
19757 4B6A           50                         push	ax
19758                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19759 4B6B           FF76         F2            push	-$E[bp]
19760                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19761 4B6E           8A46         FE            mov	al,-2[bp]
19762 4B71           30E4                       xor	ah,ah
19763 4B73           B1                     03  mov	cl,*3
19764 4B75           D3E0                       shl	ax,cl
19765 4B77           89C3                       mov	bx,ax
19766 4B79           81C3                 0233  add	bx,#_vga_modes
19767                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19768 4B7D           FF77         04            push	4[bx]
19769                                           ! Debug: func () void = memsetw+0 (used reg = )
19770 4B80           E8         33C7            call	_memsetw
19771 4B83           83C4                   08  add	sp,*8
19772                                           !BCC_EOS
19773                                           ! 2329     }
19774                                           ! 2330    else
19775                                           ! 2331     {
19776 4B86           E9         01C3            br 	.E9
19777                       00004B89            .E3:
19778                                           ! 2332      if(dir==1)
19779                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19780 4B89           8A46         12            mov	al,$12[bp]
19781 4B8C           3C                     01  cmp	al,*1
19782 4B8E         0F85         00DC            bne 	.EA
19783                       00004B92            .EB:
19784                                           ! 2333       {for(i=rul;i<=rlr;i++)
19785                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19786 4B92           8A46         08            mov	al,8[bp]
19787 4B95           30E4                       xor	ah,ah
19788 4B97           8946         F4            mov	-$C[bp],ax
19789                                           !BCC_EOS
19790                                           !BCC_EOS
19791                                           ! 2334         {
19792 4B9A           E9         00C2            br 	.EE
19793                       00004B9D            .EF:
19794                                           ! 2335          if((i+nblines>rlr)||(nblines==0))
19795                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19796 4B9D           8B46         F4            mov	ax,-$C[bp]
19797 4BA0           0246         04            add	al,4[bp]
19798 4BA3           80D4                   00  adc	ah,*0
19799                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19800 4BA6           50                         push	ax
19801 4BA7           8A46         0C            mov	al,$C[bp]
19802 4BAA           30E4                       xor	ah,ah
19803 4BAC           3B46         F0            cmp	ax,-$10[bp]
19804 4BAF           8D66         F2            lea	sp,-$E[bp]
19805 4BB2           72           07            jb  	.F1
19806                       00004BB4            .F2:
19807                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19808 4BB4           8A46         04            mov	al,4[bp]
19809 4BB7           84C0                       test	al,al
19810 4BB9           75           42            jne 	.F0
19811                       00004BBB            .F1:
19812                                           ! 2336           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19813                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19814 4BBB           8A46         FB            mov	al,-5[bp]
19815 4BBE           30E4                       xor	ah,ah
19816 4BC0           50                         push	ax
19817                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19818 4BC1           8A46         06            mov	al,6[bp]
19819 4BC4           30E4                       xor	ah,ah
19820                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19821 4BC6           B9                   0100  mov	cx,#$100
19822 4BC9           F7E9                       imul	cx
19823                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19824                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19825 4BCB           05                   0020  add	ax,*$20
19826 4BCE           50                         push	ax
19827                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19828 4BCF           8B46         F4            mov	ax,-$C[bp]
19829 4BD2           8B4E         F8            mov	cx,-8[bp]
19830 4BD5           F7E9                       imul	cx
19831                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19832 4BD7           0246         0A            add	al,$A[bp]
19833 4BDA           80D4                   00  adc	ah,*0
19834                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19835 4BDD           D1E0                       shl	ax,*1
19836                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19837                                           ! Debug: expression subtree swapping
19838 4BDF           0346         F2            add	ax,-$E[bp]
19839                                           ! Debug: list unsigned int = ax+0 (used reg = )
19840 4BE2           50                         push	ax
19841                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19842 4BE3           8A46         FE            mov	al,-2[bp]
19843 4BE6           30E4                       xor	ah,ah
19844 4BE8           B1                     03  mov	cl,*3
19845 4BEA           D3E0                       shl	ax,cl
19846 4BEC           89C3                       mov	bx,ax
19847 4BEE           81C3                 0233  add	bx,#_vga_modes
19848                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19849 4BF2           FF77         04            push	4[bx]
19850                                           ! Debug: func () void = memsetw+0 (used reg = )
19851 4BF5           E8         3352            call	_memsetw
19852 4BF8           83C4                   08  add	sp,*8
19853                                           !BCC_EOS
19854                                           ! 2337          else
19855                                           ! 2338           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19856 4BFB           EB           5B            jmp .F3
19857                       00004BFD            .F0:
19858                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19859 4BFD           8A46         FB            mov	al,-5[bp]
19860 4C00           30E4                       xor	ah,ah
19861 4C02           50                         push	ax
19862                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19863 4C03           8B46         F4            mov	ax,-$C[bp]
19864 4C06           0246         04            add	al,4[bp]
19865 4C09           80D4                   00  adc	ah,*0
19866                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19867 4C0C           8B4E         F8            mov	cx,-8[bp]
19868 4C0F           F7E9                       imul	cx
19869                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19870 4C11           0246         0A            add	al,$A[bp]
19871 4C14           80D4                   00  adc	ah,*0
19872                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19873 4C17           D1E0                       shl	ax,*1
19874                                           ! Debug: list unsigned int = ax+0 (used reg = )
19875 4C19           50                         push	ax
19876                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$12] struct  = vga_modes+0 (used reg = )
19877 4C1A           8A46         FE            mov	al,-2[bp]
19878 4C1D           30E4                       xor	ah,ah
19879 4C1F           B1                     03  mov	cl,*3
19880 4C21           D3E0                       shl	ax,cl
19881 4C23           89C3                       mov	bx,ax
19882 4C25           81C3                 0233  add	bx,#_vga_modes
19883                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19884 4C29           FF77         04            push	4[bx]
19885                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19886 4C2C           8B46         F4            mov	ax,-$C[bp]
19887 4C2F           8B4E         F8            mov	cx,-8[bp]
19888 4C32           F7E9                       imul	cx
19889                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19890 4C34           0246         0A            add	al,$A[bp]
19891 4C37           80D4                   00  adc	ah,*0
19892                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19893 4C3A           D1E0                       shl	ax,*1
19894                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19895                                           ! Debug: expression subtree swapping
19896 4C3C           0346         F2            add	ax,-$E[bp]
19897                                           ! Debug: list unsigned int = ax+0 (used reg = )
19898 4C3F           50                         push	ax
19899                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
19900 4C40           8A46         FE            mov	al,-2[bp]
19901 4C43           30E4                       xor	ah,ah
19902 4C45           B1                     03  mov	cl,*3
19903 4C47           D3E0                       shl	ax,cl
19904 4C49           89C3                       mov	bx,ax
19905 4C4B           81C3                 0233  add	bx,#_vga_modes
19906                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19907 4C4F           FF77         04            push	4[bx]
19908                                           ! Debug: func () void = memcpyw+0 (used reg = )
19909 4C52           E8         334A            call	_memcpyw
19910 4C55           83C4                   0A  add	sp,*$A
19911                                           !BCC_EOS
19912                                           ! 2339         }
19913                       00004C58            .F3:
19914                                           ! 2340       }
19915                       00004C58            .ED:
19916                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19917 4C58           8B46         F4            mov	ax,-$C[bp]
19918 4C5B           40                         inc	ax
19919 4C5C           8946         F4            mov	-$C[bp],ax
19920                       00004C5F            .EE:
19921                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19922 4C5F           8A46         0C            mov	al,$C[bp]
19923 4C62           30E4                       xor	ah,ah
19924 4C64           3B46         F4            cmp	ax,-$C[bp]
19925 4C67         0F83         FF32            bhis	.EF
19926                       00004C6B            .F4:
19927                       00004C6B            .EC:
19928                                           ! 2341      else
19929                                           ! 2342       {for(i=rlr;i>=rul;i--)
19930 4C6B           E9         00DE            br 	.F5
19931                       00004C6E            .EA:
19932                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19933 4C6E           8A46         0C            mov	al,$C[bp]
19934 4C71           30E4                       xor	ah,ah
19935 4C73           8946         F4            mov	-$C[bp],ax
19936                                           !BCC_EOS
19937                                           !BCC_EOS
19938                                           ! 2343         {
19939 4C76           E9         00C7            br 	.F8
19940                       00004C79            .F9:
19941                                           ! 2344          if((i<rul+nblines)||(nblines==0))
19942                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19943 4C79           8A46         08            mov	al,8[bp]
19944 4C7C           30E4                       xor	ah,ah
19945 4C7E           0246         04            add	al,4[bp]
19946 4C81           80D4                   00  adc	ah,*0
19947                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19948 4C84           3B46         F4            cmp	ax,-$C[bp]
19949 4C87           77           07            ja  	.FB
19950                       00004C89            .FC:
19951                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19952 4C89           8A46         04            mov	al,4[bp]
19953 4C8C           84C0                       test	al,al
19954 4C8E           75           42            jne 	.FA
19955                       00004C90            .FB:
19956                                           ! 2345           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19957                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19958 4C90           8A46         FB            mov	al,-5[bp]
19959 4C93           30E4                       xor	ah,ah
19960 4C95           50                         push	ax
19961                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19962 4C96           8A46         06            mov	al,6[bp]
19963 4C99           30E4                       xor	ah,ah
19964                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19965 4C9B           B9                   0100  mov	cx,#$100
19966 4C9E           F7E9                       imul	cx
19967                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19968                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19969 4CA0           05                   0020  add	ax,*$20
19970 4CA3           50                         push	ax
19971                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19972 4CA4           8B46         F4            mov	ax,-$C[bp]
19973 4CA7           8B4E         F8            mov	cx,-8[bp]
19974 4CAA           F7E9                       imul	cx
19975                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19976 4CAC           0246         0A            add	al,$A[bp]
19977 4CAF           80D4                   00  adc	ah,*0
19978                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19979 4CB2           D1E0                       shl	ax,*1
19980                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19981                                           ! Debug: expression subtree swapping
19982 4CB4           0346         F2            add	ax,-$E[bp]
19983                                           ! Debug: list unsigned int = ax+0 (used reg = )
19984 4CB7           50                         push	ax
19985                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19986 4CB8           8A46         FE            mov	al,-2[bp]
19987 4CBB           30E4                       xor	ah,ah
19988 4CBD           B1                     03  mov	cl,*3
19989 4CBF           D3E0                       shl	ax,cl
19990 4CC1           89C3                       mov	bx,ax
19991 4CC3           81C3                 0233  add	bx,#_vga_modes
19992                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19993 4CC7           FF77         04            push	4[bx]
19994                                           ! Debug: func () void = memsetw+0 (used reg = )
19995 4CCA           E8         327D            call	_memsetw
19996 4CCD           83C4                   08  add	sp,*8
19997                                           !BCC_EOS
19998                                           ! 2346          else
19999                                           ! 2347           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
20000 4CD0           EB           5B            jmp .FD
20001                       00004CD2            .FA:
20002                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
20003 4CD2           8A46         FB            mov	al,-5[bp]
20004 4CD5           30E4                       xor	ah,ah
20005 4CD7           50                         push	ax
20006                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
20007 4CD8           8B46         F4            mov	ax,-$C[bp]
20008 4CDB           2A46         04            sub	al,4[bp]
20009 4CDE           80DC                   00  sbb	ah,*0
20010                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
20011 4CE1           8B4E         F8            mov	cx,-8[bp]
20012 4CE4           F7E9                       imul	cx
20013                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
20014 4CE6           0246         0A            add	al,$A[bp]
20015 4CE9           80D4                   00  adc	ah,*0
20016                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20017 4CEC           D1E0                       shl	ax,*1
20018                                           ! Debug: list unsigned int = ax+0 (used reg = )
20019 4CEE           50                         push	ax
20020                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$12] struct  = vga_modes+0 (used reg = )
20021 4CEF           8A46         FE            mov	al,-2[bp]
20022 4CF2           30E4                       xor	ah,ah
20023 4CF4           B1                     03  mov	cl,*3
20024 4CF6           D3E0                       shl	ax,cl
20025 4CF8           89C3                       mov	bx,ax
20026 4CFA           81C3                 0233  add	bx,#_vga_modes
20027                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20028 4CFE           FF77         04            push	4[bx]
20029                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
20030 4D01           8B46         F4            mov	ax,-$C[bp]
20031 4D04           8B4E         F8            mov	cx,-8[bp]
20032 4D07           F7E9                       imul	cx
20033                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
20034 4D09           0246         0A            add	al,$A[bp]
20035 4D0C           80D4                   00  adc	ah,*0
20036                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20037 4D0F           D1E0                       shl	ax,*1
20038                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
20039                                           ! Debug: expression subtree swapping
20040 4D11           0346         F2            add	ax,-$E[bp]
20041                                           ! Debug: list unsigned int = ax+0 (used reg = )
20042 4D14           50                         push	ax
20043                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
20044 4D15           8A46         FE            mov	al,-2[bp]
20045 4D18           30E4                       xor	ah,ah
20046 4D1A           B1                     03  mov	cl,*3
20047 4D1C           D3E0                       shl	ax,cl
20048 4D1E           89C3                       mov	bx,ax
20049 4D20           81C3                 0233  add	bx,#_vga_modes
20050                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20051 4D24           FF77         04            push	4[bx]
20052                                           ! Debug: func () void = memcpyw+0 (used reg = )
20053 4D27           E8         3275            call	_memcpyw
20054 4D2A           83C4                   0A  add	sp,*$A
20055                                           !BCC_EOS
20056                                           ! 2348          if (i>rlr) break;
20057                       00004D2D            .FD:
20058                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20059 4D2D           8A46         0C            mov	al,$C[bp]
20060 4D30           30E4                       xor	ah,ah
20061 4D32           3B46         F4            cmp	ax,-$C[bp]
20062 4D35           73           02            jae 	.FE
20063                       00004D37            .FF:
20064 4D37           EB           13            jmp .F6
20065                                           !BCC_EOS
20066                                           ! 2349         }
20067                       00004D39            .FE:
20068                                           ! 2350       }
20069                       00004D39            .F7:
20070                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20071 4D39           8B46         F4            mov	ax,-$C[bp]
20072 4D3C           48                         dec	ax
20073 4D3D           8946         F4            mov	-$C[bp],ax
20074                       00004D40            .F8:
20075                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20076 4D40           8A46         08            mov	al,8[bp]
20077 4D43           30E4                       xor	ah,ah
20078 4D45           3B46         F4            cmp	ax,-$C[bp]
20079 4D48         0F86         FF2D            blos	.F9
20080                       00004D4C            .100:
20081                       00004D4C            .F6:
20082                                           ! 2351     }
20083                       00004D4C            .F5:
20084                                           ! 2352   }
20085                       00004D4C            .E9:
20086                                           ! 2353  else
20087                                           ! 2354   {
20088 4D4C           E9         03D9            br 	.101
20089                       00004D4F            .E0:
20090                                           ! 2355    cheight=read_byte(0x40,0x85);
20091                                           ! Debug: list int = const $85 (used reg = )
20092 4D4F           B8                   0085  mov	ax,#$85
20093 4D52           50                         push	ax
20094                                           ! Debug: list int = const $40 (used reg = )
20095 4D53           B8                   0040  mov	ax,*$40
20096 4D56           50                         push	ax
20097                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20098 4D57           E8         3275            call	_read_byte
20099 4D5A           83C4                   04  add	sp,*4
20100                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$10-5] (used reg = )
20101 4D5D           8846         FD            mov	-3[bp],al
20102                                           !BCC_EOS
20103                                           ! 2356    switch(vga_modes[line].memmodel)
20104                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
20105 4D60           8A46         FE            mov	al,-2[bp]
20106 4D63           30E4                       xor	ah,ah
20107 4D65           B1                     03  mov	cl,*3
20108 4D67           D3E0                       shl	ax,cl
20109 4D69           89C3                       mov	bx,ax
20110 4D6B           81C3                 0233  add	bx,#_vga_modes
20111 4D6F           8A47         02            mov	al,2[bx]
20112                                           ! 2357     {
20113 4D72           E9         039F            br 	.104
20114                                           ! 2358      case 0x04:
20115                                           ! 2359      case 0x03:
20116                       00004D75            .105:
20117                                           ! 2360        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20118                       00004D75            .106:
20119                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20120 4D75           8A46         04            mov	al,4[bp]
20121 4D78           84C0                       test	al,al
20122 4D7A         0F85         008B            bne 	.107
20123                       00004D7E            .10C:
20124                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20125 4D7E           8A46         08            mov	al,8[bp]
20126 4D81           84C0                       test	al,al
20127 4D83         0F85         0082            bne 	.107
20128                       00004D87            .10B:
20129                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20130 4D87           8A46         0A            mov	al,$A[bp]
20131 4D8A           84C0                       test	al,al
20132 4D8C         0F85         0079            bne 	.107
20133                       00004D90            .10A:
20134                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20135 4D90           8B46         F6            mov	ax,-$A[bp]
20136                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20137                                           ! Debug: expression subtree swapping
20138 4D93           48                         dec	ax
20139 4D94           50                         push	ax
20140 4D95           8A46         0C            mov	al,$C[bp]
20141 4D98           30E4                       xor	ah,ah
20142 4D9A           3B46         F0            cmp	ax,0+..FFFC[bp]
20143 4D9D           8D66         F2            lea	sp,2+..FFFC[bp]
20144 4DA0           75           67            jne 	.107
20145                       00004DA2            .109:
20146                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20147 4DA2           8B46         F8            mov	ax,-8[bp]
20148                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20149                                           ! Debug: expression subtree swapping
20150 4DA5           48                         dec	ax
20151 4DA6           50                         push	ax
20152 4DA7           8A46         0E            mov	al,$E[bp]
20153 4DAA           30E4                       xor	ah,ah
20154 4DAC           3B46         F0            cmp	ax,0+..FFFC[bp]
20155 4DAF           8D66         F2            lea	sp,2+..FFFC[bp]
20156 4DB2           75           55            jne 	.107
20157                       00004DB4            .108:
20158                                           ! 2361         {
20159                                           ! 2362          outw(0x3ce, 0x0205);
20160                                           ! Debug: list int = const $205 (used reg = )
20161 4DB4           B8                   0205  mov	ax,#$205
20162 4DB7           50                         push	ax
20163                                           ! Debug: list int = const $3CE (used reg = )
20164 4DB8           B8                   03CE  mov	ax,#$3CE
20165 4DBB           50                         push	ax
20166                                           ! Debug: func () void = outw+0 (used reg = )
20167 4DBC           E8         328C            call	_outw
20168 4DBF           83C4                   04  add	sp,*4
20169                                           !BCC_EOS
20170                                           ! 2363 
20171                                           ! 2363          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20172                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20173 4DC2           8B46         F6            mov	ax,-$A[bp]
20174 4DC5           8B4E         F8            mov	cx,-8[bp]
20175 4DC8           F7E9                       imul	cx
20176                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20177 4DCA           89C3                       mov	bx,ax
20178 4DCC           8A46         FD            mov	al,-3[bp]
20179 4DCF           30E4                       xor	ah,ah
20180 4DD1           93                         xchg	ax,bx
20181 4DD2           89D9                       mov	cx,bx
20182 4DD4           F7E9                       imul	cx
20183                                           ! Debug: list unsigned int = ax+0 (used reg = )
20184 4DD6           50                         push	ax
20185                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20186 4DD7           8A46         06            mov	al,6[bp]
20187 4DDA           30E4                       xor	ah,ah
20188 4DDC           50                         push	ax
20189                                           ! Debug: list int = const 0 (used reg = )
20190 4DDD           31C0                       xor	ax,ax
20191 4DDF           50                         push	ax
20192                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
20193 4DE0           8A46         FE            mov	al,-2[bp]
20194 4DE3           30E4                       xor	ah,ah
20195 4DE5           B1                     03  mov	cl,*3
20196 4DE7           D3E0                       shl	ax,cl
20197 4DE9           89C3                       mov	bx,ax
20198 4DEB           81C3                 0233  add	bx,#_vga_modes
20199                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20200 4DEF           FF77         04            push	4[bx]
20201                                           ! Debug: func () void = memsetb+0 (used reg = )
20202 4DF2           E8         3130            call	_memsetb
20203 4DF5           83C4                   08  add	sp,*8
20204                                           !BCC_EOS
20205                                           ! 2364          outw(0x3ce, 0x0005);
20206                                           ! Debug: list int = const 5 (used reg = )
20207 4DF8           B8                   0005  mov	ax,*5
20208 4DFB           50                         push	ax
20209                                           ! Debug: list int = const $3CE (used reg = )
20210 4DFC           B8                   03CE  mov	ax,#$3CE
20211 4DFF           50                         push	ax
20212                                           ! Debug: func () void = outw+0 (used reg = )
20213 4E00           E8         3248            call	_outw
20214 4E03           83C4                   04  add	sp,*4
20215                                           !BCC_EOS
20216                                           ! 2365         }
20217                                           ! 2366        else
20218                                           ! 2367         {
20219 4E06           E9         0121            br 	.10D
20220                       00004E09            .107:
20221                                           ! 2368          if(dir==1)
20222                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20223 4E09           8A46         12            mov	al,$12[bp]
20224 4E0C           3C                     01  cmp	al,*1
20225 4E0E         0F85         008A            bne 	.10E
20226                       00004E12            .10F:
20227                                           ! 2369           {for(i=rul;i<=rlr;i++)
20228                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20229 4E12           8A46         08            mov	al,8[bp]
20230 4E15           30E4                       xor	ah,ah
20231 4E17           8946         F4            mov	-$C[bp],ax
20232                                           !BCC_EOS
20233                                           !BCC_EOS
20234                                           ! 2370             {
20235 4E1A           EB           73            jmp .112
20236                       00004E1C            .113:
20237                                           ! 2371              if((i+nblines>rlr)||(nblines==0))
20238                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20239 4E1C           8B46         F4            mov	ax,-$C[bp]
20240 4E1F           0246         04            add	al,4[bp]
20241 4E22           80D4                   00  adc	ah,*0
20242                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20243 4E25           50                         push	ax
20244 4E26           8A46         0C            mov	al,$C[bp]
20245 4E29           30E4                       xor	ah,ah
20246 4E2B           3B46         F0            cmp	ax,0+..FFFC[bp]
20247 4E2E           8D66         F2            lea	sp,2+..FFFC[bp]
20248 4E31           72           07            jb  	.115
20249                       00004E33            .116:
20250                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20251 4E33           8A46         04            mov	al,4[bp]
20252 4E36           84C0                       test	al,al
20253 4E38           75           26            jne 	.114
20254                       00004E3A            .115:
20255                                           ! 2372               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20256                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20257 4E3A           8A46         06            mov	al,6[bp]
20258 4E3D           30E4                       xor	ah,ah
20259 4E3F           50                         push	ax
20260                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20261 4E40           8A46         FD            mov	al,-3[bp]
20262 4E43           30E4                       xor	ah,ah
20263 4E45           50                         push	ax
20264                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20265 4E46           FF76         F8            push	-8[bp]
20266                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20267 4E49           8A46         FB            mov	al,-5[bp]
20268 4E4C           30E4                       xor	ah,ah
20269 4E4E           50                         push	ax
20270                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20271 4E4F           FF76         F4            push	-$C[bp]
20272                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20273 4E52           8A46         0A            mov	al,$A[bp]
20274 4E55           30E4                       xor	ah,ah
20275 4E57           50                         push	ax
20276                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20277 4E58           E8         F95C            call	_vgamem_fill_pl4
20278 4E5B           83C4                   0C  add	sp,*$C
20279                                           !BCC_EOS
20280                                           ! 2373              else
20281                                           ! 2374               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20282 4E5E           EB           28            jmp .117
20283                       00004E60            .114:
20284                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20285 4E60           8A46         FD            mov	al,-3[bp]
20286 4E63           30E4                       xor	ah,ah
20287 4E65           50                         push	ax
20288                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20289 4E66           FF76         F8            push	-8[bp]
20290                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20291 4E69           8A46         FB            mov	al,-5[bp]
20292 4E6C           30E4                       xor	ah,ah
20293 4E6E           50                         push	ax
20294                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20295 4E6F           FF76         F4            push	-$C[bp]
20296                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20297 4E72           8B46         F4            mov	ax,-$C[bp]
20298 4E75           0246         04            add	al,4[bp]
20299 4E78           80D4                   00  adc	ah,*0
20300                                           ! Debug: list unsigned int = ax+0 (used reg = )
20301 4E7B           50                         push	ax
20302                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20303 4E7C           8A46         0A            mov	al,$A[bp]
20304 4E7F           30E4                       xor	ah,ah
20305 4E81           50                         push	ax
20306                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20307 4E82           E8         F870            call	_vgamem_copy_pl4
20308 4E85           83C4                   0C  add	sp,*$C
20309                                           !BCC_EOS
20310                                           ! 2375             }
20311                       00004E88            .117:
20312                                           ! 2376           }
20313                       00004E88            .111:
20314                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20315 4E88           8B46         F4            mov	ax,-$C[bp]
20316 4E8B           40                         inc	ax
20317 4E8C           8946         F4            mov	-$C[bp],ax
20318                       00004E8F            .112:
20319                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20320 4E8F           8A46         0C            mov	al,$C[bp]
20321 4E92           30E4                       xor	ah,ah
20322 4E94           3B46         F4            cmp	ax,-$C[bp]
20323 4E97           73           83            jae	.113
20324                       00004E99            .118:
20325                       00004E99            .110:
20326                                           ! 2377          else
20327                                           ! 2378           {for(i=rlr;i>=rul;i--)
20328 4E99           E9         008E            br 	.119
20329                       00004E9C            .10E:
20330                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20331 4E9C           8A46         0C            mov	al,$C[bp]
20332 4E9F           30E4                       xor	ah,ah
20333 4EA1           8946         F4            mov	-$C[bp],ax
20334                                           !BCC_EOS
20335                                           !BCC_EOS
20336                                           ! 2379             {
20337 4EA4           EB           78            jmp .11C
20338                       00004EA6            .11D:
20339                                           ! 2380              if((i<rul+nblines)||(nblines==0))
20340                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20341 4EA6           8A46         08            mov	al,8[bp]
20342 4EA9           30E4                       xor	ah,ah
20343 4EAB           0246         04            add	al,4[bp]
20344 4EAE           80D4                   00  adc	ah,*0
20345                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20346 4EB1           3B46         F4            cmp	ax,-$C[bp]
20347 4EB4           77           07            ja  	.11F
20348                       00004EB6            .120:
20349                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20350 4EB6           8A46         04            mov	al,4[bp]
20351 4EB9           84C0                       test	al,al
20352 4EBB           75           26            jne 	.11E
20353                       00004EBD            .11F:
20354                                           ! 2381               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20355                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20356 4EBD           8A46         06            mov	al,6[bp]
20357 4EC0           30E4                       xor	ah,ah
20358 4EC2           50                         push	ax
20359                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20360 4EC3           8A46         FD            mov	al,-3[bp]
20361 4EC6           30E4                       xor	ah,ah
20362 4EC8           50                         push	ax
20363                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20364 4EC9           FF76         F8            push	-8[bp]
20365                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20366 4ECC           8A46         FB            mov	al,-5[bp]
20367 4ECF           30E4                       xor	ah,ah
20368 4ED1           50                         push	ax
20369                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20370 4ED2           FF76         F4            push	-$C[bp]
20371                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20372 4ED5           8A46         0A            mov	al,$A[bp]
20373 4ED8           30E4                       xor	ah,ah
20374 4EDA           50                         push	ax
20375                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20376 4EDB           E8         F8D9            call	_vgamem_fill_pl4
20377 4EDE           83C4                   0C  add	sp,*$C
20378                                           !BCC_EOS
20379                                           ! 2382              else
20380                                           ! 2383               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20381 4EE1           EB           28            jmp .121
20382                       00004EE3            .11E:
20383                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20384 4EE3           8A46         FD            mov	al,-3[bp]
20385 4EE6           30E4                       xor	ah,ah
20386 4EE8           50                         push	ax
20387                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20388 4EE9           FF76         F8            push	-8[bp]
20389                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20390 4EEC           8A46         FB            mov	al,-5[bp]
20391 4EEF           30E4                       xor	ah,ah
20392 4EF1           50                         push	ax
20393                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20394 4EF2           8B46         F4            mov	ax,-$C[bp]
20395 4EF5           2A46         04            sub	al,4[bp]
20396 4EF8           80DC                   00  sbb	ah,*0
20397                                           ! Debug: list unsigned int = ax+0 (used reg = )
20398 4EFB           50                         push	ax
20399                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20400 4EFC           FF76         F4            push	-$C[bp]
20401                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20402 4EFF           8A46         0A            mov	al,$A[bp]
20403 4F02           30E4                       xor	ah,ah
20404 4F04           50                         push	ax
20405                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20406 4F05           E8         F7ED            call	_vgamem_copy_pl4
20407 4F08           83C4                   0C  add	sp,*$C
20408                                           !BCC_EOS
20409                                           ! 2384              if (i>rlr) break;
20410                       00004F0B            .121:
20411                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20412 4F0B           8A46         0C            mov	al,$C[bp]
20413 4F0E           30E4                       xor	ah,ah
20414 4F10           3B46         F4            cmp	ax,-$C[bp]
20415 4F13           73           02            jae 	.122
20416                       00004F15            .123:
20417 4F15           EB           13            jmp .11A
20418                                           !BCC_EOS
20419                                           ! 2385             }
20420                       00004F17            .122:
20421                                           ! 2386           }
20422                       00004F17            .11B:
20423                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20424 4F17           8B46         F4            mov	ax,-$C[bp]
20425 4F1A           48                         dec	ax
20426 4F1B           8946         F4            mov	-$C[bp],ax
20427                       00004F1E            .11C:
20428                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20429 4F1E           8A46         08            mov	al,8[bp]
20430 4F21           30E4                       xor	ah,ah
20431 4F23           3B46         F4            cmp	ax,-$C[bp]
20432 4F26         0F86         FF7C            blos	.11D
20433                       00004F2A            .124:
20434                       00004F2A            .11A:
20435                                           ! 2387         }
20436                       00004F2A            .119:
20437                                           ! 2388        break;
20438                       00004F2A            .10D:
20439 4F2A           E9         01FB            br 	.102
20440                                           !BCC_EOS
20441                                           ! 2389      case 0x02:
20442                                           ! 2390        bpp=vga_modes[line].pixbits;
20443                       00004F2D            .125:
20444                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
20445 4F2D           8A46         FE            mov	al,-2[bp]
20446 4F30           30E4                       xor	ah,ah
20447 4F32           B1                     03  mov	cl,*3
20448 4F34           D3E0                       shl	ax,cl
20449 4F36           89C3                       mov	bx,ax
20450 4F38           81C3                 0233  add	bx,#_vga_modes
20451                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20452 4F3C           8A47         03            mov	al,3[bx]
20453 4F3F           8846         FC            mov	-4[bp],al
20454                                           !BCC_EOS
20455                                           ! 2391        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20456                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20457 4F42           8A46         04            mov	al,4[bp]
20458 4F45           84C0                       test	al,al
20459 4F47           75           77            jne 	.126
20460                       00004F49            .12B:
20461                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20462 4F49           8A46         08            mov	al,8[bp]
20463 4F4C           84C0                       test	al,al
20464 4F4E           75           70            jne 	.126
20465                       00004F50            .12A:
20466                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20467 4F50           8A46         0A            mov	al,$A[bp]
20468 4F53           84C0                       test	al,al
20469 4F55           75           69            jne 	.126
20470                       00004F57            .129:
20471                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20472 4F57           8B46         F6            mov	ax,-$A[bp]
20473                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20474                                           ! Debug: expression subtree swapping
20475 4F5A           48                         dec	ax
20476 4F5B           50                         push	ax
20477 4F5C           8A46         0C            mov	al,$C[bp]
20478 4F5F           30E4                       xor	ah,ah
20479 4F61           3B46         F0            cmp	ax,0+..FFFC[bp]
20480 4F64           8D66         F2            lea	sp,2+..FFFC[bp]
20481 4F67           75           57            jne 	.126
20482                       00004F69            .128:
20483                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20484 4F69           8B46         F8            mov	ax,-8[bp]
20485                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20486                                           ! Debug: expression subtree swapping
20487 4F6C           48                         dec	ax
20488 4F6D           50                         push	ax
20489 4F6E           8A46         0E            mov	al,$E[bp]
20490 4F71           30E4                       xor	ah,ah
20491 4F73           3B46         F0            cmp	ax,0+..FFFC[bp]
20492 4F76           8D66         F2            lea	sp,2+..FFFC[bp]
20493 4F79           75           45            jne 	.126
20494                       00004F7B            .127:
20495                                           ! 2392         {
20496                                           ! 2393          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20497                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20498 4F7B           8B46         F6            mov	ax,-$A[bp]
20499 4F7E           8B4E         F8            mov	cx,-8[bp]
20500 4F81           F7E9                       imul	cx
20501                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20502 4F83           89C3                       mov	bx,ax
20503 4F85           8A46         FD            mov	al,-3[bp]
20504 4F88           30E4                       xor	ah,ah
20505 4F8A           93                         xchg	ax,bx
20506 4F8B           89D9                       mov	cx,bx
20507 4F8D           F7E9                       imul	cx
20508                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20509 4F8F           89C3                       mov	bx,ax
20510 4F91           8A46         FC            mov	al,-4[bp]
20511 4F94           30E4                       xor	ah,ah
20512 4F96           93                         xchg	ax,bx
20513 4F97           89D9                       mov	cx,bx
20514 4F99           F7E9                       imul	cx
20515                                           ! Debug: list unsigned int = ax+0 (used reg = )
20516 4F9B           50                         push	ax
20517                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20518 4F9C           8A46         06            mov	al,6[bp]
20519 4F9F           30E4                       xor	ah,ah
20520 4FA1           50                         push	ax
20521                                           ! Debug: list int = const 0 (used reg = )
20522 4FA2           31C0                       xor	ax,ax
20523 4FA4           50                         push	ax
20524                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
20525 4FA5           8A46         FE            mov	al,-2[bp]
20526 4FA8           30E4                       xor	ah,ah
20527 4FAA           B1                     03  mov	cl,*3
20528 4FAC           D3E0                       shl	ax,cl
20529 4FAE           89C3                       mov	bx,ax
20530 4FB0           81C3                 0233  add	bx,#_vga_modes
20531                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20532 4FB4           FF77         04            push	4[bx]
20533                                           ! Debug: func () void = memsetb+0 (used reg = )
20534 4FB7           E8         2F6B            call	_memsetb
20535 4FBA           83C4                   08  add	sp,*8
20536                                           !BCC_EOS
20537                                           ! 2394         }
20538                                           ! 2395        else
20539                                           ! 2396         {
20540 4FBD           E9         0144            br 	.12C
20541                       00004FC0            .126:
20542                                           ! 2397          if(bpp==2)
20543                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20544 4FC0           8A46         FC            mov	al,-4[bp]
20545 4FC3           3C                     02  cmp	al,*2
20546 4FC5           75           1C            jne 	.12D
20547                       00004FC7            .12E:
20548                                           ! 2398           {
20549                                           ! 2399            cul<<=1;
20550                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20551 4FC7           8A46         0A            mov	al,$A[bp]
20552 4FCA           30E4                       xor	ah,ah
20553 4FCC           D1E0                       shl	ax,*1
20554 4FCE           8846         0A            mov	$A[bp],al
20555                                           !BCC_EOS
20556                                           ! 2400            cols<<=1;
20557                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20558 4FD1           8A46         FB            mov	al,-5[bp]
20559 4FD4           30E4                       xor	ah,ah
20560 4FD6           D1E0                       shl	ax,*1
20561 4FD8           8846         FB            mov	-5[bp],al
20562                                           !BCC_EOS
20563                                           ! 2401            nbcols<<=1;
20564                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20565 4FDB           8B46         F8            mov	ax,-8[bp]
20566 4FDE           D1E0                       shl	ax,*1
20567 4FE0           8946         F8            mov	-8[bp],ax
20568                                           !BCC_EOS
20569                                           ! 2402           }
20570                                           ! 2403          if(dir==1)
20571                       00004FE3            .12D:
20572                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20573 4FE3           8A46         12            mov	al,$12[bp]
20574 4FE6           3C                     01  cmp	al,*1
20575 4FE8         0F85         008A            bne 	.12F
20576                       00004FEC            .130:
20577                                           ! 2404           {for(i=rul;i<=rlr;i++)
20578                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20579 4FEC           8A46         08            mov	al,8[bp]
20580 4FEF           30E4                       xor	ah,ah
20581 4FF1           8946         F4            mov	-$C[bp],ax
20582                                           !BCC_EOS
20583                                           !BCC_EOS
20584                                           ! 2405             {
20585 4FF4           EB           73            jmp .133
20586                       00004FF6            .134:
20587                                           ! 2406              if((i+nblines>rlr)||(nblines==0))
20588                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20589 4FF6           8B46         F4            mov	ax,-$C[bp]
20590 4FF9           0246         04            add	al,4[bp]
20591 4FFC           80D4                   00  adc	ah,*0
20592                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20593 4FFF           50                         push	ax
20594 5000           8A46         0C            mov	al,$C[bp]
20595 5003           30E4                       xor	ah,ah
20596 5005           3B46         F0            cmp	ax,0+..FFFC[bp]
20597 5008           8D66         F2            lea	sp,2+..FFFC[bp]
20598 500B           72           07            jb  	.136
20599                       0000500D            .137:
20600                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20601 500D           8A46         04            mov	al,4[bp]
20602 5010           84C0                       test	al,al
20603 5012           75           26            jne 	.135
20604                       00005014            .136:
20605                                           ! 2407               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20606                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20607 5014           8A46         06            mov	al,6[bp]
20608 5017           30E4                       xor	ah,ah
20609 5019           50                         push	ax
20610                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20611 501A           8A46         FD            mov	al,-3[bp]
20612 501D           30E4                       xor	ah,ah
20613 501F           50                         push	ax
20614                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20615 5020           FF76         F8            push	-8[bp]
20616                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20617 5023           8A46         FB            mov	al,-5[bp]
20618 5026           30E4                       xor	ah,ah
20619 5028           50                         push	ax
20620                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20621 5029           FF76         F4            push	-$C[bp]
20622                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20623 502C           8A46         0A            mov	al,$A[bp]
20624 502F           30E4                       xor	ah,ah
20625 5031           50                         push	ax
20626                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20627 5032           E8         F91F            call	_vgamem_fill_cga
20628 5035           83C4                   0C  add	sp,*$C
20629                                           !BCC_EOS
20630                                           ! 2408              else
20631                                           ! 2409               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20632 5038           EB           28            jmp .138
20633                       0000503A            .135:
20634                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20635 503A           8A46         FD            mov	al,-3[bp]
20636 503D           30E4                       xor	ah,ah
20637 503F           50                         push	ax
20638                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20639 5040           FF76         F8            push	-8[bp]
20640                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20641 5043           8A46         FB            mov	al,-5[bp]
20642 5046           30E4                       xor	ah,ah
20643 5048           50                         push	ax
20644                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20645 5049           FF76         F4            push	-$C[bp]
20646                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20647 504C           8B46         F4            mov	ax,-$C[bp]
20648 504F           0246         04            add	al,4[bp]
20649 5052           80D4                   00  adc	ah,*0
20650                                           ! Debug: list unsigned int = ax+0 (used reg = )
20651 5055           50                         push	ax
20652                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20653 5056           8A46         0A            mov	al,$A[bp]
20654 5059           30E4                       xor	ah,ah
20655 505B           50                         push	ax
20656                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20657 505C           E8         F7E3            call	_vgamem_copy_cga
20658 505F           83C4                   0C  add	sp,*$C
20659                                           !BCC_EOS
20660                                           ! 2410             }
20661                       00005062            .138:
20662                                           ! 2411           }
20663                       00005062            .132:
20664                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20665 5062           8B46         F4            mov	ax,-$C[bp]
20666 5065           40                         inc	ax
20667 5066           8946         F4            mov	-$C[bp],ax
20668                       00005069            .133:
20669                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20670 5069           8A46         0C            mov	al,$C[bp]
20671 506C           30E4                       xor	ah,ah
20672 506E           3B46         F4            cmp	ax,-$C[bp]
20673 5071           73           83            jae	.134
20674                       00005073            .139:
20675                       00005073            .131:
20676                                           ! 2412          else
20677                                           ! 2413           {for(i=rlr;i>=rul;i--)
20678 5073           E9         008E            br 	.13A
20679                       00005076            .12F:
20680                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20681 5076           8A46         0C            mov	al,$C[bp]
20682 5079           30E4                       xor	ah,ah
20683 507B           8946         F4            mov	-$C[bp],ax
20684                                           !BCC_EOS
20685                                           !BCC_EOS
20686                                           ! 2414             {
20687 507E           EB           78            jmp .13D
20688                       00005080            .13E:
20689                                           ! 2415              if((i<rul+nblines)||(nblines==0))
20690                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20691 5080           8A46         08            mov	al,8[bp]
20692 5083           30E4                       xor	ah,ah
20693 5085           0246         04            add	al,4[bp]
20694 5088           80D4                   00  adc	ah,*0
20695                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20696 508B           3B46         F4            cmp	ax,-$C[bp]
20697 508E           77           07            ja  	.140
20698                       00005090            .141:
20699                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20700 5090           8A46         04            mov	al,4[bp]
20701 5093           84C0                       test	al,al
20702 5095           75           26            jne 	.13F
20703                       00005097            .140:
20704                                           ! 2416               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20705                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20706 5097           8A46         06            mov	al,6[bp]
20707 509A           30E4                       xor	ah,ah
20708 509C           50                         push	ax
20709                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20710 509D           8A46         FD            mov	al,-3[bp]
20711 50A0           30E4                       xor	ah,ah
20712 50A2           50                         push	ax
20713                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20714 50A3           FF76         F8            push	-8[bp]
20715                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20716 50A6           8A46         FB            mov	al,-5[bp]
20717 50A9           30E4                       xor	ah,ah
20718 50AB           50                         push	ax
20719                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20720 50AC           FF76         F4            push	-$C[bp]
20721                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20722 50AF           8A46         0A            mov	al,$A[bp]
20723 50B2           30E4                       xor	ah,ah
20724 50B4           50                         push	ax
20725                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20726 50B5           E8         F89C            call	_vgamem_fill_cga
20727 50B8           83C4                   0C  add	sp,*$C
20728                                           !BCC_EOS
20729                                           ! 2417              else
20730                                           ! 2418               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20731 50BB           EB           28            jmp .142
20732                       000050BD            .13F:
20733                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20734 50BD           8A46         FD            mov	al,-3[bp]
20735 50C0           30E4                       xor	ah,ah
20736 50C2           50                         push	ax
20737                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20738 50C3           FF76         F8            push	-8[bp]
20739                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20740 50C6           8A46         FB            mov	al,-5[bp]
20741 50C9           30E4                       xor	ah,ah
20742 50CB           50                         push	ax
20743                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20744 50CC           8B46         F4            mov	ax,-$C[bp]
20745 50CF           2A46         04            sub	al,4[bp]
20746 50D2           80DC                   00  sbb	ah,*0
20747                                           ! Debug: list unsigned int = ax+0 (used reg = )
20748 50D5           50                         push	ax
20749                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20750 50D6           FF76         F4            push	-$C[bp]
20751                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20752 50D9           8A46         0A            mov	al,$A[bp]
20753 50DC           30E4                       xor	ah,ah
20754 50DE           50                         push	ax
20755                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20756 50DF           E8         F760            call	_vgamem_copy_cga
20757 50E2           83C4                   0C  add	sp,*$C
20758                                           !BCC_EOS
20759                                           ! 2419              if (i>rlr) break;
20760                       000050E5            .142:
20761                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20762 50E5           8A46         0C            mov	al,$C[bp]
20763 50E8           30E4                       xor	ah,ah
20764 50EA           3B46         F4            cmp	ax,-$C[bp]
20765 50ED           73           02            jae 	.143
20766                       000050EF            .144:
20767 50EF           EB           13            jmp .13B
20768                                           !BCC_EOS
20769                                           ! 2420             }
20770                       000050F1            .143:
20771                                           ! 2421           }
20772                       000050F1            .13C:
20773                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20774 50F1           8B46         F4            mov	ax,-$C[bp]
20775 50F4           48                         dec	ax
20776 50F5           8946         F4            mov	-$C[bp],ax
20777                       000050F8            .13D:
20778                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20779 50F8           8A46         08            mov	al,8[bp]
20780 50FB           30E4                       xor	ah,ah
20781 50FD           3B46         F4            cmp	ax,-$C[bp]
20782 5100         0F86         FF7C            blos	.13E
20783                       00005104            .145:
20784                       00005104            .13B:
20785                                           ! 2422         }
20786                       00005104            .13A:
20787                                           ! 2423        break;
20788                       00005104            .12C:
20789 5104           EB           22            jmp .102
20790                                           !BCC_EOS
20791                                           ! 2424      default:
20792                                           ! 2425        printf("Scroll in graphics mode ");
20793                       00005106            .146:
20794                                           ! Debug: list * char = .147+0 (used reg = )
20795 5106           BB                   A7A1  mov	bx,#.147
20796 5109           53                         push	bx
20797                                           ! Debug: func () void = printf+0 (used reg = )
20798 510A           E8         2F6D            call	_printf
20799 510D           44                         inc	sp
20800 510E           44                         inc	sp
20801                                           !BCC_EOS
20802                                           ! 2426        unimplemented();
20803                                           ! Debug: func () void = unimplemented+0 (used reg = )
20804 510F           E8         2F4C            call	_unimplemented
20805                                           !BCC_EOS
20806                                           ! 2427     }
20807                                           ! 2428   }
20808 5112           EB           14            jmp .102
20809                       00005114            .104:
20810 5114           2C                     02  sub	al,*2
20811 5116         0F84         FE13            beq 	.125
20812 511A           2C                     01  sub	al,*1
20813 511C         0F84         FC55            beq 	.106
20814 5120           2C                     01  sub	al,*1
20815 5122         0F84         FC4F            beq 	.105
20816 5126           EB           DE            jmp	.146
20817                       00005128            .102:
20818                       FFFFFFF0            ..FFFC	=	-$10
20819                                           ! 2429 }
20820                       00005128            .101:
20821 5128           89EC                       mov	sp,bp
20822 512A           5D                         pop	bp
20823 512B           C3                         ret
20824                                           ! 2430 static void biosfn_read_char_attr (page,car)
20825                                           ! Register BX used in function biosfn_scroll
20826                                           ! 2431 Bit8u page;Bit16u *car;
20827                       0000512C            _biosfn_read_char_attr:
20828                                           !BCC_EOS
20829                                           !BCC_EOS
20830                                           ! 2432 {Bit16u ss=get_SS();
20831 512C           55                         push	bp
20832 512D           89E5                       mov	bp,sp
20833 512F           4C                         dec	sp
20834 5130           4C                         dec	sp
20835                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20836 5131           E8         2F27            call	_get_SS
20837                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20838 5134           8946         FE            mov	-2[bp],ax
20839                                           !BCC_EOS
20840                                           ! 2433  Bit8u xcurs,ycurs,mode,line;
20841                                           !BCC_EOS
20842                                           ! 2434  Bit16u nbcols,nbrows,address;
20843                                           !BCC_EOS
20844                                           ! 2435  Bit16u cursor,dummy;
20845                                           !BCC_EOS
20846                                           ! 2436  mode=read_byte(0x40,0x49);
20847 5137           83C4                   F2  add	sp,*-$E
20848                                           ! Debug: list int = const $49 (used reg = )
20849 513A           B8                   0049  mov	ax,*$49
20850 513D           50                         push	ax
20851                                           ! Debug: list int = const $40 (used reg = )
20852 513E           B8                   0040  mov	ax,*$40
20853 5141           50                         push	ax
20854                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20855 5142           E8         2E8A            call	_read_byte
20856 5145           83C4                   04  add	sp,*4
20857                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20858 5148           8846         FB            mov	-5[bp],al
20859                                           !BCC_EOS
20860                                           ! 2437  line=find_vga_entry(m
20861                                           ! 2437 ode);
20862                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20863 514B           8A46         FB            mov	al,-5[bp]
20864 514E           30E4                       xor	ah,ah
20865 5150           50                         push	ax
20866                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20867 5151           E8         2D8F            call	_find_vga_entry
20868 5154           44                         inc	sp
20869 5155           44                         inc	sp
20870                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20871 5156           8846         FA            mov	-6[bp],al
20872                                           !BCC_EOS
20873                                           ! 2438  if(line==0xFF)return;
20874                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20875 5159           8A46         FA            mov	al,-6[bp]
20876 515C           3C                     FF  cmp	al,#$FF
20877 515E           75           04            jne 	.148
20878                       00005160            .149:
20879 5160           89EC                       mov	sp,bp
20880 5162           5D                         pop	bp
20881 5163           C3                         ret
20882                                           !BCC_EOS
20883                                           ! 2439  biosfn_get_cursor_pos(page,&dummy,&cursor);
20884                       00005164            .148:
20885                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20886 5164           8D5E         F2            lea	bx,-$E[bp]
20887 5167           53                         push	bx
20888                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20889 5168           8D5E         F0            lea	bx,-$10[bp]
20890 516B           53                         push	bx
20891                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20892 516C           8A46         04            mov	al,4[bp]
20893 516F           30E4                       xor	ah,ah
20894 5171           50                         push	ax
20895                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20896 5172           E8         F389            call	_biosfn_get_cursor_pos
20897 5175           83C4                   06  add	sp,*6
20898                                           !BCC_EOS
20899                                           ! 2440  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20900                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20901 5178           8A46         F2            mov	al,-$E[bp]
20902                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20903 517B           8846         FD            mov	-3[bp],al
20904                                           !BCC_EOS
20905                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20906 517E           8B46         F2            mov	ax,-$E[bp]
20907 5181           30C0                       xor	al,al
20908                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20909 5183           88E0                       mov	al,ah
20910 5185           30E4                       xor	ah,ah
20911                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20912 5187           8846         FC            mov	-4[bp],al
20913                                           !BCC_EOS
20914                                           ! 2441  nbrows=read_byte(0x40,0x84)+1;
20915                                           ! Debug: list int = const $84 (used reg = )
20916 518A           B8                   0084  mov	ax,#$84
20917 518D           50                         push	ax
20918                                           ! Debug: list int = const $40 (used reg = )
20919 518E           B8                   0040  mov	ax,*$40
20920 5191           50                         push	ax
20921                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20922 5192           E8         2E3A            call	_read_byte
20923 5195           83C4                   04  add	sp,*4
20924                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20925 5198           30E4                       xor	ah,ah
20926                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20927 519A           40                         inc	ax
20928 519B           8946         F6            mov	-$A[bp],ax
20929                                           !BCC_EOS
20930                                           ! 2442  nbcols=read_word(0x40,0x4A);
20931                                           ! Debug: list int = const $4A (used reg = )
20932 519E           B8                   004A  mov	ax,*$4A
20933 51A1           50                         push	ax
20934                                           ! Debug: list int = const $40 (used reg = )
20935 51A2           B8                   0040  mov	ax,*$40
20936 51A5           50                         push	ax
20937                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20938 51A6           E8         2E39            call	_read_word
20939 51A9           83C4                   04  add	sp,*4
20940                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20941 51AC           8946         F8            mov	-8[bp],ax
20942                                           !BCC_EOS
20943                                           ! 2443  if(vga_modes[line].class==0x00)
20944                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$12] struct  = vga_modes+0 (used reg = )
20945 51AF           8A46         FA            mov	al,-6[bp]
20946 51B2           30E4                       xor	ah,ah
20947 51B4           B1                     03  mov	cl,*3
20948 51B6           D3E0                       shl	ax,cl
20949 51B8           89C3                       mov	bx,ax
20950 51BA           81C3                 0233  add	bx,#_vga_modes
20951                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20952 51BE           8A47         01            mov	al,1[bx]
20953 51C1           84C0                       test	al,al
20954 51C3           75           5E            jne 	.14A
20955                       000051C5            .14B:
20956                                           ! 2444   {
20957                                           ! 2445    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20958                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20959 51C5           8A46         FC            mov	al,-4[bp]
20960 51C8           30E4                       xor	ah,ah
20961 51CA           8B4E         F8            mov	cx,-8[bp]
20962 51CD           F7E9                       imul	cx
20963                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20964                                           ! Debug: expression subtree swapping
20965 51CF           0246         FD            add	al,-3[bp]
20966 51D2           80D4                   00  adc	ah,*0
20967                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20968 51D5           D1E0                       shl	ax,*1
20969 51D7           50                         push	ax
20970                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20971 51D8           8B46         F8            mov	ax,-8[bp]
20972 51DB           8B4E         F6            mov	cx,-$A[bp]
20973 51DE           F7E9                       imul	cx
20974                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20975 51E0           D1E0                       shl	ax,*1
20976                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20977 51E2           0C                     FF  or	al,#$FF
20978                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20979                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20980 51E4           89C3                       mov	bx,ax
20981 51E6           8A46         04            mov	al,4[bp]
20982 51E9           30E4                       xor	ah,ah
20983 51EB           93                         xchg	ax,bx
20984 51EC           40                         inc	ax
20985 51ED           89D9                       mov	cx,bx
20986 51EF           F7E9                       imul	cx
20987                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20988 51F1           0346         EE            add	ax,-$12[bp]
20989 51F4           44                         inc	sp
20990 51F5           44                         inc	sp
20991                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20992 51F6           8946         F4            mov	-$C[bp],ax
20993                                           !BCC_EOS
20994                                           ! 2446    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20995                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20996 51F9           FF76         F4            push	-$C[bp]
20997                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$12] struct  = vga_modes+0 (used reg = )
20998 51FC           8A46         FA            mov	al,-6[bp]
20999 51FF           30E4                       xor	ah,ah
21000 5201           B1                     03  mov	cl,*3
21001 5203           D3E0                       shl	ax,cl
21002 5205           89C3                       mov	bx,ax
21003 5207           81C3                 0233  add	bx,#_vga_modes
21004                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21005 520B           FF77         04            push	4[bx]
21006                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21007 520E           E8         2DD1            call	_read_word
21008 5211           83C4                   04  add	sp,*4
21009                                           ! Debug: list unsigned short = ax+0 (used reg = )
21010 5214           50                         push	ax
21011                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
21012 5215           FF76         06            push	6[bp]
21013                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
21014 5218           FF76         FE            push	-2[bp]
21015                                           ! Debug: func () void = write_word+0 (used reg = )
21016 521B           E8         2DEF            call	_write_word
21017 521E           83C4                   06  add	sp,*6
21018                                           !BCC_EOS
21019                                           ! 2447   }
21020                                           ! 2448  else
21021                                           ! 2449   {
21022 5221           EB           03            jmp .14C
21023                       00005223            .14A:
21024                                           ! 2450    unimplemented();
21025                                           ! Debug: func () void = unimplemented+0 (used reg = )
21026 5223           E8         2E38            call	_unimplemented
21027                                           !BCC_EOS
21028                                           ! 2451   }
21029                                           ! 2452 }
21030                       00005226            .14C:
21031 5226           89EC                       mov	sp,bp
21032 5228           5D                         pop	bp
21033 5229           C3                         ret
21034                                           ! 2453 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
21035                                           ! Register BX used in function biosfn_read_char_attr
21036                                           ! 2454 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
21037                       0000522A            _write_gfx_char_pl4:
21038                                           !BCC_EOS
21039                                           !BCC_EOS
21040                                           !BCC_EOS
21041                                           !BCC_EOS
21042                                           !BCC_EOS
21043                                           !BCC_EOS
21044                                           ! 2455 {
21045                                           ! 2456  Bit8u i,j,mask;
21046                                           !BCC_EOS
21047                                           ! 2457  Bit8u *fdata;
21048                                           !BCC_EOS
21049                                           ! 2458  Bit16u addr,dest,src;
21050                                           !BCC_EOS
21051                                           ! 2459  switch(cheight)
21052 522A           55                         push	bp
21053 522B           89E5                       mov	bp,sp
21054 522D           83C4                   F4  add	sp,*-$C
21055 5230           8A46         0E            mov	al,$E[bp]
21056                                           ! 2460   {case 14:
21057 5233           EB           18            jmp .14F
21058                                           ! 2461     fdata = &vgafont14;
21059                       00005235            .150:
21060                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21061 5235           BB                   17A9  mov	bx,#_vgafont14
21062 5238           895E         FA            mov	-6[bp],bx
21063                                           !BCC_EOS
21064                                           ! 2462     break;
21065 523B           EB           1A            jmp .14D
21066                                           !BCC_EOS
21067                                           ! 2463    case 16:
21068                                           ! 2464     fdata = &vgafont16;
21069                       0000523D            .151:
21070                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21071 523D           BB                   25A9  mov	bx,#_vgafont16
21072 5240           895E         FA            mov	-6[bp],bx
21073                                           !BCC_EOS
21074                                           ! 2465     break;
21075 5243           EB           12            jmp .14D
21076                                           !BCC_EOS
21077                                           ! 2466    default:
21078                                           ! 2467     fdata = &vgafont8;
21079                       00005245            .152:
21080                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21081 5245           BB                   0FA9  mov	bx,#_vgafont8
21082 5248           895E         FA            mov	-6[bp],bx
21083                                           !BCC_EOS
21084                                           ! 2468   }
21085                                           ! 2469  addr=xcurs+ycurs*cheight*nbcols;
21086 524B           EB           0A            jmp .14D
21087                       0000524D            .14F:
21088 524D           2C                     0E  sub	al,*$E
21089 524F           74           E4            je 	.150
21090 5251           2C                     02  sub	al,*2
21091 5253           74           E8            je 	.151
21092 5255           EB           EE            jmp	.152
21093                       00005257            .14D:
21094                       FFFFFFF2            ..FFFB	=	-$E
21095                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
21096 5257           8A46         0E            mov	al,$E[bp]
21097 525A           30E4                       xor	ah,ah
21098 525C           89C3                       mov	bx,ax
21099 525E           8A46         0A            mov	al,$A[bp]
21100 5261           30E4                       xor	ah,ah
21101 5263           89D9                       mov	cx,bx
21102 5265           F7E9                       imul	cx
21103                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
21104 5267           89C3                       mov	bx,ax
21105 5269           8A46         0C            mov	al,$C[bp]
21106 526C           30E4                       xor	ah,ah
21107 526E           93                         xchg	ax,bx
21108 526F           89D9                       mov	cx,bx
21109 5271           F7E9                       imul	cx
21110                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
21111                                           ! Debug: expression subtree swapping
21112 5273           0246         08            add	al,8[bp]
21113 5276           80D4                   00  adc	ah,*0
21114                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21115 5279           8946         F8            mov	-8[bp],ax
21116                                           !BCC_EOS
21117                                           ! 2470  src = car * cheight;
21118                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
21119 527C           8A46         0E            mov	al,$E[bp]
21120 527F           30E4                       xor	ah,ah
21121 5281           89C3                       mov	bx,ax
21122 5283           8A46         04            mov	al,4[bp]
21123 5286           30E4                       xor	ah,ah
21124 5288           89D9                       mov	cx,bx
21125 528A           F7E9                       imul	cx
21126                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21127 528C           8946         F4            mov	-$C[bp],ax
21128                                           !BCC_EOS
21129                                           ! 2471  outw(0x3c4, 0x0f02);
21130                                           ! Debug: list int = const $F02 (used reg = )
21131 528F           B8                   0F02  mov	ax,#$F02
21132 5292           50                         push	ax
21133                                           ! Debug: list int = const $3C4 (used reg = )
21134 5293           B8                   03C4  mov	ax,#$3C4
21135 5296           50                         push	ax
21136                                           ! Debug: func () void = outw+0 (used reg = )
21137 5297           E8         2DB1            call	_outw
21138 529A           83C4                   04  add	sp,*4
21139                                           !BCC_EOS
21140                                           ! 2472  outw(0x3ce, 0x0205);
21141                                           ! Debug: list int = const $205 (used reg = )
21142 529D           B8                   0205  mov	ax,#$205
21143 52A0           50                         push	ax
21144                                           ! Debug: list int = const $3CE (used reg = )
21145 52A1           B8                   03CE  mov	ax,#$3CE
21146 52A4           50                         push	ax
21147                                           ! Debug: func () void = outw+0 (used reg = )
21148 52A5           E8         2DA3            call	_outw
21149 52A8           83C4                   04  add	sp,*4
21150                                           !BCC_EOS
21151                                           ! 2473  if(attr&0x80)
21152                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21153 52AB           8A46         06            mov	al,6[bp]
21154 52AE           24                     80  and	al,#$80
21155 52B0           84C0                       test	al,al
21156 52B2           74           10            je  	.153
21157                       000052B4            .154:
21158                                           ! 2474   {
21159                                           ! 2475    outw(0x3ce, 0x1803);
21160                                           ! Debug: list int = const $1803 (used reg = )
21161 52B4           B8                   1803  mov	ax,#$1803
21162 52B7           50                         push	ax
21163                                           ! Debug: list int = const $3CE (used reg = )
21164 52B8           B8                   03CE  mov	ax,#$3CE
21165 52BB           50                         push	ax
21166                                           ! Debug: func () void = outw+0 (used reg = )
21167 52BC           E8         2D8C            call	_outw
21168 52BF           83C4                   04  add	sp,*4
21169                                           !BCC_EOS
21170                                           ! 2476   }
21171                                           ! 2477  else
21172                                           ! 2478   {
21173 52C2           EB           0E            jmp .155
21174                       000052C4            .153:
21175                                           ! 2479    outw(0x3ce, 0x0003);
21176                                           ! Debug: list int = const 3 (used reg = )
21177 52C4           B8                   0003  mov	ax,*3
21178 52C7           50                         push	ax
21179                                           ! Debug: list int = const $3CE (used reg = )
21180 52C8           B8                   03CE  mov	ax,#$3CE
21181 52CB           50                         push	ax
21182                                           ! Debug: func () void = outw+0 (used reg = )
21183 52CC           E8         2D7C            call	_outw
21184 52CF           83C4                   04  add	sp,*4
21185                                           !BCC_EOS
21186                                           ! 2480   }
21187                                           ! 2481  for(i=0;i<cheight;i++)
21188                       000052D2            .155:
21189                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21190 52D2           30C0                       xor	al,al
21191 52D4           8846         FF            mov	-1[bp],al
21192                                           !BCC_EOS
21193                                           !BCC_EOS
21194                                           ! 2482   {
21195 52D7           E9         00A7            br 	.158
21196                       000052DA            .159:
21197                                           ! 2483    dest=addr+i*nbcols;
21198                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21199 52DA           8A46         0C            mov	al,$C[bp]
21200 52DD           30E4                       xor	ah,ah
21201 52DF           89C3                       mov	bx,ax
21202 52E1           8A46         FF            mov	al,-1[bp]
21203 52E4           30E4                       xor	ah,ah
21204 52E6           89D9                       mov	cx,bx
21205 52E8           F7E9                       imul	cx
21206                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21207                                           ! Debug: expression subtree swapping
21208 52EA           0346         F8            add	ax,-8[bp]
21209                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21210 52ED           8946         F6            mov	-$A[bp],ax
21211                                           !BCC_EOS
21212                                           ! 2484    for(j=0;j<8;j++)
21213                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21214 52F0           30C0                       xor	al,al
21215 52F2           8846         FE            mov	-2[bp],al
21216                                           !BCC_EOS
21217                                           !BCC_EOS
21218                                           ! 2485     {
21219 52F5           E9         0079            br 	.15C
21220                       000052F8            .15D:
21221                                           ! 2486      mask=0x80>>j;
21222                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21223 52F8           8A46         FE            mov	al,-2[bp]
21224 52FB           30E4                       xor	ah,ah
21225 52FD           89C3                       mov	bx,ax
21226 52FF           B8                   0080  mov	ax,#$80
21227 5302           89D9                       mov	cx,bx
21228 5304           D3F8                       sar	ax,cl
21229                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21230 5306           8846         FD            mov	-3[bp],al
21231                                           !BCC_EOS
21232                                           ! 2487      outw(0x3ce, (mask << 8) | 0x08);
21233                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21234 5309           8A46         FD            mov	al,-3[bp]
21235 530C           30E4                       xor	ah,ah
21236 530E           88C4                       mov	ah,al
21237 5310           30C0                       xor	al,al
21238                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21239 5312           0C                     08  or	al,*8
21240                                           ! Debug: list unsigned int = ax+0 (used reg = )
21241 5314           50                         push	ax
21242                                           ! Debug: list int = const $3CE (used reg = )
21243 5315           B8                   03CE  mov	ax,#$3CE
21244 5318           50                         push	ax
21245                                           ! Debug: func () void = outw+0 (used reg = )
21246 5319           E8         2D2F            call	_outw
21247 531C           83C4                   04  add	sp,*4
21248                                           !BCC_EOS
21249                                           ! 2488      read_byte(0xa000,dest);
21250                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21251 531F           FF76         F6            push	-$A[bp]
21252                                           ! Debug: list unsigned int = const $A000 (used reg = )
21253 5322           B8                   A000  mov	ax,#$A000
21254 5325           50                         push	ax
21255                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21256 5326           E8         2CA6            call	_read_byte
21257 5329           83C4                   04  add	sp,*4
21258                                           !BCC_EOS
21259                                           ! 2489      if(fdata[src+i]&mask)
21260                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21261 532C           8B46         F4            mov	ax,-$C[bp]
21262 532F           0246         FF            add	al,-1[bp]
21263 5332           80D4                   00  adc	ah,*0
21264                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21265 5335           0346         FA            add	ax,-6[bp]
21266 5338           89C3                       mov	bx,ax
21267                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21268 533A           8A07                       mov	al,[bx]
21269 533C           2246         FD            and	al,-3[bp]
21270 533F           84C0                       test	al,al
21271 5341           74           17            je  	.15E
21272                       00005343            .15F:
21273                                           ! 2490       {
21274                                           ! 2491        write_byte(0xa000,dest,attr&0x0f);
21275                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21276 5343           8A46         06            mov	al,6[bp]
21277 5346           24                     0F  and	al,*$F
21278                                           ! Debug: list unsigned char = al+0 (used reg = )
21279 5348           30E4                       xor	ah,ah
21280 534A           50                         push	ax
21281                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21282 534B           FF76         F6            push	-$A[bp]
21283                                           ! Debug: list unsigned int = const $A000 (used reg = )
21284 534E           B8                   A000  mov	ax,#$A000
21285 5351           50                         push	ax
21286                                           ! Debug: func () void = write_byte+0 (used reg = )
21287 5352           E8         2CA0            call	_write_byte
21288 5355           83C4                   06  add	sp,*6
21289                                           !BCC_EOS
21290                                           ! 2492       }
21291                                           ! 2493      else
21292                                           ! 2494       {
21293 5358           EB           10            jmp .160
21294                       0000535A            .15E:
21295                                           ! 2495        write_byte(0xa000,dest,0x00);
21296                                           ! Debug: list int = const 0 (used reg = )
21297 535A           31C0                       xor	ax,ax
21298 535C           50                         push	ax
21299                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21300 535D           FF76         F6            push	-$A[bp]
21301                                           ! Debug: list unsigned int = const $A000 (used reg = )
21302 5360           B8                   A000  mov	ax,#$A000
21303 5363           50                         push	ax
21304                                           ! Debug: func () void = write_byte+0 (used reg = )
21305 5364           E8         2C8E            call	_write_byte
21306 5367           83C4                   06  add	sp,*6
21307                                           !BCC_EOS
21308                                           ! 2496       }
21309                                           ! 2497     }
21310                       0000536A            .160:
21311                                           ! 2498   }
21312                       0000536A            .15B:
21313                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21314 536A           8A46         FE            mov	al,-2[bp]
21315 536D           40                         inc	ax
21316 536E           8846         FE            mov	-2[bp],al
21317                       00005371            .15C:
21318                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21319 5371           8A46         FE            mov	al,-2[bp]
21320 5374           3C                     08  cmp	al,*8
21321 5376         0F82         FF7E            blo 	.15D
21322                       0000537A            .161:
21323                       0000537A            .15A:
21324                                           ! 2499 #asm
21325                       0000537A            .157:
21326                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21327 537A           8A46         FF            mov	al,-1[bp]
21328 537D           40                         inc	ax
21329 537E           8846         FF            mov	-1[bp],al
21330                       00005381            .158:
21331                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21332 5381           8A46         FF            mov	al,-1[bp]
21333 5384           3A46         0E            cmp	al,$E[bp]
21334 5387         0F82         FF4F            blo 	.159
21335                       0000538B            .162:
21336                       0000538B            .156:
21337                                           !BCC_EOS
21338                                           !BCC_ASM
21339                       0000000A            _write_gfx_char_pl4.j	set	$A
21340                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21341                       00000006            _write_gfx_char_pl4.fdata	set	6
21342                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21343                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21344                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21345                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21346                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21347                       0000000B            _write_gfx_char_pl4.i	set	$B
21348                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21349                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21350                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21351                       00000009            _write_gfx_char_pl4.mask	set	9
21352                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21353                       00000002            _write_gfx_char_pl4.dest	set	2
21354                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21355                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21356                       00000008            .write_gfx_char_pl4.xcurs	set	8
21357                       00000000            _write_gfx_char_pl4.src	set	0
21358                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21359                       00000012            _write_gfx_char_pl4.attr	set	$12
21360                       00000006            .write_gfx_char_pl4.attr	set	6
21361                       00000010            _write_gfx_char_pl4.car	set	$10
21362                       00000004            .write_gfx_char_pl4.car	set	4
21363                       00000004            _write_gfx_char_pl4.addr	set	4
21364                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21365 538B           BA                   03CE    mov dx, # 0x3ce
21366 538E           B8                   FF08    mov ax, #0xff08
21367 5391           EF                           out dx, ax
21368 5392           B8                   0005    mov ax, #0x0005
21369 5395           EF                           out dx, ax
21370 5396           B8                   0003    mov ax, #0x0003
21371 5399           EF                           out dx, ax
21372                                           ! 2507 endasm
21373                                           !BCC_ENDASM
21374                                           !BCC_EOS
21375                                           ! 2508 }
21376 539A           89EC                       mov	sp,bp
21377 539C           5D                         pop	bp
21378 539D           C3                         ret
21379                                           ! 2509 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21380                                           ! Register BX used in function write_gfx_char_pl4
21381                                           ! 2510 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21382                       0000539E            _write_gfx_char_cga:
21383                                           !BCC_EOS
21384                                           !BCC_EOS
21385                                           !BCC_EOS
21386                                           !BCC_EOS
21387                                           !BCC_EOS
21388                                           !BCC_EOS
21389                                           ! 2511 {
21390                                           ! 2512  Bit8u i,j,mask,data;
21391                                           !BCC_EOS
21392                                           ! 2513  Bit8u *fdata;
21393                                           !BCC_EOS
21394                                           ! 2514  Bit16u addr,dest,src;
21395                                           !BCC_EOS
21396                                           ! 2515  fdata = &vgafont8;
21397 539E           55                         push	bp
21398 539F           89E5                       mov	bp,sp
21399 53A1           83C4                   F4  add	sp,*-$C
21400                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21401 53A4           BB                   0FA9  mov	bx,#_vgafont8
21402 53A7           895E         FA            mov	-6[bp],bx
21403                                           !BCC_EOS
21404                                           ! 2516  addr=(xcurs*bpp)+ycurs*320;
21405                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21406 53AA           8A46         0A            mov	al,$A[bp]
21407 53AD           30E4                       xor	ah,ah
21408 53AF           B9                   0140  mov	cx,#$140
21409 53B2           F7E9                       imul	cx
21410 53B4           50                         push	ax
21411                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21412 53B5           8A46         0E            mov	al,$E[bp]
21413 53B8           30E4                       xor	ah,ah
21414 53BA           89C3                       mov	bx,ax
21415 53BC           8A46         08            mov	al,8[bp]
21416 53BF           30E4                       xor	ah,ah
21417 53C1           89D9                       mov	cx,bx
21418 53C3           F7E9                       imul	cx
21419                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21420 53C5           0346         F2            add	ax,-$E[bp]
21421 53C8           44                         inc	sp
21422 53C9           44                         inc	sp
21423                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21424 53CA           8946         F8            mov	-8[bp],ax
21425                                           !BCC_EOS
21426                                           ! 2517  src = car * 8;
21427                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21428 53CD           8A46         04            mov	al,4[bp]
21429 53D0           30E4                       xor	ah,ah
21430 53D2           B1                     03  mov	cl,*3
21431 53D4           D3E0                       shl	ax,cl
21432                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21433 53D6           8946         F4            mov	-$C[bp],ax
21434                                           !BCC_EOS
21435                                           ! 2518  for(i=0;i<8;i++)
21436                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21437 53D9           30C0                       xor	al,al
21438 53DB           8846         FF            mov	-1[bp],al
21439                                           !BCC_EOS
21440                                           !BCC_EOS
21441                                           ! 2519   {
21442 53DE           E9         01B4            br 	.165
21443                       000053E1            .166:
21444                                           ! 2520    dest=addr+(i>>1)*80;
21445                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21446 53E1           8A46         FF            mov	al,-1[bp]
21447 53E4           30E4                       xor	ah,ah
21448 53E6           D1E8                       shr	ax,*1
21449                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21450 53E8           B9                   0050  mov	cx,*$50
21451 53EB           F7E9                       imul	cx
21452                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21453                                           ! Debug: expression subtree swapping
21454 53ED           0346         F8            add	ax,-8[bp]
21455                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21456 53F0           8946         F6            mov	-$A[bp],ax
21457                                           !BCC_EOS
21458                                           ! 2521    if (i & 1) dest += 0x2000;
21459                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21460 53F3           8A46         FF            mov	al,-1[bp]
21461 53F6           24                     01  and	al,*1
21462 53F8           84C0                       test	al,al
21463 53FA           74           09            je  	.167
21464                       000053FC            .168:
21465                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21466 53FC           8B46         F6            mov	ax,-$A[bp]
21467 53FF           05                   2000  add	ax,#$2000
21468 5402           8946         F6            mov	-$A[bp],ax
21469                                           !BCC_EOS
21470                                           ! 2522    mask = 0x80;
21471                       00005405            .167:
21472                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21473 5405           B0                     80  mov	al,#$80
21474 5407           8846         FD            mov	-3[bp],al
21475                                           !BCC_EOS
21476                                           ! 2523    if (bpp == 1)
21477                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21478 540A           8A46         0E            mov	al,$E[bp]
21479 540D           3C                     01  cmp	al,*1
21480 540F         0F85         00B4            bne 	.169
21481                       00005413            .16A:
21482                                           ! 2524     {
21483                                           ! 2525      if (attr & 0x80)
21484                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21485 5413           8A46         06            mov	al,6[bp]
21486 5416           24                     80  and	al,#$80
21487 5418           84C0                       test	al,al
21488 541A           74           12            je  	.16B
21489                       0000541C            .16C:
21490                                           ! 2526       {
21491                                           ! 2527        data = read_byte(0xb800,dest);
21492                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21493 541C           FF76         F6            push	-$A[bp]
21494                                           ! Debug: list unsigned int = const $B800 (used reg = )
21495 541F           B8                   B800  mov	ax,#$B800
21496 5422           50                         push	ax
21497                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21498 5423           E8         2BA9            call	_read_byte
21499 5426           83C4                   04  add	sp,*4
21500                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21501 5429           8846         FC            mov	-4[bp],al
21502                                           !BCC_EOS
21503                                           ! 2528       }
21504                                           ! 2529      else
21505                                           ! 2530       {
21506 542C           EB           05            jmp .16D
21507                       0000542E            .16B:
21508                                           ! 2531        data = 0x00;
21509                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21510 542E           30C0                       xor	al,al
21511 5430           8846         FC            mov	-4[bp],al
21512                                           !BCC_EOS
21513                                           ! 2532       }
21514                                           ! 2533      for(j=0;j<8;j++)
21515                       00005433            .16D:
21516                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21517 5433           30C0                       xor	al,al
21518 5435           8846         FE            mov	-2[bp],al
21519                                           !BCC_EOS
21520                                           !BCC_EOS
21521                                           ! 2534       {
21522 5438           EB           70            jmp .170
21523                       0000543A            .171:
21524                                           ! 2535        if (fdata[src+i] & mask)
21525                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21526 543A           8B46         F4            mov	ax,-$C[bp]
21527 543D           0246         FF            add	al,-1[bp]
21528 5440           80D4                   00  adc	ah,*0
21529                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21530 5443           0346         FA            add	ax,-6[bp]
21531 5446           89C3                       mov	bx,ax
21532                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21533 5448           8A07                       mov	al,[bx]
21534 544A           2246         FD            and	al,-3[bp]
21535 544D           84C0                       test	al,al
21536 544F           74           48            je  	.172
21537                       00005451            .173:
21538                                           ! 2536         {
21539                                           ! 2537          if (attr & 0x80)
21540                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21541 5451           8A46         06            mov	al,6[bp]
21542 5454           24                     80  and	al,#$80
21543 5456           84C0                       test	al,al
21544 5458           74           21            je  	.174
21545                       0000545A            .175:
21546                                           ! 2538           {
21547                                           ! 2539            data ^= (attr & 0x01) << (7-j);
21548                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21549 545A           B8                   0007  mov	ax,*7
21550 545D           2A46         FE            sub	al,-2[bp]
21551 5460           80DC                   00  sbb	ah,*0
21552 5463           50                         push	ax
21553                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21554 5464           8A46         06            mov	al,6[bp]
21555 5467           24                     01  and	al,*1
21556                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21557 5469           30E4                       xor	ah,ah
21558 546B           8B4E         F2            mov	cx,-$E[bp]
21559 546E           D3E0                       shl	ax,cl
21560 5470           44                         inc	sp
21561 5471           44                         inc	sp
21562                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21563 5472           3246         FC            xor	al,-4[bp]
21564 5475           8846         FC            mov	-4[bp],al
21565                                           !BCC_EOS
21566                                           ! 2540           }
21567                                           ! 2541         
21568                                           ! 2541  else
21569                                           ! 2542           {
21570 5478           E9         001E            br 	.176
21571                       0000547B            .174:
21572                                           ! 2543            data |= (attr & 0x01) << (7-j);
21573                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21574 547B           B8                   0007  mov	ax,*7
21575 547E           2A46         FE            sub	al,-2[bp]
21576 5481           80DC                   00  sbb	ah,*0
21577 5484           50                         push	ax
21578                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21579 5485           8A46         06            mov	al,6[bp]
21580 5488           24                     01  and	al,*1
21581                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21582 548A           30E4                       xor	ah,ah
21583 548C           8B4E         F2            mov	cx,-$E[bp]
21584 548F           D3E0                       shl	ax,cl
21585 5491           44                         inc	sp
21586 5492           44                         inc	sp
21587                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21588 5493           0A46         FC            or	al,-4[bp]
21589 5496           8846         FC            mov	-4[bp],al
21590                                           !BCC_EOS
21591                                           ! 2544           }
21592                                           ! 2545         }
21593                       00005499            .176:
21594                                           ! 2546        mask >>= 1;
21595                       00005499            .172:
21596                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21597 5499           8A46         FD            mov	al,-3[bp]
21598 549C           30E4                       xor	ah,ah
21599 549E           D1E8                       shr	ax,*1
21600 54A0           8846         FD            mov	-3[bp],al
21601                                           !BCC_EOS
21602                                           ! 2547       }
21603                                           ! 2548      write_byte(0xb800,dest,data);
21604                       000054A3            .16F:
21605                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21606 54A3           8A46         FE            mov	al,-2[bp]
21607 54A6           40                         inc	ax
21608 54A7           8846         FE            mov	-2[bp],al
21609                       000054AA            .170:
21610                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21611 54AA           8A46         FE            mov	al,-2[bp]
21612 54AD           3C                     08  cmp	al,*8
21613 54AF           72           89            jb 	.171
21614                       000054B1            .177:
21615                       000054B1            .16E:
21616                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21617 54B1           8A46         FC            mov	al,-4[bp]
21618 54B4           30E4                       xor	ah,ah
21619 54B6           50                         push	ax
21620                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21621 54B7           FF76         F6            push	-$A[bp]
21622                                           ! Debug: list unsigned int = const $B800 (used reg = )
21623 54BA           B8                   B800  mov	ax,#$B800
21624 54BD           50                         push	ax
21625                                           ! Debug: func () void = write_byte+0 (used reg = )
21626 54BE           E8         2B34            call	_write_byte
21627 54C1           83C4                   06  add	sp,*6
21628                                           !BCC_EOS
21629                                           ! 2549     }
21630                                           ! 2550    else
21631                                           ! 2551     {
21632 54C4           E9         00C7            br 	.178
21633                       000054C7            .169:
21634                                           ! 2552      while (mask > 0)
21635                                           ! 2553       {
21636 54C7           E9         00BB            br 	.17A
21637                       000054CA            .17B:
21638                                           ! 2554        if (attr & 0x80)
21639                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21640 54CA           8A46         06            mov	al,6[bp]
21641 54CD           24                     80  and	al,#$80
21642 54CF           84C0                       test	al,al
21643 54D1           74           12            je  	.17C
21644                       000054D3            .17D:
21645                                           ! 2555         {
21646                                           ! 2556          data = read_byte(0xb800,dest);
21647                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21648 54D3           FF76         F6            push	-$A[bp]
21649                                           ! Debug: list unsigned int = const $B800 (used reg = )
21650 54D6           B8                   B800  mov	ax,#$B800
21651 54D9           50                         push	ax
21652                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21653 54DA           E8         2AF2            call	_read_byte
21654 54DD           83C4                   04  add	sp,*4
21655                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21656 54E0           8846         FC            mov	-4[bp],al
21657                                           !BCC_EOS
21658                                           ! 2557         }
21659                                           ! 2558        else
21660                                           ! 2559         {
21661 54E3           EB           05            jmp .17E
21662                       000054E5            .17C:
21663                                           ! 2560          data = 0x00;
21664                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21665 54E5           30C0                       xor	al,al
21666 54E7           8846         FC            mov	-4[bp],al
21667                                           !BCC_EOS
21668                                           ! 2561         }
21669                                           ! 2562        for(j=0;j<4;j++)
21670                       000054EA            .17E:
21671                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21672 54EA           30C0                       xor	al,al
21673 54EC           8846         FE            mov	-2[bp],al
21674                                           !BCC_EOS
21675                                           !BCC_EOS
21676                                           ! 2563         {
21677 54EF           EB           73            jmp .181
21678                       000054F1            .182:
21679                                           ! 2564          if (fdata[src+i] & mask)
21680                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21681 54F1           8B46         F4            mov	ax,-$C[bp]
21682 54F4           0246         FF            add	al,-1[bp]
21683 54F7           80D4                   00  adc	ah,*0
21684                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21685 54FA           0346         FA            add	ax,-6[bp]
21686 54FD           89C3                       mov	bx,ax
21687                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21688 54FF           8A07                       mov	al,[bx]
21689 5501           2246         FD            and	al,-3[bp]
21690 5504           84C0                       test	al,al
21691 5506           74           4B            je  	.183
21692                       00005508            .184:
21693                                           ! 2565           {
21694                                           ! 2566            if (attr & 0x80)
21695                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21696 5508           8A46         06            mov	al,6[bp]
21697 550B           24                     80  and	al,#$80
21698 550D           84C0                       test	al,al
21699 550F           74           22            je  	.185
21700                       00005511            .186:
21701                                           ! 2567             {
21702                                           ! 2568              data ^= (attr & 0x03) << ((3-j)*2);
21703                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21704 5511           B8                   0003  mov	ax,*3
21705 5514           2A46         FE            sub	al,-2[bp]
21706 5517           80DC                   00  sbb	ah,*0
21707                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21708 551A           D1E0                       shl	ax,*1
21709 551C           50                         push	ax
21710                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21711 551D           8A46         06            mov	al,6[bp]
21712 5520           24                     03  and	al,*3
21713                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21714 5522           30E4                       xor	ah,ah
21715 5524           8B4E         F2            mov	cx,-$E[bp]
21716 5527           D3E0                       shl	ax,cl
21717 5529           44                         inc	sp
21718 552A           44                         inc	sp
21719                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21720 552B           3246         FC            xor	al,-4[bp]
21721 552E           8846         FC            mov	-4[bp],al
21722                                           !BCC_EOS
21723                                           ! 2569             }
21724                                           ! 2570            else
21725                                           ! 2571             {
21726 5531           EB           20            jmp .187
21727                       00005533            .185:
21728                                           ! 2572              data |= (attr & 0x03) << ((3-j)*2);
21729                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21730 5533           B8                   0003  mov	ax,*3
21731 5536           2A46         FE            sub	al,-2[bp]
21732 5539           80DC                   00  sbb	ah,*0
21733                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21734 553C           D1E0                       shl	ax,*1
21735 553E           50                         push	ax
21736                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21737 553F           8A46         06            mov	al,6[bp]
21738 5542           24                     03  and	al,*3
21739                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21740 5544           30E4                       xor	ah,ah
21741 5546           8B4E         F2            mov	cx,-$E[bp]
21742 5549           D3E0                       shl	ax,cl
21743 554B           44                         inc	sp
21744 554C           44                         inc	sp
21745                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21746 554D           0A46         FC            or	al,-4[bp]
21747 5550           8846         FC            mov	-4[bp],al
21748                                           !BCC_EOS
21749                                           ! 2573             }
21750                                           ! 2574           }
21751                       00005553            .187:
21752                                           ! 2575          mask >>= 1;
21753                       00005553            .183:
21754                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21755 5553           8A46         FD            mov	al,-3[bp]
21756 5556           30E4                       xor	ah,ah
21757 5558           D1E8                       shr	ax,*1
21758 555A           8846         FD            mov	-3[bp],al
21759                                           !BCC_EOS
21760                                           ! 2576         }
21761                                           ! 2577        write_byte(0xb800,dest,data);
21762                       0000555D            .180:
21763                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21764 555D           8A46         FE            mov	al,-2[bp]
21765 5560           40                         inc	ax
21766 5561           8846         FE            mov	-2[bp],al
21767                       00005564            .181:
21768                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21769 5564           8A46         FE            mov	al,-2[bp]
21770 5567           3C                     04  cmp	al,*4
21771 5569           72           86            jb 	.182
21772                       0000556B            .188:
21773                       0000556B            .17F:
21774                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21775 556B           8A46         FC            mov	al,-4[bp]
21776 556E           30E4                       xor	ah,ah
21777 5570           50                         push	ax
21778                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21779 5571           FF76         F6            push	-$A[bp]
21780                                           ! Debug: list unsigned int = const $B800 (used reg = )
21781 5574           B8                   B800  mov	ax,#$B800
21782 5577           50                         push	ax
21783                                           ! Debug: func () void = write_byte+0 (used reg = )
21784 5578           E8         2A7A            call	_write_byte
21785 557B           83C4                   06  add	sp,*6
21786                                           !BCC_EOS
21787                                           ! 2578        dest += 1;
21788                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21789 557E           8B46         F6            mov	ax,-$A[bp]
21790 5581           40                         inc	ax
21791 5582           8946         F6            mov	-$A[bp],ax
21792                                           !BCC_EOS
21793                                           ! 2579       }
21794                                           ! 2580     }
21795                       00005585            .17A:
21796                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21797 5585           8A46         FD            mov	al,-3[bp]
21798 5588           84C0                       test	al,al
21799 558A         0F85         FF3C            bne 	.17B
21800                       0000558E            .189:
21801                       0000558E            .179:
21802                                           ! 2581   }
21803                       0000558E            .178:
21804                                           ! 2582 }
21805                       0000558E            .164:
21806                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21807 558E           8A46         FF            mov	al,-1[bp]
21808 5591           40                         inc	ax
21809 5592           8846         FF            mov	-1[bp],al
21810                       00005595            .165:
21811                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21812 5595           8A46         FF            mov	al,-1[bp]
21813 5598           3C                     08  cmp	al,*8
21814 559A         0F82         FE43            blo 	.166
21815                       0000559E            .18A:
21816                       0000559E            .163:
21817 559E           89EC                       mov	sp,bp
21818 55A0           5D                         pop	bp
21819 55A1           C3                         ret
21820                                           ! 2583 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21821                                           ! Register BX used in function write_gfx_char_cga
21822                                           ! 2584 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21823                       000055A2            _write_gfx_char_lin:
21824                                           !BCC_EOS
21825                                           !BCC_EOS
21826                                           !BCC_EOS
21827                                           !BCC_EOS
21828                                           !BCC_EOS
21829                                           ! 2585 {
21830                                           ! 2586  Bit8u i,j,mask,data;
21831                                           !BCC_EOS
21832                                           ! 2587  Bit8u *fdata;
21833                                           !BCC_EOS
21834                                           ! 2588  Bit16u addr,dest,src;
21835                                           !BCC_EOS
21836                                           ! 2589  fdata = &vgafont8;
21837 55A2           55                         push	bp
21838 55A3           89E5                       mov	bp,sp
21839 55A5           83C4                   F4  add	sp,*-$C
21840                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21841 55A8           BB                   0FA9  mov	bx,#_vgafont8
21842 55AB           895E         FA            mov	-6[bp],bx
21843                                           !BCC_EOS
21844                                           ! 2590  addr=xcurs*8+ycurs*nbcols*64;
21845                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21846 55AE           8A46         0C            mov	al,$C[bp]
21847 55B1           30E4                       xor	ah,ah
21848 55B3           89C3                       mov	bx,ax
21849 55B5           8A46         0A            mov	al,$A[bp]
21850 55B8           30E4                       xor	ah,ah
21851 55BA           89D9                       mov	cx,bx
21852 55BC           F7E9                       imul	cx
21853                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21854 55BE           B1                     06  mov	cl,*6
21855 55C0           D3E0                       shl	ax,cl
21856 55C2           50                         push	ax
21857                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21858 55C3           8A46         08            mov	al,8[bp]
21859 55C6           30E4                       xor	ah,ah
21860 55C8           B1                     03  mov	cl,*3
21861 55CA           D3E0                       shl	ax,cl
21862                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21863 55CC           0346         F2            add	ax,-$E[bp]
21864 55CF           44                         inc	sp
21865 55D0           44                         inc	sp
21866                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21867 55D1           8946         F8            mov	-8[bp],ax
21868                                           !BCC_EOS
21869                                           ! 2591  src = car * 8;
21870                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21871 55D4           8A46         04            mov	al,4[bp]
21872 55D7           30E4                       xor	ah,ah
21873 55D9           B1                     03  mov	cl,*3
21874 55DB           D3E0                       shl	ax,cl
21875                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21876 55DD           8946         F4            mov	-$C[bp],ax
21877                                           !BCC_EOS
21878                                           ! 2592  for(i=0;i<8;i++)
21879                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21880 55E0           30C0                       xor	al,al
21881 55E2           8846         FF            mov	-1[bp],al
21882                                           !BCC_EOS
21883                                           !BCC_EOS
21884                                           ! 2593   {
21885 55E5           E9         0081            br 	.18D
21886                       000055E8            .18E:
21887                                           ! 2594    dest=addr+i*nbcols*8;
21888                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21889 55E8           8A46         0C            mov	al,$C[bp]
21890 55EB           30E4                       xor	ah,ah
21891 55ED           89C3                       mov	bx,ax
21892 55EF           8A46         FF            mov	al,-1[bp]
21893 55F2           30E4                       xor	ah,ah
21894 55F4           89D9                       mov	cx,bx
21895 55F6           F7E9                       imul	cx
21896                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21897 55F8           B1                     03  mov	cl,*3
21898 55FA           D3E0                       shl	ax,cl
21899                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21900                                           ! Debug: expression subtree swapping
21901 55FC           0346         F8            add	ax,-8[bp]
21902                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21903 55FF           8946         F6            mov	-$A[bp],ax
21904                                           !BCC_EOS
21905                                           ! 2595    mask = 0x80;
21906                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21907 5602           B0                     80  mov	al,#$80
21908 5604           8846         FD            mov	-3[bp],al
21909                                           !BCC_EOS
21910                                           ! 2596    for(j=0;j<8;j++)
21911                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21912 5607           30C0                       xor	al,al
21913 5609           8846         FE            mov	-2[bp],al
21914                                           !BCC_EOS
21915                                           !BCC_EOS
21916                                           ! 2597     {
21917 560C           EB           4D            jmp .191
21918                       0000560E            .192:
21919                                           ! 2598      data = 0x00;
21920                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21921 560E           30C0                       xor	al,al
21922 5610           8846         FC            mov	-4[bp],al
21923                                           !BCC_EOS
21924                                           ! 2599      if (fdata[src+i] & mask)
21925                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21926 5613           8B46         F4            mov	ax,-$C[bp]
21927 5616           0246         FF            add	al,-1[bp]
21928 5619           80D4                   00  adc	ah,*0
21929                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21930 561C           0346         FA            add	ax,-6[bp]
21931 561F           89C3                       mov	bx,ax
21932                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21933 5621           8A07                       mov	al,[bx]
21934 5623           2246         FD            and	al,-3[bp]
21935 5626           84C0                       test	al,al
21936 5628           74           06            je  	.193
21937                       0000562A            .194:
21938                                           ! 2600       {
21939                                           ! 2601        data = attr;
21940                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21941 562A           8A46         06            mov	al,6[bp]
21942 562D           8846         FC            mov	-4[bp],al
21943                                           !BCC_EOS
21944                                           ! 2602       }
21945                                           ! 2603      write_byte(0xa000,dest+j,data);
21946                       00005630            .193:
21947                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21948 5630           8A46         FC            mov	al,-4[bp]
21949 5633           30E4                       xor	ah,ah
21950 5635           50                         push	ax
21951                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21952 5636           8B46         F6            mov	ax,-$A[bp]
21953 5639           0246         FE            add	al,-2[bp]
21954 563C           80D4                   00  adc	ah,*0
21955                                           ! Debug: list unsigned int = ax+0 (used reg = )
21956 563F           50                         push	ax
21957                                           ! Debug: list unsigned int = const $A000 (used reg = )
21958 5640           B8                   A000  mov	ax,#$A000
21959 5643           50                         push	ax
21960                                           ! Debug: func () void = write_byte+0 (used reg = )
21961 5644           E8         29AE            call	_write_byte
21962 5647           83C4                   06  add	sp,*6
21963                                           !BCC_EOS
21964                                           ! 2604      mask >>= 1;
21965                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21966 564A           8A46         FD            mov	al,-3[bp]
21967 564D           30E4                       xor	ah,ah
21968 564F           D1E8                       shr	ax,*1
21969 5651           8846         FD            mov	-3[bp],al
21970                                           !BCC_EOS
21971                                           ! 2605     }
21972                                           ! 2606   }
21973                       00005654            .190:
21974                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21975 5654           8A46         FE            mov	al,-2[bp]
21976 5657           40                         inc	ax
21977 5658           8846         FE            mov	-2[bp],al
21978                       0000565B            .191:
21979                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21980 565B           8A46         FE            mov	al,-2[bp]
21981 565E           3C                     08  cmp	al,*8
21982 5660           72           AC            jb 	.192
21983                       00005662            .195:
21984                       00005662            .18F:
21985                                           ! 2607 }
21986                       00005662            .18C:
21987                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21988 5662           8A46         FF            mov	al,-1[bp]
21989 5665           40                         inc	ax
21990 5666           8846         FF            mov	-1[bp],al
21991                       00005669            .18D:
21992                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21993 5669           8A46         FF            mov	al,-1[bp]
21994 566C           3C                     08  cmp	al,*8
21995 566E         0F82         FF76            blo 	.18E
21996                       00005672            .196:
21997                       00005672            .18B:
21998 5672           89EC                       mov	sp,bp
21999 5674           5D                         pop	bp
22000 5675           C3                         ret
22001                                           ! 2608 static void biosfn_write_char_attr (car,page,attr,count)
22002                                           ! Register BX used in function write_gfx_char_lin
22003                                           ! 2609 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22004                       00005676            _biosfn_write_char_attr:
22005                                           !BCC_EOS
22006                                           !BCC_EOS
22007                                           !BCC_EOS
22008                                           !BCC_EOS
22009                                           ! 2610 {
22010                                           ! 2611  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22011                                           !BCC_EOS
22012                                           ! 2612  Bit16u nbcols,nbrows,address;
22013                                           !BCC_EOS
22014                                           ! 2613  Bit16u cursor,dummy;
22015                                           !BCC_EOS
22016                                           ! 2614  mode=read_byte(0x40,0x49);
22017 5676           55                         push	bp
22018 5677           89E5                       mov	bp,sp
22019 5679           83C4                   F0  add	sp,*-$10
22020                                           ! Debug: list int = const $49 (used reg = )
22021 567C           B8                   0049  mov	ax,*$49
22022 567F           50                         push	ax
22023                                           ! Debug: list int = const $40 (used reg = )
22024 5680           B8                   0040  mov	ax,*$40
22025 5683           50                         push	ax
22026                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22027 5684           E8         2948            call	_read_byte
22028 5687           83C4                   04  add	sp,*4
22029                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22030 568A           8846         FC            mov	-4[bp],al
22031                                           !BCC_EOS
22032                                           ! 2615  line=find_vga_entry(mode);
22033                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22034 568D           8A46         FC            mov	al,-4[bp]
22035 5690           30E4                       xor	ah,ah
22036 5692           50                         push	ax
22037                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22038 5693           E8         284D            call	_find_vga_entry
22039 5696           44                         inc	sp
22040 5697           44                         inc	sp
22041                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22042 5698           8846         FB            mov	-5[bp],al
22043                                           !BCC_EOS
22044                                           ! 2616  if(line==0xFF)return;
22045                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22046 569B           8A46         FB            mov	al,-5[bp]
22047 569E           3C                     FF  cmp	al,#$FF
22048 56A0           75           04            jne 	.197
22049                       000056A2            .198:
22050 56A2           89EC                       mov	sp,bp
22051 56A4           5D                         pop	bp
22052 56A5           C3                         ret
22053                                           !BCC_EOS
22054                                           ! 2617  biosfn_get_cursor_pos(page,&dummy,&cursor);
22055                       000056A6            .197:
22056                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22057 56A6           8D5E         F2            lea	bx,-$E[bp]
22058 56A9           53                         push	bx
22059                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22060 56AA           8D5E         F0            lea	bx,-$10[bp]
22061 56AD           53                         push	bx
22062                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22063 56AE           8A46         06            mov	al,6[bp]
22064 56B1           30E4                       xor	ah,ah
22065 56B3           50                         push	ax
22066                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22067 56B4           E8         EE47            call	_biosfn_get_cursor_pos
22068 56B7           83C4                   06  add	sp,*6
22069                                           !BCC_EOS
22070                                           ! 2618  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22071                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22072 56BA           8A46         F2            mov	al,-$E[bp]
22073                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22074 56BD           8846         FE            mov	-2[bp],al
22075                                           !BCC_EOS
22076                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22077 56C0           8B46         F2            mov	ax,-$E[bp]
22078 56C3           30C0                       xor	al,al
22079                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22080 56C5           88E0                       mov	al,ah
22081 56C7           30E4                       xor	ah,ah
22082                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22083 56C9           8846         FD            mov	-3[bp],al
22084                                           !BCC_EOS
22085                                           ! 2619  nbrows=read_byte(0x40,0x84)+1;
22086                                           ! Debug: list int = const $84 (used reg = )
22087 56CC           B8                   0084  mov	ax,#$84
22088 56CF           50                         push	ax
22089                                           ! Debug: list int = const $40 (used reg = )
22090 56D0           B8                   0040  mov	ax,*$40
22091 56D3           50                         push	ax
22092                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22093 56D4           E8         28F8            call	_read_byte
22094 56D7           83C4                   04  add	sp,*4
22095                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22096 56DA           30E4                       xor	ah,ah
22097                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22098 56DC           40                         inc	ax
22099 56DD           8946         F6            mov	-$A[bp],ax
22100                                           !BCC_EOS
22101                                           ! 2620  nbcols=read_word(0x40,0x4A);
22102                                           ! Debug: list int = const $4A (used reg = )
22103 56E0           B8                   004A  mov	ax,*$4A
22104 56E3           50                         push	ax
22105                                           ! Debug: list int = const $40 (used reg = )
22106 56E4           B8                   0040  mov	ax,*$40
22107 56E7           50                         push	ax
22108                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22109 56E8           E8         28F7            call	_read_word
22110 56EB           83C4                   04  add	sp,*4
22111                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22112 56EE           8946         F8            mov	-8[bp],ax
22113                                           !BCC_EOS
22114                                           ! 2621  if(vga_modes[line].class==0x00)
22115                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22116 56F1           8A46         FB            mov	al,-5[bp]
22117 56F4           30E4                       xor	ah,ah
22118 56F6           B1                     03  mov	cl,*3
22119 56F8           D3E0                       shl	ax,cl
22120 56FA           89C3                       mov	bx,ax
22121 56FC           81C3                 0233  add	bx,#_vga_modes
22122                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22123 5700           8A47         01            mov	al,1[bx]
22124 5703           84C0                       test	al,al
22125 5705           75           6A            jne 	.199
22126                       00005707            .19A:
22127                                           ! 2622   {
22128                                           ! 2623    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22129                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22130 5707           8A46         FD            mov	al,-3[bp]
22131 570A           30E4                       xor	ah,ah
22132 570C           8B4E         F8            mov	cx,-8[bp]
22133 570F           F7E9                       imul	cx
22134                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22135                                           ! Debug: expression subtree swapping
22136 5711           0246         FE            add	al,-2[bp]
22137 5714           80D4                   00  adc	ah,*0
22138                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22139 5717           D1E0                       shl	ax,*1
22140 5719           50                         push	ax
22141                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22142 571A           8B46         F8            mov	ax,-8[bp]
22143 571D           8B4E         F6            mov	cx,-$A[bp]
22144 5720           F7E9                       imul	cx
22145                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22146 5722           D1E0                       shl	ax,*1
22147                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22148 5724           0C                     FF  or	al,#$FF
22149                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22150                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22151 5726           89C3                       mov	bx,ax
22152 5728           8A46         06            mov	al,6[bp]
22153 572B           30E4                       xor	ah,ah
22154 572D           93                         xchg	ax,bx
22155 572E           40                         inc	ax
22156 572F           89D9                       mov	cx,bx
22157 5731           F7E9                       imul	cx
22158                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22159 5733           0346         EE            add	ax,-$12[bp]
22160 5736           44                         inc	sp
22161 5737           44                         inc	sp
22162                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22163 5738           8946         F4            mov	-$C[bp],ax
22164                                           !BCC_EOS
22165                                           ! 2624    dummy=((Bit16u)attr<<8)+car;
22166                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22167 573B           8A46         08            mov	al,8[bp]
22168 573E           30E4                       xor	ah,ah
22169                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22170 5740           88C4                       mov	ah,al
22171 5742           30C0                       xor	al,al
22172                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22173 5744           0246         04            add	al,4[bp]
22174 5747           80D4                   00  adc	ah,*0
22175                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22176 574A           8946         F0            mov	-$10[bp],ax
22177                                           !BCC_EOS
22178                                           ! 2625    memsetw(vga_modes[line].sstart,address,dummy,count);
22179                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22180 574D           FF76         0A            push	$A[bp]
22181                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22182 5750           FF76         F0            push	-$10[bp]
22183                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22184 5753           FF76         F4            push	-$C[bp]
22185                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$12] struct  = vga_modes+0 (used reg = )
22186 5756           8A46         FB            mov	al,-5[bp]
22187 5759           30E4                       xor	ah,ah
22188 575B           B1                     03  mov	cl,*3
22189 575D           D3E0                       shl	ax,cl
22190 575F           89C3                       mov	bx,ax
22191 5761           81C3                 0233  add	bx,#_vga_modes
22192                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22193 5765           FF77         04            push	4[bx]
22194                                           ! Debug: func () void = memsetw+0 (used reg = )
22195 5768           E8         27DF            call	_memsetw
22196 576B           83C4                   08  add	sp,*8
22197                                           !BCC_EOS
22198                                           ! 2626   }
22199                                           ! 2627  else
22200                                           ! 2628   {
22201 576E           E9         00EC            br 	.19B
22202                       00005771            .199:
22203                                           ! 2629    cheight=read_byte(0x40,0x85);
22204                                           ! Debug: list int = const $85 (used reg = )
22205 5771           B8                   0085  mov	ax,#$85
22206 5774           50                         push	ax
22207                                           ! Debug: list int = const $40 (used reg = )
22208 5775           B8                   0040  mov	ax,*$40
22209 5778           50                         push	ax
22210                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22211 5779           E8         2853            call	_read_byte
22212 577C           83C4                   04  add	sp,*4
22213                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
22214 577F           8846         FF            mov	-1[bp],al
22215                                           !BCC_EOS
22216                                           ! 2630    bpp=vga_modes[line].pixbits;
22217                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22218 5782           8A46         FB            mov	al,-5[bp]
22219 5785           30E4                       xor	ah,ah
22220 5787           B1                     03  mov	cl,*3
22221 5789           D3E0                       shl	ax,cl
22222 578B           89C3                       mov	bx,ax
22223 578D           81C3                 0233  add	bx,#_vga_modes
22224                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22225 5791           8A47         03            mov	al,3[bx]
22226 5794           8846         FA            mov	-6[bp],al
22227                                           !BCC_EOS
22228                                           ! 2631    while((count-->0) && (xcurs<nbcols))
22229                                           ! 2632     {
22230 5797           E9         00AB            br 	.19D
22231                       0000579A            .19E:
22232                                           ! 2633      switch(vga_modes[line].memmodel)
22233                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22234 579A           8A46         FB            mov	al,-5[bp]
22235 579D           30E4                       xor	ah,ah
22236 579F           B1                     03  mov	cl,*3
22237 57A1           D3E0                       shl	ax,cl
22238 57A3           89C3                       mov	bx,ax
22239 57A5           81C3                 0233  add	bx,#_vga_modes
22240 57A9           8A47         02            mov	al,2[bx]
22241                                           ! 2634       {
22242 57AC           EB           7A            jmp .1A1
22243                                           ! 2635        case 0x04:
22244                                           ! 2636        case 
22245                       000057AE            .1A2:
22246                                           ! 2636 0x03:
22247                                           ! 2637          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22248                       000057AE            .1A3:
22249                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22250 57AE           8A46         FF            mov	al,-1[bp]
22251 57B1           30E4                       xor	ah,ah
22252 57B3           50                         push	ax
22253                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22254 57B4           FF76         F8            push	-8[bp]
22255                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22256 57B7           8A46         FD            mov	al,-3[bp]
22257 57BA           30E4                       xor	ah,ah
22258 57BC           50                         push	ax
22259                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22260 57BD           8A46         FE            mov	al,-2[bp]
22261 57C0           30E4                       xor	ah,ah
22262 57C2           50                         push	ax
22263                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22264 57C3           8A46         08            mov	al,8[bp]
22265 57C6           30E4                       xor	ah,ah
22266 57C8           50                         push	ax
22267                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22268 57C9           8A46         04            mov	al,4[bp]
22269 57CC           30E4                       xor	ah,ah
22270 57CE           50                         push	ax
22271                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22272 57CF           E8         FA58            call	_write_gfx_char_pl4
22273 57D2           83C4                   0C  add	sp,*$C
22274                                           !BCC_EOS
22275                                           ! 2638          break;
22276 57D5           EB           67            jmp .19F
22277                                           !BCC_EOS
22278                                           ! 2639        case 0x02:
22279                                           ! 2640          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22280                       000057D7            .1A4:
22281                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22282 57D7           8A46         FA            mov	al,-6[bp]
22283 57DA           30E4                       xor	ah,ah
22284 57DC           50                         push	ax
22285                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22286 57DD           FF76         F8            push	-8[bp]
22287                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22288 57E0           8A46         FD            mov	al,-3[bp]
22289 57E3           30E4                       xor	ah,ah
22290 57E5           50                         push	ax
22291                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22292 57E6           8A46         FE            mov	al,-2[bp]
22293 57E9           30E4                       xor	ah,ah
22294 57EB           50                         push	ax
22295                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22296 57EC           8A46         08            mov	al,8[bp]
22297 57EF           30E4                       xor	ah,ah
22298 57F1           50                         push	ax
22299                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22300 57F2           8A46         04            mov	al,4[bp]
22301 57F5           30E4                       xor	ah,ah
22302 57F7           50                         push	ax
22303                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22304 57F8           E8         FBA3            call	_write_gfx_char_cga
22305 57FB           83C4                   0C  add	sp,*$C
22306                                           !BCC_EOS
22307                                           ! 2641          break;
22308 57FE           EB           3E            jmp .19F
22309                                           !BCC_EOS
22310                                           ! 2642        case 0x05:
22311                                           ! 2643          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22312                       00005800            .1A5:
22313                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22314 5800           FF76         F8            push	-8[bp]
22315                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22316 5803           8A46         FD            mov	al,-3[bp]
22317 5806           30E4                       xor	ah,ah
22318 5808           50                         push	ax
22319                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22320 5809           8A46         FE            mov	al,-2[bp]
22321 580C           30E4                       xor	ah,ah
22322 580E           50                         push	ax
22323                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22324 580F           8A46         08            mov	al,8[bp]
22325 5812           30E4                       xor	ah,ah
22326 5814           50                         push	ax
22327                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22328 5815           8A46         04            mov	al,4[bp]
22329 5818           30E4                       xor	ah,ah
22330 581A           50                         push	ax
22331                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22332 581B           E8         FD84            call	_write_gfx_char_lin
22333 581E           83C4                   0A  add	sp,*$A
22334                                           !BCC_EOS
22335                                           ! 2644          break;
22336 5821           EB           1B            jmp .19F
22337                                           !BCC_EOS
22338                                           ! 2645        default:
22339                                           ! 2646          unimplemented();
22340                       00005823            .1A6:
22341                                           ! Debug: func () void = unimplemented+0 (used reg = )
22342 5823           E8         2838            call	_unimplemented
22343                                           !BCC_EOS
22344                                           ! 2647       }
22345                                           ! 2648      xcurs++;
22346 5826           EB           16            jmp .19F
22347                       00005828            .1A1:
22348 5828           2C                     02  sub	al,*2
22349 582A           74           AB            je 	.1A4
22350 582C           2C                     01  sub	al,*1
22351 582E         0F84         FF7C            beq 	.1A3
22352 5832           2C                     01  sub	al,*1
22353 5834         0F84         FF76            beq 	.1A2
22354 5838           2C                     01  sub	al,*1
22355 583A           74           C4            je 	.1A5
22356 583C           EB           E5            jmp	.1A6
22357                       0000583E            .19F:
22358                       FFFFFFEE            ..FFFA	=	-$12
22359                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22360 583E           8A46         FE            mov	al,-2[bp]
22361 5841           40                         inc	ax
22362 5842           8846         FE            mov	-2[bp],al
22363                                           !BCC_EOS
22364                                           ! 2649     }
22365                                           ! 2650   }
22366                       00005845            .19D:
22367                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22368 5845           8B46         0A            mov	ax,$A[bp]
22369 5848           48                         dec	ax
22370 5849           8946         0A            mov	$A[bp],ax
22371                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22372 584C           3D                   FFFF  cmp	ax,*-1
22373 584F           74           0C            je  	.1A7
22374                       00005851            .1A8:
22375                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22376 5851           8A46         FE            mov	al,-2[bp]
22377 5854           30E4                       xor	ah,ah
22378 5856           3B46         F8            cmp	ax,-8[bp]
22379 5859         0F82         FF3D            blo 	.19E
22380                       0000585D            .1A7:
22381                       0000585D            .19C:
22382                                           ! 2651 }
22383                       0000585D            .19B:
22384 585D           89EC                       mov	sp,bp
22385 585F           5D                         pop	bp
22386 5860           C3                         ret
22387                                           ! 2652 static void biosfn_write_char_only (car,page,attr,count)
22388                                           ! Register BX used in function biosfn_write_char_attr
22389                                           ! 2653 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22390                       00005861            _biosfn_write_char_only:
22391                                           !BCC_EOS
22392                                           !BCC_EOS
22393                                           !BCC_EOS
22394                                           !BCC_EOS
22395                                           ! 2654 {
22396                                           ! 2655  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22397                                           !BCC_EOS
22398                                           ! 2656  Bit16u nbcols,nbrows,address;
22399                                           !BCC_EOS
22400                                           ! 2657  Bit16u cursor,dummy;
22401                                           !BCC_EOS
22402                                           ! 2658  mode=read_byte(0x40,0x49);
22403 5861           55                         push	bp
22404 5862           89E5                       mov	bp,sp
22405 5864           83C4                   F0  add	sp,*-$10
22406                                           ! Debug: list int = const $49 (used reg = )
22407 5867           B8                   0049  mov	ax,*$49
22408 586A           50                         push	ax
22409                                           ! Debug: list int = const $40 (used reg = )
22410 586B           B8                   0040  mov	ax,*$40
22411 586E           50                         push	ax
22412                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22413 586F           E8         275D            call	_read_byte
22414 5872           83C4                   04  add	sp,*4
22415                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22416 5875           8846         FC            mov	-4[bp],al
22417                                           !BCC_EOS
22418                                           ! 2659  line=find_vga_entry(mode);
22419                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22420 5878           8A46         FC            mov	al,-4[bp]
22421 587B           30E4                       xor	ah,ah
22422 587D           50                         push	ax
22423                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22424 587E           E8         2662            call	_find_vga_entry
22425 5881           44                         inc	sp
22426 5882           44                         inc	sp
22427                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22428 5883           8846         FB            mov	-5[bp],al
22429                                           !BCC_EOS
22430                                           ! 2660  if(line==0xFF)return;
22431                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22432 5886           8A46         FB            mov	al,-5[bp]
22433 5889           3C                     FF  cmp	al,#$FF
22434 588B           75           04            jne 	.1A9
22435                       0000588D            .1AA:
22436 588D           89EC                       mov	sp,bp
22437 588F           5D                         pop	bp
22438 5890           C3                         ret
22439                                           !BCC_EOS
22440                                           ! 2661  biosfn_get_cursor_pos(page,&dummy,&cursor);
22441                       00005891            .1A9:
22442                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22443 5891           8D5E         F2            lea	bx,-$E[bp]
22444 5894           53                         push	bx
22445                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22446 5895           8D5E         F0            lea	bx,-$10[bp]
22447 5898           53                         push	bx
22448                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22449 5899           8A46         06            mov	al,6[bp]
22450 589C           30E4                       xor	ah,ah
22451 589E           50                         push	ax
22452                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22453 589F           E8         EC5C            call	_biosfn_get_cursor_pos
22454 58A2           83C4                   06  add	sp,*6
22455                                           !BCC_EOS
22456                                           ! 2662  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22457                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22458 58A5           8A46         F2            mov	al,-$E[bp]
22459                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22460 58A8           8846         FE            mov	-2[bp],al
22461                                           !BCC_EOS
22462                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22463 58AB           8B46         F2            mov	ax,-$E[bp]
22464 58AE           30C0                       xor	al,al
22465                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22466 58B0           88E0                       mov	al,ah
22467 58B2           30E4                       xor	ah,ah
22468                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22469 58B4           8846         FD            mov	-3[bp],al
22470                                           !BCC_EOS
22471                                           ! 2663  nbrows=read_byte(0x40,0x84)+1;
22472                                           ! Debug: list int = const $84 (used reg = )
22473 58B7           B8                   0084  mov	ax,#$84
22474 58BA           50                         push	ax
22475                                           ! Debug: list int = const $40 (used reg = )
22476 58BB           B8                   0040  mov	ax,*$40
22477 58BE           50                         push	ax
22478                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22479 58BF           E8         270D            call	_read_byte
22480 58C2           83C4                   04  add	sp,*4
22481                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22482 58C5           30E4                       xor	ah,ah
22483                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22484 58C7           40                         inc	ax
22485 58C8           8946         F6            mov	-$A[bp],ax
22486                                           !BCC_EOS
22487                                           ! 2664  nbcols=read_word(0x40,0x4A);
22488                                           ! Debug: list int = const $4A (used reg = )
22489 58CB           B8                   004A  mov	ax,*$4A
22490 58CE           50                         push	ax
22491                                           ! Debug: list int = const $40 (used reg = )
22492 58CF           B8                   0040  mov	ax,*$40
22493 58D2           50                         push	ax
22494                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22495 58D3           E8         270C            call	_read_word
22496 58D6           83C4                   04  add	sp,*4
22497                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22498 58D9           8946         F8            mov	-8[bp],ax
22499                                           !BCC_EOS
22500                                           ! 2665  if(vga_modes[line].class==0x00)
22501                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22502 58DC           8A46         FB            mov	al,-5[bp]
22503 58DF           30E4                       xor	ah,ah
22504 58E1           B1                     03  mov	cl,*3
22505 58E3           D3E0                       shl	ax,cl
22506 58E5           89C3                       mov	bx,ax
22507 58E7           81C3                 0233  add	bx,#_vga_modes
22508                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22509 58EB           8A47         01            mov	al,1[bx]
22510 58EE           84C0                       test	al,al
22511 58F0           75           6E            jne 	.1AB
22512                       000058F2            .1AC:
22513                                           ! 2666   {
22514                                           ! 2667    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22515                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22516 58F2           8A46         FD            mov	al,-3[bp]
22517 58F5           30E4                       xor	ah,ah
22518 58F7           8B4E         F8            mov	cx,-8[bp]
22519 58FA           F7E9                       imul	cx
22520                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22521                                           ! Debug: expression subtree swapping
22522 58FC           0246         FE            add	al,-2[bp]
22523 58FF           80D4                   00  adc	ah,*0
22524                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22525 5902           D1E0                       shl	ax,*1
22526 5904           50                         push	ax
22527                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22528 5905           8B46         F8            mov	ax,-8[bp]
22529 5908           8B4E         F6            mov	cx,-$A[bp]
22530 590B           F7E9                       imul	cx
22531                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22532 590D           D1E0                       shl	ax,*1
22533                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22534 590F           0C                     FF  or	al,#$FF
22535                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22536                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22537 5911           89C3                       mov	bx,ax
22538 5913           8A46         06            mov	al,6[bp]
22539 5916           30E4                       xor	ah,ah
22540 5918           93                         xchg	ax,bx
22541 5919           40                         inc	ax
22542 591A           89D9                       mov	cx,bx
22543 591C           F7E9                       imul	cx
22544                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22545 591E           0346         EE            add	ax,-$12[bp]
22546 5921           44                         inc	sp
22547 5922           44                         inc	sp
22548                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22549 5923           8946         F4            mov	-$C[bp],ax
22550                                           !BCC_EOS
22551                                           ! 2668    while(count-->0)
22552                                           ! 2669     {write_byte(vga_modes[line].sstart,address,car);
22553 5926           EB           29            jmp .1AE
22554                       00005928            .1AF:
22555                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22556 5928           8A46         04            mov	al,4[bp]
22557 592B           30E4                       xor	ah,ah
22558 592D           50                         push	ax
22559                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22560 592E           FF76         F4            push	-$C[bp]
22561                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
22562 5931           8A46         FB            mov	al,-5[bp]
22563 5934           30E4                       xor	ah,ah
22564 5936           B1                     03  mov	cl,*3
22565 5938           D3E0                       shl	ax,cl
22566 593A           89C3                       mov	bx,ax
22567 593C           81C3                 0233  add	bx,#_vga_modes
22568                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22569 5940           FF77         04            push	4[bx]
22570                                           ! Debug: func () void = write_byte+0 (used reg = )
22571 5943           E8         26AF            call	_write_byte
22572 5946           83C4                   06  add	sp,*6
22573                                           !BCC_EOS
22574                                           ! 2670      address+=2;
22575                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22576 5949           8B46         F4            mov	ax,-$C[bp]
22577 594C           40                         inc	ax
22578 594D           40                         inc	ax
22579 594E           8946         F4            mov	-$C[bp],ax
22580                                           !BCC_EOS
22581                                           ! 2671     }
22582                                           ! 2672   }
22583                       00005951            .1AE:
22584                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22585 5951           8B46         0A            mov	ax,$A[bp]
22586 5954           48                         dec	ax
22587 5955           8946         0A            mov	$A[bp],ax
22588                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22589 5958           3D                   FFFF  cmp	ax,*-1
22590 595B           75           CB            jne	.1AF
22591                       0000595D            .1B0:
22592                       0000595D            .1AD:
22593                                           ! 2673  else
22594                                           ! 2674   {
22595 595D           E9         00ED            br 	.1B1
22596                       00005960            .1AB:
22597                                           ! 2675    cheight=read_byte(0x40,0x85);
22598                                           ! Debug: list int = const $85 (used reg = )
22599 5960           B8                   0085  mov	ax,#$85
22600 5963           50                         push	ax
22601                                           ! Debug: list int = const $40 (used reg = )
22602 5964           B8                   0040  mov	ax,*$40
22603 5967           50                         push	ax
22604                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22605 5968           E8         2664            call	_read_byte
22606 596B           83C4                   04  add	sp,*4
22607                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
22608 596E           8846         FF            mov	-1[bp],al
22609                                           !BCC_EOS
22610                                           ! 2676    bpp=vga_modes[line].pixbits;
22611                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22612 5971           8A46         FB            mov	al,-5[bp]
22613 5974           30E4                       xor	ah,ah
22614 5976           B1                     03  mov	cl,*3
22615 5978           D3E0                       shl	ax,cl
22616 597A           89C3                       mov	bx,ax
22617 597C           81C3                 0233  add	bx,#_vga_modes
22618                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22619 5980           8A47         03            mov	al,3[bx]
22620 5983           8846         FA            mov	-6[bp],al
22621                                           !BCC_EOS
22622                                           ! 2677    while((count-->0) && (xcurs<nbcols))
22623                                           ! 2678     {
22624 5986           E9         00AC            br 	.1B3
22625                       00005989            .1B4:
22626                                           ! 2679      switch(vga_modes[line].memmodel)
22627                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22628 5989           8A46         FB            mov	al,-5[bp]
22629 598C           30E4                       xor	ah,ah
22630 598E           B1                     03  mov	cl,*3
22631 5990           D3E0                       shl	ax,cl
22632 5992           89C3                       mov	bx,ax
22633 5994           81C3                 0233  add	bx,#_vga_modes
22634 5998           8A47         02            mov	al,2[bx]
22635                                           ! 2680       {
22636 599B           E9         007A            br 	.1B7
22637                                           ! 2681        case 0x04:
22638                                           ! 2682        case 0x03:
22639                       0000599E            .1B8:
22640                                           ! 2683          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22641                       0000599E            .1B9:
22642                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22643 599E           8A46         FF            mov	al,-1[bp]
22644 59A1           30E4                       xor	ah,ah
22645 59A3           50                         push	ax
22646                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22647 59A4           FF76         F8            push	-8[bp]
22648                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22649 59A7           8A46         FD            mov	al,-3[bp]
22650 59AA           30E4                       xor	ah,ah
22651 59AC           50                         push	ax
22652                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22653 59AD           8A46         FE            mov	al,-2[bp]
22654 59B0           30E4                       xor	ah,ah
22655 59B2           50                         push	ax
22656                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22657 59B3           8A46         08            mov	al,8[bp]
22658 59B6           30E4                       xor	ah,ah
22659 59B8           50                         push	ax
22660                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22661 59B9           8A46         04            mov	al,4[bp]
22662 59BC           30E4                       xor	ah,ah
22663 59BE           50                         push	ax
22664                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22665 59BF           E8         F868            call	_write_gfx_char_pl4
22666 59C2           83C4                   0C  add	sp,*$C
22667                                           !BCC_EOS
22668                                           ! 2684          break;
22669 59C5           EB           67            jmp .1B5
22670                                           !BCC_EOS
22671                                           ! 2685        case 0x02:
22672                                           ! 2686          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22673                       000059C7            .1BA:
22674                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22675 59C7           8A46         FA            mov	al,-6[bp]
22676 59CA           30E4                       xor	ah,ah
22677 59CC           50                         push	ax
22678                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22679 59CD           FF76         F8            push	-8[bp]
22680                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22681 59D0           8A46         FD            mov	al,-3[bp]
22682 59D3           30E4                       xor	ah,ah
22683 59D5           50                         push	ax
22684                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22685 59D6           8A46         FE            mov	al,-2[bp]
22686 59D9           30E4                       xor	ah,ah
22687 59DB           50                         push	ax
22688                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22689 59DC           8A46         08            mov	al,8[bp]
22690 59DF           30E4                       xor	ah,ah
22691 59E1           50                         push	ax
22692                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22693 59E2           8A46         04            mov	al,4[bp]
22694 59E5           30E4                       xor	ah,ah
22695 59E7           50                         push	ax
22696                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22697 59E8           E8         F9B3            call	_write_gfx_char_cga
22698 59EB           83C4                   0C  add	sp,*$C
22699                                           !BCC_EOS
22700                                           ! 2687          break;
22701 59EE           EB           3E            jmp .1B5
22702                                           !BCC_EOS
22703                                           ! 2688        case 0x05:
22704                                           ! 2689          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22705                       000059F0            .1BB:
22706                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22707 59F0           FF76         F8            push	-8[bp]
22708                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22709 59F3           8A46         FD            mov	al,-3[bp]
22710 59F6           30E4                       xor	ah,ah
22711 59F8           50                         push	ax
22712                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22713 59F9           8A46         FE            mov	al,-2[bp]
22714 59FC           30E4                       xor	ah,ah
22715 59FE           50                         push	ax
22716                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22717 59FF           8A46         08            mov	al,8[bp]
22718 5A02           30E4                       xor	ah,ah
22719 5A04           50                         push	ax
22720                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22721 5A05           8A46         04            mov	al,4[bp]
22722 5A08           30E4                       xor	ah,ah
22723 5A0A           50                         push	ax
22724                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22725 5A0B           E8         FB94            call	_write_gfx_char_lin
22726 5A0E           83C4                   0A  add	sp,*$A
22727                                           !BCC_EOS
22728                                           ! 2690          break;
22729 5A11           EB           1B            jmp .1B5
22730                                           !BCC_EOS
22731                                           ! 2691        default:
22732                                           ! 2692          unimplemented();
22733                       00005A13            .1BC:
22734                                           ! Debug: func () void = unimplemented+0 (used reg = )
22735 5A13           E8         2648            call	_unimplemented
22736                                           !BCC_EOS
22737                                           ! 2693       }
22738                                           ! 2694      xcurs++;
22739 5A16           EB           16            jmp .1B5
22740                       00005A18            .1B7:
22741 5A18           2C                     02  sub	al,*2
22742 5A1A           74           AB            je 	.1BA
22743 5A1C           2C                     01  sub	al,*1
22744 5A1E         0F84         FF7C            beq 	.1B9
22745 5A22           2C                     01  sub	al,*1
22746 5A24         0F84         FF76            beq 	.1B8
22747 5A28           2C                     01  sub	al,*1
22748 5A2A           74           C4            je 	.1BB
22749 5A2C           EB           E5            jmp	.1BC
22750                       00005A2E            .1B5:
22751                       FFFFFFEE            ..FFF9	=	-$12
22752                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22753 5A2E           8A46         FE            mov	al,-2[bp]
22754 5A31           40                         inc	ax
22755 5A32           8846         FE            mov	-2[bp],al
22756                                           !BCC_EOS
22757                                           ! 2695     }
22758                                           ! 2696   }
22759                       00005A35            .1B3:
22760                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22761 5A35           8B46         0A            mov	ax,$A[bp]
22762 5A38           48                         dec	ax
22763 5A39           8946         0A            mov	$A[bp],ax
22764                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22765 5A3C           3D                   FFFF  cmp	ax,*-1
22766 5A3F           74           0C            je  	.1BD
22767                       00005A41            .1BE:
22768                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22769 5A41           8A46         FE            mov	al,-2[bp]
22770 5A44           30E4                       xor	ah,ah
22771 5A46           3B46         F8            cmp	ax,-8[bp]
22772 5A49         0F82         FF3C            blo 	.1B4
22773                       00005A4D            .1BD:
22774                       00005A4D            .1B2:
22775                                           ! 2697 }
22776                       00005A4D            .1B1:
22777 5A4D           89EC                       mov	sp,bp
22778 5A4F           5D                         pop	bp
22779 5A50           C3                         ret
22780                                           ! 2698 #asm
22781                                           !BCC_ASM
22782                       00000008            _biosfn_write_char_only.count	set	8
22783                       00000006            _biosfn_write_char_only.attr	set	6
22784                       00000004            _biosfn_write_char_only.page	set	4
22785                       00000002            _biosfn_write_char_only.car	set	2
22786                       00005A51            biosfn_group_0B:
22787 5A51           80FF                   00    cmp bh, #0x00
22788 5A54           74           09              je biosfn_set_border_color
22789 5A56           80FF                   01    cmp bh, #0x01
22790 5A59           74           43              je biosfn_set_palette
22791 5A5B           E8         260E              call _unknown
22792 5A5E           C3                           ret
22793                       00005A5F            biosfn_set_border_color:
22794 5A5F           50                           push ax
22795 5A60           53                           push bx
22796 5A61           51                           push cx
22797 5A62           52                           push dx
22798 5A63           BA                   03DA    mov dx, # 0x3da
22799 5A66           EC                           in al, dx
22800 5A67           BA                   03C0    mov dx, # 0x3c0
22801 5A6A           B0                     00    mov al, #0x00
22802 5A6C           EE                           out dx, al
22803 5A6D           88D8                         mov al, bl
22804 5A6F           24                     0F    and al, #0x0f
22805 5A71           A8                     08    test al, #0x08
22806 5A73           74           02              jz set_low_border
22807 5A75           04                     08    add al, #0x08
22808                       00005A77            set_low_border:
22809 5A77           EE                           out dx, al
22810 5A78           B1                     01    mov cl, #0x01
22811 5A7A           80E3                   10    and bl, #0x10
22812                       00005A7D            set_intensity_loop:
22813 5A7D           BA                   03C0    mov dx, # 0x3c0
22814 5A80           88C8                         mov al, cl
22815 5A82           EE                           out dx, al
22816 5A83           BA                   03C1    mov dx, # 0x3c1
22817 5A86           EC                           in al, dx
22818 5A87           24                     EF    and al, #0xef
22819 5A89           08D8                         or al, bl
22820 5A8B           BA                   03C0    mov dx, # 0x3c0
22821 5A8E           EE                           out dx, al
22822 5A8F           FEC1                         inc cl
22823 5A91           80F9                   04    cmp cl, #0x04
22824 5A94           75           E7              jne set_intensity_loop
22825 5A96           B0                     20    mov al, #0x20
22826 5A98           EE                           out dx, al
22827 5A99           5A                           pop dx
22828 5A9A           59                           pop cx
22829 5A9B           5B                           pop bx
22830 5A9C           58                           pop ax
22831 5A9D           C3                           ret
22832                       00005A9E            biosfn_set_palette:
22833 5A9E           50                           push ax
22834 5A9F           53                           push bx
22835 5AA0           51                           push cx
22836 5AA1           52                           push dx
22837 5AA2           BA                   03DA    mov dx, # 0x3da
22838 5AA5           EC                           in al, dx
22839 5AA6           B1                     01    mov cl, #0x01
22840 5AA8           80E3                   01    and bl, #0x01
22841                       00005AAB            set_cga_palette_loop:
22842 5AAB           BA                   03C0    mov dx, # 0x3c0
22843 5AAE           88C8                         mov al, cl
22844 5AB0           EE                           out dx, al
22845 5AB1           BA                   03C1    mov dx, # 0x3c1
22846 5AB4           EC                           in al, dx
22847 5AB5           24                     FE    and al, #0xfe
22848 5AB7           08D8                         or al, bl
22849 5AB9           BA                   03C0    mov dx, # 0x3c0
22850 5ABC           EE                           out dx, al
22851 5ABD           FEC1                         inc cl
22852 5ABF           80F9                   04    cmp cl, #0x04
22853 5AC2           75           E7              jne set_cga_palette_loop
22854 5AC4           B0                     20    mov al, #0x20
22855 5AC6           EE                           out dx, al
22856 5AC7           5A                           pop dx
22857 5AC8           59                           pop cx
22858 5AC9           5B                           pop bx
22859 5ACA           58                           pop ax
22860 5ACB           C3                           ret
22861                                           ! 2774 endasm
22862                                           !BCC_ENDASM
22863                                           ! 2775 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22864                                           ! Register BX used in function biosfn_write_char_only
22865                       00005ACC            _biosfn_write_pixel:
22866                                           !BCC_EOS
22867                                           !BCC_EOS
22868                                           !BCC_EOS
22869                                           !BCC_EOS
22870                                           ! 2776 {
22871                                           ! 2777  Bit8u mode,line,mask,attr,data;
22872                                           !BCC_EOS
22873                                           ! 2778  Bit16u addr;
22874                                           !BCC_EOS
22875                                           ! 2779  mode=read_byte(0x40,0x49);
22876 5ACC           55                         push	bp
22877 5ACD           89E5                       mov	bp,sp
22878 5ACF           83C4                   F8  add	sp,*-8
22879                                           ! Debug: list int = const $49 (used reg = )
22880 5AD2           B8                   0049  mov	ax,*$49
22881 5AD5           50                         push	ax
22882                                           ! Debug: list int = const $40 (used reg = )
22883 5AD6           B8                   0040  mov	ax,*$40
22884 5AD9           50                         push	ax
22885                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22886 5ADA           E8         24F2            call	_read_byte
22887 5ADD           83C4                   04  add	sp,*4
22888                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22889 5AE0           8846         FF            mov	-1[bp],al
22890                                           !BCC_EOS
22891                                           ! 2780  line=find_vga_entry(mode);
22892                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22893 5AE3           8A46         FF            mov	al,-1[bp]
22894 5AE6           30E4                       xor	ah,ah
22895 5AE8           50                         push	ax
22896                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22897 5AE9           E8         23F7            call	_find_vga_entry
22898 5AEC           44                         inc	sp
22899 5AED           44                         inc	sp
22900                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22901 5AEE           8846         FE            mov	-2[bp],al
22902                                           !BCC_EOS
22903                                           ! 2781  if(line==0xFF)return;
22904                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22905 5AF1           8A46         FE            mov	al,-2[bp]
22906 5AF4           3C                     FF  cmp	al,#$FF
22907 5AF6           75           04            jne 	.1BF
22908                       00005AF8            .1C0:
22909 5AF8           89EC                       mov	sp,bp
22910 5AFA           5D                         pop	bp
22911 5AFB           C3                         ret
22912                                           !BCC_EOS
22913                                           ! 2782  if(vga_modes[line].class==0x00)return;
22914                       00005AFC            .1BF:
22915                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22916 5AFC           8A46         FE            mov	al,-2[bp]
22917 5AFF           30E4                       xor	ah,ah
22918 5B01           B1                     03  mov	cl,*3
22919 5B03           D3E0                       shl	ax,cl
22920 5B05           89C3                       mov	bx,ax
22921 5B07           81C3                 0233  add	bx,#_vga_modes
22922                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22923 5B0B           8A47         01            mov	al,1[bx]
22924 5B0E           84C0                       test	al,al
22925 5B10           75           04            jne 	.1C1
22926                       00005B12            .1C2:
22927 5B12           89EC                       mov	sp,bp
22928 5B14           5D                         pop	bp
22929 5B15           C3                         ret
22930                                           !BCC_EOS
22931                                           ! 2783  switch(vga_modes[line].memmodel)
22932                       00005B16            .1C1:
22933                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22934 5B16           8A46         FE            mov	al,-2[bp]
22935 5B19           30E4                       xor	ah,ah
22936 5B1B           B1                     03  mov	cl,*3
22937 5B1D           D3E0                       shl	ax,cl
22938 5B1F           89C3                       mov	bx,ax
22939 5B21           81C3                 0233  add	bx,#_vga_modes
22940 5B25           8A47         02            mov	al,2[bx]
22941                                           ! 2784   {
22942 5B28           E9         0226            br 	.1C5
22943                                           ! 2785    case 0x04:
22944                                           ! 2786    case 0x03:
22945                       00005B2B            .1C6:
22946                                           ! 2787      addr = CX/8+DX*read_word(0x40,0x4A);
22947                       00005B2B            .1C7:
22948                                           ! Debug: list int = const $4A (used reg = )
22949 5B2B           B8                   004A  mov	ax,*$4A
22950 5B2E           50                         push	ax
22951                                           ! Debug: list int = const $40 (used reg = )
22952 5B2F           B8                   0040  mov	ax,*$40
22953 5B32           50                         push	ax
22954                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22955 5B33           E8         24AC            call	_read_word
22956 5B36           83C4                   04  add	sp,*4
22957                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22958                                           ! Debug: expression subtree swapping
22959 5B39           8B4E         0A            mov	cx,$A[bp]
22960 5B3C           F7E9                       imul	cx
22961 5B3E           50                         push	ax
22962                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22963 5B3F           8B46         08            mov	ax,8[bp]
22964 5B42           B1                     03  mov	cl,*3
22965 5B44           D3E8                       shr	ax,cl
22966                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22967 5B46           0346         F6            add	ax,0+..FFF8[bp]
22968 5B49           44                         inc	sp
22969 5B4A           44                         inc	sp
22970                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22971 5B4B           8946         F8            mov	-8[bp],ax
22972                                           !BCC_EOS
22973                                           ! 2788      mask = 0x80 >> (CX & 0x07);
22974                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22975 5B4E           8A46         08            mov	al,8[bp]
22976 5B51           24                     07  and	al,*7
22977                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22978 5B53           30E4                       xor	ah,ah
22979 5B55           89C3                       mov	bx,ax
22980 5B57           B8                   0080  mov	ax,#$80
22981 5B5A           89D9                       mov	cx,bx
22982 5B5C           D3F8                       sar	ax,cl
22983                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22984 5B5E           8846         FD            mov	-3[bp],al
22985                                           !BCC_EOS
22986                                           ! 2789      outw(0x3ce, (mask << 8) | 0x08);
22987                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22988 5B61           8A46         FD            mov	al,-3[bp]
22989 5B64           30E4                       xor	ah,ah
22990 5B66           88C4                       mov	ah,al
22991 5B68           30C0                       xor	al,al
22992                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22993 5B6A           0C                     08  or	al,*8
22994                                           ! Debug: list unsigned int = ax+0 (used reg = )
22995 5B6C           50                         push	ax
22996                                           ! Debug: list int = const $3CE (used reg = )
22997 5B6D           B8                   03CE  mov	ax,#$3CE
22998 5B70           50                         push	ax
22999                                           ! Debug: func () void = outw+0 (used reg = )
23000 5B71           E8         24D7            call	_outw
23001 5B74           83C4                   04  add	sp,*4
23002                                           !BCC_EOS
23003                                           ! 2790      outw(0x3ce, 0x0205);
23004                                           ! Debug: list int = const $205 (used reg = )
23005 5B77           B8                   0205  mov	ax,#$205
23006 5B7A           50                         push	ax
23007                                           ! Debug: list int = const $3CE (used reg = )
23008 5B7B           B8                   03CE  mov	ax,#$3CE
23009 5B7E           50                         push	ax
23010                                           ! Debug: func () void = outw+0 (used reg = )
23011 5B7F           E8         24C9            call	_outw
23012 5B82           83C4                   04  add	sp,*4
23013                                           !BCC_EOS
23014                                           ! 2791      data = read_byte(0xa000,addr);
23015                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23016 5B85           FF76         F8            push	-8[bp]
23017                                           ! Debug: list unsigned int = const $A000 (used reg = )
23018 5B88           B8                   A000  mov	ax,#$A000
23019 5B8B           50                         push	ax
23020                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23021 5B8C           E8         2440            call	_read_byte
23022 5B8F           83C4                   04  add	sp,*4
23023                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23024 5B92           8846         FB            mov	-5[bp],al
23025                                           !BCC_EOS
23026                                           ! 2792      if (AL & 0x80)
23027                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23028 5B95           8A46         06            mov	al,6[bp]
23029 5B98           24                     80  and	al,#$80
23030 5B9A           84C0                       test	al,al
23031 5B9C           74           0E            je  	.1C8
23032                       00005B9E            .1C9:
23033                                           ! 2793       {
23034                                           ! 2794        outw(0x3ce, 0x1803);
23035                                           ! Debug: list int = const $1803 (used reg = )
23036 5B9E           B8                   1803  mov	ax,#$1803
23037 5BA1           50                         push	ax
23038                                           ! Debug: list int = const $3CE (used reg = )
23039 5BA2           B8                   03CE  mov	ax,#$3CE
23040 5BA5           50                         push	ax
23041                                           ! Debug: func () void = outw+0 (used reg = )
23042 5BA6           E8         24A2            call	_outw
23043 5BA9           83C4                   04  add	sp,*4
23044                                           !BCC_EOS
23045                                           ! 2795       }
23046                                           ! 2796      write_byte(0xa000,addr,AL);
23047                       00005BAC            .1C8:
23048                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23049 5BAC           8A46         06            mov	al,6[bp]
23050 5BAF           30E4                       xor	ah,ah
23051 5BB1           50                         push	ax
23052                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23053 5BB2           FF76         F8            push	-8[bp]
23054                                           ! Debug: list unsigned int = const $A000 (used reg = )
23055 5BB5           B8                   A000  mov	ax,#$A000
23056 5BB8           50                         push	ax
23057                                           ! Debug: func () void = write_byte+0 (used reg = )
23058 5BB9           E8         2439            call	_write_byte
23059 5BBC           83C4                   06  add	sp,*6
23060                                           !BCC_EOS
23061                                           ! 2797 #asm
23062                                           !BCC_EOS
23063                                           !BCC_ASM
23064                       0000000C            _biosfn_write_pixel.BH	set	$C
23065                       00000004            .biosfn_write_pixel.BH	set	4
23066                       00000010            _biosfn_write_pixel.CX	set	$10
23067                       00000008            .biosfn_write_pixel.CX	set	8
23068                       00000006            _biosfn_write_pixel.line	set	6
23069                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
23070                       0000000E            _biosfn_write_pixel.AL	set	$E
23071                       00000006            .biosfn_write_pixel.AL	set	6
23072                       00000003            _biosfn_write_pixel.data	set	3
23073                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
23074                       00000012            _biosfn_write_pixel.DX	set	$12
23075                       0000000A            .biosfn_write_pixel.DX	set	$A
23076                       00000005            _biosfn_write_pixel.mask	set	5
23077                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
23078                       00000004            _biosfn_write_pixel.attr	set	4
23079                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
23080                       00000007            _biosfn_write_pixel.mode	set	7
23081                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
23082                       00000000            _biosfn_write_pixel.addr	set	0
23083                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
23084 5BBF           BA                   03CE       mov dx, # 0x3ce
23085 5BC2           B8                   FF08       mov ax, #0xff08
23086 5BC5           EF                              out dx, ax
23087 5BC6           B8                   0005       mov ax, #0x0005
23088 5BC9           EF                              out dx, ax
23089 5BCA           B8                   0003       mov ax, #0x0003
23090 5BCD           EF                              out dx, ax
23091                                           ! 2805 endasm
23092                                           !BCC_ENDASM
23093                                           !BCC_EOS
23094                                           ! 2806      break;
23095 5BCE           E9         0198            br 	.1C3
23096                                           !BCC_EOS
23097                                           ! 2807    case 0x02:
23098                                           ! 2808      if(vga_modes[line].pixbits==2)
23099                       00005BD1            .1CA:
23100                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
23101 5BD1           8A46         FE            mov	al,-2[bp]
23102 5BD4           30E4                       xor	ah,ah
23103 5BD6           B1                     03  mov	cl,*3
23104 5BD8           D3E0                       shl	ax,cl
23105 5BDA           89C3                       mov	bx,ax
23106 5BDC           81C3                 0233  add	bx,#_vga_modes
23107                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23108 5BE0           8A47         03            mov	al,3[bx]
23109 5BE3           3C                     02  cmp	al,*2
23110 5BE5           75           1C            jne 	.1CB
23111                       00005BE7            .1CC:
23112                                           ! 2809       {
23113                                           ! 2810        addr=(CX>>2)+(DX>>1)*80;
23114                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23115 5BE7           8B46         0A            mov	ax,$A[bp]
23116 5BEA           D1E8                       shr	ax,*1
23117                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23118 5BEC           B9                   0050  mov	cx,*$50
23119 5BEF           F7E9                       imul	cx
23120 5BF1           50                         push	ax
23121                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
23122 5BF2           8B46         08            mov	ax,8[bp]
23123 5BF5           D1E8                       shr	ax,*1
23124 5BF7           D1E8                       shr	ax,*1
23125                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23126 5BF9           0346         F6            add	ax,0+..FFF8[bp]
23127 5BFC           44                         inc	sp
23128 5BFD           44                         inc	sp
23129                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23130 5BFE           8946         F8            mov	-8[bp],ax
23131                                           !BCC_EOS
23132                                           ! 2811       }
23133                                           ! 2812      else
23134                                           ! 2813       {
23135 5C01           EB           1A            jmp .1CD
23136                       00005C03            .1CB:
23137                                           ! 2814        addr=(CX>>3)+(DX>>1)*80;
23138                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23139 5C03           8B46         0A            mov	ax,$A[bp]
23140 5C06           D1E8                       shr	ax,*1
23141                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23142 5C08           B9                   0050  mov	cx,*$50
23143 5C0B           F7E9                       imul	cx
23144 5C0D           50                         push	ax
23145                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
23146 5C0E           8B46         08            mov	ax,8[bp]
23147 5C11           B1                     03  mov	cl,*3
23148 5C13           D3E8                       shr	ax,cl
23149                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23150 5C15           0346         F6            add	ax,0+..FFF8[bp]
23151 5C18           44                         inc	sp
23152 5C19           44                         inc	sp
23153                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23154 5C1A           8946         F8            mov	-8[bp],ax
23155                                           !BCC_EOS
23156                                           ! 2815       }
23157                                           ! 2816      if (DX & 1) addr += 0x2000;
23158                       00005C1D            .1CD:
23159                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23160 5C1D           8A46         0A            mov	al,$A[bp]
23161 5C20           24                     01  and	al,*1
23162 5C22           84C0                       test	al,al
23163 5C24           74           09            je  	.1CE
23164                       00005C26            .1CF:
23165                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
23166 5C26           8B46         F8            mov	ax,-8[bp]
23167 5C29           05                   2000  add	ax,#$2000
23168 5C2C           8946         F8            mov	-8[bp],ax
23169                                           !BCC_EOS
23170                                           ! 2817      data = read_byte(0xb800,addr);
23171                       00005C2F            .1CE:
23172                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23173 5C2F           FF76         F8            push	-8[bp]
23174                                           ! Debug: list unsigned int = const $B800 (used reg = )
23175 5C32           B8                   B800  mov	ax,#$B800
23176 5C35           50                         push	ax
23177                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23178 5C36           E8         2396            call	_read_byte
23179 5C39           83C4                   04  add	sp,*4
23180                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23181 5C3C           8846         FB            mov	-5[bp],al
23182                                           !BCC_EOS
23183                                           ! 2818      if(vga_modes[line].pixbits==2)
23184                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
23185 5C3F           8A46         FE            mov	al,-2[bp]
23186 5C42           30E4                       xor	ah,ah
23187 5C44           B1                     03  mov	cl,*3
23188 5C46           D3E0                       shl	ax,cl
23189 5C48           89C3                       mov	bx,ax
23190 5C4A           81C3                 0233  add	bx,#_vga_modes
23191                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23192 5C4E           8A47         03            mov	al,3[bx]
23193 5C51           3C                     02  cmp	al,*2
23194 5C53           75           46            jne 	.1D0
23195                       00005C55            .1D1:
23196                                           ! 2819       {
23197                                           ! 2820        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23198                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23199 5C55           8A46         08            mov	al,8[bp]
23200 5C58           24                     03  and	al,*3
23201                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23202 5C5A           50                         push	ax
23203 5C5B           B8                   0003  mov	ax,*3
23204 5C5E           2A46         F6            sub	al,0+..FFF8[bp]
23205 5C61           80DC                   00  sbb	ah,*0
23206 5C64           44                         inc	sp
23207 5C65           44                         inc	sp
23208                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23209 5C66           D1E0                       shl	ax,*1
23210 5C68           50                         push	ax
23211                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23212 5C69           8A46         06            mov	al,6[bp]
23213 5C6C           24                     03  and	al,*3
23214                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23215 5C6E           30E4                       xor	ah,ah
23216 5C70           8B4E         F6            mov	cx,0+..FFF8[bp]
23217 5C73           D3E0                       shl	ax,cl
23218 5C75           44                         inc	sp
23219 5C76           44                         inc	sp
23220                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23221 5C77           8846         FC            mov	-4[bp],al
23222                                           !BCC_EOS
23223                                           ! 2821        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23224                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23225 5C7A           8A46         08            mov	al,8[bp]
23226 5C7D           24                     03  and	al,*3
23227                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23228 5C7F           50                         push	ax
23229 5C80           B8                   0003  mov	ax,*3
23230 5C83           2A46         F6            sub	al,0+..FFF8[bp]
23231 5C86           80DC                   00  sbb	ah,*0
23232 5C89           44                         inc	sp
23233 5C8A           44                         inc	sp
23234                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23235 5C8B           D1E0                       shl	ax,*1
23236                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23237 5C8D           89C3                       mov	bx,ax
23238 5C8F           B8                   0003  mov	ax,*3
23239 5C92           89D9                       mov	cx,bx
23240 5C94           D3E0                       shl	ax,cl
23241                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23242 5C96           8846         FD            mov	-3[bp],al
23243                                           !BCC_EOS
23244                                           ! 2822       }
23245                                           ! 2823      else
23246                                           ! 2824       {
23247 5C99           EB           40            jmp .1D2
23248                       00005C9B            .1D0:
23249                                           ! 2825        attr = (AL & 0x01) << (7 - (CX & 0x07));
23250                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23251 5C9B           8A46         08            mov	al,8[bp]
23252 5C9E           24                     07  and	al,*7
23253                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23254 5CA0           50                         push	ax
23255 5CA1           B8                   0007  mov	ax,*7
23256 5CA4           2A46         F6            sub	al,0+..FFF8[bp]
23257 5CA7           80DC                   00  sbb	ah,*0
23258 5CAA           44                         inc	sp
23259 5CAB           44                         inc	sp
23260 5CAC           50                         push	ax
23261                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23262 5CAD           8A46         06            mov	al,6[bp]
23263 5CB0           24                     01  and	al,*1
23264                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23265 5CB2           30E4                       xor	ah,ah
23266 5CB4           8B4E         F6            mov	cx,0+..FFF8[bp]
23267 5CB7           D3E0                       shl	ax,cl
23268 5CB9           44                         inc	sp
23269 5CBA           44                         inc	sp
23270                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23271 5CBB           8846         FC            mov	-4[bp],al
23272                                           !BCC_EOS
23273                                           ! 2826        mask = 0x01 << (7 - (CX & 0x07));
23274                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23275 5CBE           8A46         08            mov	al,8[bp]
23276 5CC1           24                     07  and	al,*7
23277                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23278 5CC3           50                         push	ax
23279 5CC4           B8                   0007  mov	ax,*7
23280 5CC7           2A46         F6            sub	al,0+..FFF8[bp]
23281 5CCA           80DC                   00  sbb	ah,*0
23282 5CCD           44                         inc	sp
23283 5CCE           44                         inc	sp
23284                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23285 5CCF           89C3                       mov	bx,ax
23286 5CD1           B8                   0001  mov	ax,*1
23287 5CD4           89D9                       mov	cx,bx
23288 5CD6           D3E0                       shl	ax,cl
23289                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23290 5CD8           8846         FD            mov	-3[bp],al
23291                                           !BCC_EOS
23292                                           ! 2827       }
23293                                           ! 2828      if (AL & 0x80)
23294                       00005CDB            .1D2:
23295                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23296 5CDB           8A46         06            mov	al,6[bp]
23297 5CDE           24                     80  and	al,#$80
23298 5CE0           84C0                       test	al,al
23299 5CE2           74           0B            je  	.1D3
23300                       00005CE4            .1D4:
23301                                           ! 2829       {
23302                                           ! 2830        data ^= attr;
23303                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23304 5CE4           8A46         FB            mov	al,-5[bp]
23305 5CE7           3246         FC            xor	al,-4[bp]
23306 5CEA           8846         FB            mov	-5[bp],al
23307                                           !BCC_EOS
23308                                           ! 2831       }
23309                                           ! 2832      else
23310                                           ! 2833       {
23311 5CED           EB           16            jmp .1D5
23312                       00005CEF            .1D3:
23313                                           ! 2834        data &= ~mask;
23314                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23315 5CEF           8A46         FD            mov	al,-3[bp]
23316 5CF2           30E4                       xor	ah,ah
23317 5CF4           F7D0                       not	ax
23318                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23319 5CF6           2246         FB            and	al,-5[bp]
23320 5CF9           8846         FB            mov	-5[bp],al
23321                                           !BCC_EOS
23322                                           ! 2835        data |= attr;
23323                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23324 5CFC           8A46         FB            mov	al,-5[bp]
23325 5CFF           0A46         FC            or	al,-4[bp]
23326 5D02           8846         FB            mov	-5[bp],al
23327                                           !BCC_EOS
23328                                           ! 2836       }
23329                                           ! 2837      write_byte(0xb800,addr,data);
23330                       00005D05            .1D5:
23331                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23332 5D05           8A46         FB            mov	al,-5[bp]
23333 5D08           30E4                       xor	ah,ah
23334 5D0A           50                         push	ax
23335                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23336 5D0B           FF76         F8            push	-8[bp]
23337                                           ! Debug: list unsigned int = const $B800 (used reg = )
23338 5D0E           B8                   B800  mov	ax,#$B800
23339 5D11           50                         push	ax
23340                                           ! Debug: func () void = write_byte+0 (used reg = )
23341 5D12           E8         22E0            call	_write_byte
23342 5D15           83C4                   06  add	sp,*6
23343                                           !BCC_EOS
23344                                           ! 2838      break;
23345 5D18           EB           4F            jmp .1C3
23346                                           !BCC_EOS
23347                                           ! 2839    case 0x05:
23348                                           ! 2840      addr=CX+DX*(read_word(0x
23349                       00005D1A            .1D6:
23350                                           ! 2840 40,0x4A)*8);
23351                                           ! Debug: list int = const $4A (used reg = )
23352 5D1A           B8                   004A  mov	ax,*$4A
23353 5D1D           50                         push	ax
23354                                           ! Debug: list int = const $40 (used reg = )
23355 5D1E           B8                   0040  mov	ax,*$40
23356 5D21           50                         push	ax
23357                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23358 5D22           E8         22BD            call	_read_word
23359 5D25           83C4                   04  add	sp,*4
23360                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23361 5D28           B1                     03  mov	cl,*3
23362 5D2A           D3E0                       shl	ax,cl
23363                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23364                                           ! Debug: expression subtree swapping
23365 5D2C           8B4E         0A            mov	cx,$A[bp]
23366 5D2F           F7E9                       imul	cx
23367                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23368                                           ! Debug: expression subtree swapping
23369 5D31           0346         08            add	ax,8[bp]
23370                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23371 5D34           8946         F8            mov	-8[bp],ax
23372                                           !BCC_EOS
23373                                           ! 2841      write_byte(0xa000,addr,AL);
23374                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23375 5D37           8A46         06            mov	al,6[bp]
23376 5D3A           30E4                       xor	ah,ah
23377 5D3C           50                         push	ax
23378                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23379 5D3D           FF76         F8            push	-8[bp]
23380                                           ! Debug: list unsigned int = const $A000 (used reg = )
23381 5D40           B8                   A000  mov	ax,#$A000
23382 5D43           50                         push	ax
23383                                           ! Debug: func () void = write_byte+0 (used reg = )
23384 5D44           E8         22AE            call	_write_byte
23385 5D47           83C4                   06  add	sp,*6
23386                                           !BCC_EOS
23387                                           ! 2842      break;
23388 5D4A           EB           1D            jmp .1C3
23389                                           !BCC_EOS
23390                                           ! 2843    default:
23391                                           ! 2844      unimplemented();
23392                       00005D4C            .1D7:
23393                                           ! Debug: func () void = unimplemented+0 (used reg = )
23394 5D4C           E8         230F            call	_unimplemented
23395                                           !BCC_EOS
23396                                           ! 2845   }
23397                                           ! 2846 }
23398 5D4F           EB           18            jmp .1C3
23399                       00005D51            .1C5:
23400 5D51           2C                     02  sub	al,*2
23401 5D53         0F84         FE7A            beq 	.1CA
23402 5D57           2C                     01  sub	al,*1
23403 5D59         0F84         FDCE            beq 	.1C7
23404 5D5D           2C                     01  sub	al,*1
23405 5D5F         0F84         FDC8            beq 	.1C6
23406 5D63           2C                     01  sub	al,*1
23407 5D65           74           B3            je 	.1D6
23408 5D67           EB           E3            jmp	.1D7
23409                       00005D69            .1C3:
23410                       FFFFFFF6            ..FFF8	=	-$A
23411 5D69           89EC                       mov	sp,bp
23412 5D6B           5D                         pop	bp
23413 5D6C           C3                         ret
23414                                           ! 2847 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23415                                           ! Register BX used in function biosfn_write_pixel
23416                       00005D6D            _biosfn_read_pixel:
23417                                           !BCC_EOS
23418                                           !BCC_EOS
23419                                           !BCC_EOS
23420                                           !BCC_EOS
23421                                           ! 2848 {
23422                                           ! 2849  Bit8u mode,line,mask,attr,data,i;
23423                                           !BCC_EOS
23424                                           ! 2850  Bit16u addr;
23425                                           !BCC_EOS
23426                                           ! 2851  Bit16u ss=get_SS();
23427 5D6D           55                         push	bp
23428 5D6E           89E5                       mov	bp,sp
23429 5D70           83C4                   F6  add	sp,*-$A
23430                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23431 5D73           E8         22E5            call	_get_SS
23432                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23433 5D76           8946         F6            mov	-$A[bp],ax
23434                                           !BCC_EOS
23435                                           ! 2852  mode=read_byte(0x40,0x49);
23436                                           ! Debug: list int = const $49 (used reg = )
23437 5D79           B8                   0049  mov	ax,*$49
23438 5D7C           50                         push	ax
23439                                           ! Debug: list int = const $40 (used reg = )
23440 5D7D           B8                   0040  mov	ax,*$40
23441 5D80           50                         push	ax
23442                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23443 5D81           E8         224B            call	_read_byte
23444 5D84           83C4                   04  add	sp,*4
23445                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23446 5D87           8846         FF            mov	-1[bp],al
23447                                           !BCC_EOS
23448                                           ! 2853  line=find_vga_entry(mode);
23449                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23450 5D8A           8A46         FF            mov	al,-1[bp]
23451 5D8D           30E4                       xor	ah,ah
23452 5D8F           50                         push	ax
23453                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23454 5D90           E8         2150            call	_find_vga_entry
23455 5D93           44                         inc	sp
23456 5D94           44                         inc	sp
23457                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23458 5D95           8846         FE            mov	-2[bp],al
23459                                           !BCC_EOS
23460                                           ! 2854  if(line==0xFF)return;
23461                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23462 5D98           8A46         FE            mov	al,-2[bp]
23463 5D9B           3C                     FF  cmp	al,#$FF
23464 5D9D           75           04            jne 	.1D8
23465                       00005D9F            .1D9:
23466 5D9F           89EC                       mov	sp,bp
23467 5DA1           5D                         pop	bp
23468 5DA2           C3                         ret
23469                                           !BCC_EOS
23470                                           ! 2855  if(vga_modes[line].class==0x00)return;
23471                       00005DA3            .1D8:
23472                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
23473 5DA3           8A46         FE            mov	al,-2[bp]
23474 5DA6           30E4                       xor	ah,ah
23475 5DA8           B1                     03  mov	cl,*3
23476 5DAA           D3E0                       shl	ax,cl
23477 5DAC           89C3                       mov	bx,ax
23478 5DAE           81C3                 0233  add	bx,#_vga_modes
23479                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23480 5DB2           8A47         01            mov	al,1[bx]
23481 5DB5           84C0                       test	al,al
23482 5DB7           75           04            jne 	.1DA
23483                       00005DB9            .1DB:
23484 5DB9           89EC                       mov	sp,bp
23485 5DBB           5D                         pop	bp
23486 5DBC           C3                         ret
23487                                           !BCC_EOS
23488                                           ! 2856  switch(vga_modes[line].memmodel)
23489                       00005DBD            .1DA:
23490                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
23491 5DBD           8A46         FE            mov	al,-2[bp]
23492 5DC0           30E4                       xor	ah,ah
23493 5DC2           B1                     03  mov	cl,*3
23494 5DC4           D3E0                       shl	ax,cl
23495 5DC6           89C3                       mov	bx,ax
23496 5DC8           81C3                 0233  add	bx,#_vga_modes
23497 5DCC           8A47         02            mov	al,2[bx]
23498                                           ! 2857   {
23499 5DCF           E9         016A            br 	.1DE
23500                                           ! 2858    case 0x04:
23501                                           ! 2859    case 0x03:
23502                       00005DD2            .1DF:
23503                                           ! 2860      addr = CX/8+DX*read_word(0x40,0x4A);
23504                       00005DD2            .1E0:
23505                                           ! Debug: list int = const $4A (used reg = )
23506 5DD2           B8                   004A  mov	ax,*$4A
23507 5DD5           50                         push	ax
23508                                           ! Debug: list int = const $40 (used reg = )
23509 5DD6           B8                   0040  mov	ax,*$40
23510 5DD9           50                         push	ax
23511                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23512 5DDA           E8         2205            call	_read_word
23513 5DDD           83C4                   04  add	sp,*4
23514                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23515                                           ! Debug: expression subtree swapping
23516 5DE0           8B4E         08            mov	cx,8[bp]
23517 5DE3           F7E9                       imul	cx
23518 5DE5           50                         push	ax
23519                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23520 5DE6           8B46         06            mov	ax,6[bp]
23521 5DE9           B1                     03  mov	cl,*3
23522 5DEB           D3E8                       shr	ax,cl
23523                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23524 5DED           0346         F4            add	ax,0+..FFF7[bp]
23525 5DF0           44                         inc	sp
23526 5DF1           44                         inc	sp
23527                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23528 5DF2           8946         F8            mov	-8[bp],ax
23529                                           !BCC_EOS
23530                                           ! 2861      mask = 0x80 >> (CX & 0x07);
23531                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23532 5DF5           8A46         06            mov	al,6[bp]
23533 5DF8           24                     07  and	al,*7
23534                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23535 5DFA           30E4                       xor	ah,ah
23536 5DFC           89C3                       mov	bx,ax
23537 5DFE           B8                   0080  mov	ax,#$80
23538 5E01           89D9                       mov	cx,bx
23539 5E03           D3F8                       sar	ax,cl
23540                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23541 5E05           8846         FD            mov	-3[bp],al
23542                                           !BCC_EOS
23543                                           ! 2862      attr = 0x00;
23544                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23545 5E08           30C0                       xor	al,al
23546 5E0A           8846         FC            mov	-4[bp],al
23547                                           !BCC_EOS
23548                                           ! 2863      for(i=0;i<4;i++)
23549                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23550 5E0D           30C0                       xor	al,al
23551 5E0F           8846         FA            mov	-6[bp],al
23552                                           !BCC_EOS
23553                                           !BCC_EOS
23554                                           ! 2864       {
23555 5E12           EB           4B            jmp .1E3
23556                       00005E14            .1E4:
23557                                           ! 2865        outw(0x3ce, (i << 8) | 0x04);
23558                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23559 5E14           8A46         FA            mov	al,-6[bp]
23560 5E17           30E4                       xor	ah,ah
23561 5E19           88C4                       mov	ah,al
23562 5E1B           30C0                       xor	al,al
23563                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23564 5E1D           0C                     04  or	al,*4
23565                                           ! Debug: list unsigned int = ax+0 (used reg = )
23566 5E1F           50                         push	ax
23567                                           ! Debug: list int = const $3CE (used reg = )
23568 5E20           B8                   03CE  mov	ax,#$3CE
23569 5E23           50                         push	ax
23570                                           ! Debug: func () void = outw+0 (used reg = )
23571 5E24           E8         2224            call	_outw
23572 5E27           83C4                   04  add	sp,*4
23573                                           !BCC_EOS
23574                                           ! 2866        data = read_byte(0xa000,addr) & mask;
23575                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23576 5E2A           FF76         F8            push	-8[bp]
23577                                           ! Debug: list unsigned int = const $A000 (used reg = )
23578 5E2D           B8                   A000  mov	ax,#$A000
23579 5E30           50                         push	ax
23580                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23581 5E31           E8         219B            call	_read_byte
23582 5E34           83C4                   04  add	sp,*4
23583                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23584 5E37           2246         FD            and	al,-3[bp]
23585                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23586 5E3A           8846         FB            mov	-5[bp],al
23587                                           !BCC_EOS
23588                                           ! 2867        if (data > 0) attr |= (0x01 << i);
23589                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23590 5E3D           8A46         FB            mov	al,-5[bp]
23591 5E40           84C0                       test	al,al
23592 5E42           74           14            je  	.1E5
23593                       00005E44            .1E6:
23594                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23595 5E44           8A46         FA            mov	al,-6[bp]
23596 5E47           30E4                       xor	ah,ah
23597 5E49           89C3                       mov	bx,ax
23598 5E4B           B8                   0001  mov	ax,*1
23599 5E4E           89D9                       mov	cx,bx
23600 5E50           D3E0                       shl	ax,cl
23601                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23602 5E52           0A46         FC            or	al,-4[bp]
23603 5E55           8846         FC            mov	-4[bp],al
23604                                           !BCC_EOS
23605                                           ! 2868       }
23606                       00005E58            .1E5:
23607                                           ! 2869      break;
23608                       00005E58            .1E2:
23609                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23610 5E58           8A46         FA            mov	al,-6[bp]
23611 5E5B           40                         inc	ax
23612 5E5C           8846         FA            mov	-6[bp],al
23613                       00005E5F            .1E3:
23614                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23615 5E5F           8A46         FA            mov	al,-6[bp]
23616 5E62           3C                     04  cmp	al,*4
23617 5E64           72           AE            jb 	.1E4
23618                       00005E66            .1E7:
23619                       00005E66            .1E1:
23620 5E66           E9         00EB            br 	.1DC
23621                                           !BCC_EOS
23622                                           ! 2870    case 0x02:
23623                                           ! 2871      addr=(CX>>2)+(DX>>1)*80;
23624                       00005E69            .1E8:
23625                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23626 5E69           8B46         08            mov	ax,8[bp]
23627 5E6C           D1E8                       shr	ax,*1
23628                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23629 5E6E           B9                   0050  mov	cx,*$50
23630 5E71           F7E9                       imul	cx
23631 5E73           50                         push	ax
23632                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23633 5E74           8B46         06            mov	ax,6[bp]
23634 5E77           D1E8                       shr	ax,*1
23635 5E79           D1E8                       shr	ax,*1
23636                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23637 5E7B           0346         F4            add	ax,0+..FFF7[bp]
23638 5E7E           44                         inc	sp
23639 5E7F           44                         inc	sp
23640                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23641 5E80           8946         F8            mov	-8[bp],ax
23642                                           !BCC_EOS
23643                                           ! 2872      if (DX & 1) addr += 0x2000;
23644                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23645 5E83           8A46         08            mov	al,8[bp]
23646 5E86           24                     01  and	al,*1
23647 5E88           84C0                       test	al,al
23648 5E8A           74           09            je  	.1E9
23649                       00005E8C            .1EA:
23650                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23651 5E8C           8B46         F8            mov	ax,-8[bp]
23652 5E8F           05                   2000  add	ax,#$2000
23653 5E92           8946         F8            mov	-8[bp],ax
23654                                           !BCC_EOS
23655                                           ! 2873      data = read_byte(0xb800,addr);
23656                       00005E95            .1E9:
23657                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23658 5E95           FF76         F8            push	-8[bp]
23659                                           ! Debug: list unsigned int = const $B800 (used reg = )
23660 5E98           B8                   B800  mov	ax,#$B800
23661 5E9B           50                         push	ax
23662                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23663 5E9C           E8         2130            call	_read_byte
23664 5E9F           83C4                   04  add	sp,*4
23665                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23666 5EA2           8846         FB            mov	-5[bp],al
23667                                           !BCC_EOS
23668                                           ! 2874      if(vga_modes[line].pixbits==2)
23669                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
23670 5EA5           8A46         FE            mov	al,-2[bp]
23671 5EA8           30E4                       xor	ah,ah
23672 5EAA           B1                     03  mov	cl,*3
23673 5EAC           D3E0                       shl	ax,cl
23674 5EAE           89C3                       mov	bx,ax
23675 5EB0           81C3                 0233  add	bx,#_vga_modes
23676                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23677 5EB4           8A47         03            mov	al,3[bx]
23678 5EB7           3C                     02  cmp	al,*2
23679 5EB9           75           25            jne 	.1EB
23680                       00005EBB            .1EC:
23681                                           ! 2875       {
23682                                           ! 2876        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23683                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23684 5EBB           8A46         06            mov	al,6[bp]
23685 5EBE           24                     03  and	al,*3
23686                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23687 5EC0           50                         push	ax
23688 5EC1           B8                   0003  mov	ax,*3
23689 5EC4           2A46         F4            sub	al,0+..FFF7[bp]
23690 5EC7           80DC                   00  sbb	ah,*0
23691 5ECA           44                         inc	sp
23692 5ECB           44                         inc	sp
23693                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23694 5ECC           D1E0                       shl	ax,*1
23695                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23696 5ECE           89C3                       mov	bx,ax
23697 5ED0           8A46         FB            mov	al,-5[bp]
23698 5ED3           30E4                       xor	ah,ah
23699 5ED5           89D9                       mov	cx,bx
23700 5ED7           D3E8                       shr	ax,cl
23701                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23702 5ED9           24                     03  and	al,*3
23703                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23704 5EDB           8846         FC            mov	-4[bp],al
23705                                           !BCC_EOS
23706                                           ! 2877       }
23707                                           ! 2878      else
23708                                           ! 2879       {
23709 5EDE           EB           21            jmp .1ED
23710                       00005EE0            .1EB:
23711                                           ! 2880        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23712                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23713 5EE0           8A46         06            mov	al,6[bp]
23714 5EE3           24                     07  and	al,*7
23715                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23716 5EE5           50                         push	ax
23717 5EE6           B8                   0007  mov	ax,*7
23718 5EE9           2A46         F4            sub	al,0+..FFF7[bp]
23719 5EEC           80DC                   00  sbb	ah,*0
23720 5EEF           44                         inc	sp
23721 5EF0           44                         inc	sp
23722                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23723 5EF1           89C3                       mov	bx,ax
23724 5EF3           8A46         FB            mov	al,-5[bp]
23725 5EF6           30E4                       xor	ah,ah
23726 5EF8           89D9                       mov	cx,bx
23727 5EFA           D3E8                       shr	ax,cl
23728                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23729 5EFC           24                     01  and	al,*1
23730                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23731 5EFE           8846         FC            mov	-4[bp],al
23732                                           !BCC_EOS
23733                                           ! 2881       }
23734                                           ! 2882      break;
23735                       00005F01            .1ED:
23736 5F01           EB           51            jmp .1DC
23737                                           !BCC_EOS
23738                                           ! 2883    case 0x05:
23739                                           ! 2884      addr=CX+DX*(read_word(0x40,0x4A)*8);
23740                       00005F03            .1EE:
23741                                           ! Debug: list int = const $4A (used reg = )
23742 5F03           B8                   004A  mov	ax,*$4A
23743 5F06           50                         push	ax
23744                                           ! Debug: list int = const $40 (used reg = )
23745 5F07           B8                   0040  mov	ax,*$40
23746 5F0A           50                         push	ax
23747                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23748 5F0B           E8         20D4            call	_read_word
23749 5F0E           83C4                   04  add	sp,*4
23750                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23751 5F11           B1                     03  mov	cl,*3
23752 5F13           D3E0                       shl	ax,cl
23753                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23754                                           ! Debug: expression subtree swapping
23755 5F15           8B4E         08            mov	cx,8[bp]
23756 5F18           F7E9                       imul	cx
23757                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23758                                           ! Debug: expression subtree swapping
23759 5F1A           0346         06            add	ax,6[bp]
23760                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23761 5F1D           8946         F8            mov	-8[bp],ax
23762                                           !BCC_EOS
23763                                           ! 2885      attr=read_byte(0xa000,addr);
23764                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23765 5F20           FF76         F8            push	-8[bp]
23766                                           ! Debug: list unsigned int = const $A000 (used reg = )
23767 5F23           B8                   A000  mov	ax,#$A000
23768 5F26           50                         push	ax
23769                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23770 5F27           E8         20A5            call	_read_byte
23771 5F2A           83C4                   04  add	sp,*4
23772                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23773 5F2D           8846         FC            mov	-4[bp],al
23774                                           !BCC_EOS
23775                                           ! 2886      break;
23776 5F30           EB           22            jmp .1DC
23777                                           !BCC_EOS
23778                                           ! 2887    default:
23779                                           ! 2888      unimplemented();
23780                       00005F32            .1EF:
23781                                           ! Debug: func () void = unimplemented+0 (used reg = )
23782 5F32           E8         2129            call	_unimplemented
23783                                           !BCC_EOS
23784                                           ! 2889      attr = 0;
23785                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23786 5F35           30C0                       xor	al,al
23787 5F37           8846         FC            mov	-4[bp],al
23788                                           !BCC_EOS
23789                                           ! 2890   }
23790                                           ! 2891  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23791 5F3A           EB           18            jmp .1DC
23792                       00005F3C            .1DE:
23793 5F3C           2C                     02  sub	al,*2
23794 5F3E         0F84         FF27            beq 	.1E8
23795 5F42           2C                     01  sub	al,*1
23796 5F44         0F84         FE8A            beq 	.1E0
23797 5F48           2C                     01  sub	al,*1
23798 5F4A         0F84         FE84            beq 	.1DF
23799 5F4E           2C                     01  sub	al,*1
23800 5F50           74           B1            je 	.1EE
23801 5F52           EB           DE            jmp	.1EF
23802                       00005F54            .1DC:
23803                       FFFFFFF4            ..FFF7	=	-$C
23804                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23805 5F54           FF76         0A            push	$A[bp]
23806                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23807 5F57           FF76         F6            push	-$A[bp]
23808                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23809 5F5A           E8         2085            call	_read_word
23810 5F5D           83C4                   04  add	sp,*4
23811                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23812 5F60           30C0                       xor	al,al
23813                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23814 5F62           0A46         FC            or	al,-4[bp]
23815                                           ! Debug: list unsigned int = ax+0 (used reg = )
23816 5F65           50                         push	ax
23817                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23818 5F66           FF76         0A            push	$A[bp]
23819                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23820 5F69           FF76         F6            push	-$A[bp]
23821                                           ! Debug: func () void = write_word+0 (used reg = )
23822 5F6C           E8         209E            call	_write_word
23823 5F6F           83C4                   06  add	sp,*6
23824                                           !BCC_EOS
23825                                           ! 2892 }
23826 5F72           89EC                       mov	sp,bp
23827 5F74           5D                         pop	bp
23828 5F75           C3                         ret
23829                                           ! 2893 static void biosfn_write_teletype (car, page, attr, flag)
23830                                           ! Register BX used in function biosfn_read_pixel
23831                                           ! 2894 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23832                       00005F76            _biosfn_write_teletype:
23833                                           !BCC_EOS
23834                                           !BCC_EOS
23835                                           !BCC_EOS
23836                                           !BCC_EOS
23837                                           ! 2895 {
23838                                           ! 2896  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23839                                           !BCC_EOS
23840                                           ! 2897  Bit16u nbcols,nbrows,address;
23841                                           !BCC_EOS
23842                                           ! 2898  Bit16u cursor,dummy;
23843                                           !BCC_EOS
23844                                           ! 2899  if(page==0xff)
23845 5F76           55                         push	bp
23846 5F77           89E5                       mov	bp,sp
23847 5F79           83C4                   F0  add	sp,*-$10
23848                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23849 5F7C           8A46         06            mov	al,6[bp]
23850 5F7F           3C                     FF  cmp	al,#$FF
23851 5F81           75           11            jne 	.1F0
23852                       00005F83            .1F1:
23853                                           ! 2900   page=read_byte(0x40,0x62);
23854                                           ! Debug: list int = const $62 (used reg = )
23855 5F83           B8                   0062  mov	ax,*$62
23856 5F86           50                         push	ax
23857                                           ! Debug: list int = const $40 (used reg = )
23858 5F87           B8                   0040  mov	ax,*$40
23859 5F8A           50                         push	ax
23860                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23861 5F8B           E8         2041            call	_read_byte
23862 5F8E           83C4                   04  add	sp,*4
23863                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23864 5F91           8846         06            mov	6[bp],al
23865                                           !BCC_EOS
23866                                           ! 2901  mode=read_byte(0x40,0x49);
23867                       00005F94            .1F0:
23868                                           ! Debug: list int = const $49 (used reg = )
23869 5F94           B8                   0049  mov	ax,*$49
23870 5F97           50                         push	ax
23871                                           ! Debug: list int = const $40 (used reg = )
23872 5F98           B8                   0040  mov	ax,*$40
23873 5F9B           50                         push	ax
23874                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23875 5F9C           E8         2030            call	_read_byte
23876 5F9F           83C4                   04  add	sp,*4
23877                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23878 5FA2           8846         FC            mov	-4[bp],al
23879                                           !BCC_EOS
23880                                           ! 2902  line=find_vga_entry(mode);
23881                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23882 5FA5           8A46         FC            mov	al,-4[bp]
23883 5FA8           30E4                       xor	ah,ah
23884 5FAA           50                         push	ax
23885                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23886 5FAB           E8         1F35            call	_find_vga_entry
23887 5FAE           44                         inc	sp
23888 5FAF           44                         inc	sp
23889                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23890 5FB0           8846         FB            mov	-5[bp],al
23891                                           !BCC_EOS
23892                                           ! 2903  if(line==0xFF)return;
23893                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23894 5FB3           8A46         FB            mov	al,-5[bp]
23895 5FB6           3C                     FF  cmp	al,#$FF
23896 5FB8           75           04            jne 	.1F2
23897                       00005FBA            .1F3:
23898 5FBA           89EC                       mov	sp,bp
23899 5FBC           5D                         pop	bp
23900 5FBD           C3                         ret
23901                                           !BCC_EOS
23902                                           ! 2904  biosfn_get_cursor_pos(page,&dummy,&cursor);
23903                       00005FBE            .1F2:
23904                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23905 5FBE           8D5E         F2            lea	bx,-$E[bp]
23906 5FC1           53                         push	bx
23907                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23908 5FC2           8D5E         F0            lea	bx,-$10[bp]
23909 5FC5           53                         push	bx
23910                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23911 5FC6           8A46         06            mov	al,6[bp]
23912 5FC9           30E4                       xor	ah,ah
23913 5FCB           50                         push	ax
23914                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23915 5FCC           E8         E52F            call	_biosfn_get_cursor_pos
23916 5FCF           83C4                   06  add	sp,*6
23917                                           !BCC_EOS
23918                                           ! 2905  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23919                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23920 5FD2           8A46         F2            mov	al,-$E[bp]
23921                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23922 5FD5           8846         FE            mov	-2[bp],al
23923                                           !BCC_EOS
23924                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23925 5FD8           8B46         F2            mov	ax,-$E[bp]
23926 5FDB           30C0                       xor	al,al
23927                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23928 5FDD           88E0                       mov	al,ah
23929 5FDF           30E4                       xor	ah,ah
23930                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23931 5FE1           8846         FD            mov	-3[bp],al
23932                                           !BCC_EOS
23933                                           ! 2906  nbrows=read_byte(0x40,0x84)+1;
23934                                           ! Debug: list int = const $84 (used reg = )
23935 5FE4           B8                   0084  mov	ax,#$84
23936 5FE7           50                         push	ax
23937                                           ! Debug: list int = const $40 (used reg = )
23938 5FE8           B8                   0040  mov	ax,*$40
23939 5FEB           50                         push	ax
23940                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23941 5FEC           E8         1FE0            call	_read_byte
23942 5FEF           83C4                   04  add	sp,*4
23943                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23944 5FF2           30E4                       xor	ah,ah
23945                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23946 5FF4           40                         inc	ax
23947 5FF5           8946         F6            mov	-$A[bp],ax
23948                                           !BCC_EOS
23949                                           ! 2907  nbcols=read_word(0x40,0x4A);
23950                                           ! Debug: list int = const $4A (used reg = )
23951 5FF8           B8                   004A  mov	ax,*$4A
23952 5FFB           50                         push	ax
23953                                           ! Debug: list int = const $40 (used reg = )
23954 5FFC           B8                   0040  mov	ax,*$40
23955 5FFF           50                         push	ax
23956                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23957 6000           E8         1FDF            call	_read_word
23958 6003           83C4                   04  add	sp,*4
23959                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23960 6006           8946         F8            mov	-8[bp],ax
23961                                           !BCC_EOS
23962                                           ! 2908  switch(car)
23963 6009           8A46         04            mov	al,4[bp]
23964                                           ! 2909   {
23965 600C           E9         01E3            br 	.1F6
23966                                           ! 2910    case 7:
23967                                           ! 2911     break;
23968                       0000600F            .1F7:
23969 600F           E9         0201            br 	.1F4
23970                                           !BCC_EOS
23971                                           ! 2912    case 8:
23972                                           ! 2913     if(xcurs>0)xcurs--;
23973                       00006012            .1F8:
23974                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23975 6012           8A46         FE            mov	al,-2[bp]
23976 6015           84C0                       test	al,al
23977 6017           74           07            je  	.1F9
23978                       00006019            .1FA:
23979                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23980 6019           8A46         FE            mov	al,-2[bp]
23981 601C           48                         dec	ax
23982 601D           8846         FE            mov	-2[bp],al
23983                                           !BCC_EOS
23984                                           ! 2914     break;
23985                       00006020            .1F9:
23986 6020           E9         01F0            br 	.1F4
23987                                           !BCC_EOS
23988                                           ! 2915    case '\r':
23989                                           ! 2916     xcurs=0;
23990                       00006023            .1FB:
23991                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23992 6023           30C0                       xor	al,al
23993 6025           8846         FE            mov	-2[bp],al
23994                                           !BCC_EOS
23995                                           ! 2917     break;
23996 6028           E9         01E8            br 	.1F4
23997                                           !BCC_EOS
23998                                           ! 2918    case '\n':
23999                                           ! 2919     ycurs++;
24000                       0000602B            .1FC:
24001                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24002 602B           8A46         FD            mov	al,-3[bp]
24003 602E           40                         inc	ax
24004 602F           8846         FD            mov	-3[bp],al
24005                                           !BCC_EOS
24006                                           ! 2920     break;
24007 6032           E9         01DE            br 	.1F4
24008                                           !BCC_EOS
24009                                           ! 2921    case '\t':
24010                                           ! 2922     do
24011                       00006035            .1FD:
24012                                           ! 2923      {
24013                       00006035            .200:
24014                                           ! 2924       biosfn_write_teletype(' ',page,attr,flag);
24015                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
24016 6035           8A46         0A            mov	al,$A[bp]
24017 6038           30E4                       xor	ah,ah
24018 603A           50                         push	ax
24019                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
24020 603B           8A46         08            mov	al,8[bp]
24021 603E           30E4                       xor	ah,ah
24022 6040           50                         push	ax
24023                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
24024 6041           8A46         06            mov	al,6[bp]
24025 6044           30E4                       xor	ah,ah
24026 6046           50                         push	ax
24027                                           ! Debug: list int = const $20 (used reg = )
24028 6047           B8                   0020  mov	ax,*$20
24029 604A           50                         push	ax
24030                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
24031 604B           E8         FF28            call	_biosfn_write_teletype
24032 604E           83C4                   08  add	sp,*8
24033                                           !BCC_EOS
24034                                           ! 2925       biosfn_get_cursor_pos(page,&dummy,&cursor);
24035                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
24036 6051           8D5E         F2            lea	bx,-$E[bp]
24037 6054           53                         push	bx
24038                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
24039 6055           8D5E         F0            lea	bx,-$10[bp]
24040 6058           53                         push	bx
24041                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
24042 6059           8A46         06            mov	al,6[bp]
24043 605C           30E4                       xor	ah,ah
24044 605E           50                         push	ax
24045                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
24046 605F           E8         E49C            call	_biosfn_get_cursor_pos
24047 6062           83C4                   06  add	sp,*6
24048                                           !BCC_EOS
24049                                           ! 2926       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
24050                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
24051 6065           8A46         F2            mov	al,-$E[bp]
24052                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24053 6068           8846         FE            mov	-2[bp],al
24054                                           !BCC_EOS
24055                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
24056 606B           8B46         F2            mov	ax,-$E[bp]
24057 606E           30C0                       xor	al,al
24058                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
24059 6070           88E0                       mov	al,ah
24060 6072           30E4                       xor	ah,ah
24061                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
24062 6074           8846         FD            mov	-3[bp],al
24063                                           !BCC_EOS
24064                                           ! 2927    
24065                                           ! 2927   }while(xcurs%8==0);
24066                       00006077            .1FF:
24067                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
24068 6077           8A46         FE            mov	al,-2[bp]
24069 607A           30E4                       xor	ah,ah
24070 607C           24                     07  and	al,*7
24071                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
24072 607E           84C0                       test	al,al
24073 6080           74           B3            je 	.200
24074                       00006082            .201:
24075                                           !BCC_EOS
24076                                           ! 2928     break;
24077                       00006082            .1FE:
24078 6082           E9         018E            br 	.1F4
24079                                           !BCC_EOS
24080                                           ! 2929    default:
24081                                           ! 2930     if(vga_modes[line].class==0x00)
24082                       00006085            .202:
24083                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
24084 6085           8A46         FB            mov	al,-5[bp]
24085 6088           30E4                       xor	ah,ah
24086 608A           B1                     03  mov	cl,*3
24087 608C           D3E0                       shl	ax,cl
24088 608E           89C3                       mov	bx,ax
24089 6090           81C3                 0233  add	bx,#_vga_modes
24090                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24091 6094           8A47         01            mov	al,1[bx]
24092 6097           84C0                       test	al,al
24093 6099         0F85         0082            bne 	.203
24094                       0000609D            .204:
24095                                           ! 2931      {
24096                                           ! 2932       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
24097                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
24098 609D           8A46         FD            mov	al,-3[bp]
24099 60A0           30E4                       xor	ah,ah
24100 60A2           8B4E         F8            mov	cx,-8[bp]
24101 60A5           F7E9                       imul	cx
24102                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24103                                           ! Debug: expression subtree swapping
24104 60A7           0246         FE            add	al,-2[bp]
24105 60AA           80D4                   00  adc	ah,*0
24106                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24107 60AD           D1E0                       shl	ax,*1
24108 60AF           50                         push	ax
24109                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24110 60B0           8B46         F8            mov	ax,-8[bp]
24111 60B3           8B4E         F6            mov	cx,-$A[bp]
24112 60B6           F7E9                       imul	cx
24113                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24114 60B8           D1E0                       shl	ax,*1
24115                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24116 60BA           0C                     FF  or	al,#$FF
24117                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24118                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24119 60BC           89C3                       mov	bx,ax
24120 60BE           8A46         06            mov	al,6[bp]
24121 60C1           30E4                       xor	ah,ah
24122 60C3           93                         xchg	ax,bx
24123 60C4           40                         inc	ax
24124 60C5           89D9                       mov	cx,bx
24125 60C7           F7E9                       imul	cx
24126                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24127 60C9           0346         EE            add	ax,0+..FFF6[bp]
24128 60CC           44                         inc	sp
24129 60CD           44                         inc	sp
24130                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24131 60CE           8946         F4            mov	-$C[bp],ax
24132                                           !BCC_EOS
24133                                           ! 2933       write_byte(vga_modes[line].sstart,address,car);
24134                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
24135 60D1           8A46         04            mov	al,4[bp]
24136 60D4           30E4                       xor	ah,ah
24137 60D6           50                         push	ax
24138                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
24139 60D7           FF76         F4            push	-$C[bp]
24140                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
24141 60DA           8A46         FB            mov	al,-5[bp]
24142 60DD           30E4                       xor	ah,ah
24143 60DF           B1                     03  mov	cl,*3
24144 60E1           D3E0                       shl	ax,cl
24145 60E3           89C3                       mov	bx,ax
24146 60E5           81C3                 0233  add	bx,#_vga_modes
24147                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24148 60E9           FF77         04            push	4[bx]
24149                                           ! Debug: func () void = write_byte+0 (used reg = )
24150 60EC           E8         1F06            call	_write_byte
24151 60EF           83C4                   06  add	sp,*6
24152                                           !BCC_EOS
24153                                           ! 2934       if(flag==3)
24154                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
24155 60F2           8A46         0A            mov	al,$A[bp]
24156 60F5           3C                     03  cmp	al,*3
24157 60F7           75           23            jne 	.205
24158                       000060F9            .206:
24159                                           ! 2935        write_byte(vga_modes[line].sstart,address+1,attr);
24160                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
24161 60F9           8A46         08            mov	al,8[bp]
24162 60FC           30E4                       xor	ah,ah
24163 60FE           50                         push	ax
24164                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
24165 60FF           8B46         F4            mov	ax,-$C[bp]
24166                                           ! Debug: list unsigned int = ax+1 (used reg = )
24167 6102           40                         inc	ax
24168 6103           50                         push	ax
24169                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
24170 6104           8A46         FB            mov	al,-5[bp]
24171 6107           30E4                       xor	ah,ah
24172 6109           B1                     03  mov	cl,*3
24173 610B           D3E0                       shl	ax,cl
24174 610D           89C3                       mov	bx,ax
24175 610F           81C3                 0233  add	bx,#_vga_modes
24176                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24177 6113           FF77         04            push	4[bx]
24178                                           ! Debug: func () void = write_byte+0 (used reg = )
24179 6116           E8         1EDC            call	_write_byte
24180 6119           83C4                   06  add	sp,*6
24181                                           !BCC_EOS
24182                                           ! 2936      }
24183                       0000611C            .205:
24184                                           ! 2937     else
24185                                           ! 2938      {
24186 611C           E9         00CA            br 	.207
24187                       0000611F            .203:
24188                                           ! 2939       cheight=read_byte(0x40,0x85);
24189                                           ! Debug: list int = const $85 (used reg = )
24190 611F           B8                   0085  mov	ax,#$85
24191 6122           50                         push	ax
24192                                           ! Debug: list int = const $40 (used reg = )
24193 6123           B8                   0040  mov	ax,*$40
24194 6126           50                         push	ax
24195                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24196 6127           E8         1EA5            call	_read_byte
24197 612A           83C4                   04  add	sp,*4
24198                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
24199 612D           8846         FF            mov	-1[bp],al
24200                                           !BCC_EOS
24201                                           ! 2940       bpp=vga_modes[line].pixbits;
24202                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
24203 6130           8A46         FB            mov	al,-5[bp]
24204 6133           30E4                       xor	ah,ah
24205 6135           B1                     03  mov	cl,*3
24206 6137           D3E0                       shl	ax,cl
24207 6139           89C3                       mov	bx,ax
24208 613B           81C3                 0233  add	bx,#_vga_modes
24209                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24210 613F           8A47         03            mov	al,3[bx]
24211 6142           8846         FA            mov	-6[bp],al
24212                                           !BCC_EOS
24213                                           ! 2941       switch(vga_modes[line].memmodel)
24214                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
24215 6145           8A46         FB            mov	al,-5[bp]
24216 6148           30E4                       xor	ah,ah
24217 614A           B1                     03  mov	cl,*3
24218 614C           D3E0                       shl	ax,cl
24219 614E           89C3                       mov	bx,ax
24220 6150           81C3                 0233  add	bx,#_vga_modes
24221 6154           8A47         02            mov	al,2[bx]
24222                                           ! 2942        {
24223 6157           EB           7A            jmp .20A
24224                                           ! 2943         case 0x04:
24225                                           ! 2944         case 0x03:
24226                       00006159            .20B:
24227                                           ! 2945           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24228                       00006159            .20C:
24229                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24230 6159           8A46         FF            mov	al,-1[bp]
24231 615C           30E4                       xor	ah,ah
24232 615E           50                         push	ax
24233                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24234 615F           FF76         F8            push	-8[bp]
24235                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24236 6162           8A46         FD            mov	al,-3[bp]
24237 6165           30E4                       xor	ah,ah
24238 6167           50                         push	ax
24239                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24240 6168           8A46         FE            mov	al,-2[bp]
24241 616B           30E4                       xor	ah,ah
24242 616D           50                         push	ax
24243                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24244 616E           8A46         08            mov	al,8[bp]
24245 6171           30E4                       xor	ah,ah
24246 6173           50                         push	ax
24247                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24248 6174           8A46         04            mov	al,4[bp]
24249 6177           30E4                       xor	ah,ah
24250 6179           50                         push	ax
24251                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24252 617A           E8         F0AD            call	_write_gfx_char_pl4
24253 617D           83C4                   0C  add	sp,*$C
24254                                           !BCC_EOS
24255                                           ! 2946           break;
24256 6180           EB           67            jmp .208
24257                                           !BCC_EOS
24258                                           ! 2947         case 0x02:
24259                                           ! 2948           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24260                       00006182            .20D:
24261                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24262 6182           8A46         FA            mov	al,-6[bp]
24263 6185           30E4                       xor	ah,ah
24264 6187           50                         push	ax
24265                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24266 6188           FF76         F8            push	-8[bp]
24267                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24268 618B           8A46         FD            mov	al,-3[bp]
24269 618E           30E4                       xor	ah,ah
24270 6190           50                         push	ax
24271                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24272 6191           8A46         FE            mov	al,-2[bp]
24273 6194           30E4                       xor	ah,ah
24274 6196           50                         push	ax
24275                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24276 6197           8A46         08            mov	al,8[bp]
24277 619A           30E4                       xor	ah,ah
24278 619C           50                         push	ax
24279                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24280 619D           8A46         04            mov	al,4[bp]
24281 61A0           30E4                       xor	ah,ah
24282 61A2           50                         push	ax
24283                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24284 61A3           E8         F1F8            call	_write_gfx_char_cga
24285 61A6           83C4                   0C  add	sp,*$C
24286                                           !BCC_EOS
24287                                           ! 2949           break;
24288 61A9           EB           3E            jmp .208
24289                                           !BCC_EOS
24290                                           ! 2950         case 0x05:
24291                                           ! 2951           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24292                       000061AB            .20E:
24293                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24294 61AB           FF76         F8            push	-8[bp]
24295                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24296 61AE           8A46         FD            mov	al,-3[bp]
24297 61B1           30E4                       xor	ah,ah
24298 61B3           50                         push	ax
24299                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24300 61B4           8A46         FE            mov	al,-2[bp]
24301 61B7           30E4                       xor	ah,ah
24302 61B9           50                         push	ax
24303                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24304 61BA           8A46         08            mov	al,8[bp]
24305 61BD           30E4                       xor	ah,ah
24306 61BF           50                         push	ax
24307                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24308 61C0           8A46         04            mov	al,4[bp]
24309 61C3           30E4                       xor	ah,ah
24310 61C5           50                         push	ax
24311                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24312 61C6           E8         F3D9            call	_write_gfx_char_lin
24313 61C9           83C4                   0A  add	sp,*$A
24314                                           !BCC_EOS
24315                                           ! 2952           break;
24316 61CC           EB           1B            jmp .208
24317                                           !BCC_EOS
24318                                           ! 2953         default:
24319                                           ! 2954           unimplemented();
24320                       000061CE            .20F:
24321                                           ! Debug: func () void = unimplemented+0 (used reg = )
24322 61CE           E8         1E8D            call	_unimplemented
24323                                           !BCC_EOS
24324                                           ! 2955        }
24325                                           ! 2956      }
24326 61D1           EB           16            jmp .208
24327                       000061D3            .20A:
24328 61D3           2C                     02  sub	al,*2
24329 61D5           74           AB            je 	.20D
24330 61D7           2C                     01  sub	al,*1
24331 61D9         0F84         FF7C            beq 	.20C
24332 61DD           2C                     01  sub	al,*1
24333 61DF         0F84         FF76            beq 	.20B
24334 61E3           2C                     01  sub	al,*1
24335 61E5           74           C4            je 	.20E
24336 61E7           EB           E5            jmp	.20F
24337                       000061E9            .208:
24338                                           ! 2957     xcurs++;
24339                       000061E9            .207:
24340                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24341 61E9           8A46         FE            mov	al,-2[bp]
24342 61EC           40                         inc	ax
24343 61ED           8846         FE            mov	-2[bp],al
24344                                           !BCC_EOS
24345                                           ! 2958   }
24346                                           ! 2959  if(xcurs==nbcols)
24347 61F0           EB           21            jmp .1F4
24348                       000061F2            .1F6:
24349 61F2           2C                     07  sub	al,*7
24350 61F4         0F84         FE17            beq 	.1F7
24351 61F8           2C                     01  sub	al,*1
24352 61FA         0F84         FE14            beq 	.1F8
24353 61FE           2C                     01  sub	al,*1
24354 6200         0F84         FE31            beq 	.1FD
24355 6204           2C                     01  sub	al,*1
24356 6206         0F84         FE21            beq 	.1FC
24357 620A           2C                     03  sub	al,*3
24358 620C         0F84         FE13            beq 	.1FB
24359 6210           E9         FE72            br 	.202
24360                       00006213            .1F4:
24361                       FFFFFFEE            ..FFF6	=	-$12
24362                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24363 6213           8A46         FE            mov	al,-2[bp]
24364 6216           30E4                       xor	ah,ah
24365 6218           3B46         F8            cmp	ax,-8[bp]
24366 621B           75           0C            jne 	.210
24367                       0000621D            .211:
24368                                           ! 2960   {xcurs=0;
24369                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24370 621D           30C0                       xor	al,al
24371 621F           8846         FE            mov	-2[bp],al
24372                                           !BCC_EOS
24373                                           ! 2961    ycurs++;
24374                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24375 6222           8A46         FD            mov	al,-3[bp]
24376 6225           40                         inc	ax
24377 6226           8846         FD            mov	-3[bp],al
24378                                           !BCC_EOS
24379                                           ! 2962   }
24380                                           ! 2963  if(ycurs==nbrows)
24381                       00006229            .210:
24382                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24383 6229           8A46         FD            mov	al,-3[bp]
24384 622C           30E4                       xor	ah,ah
24385 622E           3B46         F6            cmp	ax,-$A[bp]
24386 6231         0F85         00C9            bne 	.212
24387                       00006235            .213:
24388                                           ! 2964   {
24389                                           ! 2965    if(vga_modes[line].class==0x00)
24390                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
24391 6235           8A46         FB            mov	al,-5[bp]
24392 6238           30E4                       xor	ah,ah
24393 623A           B1                     03  mov	cl,*3
24394 623C           D3E0                       shl	ax,cl
24395 623E           89C3                       mov	bx,ax
24396 6240           81C3                 0233  add	bx,#_vga_modes
24397                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24398 6244           8A47         01            mov	al,1[bx]
24399 6247           84C0                       test	al,al
24400 6249         0F85         0081            bne 	.214
24401                       0000624D            .215:
24402                                           ! 2966     {
24403                                           ! 2967      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24404                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24405 624D           8A46         FD            mov	al,-3[bp]
24406 6250           30E4                       xor	ah,ah
24407                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24408 6252           48                         dec	ax
24409 6253           8B4E         F8            mov	cx,-8[bp]
24410 6256           F7E9                       imul	cx
24411                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24412                                           ! Debug: expression subtree swapping
24413 6258           0246         FE            add	al,-2[bp]
24414 625B           80D4                   00  adc	ah,*0
24415                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24416 625E           D1E0                       shl	ax,*1
24417 6260           50                         push	ax
24418                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24419 6261           8B46         F8            mov	ax,-8[bp]
24420 6264           8B4E         F6            mov	cx,-$A[bp]
24421 6267           F7E9                       imul	cx
24422                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24423 6269           D1E0                       shl	ax,*1
24424                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24425 626B           0C                     FF  or	al,#$FF
24426                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24427                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24428 626D           89C3                       mov	bx,ax
24429 626F           8A46         06            mov	al,6[bp]
24430 6272           30E4                       xor	ah,ah
24431 6274           93                         xchg	ax,bx
24432 6275           40                         inc	ax
24433 6276           89D9                       mov	cx,bx
24434 6278           F7E9                       imul	cx
24435                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24436 627A           0346         EE            add	ax,-$12[bp]
24437 627D           44                         inc	sp
24438 627E           44                         inc	sp
24439                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24440 627F           8946         F4            mov	-$C[bp],ax
24441                                           !BCC_EOS
24442                                           ! 2968      attr=read_byte(vga_modes[line].sstart,address+1);
24443                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24444 6282           8B46         F4            mov	ax,-$C[bp]
24445                                           ! Debug: list unsigned int = ax+1 (used reg = )
24446 6285           40                         inc	ax
24447 6286           50                         push	ax
24448                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$12] struct  = vga_modes+0 (used reg = )
24449 6287           8A46         FB            mov	al,-5[bp]
24450 628A           30E4                       xor	ah,ah
24451 628C           B1                     03  mov	cl,*3
24452 628E           D3E0                       shl	ax,cl
24453 6290           89C3                       mov	bx,ax
24454 6292           81C3                 0233  add	bx,#_vga_modes
24455                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24456 6296           FF77         04            push	4[bx]
24457                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24458 6299           E8         1D33            call	_read_byte
24459 629C           83C4                   04  add	sp,*4
24460                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24461 629F           8846         08            mov	8[bp],al
24462                                           !BCC_EOS
24463                                           ! 2969      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24464                                           ! Debug: list int = const 1 (used reg = )
24465 62A2           B8                   0001  mov	ax,*1
24466 62A5           50                         push	ax
24467                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24468 62A6           8A46         06            mov	al,6[bp]
24469 62A9           30E4                       xor	ah,ah
24470 62AB           50                         push	ax
24471                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24472 62AC           8B46         F8            mov	ax,-8[bp]
24473                                           ! Debug: list unsigned int = ax-1 (used reg = )
24474 62AF           48                         dec	ax
24475 62B0           50                         push	ax
24476                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24477 62B1           8B46         F6            mov	ax,-$A[bp]
24478                                           ! Debug: list unsigned int = ax-1 (used reg = )
24479 62B4           48                         dec	ax
24480 62B5           50                         push	ax
24481                                           ! Debug: list int = const 0 (used reg = )
24482 62B6           31C0                       xor	ax,ax
24483 62B8           50                         push	ax
24484                                           ! Debug: list int = const 0 (used reg = )
24485 62B9           31C0                       xor	ax,ax
24486 62BB           50                         push	ax
24487                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24488 62BC           8A46         08            mov	al,8[bp]
24489 62BF           30E4                       xor	ah,ah
24490 62C1           50                         push	ax
24491                                           ! Debug: list int = const 1 (used reg = )
24492 62C2           B8                   0001  mov	ax,*1
24493 62C5           50                         push	ax
24494                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24495 62C6           E8         E740            call	_biosfn_scroll
24496 62C9           83C4                   10  add	sp,*$10
24497                                           !BCC_EOS
24498                                           ! 2970     }
24499                                           ! 2971    else
24500                                           ! 2972     {
24501 62CC           EB           27            jmp .216
24502                       000062CE            .214:
24503                                           ! 2973      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24504                                           ! Debug: list int = const 1 (used reg = )
24505 62CE           B8                   0001  mov	ax,*1
24506 62D1           50                         push	ax
24507                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24508 62D2           8A46         06            mov	al,6[bp]
24509 62D5           30E4                       xor	ah,ah
24510 62D7           50                         push	ax
24511                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24512 62D8           8B46         F8            mov	ax,-8[bp]
24513                                           ! Debug: list unsigned int = ax-1 (used reg = )
24514 62DB           48                         dec	ax
24515 62DC           50                         push	ax
24516                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24517 62DD           8B46         F6            mov	ax,-$A[bp]
24518                                           ! Debug: list unsigned int = ax-1 (used reg = )
24519 62E0           48                         dec	ax
24520 62E1           50                         push	ax
24521                                           ! Debug: list int = const 0 (used reg = )
24522 62E2           31C0                       xor	ax,ax
24523 62E4           50                         push	ax
24524                                           ! Debug: list int = const 0 (used reg = )
24525 62E5           31C0                       xor	ax,ax
24526 62E7           50                         push	ax
24527                                           ! Debug: list int = const 0 (used reg = )
24528 62E8           31C0                       xor	ax,ax
24529 62EA           50                         push	ax
24530                                           ! Debug: list int = const 1 (used reg = )
24531 62EB           B8                   0001  mov	ax,*1
24532 62EE           50                         push	ax
24533                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24534 62EF           E8         E717            call	_biosfn_scroll
24535 62F2           83C4                   10  add	sp,*$10
24536                                           !BCC_EOS
24537                                           ! 2974     }
24538                                           ! 2975    ycurs-=1;
24539                       000062F5            .216:
24540                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24541 62F5           8A46         FD            mov	al,-3[bp]
24542 62F8           30E4                       xor	ah,ah
24543 62FA           48                         dec	ax
24544 62FB           8846         FD            mov	-3[bp],al
24545                                           !BCC_EOS
24546                                           ! 2976   }
24547                                           ! 2977  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24548                       000062FE            .212:
24549                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24550 62FE           8A46         FD            mov	al,-3[bp]
24551 6301           30E4                       xor	ah,ah
24552 6303           8946         F2            mov	-$E[bp],ax
24553                                           !BCC_EOS
24554                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24555 6306           8B46         F2            mov	ax,-$E[bp]
24556 6309           88C4                       mov	ah,al
24557 630B           30C0                       xor	al,al
24558 630D           8946         F2            mov	-$E[bp],ax
24559                                           !BCC_EOS
24560                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24561 6310           8B46         F2            mov	ax,-$E[bp]
24562 6313           0246         FE            add	al,-2[bp]
24563 6316           80D4                   00  adc	ah,*0
24564 6319           8946         F2            mov	-$E[bp],ax
24565                                           !BCC_EOS
24566                                           ! 2978  biosfn_set_cursor_pos(page,cursor);
24567                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24568 631C           FF76         F2            push	-$E[bp]
24569                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24570 631F           8A46         06            mov	al,6[bp]
24571 6322           30E4                       xor	ah,ah
24572 6324           50                         push	ax
24573                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24574 6325           E8         E0D6            call	_biosfn_set_cursor_pos
24575 6328           83C4                   04  add	sp,*4
24576                                           !BCC_EOS
24577                                           ! 2979 }
24578 632B           89EC                       mov	sp,bp
24579 632D           5D                         pop	bp
24580 632E           C3                         ret
24581                                           ! 2980 #asm
24582                                           !BCC_ASM
24583                       00000008            _biosfn_write_teletype.flag	set	8
24584                       00000006            _biosfn_write_teletype.attr	set	6
24585                       00000004            _biosfn_write_teletype.page	set	4
24586                       00000002            _biosfn_write_teletype.car	set	2
24587                       0000632F            biosfn_get_video_mode:
24588 632F           1E                           push ds
24589 6330           B8                   0040    mov ax, # 0x40
24590 6333           8ED8                         mov ds, ax
24591 6335           53                           push bx
24592 6336           BB                   0062    mov bx, # 0x62
24593 6339           8A07                         mov al, [bx]
24594 633B           5B                           pop bx
24595 633C           88C7                         mov bh, al
24596 633E           53                           push bx
24597 633F           BB                   0087    mov bx, # 0x87
24598 6342           8A27                         mov ah, [bx]
24599 6344           80E4                   80    and ah, #0x80
24600 6347           BB                   0049    mov bx, # 0x49
24601 634A           8A07                         mov al, [bx]
24602 634C           08E0                         or al, ah
24603 634E           BB                   004A    mov bx, # 0x4A
24604 6351           8A27                         mov ah, [bx]
24605 6353           5B                           pop bx
24606 6354           1F                           pop ds
24607 6355           C3                           ret
24608                                           ! 3002 endasm
24609                                           !BCC_ENDASM
24610                                           ! 3003 #asm
24611                                           !BCC_ASM
24612                       00000008            _biosfn_write_teletype.flag	set	8
24613                       00000006            _biosfn_write_teletype.attr	set	6
24614                       00000004            _biosfn_write_teletype.page	set	4
24615                       00000002            _biosfn_write_teletype.car	set	2
24616                       00006356            biosfn_group_10:
24617 6356           3C                     00    cmp al, #0x00
24618 6358           75           02              jne int10_test_1001
24619 635A           EB           64              jmp biosfn_set_single_palette_reg
24620                       0000635C            int10_test_1001:
24621 635C           3C                     01    cmp al, #0x01
24622 635E           75           02              jne int10_test_1002
24623 6360           EB           78              jmp biosfn_set_overscan_border_color
24624                       00006362            int10_test_1002:
24625 6362           3C                     02    cmp al, #0x02
24626 6364           75           02              jne int10_test_1003
24627 6366           EB           7A              jmp biosfn_set_all_palette_reg
24628                       00006368            int10_test_1003:
24629 6368           3C                     03    cmp al, #0x03
24630 636A           75           03              jne int10_test_1007
24631 636C           E9         00A0              jmp biosfn_toggle_intensity
24632                       0000636F            int10_test_1007:
24633 636F           3C                     07    cmp al, #0x07
24634 6371           75           03              jne int10_test_1008
24635 6373           E9         00BF              jmp biosfn_get_single_palette_reg
24636                       00006376            int10_test_1008:
24637 6376           3C                     08    cmp al, #0x08
24638 6378           75           03              jne int10_test_1009
24639 637A           E9         00DC              jmp biosfn_read_overscan_border_color
24640                       0000637D            int10_test_1009:
24641 637D           3C                     09    cmp al, #0x09
24642 637F           75           03              jne int10_test_1010
24643 6381           E9         00E3              jmp biosfn_get_all_palette_reg
24644                       00006384            int10_test_1010:
24645 6384           3C                     10    cmp al, #0x10
24646 6386           75           03              jne int10_test_1012
24647 6388           E9         011D              jmp biosfn_set_single_dac_reg
24648                       0000638B            int10_test_1012:
24649 638B           3C                     12    cmp al, #0x12
24650 638D           75           03              jne int10_test_1013
24651 638F           E9         012F              jmp biosfn_set_all_dac_reg
24652                       00006392            int10_test_1013:
24653 6392           3C                     13    cmp al, #0x13
24654 6394           75           03              jne int10_test_1015
24655 6396           E9         0150              jmp biosfn_select_video_dac_color_page
24656                       00006399            int10_test_1015:
24657 6399           3C                     15    cmp al, #0x15
24658 639B           75           03              jne int10_test_1017
24659 639D           E9         018C              jmp biosfn_read_single_dac_reg
24660                       000063A0            int10_test_1017:
24661 63A0           3C                     17    cmp al, #0x17
24662 63A2           75           03              jne int10_test_1018
24663 63A4           E9         01A0              jmp biosfn_read_all_dac_reg
24664                       000063A7            int10_test_1018:
24665 63A7           3C                     18    cmp al, #0x18
24666 63A9           75           03              jne int10_test_1019
24667 63AB           E9         01C1              jmp biosfn_set_pel_mask
24668                       000063AE            int10_test_1019:
24669 63AE           3C                     19    cmp al, #0x19
24670 63B0           75           03              jne int10_test_101A
24671 63B2           E9         01C5              jmp biosfn_read_pel_mask
24672                       000063B5            int10_test_101A:
24673 63B5           3C                     1A    cmp al, #0x1a
24674 63B7           75           03              jne int10_group_10_unknown
24675 63B9           E9         01C9              jmp biosfn_read_video_dac_state
24676                       000063BC            int10_group_10_unknown:
24677 63BC           E8         1CAD              call _unknown
24678 63BF           C3                           ret
24679                       000063C0            biosfn_set_single_palette_reg:
24680 63C0           80FB                   14    cmp bl, #0x14
24681 63C3           77           14              ja no_actl_reg1
24682 63C5           50                           push ax
24683 63C6           52                           push dx
24684 63C7           BA                   03DA    mov dx, # 0x3da
24685 63CA           EC                           in al, dx
24686 63CB           BA                   03C0    mov dx, # 0x3c0
24687 63CE           88D8                         mov al, bl
24688 63D0           EE                           out dx, al
24689 63D1           88F8                         mov al, bh
24690 63D3           EE                           out dx, al
24691 63D4           B0                     20    mov al, #0x20
24692 63D6           EE                           out dx, al
24693 63D7           5A                           pop dx
24694 63D8           58                           pop ax
24695                       000063D9            no_actl_reg1:
24696 63D9           C3                           ret
24697                                           ! 3085 endasm
24698                                           !BCC_ENDASM
24699                                           ! 3086 #asm
24700                                           !BCC_ASM
24701                       00000008            _biosfn_write_teletype.flag	set	8
24702                       00000006            _biosfn_write_teletype.attr	set	6
24703                       00000004            _biosfn_write_teletype.page	set	4
24704                       00000002            _biosfn_write_teletype.car	set	2
24705                       000063DA            biosfn_set_overscan_border_color:
24706 63DA           53                           push bx
24707 63DB           B3                     11    mov bl, #0x11
24708 63DD           E8         FFE0              call biosfn_set_single_palette_reg
24709 63E0           5B                           pop bx
24710 63E1           C3                           ret
24711                                           ! 3093 endasm
24712                                           !BCC_ENDASM
24713                                           ! 3094 #asm
24714                                           !BCC_ASM
24715                       00000008            _biosfn_write_teletype.flag	set	8
24716                       00000006            _biosfn_write_teletype.attr	set	6
24717                       00000004            _biosfn_write_teletype.page	set	4
24718                       00000002            _biosfn_write_teletype.car	set	2
24719                       000063E2            biosfn_set_all_palette_reg:
24720 63E2           50                           push ax
24721 63E3           53                           push bx
24722 63E4           51                           push cx
24723 63E5           52                           push dx
24724 63E6           89D3                         mov bx, dx
24725 63E8           BA                   03DA    mov dx, # 0x3da
24726 63EB           EC                           in al, dx
24727 63EC           B1                     00    mov cl, #0x00
24728 63EE           BA                   03C0    mov dx, # 0x3c0
24729                       000063F1            set_palette_loop:
24730 63F1           88C8                         mov al, cl
24731 63F3           EE                           out dx, al
24732 63F4           26                           seg es
24733 63F5           8A07                         mov al, [bx]
24734 63F7           EE                           out dx, al
24735 63F8           43                           inc bx
24736 63F9           FEC1                         inc cl
24737 63FB           80F9                   10    cmp cl, #0x10
24738 63FE           75           F1              jne set_palette_loop
24739 6400           B0                     11    mov al, #0x11
24740 6402           EE                           out dx, al
24741 6403           26                           seg es
24742 6404           8A07                         mov al, [bx]
24743 6406           EE                           out dx, al
24744 6407           B0                     20    mov al, #0x20
24745 6409           EE                           out dx, al
24746 640A           5A                           pop dx
24747 640B           59                           pop cx
24748 640C           5B                           pop bx
24749 640D           58                           pop ax
24750 640E           C3                           ret
24751                                           ! 3127 endasm
24752                                           !BCC_ENDASM
24753                                           ! 3128 #asm
24754                                           !BCC_ASM
24755                       00000008            _biosfn_write_teletype.flag	set	8
24756                       00000006            _biosfn_write_teletype.attr	set	6
24757                       00000004            _biosfn_write_teletype.page	set	4
24758                       00000002            _biosfn_write_teletype.car	set	2
24759                       0000640F            biosfn_toggle_intensity:
24760 640F           50                           push ax
24761 6410           53                           push bx
24762 6411           52                           push dx
24763 6412           BA                   03DA    mov dx, # 0x3da
24764 6415           EC                           in al, dx
24765 6416           BA                   03C0    mov dx, # 0x3c0
24766 6419           B0                     10    mov al, #0x10
24767 641B           EE                           out dx, al
24768 641C           BA                   03C1    mov dx, # 0x3c1
24769 641F           EC                           in al, dx
24770 6420           24                     F7    and al, #0xf7
24771 6422           80E3                   01    and bl, #0x01
24772 6425           C0E3                   03    shl bl, 3
24773 6428           08D8                         or al, bl
24774 642A           BA                   03C0    mov dx, # 0x3c0
24775 642D           EE                           out dx, al
24776 642E           B0                     20    mov al, #0x20
24777 6430           EE                           out dx, al
24778 6431           5A                           pop dx
24779 6432           5B                           pop bx
24780 6433           58                           pop ax
24781 6434           C3                           ret
24782                                           ! 3152 endasm
24783                                           !BCC_ENDASM
24784                                           ! 3153 #asm
24785                                           !BCC_ASM
24786                       00000008            _biosfn_write_teletype.flag	set	8
24787                       00000006            _biosfn_write_teletype.attr	set	6
24788                       00000004            _biosfn_write_teletype.page	set	4
24789                       00000002            _biosfn_write_teletype.car	set	2
24790                       00006435            biosfn_get_single_palette_reg:
24791 6435           80FB                   14    cmp bl, #0x14
24792 6438           77           1E              ja no_actl_reg2
24793 643A           50                           push ax
24794 643B           52                           push dx
24795 643C           BA                   03DA    mov dx, # 0x3da
24796 643F           EC                           in al, dx
24797 6440           BA                   03C0    mov dx, # 0x3c0
24798 6443           88D8                         mov al, bl
24799 6445           EE                           out dx, al
24800 6446           BA                   03C1    mov dx, # 0x3c1
24801 6449           EC                           in al, dx
24802 644A           88C7                         mov bh, al
24803 644C           BA                   03DA    mov dx, # 0x3da
24804 644F           EC                           in al, dx
24805 6450           BA                   03C0    mov dx, # 0x3c0
24806 6453           B0                     20    mov al, #0x20
24807 6455           EE                           out dx, al
24808 6456           5A                           pop dx
24809 6457           58                           pop ax
24810                       00006458            no_actl_reg2:
24811 6458           C3                           ret
24812                                           ! 3176 endasm
24813                                           !BCC_ENDASM
24814                                           ! 3177 #asm
24815                                           !BCC_ASM
24816                       00000008            _biosfn_write_teletype.flag	set	8
24817                       00000006            _biosfn_write_teletype.attr	set	6
24818                       00000004            _biosfn_write_teletype.page	set	4
24819                       00000002            _biosfn_write_teletype.car	set	2
24820                       00006459            biosfn_read_overscan_border_color:
24821 6459           50                           push ax
24822 645A           53                           push bx
24823 645B           B3                     11    mov bl, #0x11
24824 645D           E8         FFD5              call biosfn_get_single_palette_reg
24825 6460           88F8                         mov al, bh
24826 6462           5B                           pop bx
24827 6463           88C7                         mov bh, al
24828 6465           58                           pop ax
24829 6466           C3                           ret
24830                                           ! 3188 endasm
24831                                           !BCC_ENDASM
24832                                           ! 3189 #asm
24833                                           !BCC_ASM
24834                       00000008            _biosfn_write_teletype.flag	set	8
24835                       00000006            _biosfn_write_teletype.attr	set	6
24836                       00000004            _biosfn_write_teletype.page	set	4
24837                       00000002            _biosfn_write_teletype.car	set	2
24838                       00006467            biosfn_get_all_palette_reg:
24839 6467           50                           push ax
24840 6468           53                           push bx
24841 6469           51                           push cx
24842 646A           52                           push dx
24843 646B           89D3                         mov bx, dx
24844 646D           B1                     00    mov cl, #0x00
24845                       0000646F            get_palette_loop:
24846 646F           BA                   03DA    mov dx, # 0x3da
24847 6472           EC                           in al, dx
24848 6473           BA                   03C0    mov dx, # 0x3c0
24849 6476           88C8                         mov al, cl
24850 6478           EE                           out dx, al
24851 6479           BA                   03C1    mov dx, # 0x3c1
24852 647C           EC                           in al, dx
24853 647D           26                           seg es
24854 647E           8807                         mov [bx], al
24855 6480           43                           inc bx
24856 6481           FEC1                         inc cl
24857 6483           80F9                   10    cmp cl, #0x10
24858 6486           75           E7              jne get_palette_loop
24859 6488           BA                   03DA    mov dx, # 0x3da
24860 648B           EC                           in al, dx
24861 648C           BA                   03C0    mov dx, # 0x3c0
24862 648F           B0                     11    mov al, #0x11
24863 6491           EE                           out dx, al
24864 6492           BA                   03C1    mov dx, # 0x3c1
24865 6495           EC                           in al, dx
24866 6496           26                           seg es
24867 6497           8807                         mov [bx], al
24868 6499           BA                   03DA    mov dx, # 0x3da
24869 649C           EC                           in al, dx
24870 649D           BA                   03C0    mov dx, # 0x3c0
24871 64A0           B0                     20    mov al, #0x20
24872 64A2           EE                           out dx, al
24873 64A3           5A                           pop dx
24874 64A4           59                           pop cx
24875 64A5           5B                           pop bx
24876 64A6           58                           pop ax
24877 64A7           C3                           ret
24878                                           ! 3230 endasm
24879                                           !BCC_ENDASM
24880                                           ! 3231 #asm
24881                                           !BCC_ASM
24882                       00000008            _biosfn_write_teletype.flag	set	8
24883                       00000006            _biosfn_write_teletype.attr	set	6
24884                       00000004            _biosfn_write_teletype.page	set	4
24885                       00000002            _biosfn_write_teletype.car	set	2
24886                       000064A8            biosfn_set_single_dac_reg:
24887 64A8           50                           push ax
24888 64A9           52                           push dx
24889 64AA           BA                   03C8    mov dx, # 0x3c8
24890 64AD           88D8                         mov al, bl
24891 64AF           EE                           out dx, al
24892 64B0           BA                   03C9    mov dx, # 0x3c9
24893 64B3           58                           pop ax
24894 64B4           50                           push ax
24895 64B5           88E0                         mov al, ah
24896 64B7           EE                           out dx, al
24897 64B8           88E8                         mov al, ch
24898 64BA           EE                           out dx, al
24899 64BB           88C8                         mov al, cl
24900 64BD           EE                           out dx, al
24901 64BE           5A                           pop dx
24902 64BF           58                           pop ax
24903 64C0           C3                           ret
24904                                           ! 3250 endasm
24905                                           !BCC_ENDASM
24906                                           ! 3251 #asm
24907                                           !BCC_ASM
24908                       00000008            _biosfn_write_teletype.flag	set	8
24909                       00000006            _biosfn_write_teletype.attr	set	6
24910                       00000004            _biosfn_write_teletype.page	set	4
24911                       00000002            _biosfn_write_teletype.car	set	2
24912                       000064C1            biosfn_set_all_dac_reg:
24913 64C1           50                           push ax
24914 64C2           53                           push bx
24915 64C3           51                           push cx
24916 64C4           52                           push dx
24917 64C5           BA                   03C8    mov dx, # 0x3c8
24918 64C8           88D8                         mov al, bl
24919 64CA           EE                           out dx, al
24920 64CB           5A                           pop dx
24921 64CC           52                           push dx
24922 64CD           89D3                         mov bx, dx
24923 64CF           BA                   03C9    mov dx, # 0x3c9
24924                       000064D2            set_dac_loop:
24925 64D2           26                           seg es
24926 64D3           8A07                         mov al, [bx]
24927 64D5           EE                           out dx, al
24928 64D6           43                           inc bx
24929 64D7           26                           seg es
24930 64D8           8A07                         mov al, [bx]
24931 64DA           EE                           out dx, al
24932 64DB           43                           inc bx
24933 64DC           26                           seg es
24934 64DD           8A07                         mov al, [bx]
24935 64DF           EE                           out dx, al
24936 64E0           43                           inc bx
24937 64E1           49                           dec cx
24938 64E2           75           EE              jnz set_dac_loop
24939 64E4           5A                           pop dx
24940 64E5           59                           pop cx
24941 64E6           5B                           pop bx
24942 64E7           58                           pop ax
24943 64E8           C3                           ret
24944                                           ! 3284 endasm
24945                                           !BCC_ENDASM
24946                                           ! 3285 #asm
24947                                           !BCC_ASM
24948                       00000008            _biosfn_write_teletype.flag	set	8
24949                       00000006            _biosfn_write_teletype.attr	set	6
24950                       00000004            _biosfn_write_teletype.page	set	4
24951                       00000002            _biosfn_write_teletype.car	set	2
24952                       000064E9            biosfn_select_video_dac_color_page:
24953 64E9           50                           push ax
24954 64EA           53                           push bx
24955 64EB           52                           push dx
24956 64EC           BA                   03DA    mov dx, # 0x3da
24957 64EF           EC                           in al, dx
24958 64F0           BA                   03C0    mov dx, # 0x3c0
24959 64F3           B0                     10    mov al, #0x10
24960 64F5           EE                           out dx, al
24961 64F6           BA                   03C1    mov dx, # 0x3c1
24962 64F9           EC                           in al, dx
24963 64FA           80E3                   01    and bl, #0x01
24964 64FD           75           0D              jnz set_dac_page
24965 64FF           24                     7F    and al, #0x7f
24966 6501           C0E7                   07    shl bh, 7
24967 6504           08F8                         or al, bh
24968 6506           BA                   03C0    mov dx, # 0x3c0
24969 6509           EE                           out dx, al
24970 650A           EB           19              jmp set_actl_normal
24971                       0000650C            set_dac_page:
24972 650C           50                           push ax
24973 650D           BA                   03DA    mov dx, # 0x3da
24974 6510           EC                           in al, dx
24975 6511           BA                   03C0    mov dx, # 0x3c0
24976 6514           B0                     14    mov al, #0x14
24977 6516           EE                           out dx, al
24978 6517           58                           pop ax
24979 6518           24                     80    and al, #0x80
24980 651A           75           03              jnz set_dac_16_page
24981 651C           C0E7                   02    shl bh, 2
24982                       0000651F            set_dac_16_page:
24983 651F           80E7                   0F    and bh, #0x0f
24984 6522           88F8                         mov al, bh
24985 6524           EE                           out dx, al
24986                       00006525            set_actl_normal:
24987 6525           B0                     20    mov al, #0x20
24988 6527           EE                           out dx, al
24989 6528           5A                           pop dx
24990 6529           5B                           pop bx
24991 652A           58                           pop ax
24992 652B           C3                           ret
24993                                           ! 3327 endasm
24994                                           !BCC_ENDASM
24995                                           ! 3328 #asm
24996                                           !BCC_ASM
24997                       00000008            _biosfn_write_teletype.flag	set	8
24998                       00000006            _biosfn_write_teletype.attr	set	6
24999                       00000004            _biosfn_write_teletype.page	set	4
25000                       00000002            _biosfn_write_teletype.car	set	2
25001                       0000652C            biosfn_read_single_dac_reg:
25002 652C           50                           push ax
25003 652D           52                           push dx
25004 652E           BA                   03C7    mov dx, # 0x3c7
25005 6531           88D8                         mov al, bl
25006 6533           EE                           out dx, al
25007 6534           58                           pop ax
25008 6535           88C4                         mov ah, al
25009 6537           BA                   03C9    mov dx, # 0x3c9
25010 653A           EC                           in al, dx
25011 653B           86E0                         xchg al, ah
25012 653D           50                           push ax
25013 653E           EC                           in al, dx
25014 653F           88C5                         mov ch, al
25015 6541           EC                           in al, dx
25016 6542           88C1                         mov cl, al
25017 6544           5A                           pop dx
25018 6545           58                           pop ax
25019 6546           C3                           ret
25020                                           ! 3348 endasm
25021                                           !BCC_ENDASM
25022                                           ! 3349 #asm
25023                                           !BCC_ASM
25024                       00000008            _biosfn_write_teletype.flag	set	8
25025                       00000006            _biosfn_write_teletype.attr	set	6
25026                       00000004            _biosfn_write_teletype.page	set	4
25027                       00000002            _biosfn_write_teletype.car	set	2
25028                       00006547            biosfn_read_all_dac_reg:
25029 6547           50                           push ax
25030 6548           53                           push bx
25031 6549           51                           push cx
25032 654A           52                           push dx
25033 654B           BA                   03C7    mov dx, # 0x3c7
25034 654E           88D8                         mov al, bl
25035 6550           EE                           out dx, al
25036 6551           5A                           pop dx
25037 6552           52                           push dx
25038 6553           89D3                         mov bx, dx
25039 6555           BA                   03C9    mov dx, # 0x3c9
25040                       00006558            read_dac_loop:
25041 6558           EC                           in al, dx
25042 6559           26                           seg es
25043 655A           8807                         mov [bx], al
25044 655C           43                           inc bx
25045 655D           EC                           in al, dx
25046 655E           26                           seg es
25047 655F           8807                         mov [bx], al
25048 6561           43                           inc bx
25049 6562           EC                           in al, dx
25050 6563           26                           seg es
25051 6564           8807                         mov [bx], al
25052 6566           43                           inc bx
25053 6567           49                           dec cx
25054 6568           75           EE              jnz read_dac_loop
25055 656A           5A                           pop dx
25056 656B           59                           pop cx
25057 656C           5B                           pop bx
25058 656D           58                           pop ax
25059 656E           C3                           ret
25060                                           ! 3382 endasm
25061                                           !BCC_ENDASM
25062                                           ! 3383 #asm
25063                                           !BCC_ASM
25064                       00000008            _biosfn_write_teletype.flag	set	8
25065                       00000006            _biosfn_write_teletype.attr	set	6
25066                       00000004            _biosfn_write_teletype.page	set	4
25067                       00000002            _biosfn_write_teletype.car	set	2
25068                       0000656F            biosfn_set_pel_mask:
25069 656F           50                           push ax
25070 6570           52                           push dx
25071 6571           BA                   03C6    mov dx, # 0x3c6
25072 6574           88D8                         mov al, bl
25073 6576           EE                           out dx, al
25074 6577           5A                           pop dx
25075 6578           58                           pop ax
25076 6579           C3                           ret
25077                                           ! 3393 endasm
25078                                           !BCC_ENDASM
25079                                           ! 3394 #asm
25080                                           !BCC_ASM
25081                       00000008            _biosfn_write_teletype.flag	set	8
25082                       00000006            _biosfn_write_teletype.attr	set	6
25083                       00000004            _biosfn_write_teletype.page	set	4
25084                       00000002            _biosfn_write_teletype.car	set	2
25085                       0000657A            biosfn_read_pel_mask:
25086 657A           50                           push ax
25087 657B           52                           push dx
25088 657C           BA                   03C6    mov dx, # 0x3c6
25089 657F           EC                           in al, dx
25090 6580           88C3                         mov bl, al
25091 6582           5A                           pop dx
25092 6583           58                           pop ax
25093 6584           C3                           ret
25094                                           ! 3404 endasm
25095                                           !BCC_ENDASM
25096                                           ! 3405 #asm
25097                                           !BCC_ASM
25098                       00000008            _biosfn_write_teletype.flag	set	8
25099                       00000006            _biosfn_write_teletype.attr	set	6
25100                       00000004            _biosfn_write_teletype.page	set	4
25101                       00000002            _biosfn_write_teletype.car	set	2
25102                       00006585            biosfn_read_video_dac_state:
25103 6585           50                           push ax
25104 6586           52                           push dx
25105 6587           BA                   03DA    mov dx, # 0x3da
25106 658A           EC                           in al, dx
25107 658B           BA                   03C0    mov dx, # 0x3c0
25108 658E           B0                     10    mov al, #0x10
25109 6590           EE                           out dx, al
25110 6591           BA                   03C1    mov dx, # 0x3c1
25111 6594           EC                           in al, dx
25112 6595           88C3                         mov bl, al
25113 6597           C0EB                   07    shr bl, 7
25114 659A           BA                   03DA    mov dx, # 0x3da
25115 659D           EC                           in al, dx
25116 659E           BA                   03C0    mov dx, # 0x3c0
25117 65A1           B0                     14    mov al, #0x14
25118 65A3           EE                           out dx, al
25119 65A4           BA                   03C1    mov dx, # 0x3c1
25120 65A7           EC                           in al, dx
25121 65A8           88C7                         mov bh, al
25122 65AA           80E7                   0F    and bh, #0x0f
25123 65AD           F6C3                   01    test bl, #0x01
25124 65B0           75           03              jnz get_dac_16_page
25125 65B2           C0EF                   02    shr bh, 2
25126                       000065B5            get_dac_16_page:
25127 65B5           BA                   03DA    mov dx, # 0x3da
25128 65B8           EC                           in al, dx
25129 65B9           BA                   03C0    mov dx, # 0x3c0
25130 65BC           B0                     20    mov al, #0x20
25131 65BE           EE                           out dx, al
25132 65BF           5A                           pop dx
25133 65C0           58                           pop ax
25134 65C1           C3                           ret
25135                                           ! 3439 endasm
25136                                           !BCC_ENDASM
25137                                           ! 3440 static void biosfn_perform_gray_scale_summing (start,count)
25138                                           ! Register BX used in function biosfn_write_teletype
25139                                           ! 3441 Bit16u start;Bit16u count;
25140                       000065C2            _biosfn_perform_gray_scale_summing:
25141                                           !BCC_EOS
25142                                           !BCC_EOS
25143                                           ! 3442 {Bit8u r,g,b;
25144                                           !BCC_EOS
25145                                           ! 3443  Bit16u i;
25146                                           !BCC_EOS
25147                                           ! 3444  Bit16u index;
25148                                           !BCC_EOS
25149                                           ! 3445  inb(0x3da);
25150 65C2           55                         push	bp
25151 65C3           89E5                       mov	bp,sp
25152 65C5           83C4                   F8  add	sp,*-8
25153                                           ! Debug: list int = const $3DA (used reg = )
25154 65C8           B8                   03DA  mov	ax,#$3DA
25155 65CB           50                         push	ax
25156                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25157 65CC           E8         1A56            call	_inb
25158 65CF           44                         inc	sp
25159 65D0           44                         inc	sp
25160                                           !BCC_EOS
25161                                           ! 3446  outb(0x3c0,0x00);
25162                                           ! Debug: list int = const 0 (used reg = )
25163 65D1           31C0                       xor	ax,ax
25164 65D3           50                         push	ax
25165                                           ! Debug: list int = const $3C0 (used reg = )
25166 65D4           B8                   03C0  mov	ax,#$3C0
25167 65D7           50                         push	ax
25168                                           ! Debug: func () void = outb+0 (used reg = )
25169 65D8           E8         1A60            call	_outb
25170 65DB           83C4                   04  add	sp,*4
25171                                           !BCC_EOS
25172                                           ! 3447  for( index = 0; index < count; index++ )
25173                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
25174 65DE           31C0                       xor	ax,ax
25175 65E0           8946         F8            mov	-8[bp],ax
25176                                           !BCC_EOS
25177                                           !BCC_EOS
25178                                           ! 3448   {
25179 65E3           E9         00BE            br 	.219
25180                       000065E6            .21A:
25181                                           ! 3449    outb(0x3c7,start);
25182                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25183 65E6           FF76         04            push	4[bp]
25184                                           ! Debug: list int = const $3C7 (used reg = )
25185 65E9           B8                   03C7  mov	ax,#$3C7
25186 65EC           50                         push	ax
25187                                           ! Debug: func () void = outb+0 (used reg = )
25188 65ED           E8         1A4B            call	_outb
25189 65F0           83C4                   04  add	sp,*4
25190                                           !BCC_EOS
25191                                           ! 3450    r=inb( 0x3c9 );
25192                                           ! Debug: list int = const $3C9 (used reg = )
25193 65F3           B8                   03C9  mov	ax,#$3C9
25194 65F6           50                         push	ax
25195                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25196 65F7           E8         1A2B            call	_inb
25197 65FA           44                         inc	sp
25198 65FB           44                         inc	sp
25199                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25200 65FC           8846         FF            mov	-1[bp],al
25201                                           !BCC_EOS
25202                                           ! 3451    g=inb( 0x3c9 );
25203                                           ! Debug: list int = const $3C9 (used reg = )
25204 65FF           B8                   03C9  mov	ax,#$3C9
25205 6602           50                         push	ax
25206                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25207 6603           E8         1A1F            call	_inb
25208 6606           44                         inc	sp
25209 6607           44                         inc	sp
25210                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25211 6608           8846         FE            mov	-2[bp],al
25212                                           !BCC_EOS
25213                                           ! 3452    b=inb( 0x3c9 );
25214                                           ! Debug: list int = const $3C9 (used reg = )
25215 660B           B8                   03C9  mov	ax,#$3C9
25216 660E           50                         push	ax
25217                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25218 660F           E8         1A13            call	_inb
25219 6612           44                         inc	sp
25220 6613           44                         inc	sp
25221                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25222 6614           8846         FD            mov	-3[bp],al
25223                                           !BCC_EOS
25224                                           ! 3453    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25225                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25226                                           ! Debug: expression subtree swapping
25227 6617           8A46         FD            mov	al,-3[bp]
25228 661A           30E4                       xor	ah,ah
25229 661C           B9                   001C  mov	cx,*$1C
25230 661F           F7E9                       imul	cx
25231 6621           50                         push	ax
25232                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25233                                           ! Debug: expression subtree swapping
25234 6622           8A46         FE            mov	al,-2[bp]
25235 6625           30E4                       xor	ah,ah
25236 6627           B9                   0097  mov	cx,#$97
25237 662A           F7E9                       imul	cx
25238 662C           50                         push	ax
25239                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25240                                           ! Debug: expression subtree swapping
25241 662D           8A46         FF            mov	al,-1[bp]
25242 6630           30E4                       xor	ah,ah
25243 6632           B9                   004D  mov	cx,*$4D
25244 6635           F7E9                       imul	cx
25245                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25246 6637           0346         F4            add	ax,-$C[bp]
25247 663A           44                         inc	sp
25248 663B           44                         inc	sp
25249                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25250 663C           0346         F6            add	ax,-$A[bp]
25251 663F           44                         inc	sp
25252 6640           44                         inc	sp
25253                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25254                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25255 6641           05                   0080  add	ax,#$80
25256 6644           88E0                       mov	al,ah
25257 6646           30E4                       xor	ah,ah
25258                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25259 6648           8946         FA            mov	-6[bp],ax
25260                                           !BCC_EOS
25261                                           ! 3454    if(i>0x3f)i=0x
25262                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25263 664B           8B46         FA            mov	ax,-6[bp]
25264 664E           3D                   003F  cmp	ax,*$3F
25265 6651           76           06            jbe 	.21B
25266                       00006653            .21C:
25267                                           ! 3454 3f;
25268                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25269 6653           B8                   003F  mov	ax,*$3F
25270 6656           8946         FA            mov	-6[bp],ax
25271                                           !BCC_EOS
25272                                           ! 3455    outb(0x3c8,start);
25273                       00006659            .21B:
25274                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25275 6659           FF76         04            push	4[bp]
25276                                           ! Debug: list int = const $3C8 (used reg = )
25277 665C           B8                   03C8  mov	ax,#$3C8
25278 665F           50                         push	ax
25279                                           ! Debug: func () void = outb+0 (used reg = )
25280 6660           E8         19D8            call	_outb
25281 6663           83C4                   04  add	sp,*4
25282                                           !BCC_EOS
25283                                           ! 3456    outb( 0x3c9, i&0xff );
25284                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25285 6666           8A46         FA            mov	al,-6[bp]
25286                                           ! Debug: list unsigned char = al+0 (used reg = )
25287 6669           30E4                       xor	ah,ah
25288 666B           50                         push	ax
25289                                           ! Debug: list int = const $3C9 (used reg = )
25290 666C           B8                   03C9  mov	ax,#$3C9
25291 666F           50                         push	ax
25292                                           ! Debug: func () void = outb+0 (used reg = )
25293 6670           E8         19C8            call	_outb
25294 6673           83C4                   04  add	sp,*4
25295                                           !BCC_EOS
25296                                           ! 3457    outb( 0x3c9, i&0xff );
25297                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25298 6676           8A46         FA            mov	al,-6[bp]
25299                                           ! Debug: list unsigned char = al+0 (used reg = )
25300 6679           30E4                       xor	ah,ah
25301 667B           50                         push	ax
25302                                           ! Debug: list int = const $3C9 (used reg = )
25303 667C           B8                   03C9  mov	ax,#$3C9
25304 667F           50                         push	ax
25305                                           ! Debug: func () void = outb+0 (used reg = )
25306 6680           E8         19B8            call	_outb
25307 6683           83C4                   04  add	sp,*4
25308                                           !BCC_EOS
25309                                           ! 3458    outb( 0x3c9, i&0xff );
25310                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25311 6686           8A46         FA            mov	al,-6[bp]
25312                                           ! Debug: list unsigned char = al+0 (used reg = )
25313 6689           30E4                       xor	ah,ah
25314 668B           50                         push	ax
25315                                           ! Debug: list int = const $3C9 (used reg = )
25316 668C           B8                   03C9  mov	ax,#$3C9
25317 668F           50                         push	ax
25318                                           ! Debug: func () void = outb+0 (used reg = )
25319 6690           E8         19A8            call	_outb
25320 6693           83C4                   04  add	sp,*4
25321                                           !BCC_EOS
25322                                           ! 3459    start++;
25323                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25324 6696           8B46         04            mov	ax,4[bp]
25325 6699           40                         inc	ax
25326 669A           8946         04            mov	4[bp],ax
25327                                           !BCC_EOS
25328                                           ! 3460   }
25329                                           ! 3461  inb(0x3da);
25330                       0000669D            .218:
25331                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25332 669D           8B46         F8            mov	ax,-8[bp]
25333 66A0           40                         inc	ax
25334 66A1           8946         F8            mov	-8[bp],ax
25335                       000066A4            .219:
25336                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25337 66A4           8B46         F8            mov	ax,-8[bp]
25338 66A7           3B46         06            cmp	ax,6[bp]
25339 66AA         0F82         FF38            blo 	.21A
25340                       000066AE            .21D:
25341                       000066AE            .217:
25342                                           ! Debug: list int = const $3DA (used reg = )
25343 66AE           B8                   03DA  mov	ax,#$3DA
25344 66B1           50                         push	ax
25345                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25346 66B2           E8         1970            call	_inb
25347 66B5           44                         inc	sp
25348 66B6           44                         inc	sp
25349                                           !BCC_EOS
25350                                           ! 3462  outb(0x3c0,0x20);
25351                                           ! Debug: list int = const $20 (used reg = )
25352 66B7           B8                   0020  mov	ax,*$20
25353 66BA           50                         push	ax
25354                                           ! Debug: list int = const $3C0 (used reg = )
25355 66BB           B8                   03C0  mov	ax,#$3C0
25356 66BE           50                         push	ax
25357                                           ! Debug: func () void = outb+0 (used reg = )
25358 66BF           E8         1979            call	_outb
25359 66C2           83C4                   04  add	sp,*4
25360                                           !BCC_EOS
25361                                           ! 3463 }
25362 66C5           89EC                       mov	sp,bp
25363 66C7           5D                         pop	bp
25364 66C8           C3                         ret
25365                                           ! 3464 static void get_font_access()
25366                                           ! 3465 {
25367                       000066C9            _get_font_access:
25368                                           ! 3466 #asm
25369                                           !BCC_ASM
25370 66C9           BA                   03C4   mov dx, # 0x3c4
25371 66CC           B8                   0100   mov ax, #0x0100
25372 66CF           EF                          out dx, ax
25373 66D0           B8                   0402   mov ax, #0x0402
25374 66D3           EF                          out dx, ax
25375 66D4           B8                   0704   mov ax, #0x0704
25376 66D7           EF                          out dx, ax
25377 66D8           B8                   0300   mov ax, #0x0300
25378 66DB           EF                          out dx, ax
25379 66DC           BA                   03CE   mov dx, # 0x3ce
25380 66DF           B8                   0204   mov ax, #0x0204
25381 66E2           EF                          out dx, ax
25382 66E3           B8                   0005   mov ax, #0x0005
25383 66E6           EF                          out dx, ax
25384 66E7           B8                   0406   mov ax, #0x0406
25385 66EA           EF                          out dx, ax
25386                                           ! 3483 endasm
25387                                           !BCC_ENDASM
25388                                           ! 3484 }
25389 66EB           C3                         ret
25390                                           ! 3485 static void release_font_access()
25391                                           ! 3486 {
25392                       000066EC            _release_font_access:
25393                                           ! 3487 #asm
25394                                           !BCC_ASM
25395 66EC           BA                   03C4   mov dx, # 0x3c4
25396 66EF           B8                   0100   mov ax, #0x0100
25397 66F2           EF                          out dx, ax
25398 66F3           B8                   0302   mov ax, #0x0302
25399 66F6           EF                          out dx, ax
25400 66F7           B8                   0304   mov ax, #0x0304
25401 66FA           EF                          out dx, ax
25402 66FB           B8                   0300   mov ax, #0x0300
25403 66FE           EF                          out dx, ax
25404 66FF           BA                   03CC   mov dx, # 0x3cc
25405 6702           EC                          in al, dx
25406 6703           24                     01   and al, #0x01
25407 6705           C0E0                   02   shl al, 2
25408 6708           0C                     0A   or al, #0x0a
25409 670A           88C4                        mov ah, al
25410 670C           B0                     06   mov al, #0x06
25411 670E           BA                   03CE   mov dx, # 0x3ce
25412 6711           EF                          out dx, ax
25413 6712           B8                   0004   mov ax, #0x0004
25414 6715           EF                          out dx, ax
25415 6716           B8                   1005   mov ax, #0x1005
25416 6719           EF                          out dx, ax
25417                                           ! 3510 endasm
25418                                           !BCC_ENDASM
25419                                           ! 3511 }
25420 671A           C3                         ret
25421                                           ! 3512 #asm
25422                                           !BCC_ASM
25423                       0000671B            idiv_u:
25424 671B           31D2                         xor dx,dx
25425 671D           F7F3                         div bx
25426 671F           C3                           ret
25427                                           ! 3517 endasm
25428                                           !BCC_ENDASM
25429                                           ! 3518 static void set_scan_lines(lines) Bit8u lines;
25430                       00006720            _set_scan_lines:
25431                                           !BCC_EOS
25432                                           ! 3519 {
25433                                           ! 3520  Bit16u crtc_addr,cols,page,vde;
25434                                           !BCC_EOS
25435                                           ! 3521  Bit8u crtc_r9,ovl,rows;
25436                                           !BCC_EOS
25437                                           ! 3522  crtc_addr = read_word(0x40,0x63);
25438 6720           55                         push	bp
25439 6721           89E5                       mov	bp,sp
25440 6723           83C4                   F4  add	sp,*-$C
25441                                           ! Debug: list int = const $63 (used reg = )
25442 6726           B8                   0063  mov	ax,*$63
25443 6729           50                         push	ax
25444                                           ! Debug: list int = const $40 (used reg = )
25445 672A           B8                   0040  mov	ax,*$40
25446 672D           50                         push	ax
25447                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25448 672E           E8         18B1            call	_read_word
25449 6731           83C4                   04  add	sp,*4
25450                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25451 6734           8946         FE            mov	-2[bp],ax
25452                                           !BCC_EOS
25453                                           ! 3523  outb(crtc_addr, 0x09);
25454                                           ! Debug: list int = const 9 (used reg = )
25455 6737           B8                   0009  mov	ax,*9
25456 673A           50                         push	ax
25457                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25458 673B           FF76         FE            push	-2[bp]
25459                                           ! Debug: func () void = outb+0 (used reg = )
25460 673E           E8         18FA            call	_outb
25461 6741           83C4                   04  add	sp,*4
25462                                           !BCC_EOS
25463                                           ! 3524  crtc_r9 = inb(crtc_addr+1);
25464                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25465 6744           8B46         FE            mov	ax,-2[bp]
25466                                           ! Debug: list unsigned int = ax+1 (used reg = )
25467 6747           40                         inc	ax
25468 6748           50                         push	ax
25469                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25470 6749           E8         18D9            call	_inb
25471 674C           44                         inc	sp
25472 674D           44                         inc	sp
25473                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25474 674E           8846         F7            mov	-9[bp],al
25475                                           !BCC_EOS
25476                                           ! 3525  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25477                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25478 6751           8A46         04            mov	al,4[bp]
25479 6754           30E4                       xor	ah,ah
25480 6756           48                         dec	ax
25481 6757           50                         push	ax
25482                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25483 6758           8A46         F7            mov	al,-9[bp]
25484 675B           24                     E0  and	al,#$E0
25485                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25486 675D           30E4                       xor	ah,ah
25487 675F           0B46         F2            or	ax,-$E[bp]
25488 6762           44                         inc	sp
25489 6763           44                         inc	sp
25490                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25491 6764           8846         F7            mov	-9[bp],al
25492                                           !BCC_EOS
25493                                           ! 3526  outb(crtc_addr+1, crtc_r9);
25494                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25495 6767           8A46         F7            mov	al,-9[bp]
25496 676A           30E4                       xor	ah,ah
25497 676C           50                         push	ax
25498                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25499 676D           8B46         FE            mov	ax,-2[bp]
25500                                           ! Debug: list unsigned int = ax+1 (used reg = )
25501 6770           40                         inc	ax
25502 6771           50                         push	ax
25503                                           ! Debug: func () void = outb+0 (used reg = )
25504 6772           E8         18C6            call	_outb
25505 6775           83C4                   04  add	sp,*4
25506                                           !BCC_EOS
25507                                           ! 3527  if(lines==8)
25508                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25509 6778           8A46         04            mov	al,4[bp]
25510 677B           3C                     08  cmp	al,*8
25511 677D           75           10            jne 	.21E
25512                       0000677F            .21F:
25513                                           ! 3528   {
25514                                           ! 3529    biosfn_set_cursor_shape(0x06,0x07);
25515                                           ! Debug: list int = const 7 (used reg = )
25516 677F           B8                   0007  mov	ax,*7
25517 6782           50                         push	ax
25518                                           ! Debug: list int = const 6 (used reg = )
25519 6783           B8                   0006  mov	ax,*6
25520 6786           50                         push	ax
25521                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25522 6787           E8         DB59            call	_biosfn_set_cursor_shape
25523 678A           83C4                   04  add	sp,*4
25524                                           !BCC_EOS
25525                                           ! 3530   }
25526                                           ! 3531  else
25527                                           ! 3532   {
25528 678D           EB           18            jmp .220
25529                       0000678F            .21E:
25530                                           ! 3533    biosfn_set_cursor_shape(lines-4,lines-3);
25531                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25532 678F           8A46         04            mov	al,4[bp]
25533 6792           30E4                       xor	ah,ah
25534                                           ! Debug: list unsigned int = ax-3 (used reg = )
25535 6794           05                   FFFD  add	ax,*-3
25536 6797           50                         push	ax
25537                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25538 6798           8A46         04            mov	al,4[bp]
25539 679B           30E4                       xor	ah,ah
25540                                           ! Debug: list unsigned int = ax-4 (used reg = )
25541 679D           05                   FFFC  add	ax,*-4
25542 67A0           50                         push	ax
25543                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25544 67A1           E8         DB3F            call	_biosfn_set_cursor_shape
25545 67A4           83C4                   04  add	sp,*4
25546                                           !BCC_EOS
25547                                           ! 3534   }
25548                                           ! 3535  write_word(0x40,0x85, lines);
25549                       000067A7            .220:
25550                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25551 67A7           8A46         04            mov	al,4[bp]
25552 67AA           30E4                       xor	ah,ah
25553 67AC           50                         push	ax
25554                                           ! Debug: list int = const $85 (used reg = )
25555 67AD           B8                   0085  mov	ax,#$85
25556 67B0           50                         push	ax
25557                                           ! Debug: list int = const $40 (used reg = )
25558 67B1           B8                   0040  mov	ax,*$40
25559 67B4           50                         push	ax
25560                                           ! Debug: func () void = write_word+0 (used reg = )
25561 67B5           E8         1855            call	_write_word
25562 67B8           83C4                   06  add	sp,*6
25563                                           !BCC_EOS
25564                                           ! 3536  outb(crtc_addr, 0x12);
25565                                           ! Debug: list int = const $12 (used reg = )
25566 67BB           B8                   0012  mov	ax,*$12
25567 67BE           50                         push	ax
25568                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25569 67BF           FF76         FE            push	-2[bp]
25570                                           ! Debug: func () void = outb+0 (used reg = )
25571 67C2           E8         1876            call	_outb
25572 67C5           83C4                   04  add	sp,*4
25573                                           !BCC_EOS
25574                                           ! 3537  vde = inb(crtc_addr+1);
25575                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25576 67C8           8B46         FE            mov	ax,-2[bp]
25577                                           ! Debug: list unsigned int = ax+1 (used reg = )
25578 67CB           40                         inc	ax
25579 67CC           50                         push	ax
25580                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25581 67CD           E8         1855            call	_inb
25582 67D0           44                         inc	sp
25583 67D1           44                         inc	sp
25584                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25585 67D2           30E4                       xor	ah,ah
25586 67D4           8946         F8            mov	-8[bp],ax
25587                                           !BCC_EOS
25588                                           ! 3538  outb(crtc_addr, 0x07);
25589                                           ! Debug: list int = const 7 (used reg = )
25590 67D7           B8                   0007  mov	ax,*7
25591 67DA           50                         push	ax
25592                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25593 67DB           FF76         FE            push	-2[bp]
25594                                           ! Debug: func () void = outb+0 (used reg = )
25595 67DE           E8         185A            call	_outb
25596 67E1           83C4                   04  add	sp,*4
25597                                           !BCC_EOS
25598                                           ! 3539  ovl = inb(crtc_addr+1);
25599                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25600 67E4           8B46         FE            mov	ax,-2[bp]
25601                                           ! Debug: list unsigned int = ax+1 (used reg = )
25602 67E7           40                         inc	ax
25603 67E8           50                         push	ax
25604                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25605 67E9           E8         1839            call	_inb
25606 67EC           44                         inc	sp
25607 67ED           44                         inc	sp
25608                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25609 67EE           8846         F6            mov	-$A[bp],al
25610                                           !BCC_EOS
25611                                           ! 3540  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25612                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25613 67F1           8A46         F6            mov	al,-$A[bp]
25614 67F4           24                     40  and	al,*$40
25615                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25616 67F6           30E4                       xor	ah,ah
25617 67F8           B1                     03  mov	cl,*3
25618 67FA           D3E0                       shl	ax,cl
25619 67FC           50                         push	ax
25620                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25621 67FD           8A46         F6            mov	al,-$A[bp]
25622 6800           24                     02  and	al,*2
25623                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25624 6802           30E4                       xor	ah,ah
25625 6804           B1                     07  mov	cl,*7
25626 6806           D3E0                       shl	ax,cl
25627                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25628 6808           0346         F2            add	ax,-$E[bp]
25629 680B           44                         inc	sp
25630 680C           44                         inc	sp
25631                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25632                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25633 680D           40                         inc	ax
25634 680E           0346         F8            add	ax,-8[bp]
25635 6811           8946         F8            mov	-8[bp],ax
25636                                           !BCC_EOS
25637                                           ! 3541  rows = vde / lines;
25638                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25639 6814           8A46         04            mov	al,4[bp]
25640 6817           30E4                       xor	ah,ah
25641 6819           89C3                       mov	bx,ax
25642 681B           8B46         F8            mov	ax,-8[bp]
25643 681E           E8         FEFA            call	idiv_u
25644                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25645 6821           8846         F5            mov	-$B[bp],al
25646                                           !BCC_EOS
25647                                           ! 3542  write_byte(0x40,0x84, rows-1);
25648                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25649 6824           8A46         F5            mov	al,-$B[bp]
25650 6827           30E4                       xor	ah,ah
25651                                           ! Debug: list unsigned int = ax-1 (used reg = )
25652 6829           48                         dec	ax
25653 682A           50                         push	ax
25654                                           ! Debug: list int = const $84 (used reg = )
25655 682B           B8                   0084  mov	ax,#$84
25656 682E           50                         push	ax
25657                                           ! Debug: list int = const $40 (used reg = )
25658 682F           B8                   0040  mov	ax,*$40
25659 6832           50                         push	ax
25660                                           ! Debug: func () void = write_byte+0 (used reg = )
25661 6833           E8         17BF            call	_write_byte
25662 6836           83C4                   06  add	sp,*6
25663                                           !BCC_EOS
25664                                           ! 3543  cols = read_word(0x40,0x4A);
25665                                           ! Debug: list int = const $4A (used reg = )
25666 6839           B8                   004A  mov	ax,*$4A
25667 683C           50                         push	ax
25668                                           ! Debug: list int = const $40 (used reg = )
25669 683D           B8                   0040  mov	ax,*$40
25670 6840           50                         push	ax
25671                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25672 6841           E8         179E            call	_read_word
25673 6844           83C4                   04  add	sp,*4
25674                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25675 6847           8946         FC            mov	-4[bp],ax
25676                                           !BCC_EOS
25677                                           ! 3544  write_word(0x40,0x4C, rows * cols * 2);
25678                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25679 684A           8A46         F5            mov	al,-$B[bp]
25680 684D           30E4                       xor	ah,ah
25681 684F           8B4E         FC            mov	cx,-4[bp]
25682 6852           F7E9                       imul	cx
25683                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25684 6854           D1E0                       shl	ax,*1
25685                                           ! Debug: list unsigned int = ax+0 (used reg = )
25686 6856           50                         push	ax
25687                                           ! Debug: list int = const $4C (used reg = )
25688 6857           B8                   004C  mov	ax,*$4C
25689 685A           50                         push	ax
25690                                           ! Debug: list int = const $40 (used reg = )
25691 685B           B8                   0040  mov	ax,*$40
25692 685E           50                         push	ax
25693                                           ! Debug: func () void = write_word+0 (used reg = )
25694 685F           E8         17AB            call	_write_word
25695 6862           83C4                   06  add	sp,*6
25696                                           !BCC_EOS
25697                                           ! 3545 }
25698 6865           89EC                       mov	sp,bp
25699 6867           5D                         pop	bp
25700 6868           C3                         ret
25701                                           ! 3546 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25702                                           ! Register BX used in function set_scan_lines
25703                       00006869            _biosfn_load_text_user_pat:
25704                                           !BCC_EOS
25705                                           !BCC_EOS
25706                                           !BCC_EOS
25707                                           !BCC_EOS
25708                                           !BCC_EOS
25709                                           !BCC_EOS
25710                                           !BCC_EOS
25711                                           ! 3547 {
25712                                           ! 3548  Bit16u blockaddr,dest,i,src;
25713                                           !BCC_EOS
25714                                           ! 3549  get_font_access();
25715 6869           55                         push	bp
25716 686A           89E5                       mov	bp,sp
25717 686C           83C4                   F8  add	sp,*-8
25718                                           ! Debug: func () void = get_font_access+0 (used reg = )
25719 686F           E8         FE57            call	_get_font_access
25720                                           !BCC_EOS
25721                                           ! 3550  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25722                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25723 6872           8A46         0E            mov	al,$E[bp]
25724 6875           24                     04  and	al,*4
25725                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25726 6877           30E4                       xor	ah,ah
25727 6879           88C4                       mov	ah,al
25728 687B           30C0                       xor	al,al
25729 687D           B1                     03  mov	cl,*3
25730 687F           D3E0                       shl	ax,cl
25731 6881           50                         push	ax
25732                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25733 6882           8A46         0E            mov	al,$E[bp]
25734 6885           24                     03  and	al,*3
25735                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25736 6887           30E4                       xor	ah,ah
25737 6889           88C4                       mov	ah,al
25738 688B           30C0                       xor	al,al
25739 688D           B1                     06  mov	cl,*6
25740 688F           D3E0                       shl	ax,cl
25741                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25742 6891           0346         F6            add	ax,-$A[bp]
25743 6894           44                         inc	sp
25744 6895           44                         inc	sp
25745                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25746 6896           8946         FE            mov	-2[bp],ax
25747                                           !BCC_EOS
25748                                           ! 3551  for(i=0;i<CX;i++)
25749                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25750 6899           31C0                       xor	ax,ax
25751 689B           8946         FA            mov	-6[bp],ax
25752                                           !BCC_EOS
25753                                           !BCC_EOS
25754                                           ! 3552   {
25755 689E           EB           44            jmp .223
25756                       000068A0            .224:
25757                                           ! 3553    src = BP + i * BH;
25758                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25759 68A0           8A46         10            mov	al,$10[bp]
25760 68A3           30E4                       xor	ah,ah
25761 68A5           89C3                       mov	bx,ax
25762 68A7           8B46         FA            mov	ax,-6[bp]
25763 68AA           89D9                       mov	cx,bx
25764 68AC           F7E9                       imul	cx
25765                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25766                                           ! Debug: expression subtree swapping
25767 68AE           0346         08            add	ax,8[bp]
25768                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25769 68B1           8946         F8            mov	-8[bp],ax
25770                                           !BCC_EOS
25771                                           ! 3554    dest = blockaddr + (DX + i) * 32;
25772                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25773 68B4           8B46         0C            mov	ax,$C[bp]
25774 68B7           0346         FA            add	ax,-6[bp]
25775                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25776 68BA           B1                     05  mov	cl,*5
25777 68BC           D3E0                       shl	ax,cl
25778                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25779                                           ! Debug: expression subtree swapping
25780 68BE           0346         FE            add	ax,-2[bp]
25781                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25782 68C1           8946         FC            mov	-4[bp],ax
25783                                           !BCC_EOS
25784                                           ! 3555    memcpyb(0xA000, dest, ES, src, BH);
25785                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25786 68C4           8A46         10            mov	al,$10[bp]
25787 68C7           30E4                       xor	ah,ah
25788 68C9           50                         push	ax
25789                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25790 68CA           FF76         F8            push	-8[bp]
25791                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25792 68CD           FF76         06            push	6[bp]
25793                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25794 68D0           FF76         FC            push	-4[bp]
25795                                           ! Debug: list unsigned int = const $A000 (used reg = )
25796 68D3           B8                   A000  mov	ax,#$A000
25797 68D6           50                         push	ax
25798                                           ! Debug: func () void = memcpyb+0 (used reg = )
25799 68D7           E8         1695            call	_memcpyb
25800 68DA           83C4                   0A  add	sp,*$A
25801                                           !BCC_EOS
25802                                           ! 3556   }
25803                                           ! 3557  release_font_access();
25804                       000068DD            .222:
25805                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25806 68DD           8B46         FA            mov	ax,-6[bp]
25807 68E0           40                         inc	ax
25808 68E1           8946         FA            mov	-6[bp],ax
25809                       000068E4            .223:
25810                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25811 68E4           8B46         FA            mov	ax,-6[bp]
25812 68E7           3B46         0A            cmp	ax,$A[bp]
25813 68EA           72           B4            jb 	.224
25814                       000068EC            .225:
25815                       000068EC            .221:
25816                                           ! Debug: func () void = release_font_access+0 (used reg = )
25817 68EC           E8         FDFD            call	_release_font_access
25818                                           !BCC_EOS
25819                                           ! 3558  if(AL>=0x10)
25820                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25821 68EF           8A46         04            mov	al,4[bp]
25822 68F2           3C                     10  cmp	al,*$10
25823 68F4           72           0B            jb  	.226
25824                       000068F6            .227:
25825                                           ! 3559   {
25826                                           ! 3560    set_scan_lines(BH);
25827                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25828 68F6           8A46         10            mov	al,$10[bp]
25829 68F9           30E4                       xor	ah,ah
25830 68FB           50                         push	ax
25831                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25832 68FC           E8         FE21            call	_set_scan_lines
25833 68FF           44                         inc	sp
25834 6900           44                         inc	sp
25835                                           !BCC_EOS
25836                                           ! 3561   }
25837                                           ! 3562 }
25838                       00006901            .226:
25839 6901           89EC                       mov	sp,bp
25840 6903           5D                         pop	bp
25841 6904           C3                         ret
25842                                           ! 3563 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25843                                           ! Register BX used in function biosfn_load_text_user_pat
25844                       00006905            _biosfn_load_text_8_14_pat:
25845                                           !BCC_EOS
25846                                           ! 3563 
25847                                           !BCC_EOS
25848                                           ! 3564 {
25849                                           ! 3565  Bit16u blockaddr,dest,i,src;
25850                                           !BCC_EOS
25851                                           ! 3566  get_font_access();
25852 6905           55                         push	bp
25853 6906           89E5                       mov	bp,sp
25854 6908           83C4                   F8  add	sp,*-8
25855                                           ! Debug: func () void = get_font_access+0 (used reg = )
25856 690B           E8         FDBB            call	_get_font_access
25857                                           !BCC_EOS
25858                                           ! 3567  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25859                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25860 690E           8A46         06            mov	al,6[bp]
25861 6911           24                     04  and	al,*4
25862                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25863 6913           30E4                       xor	ah,ah
25864 6915           88C4                       mov	ah,al
25865 6917           30C0                       xor	al,al
25866 6919           B1                     03  mov	cl,*3
25867 691B           D3E0                       shl	ax,cl
25868 691D           50                         push	ax
25869                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25870 691E           8A46         06            mov	al,6[bp]
25871 6921           24                     03  and	al,*3
25872                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25873 6923           30E4                       xor	ah,ah
25874 6925           88C4                       mov	ah,al
25875 6927           30C0                       xor	al,al
25876 6929           B1                     06  mov	cl,*6
25877 692B           D3E0                       shl	ax,cl
25878                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25879 692D           0346         F6            add	ax,-$A[bp]
25880 6930           44                         inc	sp
25881 6931           44                         inc	sp
25882                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25883 6932           8946         FE            mov	-2[bp],ax
25884                                           !BCC_EOS
25885                                           ! 3568  for(i=0;i<0x100;i++)
25886                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25887 6935           31C0                       xor	ax,ax
25888 6937           8946         FA            mov	-6[bp],ax
25889                                           !BCC_EOS
25890                                           !BCC_EOS
25891                                           ! 3569   {
25892 693A           EB           41            jmp .22A
25893                       0000693C            .22B:
25894                                           ! 3570    src = i * 14;
25895                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25896 693C           8B46         FA            mov	ax,-6[bp]
25897 693F           89C2                       mov	dx,ax
25898 6941           B1                     03  mov	cl,*3
25899 6943           D3E0                       shl	ax,cl
25900 6945           29D0                       sub	ax,dx
25901 6947           D1E0                       shl	ax,*1
25902                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25903 6949           8946         F8            mov	-8[bp],ax
25904                                           !BCC_EOS
25905                                           ! 3571    dest = blockaddr + i * 32;
25906                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25907 694C           8B46         FA            mov	ax,-6[bp]
25908 694F           B1                     05  mov	cl,*5
25909 6951           D3E0                       shl	ax,cl
25910                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25911                                           ! Debug: expression subtree swapping
25912 6953           0346         FE            add	ax,-2[bp]
25913                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25914 6956           8946         FC            mov	-4[bp],ax
25915                                           !BCC_EOS
25916                                           ! 3572    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25917                                           ! Debug: list int = const $E (used reg = )
25918 6959           B8                   000E  mov	ax,*$E
25919 695C           50                         push	ax
25920                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25921 695D           8B5E         F8            mov	bx,-8[bp]
25922                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25923                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25924 6960           81C3                 17A9  add	bx,#_vgafont14
25925 6964           53                         push	bx
25926                                           ! Debug: list unsigned int = const $C000 (used reg = )
25927 6965           B8                   C000  mov	ax,#$C000
25928 6968           50                         push	ax
25929                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25930 6969           FF76         FC            push	-4[bp]
25931                                           ! Debug: list unsigned int = const $A000 (used reg = )
25932 696C           B8                   A000  mov	ax,#$A000
25933 696F           50                         push	ax
25934                                           ! Debug: func () void = memcpyb+0 (used reg = )
25935 6970           E8         15FC            call	_memcpyb
25936 6973           83C4                   0A  add	sp,*$A
25937                                           !BCC_EOS
25938                                           ! 3573   }
25939                                           ! 3574  release_font_access();
25940                       00006976            .229:
25941                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25942 6976           8B46         FA            mov	ax,-6[bp]
25943 6979           40                         inc	ax
25944 697A           8946         FA            mov	-6[bp],ax
25945                       0000697D            .22A:
25946                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25947 697D           8B46         FA            mov	ax,-6[bp]
25948 6980           3D                   0100  cmp	ax,#$100
25949 6983           72           B7            jb 	.22B
25950                       00006985            .22C:
25951                       00006985            .228:
25952                                           ! Debug: func () void = release_font_access+0 (used reg = )
25953 6985           E8         FD64            call	_release_font_access
25954                                           !BCC_EOS
25955                                           ! 3575  if(AL>=0x10)
25956                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25957 6988           8A46         04            mov	al,4[bp]
25958 698B           3C                     10  cmp	al,*$10
25959 698D           72           09            jb  	.22D
25960                       0000698F            .22E:
25961                                           ! 3576   {
25962                                           ! 3577    set_scan_lines(14);
25963                                           ! Debug: list int = const $E (used reg = )
25964 698F           B8                   000E  mov	ax,*$E
25965 6992           50                         push	ax
25966                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25967 6993           E8         FD8A            call	_set_scan_lines
25968 6996           44                         inc	sp
25969 6997           44                         inc	sp
25970                                           !BCC_EOS
25971                                           ! 3578   }
25972                                           ! 3579 }
25973                       00006998            .22D:
25974 6998           89EC                       mov	sp,bp
25975 699A           5D                         pop	bp
25976 699B           C3                         ret
25977                                           ! 3580 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25978                                           ! Register BX used in function biosfn_load_text_8_14_pat
25979                       0000699C            _biosfn_load_text_8_8_pat:
25980                                           !BCC_EOS
25981                                           !BCC_EOS
25982                                           ! 3581 {
25983                                           ! 3582  Bit16u blockaddr,dest,i,src;
25984                                           !BCC_EOS
25985                                           ! 3583  get_font_access();
25986 699C           55                         push	bp
25987 699D           89E5                       mov	bp,sp
25988 699F           83C4                   F8  add	sp,*-8
25989                                           ! Debug: func () void = get_font_access+0 (used reg = )
25990 69A2           E8         FD24            call	_get_font_access
25991                                           !BCC_EOS
25992                                           ! 3584  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25993                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25994 69A5           8A46         06            mov	al,6[bp]
25995 69A8           24                     04  and	al,*4
25996                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25997 69AA           30E4                       xor	ah,ah
25998 69AC           88C4                       mov	ah,al
25999 69AE           30C0                       xor	al,al
26000 69B0           B1                     03  mov	cl,*3
26001 69B2           D3E0                       shl	ax,cl
26002 69B4           50                         push	ax
26003                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26004 69B5           8A46         06            mov	al,6[bp]
26005 69B8           24                     03  and	al,*3
26006                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26007 69BA           30E4                       xor	ah,ah
26008 69BC           88C4                       mov	ah,al
26009 69BE           30C0                       xor	al,al
26010 69C0           B1                     06  mov	cl,*6
26011 69C2           D3E0                       shl	ax,cl
26012                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26013 69C4           0346         F6            add	ax,-$A[bp]
26014 69C7           44                         inc	sp
26015 69C8           44                         inc	sp
26016                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26017 69C9           8946         FE            mov	-2[bp],ax
26018                                           !BCC_EOS
26019                                           ! 3585  for(i=0;i<0x100;i++)
26020                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26021 69CC           31C0                       xor	ax,ax
26022 69CE           8946         FA            mov	-6[bp],ax
26023                                           !BCC_EOS
26024                                           !BCC_EOS
26025                                           ! 3586   {
26026 69D1           EB           3B            jmp .231
26027                       000069D3            .232:
26028                                           ! 3587    src = i * 8;
26029                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
26030 69D3           8B46         FA            mov	ax,-6[bp]
26031 69D6           B1                     03  mov	cl,*3
26032 69D8           D3E0                       shl	ax,cl
26033                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26034 69DA           8946         F8            mov	-8[bp],ax
26035                                           !BCC_EOS
26036                                           ! 3588    dest = blockaddr + i * 32;
26037                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26038 69DD           8B46         FA            mov	ax,-6[bp]
26039 69E0           B1                     05  mov	cl,*5
26040 69E2           D3E0                       shl	ax,cl
26041                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26042                                           ! Debug: expression subtree swapping
26043 69E4           0346         FE            add	ax,-2[bp]
26044                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26045 69E7           8946         FC            mov	-4[bp],ax
26046                                           !BCC_EOS
26047                                           ! 3589    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
26048                                           ! Debug: list int = const 8 (used reg = )
26049 69EA           B8                   0008  mov	ax,*8
26050 69ED           50                         push	ax
26051                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
26052 69EE           8B5E         F8            mov	bx,-8[bp]
26053                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
26054                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
26055 69F1           81C3                 0FA9  add	bx,#_vgafont8
26056 69F5           53                         push	bx
26057                                           ! Debug: list unsigned int = const $C000 (used reg = )
26058 69F6           B8                   C000  mov	ax,#$C000
26059 69F9           50                         push	ax
26060                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26061 69FA           FF76         FC            push	-4[bp]
26062                                           ! Debug: list unsigned int = const $A000 (used reg = )
26063 69FD           B8                   A000  mov	ax,#$A000
26064 6A00           50                         push	ax
26065                                           ! Debug: func () void = memcpyb+0 (used reg = )
26066 6A01           E8         156B            call	_memcpyb
26067 6A04           83C4                   0A  add	sp,*$A
26068                                           !BCC_EOS
26069                                           ! 3590   }
26070                                           ! 3591  release_font_access();
26071                       00006A07            .230:
26072                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26073 6A07           8B46         FA            mov	ax,-6[bp]
26074 6A0A           40                         inc	ax
26075 6A0B           8946         FA            mov	-6[bp],ax
26076                       00006A0E            .231:
26077                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26078 6A0E           8B46         FA            mov	ax,-6[bp]
26079 6A11           3D                   0100  cmp	ax,#$100
26080 6A14           72           BD            jb 	.232
26081                       00006A16            .233:
26082                       00006A16            .22F:
26083                                           ! Debug: func () void = release_font_access+0 (used reg = )
26084 6A16           E8         FCD3            call	_release_font_access
26085                                           !BCC_EOS
26086                                           ! 3592  if(AL>=0x10)
26087                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26088 6A19           8A46         04            mov	al,4[bp]
26089 6A1C           3C                     10  cmp	al,*$10
26090 6A1E           72           09            jb  	.234
26091                       00006A20            .235:
26092                                           ! 3593   {
26093                                           ! 3594    set_scan_lines(8);
26094                                           ! Debug: list int = const 8 (used reg = )
26095 6A20           B8                   0008  mov	ax,*8
26096 6A23           50                         push	ax
26097                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26098 6A24           E8         FCF9            call	_set_scan_lines
26099 6A27           44                         inc	sp
26100 6A28           44                         inc	sp
26101                                           !BCC_EOS
26102                                           ! 3595   }
26103                                           ! 3596 }
26104                       00006A29            .234:
26105 6A29           89EC                       mov	sp,bp
26106 6A2B           5D                         pop	bp
26107 6A2C           C3                         ret
26108                                           ! 3597 #asm
26109                                           !BCC_ASM
26110                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
26111                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
26112                       00006A2D            biosfn_set_text_block_specifier:
26113 6A2D           50                           push ax
26114 6A2E           52                           push dx
26115 6A2F           BA                   03C4    mov dx, # 0x3c4
26116 6A32           88DC                         mov ah, bl
26117 6A34           B0                     03    mov al, #0x03
26118 6A36           EF                           out dx, ax
26119 6A37           5A                           pop dx
26120 6A38           58                           pop ax
26121 6A39           C3                           ret
26122                                           ! 3608 endasm
26123                                           !BCC_ENDASM
26124                                           ! 3609 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
26125                                           ! Register BX used in function biosfn_load_text_8_8_pat
26126                       00006A3A            _biosfn_load_text_8_16_pat:
26127                                           !BCC_EOS
26128                                           !BCC_EOS
26129                                           ! 3610 {
26130                                           ! 3611  Bit16u blockaddr,dest,i,src;
26131                                           !BCC_EOS
26132                                           ! 3612  get_font_access();
26133 6A3A           55                         push	bp
26134 6A3B           89E5                       mov	bp,sp
26135 6A3D           83C4                   F8  add	sp,*-8
26136                                           ! Debug: func () void = get_font_access+0 (used reg = )
26137 6A40           E8         FC86            call	_get_font_access
26138                                           !BCC_EOS
26139                                           ! 3613  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
26140                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
26141 6A43           8A46         06            mov	al,6[bp]
26142 6A46           24                     04  and	al,*4
26143                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
26144 6A48           30E4                       xor	ah,ah
26145 6A4A           88C4                       mov	ah,al
26146 6A4C           30C0                       xor	al,al
26147 6A4E           B1                     03  mov	cl,*3
26148 6A50           D3E0                       shl	ax,cl
26149 6A52           50                         push	ax
26150                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26151 6A53           8A46         06            mov	al,6[bp]
26152 6A56           24                     03  and	al,*3
26153                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26154 6A58           30E4                       xor	ah,ah
26155 6A5A           88C4                       mov	ah,al
26156 6A5C           30C0                       xor	al,al
26157 6A5E           B1                     06  mov	cl,*6
26158 6A60           D3E0                       shl	ax,cl
26159                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26160 6A62           0346         F6            add	ax,-$A[bp]
26161 6A65           44                         inc	sp
26162 6A66           44                         inc	sp
26163                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26164 6A67           8946         FE            mov	-2[bp],ax
26165                                           !BCC_EOS
26166                                           ! 3614  for(i=0;i<0x100;i++)
26167                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26168 6A6A           31C0                       xor	ax,ax
26169 6A6C           8946         FA            mov	-6[bp],ax
26170                                           !BCC_EOS
26171                                           !BCC_EOS
26172                                           ! 3615   {
26173 6A6F           EB           3B            jmp .238
26174                       00006A71            .239:
26175                                           ! 3616    src = i * 16;
26176                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
26177 6A71           8B46         FA            mov	ax,-6[bp]
26178 6A74           B1                     04  mov	cl,*4
26179 6A76           D3E0                       shl	ax,cl
26180                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26181 6A78           8946         F8            mov	-8[bp],ax
26182                                           !BCC_EOS
26183                                           ! 3617    dest = blockaddr + i * 32;
26184                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26185 6A7B           8B46         FA            mov	ax,-6[bp]
26186 6A7E           B1                     05  mov	cl,*5
26187 6A80           D3E0                       shl	ax,cl
26188                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26189                                           ! Debug: expression subtree swapping
26190 6A82           0346         FE            add	ax,-2[bp]
26191                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26192 6A85           8946         FC            mov	-4[bp],ax
26193                                           !BCC_EOS
26194                                           ! 3618    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
26195                                           ! Debug: list int = const $10 (used reg = )
26196 6A88           B8                   0010  mov	ax,*$10
26197 6A8B           50                         push	ax
26198                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26199 6A8C           8B5E         F8            mov	bx,-8[bp]
26200                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26201                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26202 6A8F           81C3                 25A9  add	bx,#_vgafont16
26203 6A93           53                         push	bx
26204                                           ! Debug: list unsigned int = const $C000 (used reg = )
26205 6A94           B8                   C000  mov	ax,#$C000
26206 6A97           50                         push	ax
26207                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26208 6A98           FF76         FC            push	-4[bp]
26209                                           ! Debug: list unsigned int = const $A000 (used reg = )
26210 6A9B           B8                   A000  mov	ax,#$A000
26211 6A9E           50                         push	ax
26212                                           ! Debug: func () void = memcpyb+0 (used reg = )
26213 6A9F           E8         14CD            call	_memcpyb
26214 6AA2           83C4                   0A  add	sp,*$A
26215                                           !BCC_EOS
26216                                           ! 3619   }
26217                                           ! 3620  release_font_access();
26218                       00006AA5            .237:
26219                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26220 6AA5           8B46         FA            mov	ax,-6[bp]
26221 6AA8           40                         inc	ax
26222 6AA9           8946         FA            mov	-6[bp],ax
26223                       00006AAC            .238:
26224                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26225 6AAC           8B46         FA            mov	ax,-6[bp]
26226 6AAF           3D                   0100  cmp	ax,#$100
26227 6AB2           72           BD            jb 	.239
26228                       00006AB4            .23A:
26229                       00006AB4            .236:
26230                                           ! Debug: func () void = release_font_access+0 (used reg = )
26231 6AB4           E8         FC35            call	_release_font_access
26232                                           !BCC_EOS
26233                                           ! 3621  if(AL>=0x10)
26234                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26235 6AB7           8A46         04            mov	al,4[bp]
26236 6ABA           3C                     10  cmp	al,*$10
26237 6ABC           72           09            jb  	.23B
26238                       00006ABE            .23C:
26239                                           ! 3622   {
26240                                           ! 3623    set_scan_lines(16);
26241                                           ! Debug: list int = const $10 (used reg = )
26242 6ABE           B8                   0010  mov	ax,*$10
26243 6AC1           50                         push	ax
26244                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26245 6AC2           E8         FC5B            call	_set_scan_lines
26246 6AC5           44                         inc	sp
26247 6AC6           44                         inc	sp
26248                                           !BCC_EOS
26249                                           ! 3624   }
26250                                           ! 3625 }
26251                       00006AC7            .23B:
26252 6AC7           89EC                       mov	sp,bp
26253 6AC9           5D                         pop	bp
26254 6ACA           C3                         ret
26255                                           ! 3626 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26256                                           ! Register BX used in function biosfn_load_text_8_16_pat
26257                       00006ACB            _biosfn_load_gfx_8_8_chars:
26258                                           !BCC_EOS
26259                                           !BCC_EOS
26260                                           ! 3627 {
26261                                           ! 3628     write_word(0x0, 0x1F*4, BP);
26262 6ACB           55                         push	bp
26263 6ACC           89E5                       mov	bp,sp
26264                                           ! Debug: list unsigned short BP = [S+2+4] (used reg = )
26265 6ACE           FF76         06            push	6[bp]
26266                                           ! Debug: list int = const $7C (used reg = )
26267 6AD1           B8                   007C  mov	ax,*$7C
26268 6AD4           50                         push	ax
26269                                           ! Debug: list int = const 0 (used reg = )
26270 6AD5           31C0                       xor	ax,ax
26271 6AD7           50                         push	ax
26272                                           ! Debug: func () void = write_word+0 (used reg = )
26273 6AD8           E8         1532            call	_write_word
26274 6ADB           89EC                       mov	sp,bp
26275                                           !BCC_EOS
26276                                           ! 3629     write_word(0x0, 0x1F*4+2, ES);
26277                                           ! Debug: list unsigned short ES = [S+2+2] (used reg = )
26278 6ADD           FF76         04            push	4[bp]
26279                                           ! Debug: list int = const $7E (used reg = )
26280 6AE0           B8                   007E  mov	ax,*$7E
26281 6AE3           50                         push	ax
26282                                           ! Debug: list int = const 0 (used reg = )
26283 6AE4           31C0                       xor	ax,ax
26284 6AE6           50                         push	ax
26285                                           ! Debug: func () void = write_word+0 (used reg = )
26286 6AE7           E8         1523            call	_write_word
26287 6AEA           89EC                       mov	sp,bp
26288                                           !BCC_EOS
26289                                           ! 3630     write_byte(0x40, 0x85, 8);
26290                                           ! Debug: list int = const 8 (used reg = )
26291 6AEC           B8                   0008  mov	ax,*8
26292 6AEF           50                         push	ax
26293                                           ! Debug: list int = const $85 (used reg = )
26294 6AF0           B8                   0085  mov	ax,#$85
26295 6AF3           50                         push	ax
26296                                           ! Debug: list int = const $40 (used reg = )
26297 6AF4           B8                   0040  mov	ax,*$40
26298 6AF7           50                         push	ax
26299                                           ! Debug: func () void = write_byte+0 (used reg = )
26300 6AF8           E8         14FA            call	_write_byte
26301 6AFB           89EC                       mov	sp,bp
26302                                           !BCC_EOS
26303                                           ! 3631 }
26304 6AFD           5D                         pop	bp
26305 6AFE           C3                         ret
26306                                           ! 3632 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26307                       00006AFF            _biosfn_load_gfx_user_chars:
26308                                           !BCC_EOS
26309                                           !BCC_EOS
26310                                           !BCC_EOS
26311                                           !BCC_EOS
26312                                           !BCC_EOS
26313                                           ! 3633 {
26314                                           ! 3634     Bit8u mode; Bit8u line;
26315                                           !BCC_EOS
26316                                           !BCC_EOS
26317                                           ! 3635     write_word(0x0, 0x43*4, BP);
26318 6AFF           55                         push	bp
26319 6B00           89E5                       mov	bp,sp
26320 6B02           4C                         dec	sp
26321 6B03           4C                         dec	sp
26322                                           ! Debug: list unsigned short BP = [S+4+4] (used reg = )
26323 6B04           FF76         06            push	6[bp]
26324                                           ! Debug: list int = const $10C (used reg = )
26325 6B07           B8                   010C  mov	ax,#$10C
26326 6B0A           50                         push	ax
26327                                           ! Debug: list int = const 0 (used reg = )
26328 6B0B           31C0                       xor	ax,ax
26329 6B0D           50                         push	ax
26330                                           ! Debug: func () void = write_word+0 (used reg = )
26331 6B0E           E8         14FC            call	_write_word
26332 6B11           83C4                   06  add	sp,*6
26333                                           !BCC_EOS
26334                                           ! 3636     write_word(0x0, 0x43*4+2, ES);
26335                                           ! Debug: list unsigned short ES = [S+4+2] (used reg = )
26336 6B14           FF76         04            push	4[bp]
26337                                           ! Debug: list int = const $10E (used reg = )
26338 6B17           B8                   010E  mov	ax,#$10E
26339 6B1A           50                         push	ax
26340                                           ! Debug: list int = const 0 (used reg = )
26341 6B1B           31C0                       xor	ax,ax
26342 6B1D           50                         push	ax
26343                                           ! Debug: func () void = write_word+0 (used reg = )
26344 6B1E           E8         14EC            call	_write_word
26345 6B21           83C4                   06  add	sp,*6
26346                                           !BCC_EOS
26347                                           ! 3637     switch (BL) {
26348 6B24           8A46         0A            mov	al,$A[bp]
26349 6B27           EB           55            jmp .23F
26350                                           ! 3638     case 0:
26351                                           ! 3639  write_byte(0x40,0x84, DL-1);
26352                       00006B29            .240:
26353                                           ! Debug: sub int = const 1 to unsigned char DL = [S+4+$A] (used reg = )
26354 6B29           8A46         0C            mov	al,$C[bp]
26355 6B2C           30E4                       xor	ah,ah
26356                                           ! Debug: list unsigned int = ax-1 (used reg = )
26357 6B2E           48                         dec	ax
26358 6B2F           50                         push	ax
26359                                           ! Debug: list int = const $84 (used reg = )
26360 6B30           B8                   0084  mov	ax,#$84
26361 6B33           50                         push	ax
26362                                           ! Debug: list int = const $40 (used reg = )
26363 6B34           B8                   0040  mov	ax,*$40
26364 6B37           50                         push	ax
26365                                           ! Debug: func () void = write_byte+0 (used reg = )
26366 6B38           E8         14BA            call	_write_byte
26367 6B3B           83C4                   06  add	sp,*6
26368                                           !BCC_EOS
26369                                           ! 3640  break;
26370 6B3E           EB           50            jmp .23D
26371                                           !BCC_EOS
26372                                           ! 3641     case 1:
26373                                           ! 3642  write_byte(0x40,0x84, 13);
26374                       00006B40            .241:
26375                                           ! Debug: list int = const $D (used reg = )
26376 6B40           B8                   000D  mov	ax,*$D
26377 6B43           50                         push	ax
26378                                           ! Debug: list int = const $84 (used reg = )
26379 6B44           B8                   0084  mov	ax,#$84
26380 6B47           50                         push	ax
26381                                           ! Debug: list int = const $40 (used reg = )
26382 6B48           B8                   0040  mov	ax,*$40
26383 6B4B           50                         push	ax
26384                                           ! Debug: func () void = write_byte+0 (used reg = )
26385 6B4C           E8         14A6            call	_write_byte
26386 6B4F           83C4                   06  add	sp,*6
26387                                           !BCC_EOS
26388                                           ! 3643  break;
26389 6B52           EB           3C            jmp .23D
26390                                           !BCC_EOS
26391                                           ! 3644     case 3:
26392                                           ! 3645  write_byte(0x40,0x84, 42);
26393                       00006B54            .242:
26394                                           ! Debug: list int = const $2A (used reg = )
26395 6B54           B8                   002A  mov	ax,*$2A
26396 6B57           50                         push	ax
26397                                           ! Debug: list int = const $84 (used reg = )
26398 6B58           B8                   0084  mov	ax,#$84
26399 6B5B           50                         push	ax
26400                                           ! Debug: list int = const $40 (used reg = )
26401 6B5C           B8                   0040  mov	ax,*$40
26402 6B5F           50                         push	ax
26403                                           ! Debug: func () void = write_byte+0 (used reg = )
26404 6B60           E8         1492            call	_write_byte
26405 6B63           83C4                   06  add	sp,*6
26406                                           !BCC_EOS
26407                                           ! 3646  break;
26408 6B66           EB           28            jmp .23D
26409                                           !BCC_EOS
26410                                           ! 3647     case 2:
26411                                           ! 3648     default:
26412                       00006B68            .243:
26413                                           ! 3649  write_byte(0x40,0x84, 24);
26414                       00006B68            .244:
26415                                           ! Debug: list int = const $18 (used reg = )
26416 6B68           B8                   0018  mov	ax,*$18
26417 6B6B           50                         push	ax
26418                                           ! Debug: list int = const $84 (used reg = )
26419 6B6C           B8                   0084  mov	ax,#$84
26420 6B6F           50                         push	ax
26421                                           ! Debug: list int = const $40 (used reg = )
26422 6B70           B8                   0040  mov	ax,*$40
26423 6B73           50                         push	ax
26424                                           ! Debug: func () void = write_byte+0 (used reg = )
26425 6B74           E8         147E            call	_write_byte
26426 6B77           83C4                   06  add	sp,*6
26427                                           !BCC_EOS
26428                                           ! 3650  break;
26429 6B7A           EB           14            jmp .23D
26430                                           !BCC_EOS
26431                                           ! 3651     }
26432                                           ! 3652     write_byte(0x40, 0x85, CX);
26433 6B7C           EB           12            jmp .23D
26434                       00006B7E            .23F:
26435 6B7E           2C                     00  sub	al,*0
26436 6B80           74           A7            je 	.240
26437 6B82           2C                     01  sub	al,*1
26438 6B84           74           BA            je 	.241
26439 6B86           2C                     01  sub	al,*1
26440 6B88           74           DE            je 	.243
26441 6B8A           2C                     01  sub	al,*1
26442 6B8C           74           C6            je 	.242
26443 6B8E           EB           D8            jmp	.244
26444                       00006B90            .23D:
26445                       FFFFFFFC            ..FFF5	=	-4
26446                                           ! Debug: list unsigned short CX = [S+4+6] (used reg = )
26447 6B90           FF76         08            push	8[bp]
26448                                           ! Debug: list int = const $85 (used reg = )
26449 6B93           B8                   0085  mov	ax,#$85
26450 6B96           50                         push	ax
26451                                           ! Debug: list int = const $40 (used reg = )
26452 6B97           B8                   0040  mov	ax,*$40
26453 6B9A           50                         push	ax
26454                                           ! Debug: func () void = write_byte+0 (used reg = )
26455 6B9B           E8         1457            call	_write_byte
26456 6B9E           83C4                   06  add	sp,*6
26457                                           !BCC_EOS
26458                                           ! 3653 }
26459 6BA1           89EC                       mov	sp,bp
26460 6BA3           5D                         pop	bp
26461 6BA4           C3                         ret
26462                                           ! 3654 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26463                       00006BA5            _biosfn_load_gfx_8_14_chars:
26464                                           !BCC_EOS
26465                                           ! 3655 {
26466                                           ! 3656     write_word(0x0, 0x43*4, &vgafont14);
26467 6BA5           55                         push	bp
26468 6BA6           89E5                       mov	bp,sp
26469                                           ! Debug: list * [$E00] unsigned char = vgafont14+0 (used reg = )
26470 6BA8           BB                   17A9  mov	bx,#_vgafont14
26471 6BAB           53                         push	bx
26472                                           ! Debug: list int = const $10C (used reg = )
26473 6BAC           B8                   010C  mov	ax,#$10C
26474 6BAF           50                         push	ax
26475                                           ! Debug: list int = const 0 (used reg = )
26476 6BB0           31C0                       xor	ax,ax
26477 6BB2           50                         push	ax
26478                                           ! Debug: func () void = write_word+0 (used reg = )
26479 6BB3           E8         1457            call	_write_word
26480 6BB6           89EC                       mov	sp,bp
26481                                           !BCC_EOS
26482                                           ! 3657     write_word(0x0, 0x43*4+2, 0xC000);
26483                                           ! Debug: list unsigned int = const $C000 (used reg = )
26484 6BB8           B8                   C000  mov	ax,#$C000
26485 6BBB           50                         push	ax
26486                                           ! Debug: list int = const $10E (used reg = )
26487 6BBC           B8                   010E  mov	ax,#$10E
26488 6BBF           50                         push	ax
26489                                           ! Debug: list int = const 0 (used reg = )
26490 6BC0           31C0                       xor	ax,ax
26491 6BC2           50                         push	ax
26492                                           ! Debug: func () void = write_word+0 (used reg = )
26493 6BC3           E8         1447            call	_write_word
26494 6BC6           89EC                       mov	sp,bp
26495                                           !BCC_EOS
26496                                           ! 3658     switch (BL) {
26497 6BC8           8A46         04            mov	al,4[bp]
26498 6BCB           EB           3E            jmp .247
26499                                           ! 3659     case 1:
26500                                           ! 3660  write_byte(0x40,0x84, 13);
26501                       00006BCD            .248:
26502                                           ! Debug: list int = const $D (used reg = )
26503 6BCD           B8                   000D  mov	ax,*$D
26504 6BD0           50                         push	ax
26505                                           ! Debug: list int = const $84 (used reg = )
26506 6BD1           B8                   0084  mov	ax,#$84
26507 6BD4           50                         push	ax
26508                                           ! Debug: list int = const $40 (used reg = )
26509 6BD5           B8                   0040  mov	ax,*$40
26510 6BD8           50                         push	ax
26511                                           ! Debug: func () void = write_byte+0 (used reg = )
26512 6BD9           E8         1419            call	_write_byte
26513 6BDC           83C4                   06  add	sp,*6
26514                                           !BCC_EOS
26515                                           ! 3661  break;
26516 6BDF           EB           38            jmp .245
26517                                           !BCC_EOS
26518                                           ! 3662     c
26519                                           ! 3662 ase 3:
26520                                           ! 3663  write_byte(0x40,0x84, 42);
26521                       00006BE1            .249:
26522                                           ! Debug: list int = const $2A (used reg = )
26523 6BE1           B8                   002A  mov	ax,*$2A
26524 6BE4           50                         push	ax
26525                                           ! Debug: list int = const $84 (used reg = )
26526 6BE5           B8                   0084  mov	ax,#$84
26527 6BE8           50                         push	ax
26528                                           ! Debug: list int = const $40 (used reg = )
26529 6BE9           B8                   0040  mov	ax,*$40
26530 6BEC           50                         push	ax
26531                                           ! Debug: func () void = write_byte+0 (used reg = )
26532 6BED           E8         1405            call	_write_byte
26533 6BF0           83C4                   06  add	sp,*6
26534                                           !BCC_EOS
26535                                           ! 3664  break;
26536 6BF3           EB           24            jmp .245
26537                                           !BCC_EOS
26538                                           ! 3665     case 2:
26539                                           ! 3666     default:
26540                       00006BF5            .24A:
26541                                           ! 3667  write_byte(0x40,0x84, 24);
26542                       00006BF5            .24B:
26543                                           ! Debug: list int = const $18 (used reg = )
26544 6BF5           B8                   0018  mov	ax,*$18
26545 6BF8           50                         push	ax
26546                                           ! Debug: list int = const $84 (used reg = )
26547 6BF9           B8                   0084  mov	ax,#$84
26548 6BFC           50                         push	ax
26549                                           ! Debug: list int = const $40 (used reg = )
26550 6BFD           B8                   0040  mov	ax,*$40
26551 6C00           50                         push	ax
26552                                           ! Debug: func () void = write_byte+0 (used reg = )
26553 6C01           E8         13F1            call	_write_byte
26554 6C04           83C4                   06  add	sp,*6
26555                                           !BCC_EOS
26556                                           ! 3668  break;
26557 6C07           EB           10            jmp .245
26558                                           !BCC_EOS
26559                                           ! 3669     }
26560                                           ! 3670     write_byte(0x40, 0x85, 14);
26561 6C09           EB           0E            jmp .245
26562                       00006C0B            .247:
26563 6C0B           2C                     01  sub	al,*1
26564 6C0D           74           BE            je 	.248
26565 6C0F           2C                     01  sub	al,*1
26566 6C11           74           E2            je 	.24A
26567 6C13           2C                     01  sub	al,*1
26568 6C15           74           CA            je 	.249
26569 6C17           EB           DC            jmp	.24B
26570                       00006C19            .245:
26571                       FFFFFFFE            ..FFF4	=	-2
26572                                           ! Debug: list int = const $E (used reg = )
26573 6C19           B8                   000E  mov	ax,*$E
26574 6C1C           50                         push	ax
26575                                           ! Debug: list int = const $85 (used reg = )
26576 6C1D           B8                   0085  mov	ax,#$85
26577 6C20           50                         push	ax
26578                                           ! Debug: list int = const $40 (used reg = )
26579 6C21           B8                   0040  mov	ax,*$40
26580 6C24           50                         push	ax
26581                                           ! Debug: func () void = write_byte+0 (used reg = )
26582 6C25           E8         13CD            call	_write_byte
26583 6C28           89EC                       mov	sp,bp
26584                                           !BCC_EOS
26585                                           ! 3671 }
26586 6C2A           5D                         pop	bp
26587 6C2B           C3                         ret
26588                                           ! 3672 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26589                                           ! Register BX used in function biosfn_load_gfx_8_14_chars
26590                       00006C2C            _biosfn_load_gfx_8_8_dd_chars:
26591                                           !BCC_EOS
26592                                           ! 3673 {
26593                                           ! 3674     write_word(0x0, 0x43*4, &vgafont8);
26594 6C2C           55                         push	bp
26595 6C2D           89E5                       mov	bp,sp
26596                                           ! Debug: list * [$800] unsigned char = vgafont8+0 (used reg = )
26597 6C2F           BB                   0FA9  mov	bx,#_vgafont8
26598 6C32           53                         push	bx
26599                                           ! Debug: list int = const $10C (used reg = )
26600 6C33           B8                   010C  mov	ax,#$10C
26601 6C36           50                         push	ax
26602                                           ! Debug: list int = const 0 (used reg = )
26603 6C37           31C0                       xor	ax,ax
26604 6C39           50                         push	ax
26605                                           ! Debug: func () void = write_word+0 (used reg = )
26606 6C3A           E8         13D0            call	_write_word
26607 6C3D           89EC                       mov	sp,bp
26608                                           !BCC_EOS
26609                                           ! 3675     write_word(0x0, 0x43*4+2, 0xC000);
26610                                           ! Debug: list unsigned int = const $C000 (used reg = )
26611 6C3F           B8                   C000  mov	ax,#$C000
26612 6C42           50                         push	ax
26613                                           ! Debug: list int = const $10E (used reg = )
26614 6C43           B8                   010E  mov	ax,#$10E
26615 6C46           50                         push	ax
26616                                           ! Debug: list int = const 0 (used reg = )
26617 6C47           31C0                       xor	ax,ax
26618 6C49           50                         push	ax
26619                                           ! Debug: func () void = write_word+0 (used reg = )
26620 6C4A           E8         13C0            call	_write_word
26621 6C4D           89EC                       mov	sp,bp
26622                                           !BCC_EOS
26623                                           ! 3676     switch (BL) {
26624 6C4F           8A46         04            mov	al,4[bp]
26625 6C52           EB           3E            jmp .24E
26626                                           ! 3677     case 1:
26627                                           ! 3678  write_byte(0x40,0x84, 13);
26628                       00006C54            .24F:
26629                                           ! Debug: list int = const $D (used reg = )
26630 6C54           B8                   000D  mov	ax,*$D
26631 6C57           50                         push	ax
26632                                           ! Debug: list int = const $84 (used reg = )
26633 6C58           B8                   0084  mov	ax,#$84
26634 6C5B           50                         push	ax
26635                                           ! Debug: list int = const $40 (used reg = )
26636 6C5C           B8                   0040  mov	ax,*$40
26637 6C5F           50                         push	ax
26638                                           ! Debug: func () void = write_byte+0 (used reg = )
26639 6C60           E8         1392            call	_write_byte
26640 6C63           83C4                   06  add	sp,*6
26641                                           !BCC_EOS
26642                                           ! 3679  break;
26643 6C66           EB           38            jmp .24C
26644                                           !BCC_EOS
26645                                           ! 3680     case 3:
26646                                           ! 3681  write_byte(0x40,0x84, 42);
26647                       00006C68            .250:
26648                                           ! Debug: list int = const $2A (used reg = )
26649 6C68           B8                   002A  mov	ax,*$2A
26650 6C6B           50                         push	ax
26651                                           ! Debug: list int = const $84 (used reg = )
26652 6C6C           B8                   0084  mov	ax,#$84
26653 6C6F           50                         push	ax
26654                                           ! Debug: list int = const $40 (used reg = )
26655 6C70           B8                   0040  mov	ax,*$40
26656 6C73           50                         push	ax
26657                                           ! Debug: func () void = write_byte+0 (used reg = )
26658 6C74           E8         137E            call	_write_byte
26659 6C77           83C4                   06  add	sp,*6
26660                                           !BCC_EOS
26661                                           ! 3682  break;
26662 6C7A           EB           24            jmp .24C
26663                                           !BCC_EOS
26664                                           ! 3683     case 2:
26665                                           ! 3684     default:
26666                       00006C7C            .251:
26667                                           ! 3685  write_byte(0x40,0x84, 24);
26668                       00006C7C            .252:
26669                                           ! Debug: list int = const $18 (used reg = )
26670 6C7C           B8                   0018  mov	ax,*$18
26671 6C7F           50                         push	ax
26672                                           ! Debug: list int = const $84 (used reg = )
26673 6C80           B8                   0084  mov	ax,#$84
26674 6C83           50                         push	ax
26675                                           ! Debug: list int = const $40 (used reg = )
26676 6C84           B8                   0040  mov	ax,*$40
26677 6C87           50                         push	ax
26678                                           ! Debug: func () void = write_byte+0 (used reg = )
26679 6C88           E8         136A            call	_write_byte
26680 6C8B           83C4                   06  add	sp,*6
26681                                           !BCC_EOS
26682                                           ! 3686  break;
26683 6C8E           EB           10            jmp .24C
26684                                           !BCC_EOS
26685                                           ! 3687     }
26686                                           ! 3688     write_byte(0x40, 0x85, 8);
26687 6C90           EB           0E            jmp .24C
26688                       00006C92            .24E:
26689 6C92           2C                     01  sub	al,*1
26690 6C94           74           BE            je 	.24F
26691 6C96           2C                     01  sub	al,*1
26692 6C98           74           E2            je 	.251
26693 6C9A           2C                     01  sub	al,*1
26694 6C9C           74           CA            je 	.250
26695 6C9E           EB           DC            jmp	.252
26696                       00006CA0            .24C:
26697                       FFFFFFFE            ..FFF3	=	-2
26698                                           ! Debug: list int = const 8 (used reg = )
26699 6CA0           B8                   0008  mov	ax,*8
26700 6CA3           50                         push	ax
26701                                           ! Debug: list int = const $85 (used reg = )
26702 6CA4           B8                   0085  mov	ax,#$85
26703 6CA7           50                         push	ax
26704                                           ! Debug: list int = const $40 (used reg = )
26705 6CA8           B8                   0040  mov	ax,*$40
26706 6CAB           50                         push	ax
26707                                           ! Debug: func () void = write_byte+0 (used reg = )
26708 6CAC           E8         1346            call	_write_byte
26709 6CAF           89EC                       mov	sp,bp
26710                                           !BCC_EOS
26711                                           ! 3689 }
26712 6CB1           5D                         pop	bp
26713 6CB2           C3                         ret
26714                                           ! 3690 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26715                                           ! Register BX used in function biosfn_load_gfx_8_8_dd_chars
26716                       00006CB3            _biosfn_load_gfx_8_16_chars:
26717                                           !BCC_EOS
26718                                           ! 3691 {
26719                                           ! 3692     write_word(0x0, 0x43*4, &vgafont16);
26720 6CB3           55                         push	bp
26721 6CB4           89E5                       mov	bp,sp
26722                                           ! Debug: list * [$1000] unsigned char = vgafont16+0 (used reg = )
26723 6CB6           BB                   25A9  mov	bx,#_vgafont16
26724 6CB9           53                         push	bx
26725                                           ! Debug: list int = const $10C (used reg = )
26726 6CBA           B8                   010C  mov	ax,#$10C
26727 6CBD           50                         push	ax
26728                                           ! Debug: list int = const 0 (used reg = )
26729 6CBE           31C0                       xor	ax,ax
26730 6CC0           50                         push	ax
26731                                           ! Debug: func () void = write_word+0 (used reg = )
26732 6CC1           E8         1349            call	_write_word
26733 6CC4           89EC                       mov	sp,bp
26734                                           !BCC_EOS
26735                                           ! 3693     write_word(0x0, 0x43*4+2, 0xC000);
26736                                           ! Debug: list unsigned int = const $C000 (used reg = )
26737 6CC6           B8                   C000  mov	ax,#$C000
26738 6CC9           50                         push	ax
26739                                           ! Debug: list int = const $10E (used reg = )
26740 6CCA           B8                   010E  mov	ax,#$10E
26741 6CCD           50                         push	ax
26742                                           ! Debug: list int = const 0 (used reg = )
26743 6CCE           31C0                       xor	ax,ax
26744 6CD0           50                         push	ax
26745                                           ! Debug: func () void = write_word+0 (used reg = )
26746 6CD1           E8         1339            call	_write_word
26747 6CD4           89EC                       mov	sp,bp
26748                                           !BCC_EOS
26749                                           ! 3694     switch (BL) {
26750 6CD6           8A46         04            mov	al,4[bp]
26751 6CD9           EB           3E            jmp .255
26752                                           ! 3695     case 1:
26753                                           ! 3696  write_byte(0x40,0x84, 13);
26754                       00006CDB            .256:
26755                                           ! Debug: list int = const $D (used reg = )
26756 6CDB           B8                   000D  mov	ax,*$D
26757 6CDE           50                         push	ax
26758                                           ! Debug: list int = const $84 (used reg = )
26759 6CDF           B8                   0084  mov	ax,#$84
26760 6CE2           50                         push	ax
26761                                           ! Debug: list int = const $40 (used reg = )
26762 6CE3           B8                   0040  mov	ax,*$40
26763 6CE6           50                         push	ax
26764                                           ! Debug: func () void = write_byte+0 (used reg = )
26765 6CE7           E8         130B            call	_write_byte
26766 6CEA           83C4                   06  add	sp,*6
26767                                           !BCC_EOS
26768                                           ! 3697  break;
26769 6CED           EB           38            jmp .253
26770                                           !BCC_EOS
26771                                           ! 3698     case 3:
26772                                           ! 3699  write_byte(0x40,0x84, 42);
26773                       00006CEF            .257:
26774                                           ! Debug: list int = const $2A (used reg = )
26775 6CEF           B8                   002A  mov	ax,*$2A
26776 6CF2           50                         push	ax
26777                                           ! Debug: list int = const $84 (used reg = )
26778 6CF3           B8                   0084  mov	ax,#$84
26779 6CF6           50                         push	ax
26780                                           ! Debug: list int = const $40 (used reg = )
26781 6CF7           B8                   0040  mov	ax,*$40
26782 6CFA           50                         push	ax
26783                                           ! Debug: func () void = write_byte+0 (used reg = )
26784 6CFB           E8         12F7            call	_write_byte
26785 6CFE           83C4                   06  add	sp,*6
26786                                           !BCC_EOS
26787                                           ! 3700  break;
26788 6D01           EB           24            jmp .253
26789                                           !BCC_EOS
26790                                           ! 3701     case 2:
26791                                           ! 3702     default:
26792                       00006D03            .258:
26793                                           ! 3703  write_byte(0x40,0x84, 24);
26794                       00006D03            .259:
26795                                           ! Debug: list int = const $18 (used reg = )
26796 6D03           B8                   0018  mov	ax,*$18
26797 6D06           50                         push	ax
26798                                           ! Debug: list int = const $84 (used reg = )
26799 6D07           B8                   0084  mov	ax,#$84
26800 6D0A           50                         push	ax
26801                                           ! Debug: list int = const $40 (used reg = )
26802 6D0B           B8                   0040  mov	ax,*$40
26803 6D0E           50                         push	ax
26804                                           ! Debug: func () void = write_byte+0 (used reg = )
26805 6D0F           E8         12E3            call	_write_byte
26806 6D12           83C4                   06  add	sp,*6
26807                                           !BCC_EOS
26808                                           ! 3704  break;
26809 6D15           EB           10            jmp .253
26810                                           !BCC_EOS
26811                                           ! 3705     }
26812                                           ! 3706     write_byte(0x40, 0x85, 16);
26813 6D17           EB           0E            jmp .253
26814                       00006D19            .255:
26815 6D19           2C                     01  sub	al,*1
26816 6D1B           74           BE            je 	.256
26817 6D1D           2C                     01  sub	al,*1
26818 6D1F           74           E2            je 	.258
26819 6D21           2C                     01  sub	al,*1
26820 6D23           74           CA            je 	.257
26821 6D25           EB           DC            jmp	.259
26822                       00006D27            .253:
26823                       FFFFFFFE            ..FFF2	=	-2
26824                                           ! Debug: list int = const $10 (used reg = )
26825 6D27           B8                   0010  mov	ax,*$10
26826 6D2A           50                         push	ax
26827                                           ! Debug: list int = const $85 (used reg = )
26828 6D2B           B8                   0085  mov	ax,#$85
26829 6D2E           50                         push	ax
26830                                           ! Debug: list int = const $40 (used reg = )
26831 6D2F           B8                   0040  mov	ax,*$40
26832 6D32           50                         push	ax
26833                                           ! Debug: func () void = write_byte+0 (used reg = )
26834 6D33           E8         12BF            call	_write_byte
26835 6D36           89EC                       mov	sp,bp
26836                                           !BCC_EOS
26837                                           ! 3707 }
26838 6D38           5D                         pop	bp
26839 6D39           C3                         ret
26840                                           ! 3708 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26841                                           ! Register BX used in function biosfn_load_gfx_8_16_chars
26842                                           ! 3709 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26843                       00006D3A            _biosfn_get_font_info:
26844                                           !BCC_EOS
26845                                           !BCC_EOS
26846                                           !BCC_EOS
26847                                           !BCC_EOS
26848                                           !BCC_EOS
26849                                           ! 3710 {Bit16u ss=get_SS();
26850 6D3A           55                         push	bp
26851 6D3B           89E5                       mov	bp,sp
26852 6D3D           4C                         dec	sp
26853 6D3E           4C                         dec	sp
26854                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26855 6D3F           E8         1319            call	_get_SS
26856                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26857 6D42           8946         FE            mov	-2[bp],ax
26858                                           !BCC_EOS
26859                                           ! 3711  switch(BH)
26860 6D45           8A46         04            mov	al,4[bp]
26861                                           ! 3712   {case 0x00:
26862 6D48           E9         0154            br 	.25C
26863                                           ! 3713     write_word(ss,ES,read_word(0x00,0x1f*4));
26864                       00006D4B            .25D:
26865                                           ! Debug: list int = const $7C (used reg = )
26866 6D4B           B8                   007C  mov	ax,*$7C
26867 6D4E           50                         push	ax
26868                                           ! Debug: list int = const 0 (used reg = )
26869 6D4F           31C0                       xor	ax,ax
26870 6D51           50                         push	ax
26871                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26872 6D52           E8         128D            call	_read_word
26873 6D55           83C4                   04  add	sp,*4
26874                                           ! Debug: list unsigned short = ax+0 (used reg = )
26875 6D58           50                         push	ax
26876                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26877 6D59           FF76         06            push	6[bp]
26878                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26879 6D5C           FF76         FE            push	-2[bp]
26880                                           ! Debug: func () void = write_word+0 (used reg = )
26881 6D5F           E8         12AB            call	_write_word
26882 6D62           83C4                   06  add	sp,*6
26883                                           !BCC_EOS
26884                                           ! 3714     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26885                                           ! Debug: list int = const $7E (used reg = )
26886 6D65           B8                   007E  mov	ax,*$7E
26887 6D68           50                         push	ax
26888                                           ! Debug: list int = const 0 (used reg = )
26889 6D69           31C0                       xor	ax,ax
26890 6D6B           50                         push	ax
26891                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26892 6D6C           E8         1273            call	_read_word
26893 6D6F           83C4                   04  add	sp,*4
26894                                           ! Debug: list unsigned short = ax+0 (used reg = )
26895 6D72           50                         push	ax
26896                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26897 6D73           FF76         08            push	8[bp]
26898                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26899 6D76           FF76         FE            push	-2[bp]
26900                                           ! Debug: func () void = write_word+0 (used reg = )
26901 6D79           E8         1291            call	_write_word
26902 6D7C           83C4                   06  add	sp,*6
26903                                           !BCC_EOS
26904                                           ! 3715     break;
26905 6D7F           E9         0142            br 	.25A
26906                                           !BCC_EOS
26907                                           ! 3716    case 0x01:
26908                                           ! 3717     write_word(ss,ES,read_word(0x00,0x43*4));
26909                       00006D82            .25E:
26910                                           ! Debug: list int = const $10C (used reg = )
26911 6D82           B8                   010C  mov	ax,#$10C
26912 6D85           50                         push	ax
26913                                           ! Debug: list int = const 0 (used reg = )
26914 6D86           31C0                       xor	ax,ax
26915 6D88           50                         push	ax
26916                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26917 6D89           E8         1256            call	_read_word
26918 6D8C           83C4                   04  add	sp,*4
26919                                           ! Debug: list unsigned short = ax+0 (used reg = )
26920 6D8F           50                         push	ax
26921                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26922 6D90           FF76         06            push	6[bp]
26923                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26924 6D93           FF76         FE            push	-2[bp]
26925                                           ! Debug: func () void = write_word+0 (used reg = )
26926 6D96           E8         1274            call	_write_word
26927 6D99           83C4                   06  add	sp,*6
26928                                           !BCC_EOS
26929                                           ! 3718     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26930                                           ! Debug: list int = const $10E (used reg = )
26931 6D9C           B8                   010E  mov	ax,#$10E
26932 6D9F           50                         push	ax
26933                                           ! Debug: list int = const 0 (used reg = )
26934 6DA0           31C0                       xor	ax,ax
26935 6DA2           50                         push	ax
26936                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26937 6DA3           E8         123C            call	_read_word
26938 6DA6           83C4                   04  add	sp,*4
26939                                           ! Debug: list unsigned short = ax+0 (used reg = )
26940 6DA9           50                         push	ax
26941                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26942 6DAA           FF76         08            push	8[bp]
26943                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26944 6DAD           FF76         FE            push	-2[bp]
26945                                           ! Debug: func () void = write_word+0 (used reg = )
26946 6DB0           E8         125A            call	_write_word
26947 6DB3           83C4                   06  add	sp,*6
26948                                           !BCC_EOS
26949                                           ! 3719     break;
26950 6DB6           E9         010B            br 	.25A
26951                                           !BCC_EOS
26952                                           ! 3720    case 0x02:
26953                                           ! 3721     write_word(ss,ES,0xC000);
26954                       00006DB9            .25F:
26955                                           ! Debug: list unsigned int = const $C000 (used reg = )
26956 6DB9           B8                   C000  mov	ax,#$C000
26957 6DBC           50                         push	ax
26958                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26959 6DBD           FF76         06            push	6[bp]
26960                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26961 6DC0           FF76         FE            push	-2[bp]
26962                                           ! Debug: func () void = write_word+0 (used reg = )
26963 6DC3           E8         1247            call	_write_word
26964 6DC6           83C4                   06  add	sp,*6
26965                                           !BCC_EOS
26966                                           ! 3722     write_word(ss,BP,vgafont14);
26967                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26968 6DC9           BB                   17A9  mov	bx,#_vgafont14
26969 6DCC           53                         push	bx
26970                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26971 6DCD           FF76         08            push	8[bp]
26972                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26973 6DD0           FF76         FE            push	-2[bp]
26974                                           ! Debug: func () void = write_word+0 (used reg = )
26975 6DD3           E8         1237            call	_write_word
26976 6DD6           83C4                   06  add	sp,*6
26977                                           !BCC_EOS
26978                                           ! 3723     break;
26979 6DD9           E9         00E8            br 	.25A
26980                                           !BCC_EOS
26981                                           ! 3724    case 0x03:
26982                                           ! 3725     write_word(ss,ES,0xC000);
26983                       00006DDC            .260:
26984                                           ! Debug: list unsigned int = const $C000 (used reg = )
26985 6DDC           B8                   C000  mov	ax,#$C000
26986 6DDF           50                         push	ax
26987                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26988 6DE0           FF76         06            push	6[bp]
26989                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26990 6DE3           FF76         FE            push	-2[bp]
26991                                           ! Debug: func () void = write_word+0 (used reg = )
26992 6DE6           E8         1224            call	_write_word
26993 6DE9           83C4                   06  add	sp,*6
26994                                           !BCC_EOS
26995                                           ! 3726     write_word(ss,BP,vgafont8);
26996                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26997 6DEC           BB                   0FA9  mov	bx,#_vgafont8
26998 6DEF           53                         push	bx
26999                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
27000 6DF0           FF76         08            push	8[bp]
27001                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27002 6DF3           FF76         FE            push	-2[bp]
27003                                           ! Debug: func () void = write_word+0 (used reg = )
27004 6DF6           E8         1214            call	_write_word
27005 6DF9           83C4                   06  add	sp,*6
27006                                           !BCC_EOS
27007                                           ! 3727     break;
27008 6DFC           E9         00C5            br 	.25A
27009                                           !BCC_EOS
27010                                           ! 3728    case 0x04:
27011                                           ! 3729     write_word(ss,ES,0xC000);
27012                       00006DFF            .261:
27013                                           ! Debug: list unsigned int = const $C000 (used reg = )
27014 6DFF           B8                   C000  mov	ax,#$C000
27015 6E02           50                         push	ax
27016                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
27017 6E03           FF76         06            push	6[bp]
27018                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27019 6E06           FF76         FE            push	-2[bp]
27020                                           ! Debug: func () void = write_word+0 (used reg = )
27021 6E09           E8         1201            call	_write_word
27022 6E0C           83C4                   06  add	sp,*6
27023                                           !BCC_EOS
27024                                           ! 3730     write_word(ss,BP,vgafont8+128*8);
27025                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
27026 6E0F           BB                   13A9  mov	bx,#_vgafont8+$400
27027 6E12           53                         push	bx
27028                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
27029 6E13           FF76         08            push	8[bp]
27030                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27031 6E16           FF76         FE            push	-2[bp]
27032                                           ! Debug: func () void = write_word+0 (used reg = )
27033 6E19           E8         11F1            call	_write_word
27034 6E1C           83C4                   06  add	sp,*6
27035                                           !BCC_EOS
27036                                           ! 3731     break;
27037 6E1F           E9         00A2            br 	.25A
27038                                           !BCC_EOS
27039                                           ! 3732    case 0x05:
27040                                           ! 3733     write_word(ss,ES,0xC000);
27041                       00006E22            .262:
27042                                           ! Debug: list unsigned int = const $C000 (used reg = )
27043 6E22           B8                   C000  mov	ax,#$C000
27044 6E25           50                         push	ax
27045                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
27046 6E26           FF76         06            push	6[bp]
27047                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27048 6E29           FF76         FE            push	-2[bp]
27049                                           ! Debug: func () void = write_word+0 (used reg = )
27050 6E2C           E8         11DE            call	_write_word
27051 6E2F           83C4                   06  add	sp,*6
27052                                           !BCC_EOS
27053                                           ! 3734     write_word(ss,BP,vgafont14alt);
27054                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
27055 6E32           BB                   35A9  mov	bx,#_vgafont14alt
27056 6E35           53                         push	bx
27057                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
27058 6E36           FF76         08            push	8[bp]
27059                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27060 6E39           FF76         FE            push	-2[bp]
27061                                           ! Debug: func () void = write_word+0 (used reg = )
27062 6E3C           E8         11CE            call	_write_word
27063 6E3F           83C4                   06  add	sp,*6
27064                                           !BCC_EOS
27065                                           ! 3735     break;
27066 6E42           E9         007F            jmp .25A
27067                                           !BCC_EOS
27068                                           ! 3736    case 0x06:
27069                                           ! 3737     write_word(ss,ES,0xC000);
27070                       00006E45            .263:
27071                                           ! Debug: list unsigned int = const $C000 (used reg = )
27072 6E45           B8                   C000  mov	ax,#$C000
27073 6E48           50                         push	ax
27074                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
27075 6E49           FF76         06            push	6[bp]
27076                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27077 6E4C           FF76         FE            push	-2[bp]
27078                                           ! Debug: func () void = write_word+0 (used reg = )
27079 6E4F           E8         11BB            call	_write_word
27080 6E52           83C4                   06  add	sp,*6
27081                                           !BCC_EOS
27082                                           ! 3738     write_word(ss,BP,vgafont16);
27083                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
27084 6E55           BB                   25A9  mov	bx,#_vgafont16
27085 6E58           53                         push	bx
27086                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
27087 6E59           FF76         08            push	8[bp]
27088                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27089 6E5C           FF76         FE            push	-2[bp]
27090                                           ! Debug: func () void = write_word+0 (used reg = )
27091 6E5F           E8         11AB            call	_write_word
27092 6E62           83C4                   06  add	sp,*6
27093                                           !BCC_EOS
27094                                           ! 3739     break;
27095 6E65           EB           5D            jmp .25A
27096                                           !BCC_EOS
27097                                           ! 3740    case 0x07:
27098                                           ! 3741     write_word(ss,ES,0xC000);
27099                       00006E67            .264:
27100                                           ! Debug: list unsigned int = const $C000 (used reg = )
27101 6E67           B8                   C000  mov	ax,#$C000
27102 6E6A           50                         push	ax
27103                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
27104 6E6B           FF76         06            push	6[bp]
27105                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27106 6E6E           FF76         FE            push	-2[bp]
27107                                           ! Debug: func () void = write_word+0 (used reg = )
27108 6E71           E8         1199            call	_write_word
27109 6E74           83C4                   06  add	sp,*6
27110                                           !BCC_EOS
27111                                           ! 3742     write_word(ss,BP,vgafont16alt);
27112                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
27113 6E77           BB                   35AA  mov	bx,#_vgafont16alt
27114 6E7A           53                         push	bx
27115                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
27116 6E7B           FF76         08            push	8[bp]
27117                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27118 6E7E           FF76         FE            push	-2[bp]
27119                                           ! Debug: func () void = write_word+0 (used reg = )
27120 6E81           E8         1189            call	_write_word
27121 6E84           83C4                   06  add	sp,*6
27122                                           !BCC_EOS
27123                                           ! 3743     break;
27124 6E87           EB           3B            jmp .25A
27125                                           !BCC_EOS
27126                                           ! 3744    default:
27127                                           ! 3745      printf("Get font info BH(%02x) was discarded\n",BH);
27128                       00006E89            .265:
27129                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
27130 6E89           8A46         04            mov	al,4[bp]
27131 6E8C           30E4                       xor	ah,ah
27132 6E8E           50                         push	ax
27133                                           ! Debug: list * char = .266+0 (used reg = )
27134 6E8F           BB                   A77B  mov	bx,#.266
27135 6E92           53                         push	bx
27136                                           ! Debug: func () void = printf+0 (used reg = )
27137 6E93           E8         11E4            call	_printf
27138 6E96           83C4                   04  add	sp,*4
27139                                           !BCC_EOS
27140                                           ! 3746     return;
27141 6E99           89EC                       mov	sp,bp
27142 6E9B           5D                         pop	bp
27143 6E9C           C3                         ret
27144                                           !BCC_EOS
27145                                           ! 3747   }
27146                                           ! 3748  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
27147 6E9D           EB           25            jmp .25A
27148                       00006E9F            .25C:
27149 6E9F           2C                     00  sub	al,*0
27150 6EA1           72           E6            jb 	.265
27151 6EA3           3C                     07  cmp	al,*7
27152 6EA5           77           1B            ja  	.267
27153 6EA7           30E4                       xor	ah,ah
27154 6EA9           D1E0                       shl	ax,*1
27155 6EAB           89C3                       mov	bx,ax
27156 6EAD           2E                         seg	cs
27157 6EAE           FFA7       6EB2            br	.268[bx]
27158                       00006EB2            .268:
27159 6EB2                      6D4B            .word	.25D
27160 6EB4                      6D82            .word	.25E
27161 6EB6                      6DB9            .word	.25F
27162 6EB8                      6DDC            .word	.260
27163 6EBA                      6DFF            .word	.261
27164 6EBC                      6E22            .word	.262
27165 6EBE                      6E45            .word	.263
27166 6EC0                      6E67            .word	.264
27167                       00006EC2            .267:
27168 6EC2           EB           C5            jmp	.265
27169                       00006EC4            .25A:
27170                       FFFFFFFC            ..FFF1	=	-4
27171                                           ! Debug: list int = const $85 (used reg = )
27172 6EC4           B8                   0085  mov	ax,#$85
27173 6EC7           50                         push	ax
27174                                           ! Debug: list int = const $40 (used reg = )
27175 6EC8           B8                   0040  mov	ax,*$40
27176 6ECB           50                         push	ax
27177                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27178 6ECC           E8         1100            call	_read_byte
27179 6ECF           83C4                   04  add	sp,*4
27180                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
27181 6ED2           30E4                       xor	ah,ah
27182                                           ! Debug: list unsigned short = ax+0 (used reg = )
27183 6ED4           50                         push	ax
27184                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
27185 6ED5           FF76         0A            push	$A[bp]
27186                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27187 6ED8           FF76         FE            push	-2[bp]
27188                                           ! Debug: func () void = write_word+0 (used reg = )
27189 6EDB           E8         112F            call	_write_word
27190 6EDE           83C4                   06  add	sp,*6
27191                                           !BCC_EOS
27192                                           ! 3749  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
27193                                           ! Debug: list int = const $84 (used reg = )
27194 6EE1           B8                   0084  mov	ax,#$84
27195 6EE4           50                         push	ax
27196                                           ! Debug: list int = const $40 (used reg = )
27197 6EE5           B8                   0040  mov	ax,*$40
27198 6EE8           50                         push	ax
27199                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27200 6EE9           E8         10E3            call	_read_byte
27201 6EEC           83C4                   04  add	sp,*4
27202                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
27203 6EEF           30E4                       xor	ah,ah
27204                                           ! Debug: list unsigned short = ax+0 (used reg = )
27205 6EF1           50                         push	ax
27206                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
27207 6EF2           FF76         0C            push	$C[bp]
27208                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27209 6EF5           FF76         FE            push	-2[bp]
27210                                           ! Debug: func () void = write_word+0 (used reg = )
27211 6EF8           E8         1112            call	_write_word
27212 6EFB           83C4                   06  add	sp,*6
27213                                           !BCC_EOS
27214                                           ! 3750 }
27215 6EFE           89EC                       mov	sp,bp
27216 6F00           5D                         pop	bp
27217 6F01           C3                         ret
27218                                           ! 3751 #asm
27219                                           !BCC_ASM
27220                       00000006            _biosfn_get_font_info.BP	set	6
27221                       00000002            _biosfn_get_font_info.BH	set	2
27222                       00000008            _biosfn_get_font_info.CX	set	8
27223                       0000000A            _biosfn_get_font_info.DX	set	$A
27224                       00000004            _biosfn_get_font_info.ES	set	4
27225                       00006F02            biosfn_get_ega_info:
27226 6F02           1E                           push ds
27227 6F03           50                           push ax
27228 6F04           B8                   0040    mov ax, # 0x40
27229 6F07           8ED8                         mov ds, ax
27230 6F09           30ED                         xor ch, ch
27231 6F0B           BB                   0088    mov bx, # 0x88
27232 6F0E           8A0F                         mov cl, [bx]
27233 6F10           80E1                   0F    and cl, #0x0f
27234 6F13           BB                   0063    mov bx, # 0x63
27235 6F16           8B07                         mov ax, [bx]
27236 6F18           BB                   0003    mov bx, #0x0003
27237 6F1B           3D                   03B4    cmp ax, # 0x3b4
27238 6F1E           75           02              jne mode_ega_color
27239 6F20           B7                     01    mov bh, #0x01
27240                       00006F22            mode_ega_color:
27241 6F22           58                           pop ax
27242 6F23           1F                           pop ds
27243 6F24           C3                           ret
27244                                           ! 3771 endasm
27245                                           !BCC_ENDASM
27246                                           ! 3772 static void biosfn_alternate_prtsc()
27247                                           ! Register BX used in function biosfn_get_font_info
27248                                           ! 3773 {
27249                       00006F25            _biosfn_alternate_prtsc:
27250                                           ! 3774  unimplemented();
27251 6F25           55                         push	bp
27252 6F26           89E5                       mov	bp,sp
27253                                           ! Debug: func () void = unimplemented+0 (used reg = )
27254 6F28           E8         1133            call	_unimplemented
27255                                           !BCC_EOS
27256                                           ! 3775 }
27257 6F2B           5D                         pop	bp
27258 6F2C           C3                         ret
27259                                           ! 3776 #asm
27260                                           !BCC_ASM
27261                       00006F2D            biosfn_select_vert_res:
27262                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
27263 6F2D           1E                           push ds
27264 6F2E           53                           push bx
27265 6F2F           52                           push dx
27266 6F30           88C2                         mov dl, al
27267 6F32           B8                   0040    mov ax, # 0x40
27268 6F35           8ED8                         mov ds, ax
27269 6F37           BB                   0089    mov bx, # 0x89
27270 6F3A           8A07                         mov al, [bx]
27271 6F3C           BB                   0088    mov bx, # 0x88
27272 6F3F           8A27                         mov ah, [bx]
27273 6F41           80FA                   01    cmp dl, #0x01
27274 6F44           74           24              je vert_res_350
27275 6F46           72           2C              jb vert_res_200
27276 6F48           80FA                   02    cmp dl, #0x02
27277 6F4B           74           11              je vert_res_400
27278 6F4D           88D0                         mov al, dl
27279 6F4F           30E4                         xor ah, ah
27280 6F51           50                           push ax
27281 6F52           BB                   6F8F    mov bx, #msg_vert_res
27282 6F55           53                           push bx
27283 6F56           E8         1121              call _printf
27284 6F59           83C4                   04    add sp, #4
27285 6F5C           EB           2A              jmp set_retcode
27286                       00006F5E            vert_res_400:
27287                                             ; reset modeset ctl bit 7 and set bit 4
27288                                             ; set switches bit 3-0 to 0x09
27289 6F5E           24                     7F    and al, #0x7f
27290 6F60           0C                     10    or al, #0x10
27291 6F62           80E4                   F0    and ah, #0xf0
27292 6F65           80CC                   09    or ah, #0x09
27293 6F68           75           14              jnz set_vert_res
27294                       00006F6A            vert_res_350:
27295                                             ; reset modeset ctl bit 7 and bit 4
27296                                             ; set switches bit 3-0 to 0x09
27297 6F6A           24                     6F    and al, #0x6f
27298 6F6C           80E4                   F0    and ah, #0xf0
27299 6F6F           80CC                   09    or ah, #0x09
27300 6F72           75           0A              jnz set_vert_res
27301                       00006F74            vert_res_200:
27302                                             ; set modeset ctl bit 7 and reset bit 4
27303                                             ; set switches bit 3-0 to 0x08
27304 6F74           24                     EF    and al, #0xef
27305 6F76           0C                     80    or al, #0x80
27306 6F78           80E4                   F0    and ah, #0xf0
27307 6F7B           80CC                   08    or ah, #0x08
27308                       00006F7E            set_vert_res:
27309 6F7E           BB                   0089    mov bx, # 0x89
27310 6F81           8807                         mov [bx], al
27311 6F83           BB                   0088    mov bx, # 0x88
27312 6F86           8827                         mov [bx], ah
27313                       00006F88            set_retcode:
27314 6F88           B8                   1212    mov ax, #0x1212
27315 6F8B           5A                           pop dx
27316 6F8C           5B                           pop bx
27317 6F8D           1F                           pop ds
27318 6F8E           C3                           ret
27319                       00006F8F            msg_vert_res:
27320 6F8F                        53            .ascii "Select vert res (%02x) was discarded"
27321 6FB3                        0D            .byte 0x0d,0x0a,0x00
27322                       00006FB6            biosfn_enable_default_palette_loading:
27323 6FB6           1E                           push ds
27324 6FB7           53                           push bx
27325 6FB8           52                           push dx
27326 6FB9           88C2                         mov dl, al
27327 6FBB           80E2                   01    and dl, #0x01
27328 6FBE           C0E2                   03    shl dl, 3
27329 6FC1           B8                   0040    mov ax, # 0x40
27330 6FC4           8ED8                         mov ds, ax
27331 6FC6           BB                   0089    mov bx, # 0x89
27332 6FC9           8A07                         mov al, [bx]
27333 6FCB           24                     F7    and al, #0xf7
27334 6FCD           08D0                         or al, dl
27335 6FCF           8807                         mov [bx], al
27336 6FD1           B8                   1212    mov ax, #0x1212
27337 6FD4           5A                           pop dx
27338 6FD5           5B                           pop bx
27339 6FD6           1F                           pop ds
27340 6FD7           C3                           ret
27341                       00006FD8            biosfn_enable_video_addressing:
27342 6FD8           53                           push bx
27343 6FD9           52                           push dx
27344 6FDA           88C3                         mov bl, al
27345 6FDC           80E3                   01    and bl, #0x01
27346 6FDF           80F3                   01    xor bl, #0x01
27347 6FE2           D0E3                         shl bl, 1
27348 6FE4           BA                   03CC    mov dx, # 0x3cc
27349 6FE7           EC                           in al, dx
27350 6FE8           24                     FD    and al, #0xfd
27351 6FEA           08D8                         or al, bl
27352 6FEC           BA                   03C2    mov dx, # 0x3c2
27353 6FEF           EE                           out dx, al
27354 6FF0           B8                   1212    mov ax, #0x1212
27355 6FF3           5A                           pop dx
27356 6FF4           5B                           pop bx
27357 6FF5           C3                           ret
27358                       00006FF6            biosfn_enable_grayscale_summing:
27359 6FF6           1E                           push ds
27360 6FF7           53                           push bx
27361 6FF8           52                           push dx
27362 6FF9           88C2                         mov dl, al
27363 6FFB           80E2                   01    and dl, #0x01
27364 6FFE           80F2                   01    xor dl, #0x01
27365 7001           D0E2                         shl dl, 1
27366 7003           B8                   0040    mov ax, # 0x40
27367 7006           8ED8                         mov ds, ax
27368 7008           BB                   0089    mov bx, # 0x89
27369 700B           8A07                         mov al, [bx]
27370 700D           24                     FD    and al, #0xfd
27371 700F           08D0                         or al, dl
27372 7011           8807                         mov [bx], al
27373 7013           B8                   1212    mov ax, #0x1212
27374 7016           5A                           pop dx
27375 7017           5B                           pop bx
27376 7018           1F                           pop ds
27377 7019           C3                           ret
27378                       0000701A            biosfn_enable_cursor_emulation:
27379 701A           1E                           push ds
27380 701B           53                           push bx
27381 701C           52                           push dx
27382 701D           88C2                         mov dl, al
27383 701F           80E2                   01    and dl, #0x01
27384 7022           80F2                   01    xor dl, #0x01
27385 7025           B8                   0040    mov ax, # 0x40
27386 7028           8ED8                         mov ds, ax
27387 702A           BB                   0089    mov bx, # 0x89
27388 702D           8A07                         mov al, [bx]
27389 702F           24                     FE    and al, #0xfe
27390 7031           08D0                         or al, dl
27391 7033           8807                         mov [bx], al
27392 7035           B8                   1212    mov ax, #0x1212
27393 7038           5A                           pop dx
27394 7039           5B                           pop bx
27395 703A           1F                           pop ds
27396 703B           C3                           ret
27397                                           ! 3913 endasm
27398                                           !BCC_ENDASM
27399                                           ! 3914 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
27400                       0000703C            _biosfn_switch_video_interface:
27401                                           !BCC_EOS
27402                                           !BCC_EOS
27403                                           !BCC_EOS
27404                                           ! 3915 {
27405                                           ! 3916  unimplemented();
27406 703C           55                         push	bp
27407 703D           89E5                       mov	bp,sp
27408                                           ! Debug: func () void = unimplemented+0 (used reg = )
27409 703F           E8         101C            call	_unimplemented
27410                                           !BCC_EOS
27411                                           ! 3917 }
27412 7042           5D                         pop	bp
27413 7043           C3                         ret
27414                                           ! 3918 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
27415                       00007044            _biosfn_enable_video_refresh_control:
27416                                           !BCC_EOS
27417                                           ! 3919 {
27418                                           ! 3920  unimplemented();
27419 7044           55                         push	bp
27420 7045           89E5                       mov	bp,sp
27421                                           ! Debug: func () void = unimplemented+0 (used reg = )
27422 7047           E8         1014            call	_unimplemented
27423                                           !BCC_EOS
27424                                           ! 3921 }
27425 704A           5D                         pop	bp
27426 704B           C3                         ret
27427                                           ! 3922 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
27428                                           ! 3923 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
27429                       0000704C            _biosfn_write_string:
27430                                           !BCC_EOS
27431                                           !BCC_EOS
27432                                           !BCC_EOS
27433                                           !BCC_EOS
27434                                           !BCC_EOS
27435                                           !BCC_EOS
27436                                           !BCC_EOS
27437                                           !BCC_EOS
27438                                           ! 3924 {
27439                                           ! 3925  Bit16u newcurs,oldcurs,dummy;
27440                                           !BCC_EOS
27441                                           ! 3926  Bit8u car,carattr;
27442                                           !BCC_EOS
27443                                           ! 3927  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
27444 704C           55                         push	bp
27445 704D           89E5                       mov	bp,sp
27446 704F           83C4                   F8  add	sp,*-8
27447                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
27448 7052           8D5E         FC            lea	bx,-4[bp]
27449 7055           53                         push	bx
27450                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
27451 7056           8D5E         FA            lea	bx,-6[bp]
27452 7059           53                         push	bx
27453                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
27454 705A           8A46         06            mov	al,6[bp]
27455 705D           30E4                       xor	ah,ah
27456 705F           50                         push	ax
27457                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
27458 7060           E8         D49B            call	_biosfn_get_cursor_pos
27459 7063           83C4                   06  add	sp,*6
27460                                           !BCC_EOS
27461                                           ! 3928  if(row==0xff)
27462                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
27463 7066           8A46         0C            mov	al,$C[bp]
27464 7069           3C                     FF  cmp	al,#$FF
27465 706B           75           12            jne 	.269
27466                       0000706D            .26A:
27467                                           ! 3929   {col=oldcurs&0x00ff;
27468                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
27469 706D           8A46         FC            mov	al,-4[bp]
27470                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
27471 7070           8846         0E            mov	$E[bp],al
27472                                           !BCC_EOS
27473                                           ! 3930    row=(oldcurs&0xff00)>>8;
27474                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
27475 7073           8B46         FC            mov	ax,-4[bp]
27476 7076           30C0                       xor	al,al
27477                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
27478 7078           88E0                       mov	al,ah
27479 707A           30E4                       xor	ah,ah
27480                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
27481 707C           8846         0C            mov	$C[bp],al
27482                                           !BCC_EOS
27483                                           ! 3931   }
27484                                           ! 3932  newcurs=row; newcurs<<=8; newcurs+=col;
27485                       0000707F            .269:
27486                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
27487 707F           8A46         0C            mov	al,$C[bp]
27488 7082           30E4                       xor	ah,ah
27489 7084           8946         FE            mov	-2[bp],ax
27490                                           !BCC_EOS
27491                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
27492 7087           8B46         FE            mov	ax,-2[bp]
27493 708A           88C4                       mov	ah,al
27494 708C           30C0                       xor	al,al
27495 708E           8946         FE            mov	-2[bp],ax
27496                                           !BCC_EOS
27497                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
27498 7091           8B46         FE            mov	ax,-2[bp]
27499 7094           0246         0E            add	al,$E[bp]
27500 7097           80D4                   00  adc	ah,*0
27501 709A           8946         FE            mov	-2[bp],ax
27502                                           !BCC_EOS
27503                                           ! 3933  biosfn_set_cursor_pos(page,newcurs);
27504                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
27505 709D           FF76         FE            push	-2[bp]
27506                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27507 70A0           8A46         06            mov	al,6[bp]
27508 70A3           30E4                       xor	ah,ah
27509 70A5           50                         push	ax
27510                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27511 70A6           E8         D355            call	_biosfn_set_cursor_pos
27512 70A9           83C4                   04  add	sp,*4
27513                                           !BCC_EOS
27514                                           ! 3934  while(count--!=0)
27515                                           ! 3935   {
27516 70AC           EB           4F            jmp .26C
27517                       000070AE            .26D:
27518                                           ! 3936    car=read_byte(seg,offset++);
27519                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
27520 70AE           8B46         12            mov	ax,$12[bp]
27521 70B1           40                         inc	ax
27522 70B2           8946         12            mov	$12[bp],ax
27523                                           ! Debug: list unsigned short = ax-1 (used reg = )
27524 70B5           48                         dec	ax
27525 70B6           50                         push	ax
27526                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
27527 70B7           FF76         10            push	$10[bp]
27528                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27529 70BA           E8         0F12            call	_read_byte
27530 70BD           83C4                   04  add	sp,*4
27531                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
27532 70C0           8846         F9            mov	-7[bp],al
27533                                           !BCC_EOS
27534                                           ! 3937    if((flag&0x02)!=0)
27535                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
27536 70C3           8A46         04            mov	al,4[bp]
27537 70C6           24                     02  and	al,*2
27538                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
27539 70C8           84C0                       test	al,al
27540 70CA           74           15            je  	.26E
27541                       000070CC            .26F:
27542                                           ! 3938     attr=read_byte(seg,offset++);
27543                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
27544 70CC           8B46         12            mov	ax,$12[bp]
27545 70CF           40                         inc	ax
27546 70D0           8946         12            mov	$12[bp],ax
27547                                           ! Debug: list unsigned short = ax-1 (used reg = )
27548 70D3           48                         dec	ax
27549 70D4           50                         push	ax
27550                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
27551 70D5           FF76         10            push	$10[bp]
27552                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27553 70D8           E8         0EF4            call	_read_byte
27554 70DB           83C4                   04  add	sp,*4
27555                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
27556 70DE           8846         08            mov	8[bp],al
27557                                           !BCC_EOS
27558                                           ! 3939    biosfn_write_teletype(car,page,attr,3);
27559                       000070E1            .26E:
27560                                           ! Debug: list int = const 3 (used reg = )
27561 70E1           B8                   0003  mov	ax,*3
27562 70E4           50                         push	ax
27563                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
27564 70E5           8A46         08            mov	al,8[bp]
27565 70E8           30E4                       xor	ah,ah
27566 70EA           50                         push	ax
27567                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
27568 70EB           8A46         06            mov	al,6[bp]
27569 70EE           30E4                       xor	ah,ah
27570 70F0           50                         push	ax
27571                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
27572 70F1           8A46         F9            mov	al,-7[bp]
27573 70F4           30E4                       xor	ah,ah
27574 70F6           50                         push	ax
27575                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
27576 70F7           E8         EE7C            call	_biosfn_write_teletype
27577 70FA           83C4                   08  add	sp,*8
27578                                           !BCC_EOS
27579                                           ! 3940   }
27580                                           ! 3941  if((flag&0x01)==0)
27581                       000070FD            .26C:
27582                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
27583 70FD           8B46         0A            mov	ax,$A[bp]
27584 7100           48                         dec	ax
27585 7101           8946         0A            mov	$A[bp],ax
27586                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
27587 7104           3D                   FFFF  cmp	ax,*-1
27588 7107           75           A5            jne	.26D
27589                       00007109            .270:
27590                       00007109            .26B:
27591                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
27592 7109           8A46         04            mov	al,4[bp]
27593 710C           24                     01  and	al,*1
27594                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
27595 710E           84C0                       test	al,al
27596 7110           75           0F            jne 	.271
27597                       00007112            .272:
27598                                           ! 3942   biosfn_set_cursor_pos(page,oldcurs);
27599                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
27600 7112           FF76         FC            push	-4[bp]
27601                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27602 7115           8A46         06            mov	al,6[bp]
27603 7118           30E4                       xor	ah,ah
27604 711A           50                         push	ax
27605                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27606 711B           E8         D2E0            call	_biosfn_set_cursor_pos
27607 711E           83C4                   04  add	sp,*4
27608                                           !BCC_EOS
27609                                           ! 3943 }
27610                       00007121            .271:
27611 7121           89EC                       mov	sp,bp
27612 7123           5D                         pop	bp
27613 7124           C3                         ret
27614                                           ! 3944 #asm
27615                                           !BCC_ASM
27616                       00000008            _biosfn_write_string.count	set	8
27617                       0000000E            _biosfn_write_string.seg	set	$E
27618                       0000000C            _biosfn_write_string.col	set	$C
27619                       00000002            _biosfn_write_string.flag	set	2
27620                       00000006            _biosfn_write_string.attr	set	6
27621                       00000004            _biosfn_write_string.page	set	4
27622                       0000000A            _biosfn_write_string.row	set	$A
27623                       00000010            _biosfn_write_string.offset	set	$10
27624                       00007125            biosfn_group_1A:
27625 7125           3C                     00    cmp al, #0x00
27626 7127           74           08              je biosfn_read_display_code
27627 7129           3C                     01    cmp al, #0x01
27628 712B           74           19              je biosfn_set_display_code
27629 712D           E8         0F3C              call _unknown
27630 7130           C3                           ret
27631                       00007131            biosfn_read_display_code:
27632 7131           1E                           push ds
27633 7132           50                           push ax
27634 7133           B8                   0040    mov ax, # 0x40
27635 7136           8ED8                         mov ds, ax
27636 7138           BB                   008A    mov bx, # 0x8A
27637 713B           8A07                         mov al, [bx]
27638 713D           88C3                         mov bl, al
27639 713F           30FF                         xor bh, bh
27640 7141           58                           pop ax
27641 7142           88E0                         mov al, ah
27642 7144           1F                           pop ds
27643 7145           C3                           ret
27644                       00007146            biosfn_set_display_code:
27645 7146           1E                           push ds
27646 7147           50                           push ax
27647 7148           53                           push bx
27648 7149           B8                   0040    mov ax, # 0x40
27649 714C           8ED8                         mov ds, ax
27650 714E           89D8                         mov ax, bx
27651 7150           BB                   008A    mov bx, # 0x8A
27652 7153           8807                         mov [bx], al
27653 7155           88E0                         mov al, ah
27654 7157           30E4                         xor ah, ah
27655 7159           50                           push ax
27656 715A           BB                   716A    mov bx, #msg_alt_dcc
27657 715D           53                           push bx
27658 715E           E8         0F19              call _printf
27659 7161           83C4                   04    add sp, #4
27660 7164           5B                           pop bx
27661 7165           58                           pop ax
27662 7166           88E0                         mov al, ah
27663 7168           1F                           pop ds
27664 7169           C3                           ret
27665                       0000716A            msg_alt_dcc:
27666 716A                        41            .ascii "Alternate Display code (%02x) was discarded"
27667 7195                        0D            .byte 0x0d,0x0a,0x00
27668                                           ! 3989 endasm
27669                                           !BCC_ENDASM
27670                                           ! 3990 static void biosfn_read_state_info (BX,ES,DI)
27671                                           ! Register BX used in function biosfn_write_string
27672                                           ! 3991 Bit16u BX;Bit16u ES;Bit16u DI;
27673                       00007198            _biosfn_read_state_info:
27674                                           !BCC_EOS
27675                                           !BCC_EOS
27676                                           !BCC_EOS
27677                                           ! 3992 {
27678                                           ! 3993  write_word(ES,DI+0x00,&static_functionality);
27679 7198           55                         push	bp
27680 7199           89E5                       mov	bp,sp
27681                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27682 719B           BB                   0F99  mov	bx,#_static_functionality
27683 719E           53                         push	bx
27684                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27685 719F           8B46         08            mov	ax,8[bp]
27686                                           ! Debug: list unsigned int = ax+0 (used reg = )
27687 71A2           50                         push	ax
27688                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27689 71A3           FF76         06            push	6[bp]
27690                                           ! Debug: func () void = write_word+0 (used reg = )
27691 71A6           E8         0E64            call	_write_word
27692 71A9           89EC                       mov	sp,bp
27693                                           !BCC_EOS
27694                                           ! 3994  write_word(ES,DI+0x02,0xC000);
27695                                           ! Debug: list unsigned int = const $C000 (used reg = )
27696 71AB           B8                   C000  mov	ax,#$C000
27697 71AE           50                         push	ax
27698                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27699 71AF           8B46         08            mov	ax,8[bp]
27700                                           ! Debug: list unsigned int = ax+2 (used reg = )
27701 71B2           40                         inc	ax
27702 71B3           40                         inc	ax
27703 71B4           50                         push	ax
27704                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27705 71B5           FF76         06            push	6[bp]
27706                                           ! Debug: func () void = write_word+0 (used reg = )
27707 71B8           E8         0E52            call	_write_word
27708 71BB           89EC                       mov	sp,bp
27709                                           !BCC_EOS
27710                                           ! 3995  memcpyb(ES,DI+0x04,0x40,0
27711                                           ! 3995 x49,30);
27712                                           ! Debug: list int = const $1E (used reg = )
27713 71BD           B8                   001E  mov	ax,*$1E
27714 71C0           50                         push	ax
27715                                           ! Debug: list int = const $49 (used reg = )
27716 71C1           B8                   0049  mov	ax,*$49
27717 71C4           50                         push	ax
27718                                           ! Debug: list int = const $40 (used reg = )
27719 71C5           B8                   0040  mov	ax,*$40
27720 71C8           50                         push	ax
27721                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27722 71C9           8B46         08            mov	ax,8[bp]
27723                                           ! Debug: list unsigned int = ax+4 (used reg = )
27724 71CC           05                   0004  add	ax,*4
27725 71CF           50                         push	ax
27726                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27727 71D0           FF76         06            push	6[bp]
27728                                           ! Debug: func () void = memcpyb+0 (used reg = )
27729 71D3           E8         0D99            call	_memcpyb
27730 71D6           89EC                       mov	sp,bp
27731                                           !BCC_EOS
27732                                           ! 3996  memcpyb(ES,DI+0x22,0x40,0x84,3);
27733                                           ! Debug: list int = const 3 (used reg = )
27734 71D8           B8                   0003  mov	ax,*3
27735 71DB           50                         push	ax
27736                                           ! Debug: list int = const $84 (used reg = )
27737 71DC           B8                   0084  mov	ax,#$84
27738 71DF           50                         push	ax
27739                                           ! Debug: list int = const $40 (used reg = )
27740 71E0           B8                   0040  mov	ax,*$40
27741 71E3           50                         push	ax
27742                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27743 71E4           8B46         08            mov	ax,8[bp]
27744                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27745 71E7           05                   0022  add	ax,*$22
27746 71EA           50                         push	ax
27747                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27748 71EB           FF76         06            push	6[bp]
27749                                           ! Debug: func () void = memcpyb+0 (used reg = )
27750 71EE           E8         0D7E            call	_memcpyb
27751 71F1           89EC                       mov	sp,bp
27752                                           !BCC_EOS
27753                                           ! 3997  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27754                                           ! Debug: list int = const $8A (used reg = )
27755 71F3           B8                   008A  mov	ax,#$8A
27756 71F6           50                         push	ax
27757                                           ! Debug: list int = const $40 (used reg = )
27758 71F7           B8                   0040  mov	ax,*$40
27759 71FA           50                         push	ax
27760                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27761 71FB           E8         0DD1            call	_read_byte
27762 71FE           89EC                       mov	sp,bp
27763                                           ! Debug: list unsigned char = al+0 (used reg = )
27764 7200           30E4                       xor	ah,ah
27765 7202           50                         push	ax
27766                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27767 7203           8B46         08            mov	ax,8[bp]
27768                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27769 7206           05                   0025  add	ax,*$25
27770 7209           50                         push	ax
27771                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27772 720A           FF76         06            push	6[bp]
27773                                           ! Debug: func () void = write_byte+0 (used reg = )
27774 720D           E8         0DE5            call	_write_byte
27775 7210           89EC                       mov	sp,bp
27776                                           !BCC_EOS
27777                                           ! 3998  write_byte(ES,DI+0x26,0);
27778                                           ! Debug: list int = const 0 (used reg = )
27779 7212           31C0                       xor	ax,ax
27780 7214           50                         push	ax
27781                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27782 7215           8B46         08            mov	ax,8[bp]
27783                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27784 7218           05                   0026  add	ax,*$26
27785 721B           50                         push	ax
27786                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27787 721C           FF76         06            push	6[bp]
27788                                           ! Debug: func () void = write_byte+0 (used reg = )
27789 721F           E8         0DD3            call	_write_byte
27790 7222           89EC                       mov	sp,bp
27791                                           !BCC_EOS
27792                                           ! 3999  write_byte(ES,DI+0x27,16);
27793                                           ! Debug: list int = const $10 (used reg = )
27794 7224           B8                   0010  mov	ax,*$10
27795 7227           50                         push	ax
27796                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27797 7228           8B46         08            mov	ax,8[bp]
27798                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27799 722B           05                   0027  add	ax,*$27
27800 722E           50                         push	ax
27801                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27802 722F           FF76         06            push	6[bp]
27803                                           ! Debug: func () void = write_byte+0 (used reg = )
27804 7232           E8         0DC0            call	_write_byte
27805 7235           89EC                       mov	sp,bp
27806                                           !BCC_EOS
27807                                           ! 4000  write_byte(ES,DI+0x28,0);
27808                                           ! Debug: list int = const 0 (used reg = )
27809 7237           31C0                       xor	ax,ax
27810 7239           50                         push	ax
27811                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27812 723A           8B46         08            mov	ax,8[bp]
27813                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27814 723D           05                   0028  add	ax,*$28
27815 7240           50                         push	ax
27816                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27817 7241           FF76         06            push	6[bp]
27818                                           ! Debug: func () void = write_byte+0 (used reg = )
27819 7244           E8         0DAE            call	_write_byte
27820 7247           89EC                       mov	sp,bp
27821                                           !BCC_EOS
27822                                           ! 4001  write_byte(ES,DI+0x29,8);
27823                                           ! Debug: list int = const 8 (used reg = )
27824 7249           B8                   0008  mov	ax,*8
27825 724C           50                         push	ax
27826                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27827 724D           8B46         08            mov	ax,8[bp]
27828                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27829 7250           05                   0029  add	ax,*$29
27830 7253           50                         push	ax
27831                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27832 7254           FF76         06            push	6[bp]
27833                                           ! Debug: func () void = write_byte+0 (used reg = )
27834 7257           E8         0D9B            call	_write_byte
27835 725A           89EC                       mov	sp,bp
27836                                           !BCC_EOS
27837                                           ! 4002  write_byte(ES,DI+0x2a,2);
27838                                           ! Debug: list int = const 2 (used reg = )
27839 725C           B8                   0002  mov	ax,*2
27840 725F           50                         push	ax
27841                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27842 7260           8B46         08            mov	ax,8[bp]
27843                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27844 7263           05                   002A  add	ax,*$2A
27845 7266           50                         push	ax
27846                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27847 7267           FF76         06            push	6[bp]
27848                                           ! Debug: func () void = write_byte+0 (used reg = )
27849 726A           E8         0D88            call	_write_byte
27850 726D           89EC                       mov	sp,bp
27851                                           !BCC_EOS
27852                                           ! 4003  write_byte(ES,DI+0x2b,0);
27853                                           ! Debug: list int = const 0 (used reg = )
27854 726F           31C0                       xor	ax,ax
27855 7271           50                         push	ax
27856                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27857 7272           8B46         08            mov	ax,8[bp]
27858                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27859 7275           05                   002B  add	ax,*$2B
27860 7278           50                         push	ax
27861                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27862 7279           FF76         06            push	6[bp]
27863                                           ! Debug: func () void = write_byte+0 (used reg = )
27864 727C           E8         0D76            call	_write_byte
27865 727F           89EC                       mov	sp,bp
27866                                           !BCC_EOS
27867                                           ! 4004  write_byte(ES,DI+0x2c,0);
27868                                           ! Debug: list int = const 0 (used reg = )
27869 7281           31C0                       xor	ax,ax
27870 7283           50                         push	ax
27871                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27872 7284           8B46         08            mov	ax,8[bp]
27873                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27874 7287           05                   002C  add	ax,*$2C
27875 728A           50                         push	ax
27876                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27877 728B           FF76         06            push	6[bp]
27878                                           ! Debug: func () void = write_byte+0 (used reg = )
27879 728E           E8         0D64            call	_write_byte
27880 7291           89EC                       mov	sp,bp
27881                                           !BCC_EOS
27882                                           ! 4005  write_byte(ES,DI+0x31,3);
27883                                           ! Debug: list int = const 3 (used reg = )
27884 7293           B8                   0003  mov	ax,*3
27885 7296           50                         push	ax
27886                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27887 7297           8B46         08            mov	ax,8[bp]
27888                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27889 729A           05                   0031  add	ax,*$31
27890 729D           50                         push	ax
27891                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27892 729E           FF76         06            push	6[bp]
27893                                           ! Debug: func () void = write_byte+0 (used reg = )
27894 72A1           E8         0D51            call	_write_byte
27895 72A4           89EC                       mov	sp,bp
27896                                           !BCC_EOS
27897                                           ! 4006  write_byte(ES,DI+0x32,0);
27898                                           ! Debug: list int = const 0 (used reg = )
27899 72A6           31C0                       xor	ax,ax
27900 72A8           50                         push	ax
27901                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27902 72A9           8B46         08            mov	ax,8[bp]
27903                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27904 72AC           05                   0032  add	ax,*$32
27905 72AF           50                         push	ax
27906                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27907 72B0           FF76         06            push	6[bp]
27908                                           ! Debug: func () void = write_byte+0 (used reg = )
27909 72B3           E8         0D3F            call	_write_byte
27910 72B6           89EC                       mov	sp,bp
27911                                           !BCC_EOS
27912                                           ! 4007  memsetb(ES,DI+0x33,0,13);
27913                                           ! Debug: list int = const $D (used reg = )
27914 72B8           B8                   000D  mov	ax,*$D
27915 72BB           50                         push	ax
27916                                           ! Debug: list int = const 0 (used reg = )
27917 72BC           31C0                       xor	ax,ax
27918 72BE           50                         push	ax
27919                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27920 72BF           8B46         08            mov	ax,8[bp]
27921                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27922 72C2           05                   0033  add	ax,*$33
27923 72C5           50                         push	ax
27924                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27925 72C6           FF76         06            push	6[bp]
27926                                           ! Debug: func () void = memsetb+0 (used reg = )
27927 72C9           E8         0C59            call	_memsetb
27928 72CC           89EC                       mov	sp,bp
27929                                           !BCC_EOS
27930                                           ! 4008 }
27931 72CE           5D                         pop	bp
27932 72CF           C3                         ret
27933                                           ! 4009 static Bit16u biosfn_read_video_state_size2 (CX)
27934                                           ! Register BX used in function biosfn_read_state_info
27935                                           ! 4010      Bit16u CX;
27936                       000072D0            _biosfn_read_video_state_size2:
27937                                           !BCC_EOS
27938                                           ! 4011 {
27939                                           ! 4012     Bit16u size;
27940                                           !BCC_EOS
27941                                           ! 4013     size = 0;
27942 72D0           55                         push	bp
27943 72D1           89E5                       mov	bp,sp
27944 72D3           4C                         dec	sp
27945 72D4           4C                         dec	sp
27946                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27947 72D5           31C0                       xor	ax,ax
27948 72D7           8946         FE            mov	-2[bp],ax
27949                                           !BCC_EOS
27950                                           ! 4014     if (CX & 1) {
27951                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27952 72DA           8A46         04            mov	al,4[bp]
27953 72DD           24                     01  and	al,*1
27954 72DF           84C0                       test	al,al
27955 72E1           74           09            je  	.273
27956                       000072E3            .274:
27957                                           ! 4015         size += 0x46;
27958                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27959 72E3           8B46         FE            mov	ax,-2[bp]
27960 72E6           05                   0046  add	ax,*$46
27961 72E9           8946         FE            mov	-2[bp],ax
27962                                           !BCC_EOS
27963                                           ! 4016     }
27964                                           ! 4017     if (CX & 2) {
27965                       000072EC            .273:
27966                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27967 72EC           8A46         04            mov	al,4[bp]
27968 72EF           24                     02  and	al,*2
27969 72F1           84C0                       test	al,al
27970 72F3           74           09            je  	.275
27971                       000072F5            .276:
27972                                           ! 4018         size += (5 + 8 + 5) * 2 + 6;
27973                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27974 72F5           8B46         FE            mov	ax,-2[bp]
27975 72F8           05                   002A  add	ax,*$2A
27976 72FB           8946         FE            mov	-2[bp],ax
27977                                           !BCC_EOS
27978                                           ! 4019     }
27979                                           ! 4020     if (CX & 4) {
27980                       000072FE            .275:
27981                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27982 72FE           8A46         04            mov	al,4[bp]
27983 7301           24                     04  and	al,*4
27984 7303           84C0                       test	al,al
27985 7305           74           09            je  	.277
27986                       00007307            .278:
27987                                           ! 4021         size += 3 + 256 * 3 + 1;
27988                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27989 7307           8B46         FE            mov	ax,-2[bp]
27990 730A           05                   0304  add	ax,#$304
27991 730D           8946         FE            mov	-2[bp],ax
27992                                           !BCC_EOS
27993                                           ! 4022 }
27994                                           ! 4023     return size;
27995                       00007310            .277:
27996 7310           8B46         FE            mov	ax,-2[bp]
27997 7313           89EC                       mov	sp,bp
27998 7315           5D                         pop	bp
27999 7316           C3                         ret
28000                                           !BCC_EOS
28001                                           ! 4024 }
28002                                           ! 4025 static void biosfn_read_video_state_size (CX, BX)
28003                                           ! 4026      Bit16u CX; Bit16u *BX;
28004                       00007317            _biosfn_read_video_state_size:
28005                                           !BCC_EOS
28006                                           !BCC_EOS
28007                                           ! 4027 {
28008                                           ! 4028     Bit16u ss=get_SS();
28009 7317           55                         push	bp
28010 7318           89E5                       mov	bp,sp
28011 731A           4C                         dec	sp
28012 731B           4C                         dec	sp
28013                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
28014 731C           E8         0D3C            call	_get_SS
28015                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
28016 731F           8946         FE            mov	-2[bp],ax
28017                                           !BCC_EOS
28018                                           ! 4029     write_word(ss, BX, biosfn_read_video_state_size2(CX));
28019                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
28020 7322           FF76         04            push	4[bp]
28021                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
28022 7325           E8         FFA8            call	_biosfn_read_video_state_size2
28023 7328           44                         inc	sp
28024 7329           44                         inc	sp
28025                                           ! Debug: list unsigned short = ax+0 (used reg = )
28026 732A           50                         push	ax
28027                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
28028 732B           FF76         06            push	6[bp]
28029                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
28030 732E           FF76         FE            push	-2[bp]
28031                                           ! Debug: func () void = write_word+0 (used reg = )
28032 7331           E8         0CD9            call	_write_word
28033 7334           83C4                   06  add	sp,*6
28034                                           !BCC_EOS
28035                                           ! 4030 }
28036 7337           89EC                       mov	sp,bp
28037 7339           5D                         pop	bp
28038 733A           C3                         ret
28039                                           ! 4031 static Bit16u biosfn_save_video_state (CX,ES,BX)
28040                                           ! 4032      Bit16u CX;Bit16u ES;Bit16u BX;
28041                       0000733B            _biosfn_save_video_state:
28042                                           !BCC_EOS
28043                                           !BCC_EOS
28044                                           !BCC_EOS
28045                                           ! 4033 {
28046                                           ! 4034     Bit16u i, v, crtc_addr, ar_index;
28047                                           !BCC_EOS
28048                                           ! 4035     crtc_addr = read_word(0x40, 0x63);
28049 733B           55                         push	bp
28050 733C           89E5                       mov	bp,sp
28051 733E           83C4                   F8  add	sp,*-8
28052                                           ! Debug: list int = const $63 (used reg = )
28053 7341           B8                   0063  mov	ax,*$63
28054 7344           50                         push	ax
28055                                           ! Debug: list int = const $40 (used reg = )
28056 7345           B8                   0040  mov	ax,*$40
28057 7348           50                         push	ax
28058                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28059 7349           E8         0C96            call	_read_word
28060 734C           83C4                   04  add	sp,*4
28061                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
28062 734F           8946         FA            mov	-6[bp],ax
28063                                           !BCC_EOS
28064                                           ! 4036     if (CX & 1) {
28065                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
28066 7352           8A46         04            mov	al,4[bp]
28067 7355           24                     01  and	al,*1
28068 7357           84C0                       test	al,al
28069 7359         0F84         0266            beq 	.279
28070                       0000735D            .27A:
28071                                           ! 4037         write_byte(ES, BX, inb(0x3c4)); BX++;
28072                                           ! Debug: list int = const $3C4 (used reg = )
28073 735D           B8                   03C4  mov	ax,#$3C4
28074 7360           50                         push	ax
28075                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28076 7361           E8         0CC1            call	_inb
28077 7364           44                         inc	sp
28078 7365           44                         inc	sp
28079                                           ! Debug: list unsigned char = al+0 (used reg = )
28080 7366           30E4                       xor	ah,ah
28081 7368           50                         push	ax
28082                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28083 7369           FF76         08            push	8[bp]
28084                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28085 736C           FF76         06            push	6[bp]
28086                                           ! Debug: func () void = write_byte+0 (used reg = )
28087 736F           E8         0C83            call	_write_byte
28088 7372           83C4                   06  add	sp,*6
28089                                           !BCC_EOS
28090                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28091 7375           8B46         08            mov	ax,8[bp]
28092 7378           40                         inc	ax
28093 7379           8946         08            mov	8[bp],ax
28094                                           !BCC_EOS
28095                                           ! 4038         write_byte(ES, BX, inb(crtc_addr)); BX++;
28096                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
28097 737C           FF76         FA            push	-6[bp]
28098                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28099 737F           E8         0CA3            call	_inb
28100 7382           44                         inc	sp
28101 7383           44                         inc	sp
28102                                           ! Debug: list unsigned char = al+0 (used reg = )
28103 7384           30E4                       xor	ah,ah
28104 7386           50                         push	ax
28105                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28106 7387           FF76         08            push	8[bp]
28107                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28108 738A           FF76         06            push	6[bp]
28109                                           ! Debug: func () void = write_byte+0 (used reg = )
28110 738D           E8         0C65            call	_write_byte
28111 7390           83C4                   06  add	sp,*6
28112                                           !BCC_EOS
28113                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28114 7393           8B46         08            mov	ax,8[bp]
28115 7396           40                         inc	ax
28116 7397           8946         08            mov	8[bp],ax
28117                                           !BCC_EOS
28118                                           ! 4039         write_byte(ES, BX, inb(0x3ce)); BX++;
28119                                           ! Debug: list int = const $3CE (used reg = )
28120 739A           B8                   03CE  mov	ax,#$3CE
28121 739D           50                         push	ax
28122                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28123 739E           E8         0C84            call	_inb
28124 73A1           44                         inc	sp
28125 73A2           44                         inc	sp
28126                                           ! Debug: list unsigned char = al+0 (used reg = )
28127 73A3           30E4                       xor	ah,ah
28128 73A5           50                         push	ax
28129                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28130 73A6           FF76         08            push	8[bp]
28131                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28132 73A9           FF76         06            push	6[bp]
28133                                           ! Debug: func () void = write_byte+0 (used reg = )
28134 73AC           E8         0C46            call	_write_byte
28135 73AF           83C4                   06  add	sp,*6
28136                                           !BCC_EOS
28137                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28138 73B2           8B46         08            mov	ax,8[bp]
28139 73B5           40                         inc	ax
28140 73B6           8946         08            mov	8[bp],ax
28141                                           !BCC_EOS
28142                                           ! 4040         inb(0x3da);
28143                                           ! Debug: list int = const $3DA (used reg = )
28144 73B9           B8                   03DA  mov	ax,#$3DA
28145 73BC           50                         push	ax
28146                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28147 73BD           E8         0C65            call	_inb
28148 73C0           44                         inc	sp
28149 73C1           44                         inc	sp
28150                                           !BCC_EOS
28151                                           ! 4041         ar_index = inb(0x3c0);
28152                                           ! Debug: list int = const $3C0 (used reg = )
28153 73C2           B8                   03C0  mov	ax,#$3C0
28154 73C5           50                         push	ax
28155                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28156 73C6           E8         0C5C            call	_inb
28157 73C9           44                         inc	sp
28158 73CA           44                         inc	sp
28159                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
28160 73CB           30E4                       xor	ah,ah
28161 73CD           8946         F8            mov	-8[bp],ax
28162                                           !BCC_EOS
28163                                           ! 4042         write_byte(ES, BX, ar_index); BX++;
28164                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
28165 73D0           FF76         F8            push	-8[bp]
28166                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28167 73D3           FF76         08            push	8[bp]
28168                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28169 73D6           FF76         06            push	6[bp]
28170                                           ! Debug: func () void = write_byte+0 (used reg = )
28171 73D9           E8         0C19            call	_write_byte
28172 73DC           83C4                   06  add	sp,*6
28173                                           !BCC_EOS
28174                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28175 73DF           8B46         08            mov	ax,8[bp]
28176 73E2           40                         inc	ax
28177 73E3           8946         08            mov	8[bp],ax
28178                                           !BCC_EOS
28179                                           ! 4043         write_byte(ES, BX, inb(0x3ca)); BX++;
28180                                           ! Debug: list int = const $3CA (used reg = )
28181 73E6           B8                   03CA  mov	ax,#$3CA
28182 73E9           50                         push	ax
28183                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28184 73EA           E8         0C38            call	_inb
28185 73ED           44                         inc	sp
28186 73EE           44                         inc	sp
28187                                           ! Debug: list unsigned char = al+0 (used reg = )
28188 73EF           30E4                       xor	ah,ah
28189 73F1           50                         push	ax
28190                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28191 73F2           FF76         08            push	8[bp]
28192                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28193 73F5           FF76         06            push	6[bp]
28194                                           ! Debug: func () void = write_byte+0 (used reg = )
28195 73F8           E8         0BFA            call	_write_byte
28196 73FB           83C4                   06  add	sp,*6
28197                                           !BCC_EOS
28198                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28199 73FE           8B46         08            mov	ax,8[bp]
28200 7401           40                         inc	ax
28201 7402           8946         08            mov	8[bp],ax
28202                                           !BCC_EOS
28203                                           ! 4044         for(i=1;i<=4;i++){
28204                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
28205 7405           B8                   0001  mov	ax,*1
28206 7408           8946         FE            mov	-2[bp],ax
28207                                           !BCC_EOS
28208                                           !BCC_EOS
28209 740B           EB           33            jmp .27D
28210                       0000740D            .27E:
28211                                           ! 4045             outb(0x3c4, i);
28212                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
28213 740D           FF76         FE            push	-2[bp]
28214                                           ! Debug: list int = const $3C4 (used reg = )
28215 7410           B8                   03C4  mov	ax,#$3C4
28216 7413           50                         push	ax
28217                                           ! Debug: func () void = outb+0 (used reg = )
28218 7414           E8         0C24            call	_outb
28219 7417           83C4                   04  add	sp,*4
28220                                           !BCC_EOS
28221                                           ! 4046             write_byte(ES, BX, inb(0x3c5)); BX++;
28222                                           ! Debug: list int = const $3C5 (used reg = )
28223 741A           B8                   03C5  mov	ax,#$3C5
28224 741D           50                         push	ax
28225                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28226 741E           E8         0C04            call	_inb
28227 7421           44                         inc	sp
28228 7422           44                         inc	sp
28229                                           ! Debug: list unsigned char = al+0 (used reg = )
28230 7423           30E4                       xor	ah,ah
28231 7425           50                         push	ax
28232                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28233 7426           FF76         08            push	8[bp]
28234                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28235 7429           FF76         06            push	6[bp]
28236                                           ! Debug: func () void = write_byte+0 (used reg = )
28237 742C           E8         0BC6            call	_write_byte
28238 742F           83C4                   06  add	sp,*6
28239                                           !BCC_EOS
28240                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28241 7432           8B46         08            mov	ax,8[bp]
28242 7435           40                         inc	ax
28243 7436           8946         08            mov	8[bp],ax
28244                                           !BCC_EOS
28245                                           ! 4047         }
28246                                           ! 4048         outb(0x3c4, 0);
28247                       00007439            .27C:
28248                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28249 7439           8B46         FE            mov	ax,-2[bp]
28250 743C           40                         inc	ax
28251 743D           8946         FE            mov	-2[bp],ax
28252                       00007440            .27D:
28253                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
28254 7440           8B46         FE            mov	ax,-2[bp]
28255 7443           3D                   0004  cmp	ax,*4
28256 7446           76           C5            jbe	.27E
28257                       00007448            .27F:
28258                       00007448            .27B:
28259                                           ! Debug: list int = const 0 (used reg = )
28260 7448           31C0                       xor	ax,ax
28261 744A           50                         push	ax
28262                                           ! Debug: list int = const $3C4 (used reg = )
28263 744B           B8                   03C4  mov	ax,#$3C4
28264 744E           50                         push	ax
28265                                           ! Debug: func () void = outb+0 (used reg = )
28266 744F           E8         0BE9            call	_outb
28267 7452           83C4                   04  add	sp,*4
28268                                           !BCC_EOS
28269                                           ! 4049         write_byte(ES, BX, inb(0x3c5)); BX++;
28270                                           ! Debug: list int = const $3C5 (used reg = )
28271 7455           B8                   03C5  mov	ax,#$3C5
28272 7458           50                         push	ax
28273                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28274 7459           E8         0BC9            call	_inb
28275 745C           44                         inc	sp
28276 745D           44                         inc	sp
28277                                           ! Debug: list unsigned char = al+0 (used reg = )
28278 745E           30E4                       xor	ah,ah
28279 7460           50                         push	ax
28280                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28281 7461           FF76         08            push	8[bp]
28282                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28283 7464           FF76         06            push	6[bp]
28284                                           ! Debug: func () void = write_byte+0 (used reg = )
28285 7467           E8         0B8B            call	_write_byte
28286 746A           83C4                   06  add	sp,*6
28287                                           !BCC_EOS
28288                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28289 746D           8B46         08            mov	ax,8[bp]
28290 7470           40                         inc	ax
28291 7471           8946         08            mov	8[bp],ax
28292                                           !BCC_EOS
28293                                           ! 4050         for(i=0;i<=0x18;i++) {
28294                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28295 7474           31C0                       xor	ax,ax
28296 7476           8946         FE            mov	-2[bp],ax
28297                                           !BCC_EOS
28298                                           !BCC_EOS
28299 7479           EB           33            jmp .282
28300                       0000747B            .283:
28301                                           ! 4051             outb(crtc_addr,i);
28302                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
28303 747B           FF76         FE            push	-2[bp]
28304                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
28305 747E           FF76         FA            push	-6[bp]
28306                                           ! Debug: func () void = outb+0 (used reg = )
28307 7481           E8         0BB7            call	_outb
28308 7484           83C4                   04  add	sp,*4
28309                                           !BCC_EOS
28310                                           ! 4052             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
28311                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
28312 7487           8B46         FA            mov	ax,-6[bp]
28313                                           ! Debug: list unsigned int = ax+1 (used reg = )
28314 748A           40                         inc	ax
28315 748B           50                         push	ax
28316                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28317 748C           E8         0B96            call	_inb
28318 748F           44                         inc	sp
28319 7490           44                         inc	sp
28320                                           ! Debug: list unsigned char = al+0 (used reg = )
28321 7491           30E4                       xor	ah,ah
28322 7493           50                         push	ax
28323                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28324 7494           FF76         08            push	8[bp]
28325                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28326 7497           FF76         06            push	6[bp]
28327                                           ! Debug: func () void = write_byte+0 (used reg = )
28328 749A           E8         0B58            call	_write_byte
28329 749D           83C4                   06  add	sp,*6
28330                                           !BCC_EOS
28331                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28332 74A0           8B46         08            mov	ax,8[bp]
28333 74A3           40                         inc	ax
28334 74A4           8946         08            mov	8[bp],ax
28335                                           !BCC_EOS
28336                                           ! 4053         }
28337                                           ! 4054         for(i=0;i<=0x13;i++) {
28338                       000074A7            .281:
28339                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28340 74A7           8B46         FE            mov	ax,-2[bp]
28341 74AA           40                         inc	ax
28342 74AB           8946         FE            mov	-2[bp],ax
28343                       000074AE            .282:
28344                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
28345 74AE           8B46         FE            mov	ax,-2[bp]
28346 74B1           3D                   0018  cmp	ax,*$18
28347 74B4           76           C5            jbe	.283
28348                       000074B6            .284:
28349                       000074B6            .280:
28350                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28351 74B6           31C0                       xor	ax,ax
28352 74B8           8946         FE            mov	-2[bp],ax
28353                                           !BCC_EOS
28354                                           !BCC_EOS
28355 74BB           EB           44            jmp .287
28356                       000074BD            .288:
28357                                           ! 4055             inb(0x3da);
28358                                           ! Debug: list int = const $3DA (used reg = )
28359 74BD           B8                   03DA  mov	ax,#$3DA
28360 74C0           50                         push	ax
28361                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28362 74C1           E8         0B61            call	_inb
28363 74C4           44                         inc	sp
28364 74C5           44                         inc	sp
28365                                           !BCC_EOS
28366                                           ! 4056             outb(0x3c0, i | (ar_index & 0x20));
28367                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
28368 74C6           8A46         F8            mov	al,-8[bp]
28369 74C9           24                     20  and	al,*$20
28370                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
28371                                           ! Debug: expression subtree swapping
28372 74CB           30E4                       xor	ah,ah
28373 74CD           0B46         FE            or	ax,-2[bp]
28374                                           ! Debug: list unsigned int = ax+0 (used reg = )
28375 74D0           50                         push	ax
28376                                           ! Debug: list int = const $3C0 (used reg = )
28377 74D1           B8                   03C0  mov	ax,#$3C0
28378 74D4           50                         push	ax
28379                                           ! Debug: func () void = outb+0 (used reg = )
28380 74D5           E8         0B63            call	_outb
28381 74D8           83C4                   04  add	sp,*4
28382                                           !BCC_EOS
28383                                           ! 4057             write_byte(ES, BX, inb(0x3c1)); BX++;
28384                                           ! Debug: list int = const $3C1 (used reg = )
28385 74DB           B8                   03C1  mov	ax,#$3C1
28386 74DE           50                         push	ax
28387                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28388 74DF           E8         0B43            call	_inb
28389 74E2           44                         inc	sp
28390 74E3           44                         inc	sp
28391                                           ! Debug: list unsigned char = al+0 (used reg = )
28392 74E4           30E4                       xor	ah,ah
28393 74E6           50                         push	ax
28394                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28395 74E7           FF76         08            push	8[bp]
28396                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28397 74EA           FF76         06            push	6[bp]
28398                                           ! Debug: func () void = write_byte+0 (used reg = )
28399 74ED           E8         0B05            call	_write_byte
28400 74F0           83C4                   06  add	sp,*6
28401                                           !BCC_EOS
28402                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28403 74F3           8B46         08            mov	ax,8[bp]
28404 74F6           40                         inc	ax
28405 74F7           8946         08            mov	8[bp],ax
28406                                           !BCC_EOS
28407                                           ! 4058         }
28408                                           ! 4059         inb(0x3da);
28409                       000074FA            .286:
28410                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28411 74FA           8B46         FE            mov	ax,-2[bp]
28412 74FD           40                         inc	ax
28413 74FE           8946         FE            mov	-2[bp],ax
28414                       00007501            .287:
28415                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
28416 7501           8B46         FE            mov	ax,-2[bp]
28417 7504           3D                   0013  cmp	ax,*$13
28418 7507           76           B4            jbe	.288
28419                       00007509            .289:
28420                       00007509            .285:
28421                                           ! Debug: list int = const $3DA (used reg = )
28422 7509           B8                   03DA  mov	ax,#$3DA
28423 750C           50                         push	ax
28424                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28425 750D           E8         0B15            call	_inb
28426 7510           44                         inc	sp
28427 7511           44                         inc	sp
28428                                           !BCC_EOS
28429                                           ! 4060         for(i=0;i<=8;i++) {
28430                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28431 7512           31C0                       xor	ax,ax
28432 7514           8946         FE            mov	-2[bp],ax
28433                                           !BCC_EOS
28434                                           !BCC_EOS
28435 7517           EB           33            jmp .28C
28436                       00007519            .28D:
28437                                           ! 4061             outb(0x3ce,i);
28438                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
28439 7519           FF76         FE            push	-2[bp]
28440                                           ! Debug: list int = const $3CE (used reg = )
28441 751C           B8                   03CE  mov	ax,#$3CE
28442 751F           50                         push	ax
28443                                           ! Debug: func () void = outb+0 (used reg = )
28444 7520           E8         0B18            call	_outb
28445 7523           83C4                   04  add	sp,*4
28446                                           !BCC_EOS
28447                                           ! 4062             write_byte(ES, BX, inb(0x3cf)); BX++;
28448                                           ! Debug: list int = const $3CF (used reg = )
28449 7526           B8                   03CF  mov	ax,#$3CF
28450 7529           50                         push	ax
28451                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28452 752A           E8         0AF8            call	_inb
28453 752D           44                         inc	sp
28454 752E           44                         inc	sp
28455                                           ! Debug: list unsigned char = al+0 (used reg = )
28456 752F           30E4                       xor	ah,ah
28457 7531           50                         push	ax
28458                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28459 7532           FF76         08            push	8[bp]
28460                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28461 7535           FF76         06            push	6[bp]
28462                                           ! Debug: func () void = write_byte+0 (used reg = )
28463 7538           E8         0ABA            call	_write_byte
28464 753B           83C4                   06  add	sp,*6
28465                                           !BCC_EOS
28466                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28467 753E           8B46         08            mov	ax,8[bp]
28468 7541           40                         inc	ax
28469 7542           8946         08            mov	8[bp],ax
28470                                           !BCC_EOS
28471                                           ! 4063         }
28472                                           ! 4064         write_word(ES, BX, crtc_addr); BX+= 2;
28473                       00007545            .28B:
28474                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28475 7545           8B46         FE            mov	ax,-2[bp]
28476 7548           40                         inc	ax
28477 7549           8946         FE            mov	-2[bp],ax
28478                       0000754C            .28C:
28479                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28480 754C           8B46         FE            mov	ax,-2[bp]
28481 754F           3D                   0008  cmp	ax,*8
28482 7552           76           C5            jbe	.28D
28483                       00007554            .28E:
28484                       00007554            .28A:
28485                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
28486 7554           FF76         FA            push	-6[bp]
28487                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28488 7557           FF76         08            push	8[bp]
28489                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28490 755A           FF76         06            push	6[bp]
28491                                           ! Debug: func () void = write_word+0 (used reg = )
28492 755D           E8         0AAD            call	_write_word
28493 7560           83C4                   06  add	sp,*6
28494                                           !BCC_EOS
28495                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28496 7563           8B46         08            mov	ax,8[bp]
28497 7566           40                         inc	ax
28498 7567           40                         inc	ax
28499 7568           8946         08            mov	8[bp],ax
28500                                           !BCC_EOS
28501                                           ! 4065         write_byte(ES, BX, 0); BX++;
28502                                           ! Debug: list int = const 0 (used reg = )
28503 756B           31C0                       xor	ax,ax
28504 756D           50                         push	ax
28505                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28506 756E           FF76         08            push	8[bp]
28507                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28508 7571           FF76         06            push	6[bp]
28509                                           ! Debug: func () void = write_byte+0 (used reg = )
28510 7574           E8         0A7E            call	_write_byte
28511 7577           83C4                   06  add	sp,*6
28512                                           !BCC_EOS
28513                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28514 757A           8B46         08            mov	ax,8[bp]
28515 757D           40                         inc	ax
28516 757E           8946         08            mov	8[bp],ax
28517                                           !BCC_EOS
28518                                           ! 4066         write_byte(ES, BX, 0); BX++;
28519                                           ! Debug: list int = const 0 (used reg = )
28520 7581           31C0                       xor	ax,ax
28521 7583           50                         push	ax
28522                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28523 7584           FF76         08            push	8[bp]
28524                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28525 7587           FF76         06            push	6[bp]
28526                                           ! Debug: func () void = write_byte+0 (used reg = )
28527 758A           E8         0A68            call	_write_byte
28528 758D           83C4                   06  add	sp,*6
28529                                           !BCC_EOS
28530                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28531 7590           8B46         08            mov	ax,8[bp]
28532 7593           40                         inc	ax
28533 7594           8946         08            mov	8[bp],ax
28534                                           !BCC_EOS
28535                                           ! 4067         write_byte(ES, BX, 0); BX++;
28536                                           ! Debug: list int = const 0 (used reg = )
28537 7597           31C0                       xor	ax,ax
28538 7599           50                         push	ax
28539                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28540 759A           FF76         08            push	8[bp]
28541                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28542 759D           FF76         06            push	6[bp]
28543                                           ! Debug: func () void = write_byte+0 (used reg = )
28544 75A0           E8         0A52            call	_write_byte
28545 75A3           83C4                   06  add	sp,*6
28546                                           !BCC_EOS
28547                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28548 75A6           8B46         08            mov	ax,8[bp]
28549 75A9           40                         inc	ax
28550 75AA           8946         08            mov	8[bp],ax
28551                                           !BCC_EOS
28552                                           ! 4068         wr
28553                                           ! 4068 ite_byte(ES, BX, 0); BX++;
28554                                           ! Debug: list int = const 0 (used reg = )
28555 75AD           31C0                       xor	ax,ax
28556 75AF           50                         push	ax
28557                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28558 75B0           FF76         08            push	8[bp]
28559                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28560 75B3           FF76         06            push	6[bp]
28561                                           ! Debug: func () void = write_byte+0 (used reg = )
28562 75B6           E8         0A3C            call	_write_byte
28563 75B9           83C4                   06  add	sp,*6
28564                                           !BCC_EOS
28565                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28566 75BC           8B46         08            mov	ax,8[bp]
28567 75BF           40                         inc	ax
28568 75C0           8946         08            mov	8[bp],ax
28569                                           !BCC_EOS
28570                                           ! 4069     }
28571                                           ! 4070     if (CX & 2) {
28572                       000075C3            .279:
28573                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
28574 75C3           8A46         04            mov	al,4[bp]
28575 75C6           24                     02  and	al,*2
28576 75C8           84C0                       test	al,al
28577 75CA         0F84         0270            beq 	.28F
28578                       000075CE            .290:
28579                                           ! 4071         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
28580                                           ! Debug: list int = const $49 (used reg = )
28581 75CE           B8                   0049  mov	ax,*$49
28582 75D1           50                         push	ax
28583                                           ! Debug: list int = const $40 (used reg = )
28584 75D2           B8                   0040  mov	ax,*$40
28585 75D5           50                         push	ax
28586                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28587 75D6           E8         09F6            call	_read_byte
28588 75D9           83C4                   04  add	sp,*4
28589                                           ! Debug: list unsigned char = al+0 (used reg = )
28590 75DC           30E4                       xor	ah,ah
28591 75DE           50                         push	ax
28592                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28593 75DF           FF76         08            push	8[bp]
28594                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28595 75E2           FF76         06            push	6[bp]
28596                                           ! Debug: func () void = write_byte+0 (used reg = )
28597 75E5           E8         0A0D            call	_write_byte
28598 75E8           83C4                   06  add	sp,*6
28599                                           !BCC_EOS
28600                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28601 75EB           8B46         08            mov	ax,8[bp]
28602 75EE           40                         inc	ax
28603 75EF           8946         08            mov	8[bp],ax
28604                                           !BCC_EOS
28605                                           ! 4072         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
28606                                           ! Debug: list int = const $4A (used reg = )
28607 75F2           B8                   004A  mov	ax,*$4A
28608 75F5           50                         push	ax
28609                                           ! Debug: list int = const $40 (used reg = )
28610 75F6           B8                   0040  mov	ax,*$40
28611 75F9           50                         push	ax
28612                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28613 75FA           E8         09E5            call	_read_word
28614 75FD           83C4                   04  add	sp,*4
28615                                           ! Debug: list unsigned short = ax+0 (used reg = )
28616 7600           50                         push	ax
28617                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28618 7601           FF76         08            push	8[bp]
28619                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28620 7604           FF76         06            push	6[bp]
28621                                           ! Debug: func () void = write_word+0 (used reg = )
28622 7607           E8         0A03            call	_write_word
28623 760A           83C4                   06  add	sp,*6
28624                                           !BCC_EOS
28625                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28626 760D           8B46         08            mov	ax,8[bp]
28627 7610           40                         inc	ax
28628 7611           40                         inc	ax
28629 7612           8946         08            mov	8[bp],ax
28630                                           !BCC_EOS
28631                                           ! 4073         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
28632                                           ! Debug: list int = const $4C (used reg = )
28633 7615           B8                   004C  mov	ax,*$4C
28634 7618           50                         push	ax
28635                                           ! Debug: list int = const $40 (used reg = )
28636 7619           B8                   0040  mov	ax,*$40
28637 761C           50                         push	ax
28638                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28639 761D           E8         09C2            call	_read_word
28640 7620           83C4                   04  add	sp,*4
28641                                           ! Debug: list unsigned short = ax+0 (used reg = )
28642 7623           50                         push	ax
28643                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28644 7624           FF76         08            push	8[bp]
28645                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28646 7627           FF76         06            push	6[bp]
28647                                           ! Debug: func () void = write_word+0 (used reg = )
28648 762A           E8         09E0            call	_write_word
28649 762D           83C4                   06  add	sp,*6
28650                                           !BCC_EOS
28651                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28652 7630           8B46         08            mov	ax,8[bp]
28653 7633           40                         inc	ax
28654 7634           40                         inc	ax
28655 7635           8946         08            mov	8[bp],ax
28656                                           !BCC_EOS
28657                                           ! 4074         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28658                                           ! Debug: list int = const $63 (used reg = )
28659 7638           B8                   0063  mov	ax,*$63
28660 763B           50                         push	ax
28661                                           ! Debug: list int = const $40 (used reg = )
28662 763C           B8                   0040  mov	ax,*$40
28663 763F           50                         push	ax
28664                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28665 7640           E8         099F            call	_read_word
28666 7643           83C4                   04  add	sp,*4
28667                                           ! Debug: list unsigned short = ax+0 (used reg = )
28668 7646           50                         push	ax
28669                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28670 7647           FF76         08            push	8[bp]
28671                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28672 764A           FF76         06            push	6[bp]
28673                                           ! Debug: func () void = write_word+0 (used reg = )
28674 764D           E8         09BD            call	_write_word
28675 7650           83C4                   06  add	sp,*6
28676                                           !BCC_EOS
28677                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28678 7653           8B46         08            mov	ax,8[bp]
28679 7656           40                         inc	ax
28680 7657           40                         inc	ax
28681 7658           8946         08            mov	8[bp],ax
28682                                           !BCC_EOS
28683                                           ! 4075         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28684                                           ! Debug: list int = const $84 (used reg = )
28685 765B           B8                   0084  mov	ax,#$84
28686 765E           50                         push	ax
28687                                           ! Debug: list int = const $40 (used reg = )
28688 765F           B8                   0040  mov	ax,*$40
28689 7662           50                         push	ax
28690                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28691 7663           E8         0969            call	_read_byte
28692 7666           83C4                   04  add	sp,*4
28693                                           ! Debug: list unsigned char = al+0 (used reg = )
28694 7669           30E4                       xor	ah,ah
28695 766B           50                         push	ax
28696                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28697 766C           FF76         08            push	8[bp]
28698                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28699 766F           FF76         06            push	6[bp]
28700                                           ! Debug: func () void = write_byte+0 (used reg = )
28701 7672           E8         0980            call	_write_byte
28702 7675           83C4                   06  add	sp,*6
28703                                           !BCC_EOS
28704                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28705 7678           8B46         08            mov	ax,8[bp]
28706 767B           40                         inc	ax
28707 767C           8946         08            mov	8[bp],ax
28708                                           !BCC_EOS
28709                                           ! 4076         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28710                                           ! Debug: list int = const $85 (used reg = )
28711 767F           B8                   0085  mov	ax,#$85
28712 7682           50                         push	ax
28713                                           ! Debug: list int = const $40 (used reg = )
28714 7683           B8                   0040  mov	ax,*$40
28715 7686           50                         push	ax
28716                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28717 7687           E8         0958            call	_read_word
28718 768A           83C4                   04  add	sp,*4
28719                                           ! Debug: list unsigned short = ax+0 (used reg = )
28720 768D           50                         push	ax
28721                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28722 768E           FF76         08            push	8[bp]
28723                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28724 7691           FF76         06            push	6[bp]
28725                                           ! Debug: func () void = write_word+0 (used reg = )
28726 7694           E8         0976            call	_write_word
28727 7697           83C4                   06  add	sp,*6
28728                                           !BCC_EOS
28729                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28730 769A           8B46         08            mov	ax,8[bp]
28731 769D           40                         inc	ax
28732 769E           40                         inc	ax
28733 769F           8946         08            mov	8[bp],ax
28734                                           !BCC_EOS
28735                                           ! 4077         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28736                                           ! Debug: list int = const $87 (used reg = )
28737 76A2           B8                   0087  mov	ax,#$87
28738 76A5           50                         push	ax
28739                                           ! Debug: list int = const $40 (used reg = )
28740 76A6           B8                   0040  mov	ax,*$40
28741 76A9           50                         push	ax
28742                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28743 76AA           E8         0922            call	_read_byte
28744 76AD           83C4                   04  add	sp,*4
28745                                           ! Debug: list unsigned char = al+0 (used reg = )
28746 76B0           30E4                       xor	ah,ah
28747 76B2           50                         push	ax
28748                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28749 76B3           FF76         08            push	8[bp]
28750                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28751 76B6           FF76         06            push	6[bp]
28752                                           ! Debug: func () void = write_byte+0 (used reg = )
28753 76B9           E8         0939            call	_write_byte
28754 76BC           83C4                   06  add	sp,*6
28755                                           !BCC_EOS
28756                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28757 76BF           8B46         08            mov	ax,8[bp]
28758 76C2           40                         inc	ax
28759 76C3           8946         08            mov	8[bp],ax
28760                                           !BCC_EOS
28761                                           ! 4078         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28762                                           ! Debug: list int = const $88 (used reg = )
28763 76C6           B8                   0088  mov	ax,#$88
28764 76C9           50                         push	ax
28765                                           ! Debug: list int = const $40 (used reg = )
28766 76CA           B8                   0040  mov	ax,*$40
28767 76CD           50                         push	ax
28768                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28769 76CE           E8         08FE            call	_read_byte
28770 76D1           83C4                   04  add	sp,*4
28771                                           ! Debug: list unsigned char = al+0 (used reg = )
28772 76D4           30E4                       xor	ah,ah
28773 76D6           50                         push	ax
28774                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28775 76D7           FF76         08            push	8[bp]
28776                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28777 76DA           FF76         06            push	6[bp]
28778                                           ! Debug: func () void = write_byte+0 (used reg = )
28779 76DD           E8         0915            call	_write_byte
28780 76E0           83C4                   06  add	sp,*6
28781                                           !BCC_EOS
28782                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28783 76E3           8B46         08            mov	ax,8[bp]
28784 76E6           40                         inc	ax
28785 76E7           8946         08            mov	8[bp],ax
28786                                           !BCC_EOS
28787                                           ! 4079         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28788                                           ! Debug: list int = const $89 (used reg = )
28789 76EA           B8                   0089  mov	ax,#$89
28790 76ED           50                         push	ax
28791                                           ! Debug: list int = const $40 (used reg = )
28792 76EE           B8                   0040  mov	ax,*$40
28793 76F1           50                         push	ax
28794                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28795 76F2           E8         08DA            call	_read_byte
28796 76F5           83C4                   04  add	sp,*4
28797                                           ! Debug: list unsigned char = al+0 (used reg = )
28798 76F8           30E4                       xor	ah,ah
28799 76FA           50                         push	ax
28800                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28801 76FB           FF76         08            push	8[bp]
28802                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28803 76FE           FF76         06            push	6[bp]
28804                                           ! Debug: func () void = write_byte+0 (used reg = )
28805 7701           E8         08F1            call	_write_byte
28806 7704           83C4                   06  add	sp,*6
28807                                           !BCC_EOS
28808                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28809 7707           8B46         08            mov	ax,8[bp]
28810 770A           40                         inc	ax
28811 770B           8946         08            mov	8[bp],ax
28812                                           !BCC_EOS
28813                                           ! 4080         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28814                                           ! Debug: list int = const $60 (used reg = )
28815 770E           B8                   0060  mov	ax,*$60
28816 7711           50                         push	ax
28817                                           ! Debug: list int = const $40 (used reg = )
28818 7712           B8                   0040  mov	ax,*$40
28819 7715           50                         push	ax
28820                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28821 7716           E8         08C9            call	_read_word
28822 7719           83C4                   04  add	sp,*4
28823                                           ! Debug: list unsigned short = ax+0 (used reg = )
28824 771C           50                         push	ax
28825                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28826 771D           FF76         08            push	8[bp]
28827                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28828 7720           FF76         06            push	6[bp]
28829                                           ! Debug: func () void = write_word+0 (used reg = )
28830 7723           E8         08E7            call	_write_word
28831 7726           83C4                   06  add	sp,*6
28832                                           !BCC_EOS
28833                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28834 7729           8B46         08            mov	ax,8[bp]
28835 772C           40                         inc	ax
28836 772D           40                         inc	ax
28837 772E           8946         08            mov	8[bp],ax
28838                                           !BCC_EOS
28839                                           ! 4081         for(i=0;i<8;i++) {
28840                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28841 7731           31C0                       xor	ax,ax
28842 7733           8946         FE            mov	-2[bp],ax
28843                                           !BCC_EOS
28844                                           !BCC_EOS
28845 7736           EB           2F            jmp .293
28846                       00007738            .294:
28847                                           ! 4082             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28848                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28849                                           ! Debug: expression subtree swapping
28850 7738           8B46         FE            mov	ax,-2[bp]
28851 773B           D1E0                       shl	ax,*1
28852                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28853                                           ! Debug: expression subtree swapping
28854                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28855 773D           05                   0050  add	ax,*$50
28856 7740           50                         push	ax
28857                                           ! Debug: list int = const $40 (used reg = )
28858 7741           B8                   0040  mov	ax,*$40
28859 7744           50                         push	ax
28860                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28861 7745           E8         089A            call	_read_word
28862 7748           83C4                   04  add	sp,*4
28863                                           ! Debug: list unsigned short = ax+0 (used reg = )
28864 774B           50                         push	ax
28865                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28866 774C           FF76         08            push	8[bp]
28867                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28868 774F           FF76         06            push	6[bp]
28869                                           ! Debug: func () void = write_word+0 (used reg = )
28870 7752           E8         08B8            call	_write_word
28871 7755           83C4                   06  add	sp,*6
28872                                           !BCC_EOS
28873                                           ! 4083             BX += 2;
28874                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28875 7758           8B46         08            mov	ax,8[bp]
28876 775B           40                         inc	ax
28877 775C           40                         inc	ax
28878 775D           8946         08            mov	8[bp],ax
28879                                           !BCC_EOS
28880                                           ! 4084         }
28881                                           ! 4085         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28882                       00007760            .292:
28883                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28884 7760           8B46         FE            mov	ax,-2[bp]
28885 7763           40                         inc	ax
28886 7764           8946         FE            mov	-2[bp],ax
28887                       00007767            .293:
28888                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28889 7767           8B46         FE            mov	ax,-2[bp]
28890 776A           3D                   0008  cmp	ax,*8
28891 776D           72           C9            jb 	.294
28892                       0000776F            .295:
28893                       0000776F            .291:
28894                                           ! Debug: list int = const $4E (used reg = )
28895 776F           B8                   004E  mov	ax,*$4E
28896 7772           50                         push	ax
28897                                           ! Debug: list int = const $40 (used reg = )
28898 7773           B8                   0040  mov	ax,*$40
28899 7776           50                         push	ax
28900                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28901 7777           E8         0868            call	_read_word
28902 777A           83C4                   04  add	sp,*4
28903                                           ! Debug: list unsigned short = ax+0 (used reg = )
28904 777D           50                         push	ax
28905                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28906 777E           FF76         08            push	8[bp]
28907                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28908 7781           FF76         06            push	6[bp]
28909                                           ! Debug: func () void = write_word+0 (used reg = )
28910 7784           E8         0886            call	_write_word
28911 7787           83C4                   06  add	sp,*6
28912                                           !BCC_EOS
28913                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28914 778A           8B46         08            mov	ax,8[bp]
28915 778D           40                         inc	ax
28916 778E           40                         inc	ax
28917 778F           8946         08            mov	8[bp],ax
28918                                           !BCC_EOS
28919                                           ! 4086         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28920                                           ! Debug: list int = const $62 (used reg = )
28921 7792           B8                   0062  mov	ax,*$62
28922 7795           50                         push	ax
28923                                           ! Debug: list int = const $40 (used reg = )
28924 7796           B8                   0040  mov	ax,*$40
28925 7799           50                         push	ax
28926                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28927 779A           E8         0832            call	_read_byte
28928 779D           83C4                   04  add	sp,*4
28929                                           ! Debug: list unsigned char = al+0 (used reg = )
28930 77A0           30E4                       xor	ah,ah
28931 77A2           50                         push	ax
28932                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28933 77A3           FF76         08            push	8[bp]
28934                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28935 77A6           FF76         06            push	6[bp]
28936                                           ! Debug: func () void = write_byte+0 (used reg = )
28937 77A9           E8         0849            call	_write_byte
28938 77AC           83C4                   06  add	sp,*6
28939                                           !BCC_EOS
28940                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28941 77AF           8B46         08            mov	ax,8[bp]
28942 77B2           40                         inc	ax
28943 77B3           8946         08            mov	8[bp],ax
28944                                           !BCC_EOS
28945                                           ! 4087         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28946                                           ! Debug: list int = const $7C (used reg = )
28947 77B6           B8                   007C  mov	ax,*$7C
28948 77B9           50                         push	ax
28949                                           ! Debug: list int = const 0 (used reg = )
28950 77BA           31C0                       xor	ax,ax
28951 77BC           50                         push	ax
28952                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28953 77BD           E8         0822            call	_read_word
28954 77C0           83C4                   04  add	sp,*4
28955                                           ! Debug: list unsigned short = ax+0 (used reg = )
28956 77C3           50                         push	ax
28957                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28958 77C4           FF76         08            push	8[bp]
28959                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28960 77C7           FF76         06            push	6[bp]
28961                                           ! Debug: func () void = write_word+0 (used reg = )
28962 77CA           E8         0840            call	_write_word
28963 77CD           83C4                   06  add	sp,*6
28964                                           !BCC_EOS
28965                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28966 77D0           8B46         08            mov	ax,8[bp]
28967 77D3           40                         inc	ax
28968 77D4           40                         inc	ax
28969 77D5           8946         08            mov	8[bp],ax
28970                                           !BCC_EOS
28971                                           ! 4088         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28972                                           ! Debug: list int = const $7E (used reg = )
28973 77D8           B8                   007E  mov	ax,*$7E
28974 77DB           50                         push	ax
28975                                           ! Debug: list int = const 0 (used reg = )
28976 77DC           31C0                       xor	ax,ax
28977 77DE           50                         push	ax
28978                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28979 77DF           E8         0800            call	_read_word
28980 77E2           83C4                   04  add	sp,*4
28981                                           ! Debug: list unsigned short = ax+0 (used reg = )
28982 77E5           50                         push	ax
28983                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28984 77E6           FF76         08            push	8[bp]
28985                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28986 77E9           FF76         06            push	6[bp]
28987                                           ! Debug: func () void = write_word+0 (used reg = )
28988 77EC           E8         081E            call	_write_word
28989 77EF           83C4                   06  add	sp,*6
28990                                           !BCC_EOS
28991                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28992 77F2           8B46         08            mov	ax,8[bp]
28993 77F5           40                         inc	ax
28994 77F6           40                         inc	ax
28995 77F7           8946         08            mov	8[bp],ax
28996                                           !BCC_EOS
28997                                           ! 4089         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28998                                           ! Debug: list int = const $10C (used reg = )
28999 77FA           B8                   010C  mov	ax,#$10C
29000 77FD           50                         push	ax
29001                                           ! Debug: list int = const 0 (used reg = )
29002 77FE           31C0                       xor	ax,ax
29003 7800           50                         push	ax
29004                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29005 7801           E8         07DE            call	_read_word
29006 7804           83C4                   04  add	sp,*4
29007                                           ! Debug: list unsigned short = ax+0 (used reg = )
29008 7807           50                         push	ax
29009                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29010 7808           FF76         08            push	8[bp]
29011                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29012 780B           FF76         06            push	6[bp]
29013                                           ! Debug: func () void = write_word+0 (used reg = )
29014 780E           E8         07FC            call	_write_word
29015 7811           83C4                   06  add	sp,*6
29016                                           !BCC_EOS
29017                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
29018 7814           8B46         08            mov	ax,8[bp]
29019 7817           40                         inc	ax
29020 7818           40                         inc	ax
29021 7819           8946         08            mov	8[bp],ax
29022                                           !BCC_EOS
29023                                           ! 4090         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
29024                                           ! Debug: list int = const $10E (used reg = )
29025 781C           B8                   010E  mov	ax,#$10E
29026 781F           50                         push	ax
29027                                           ! Debug: list int = const 0 (used reg = )
29028 7820           31C0                       xor	ax,ax
29029 7822           50                         push	ax
29030                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29031 7823           E8         07BC            call	_read_word
29032 7826           83C4                   04  add	sp,*4
29033                                           ! Debug: list unsigned short = ax+0 (used reg = )
29034 7829           50                         push	ax
29035                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29036 782A           FF76         08            push	8[bp]
29037                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29038 782D           FF76         06            push	6[bp]
29039                                           ! Debug: func () void = write_word+0 (used reg = )
29040 7830           E8         07DA            call	_write_word
29041 7833           83C4                   06  add	sp,*6
29042                                           !BCC_EOS
29043                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
29044 7836           8B46         08            mov	ax,8[bp]
29045 7839           40                         inc	ax
29046 783A           40                         inc	ax
29047 783B           8946         08            mov	8[bp],ax
29048                                           !BCC_EOS
29049                                           ! 4091     }
29050                                           ! 4092     if (CX & 4) {
29051                       0000783E            .28F:
29052                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
29053 783E           8A46         04            mov	al,4[bp]
29054 7841           24                     04  and	al,*4
29055 7843           84C0                       test	al,al
29056 7845         0F84         00B5            beq 	.296
29057                       00007849            .297:
29058                                           ! 4093         write_byte(ES, BX, inb(0x3c7)); BX++;
29059                                           ! Debug: list int = const $3C7 (used reg = )
29060 7849           B8                   03C7  mov	ax,#$3C7
29061 784C           50                         push	ax
29062                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29063 784D           E8         07D5            call	_inb
29064 7850           44                         inc	sp
29065 7851           44                         inc	sp
29066                                           ! Debug: list unsigned char = al+0 (used reg = )
29067 7852           30E4                       xor	ah,ah
29068 7854           50                         push	ax
29069                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29070 7855           FF76         08            push	8[bp]
29071                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29072 7858           FF76         06            push	6[bp]
29073                                           ! Debug: func () void = write_byte+0 (used reg = )
29074 785B           E8         0797            call	_write_byte
29075 785E           83C4                   06  add	sp,*6
29076                                           !BCC_EOS
29077                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
29078 7861           8B46         08            mov	ax,8[bp]
29079 7864           40                         inc	ax
29080 7865           8946         08            mov	8[bp],ax
29081                                           !BCC_EOS
29082                                           ! 4094         write_byte(ES, BX, inb(0x3c8)); BX++;
29083                                           ! Debug: list int = const $3C8 (used reg = )
29084 7868           B8                   03C8  mov	ax,#$3C8
29085 786B           50                         push	ax
29086                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29087 786C           E8         07B6            call	_inb
29088 786F           44                         inc	sp
29089 7870           44                         inc	sp
29090                                           ! Debug: list unsigned char = al+0 (used reg = )
29091 7871           30E4                       xor	ah,ah
29092 7873           50                         push	ax
29093                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29094 7874           FF76         08            push	8[bp]
29095                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29096 7877           FF76         06            push	6[bp]
29097                                           ! Debug: func () void = write_byte+0 (used reg = )
29098 787A           E8         0778            call	_write_byte
29099 787D           83C4                   06  add	sp,*6
29100                                           !BCC_EOS
29101                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
29102 7880           8B46         08            mov	ax,8[bp]
29103 7883           40                         inc	ax
29104 7884           8946         08            mov	8[bp],ax
29105                                           !BCC_EOS
29106                                           ! 4095         write_byte(ES, BX, inb(0x3c6)); BX++;
29107                                           ! Debug: list int = const $3C6 (used reg = )
29108 7887           B8                   03C6  mov	ax,#$3C6
29109 788A           50                         push	ax
29110                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29111 788B           E8         0797            call	_inb
29112 788E           44                         inc	sp
29113 788F           44                         inc	sp
29114                                           ! Debug: list unsigned char = al+0 (used reg = )
29115 7890           30E4                       xor	ah,ah
29116 7892           50                         push	ax
29117                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29118 7893           FF76         08            push	8[bp]
29119                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29120 7896           FF76         06            push	6[bp]
29121                                           ! Debug: func () void = write_byte+0 (used reg = )
29122 7899           E8         0759            call	_write_byte
29123 789C           83C4                   06  add	sp,*6
29124                                           !BCC_EOS
29125                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
29126 789F           8B46         08            mov	ax,8[bp]
29127 78A2           40                         inc	ax
29128 78A3           8946         08            mov	8[bp],ax
29129                                           !BCC_EOS
29130                                           ! 4096         outb(0x3c8,0x00);
29131                                           ! Debug: list int = const 0 (used reg = )
29132 78A6           31C0                       xor	ax,ax
29133 78A8           50                         push	ax
29134                                           ! Debug: list int = const $3C8 (used reg = )
29135 78A9           B8                   03C8  mov	ax,#$3C8
29136 78AC           50                         push	ax
29137                                           ! Debug: func () void = outb+0 (used reg = )
29138 78AD           E8         078B            call	_outb
29139 78B0           83C4                   04  add	sp,*4
29140                                           !BCC_EOS
29141                                           ! 4097         for(i=0;i<256*3;i++) {
29142                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
29143 78B3           31C0                       xor	ax,ax
29144 78B5           8946         FE            mov	-2[bp],ax
29145                                           !BCC_EOS
29146                                           !BCC_EOS
29147 78B8           EB           26            jmp .29A
29148                       000078BA            .29B:
29149                                           ! 4098             write_byte(ES, BX, inb(0x3c9)); BX++;
29150                                           ! Debug: list int = const $3C9 (used reg = )
29151 78BA           B8                   03C9  mov	ax,#$3C9
29152 78BD           50                         push	ax
29153                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29154 78BE           E8         0764            call	_inb
29155 78C1           44                         inc	sp
29156 78C2           44                         inc	sp
29157                                           ! Debug: list unsigned char = al+0 (used reg = )
29158 78C3           30E4                       xor	ah,ah
29159 78C5           50                         push	ax
29160                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29161 78C6           FF76         08            push	8[bp]
29162                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29163 78C9           FF76         06            push	6[bp]
29164                                           ! Debug: func () void = write_byte+0 (used reg = )
29165 78CC           E8         0726            call	_write_byte
29166 78CF           83C4                   06  add	sp,*6
29167                                           !BCC_EOS
29168                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
29169 78D2           8B46         08            mov	ax,8[bp]
29170 78D5           40                         inc	ax
29171 78D6           8946         08            mov	8[bp],ax
29172                                           !BCC_EOS
29173                                           ! 4099         }
29174                                           ! 4100         write_byte(ES, BX, 0); BX++;
29175                       000078D9            .299:
29176                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
29177 78D9           8B46         FE            mov	ax,-2[bp]
29178 78DC           40                         inc	ax
29179 78DD           8946         FE            mov	-2[bp],ax
29180                       000078E0            .29A:
29181                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
29182 78E0           8B46         FE            mov	ax,-2[bp]
29183 78E3           3D                   0300  cmp	ax,#$300
29184 78E6           72           D2            jb 	.29B
29185                       000078E8            .29C:
29186                       000078E8            .298:
29187                                           ! Debug: list int = const 0 (used reg = )
29188 78E8           31C0                       xor	ax,ax
29189 78EA           50                         push	ax
29190                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29191 78EB           FF76         08            push	8[bp]
29192                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29193 78EE           FF76         06            push	6[bp]
29194                                           ! Debug: func () void = write_byte+0 (used reg = )
29195 78F1           E8         0701            call	_write_byte
29196 78F4           83C4                   06  add	sp,*6
29197                                           !BCC_EOS
29198                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
29199 78F7           8B46         08            mov	ax,8[bp]
29200 78FA           40                         inc	ax
29201 78FB           8946         08            mov	8[bp],ax
29202                                           !BCC_EOS
29203                                           ! 4101     }
29204                                           ! 4102     return BX;
29205                       000078FE            .296:
29206 78FE           8B46         08            mov	ax,8[bp]
29207 7901           89EC                       mov	sp,bp
29208 7903           5D                         pop	bp
29209 7904           C3                         ret
29210                                           !BCC_EOS
29211                                           ! 4103 }
29212                                           ! 4104 static Bit16u biosfn_restore_video_state (CX,ES,BX)
29213                                           ! 4105      Bit16u CX;Bit16u ES;Bit16u BX;
29214                       00007905            _biosfn_restore_video_state:
29215                                           !BCC_EOS
29216                                           !BCC_EOS
29217                                           !BCC_EOS
29218                                           ! 4106 {
29219                                           ! 4107     Bit16u i, crtc_addr, v, addr1, ar_index;
29220                                           !BCC_EOS
29221                                           ! 4108     if (CX & 1) {
29222 7905           55                         push	bp
29223 7906           89E5                       mov	bp,sp
29224 7908           83C4                   F6  add	sp,*-$A
29225                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
29226 790B           8A46         04            mov	al,4[bp]
29227 790E           24                     01  and	al,*1
29228 7910           84C0                       test	al,al
29229 7912         0F84         02AA            beq 	.29D
29230                       00007916            .29E:
29231                                           ! 4109         inb(0x3da);
29232                                           ! Debug: list int = const $3DA (used reg = )
29233 7916           B8                   03DA  mov	ax,#$3DA
29234 7919           50                         push	ax
29235                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29236 791A           E8         0708            call	_inb
29237 791D           44                         inc	sp
29238 791E           44                         inc	sp
29239                                           !BCC_EOS
29240                                           ! 4110         crtc_addr = read_word(ES, BX + 0x40);
29241                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
29242 791F           8B46         08            mov	ax,8[bp]
29243                                           ! Debug: list unsigned int = ax+$40 (used reg = )
29244 7922           05                   0040  add	ax,*$40
29245 7925           50                         push	ax
29246                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29247 7926           FF76         06            push	6[bp]
29248                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29249 7929           E8         06B6            call	_read_word
29250 792C           83C4                   04  add	sp,*4
29251                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
29252 792F           8946         FC            mov	-4[bp],ax
29253                                           !BCC_EOS
29254                                           ! 4111         addr1 = BX;
29255                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
29256 7932           8B46         08            mov	ax,8[bp]
29257 7935           8946         F8            mov	-8[bp],ax
29258                                           !BCC_EOS
29259                                           ! 4112         BX += 5;
29260                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
29261 7938           8B46         08            mov	ax,8[bp]
29262 793B           05                   0005  add	ax,*5
29263 793E           8946         08            mov	8[bp],ax
29264                                           !BCC_EOS
29265                                           ! 4113         for(i=1;i<=4;i++){
29266                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
29267 7941           B8                   0001  mov	ax,*1
29268 7944           8946         FE            mov	-2[bp],ax
29269                                           !BCC_EOS
29270                                           !BCC_EOS
29271 7947           EB           34            jmp .2A1
29272                       00007949            .2A2:
29273                                           ! 4114             outb(0x3c4, i);
29274                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29275 7949           FF76         FE            push	-2[bp]
29276                                           ! Debug: list int = const $3C4 (used reg = )
29277 794C           B8                   03C4  mov	ax,#$3C4
29278 794F           50                         push	ax
29279                                           ! Debug: func () void = outb+0 (used reg = )
29280 7950           E8         06E8            call	_outb
29281 7953           83C4                   04  add	sp,*4
29282                                           !BCC_EOS
29283                                           ! 4115             outb(0x3c5, read_byte(ES, BX)); BX++;
29284                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29285 7956           FF76         08            push	8[bp]
29286                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29287 7959           FF76         06            push	6[bp]
29288                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29289 795C           E8         0670            call	_read_byte
29290 795F           83C4                   04  add	sp,*4
29291                                           ! Debug: list unsigned char = al+0 (used reg = )
29292 7962           30E4                       xor	ah,ah
29293 7964           50                         push	ax
29294                                           ! Debug: list int = const $3C5 (used reg = )
29295 7965           B8                   03C5  mov	ax,#$3C5
29296 7968           50                         push	ax
29297                                           ! Debug: func () void = outb+0 (used reg = )
29298 7969           E8         06CF            call	_outb
29299 796C           83C4                   04  add	sp,*4
29300                                           !BCC_EOS
29301                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29302 796F           8B46         08            mov	ax,8[bp]
29303 7972           40                         inc	ax
29304 7973           8946         08            mov	8[bp],ax
29305                                           !BCC_EOS
29306                                           ! 4116         }
29307                                           ! 4117         outb(0x3c4, 0);
29308                       00007976            .2A0:
29309                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29310 7976           8B46         FE            mov	ax,-2[bp]
29311 7979           40                         inc	ax
29312 797A           8946         FE            mov	-2[bp],ax
29313                       0000797D            .2A1:
29314                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
29315 797D           8B46         FE            mov	ax,-2[bp]
29316 7980           3D                   0004  cmp	ax,*4
29317 7983           76           C4            jbe	.2A2
29318                       00007985            .2A3:
29319                       00007985            .29F:
29320                                           ! Debug: list int = const 0 (used reg = )
29321 7985           31C0                       xor	ax,ax
29322 7987           50                         push	ax
29323                                           ! Debug: list int = const $3C4 (used reg = )
29324 7988           B8                   03C4  mov	ax,#$3C4
29325 798B           50                         push	ax
29326                                           ! Debug: func () void = outb+0 (used reg = )
29327 798C           E8         06AC            call	_outb
29328 798F           83C4                   04  add	sp,*4
29329                                           !BCC_EOS
29330                                           ! 4118         outb(0x3c5, read_byte(ES, BX)); BX++;
29331                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29332 7992           FF76         08            push	8[bp]
29333                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29334 7995           FF76         06            push	6[bp]
29335                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29336 7998           E8         0634            call	_read_byte
29337 799B           83C4                   04  add	sp,*4
29338                                           ! Debug: list unsigned char = al+0 (used reg = )
29339 799E           30E4                       xor	ah,ah
29340 79A0           50                         push	ax
29341                                           ! Debug: list int = const $3C5 (used reg = )
29342 79A1           B8                   03C5  mov	ax,#$3C5
29343 79A4           50                         push	ax
29344                                           ! Debug: func () void = outb+0 (used reg = )
29345 79A5           E8         0693            call	_outb
29346 79A8           83C4                   04  add	sp,*4
29347                                           !BCC_EOS
29348                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29349 79AB           8B46         08            mov	ax,8[bp]
29350 79AE           40                         inc	ax
29351 79AF           8946         08            mov	8[bp],ax
29352                                           !BCC_EOS
29353                                           ! 4119         outw(crtc_addr,0x0011);
29354                                           ! Debug: list int = const $11 (used reg = )
29355 79B2           B8                   0011  mov	ax,*$11
29356 79B5           50                         push	ax
29357                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29358 79B6           FF76         FC            push	-4[bp]
29359                                           ! Debug: func () void = outw+0 (used reg = )
29360 79B9           E8         068F            call	_outw
29361 79BC           83C4                   04  add	sp,*4
29362                                           !BCC_EOS
29363                                           ! 4120         for(i=0;i<=0x18;i++) {
29364                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29365 79BF           31C0                       xor	ax,ax
29366 79C1           8946         FE            mov	-2[bp],ax
29367                                           !BCC_EOS
29368                                           !BCC_EOS
29369 79C4           EB           3C            jmp .2A6
29370                       000079C6            .2A7:
29371                                           ! 4121             if (i != 0x11) {
29372                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
29373 79C6           8B46         FE            mov	ax,-2[bp]
29374 79C9           3D                   0011  cmp	ax,*$11
29375 79CC           74           26            je  	.2A8
29376                       000079CE            .2A9:
29377                                           ! 4122                 outb(crtc_addr,i);
29378                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29379 79CE           FF76         FE            push	-2[bp]
29380                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29381 79D1           FF76         FC            push	-4[bp]
29382                                           ! Debug: func () void = outb+0 (used reg = )
29383 79D4           E8         0664            call	_outb
29384 79D7           83C4                   04  add	sp,*4
29385                                           !BCC_EOS
29386                                           ! 4123                 outb(crtc_addr
29387                                           ! 4123 +1, read_byte(ES, BX));
29388                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29389 79DA           FF76         08            push	8[bp]
29390                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29391 79DD           FF76         06            push	6[bp]
29392                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29393 79E0           E8         05EC            call	_read_byte
29394 79E3           83C4                   04  add	sp,*4
29395                                           ! Debug: list unsigned char = al+0 (used reg = )
29396 79E6           30E4                       xor	ah,ah
29397 79E8           50                         push	ax
29398                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29399 79E9           8B46         FC            mov	ax,-4[bp]
29400                                           ! Debug: list unsigned int = ax+1 (used reg = )
29401 79EC           40                         inc	ax
29402 79ED           50                         push	ax
29403                                           ! Debug: func () void = outb+0 (used reg = )
29404 79EE           E8         064A            call	_outb
29405 79F1           83C4                   04  add	sp,*4
29406                                           !BCC_EOS
29407                                           ! 4124             }
29408                                           ! 4125             BX++;
29409                       000079F4            .2A8:
29410                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29411 79F4           8B46         08            mov	ax,8[bp]
29412 79F7           40                         inc	ax
29413 79F8           8946         08            mov	8[bp],ax
29414                                           !BCC_EOS
29415                                           ! 4126         }
29416                                           ! 4127         v = inb(0x3cc) & ~0x01;
29417                       000079FB            .2A5:
29418                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29419 79FB           8B46         FE            mov	ax,-2[bp]
29420 79FE           40                         inc	ax
29421 79FF           8946         FE            mov	-2[bp],ax
29422                       00007A02            .2A6:
29423                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
29424 7A02           8B46         FE            mov	ax,-2[bp]
29425 7A05           3D                   0018  cmp	ax,*$18
29426 7A08           76           BC            jbe	.2A7
29427                       00007A0A            .2AA:
29428                       00007A0A            .2A4:
29429                                           ! Debug: list int = const $3CC (used reg = )
29430 7A0A           B8                   03CC  mov	ax,#$3CC
29431 7A0D           50                         push	ax
29432                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29433 7A0E           E8         0614            call	_inb
29434 7A11           44                         inc	sp
29435 7A12           44                         inc	sp
29436                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
29437 7A13           24                     FE  and	al,#$FE
29438                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29439 7A15           30E4                       xor	ah,ah
29440 7A17           8946         FA            mov	-6[bp],ax
29441                                           !BCC_EOS
29442                                           ! 4128         if (crtc_addr = 0x3d4)
29443                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
29444 7A1A           B8                   03D4  mov	ax,#$3D4
29445 7A1D           8946         FC            mov	-4[bp],ax
29446 7A20           85C0                       test	ax,ax
29447 7A22           74           08            je  	.2AB
29448                       00007A24            .2AC:
29449                                           ! 4129             v |= 0x01;
29450                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
29451 7A24           8B46         FA            mov	ax,-6[bp]
29452 7A27           0C                     01  or	al,*1
29453 7A29           8946         FA            mov	-6[bp],ax
29454                                           !BCC_EOS
29455                                           ! 4130         outb(0x3c2, v);
29456                       00007A2C            .2AB:
29457                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29458 7A2C           FF76         FA            push	-6[bp]
29459                                           ! Debug: list int = const $3C2 (used reg = )
29460 7A2F           B8                   03C2  mov	ax,#$3C2
29461 7A32           50                         push	ax
29462                                           ! Debug: func () void = outb+0 (used reg = )
29463 7A33           E8         0605            call	_outb
29464 7A36           83C4                   04  add	sp,*4
29465                                           !BCC_EOS
29466                                           ! 4131         outb(crtc_addr, 0x11);
29467                                           ! Debug: list int = const $11 (used reg = )
29468 7A39           B8                   0011  mov	ax,*$11
29469 7A3C           50                         push	ax
29470                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29471 7A3D           FF76         FC            push	-4[bp]
29472                                           ! Debug: func () void = outb+0 (used reg = )
29473 7A40           E8         05F8            call	_outb
29474 7A43           83C4                   04  add	sp,*4
29475                                           !BCC_EOS
29476                                           ! 4132         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
29477                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
29478 7A46           8B46         08            mov	ax,8[bp]
29479                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
29480                                           ! Debug: list unsigned int = ax-7 (used reg = )
29481 7A49           05                   FFF9  add	ax,*-7
29482 7A4C           50                         push	ax
29483                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29484 7A4D           FF76         06            push	6[bp]
29485                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29486 7A50           E8         057C            call	_read_byte
29487 7A53           83C4                   04  add	sp,*4
29488                                           ! Debug: list unsigned char = al+0 (used reg = )
29489 7A56           30E4                       xor	ah,ah
29490 7A58           50                         push	ax
29491                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29492 7A59           8B46         FC            mov	ax,-4[bp]
29493                                           ! Debug: list unsigned int = ax+1 (used reg = )
29494 7A5C           40                         inc	ax
29495 7A5D           50                         push	ax
29496                                           ! Debug: func () void = outb+0 (used reg = )
29497 7A5E           E8         05DA            call	_outb
29498 7A61           83C4                   04  add	sp,*4
29499                                           !BCC_EOS
29500                                           ! 4133         ar_index = read_byte(ES, addr1 + 0x03);
29501                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
29502 7A64           8B46         F8            mov	ax,-8[bp]
29503                                           ! Debug: list unsigned int = ax+3 (used reg = )
29504 7A67           05                   0003  add	ax,*3
29505 7A6A           50                         push	ax
29506                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29507 7A6B           FF76         06            push	6[bp]
29508                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29509 7A6E           E8         055E            call	_read_byte
29510 7A71           83C4                   04  add	sp,*4
29511                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
29512 7A74           30E4                       xor	ah,ah
29513 7A76           8946         F6            mov	-$A[bp],ax
29514                                           !BCC_EOS
29515                                           ! 4134         inb(0x3da);
29516                                           ! Debug: list int = const $3DA (used reg = )
29517 7A79           B8                   03DA  mov	ax,#$3DA
29518 7A7C           50                         push	ax
29519                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29520 7A7D           E8         05A5            call	_inb
29521 7A80           44                         inc	sp
29522 7A81           44                         inc	sp
29523                                           !BCC_EOS
29524                                           ! 4135         for(i=0;i<=0x13;i++) {
29525                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29526 7A82           31C0                       xor	ax,ax
29527 7A84           8946         FE            mov	-2[bp],ax
29528                                           !BCC_EOS
29529                                           !BCC_EOS
29530 7A87           EB           3C            jmp .2AF
29531                       00007A89            .2B0:
29532                                           ! 4136             outb(0x3c0, i | (ar_index & 0x20));
29533                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
29534 7A89           8A46         F6            mov	al,-$A[bp]
29535 7A8C           24                     20  and	al,*$20
29536                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
29537                                           ! Debug: expression subtree swapping
29538 7A8E           30E4                       xor	ah,ah
29539 7A90           0B46         FE            or	ax,-2[bp]
29540                                           ! Debug: list unsigned int = ax+0 (used reg = )
29541 7A93           50                         push	ax
29542                                           ! Debug: list int = const $3C0 (used reg = )
29543 7A94           B8                   03C0  mov	ax,#$3C0
29544 7A97           50                         push	ax
29545                                           ! Debug: func () void = outb+0 (used reg = )
29546 7A98           E8         05A0            call	_outb
29547 7A9B           83C4                   04  add	sp,*4
29548                                           !BCC_EOS
29549                                           ! 4137             outb(0x3c0, read_byte(ES, BX)); BX++;
29550                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29551 7A9E           FF76         08            push	8[bp]
29552                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29553 7AA1           FF76         06            push	6[bp]
29554                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29555 7AA4           E8         0528            call	_read_byte
29556 7AA7           83C4                   04  add	sp,*4
29557                                           ! Debug: list unsigned char = al+0 (used reg = )
29558 7AAA           30E4                       xor	ah,ah
29559 7AAC           50                         push	ax
29560                                           ! Debug: list int = const $3C0 (used reg = )
29561 7AAD           B8                   03C0  mov	ax,#$3C0
29562 7AB0           50                         push	ax
29563                                           ! Debug: func () void = outb+0 (used reg = )
29564 7AB1           E8         0587            call	_outb
29565 7AB4           83C4                   04  add	sp,*4
29566                                           !BCC_EOS
29567                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29568 7AB7           8B46         08            mov	ax,8[bp]
29569 7ABA           40                         inc	ax
29570 7ABB           8946         08            mov	8[bp],ax
29571                                           !BCC_EOS
29572                                           ! 4138         }
29573                                           ! 4139         outb(0x3c0, ar_index);
29574                       00007ABE            .2AE:
29575                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29576 7ABE           8B46         FE            mov	ax,-2[bp]
29577 7AC1           40                         inc	ax
29578 7AC2           8946         FE            mov	-2[bp],ax
29579                       00007AC5            .2AF:
29580                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
29581 7AC5           8B46         FE            mov	ax,-2[bp]
29582 7AC8           3D                   0013  cmp	ax,*$13
29583 7ACB           76           BC            jbe	.2B0
29584                       00007ACD            .2B1:
29585                       00007ACD            .2AD:
29586                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
29587 7ACD           FF76         F6            push	-$A[bp]
29588                                           ! Debug: list int = const $3C0 (used reg = )
29589 7AD0           B8                   03C0  mov	ax,#$3C0
29590 7AD3           50                         push	ax
29591                                           ! Debug: func () void = outb+0 (used reg = )
29592 7AD4           E8         0564            call	_outb
29593 7AD7           83C4                   04  add	sp,*4
29594                                           !BCC_EOS
29595                                           ! 4140         inb(0x3da);
29596                                           ! Debug: list int = const $3DA (used reg = )
29597 7ADA           B8                   03DA  mov	ax,#$3DA
29598 7ADD           50                         push	ax
29599                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29600 7ADE           E8         0544            call	_inb
29601 7AE1           44                         inc	sp
29602 7AE2           44                         inc	sp
29603                                           !BCC_EOS
29604                                           ! 4141         for(i=0;i<=8;i++) {
29605                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29606 7AE3           31C0                       xor	ax,ax
29607 7AE5           8946         FE            mov	-2[bp],ax
29608                                           !BCC_EOS
29609                                           !BCC_EOS
29610 7AE8           EB           34            jmp .2B4
29611                       00007AEA            .2B5:
29612                                           ! 4142             outb(0x3ce,i);
29613                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29614 7AEA           FF76         FE            push	-2[bp]
29615                                           ! Debug: list int = const $3CE (used reg = )
29616 7AED           B8                   03CE  mov	ax,#$3CE
29617 7AF0           50                         push	ax
29618                                           ! Debug: func () void = outb+0 (used reg = )
29619 7AF1           E8         0547            call	_outb
29620 7AF4           83C4                   04  add	sp,*4
29621                                           !BCC_EOS
29622                                           ! 4143             outb(0x3cf, read_byte(ES, BX)); BX++;
29623                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29624 7AF7           FF76         08            push	8[bp]
29625                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29626 7AFA           FF76         06            push	6[bp]
29627                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29628 7AFD           E8         04CF            call	_read_byte
29629 7B00           83C4                   04  add	sp,*4
29630                                           ! Debug: list unsigned char = al+0 (used reg = )
29631 7B03           30E4                       xor	ah,ah
29632 7B05           50                         push	ax
29633                                           ! Debug: list int = const $3CF (used reg = )
29634 7B06           B8                   03CF  mov	ax,#$3CF
29635 7B09           50                         push	ax
29636                                           ! Debug: func () void = outb+0 (used reg = )
29637 7B0A           E8         052E            call	_outb
29638 7B0D           83C4                   04  add	sp,*4
29639                                           !BCC_EOS
29640                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29641 7B10           8B46         08            mov	ax,8[bp]
29642 7B13           40                         inc	ax
29643 7B14           8946         08            mov	8[bp],ax
29644                                           !BCC_EOS
29645                                           ! 4144         }
29646                                           ! 4145         BX += 2;
29647                       00007B17            .2B3:
29648                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29649 7B17           8B46         FE            mov	ax,-2[bp]
29650 7B1A           40                         inc	ax
29651 7B1B           8946         FE            mov	-2[bp],ax
29652                       00007B1E            .2B4:
29653                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29654 7B1E           8B46         FE            mov	ax,-2[bp]
29655 7B21           3D                   0008  cmp	ax,*8
29656 7B24           76           C4            jbe	.2B5
29657                       00007B26            .2B6:
29658                       00007B26            .2B2:
29659                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29660 7B26           8B46         08            mov	ax,8[bp]
29661 7B29           40                         inc	ax
29662 7B2A           40                         inc	ax
29663 7B2B           8946         08            mov	8[bp],ax
29664                                           !BCC_EOS
29665                                           ! 4146         BX += 4;
29666                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29667 7B2E           8B46         08            mov	ax,8[bp]
29668 7B31           05                   0004  add	ax,*4
29669 7B34           8946         08            mov	8[bp],ax
29670                                           !BCC_EOS
29671                                           ! 4147         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29672                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29673 7B37           FF76         F8            push	-8[bp]
29674                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29675 7B3A           FF76         06            push	6[bp]
29676                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29677 7B3D           E8         048F            call	_read_byte
29678 7B40           83C4                   04  add	sp,*4
29679                                           ! Debug: list unsigned char = al+0 (used reg = )
29680 7B43           30E4                       xor	ah,ah
29681 7B45           50                         push	ax
29682                                           ! Debug: list int = const $3C4 (used reg = )
29683 7B46           B8                   03C4  mov	ax,#$3C4
29684 7B49           50                         push	ax
29685                                           ! Debug: func () void = outb+0 (used reg = )
29686 7B4A           E8         04EE            call	_outb
29687 7B4D           83C4                   04  add	sp,*4
29688                                           !BCC_EOS
29689                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29690 7B50           8B46         F8            mov	ax,-8[bp]
29691 7B53           40                         inc	ax
29692 7B54           8946         F8            mov	-8[bp],ax
29693                                           !BCC_EOS
29694                                           ! 4148         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29695                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29696 7B57           FF76         F8            push	-8[bp]
29697                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29698 7B5A           FF76         06            push	6[bp]
29699                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29700 7B5D           E8         046F            call	_read_byte
29701 7B60           83C4                   04  add	sp,*4
29702                                           ! Debug: list unsigned char = al+0 (used reg = )
29703 7B63           30E4                       xor	ah,ah
29704 7B65           50                         push	ax
29705                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29706 7B66           FF76         FC            push	-4[bp]
29707                                           ! Debug: func () void = outb+0 (used reg = )
29708 7B69           E8         04CF            call	_outb
29709 7B6C           83C4                   04  add	sp,*4
29710                                           !BCC_EOS
29711                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29712 7B6F           8B46         F8            mov	ax,-8[bp]
29713 7B72           40                         inc	ax
29714 7B73           8946         F8            mov	-8[bp],ax
29715                                           !BCC_EOS
29716                                           ! 4149         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29717                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29718 7B76           FF76         F8            push	-8[bp]
29719                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29720 7B79           FF76         06            push	6[bp]
29721                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29722 7B7C           E8         0450            call	_read_byte
29723 7B7F           83C4                   04  add	sp,*4
29724                                           ! Debug: list unsigned char = al+0 (used reg = )
29725 7B82           30E4                       xor	ah,ah
29726 7B84           50                         push	ax
29727                                           ! Debug: list int = const $3CE (used reg = )
29728 7B85           B8                   03CE  mov	ax,#$3CE
29729 7B88           50                         push	ax
29730                                           ! Debug: func () void = outb+0 (used reg = )
29731 7B89           E8         04AF            call	_outb
29732 7B8C           83C4                   04  add	sp,*4
29733                                           !BCC_EOS
29734                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29735 7B8F           8B46         F8            mov	ax,-8[bp]
29736 7B92           40                         inc	ax
29737 7B93           8946         F8            mov	-8[bp],ax
29738                                           !BCC_EOS
29739                                           ! 4150         addr1++;
29740                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29741 7B96           8B46         F8            mov	ax,-8[bp]
29742 7B99           40                         inc	ax
29743 7B9A           8946         F8            mov	-8[bp],ax
29744                                           !BCC_EOS
29745                                           ! 4151         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29746                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29747 7B9D           FF76         F8            push	-8[bp]
29748                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29749 7BA0           FF76         06            push	6[bp]
29750                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29751 7BA3           E8         0429            call	_read_byte
29752 7BA6           83C4                   04  add	sp,*4
29753                                           ! Debug: list unsigned char = al+0 (used reg = )
29754 7BA9           30E4                       xor	ah,ah
29755 7BAB           50                         push	ax
29756                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29757 7BAC           8B46         FC            mov	ax,-4[bp]
29758                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29759                                           ! Debug: list unsigned int = ax+6 (used reg = )
29760 7BAF           05                   0006  add	ax,*6
29761 7BB2           50                         push	ax
29762                                           ! Debug: func () void = outb+0 (used reg = )
29763 7BB3           E8         0485            call	_outb
29764 7BB6           83C4                   04  add	sp,*4
29765                                           !BCC_EOS
29766                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29767 7BB9           8B46         F8            mov	ax,-8[bp]
29768 7BBC           40                         inc	ax
29769 7BBD           8946         F8            mov	-8[bp],ax
29770                                           !BCC_EOS
29771                                           ! 4152     }
29772                                           ! 4153     if (CX & 2) {
29773                       00007BC0            .29D:
29774                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29775 7BC0           8A46         04            mov	al,4[bp]
29776 7BC3           24                     02  and	al,*2
29777 7BC5           84C0                       test	al,al
29778 7BC7         0F84         0270            beq 	.2B7
29779                       00007BCB            .2B8:
29780                                           ! 4154         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29781                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29782 7BCB           FF76         08            push	8[bp]
29783                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29784 7BCE           FF76         06            push	6[bp]
29785                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29786 7BD1           E8         03FB            call	_read_byte
29787 7BD4           83C4                   04  add	sp,*4
29788                                           ! Debug: list unsigned char = al+0 (used reg = )
29789 7BD7           30E4                       xor	ah,ah
29790 7BD9           50                         push	ax
29791                                           ! Debug: list int = const $49 (used reg = )
29792 7BDA           B8                   0049  mov	ax,*$49
29793 7BDD           50                         push	ax
29794                                           ! Debug: list int = const $40 (used reg = )
29795 7BDE           B8                   0040  mov	ax,*$40
29796 7BE1           50                         push	ax
29797                                           ! Debug: func () void = write_byte+0 (used reg = )
29798 7BE2           E8         0410            call	_write_byte
29799 7BE5           83C4                   06  add	sp,*6
29800                                           !BCC_EOS
29801                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29802 7BE8           8B46         08            mov	ax,8[bp]
29803 7BEB           40                         inc	ax
29804 7BEC           8946         08            mov	8[bp],ax
29805                                           !BCC_EOS
29806                                           ! 4155         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29807                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29808 7BEF           FF76         08            push	8[bp]
29809                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29810 7BF2           FF76         06            push	6[bp]
29811                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29812 7BF5           E8         03EA            call	_read_word
29813 7BF8           83C4                   04  add	sp,*4
29814                                           ! Debug: list unsigned short = ax+0 (used reg = )
29815 7BFB           50                         push	ax
29816                                           ! Debug: list int = const $4A (used reg = )
29817 7BFC           B8                   004A  mov	ax,*$4A
29818 7BFF           50                         push	ax
29819                                           ! Debug: list int = const $40 (used reg = )
29820 7C00           B8                   0040  mov	ax,*$40
29821 7C03           50                         push	ax
29822                                           ! Debug: func () void = write_word+0 (used reg = )
29823 7C04           E8         0406            call	_write_word
29824 7C07           83C4                   06  add	sp,*6
29825                                           !BCC_EOS
29826                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29827 7C0A           8B46         08            mov	ax,8[bp]
29828 7C0D           40                         inc	ax
29829 7C0E           40                         inc	ax
29830 7C0F           8946         08            mov	8[bp],ax
29831                                           !BCC_EOS
29832                                           ! 4156         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29833                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29834 7C12           FF76         08            push	8[bp]
29835                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29836 7C15           FF76         06            push	6[bp]
29837                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29838 7C18           E8         03C7            call	_read_word
29839 7C1B           83C4                   04  add	sp,*4
29840                                           ! Debug: list unsigned short = ax+0 (used reg = )
29841 7C1E           50                         push	ax
29842                                           ! Debug: list int = const $4C (used reg = )
29843 7C1F           B8                   004C  mov	ax,*$4C
29844 7C22           50                         push	ax
29845                                           ! Debug: list int = const $40 (used reg = )
29846 7C23           B8                   0040  mov	ax,*$40
29847 7C26           50                         push	ax
29848                                           ! Debug: func () void = write_word+0 (used reg = )
29849 7C27           E8         03E3            call	_write_word
29850 7C2A           83C4                   06  add	sp,*6
29851                                           !BCC_EOS
29852                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29853 7C2D           8B46         08            mov	ax,8[bp]
29854 7C30           40                         inc	ax
29855 7C31           40                         inc	ax
29856 7C32           8946         08            mov	8[bp],ax
29857                                           !BCC_EOS
29858                                           ! 4157         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29859                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29860 7C35           FF76         08            push	8[bp]
29861                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29862 7C38           FF76         06            push	6[bp]
29863                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29864 7C3B           E8         03A4            call	_read_word
29865 7C3E           83C4                   04  add	sp,*4
29866                                           ! Debug: list unsigned short = ax+0 (used reg = )
29867 7C41           50                         push	ax
29868                                           ! Debug: list int = const $63 (used reg = )
29869 7C42           B8                   0063  mov	ax,*$63
29870 7C45           50                         push	ax
29871                                           ! Debug: list int = const $40 (used reg = )
29872 7C46           B8                   0040  mov	ax,*$40
29873 7C49           50                         push	ax
29874                                           ! Debug: func () void = write_word+0 (used reg = )
29875 7C4A           E8         03C0            call	_write_word
29876 7C4D           83C4                   06  add	sp,*6
29877                                           !BCC_EOS
29878                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29879 7C50           8B46         08            mov	ax,8[bp]
29880 7C53           40                         inc	ax
29881 7C54           40                         inc	ax
29882 7C55           8946         08            mov	8[bp],ax
29883                                           !BCC_EOS
29884                                           ! 4158         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29885                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29886 7C58           FF76         08            push	8[bp]
29887                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29888 7C5B           FF76         06            push	6[bp]
29889                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29890 7C5E           E8         036E            call	_read_byte
29891 7C61           83C4                   04  add	sp,*4
29892                                           ! Debug: list unsigned char = al+0 (used reg = )
29893 7C64           30E4                       xor	ah,ah
29894 7C66           50                         push	ax
29895                                           ! Debug: list int = const $84 (used reg = )
29896 7C67           B8                   0084  mov	ax,#$84
29897 7C6A           50                         push	ax
29898                                           ! Debug: list int = const $40 (used reg = )
29899 7C6B           B8                   0040  mov	ax,*$40
29900 7C6E           50                         push	ax
29901                                           ! Debug: func () void = write_byte+0 (used reg = )
29902 7C6F           E8         0383            call	_write_byte
29903 7C72           83C4                   06  add	sp,*6
29904                                           !BCC_EOS
29905                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29906 7C75           8B46         08            mov	ax,8[bp]
29907 7C78           40                         inc	ax
29908 7C79           8946         08            mov	8[bp],ax
29909                                           !BCC_EOS
29910                                           ! 4159         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29911                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29912 7C7C           FF76         08            push	8[bp]
29913                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29914 7C7F           FF76         06            push	6[bp]
29915                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29916 7C82           E8         035D            call	_read_word
29917 7C85           83C4                   04  add	sp,*4
29918                                           ! Debug: list unsigned short = ax+0 (used reg = )
29919 7C88           50                         push	ax
29920                                           ! Debug: list int = const $85 (used reg = )
29921 7C89           B8                   0085  mov	ax,#$85
29922 7C8C           50                         push	ax
29923                                           ! Debug: list int = const $40 (used reg = )
29924 7C8D           B8                   0040  mov	ax,*$40
29925 7C90           50                         push	ax
29926                                           ! Debug: func () void = write_word+0 (used reg = )
29927 7C91           E8         0379            call	_write_word
29928 7C94           83C4                   06  add	sp,*6
29929                                           !BCC_EOS
29930                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29931 7C97           8B46         08            mov	ax,8[bp]
29932 7C9A           40                         inc	ax
29933 7C9B           40                         inc	ax
29934 7C9C           8946         08            mov	8[bp],ax
29935                                           !BCC_EOS
29936                                           ! 4160         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29937                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29938 7C9F           FF76         08            push	8[bp]
29939                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29940 7CA2           FF76         06            push	6[bp]
29941                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29942 7CA5           E8         0327            call	_read_byte
29943 7CA8           83C4                   04  add	sp,*4
29944                                           ! Debug: list unsigned char = al+0 (used reg = )
29945 7CAB           30E4                       xor	ah,ah
29946 7CAD           50                         push	ax
29947                                           ! Debug: list int = const $87 (used reg = )
29948 7CAE           B8                   0087  mov	ax,#$87
29949 7CB1           50                         push	ax
29950                                           ! Debug: list int = const $40 (used reg = )
29951 7CB2           B8                   0040  mov	ax,*$40
29952 7CB5           50                         push	ax
29953                                           ! Debug: func () void = write_byte+0 (used reg = )
29954 7CB6           E8         033C            call	_write_byte
29955 7CB9           83C4                   06  add	sp,*6
29956                                           !BCC_EOS
29957                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29958 7CBC           8B46         08            mov	ax,8[bp]
29959 7CBF           40                         inc	ax
29960 7CC0           8946         08            mov	8[bp],ax
29961                                           !BCC_EOS
29962                                           ! 4161         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29963                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29964 7CC3           FF76         08            push	8[bp]
29965                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29966 7CC6           FF76         06            push	6[bp]
29967                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29968 7CC9           E8         0303            call	_read_byte
29969 7CCC           83C4                   04  add	sp,*4
29970                                           ! Debug: list unsigned char = al+0 (used reg = )
29971 7CCF           30E4                       xor	ah,ah
29972 7CD1           50                         push	ax
29973                                           ! Debug: list int = const $88 (used reg = )
29974 7CD2           B8                   0088  mov	ax,#$88
29975 7CD5           50                         push	ax
29976                                           ! Debug: list int = const $40 (used reg = )
29977 7CD6           B8                   0040  mov	ax,*$40
29978 7CD9           50                         push	ax
29979                                           ! Debug: func () void = write_byte+0 (used reg = )
29980 7CDA           E8         0318            call	_write_byte
29981 7CDD           83C4                   06  add	sp,*6
29982                                           !BCC_EOS
29983                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29984 7CE0           8B46         08            mov	ax,8[bp]
29985 7CE3           40                         inc	ax
29986 7CE4           8946         08            mov	8[bp],ax
29987                                           !BCC_EOS
29988                                           ! 4162         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29989                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29990 7CE7           FF76         08            push	8[bp]
29991                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29992 7CEA           FF76         06            push	6[bp]
29993                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29994 7CED           E8         02DF            call	_read_byte
29995 7CF0           83C4                   04  add	sp,*4
29996                                           ! Debug: list unsigned char = al+0 (used reg = )
29997 7CF3           30E4                       xor	ah,ah
29998 7CF5           50                         push	ax
29999                                           ! Debug: list int = const $89 (used reg = )
30000 7CF6           B8                   0089  mov	ax,#$89
30001 7CF9           50                         push	ax
30002                                           ! Debug: list int = const $40 (used reg = )
30003 7CFA           B8                   0040  mov	ax,*$40
30004 7CFD           50                         push	ax
30005                                           ! Debug: func () void = write_byte+0 (used reg = )
30006 7CFE           E8         02F4            call	_write_byte
30007 7D01           83C4                   06  add	sp,*6
30008                                           !BCC_EOS
30009                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30010 7D04           8B46         08            mov	ax,8[bp]
30011 7D07           40                         inc	ax
30012 7D08           8946         08            mov	8[bp],ax
30013                                           !BCC_EOS
30014                                           ! 4163         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
30015                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30016 7D0B           FF76         08            push	8[bp]
30017                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30018 7D0E           FF76         06            push	6[bp]
30019                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30020 7D11           E8         02CE            call	_read_word
30021 7D14           83C4                   04  add	sp,*4
30022                                           ! Debug: list unsigned short = ax+0 (used reg = )
30023 7D17           50                         push	ax
30024                                           ! Debug: list int = const $60 (used reg = )
30025 7D18           B8                   0060  mov	ax,*$60
30026 7D1B           50                         push	ax
30027                                           ! Debug: list int = const $40 (used reg = )
30028 7D1C           B8                   0040  mov	ax,*$40
30029 7D1F           50                         push	ax
30030                                           ! Debug: func () void = write_word+0 (used reg = )
30031 7D20           E8         02EA            call	_write_word
30032 7D23           83C4                   06  add	sp,*6
30033                                           !BCC_EOS
30034                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
30035 7D26           8B46         08            mov	ax,8[bp]
30036 7D29           40                         inc	ax
30037 7D2A           40                         inc	ax
30038 7D2B           8946         08            mov	8[bp],ax
30039                                           !BCC_EOS
30040                                           ! 4164         for(i=0;i<8;i++) {
30041                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
30042 7D2E           31C0                       xor	ax,ax
30043 7D30           8946         FE            mov	-2[bp],ax
30044                                           !BCC_EOS
30045                                           !BCC_EOS
30046 7D33           EB           2F            jmp .2BB
30047                       00007D35            .2BC:
30048                                           ! 4165             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
30049                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30050 7D35           FF76         08            push	8[bp]
30051                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30052 7D38           FF76         06            push	6[bp]
30053                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30054 7D3B           E8         02A4            call	_read_word
30055 7D3E           83C4                   04  add	sp,*4
30056                                           ! Debug: list unsigned short = ax+0 (used reg = )
30057 7D41           50                         push	ax
30058                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
30059                                           ! Debug: expression subtree swapping
30060 7D42           8B46         FE            mov	ax,-2[bp]
30061 7D45           D1E0                       shl	ax,*1
30062                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
30063                                           ! Debug: expression subtree swapping
30064                                           ! Debug: list unsigned int = ax+$50 (used reg = )
30065 7D47           05                   0050  add	ax,*$50
30066 7D4A           50                         push	ax
30067                                           ! Debug: list int = const $40 (used reg = )
30068 7D4B           B8                   0040  mov	ax,*$40
30069 7D4E           50                         push	ax
30070                                           ! Debug: func () void = write_word+0 (used reg = )
30071 7D4F           E8         02BB            call	_write_word
30072 7D52           83C4                   06  add	sp,*6
30073                                           !BCC_EOS
30074                                           ! 4166             BX += 2;
30075                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
30076 7D55           8B46         08            mov	ax,8[bp]
30077 7D58           40                         inc	ax
30078 7D59           40                         inc	ax
30079 7D5A           8946         08            mov	8[bp],ax
30080                                           !BCC_EOS
30081                                           ! 4167         }
30082                                           ! 4168         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
30083                       00007D5D            .2BA:
30084                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
30085 7D5D           8B46         FE            mov	ax,-2[bp]
30086 7D60           40                         inc	ax
30087 7D61           8946         FE            mov	-2[bp],ax
30088                       00007D64            .2BB:
30089                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
30090 7D64           8B46         FE            mov	ax,-2[bp]
30091 7D67           3D                   0008  cmp	ax,*8
30092 7D6A           72           C9            jb 	.2BC
30093                       00007D6C            .2BD:
30094                       00007D6C            .2B9:
30095                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30096 7D6C           FF76         08            push	8[bp]
30097                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30098 7D6F           FF76         06            push	6[bp]
30099                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30100 7D72           E8         026D            call	_read_word
30101 7D75           83C4                   04  add	sp,*4
30102                                           ! Debug: list unsigned short = ax+0 (used reg = )
30103 7D78           50                         push	ax
30104                                           ! Debug: list int = const $4E (used reg = )
30105 7D79           B8                   004E  mov	ax,*$4E
30106 7D7C           50                         push	ax
30107                                           ! Debug: list int = const $40 (used reg = )
30108 7D7D           B8                   0040  mov	ax,*$40
30109 7D80           50                         push	ax
30110                                           ! Debug: func () void = write_word+0 (used reg = )
30111 7D81           E8         0289            call	_write_word
30112 7D84           83C4                   06  add	sp,*6
30113                                           !BCC_EOS
30114                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
30115 7D87           8B46         08            mov	ax,8[bp]
30116 7D8A           40                         inc	ax
30117 7D8B           40                         inc	ax
30118 7D8C           8946         08            mov	8[bp],ax
30119                                           !BCC_EOS
30120                                           ! 4169         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
30121                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30122 7D8F           FF76         08            push	8[bp]
30123                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30124 7D92           FF76         06            push	6[bp]
30125                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30126 7D95           E8         0237            call	_read_byte
30127 7D98           83C4                   04  add	sp,*4
30128                                           ! Debug: list unsigned char = al+0 (used reg = )
30129 7D9B           30E4                       xor	ah,ah
30130 7D9D           50                         push	ax
30131                                           ! Debug: list int = const $62 (used reg = )
30132 7D9E           B8                   0062  mov	ax,*$62
30133 7DA1           50                         push	ax
30134                                           ! Debug: list int = const $40 (used reg = )
30135 7DA2           B8                   0040  mov	ax,*$40
30136 7DA5           50                         push	ax
30137                                           ! Debug: func () void = write_byte+0 (used reg = )
30138 7DA6           E8         024C            call	_write_byte
30139 7DA9           83C4                   06  add	sp,*6
30140                                           !BCC_EOS
30141                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30142 7DAC           8B46         08            mov	ax,8[bp]
30143 7DAF           40                         inc	ax
30144 7DB0           8946         08            mov	8[bp],ax
30145                                           !BCC_EOS
30146                                           ! 4170         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
30147                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30148 7DB3           FF76         08            push	8[bp]
30149                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30150 7DB6           FF76         06            push	6[bp]
30151                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30152 7DB9           E8         0226            call	_read_word
30153 7DBC           83C4                   04  add	sp,*4
30154                                           ! Debug: list unsigned short = ax+0 (used reg = )
30155 7DBF           50                         push	ax
30156                                           ! Debug: list int = const $7C (used reg = )
30157 7DC0           B8                   007C  mov	ax,*$7C
30158 7DC3           50                         push	ax
30159                                           ! Debug: list int = const 0 (used reg = )
30160 7DC4           31C0                       xor	ax,ax
30161 7DC6           50                         push	ax
30162                                           ! Debug: func () void = write_word+0 (used reg = )
30163 7DC7           E8         0243            call	_write_word
30164 7DCA           83C4                   06  add	sp,*6
30165                                           !BCC_EOS
30166                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
30167 7DCD           8B46         08            mov	ax,8[bp]
30168 7DD0           40                         inc	ax
30169 7DD1           40                         inc	ax
30170 7DD2           8946         08            mov	8[bp],ax
30171                                           !BCC_EOS
30172                                           ! 4171         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
30173                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30174 7DD5           FF76         08            push	8[bp]
30175                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30176 7DD8           FF76         06            push	6[bp]
30177                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30178 7DDB           E8         0204            call	_read_word
30179 7DDE           83C4                   04  add	sp,*4
30180                                           ! Debug: list unsigned short = ax+0 (used reg = )
30181 7DE1           50                         push	ax
30182                                           ! Debug: list int = const $7E (used reg = )
30183 7DE2           B8                   007E  mov	ax,*$7E
30184 7DE5           50                         push	ax
30185                                           ! Debug: list int = const 0 (used reg = )
30186 7DE6           31C0                       xor	ax,ax
30187 7DE8           50                         push	ax
30188                                           ! Debug: func () void = write_word+0 (used reg = )
30189 7DE9           E8         0221            call	_write_word
30190 7DEC           83C4                   06  add	sp,*6
30191                                           !BCC_EOS
30192                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
30193 7DEF           8B46         08            mov	ax,8[bp]
30194 7DF2           40                         inc	ax
30195 7DF3           40                         inc	ax
30196 7DF4           8946         08            mov	8[bp],ax
30197                                           !BCC_EOS
30198                                           ! 4172         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
30199                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30200 7DF7           FF76         08            push	8[bp]
30201                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30202 7DFA           FF76         06            push	6[bp]
30203                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30204 7DFD           E8         01E2            call	_read_word
30205 7E00           83C4                   04  add	sp,*4
30206                                           ! Debug: list unsigned short = ax+0 (used reg = )
30207 7E03           50                         push	ax
30208                                           ! Debug: list int = const $10C (used reg = )
30209 7E04           B8                   010C  mov	ax,#$10C
30210 7E07           50                         push	ax
30211                                           ! Debug: list int = const 0 (used reg = )
30212 7E08           31C0                       xor	ax,ax
30213 7E0A           50                         push	ax
30214                                           ! Debug: func () void = write_word+0 (used reg = )
30215 7E0B           E8         01FF            call	_write_word
30216 7E0E           83C4                   06  add	sp,*6
30217                                           !BCC_EOS
30218                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
30219 7E11           8B46         08            mov	ax,8[bp]
30220 7E14           40                         inc	ax
30221 7E15           40                         inc	ax
30222 7E16           8946         08            mov	8[bp],ax
30223                                           !BCC_EOS
30224                                           ! 4173         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
30225                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30226 7E19           FF76         08            push	8[bp]
30227                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30228 7E1C           FF76         06            push	6[bp]
30229                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30230 7E1F           E8         01C0            call	_read_word
30231 7E22           83C4                   04  add	sp,*4
30232                                           ! Debug: list unsigned short = ax+0 (used reg = )
30233 7E25           50                         push	ax
30234                                           ! Debug: list int = const $10E (used reg = )
30235 7E26           B8                   010E  mov	ax,#$10E
30236 7E29           50                         push	ax
30237                                           ! Debug: list int = const 0 (used reg = )
30238 7E2A           31C0                       xor	ax,ax
30239 7E2C           50                         push	ax
30240                                           ! Debug: func () void = write_word+0 (used reg = )
30241 7E2D           E8         01DD            call	_write_word
30242 7E30           83C4                   06  add	sp,*6
30243                                           !BCC_EOS
30244                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
30245 7E33           8B46         08            mov	ax,8[bp]
30246 7E36           40                         inc	ax
30247 7E37           40                         inc	ax
30248 7E38           8946         08            mov	8[bp],ax
30249                                           !BCC_EOS
30250                                           ! 4174     }
30251                                           ! 4175     if (CX & 4) {
30252                       00007E3B            .2B7:
30253                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
30254 7E3B           8A46         04            mov	al,4[bp]
30255 7E3E           24                     04  and	al,*4
30256 7E40           84C0                       test	al,al
30257 7E42         0F84         0096            beq 	.2BE
30258                       00007E46            .2BF:
30259                                           ! 4176         BX++;
30260                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30261 7E46           8B46         08            mov	ax,8[bp]
30262 7E49           40                         inc	ax
30263 7E4A           8946         08            mov	8[bp],ax
30264                                           !BCC_EOS
30265                                           ! 4177        
30266                                           ! 4177  v = read_byte(ES, BX); BX++;
30267                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30268 7E4D           FF76         08            push	8[bp]
30269                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30270 7E50           FF76         06            push	6[bp]
30271                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30272 7E53           E8         0179            call	_read_byte
30273 7E56           83C4                   04  add	sp,*4
30274                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
30275 7E59           30E4                       xor	ah,ah
30276 7E5B           8946         FA            mov	-6[bp],ax
30277                                           !BCC_EOS
30278                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30279 7E5E           8B46         08            mov	ax,8[bp]
30280 7E61           40                         inc	ax
30281 7E62           8946         08            mov	8[bp],ax
30282                                           !BCC_EOS
30283                                           ! 4178         outb(0x3c6, read_byte(ES, BX)); BX++;
30284                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30285 7E65           FF76         08            push	8[bp]
30286                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30287 7E68           FF76         06            push	6[bp]
30288                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30289 7E6B           E8         0161            call	_read_byte
30290 7E6E           83C4                   04  add	sp,*4
30291                                           ! Debug: list unsigned char = al+0 (used reg = )
30292 7E71           30E4                       xor	ah,ah
30293 7E73           50                         push	ax
30294                                           ! Debug: list int = const $3C6 (used reg = )
30295 7E74           B8                   03C6  mov	ax,#$3C6
30296 7E77           50                         push	ax
30297                                           ! Debug: func () void = outb+0 (used reg = )
30298 7E78           E8         01C0            call	_outb
30299 7E7B           83C4                   04  add	sp,*4
30300                                           !BCC_EOS
30301                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30302 7E7E           8B46         08            mov	ax,8[bp]
30303 7E81           40                         inc	ax
30304 7E82           8946         08            mov	8[bp],ax
30305                                           !BCC_EOS
30306                                           ! 4179         outb(0x3c8,0x00);
30307                                           ! Debug: list int = const 0 (used reg = )
30308 7E85           31C0                       xor	ax,ax
30309 7E87           50                         push	ax
30310                                           ! Debug: list int = const $3C8 (used reg = )
30311 7E88           B8                   03C8  mov	ax,#$3C8
30312 7E8B           50                         push	ax
30313                                           ! Debug: func () void = outb+0 (used reg = )
30314 7E8C           E8         01AC            call	_outb
30315 7E8F           83C4                   04  add	sp,*4
30316                                           !BCC_EOS
30317                                           ! 4180         for(i=0;i<256*3;i++) {
30318                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
30319 7E92           31C0                       xor	ax,ax
30320 7E94           8946         FE            mov	-2[bp],ax
30321                                           !BCC_EOS
30322                                           !BCC_EOS
30323 7E97           EB           27            jmp .2C2
30324                       00007E99            .2C3:
30325                                           ! 4181             outb(0x3c9, read_byte(ES, BX)); BX++;
30326                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30327 7E99           FF76         08            push	8[bp]
30328                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30329 7E9C           FF76         06            push	6[bp]
30330                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30331 7E9F           E8         012D            call	_read_byte
30332 7EA2           83C4                   04  add	sp,*4
30333                                           ! Debug: list unsigned char = al+0 (used reg = )
30334 7EA5           30E4                       xor	ah,ah
30335 7EA7           50                         push	ax
30336                                           ! Debug: list int = const $3C9 (used reg = )
30337 7EA8           B8                   03C9  mov	ax,#$3C9
30338 7EAB           50                         push	ax
30339                                           ! Debug: func () void = outb+0 (used reg = )
30340 7EAC           E8         018C            call	_outb
30341 7EAF           83C4                   04  add	sp,*4
30342                                           !BCC_EOS
30343                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30344 7EB2           8B46         08            mov	ax,8[bp]
30345 7EB5           40                         inc	ax
30346 7EB6           8946         08            mov	8[bp],ax
30347                                           !BCC_EOS
30348                                           ! 4182         }
30349                                           ! 4183         BX++;
30350                       00007EB9            .2C1:
30351                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
30352 7EB9           8B46         FE            mov	ax,-2[bp]
30353 7EBC           40                         inc	ax
30354 7EBD           8946         FE            mov	-2[bp],ax
30355                       00007EC0            .2C2:
30356                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
30357 7EC0           8B46         FE            mov	ax,-2[bp]
30358 7EC3           3D                   0300  cmp	ax,#$300
30359 7EC6           72           D1            jb 	.2C3
30360                       00007EC8            .2C4:
30361                       00007EC8            .2C0:
30362                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30363 7EC8           8B46         08            mov	ax,8[bp]
30364 7ECB           40                         inc	ax
30365 7ECC           8946         08            mov	8[bp],ax
30366                                           !BCC_EOS
30367                                           ! 4184         outb(0x3c8, v);
30368                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
30369 7ECF           FF76         FA            push	-6[bp]
30370                                           ! Debug: list int = const $3C8 (used reg = )
30371 7ED2           B8                   03C8  mov	ax,#$3C8
30372 7ED5           50                         push	ax
30373                                           ! Debug: func () void = outb+0 (used reg = )
30374 7ED6           E8         0162            call	_outb
30375 7ED9           83C4                   04  add	sp,*4
30376                                           !BCC_EOS
30377                                           ! 4185     }
30378                                           ! 4186     return BX;
30379                       00007EDC            .2BE:
30380 7EDC           8B46         08            mov	ax,8[bp]
30381 7EDF           89EC                       mov	sp,bp
30382 7EE1           5D                         pop	bp
30383 7EE2           C3                         ret
30384                                           !BCC_EOS
30385                                           ! 4187 }
30386                                           ! 4188 static Bit8u find_vga_entry(mode)
30387                                           ! 4189 Bit8u mode;
30388                       00007EE3            _find_vga_entry:
30389                                           !BCC_EOS
30390                                           ! 4190 {
30391                                           ! 4191  Bit8u i,line=0xFF;
30392 7EE3           55                         push	bp
30393 7EE4           89E5                       mov	bp,sp
30394 7EE6           4C                         dec	sp
30395 7EE7           4C                         dec	sp
30396                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
30397 7EE8           B0                     FF  mov	al,#$FF
30398 7EEA           8846         FE            mov	-2[bp],al
30399                                           !BCC_EOS
30400                                           ! 4192  for(i=0;i<=17;i++)
30401                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
30402 7EED           30C0                       xor	al,al
30403 7EEF           8846         FF            mov	-1[bp],al
30404                                           !BCC_EOS
30405                                           !BCC_EOS
30406                                           ! 4193   if(vga_modes[i].svgamode==mode)
30407 7EF2           EB           23            jmp .2C7
30408                       00007EF4            .2C8:
30409                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$12] struct  = vga_modes+0 (used reg = )
30410 7EF4           8A46         FF            mov	al,-1[bp]
30411 7EF7           30E4                       xor	ah,ah
30412 7EF9           B1                     03  mov	cl,*3
30413 7EFB           D3E0                       shl	ax,cl
30414 7EFD           89C3                       mov	bx,ax
30415                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
30416 7EFF           8A87       0233            mov	al,_vga_modes[bx]
30417 7F03           3A46         04            cmp	al,4[bp]
30418 7F06           75           08            jne 	.2C9
30419                       00007F08            .2CA:
30420                                           ! 4194    {line=i;
30421                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
30422 7F08           8A46         FF            mov	al,-1[bp]
30423 7F0B           8846         FE            mov	-2[bp],al
30424                                           !BCC_EOS
30425                                           ! 4195     break;
30426 7F0E           EB           0E            jmp .2C5
30427                                           !BCC_EOS
30428                                           ! 4196    }
30429                                           ! 4197  return line;
30430                       00007F10            .2C9:
30431                       00007F10            .2C6:
30432                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
30433 7F10           8A46         FF            mov	al,-1[bp]
30434 7F13           40                         inc	ax
30435 7F14           8846         FF            mov	-1[bp],al
30436                       00007F17            .2C7:
30437                                           ! Debug: le int = const $11 to unsigned char i = [S+4-3] (used reg = )
30438 7F17           8A46         FF            mov	al,-1[bp]
30439 7F1A           3C                     11  cmp	al,*$11
30440 7F1C           76           D6            jbe	.2C8
30441                       00007F1E            .2CB:
30442                       00007F1E            .2C5:
30443 7F1E           8A46         FE            mov	al,-2[bp]
30444 7F21           89EC                       mov	sp,bp
30445 7F23           5D                         pop	bp
30446 7F24           C3                         ret
30447                                           !BCC_EOS
30448                                           ! 4198 }
30449                                           ! 4199 static void memsetb(seg,offset,value,count)
30450                                           ! Register BX used in function find_vga_entry
30451                                           ! 4200   Bit16u seg;
30452                       00007F25            _memsetb:
30453                                           !BCC_EOS
30454                                           ! 4201   Bit16u offset;
30455                                           !BCC_EOS
30456                                           ! 4202   Bit16u value;
30457                                           !BCC_EOS
30458                                           ! 4203   Bit16u count;
30459                                           !BCC_EOS
30460                                           ! 4204 {
30461                                           ! 4205 #asm
30462                                           !BCC_ASM
30463                       00000008            _memsetb.count	set	8
30464                       00000002            _memsetb.seg	set	2
30465                       00000006            _memsetb.value	set	6
30466                       00000004            _memsetb.offset	set	4
30467 7F25           55                           push bp
30468 7F26           89E5                         mov bp, sp
30469 7F28           50                             push ax
30470 7F29           51                             push cx
30471 7F2A           06                             push es
30472 7F2B           57                             push di
30473 7F2C           8B4E         0A                mov cx, 10[bp] ; count
30474 7F2F           83F9                   00      cmp cx, #0x00
30475 7F32           74           10                je memsetb_end
30476 7F34           8B46         04                mov ax, 4[bp] ; segment
30477 7F37           8EC0                           mov es, ax
30478 7F39           8B46         06                mov ax, 6[bp] ; offset
30479 7F3C           89C7                           mov di, ax
30480 7F3E           8A46         08                mov al, 8[bp] ; value
30481 7F41           FC                             cld
30482 7F42           F3                             rep
30483 7F43           AA                              stosb
30484                       00007F44            memsetb_end:
30485 7F44           5F                             pop di
30486 7F45           07                             pop es
30487 7F46           59                             pop cx
30488 7F47           58                             pop ax
30489 7F48           5D                           pop bp
30490                                           ! 4229 endasm
30491                                           !BCC_ENDASM
30492                                           ! 4230 }
30493 7F49           C3                         ret
30494                                           ! 4231 static void memsetw(seg,offset,value,count)
30495                                           ! 4232   Bit16u seg;
30496                       00007F4A            _memsetw:
30497                                           !BCC_EOS
30498                                           ! 4233   Bit16u offset;
30499                                           !BCC_EOS
30500                                           ! 4234   Bit16u value;
30501                                           !BCC_EOS
30502                                           ! 4235   Bit16u count;
30503                                           !BCC_EOS
30504                                           ! 4236 {
30505                                           ! 4237 #asm
30506                                           !BCC_ASM
30507                       00000008            _memsetw.count	set	8
30508                       00000002            _memsetw.seg	set	2
30509                       00000006            _memsetw.value	set	6
30510                       00000004            _memsetw.offset	set	4
30511 7F4A           55                           push bp
30512 7F4B           89E5                         mov bp, sp
30513 7F4D           50                             push ax
30514 7F4E           51                             push cx
30515 7F4F           06                             push es
30516 7F50           57                             push di
30517 7F51           8B4E         0A                mov cx, 10[bp] ; count
30518 7F54           83F9                   00      cmp cx, #0x00
30519 7F57           74           10                je memsetw_end
30520 7F59           8B46         04                mov ax, 4[bp] ; segment
30521 7F5C           8EC0                           mov es, ax
30522 7F5E           8B46         06                mov ax, 6[bp] ; offset
30523 7F61           89C7                           mov di, ax
30524 7F63           8B46         08                mov ax, 8[bp] ; value
30525 7F66           FC                             cld
30526 7F67           F3                             rep
30527 7F68           AB                              stosw
30528                       00007F69            memsetw_end:
30529 7F69           5F                             pop di
30530 7F6A           07                             pop es
30531 7F6B           59                             pop cx
30532 7F6C           58                             pop ax
30533 7F6D           5D                           pop bp
30534                                           ! 4261 endasm
30535                                           !BCC_ENDASM
30536                                           ! 4262 }
30537 7F6E           C3                         ret
30538                                           ! 4263 static void memcpyb(dseg,doffset,sseg,soffset,count)
30539                                           ! 4264   Bit16u dseg;
30540                       00007F6F            _memcpyb:
30541                                           !BCC_EOS
30542                                           ! 4265   Bit16u doffset;
30543                                           !BCC_EOS
30544                                           ! 4266   Bit16u sseg;
30545                                           !BCC_EOS
30546                                           ! 4267   Bit16u soffset;
30547                                           !BCC_EOS
30548                                           ! 4268   Bit16u count;
30549                                           !BCC_EOS
30550                                           ! 4269 {
30551                                           ! 4270 #asm
30552                                           !BCC_ASM
30553                       0000000A            _memcpyb.count	set	$A
30554                       00000006            _memcpyb.sseg	set	6
30555                       00000008            _memcpyb.soffset	set	8
30556                       00000002            _memcpyb.dseg	set	2
30557                       00000004            _memcpyb.doffset	set	4
30558 7F6F           55                           push bp
30559 7F70           89E5                         mov bp, sp
30560 7F72           50                             push ax
30561 7F73           51                             push cx
30562 7F74           06                             push es
30563 7F75           57                             push di
30564 7F76           1E                             push ds
30565 7F77           56                             push si
30566 7F78           8B4E         0C                mov cx, 12[bp] ; count
30567 7F7B           83F9                   00      cmp cx, #0x0000
30568 7F7E           74           17                je memcpyb_end
30569 7F80           8B46         04                mov ax, 4[bp] ; dsegment
30570 7F83           8EC0                           mov es, ax
30571 7F85           8B46         06                mov ax, 6[bp] ; doffset
30572 7F88           89C7                           mov di, ax
30573 7F8A           8B46         08                mov ax, 8[bp] ; ssegment
30574 7F8D           8ED8                           mov ds, ax
30575 7F8F           8B46         0A                mov ax, 10[bp] ; soffset
30576 7F92           89C6                           mov si, ax
30577 7F94           FC                             cld
30578 7F95           F3                             rep
30579 7F96           A4                              movsb
30580                       00007F97            memcpyb_end:
30581 7F97           5E                             pop si
30582 7F98           1F                             pop ds
30583 7F99           5F                             pop di
30584 7F9A           07                             pop es
30585 7F9B           59                             pop cx
30586 7F9C           58                             pop ax
30587 7F9D           5D                           pop bp
30588                                           ! 4301 endasm
30589                                           !BCC_ENDASM
30590                                           ! 4302 }
30591 7F9E           C3                         ret
30592                                           ! 4303 static void memcpyw(dseg,doffset,sseg,soffset,count)
30593                                           ! 4304   Bit16u dseg;
30594                       00007F9F            _memcpyw:
30595                                           !BCC_EOS
30596                                           ! 4305   Bit16u doffset;
30597                                           !BCC_EOS
30598                                           ! 4306   Bit16u sseg
30599                                           ! 4306 ;
30600                                           !BCC_EOS
30601                                           ! 4307   Bit16u soffset;
30602                                           !BCC_EOS
30603                                           ! 4308   Bit16u count;
30604                                           !BCC_EOS
30605                                           ! 4309 {
30606                                           ! 4310 #asm
30607                                           !BCC_ASM
30608                       0000000A            _memcpyw.count	set	$A
30609                       00000006            _memcpyw.sseg	set	6
30610                       00000008            _memcpyw.soffset	set	8
30611                       00000002            _memcpyw.dseg	set	2
30612                       00000004            _memcpyw.doffset	set	4
30613 7F9F           55                           push bp
30614 7FA0           89E5                         mov bp, sp
30615 7FA2           50                             push ax
30616 7FA3           51                             push cx
30617 7FA4           06                             push es
30618 7FA5           57                             push di
30619 7FA6           1E                             push ds
30620 7FA7           56                             push si
30621 7FA8           8B4E         0C                mov cx, 12[bp] ; count
30622 7FAB           83F9                   00      cmp cx, #0x0000
30623 7FAE           74           17                je memcpyw_end
30624 7FB0           8B46         04                mov ax, 4[bp] ; dsegment
30625 7FB3           8EC0                           mov es, ax
30626 7FB5           8B46         06                mov ax, 6[bp] ; doffset
30627 7FB8           89C7                           mov di, ax
30628 7FBA           8B46         08                mov ax, 8[bp] ; ssegment
30629 7FBD           8ED8                           mov ds, ax
30630 7FBF           8B46         0A                mov ax, 10[bp] ; soffset
30631 7FC2           89C6                           mov si, ax
30632 7FC4           FC                             cld
30633 7FC5           F3                             rep
30634 7FC6           A5                              movsw
30635                       00007FC7            memcpyw_end:
30636 7FC7           5E                             pop si
30637 7FC8           1F                             pop ds
30638 7FC9           5F                             pop di
30639 7FCA           07                             pop es
30640 7FCB           59                             pop cx
30641 7FCC           58                             pop ax
30642 7FCD           5D                           pop bp
30643                                           ! 4341 endasm
30644                                           !BCC_ENDASM
30645                                           ! 4342 }
30646 7FCE           C3                         ret
30647                                           ! 4343 static Bit8u
30648                                           ! 4344 read_byte(seg, offset)
30649                                           ! 4345   Bit16u seg;
30650                       00007FCF            _read_byte:
30651                                           !BCC_EOS
30652                                           ! 4346   Bit16u offset;
30653                                           !BCC_EOS
30654                                           ! 4347 {
30655                                           ! 4348 #asm
30656                                           !BCC_ASM
30657                       00000002            _read_byte.seg	set	2
30658                       00000004            _read_byte.offset	set	4
30659 7FCF           55                           push bp
30660 7FD0           89E5                         mov bp, sp
30661 7FD2           53                             push bx
30662 7FD3           1E                             push ds
30663 7FD4           8B46         04                mov ax, 4[bp] ; segment
30664 7FD7           8ED8                           mov ds, ax
30665 7FD9           8B5E         06                mov bx, 6[bp] ; offset
30666 7FDC           8A07                           mov al, [bx]
30667                                               ;; al = return value (byte)
30668 7FDE           1F                             pop ds
30669 7FDF           5B                             pop bx
30670 7FE0           5D                           pop bp
30671                                           ! 4361 endasm
30672                                           !BCC_ENDASM
30673                                           ! 4362 }
30674 7FE1           C3                         ret
30675                                           ! 4363 static Bit16u
30676                                           ! 4364 read_word(seg, offset)
30677                                           ! 4365   Bit16u seg;
30678                       00007FE2            _read_word:
30679                                           !BCC_EOS
30680                                           ! 4366   Bit16u offset;
30681                                           !BCC_EOS
30682                                           ! 4367 {
30683                                           ! 4368 #asm
30684                                           !BCC_ASM
30685                       00000002            _read_word.seg	set	2
30686                       00000004            _read_word.offset	set	4
30687 7FE2           55                           push bp
30688 7FE3           89E5                         mov bp, sp
30689 7FE5           53                             push bx
30690 7FE6           1E                             push ds
30691 7FE7           8B46         04                mov ax, 4[bp] ; segment
30692 7FEA           8ED8                           mov ds, ax
30693 7FEC           8B5E         06                mov bx, 6[bp] ; offset
30694 7FEF           8B07                           mov ax, [bx]
30695                                               ;; ax = return value (word)
30696 7FF1           1F                             pop ds
30697 7FF2           5B                             pop bx
30698 7FF3           5D                           pop bp
30699                                           ! 4381 endasm
30700                                           !BCC_ENDASM
30701                                           ! 4382 }
30702 7FF4           C3                         ret
30703                                           ! 4383 static void
30704                                           ! 4384 write_byte(seg, offset, data)
30705                                           ! 4385   Bit16u seg;
30706                       00007FF5            _write_byte:
30707                                           !BCC_EOS
30708                                           ! 4386   Bit16u offset;
30709                                           !BCC_EOS
30710                                           ! 4387   Bit8u data;
30711                                           !BCC_EOS
30712                                           ! 4388 {
30713                                           ! 4389 #asm
30714                                           !BCC_ASM
30715                       00000002            _write_byte.seg	set	2
30716                       00000006            _write_byte.data	set	6
30717                       00000004            _write_byte.offset	set	4
30718 7FF5           55                           push bp
30719 7FF6           89E5                         mov bp, sp
30720 7FF8           50                             push ax
30721 7FF9           53                             push bx
30722 7FFA           1E                             push ds
30723 7FFB           8B46         04                mov ax, 4[bp] ; segment
30724 7FFE           8ED8                           mov ds, ax
30725 8000           8B5E         06                mov bx, 6[bp] ; offset
30726 8003           8A46         08                mov al, 8[bp] ; data byte
30727 8006           8807                           mov [bx], al ; write data byte
30728 8008           1F                             pop ds
30729 8009           5B                             pop bx
30730 800A           58                             pop ax
30731 800B           5D                           pop bp
30732                                           ! 4404 endasm
30733                                           !BCC_ENDASM
30734                                           ! 4405 }
30735 800C           C3                         ret
30736                                           ! 4406 static void
30737                                           ! 4407 write_word(seg, offset, data)
30738                                           ! 4408   Bit16u seg;
30739                       0000800D            _write_word:
30740                                           !BCC_EOS
30741                                           ! 4409   Bit16u offset;
30742                                           !BCC_EOS
30743                                           ! 4410   Bit16u data;
30744                                           !BCC_EOS
30745                                           ! 4411 {
30746                                           ! 4412 #asm
30747                                           !BCC_ASM
30748                       00000002            _write_word.seg	set	2
30749                       00000006            _write_word.data	set	6
30750                       00000004            _write_word.offset	set	4
30751 800D           55                           push bp
30752 800E           89E5                         mov bp, sp
30753 8010           50                             push ax
30754 8011           53                             push bx
30755 8012           1E                             push ds
30756 8013           8B46         04                mov ax, 4[bp] ; segment
30757 8016           8ED8                           mov ds, ax
30758 8018           8B5E         06                mov bx, 6[bp] ; offset
30759 801B           8B46         08                mov ax, 8[bp] ; data word
30760 801E           8907                           mov [bx], ax ; write data word
30761 8020           1F                             pop ds
30762 8021           5B                             pop bx
30763 8022           58                             pop ax
30764 8023           5D                           pop bp
30765                                           ! 4427 endasm
30766                                           !BCC_ENDASM
30767                                           ! 4428 }
30768 8024           C3                         ret
30769                                           ! 4429  Bit8u
30770                                           ! 4430 inb(port)
30771                                           ! 4431   Bit16u port;
30772                                           export	_inb
30773                       00008025            _inb:
30774                                           !BCC_EOS
30775                                           ! 4432 {
30776                                           ! 4433 #asm
30777                                           !BCC_ASM
30778                       00000002            _inb.port	set	2
30779 8025           55                           push bp
30780 8026           89E5                         mov bp, sp
30781 8028           52                             push dx
30782 8029           8B56         04                mov dx, 4[bp]
30783 802C           EC                             in al, dx
30784 802D           5A                             pop dx
30785 802E           5D                           pop bp
30786                                           ! 4441 endasm
30787                                           !BCC_ENDASM
30788                                           ! 4442 }
30789 802F           C3                         ret
30790                                           ! 4443   Bit16u
30791                                           ! 4444 inw(port)
30792                                           ! 4445   Bit16u port;
30793                                           export	_inw
30794                       00008030            _inw:
30795                                           !BCC_EOS
30796                                           ! 4446 {
30797                                           ! 4447 #asm
30798                                           !BCC_ASM
30799                       00000002            _inw.port	set	2
30800 8030           55                           push bp
30801 8031           89E5                         mov bp, sp
30802 8033           52                             push dx
30803 8034           8B56         04                mov dx, 4[bp]
30804 8037           ED                             in ax, dx
30805 8038           5A                             pop dx
30806 8039           5D                           pop bp
30807                                           ! 4455 endasm
30808                                           !BCC_ENDASM
30809                                           ! 4456 }
30810 803A           C3                         ret
30811                                           ! 4457   void
30812                                           ! 4458 outb(port, val)
30813                                           ! 4459   B
30814                                           ! 4459 it16u port;
30815                                           export	_outb
30816                       0000803B            _outb:
30817                                           !BCC_EOS
30818                                           ! 4460   Bit8u val;
30819                                           !BCC_EOS
30820                                           ! 4461 {
30821                                           ! 4462 #asm
30822                                           !BCC_ASM
30823                       00000004            _outb.val	set	4
30824                       00000002            _outb.port	set	2
30825 803B           55                           push bp
30826 803C           89E5                         mov bp, sp
30827 803E           50                             push ax
30828 803F           52                             push dx
30829 8040           8B56         04                mov dx, 4[bp]
30830 8043           8A46         06                mov al, 6[bp]
30831 8046           EE                             out dx, al
30832 8047           5A                             pop dx
30833 8048           58                             pop ax
30834 8049           5D                           pop bp
30835                                           ! 4473 endasm
30836                                           !BCC_ENDASM
30837                                           ! 4474 }
30838 804A           C3                         ret
30839                                           ! 4475   void
30840                                           ! 4476 outw(port, val)
30841                                           ! 4477   Bit16u port;
30842                                           export	_outw
30843                       0000804B            _outw:
30844                                           !BCC_EOS
30845                                           ! 4478   Bit16u val;
30846                                           !BCC_EOS
30847                                           ! 4479 {
30848                                           ! 4480 #asm
30849                                           !BCC_ASM
30850                       00000004            _outw.val	set	4
30851                       00000002            _outw.port	set	2
30852 804B           55                           push bp
30853 804C           89E5                         mov bp, sp
30854 804E           50                             push ax
30855 804F           52                             push dx
30856 8050           8B56         04                mov dx, 4[bp]
30857 8053           8B46         06                mov ax, 6[bp]
30858 8056           EF                             out dx, ax
30859 8057           5A                             pop dx
30860 8058           58                             pop ax
30861 8059           5D                           pop bp
30862                                           ! 4491 endasm
30863                                           !BCC_ENDASM
30864                                           ! 4492 }
30865 805A           C3                         ret
30866                                           ! 4493 Bit16u get_SS()
30867                                           ! 4494 {
30868                                           export	_get_SS
30869                       0000805B            _get_SS:
30870                                           ! 4495 #asm
30871                                           !BCC_ASM
30872 805B           8CD0                         mov ax, ss
30873                                           ! 4497 endasm
30874                                           !BCC_ENDASM
30875                                           ! 4498 }
30876 805D           C3                         ret
30877                                           ! 4499 void unimplemented()
30878                                           ! 4500 {
30879                                           export	_unimplemented
30880                       0000805E            _unimplemented:
30881                                           ! 4501  printf("--> Unimplemented\n");
30882 805E           55                         push	bp
30883 805F           89E5                       mov	bp,sp
30884                                           ! Debug: list * char = .2CC+0 (used reg = )
30885 8061           BB                   A768  mov	bx,#.2CC
30886 8064           53                         push	bx
30887                                           ! Debug: func () void = printf+0 (used reg = )
30888 8065           E8         0012            call	_printf
30889 8068           89EC                       mov	sp,bp
30890                                           !BCC_EOS
30891                                           ! 4502 }
30892 806A           5D                         pop	bp
30893 806B           C3                         ret
30894                                           ! 4503 void unknown()
30895                                           ! Register BX used in function unimplemented
30896                                           ! 4504 {
30897                                           export	_unknown
30898                       0000806C            _unknown:
30899                                           ! 4505  printf("--> Unknown int10\n");
30900 806C           55                         push	bp
30901 806D           89E5                       mov	bp,sp
30902                                           ! Debug: list * char = .2CD+0 (used reg = )
30903 806F           BB                   A755  mov	bx,#.2CD
30904 8072           53                         push	bx
30905                                           ! Debug: func () void = printf+0 (used reg = )
30906 8073           E8         0004            call	_printf
30907 8076           89EC                       mov	sp,bp
30908                                           !BCC_EOS
30909                                           ! 4506 }
30910 8078           5D                         pop	bp
30911 8079           C3                         ret
30912                                           ! 4507 void printf(s)
30913                                           ! Register BX used in function unknown
30914                                           ! 4508   Bit8u *s;
30915                                           export	_printf
30916                       0000807A            _printf:
30917                                           !BCC_EOS
30918                                           ! 4509 {
30919                                           ! 4510   Bit8u c, format_char;
30920                                           !BCC_EOS
30921                                           ! 4511   Boolean in_format;
30922                                           !BCC_EOS
30923                                           ! 4512   unsigned format_width, i;
30924                                           !BCC_EOS
30925                                           ! 4513   Bit16u *arg_ptr;
30926                                           !BCC_EOS
30927                                           ! 4514   Bit16u arg_seg, arg, digit, nibble, shift_count;
30928                                           !BCC_EOS
30929                                           ! 4515   arg_ptr = &s;
30930 807A           55                         push	bp
30931 807B           89E5                       mov	bp,sp
30932 807D           83C4                   EC  add	sp,*-$14
30933                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30934 8080           8D5E         04            lea	bx,4[bp]
30935 8083           895E         F6            mov	-$A[bp],bx
30936                                           !BCC_EOS
30937                                           ! 4516   arg_seg = get_SS();
30938                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30939 8086           E8         FFD2            call	_get_SS
30940                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30941 8089           8946         F4            mov	-$C[bp],ax
30942                                           !BCC_EOS
30943                                           ! 4517   in_format = 0;
30944                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30945 808C           31C0                       xor	ax,ax
30946 808E           8946         FC            mov	-4[bp],ax
30947                                           !BCC_EOS
30948                                           ! 4518   format_width = 0;
30949                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30950 8091           31C0                       xor	ax,ax
30951 8093           8946         FA            mov	-6[bp],ax
30952                                           !BCC_EOS
30953                                           ! 4519   while (c = read_byte(0xc000, s)) {
30954 8096           E9         0104            br 	.2CF
30955                       00008099            .2D0:
30956                                           ! 4520     if ( c == '%' ) {
30957                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30958 8099           8A46         FF            mov	al,-1[bp]
30959 809C           3C                     25  cmp	al,*$25
30960 809E           75           0E            jne 	.2D1
30961                       000080A0            .2D2:
30962                                           ! 4521       in_format = 1;
30963                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30964 80A0           B8                   0001  mov	ax,*1
30965 80A3           8946         FC            mov	-4[bp],ax
30966                                           !BCC_EOS
30967                                           ! 4522       format_width = 0;
30968                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30969 80A6           31C0                       xor	ax,ax
30970 80A8           8946         FA            mov	-6[bp],ax
30971                                           !BCC_EOS
30972                                           ! 4523       }
30973                                           ! 4524     else if (in_format) {
30974 80AB           E9         00E8            br 	.2D3
30975                       000080AE            .2D1:
30976 80AE           8B46         FC            mov	ax,-4[bp]
30977 80B1           85C0                       test	ax,ax
30978 80B3         0F84         00CF            beq 	.2D4
30979                       000080B7            .2D5:
30980                                           ! 4525       if ( (c>='0') && (c<='9') ) {
30981                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30982 80B7           8A46         FF            mov	al,-1[bp]
30983 80BA           3C                     30  cmp	al,*$30
30984 80BC           72           28            jb  	.2D6
30985                       000080BE            .2D8:
30986                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30987 80BE           8A46         FF            mov	al,-1[bp]
30988 80C1           3C                     39  cmp	al,*$39
30989 80C3           77           21            ja  	.2D6
30990                       000080C5            .2D7:
30991                                           ! 4526         format_width = (format_width * 10) + (c - '0');
30992                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30993 80C5           8A46         FF            mov	al,-1[bp]
30994 80C8           30E4                       xor	ah,ah
30995 80CA           05                   FFD0  add	ax,*-$30
30996 80CD           50                         push	ax
30997                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30998 80CE           8B46         FA            mov	ax,-6[bp]
30999 80D1           89C2                       mov	dx,ax
31000 80D3           D1E0                       shl	ax,*1
31001 80D5           D1E0                       shl	ax,*1
31002 80D7           01D0                       add	ax,dx
31003 80D9           D1E0                       shl	ax,*1
31004                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
31005 80DB           0346         EA            add	ax,-$16[bp]
31006 80DE           44                         inc	sp
31007 80DF           44                         inc	sp
31008                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
31009 80E0           8946         FA            mov	-6[bp],ax
31010                                           !BCC_EOS
31011                                           ! 4527         }
31012                                           ! 4528       else if (c == 'x') {
31013 80E3           E9         009E            br 	.2D9
31014                       000080E6            .2D6:
31015                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
31016 80E6           8A46         FF            mov	al,-1[bp]
31017 80E9           3C                     78  cmp	al,*$78
31018 80EB         0F85         0095            bne 	.2DA
31019                       000080EF            .2DB:
31020                                           ! 4529         arg_ptr++;
31021                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
31022 80EF           8B5E         F6            mov	bx,-$A[bp]
31023 80F2           43                         inc	bx
31024 80F3           43                         inc	bx
31025 80F4           895E         F6            mov	-$A[bp],bx
31026                                           !BCC_EOS
31027                                           ! 4530         arg = read_word(arg_seg, arg_ptr);
31028                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
31029 80F7           FF76         F6            push	-$A[bp]
31030                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
31031 80FA           FF76         F4            push	-$C[bp]
31032                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
31033 80FD           E8         FEE2            call	_read_word
31034 8100           83C4                   04  add	sp,*4
31035                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
31036 8103           8946         F2            mov	-$E[bp],ax
31037                                           !BCC_EOS
31038                                           ! 4531         if (format_width == 0)
31039                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
31040 8106           8B46         FA            mov	ax,-6[bp]
31041 8109           85C0                       test	ax,ax
31042 810B           75           06            jne 	.2DC
31043                       0000810D            .2DD:
31044                                           ! 4532           format_width = 4;
31045                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
31046 810D           B8                   0004  mov	ax,*4
31047 8110           8946         FA            mov	-6[bp],ax
31048                                           !BCC_EOS
31049                                           ! 4533         i = 0;
31050                       00008113            .2DC:
31051                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
31052 8113           31C0                       xor	ax,ax
31053 8115           8946         F8            mov	-8[bp],ax
31054                                           !BCC_EOS
31055                                           ! 4534         digit = format_width - 1;
31056                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
31057 8118           8B46         FA            mov	ax,-6[bp]
31058                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
31059 811B           48                         dec	ax
31060 811C           8946         F0            mov	-$10[bp],ax
31061                                           !BCC_EOS
31062                                           ! 4535         for (i=0; i<format_width; i++) {
31063                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
31064 811F           31C0                       xor	ax,ax
31065 8121           8946         F8            mov	-8[bp],ax
31066                                           !BCC_EOS
31067                                           !BCC_EOS
31068 8124           EB           51            jmp .2E0
31069                       00008126            .2E1:
31070                                           ! 4536           nibble = (arg >> (4 * digit)) & 0x000f;
31071                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
31072                                           ! Debug: expression subtree swapping
31073 8126           8B46         F0            mov	ax,-$10[bp]
31074 8129           D1E0                       shl	ax,*1
31075 812B           D1E0                       shl	ax,*1
31076                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
31077 812D           89C3                       mov	bx,ax
31078 812F           8B46         F2            mov	ax,-$E[bp]
31079 8132           89D9                       mov	cx,bx
31080 8134           D3E8                       shr	ax,cl
31081                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
31082 8136           24                     0F  and	al,*$F
31083                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
31084 8138           30E4                       xor	ah,ah
31085 813A           8946         EE            mov	-$12[bp],ax
31086                                           !BCC_EOS
31087                                           ! 4537           if (nibble <= 9)
31088                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
31089 813D           8B46         EE            mov	ax,-$12[bp]
31090 8140           3D                   0009  cmp	ax,*9
31091 8143           77           13            ja  	.2E2
31092                       00008145            .2E3:
31093                                           ! 4538             outb(0x0500, nibble + '0');
31094                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
31095 8145           8B46         EE            mov	ax,-$12[bp]
31096                                           ! Debug: list unsigned int = ax+$30 (used reg = )
31097 8148           05                   0030  add	ax,*$30
31098 814B           50                         push	ax
31099                                           ! Debug: list int = const $500 (used reg = )
31100 814C           B8                   0500  mov	ax,#$500
31101 814F           50                         push	ax
31102                                           ! Debug: func () void = outb+0 (used reg = )
31103 8150           E8         FEE8            call	_outb
31104 8153           83C4                   04  add	sp,*4
31105                                           !BCC_EOS
31106                                           ! 4539           else
31107                                           ! 4540             outb(0x0500, (nibble - 10) + 'A');
31108 8156           EB           11            jmp .2E4
31109                       00008158            .2E2:
31110                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
31111 8158           8B46         EE            mov	ax,-$12[bp]
31112                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
31113                                           ! Debug: list unsigned int = ax+$37 (used reg = )
31114 815B           05                   0037  add	ax,*$37
31115 815E           50                         push	ax
31116                                           ! Debug: list int = const $500 (used reg = )
31117 815F           B8                   0500  mov	ax,#$500
31118 8162           50                         push	ax
31119                                           ! Debug: func () void = outb+0 (used reg = )
31120 8163           E8         FED5            call	_outb
31121 8166           83C4                   04  add	sp,*4
31122                                           !BCC_EOS
31123                                           ! 4541           digit--;
31124                       00008169            .2E4:
31125                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
31126 8169           8B46         F0            mov	ax,-$10[bp]
31127 816C           48                         dec	ax
31128 816D           8946         F0            mov	-$10[bp],ax
31129                                           !BCC_EOS
31130                                           ! 4542           }
31131                                           ! 4543         in_format = 0;
31132                       00008170            .2DF:
31133                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
31134 8170           8B46         F8            mov	ax,-8[bp]
31135 8173           40                         inc	ax
31136 8174           8946         F8            mov	-8[bp],ax
31137                       00008177            .2E0:
31138                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
31139 8177           8B46         F8            mov	ax,-8[bp]
31140 817A           3B46         FA            cmp	ax,-6[bp]
31141 817D           72           A7            jb 	.2E1
31142                       0000817F            .2E5:
31143                       0000817F            .2DE:
31144                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
31145 817F           31C0                       xor	ax,ax
31146 8181           8946         FC            mov	-4[bp],ax
31147                                           !BCC_EOS
31148                                           ! 4544         }
31149                                           ! 4545       }
31150                       00008184            .2DA:
31151                       00008184            .2D9:
31152                                           ! 4546     else {
31153 8184           EB           10            jmp .2E6
31154                       00008186            .2D4:
31155                                           ! 4547       outb(0x0500, c);
31156                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
31157 8186           8A46         FF            mov	al,-1[bp]
31158 8189           30E4                       xor	ah,ah
31159 818B           50                         push	ax
31160                                           ! Debug: list int = const $500 (used reg = )
31161 818C           B8                   0500  mov	ax,#$500
31162 818F           50                         push	ax
31163                                           ! Debug: func () void = outb+0 (used reg = )
31164 8190           E8         FEA8            call	_outb
31165 8193           83C4                   04  add	sp,*4
31166                                           !BCC_EOS
31167                                           ! 4548       }
31168                                           ! 4549     s ++;
31169                       00008196            .2E6:
31170                       00008196            .2D3:
31171                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
31172 8196           8B5E         04            mov	bx,4[bp]
31173 8199           43                         inc	bx
31174 819A           895E         04            mov	4[bp],bx
31175                                           !BCC_EOS
31176                                           ! 4550     }
31177                                           ! 4551 }
31178                       0000819D            .2CF:
31179                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
31180 819D           FF76         04            push	4[bp]
31181                                           ! Debug: list unsigned int = const $C000 (used reg = )
31182 81A0           B8                   C000  mov	ax,#$C000
31183 81A3           50                         push	ax
31184                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
31185 81A4           E8         FE28            call	_read_byte
31186 81A7           83C4                   04  add	sp,*4
31187                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
31188 81AA           8846         FF            mov	-1[bp],al
31189 81AD           84C0                       test	al,al
31190 81AF         0F85         FEE6            bne 	.2D0
31191                       000081B3            .2E7:
31192                       000081B3            .2CE:
31193 81B3           89EC                       mov	sp,bp
31194 81B5           5D                         pop	bp
31195 81B6           C3                         ret
31196                                           ! 4552 #asm
31197                                           !BCC_ASM
31198                       00000002            _printf.s	set	2
31199                                             ; get LFB address from PCI
31200                                             ; in - ax: PCI device vendor
31201                                             ; out - ax: LFB address (high 16 bit)
31202                                             ;; NOTE - may be called in protected mode
31203                       000081B7            _pci_get_lfb_addr:
31204 81B7           53                           push bx
31205 81B8           51                           push cx
31206 81B9           52                           push dx
31207 81BA     66    50                           push eax
31208 81BC           89C3                           mov bx, ax
31209 81BE           31C9                           xor cx, cx
31210 81C0           B2                     00      mov dl, #0x00
31211 81C2           E8         003D                call pci_read_reg
31212 81C5           3D                   FFFF      cmp ax, #0xffff
31213 81C8           74           12                jz pci_get_lfb_addr_fail
31214                       000081CA             pci_get_lfb_addr_next_dev:
31215 81CA           B2                     00      mov dl, #0x00
31216 81CC           E8         0033                call pci_read_reg
31217 81CF           39D8                           cmp ax, bx ;; check vendor
31218 81D1           74           0D                jz pci_get_lfb_addr_found
31219 81D3           83C1                   08      add cx, #0x8
31220 81D6           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
31221 81DA           72           EE                jb pci_get_lfb_addr_next_dev
31222                       000081DC             pci_get_lfb_addr_fail:
31223 81DC           31D2                           xor dx, dx ;; no LFB
31224 81DE           EB           1A                jmp pci_get_lfb_addr_return
31225                       000081E0             pci_get_lfb_addr_found:
31226 81E0           B2                     10      mov dl, #0x10 ;; I/O space #0
31227 81E2           E8         001D                call pci_read_reg
31228 81E5           A9                   FFF1      test ax, #0xfff1
31229 81E8           74           0A                jz pci_get_lfb_addr_success
31230 81EA           B2                     14      mov dl, #0x14 ;; I/O space #1
31231 81EC           E8         0013                call pci_read_reg
31232 81EF           A9                   FFF1      test ax, #0xfff1
31233 81F2           75           E8                jnz pci_get_lfb_addr_fail
31234                       000081F4             pci_get_lfb_addr_success:
31235 81F4     66    C1E8                   10      shr eax, #16
31236 81F8           89C2                           mov dx, ax ;; LFB address
31237                       000081FA             pci_get_lfb_addr_return:
31238 81FA     66    58                           pop eax
31239 81FC           89D0                         mov ax, dx
31240 81FE           5A                           pop dx
31241 81FF           59                           pop cx
31242 8200           5B                           pop bx
31243 8201           C3                           ret
31244                                             ; read PCI register
31245                                             ; in - cx: device/function
31246                                             ; in - dl: register
31247                                             ; out - eax: value
31248                       00008202            pci_read_reg:
31249 8202     66    B8               00800000    mov eax, #0x00800000
31250 8208           89C8                         mov ax, cx
31251 820A     66    C1E0                   08    shl eax, #8
31252 820E           88D0                         mov al, dl
31253 8210           BA                   0CF8    mov dx, #0xcf8
31254 8213     66    EF                           out dx, eax
31255 8215           80C2                   04    add dl, #4
31256 8218     66    ED                           in eax, dx
31257 821A           C3                           ret
31258                                           ! 4612 endasm
31259                                           !BCC_ENDASM
31260                                           ! 4613 static ModeInfoListItem mode_info_list[]=
31261                                           ! Register BX used in function printf
31262                                           ! 4614 {
31263                                           
31264                       0000821B            _mode_info_list:
31265                                           ! 4615 { 0x0100,
31266 821B                      0100            .word	$100
31267                                           ! 4616 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31268 821D                      009B            .word	$9B
31269                                           ! 4617                           0x01 | 0x02 | 0x04,
31270 821F                        07            .byte	7
31271                                           ! 4618                           0,
31272 8220                        00            .byte	0
31273                                           ! 4619                           64,
31274 8221                      0040            .word	$40
31275                                           ! 4620                    64,
31276 8223                      0040            .word	$40
31277                                           ! 4621                        0xA000,
31278 8225                      A000            .word	$A000
31279                                           ! 4622                        0x0000,
31280 8227                      0000            .word	0
31281                                           ! 4623                       0,
31282 8229                      0000            .word	0
31283 822B                      0000            .word	0
31284                                           ! 4624                             640,
31285 822D                      0280            .word	$280
31286                                           ! 4625                        640,
31287 822F                      0280            .word	$280
31288                                           ! 4626                        400,
31289 8231                      0190            .word	$190
31290                                           ! 4627                      8,
31291 8233                        08            .byte	8
31292                                           ! 4628                      16,
31293 8234                        10            .byte	$10
31294                                           ! 4629                           1,
31295 8235                        01            .byte	1
31296                                           ! 4630                         8,
31297 8236                        08            .byte	8
31298                                           ! 4631                          4,
31299 8237                        04            .byte	4
31300                                           ! 4632                        0x04,
31301 8238                        04            .byte	4
31302                                           ! 4633                     0,
31303 8239                        00            .byte	0
31304                                           ! 4634                               64,
31305 823A                        40            .byte	$40
31306                                           ! 4635                          0,
31307 823B                        00            .byte	0
31308                                           ! 4636                        0,
31309 823C                        00            .byte	0
31310                                           ! 4637                             0,
31311 823D                        00            .byte	0
31312                                           ! 4638                          0,
31313 823E                        00            .byte	0
31314                                           ! 4639                               0,
31315 823F                        00            .byte	0
31316                                           ! 4640                         0,
31317 8240                        00            .byte	0
31318                                           ! 4641                              0,
31319 8241                        00            .byte	0
31320                                           ! 4642                         0,
31321 8242                        00            .byte	0
31322                                           ! 4643                              0,
31323 8243                        00            .byte	0
31324                                           ! 4644                                0,
31325 8244                        00            .byte	0
31326                                           ! 4645                        0xE0000000,
31327 8245                      0000            .word	0
31328 8247                      E000            .word	$E000
31329                                           ! 4646                               0,
31330 8249                      0000            .word	0
31331 824B                      0000            .word	0
31332                                           ! 4647                             0,
31333 824D                      0000            .word	0
31334                                           ! 4648                                640,
31335 824F                      0280            .word	$280
31336                                           ! 4649                             0,
31337 8251                        00            .byte	0
31338                                           ! 4650                             0,
31339 8252                        00            .byte	0
31340                                           ! 4651                           0,
31341 8253                        00            .byte	0
31342                                           ! 4652                                0,
31343 8254                        00            .byte	0
31344                                           ! 4653                             0,
31345 8255                        00            .byte	0
31346                                           ! 4654                                  0,
31347 8256                        00            .byte	0
31348                                           ! 4655                    
31349                                           ! 4655         0,
31350 8257                        00            .byte	0
31351                                           ! 4656                                 0,
31352 8258                        00            .byte	0
31353                                           ! 4657                            0,
31354 8259                        00            .byte	0
31355                                           ! 4658                                 0,
31356 825A                        00            .byte	0
31357                                           ! 4659                          0,
31358 825B                      0000            .word	0
31359 825D                      0000            .word	0
31360                                           ! 4660 } },
31361                                           ! 4661 { 0x0101,
31362 825F                      0101            .word	$101
31363                                           ! 4662 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31364 8261                      009B            .word	$9B
31365                                           ! 4663                           0x01 | 0x02 | 0x04,
31366 8263                        07            .byte	7
31367                                           ! 4664                           0,
31368 8264                        00            .byte	0
31369                                           ! 4665                           64,
31370 8265                      0040            .word	$40
31371                                           ! 4666                    64,
31372 8267                      0040            .word	$40
31373                                           ! 4667                        0xA000,
31374 8269                      A000            .word	$A000
31375                                           ! 4668                        0x0000,
31376 826B                      0000            .word	0
31377                                           ! 4669                       0,
31378 826D                      0000            .word	0
31379 826F                      0000            .word	0
31380                                           ! 4670                             640,
31381 8271                      0280            .word	$280
31382                                           ! 4671                        640,
31383 8273                      0280            .word	$280
31384                                           ! 4672                        480,
31385 8275                      01E0            .word	$1E0
31386                                           ! 4673                      8,
31387 8277                        08            .byte	8
31388                                           ! 4674                      16,
31389 8278                        10            .byte	$10
31390                                           ! 4675                           1,
31391 8279                        01            .byte	1
31392                                           ! 4676                         8,
31393 827A                        08            .byte	8
31394                                           ! 4677                          5,
31395 827B                        05            .byte	5
31396                                           ! 4678                        0x04,
31397 827C                        04            .byte	4
31398                                           ! 4679                     0,
31399 827D                        00            .byte	0
31400                                           ! 4680                               53,
31401 827E                        35            .byte	$35
31402                                           ! 4681                          0,
31403 827F                        00            .byte	0
31404                                           ! 4682                        0,
31405 8280                        00            .byte	0
31406                                           ! 4683                             0,
31407 8281                        00            .byte	0
31408                                           ! 4684                          0,
31409 8282                        00            .byte	0
31410                                           ! 4685                               0,
31411 8283                        00            .byte	0
31412                                           ! 4686                         0,
31413 8284                        00            .byte	0
31414                                           ! 4687                              0,
31415 8285                        00            .byte	0
31416                                           ! 4688                         0,
31417 8286                        00            .byte	0
31418                                           ! 4689                              0,
31419 8287                        00            .byte	0
31420                                           ! 4690                                0,
31421 8288                        00            .byte	0
31422                                           ! 4691                        0xE0000000,
31423 8289                      0000            .word	0
31424 828B                      E000            .word	$E000
31425                                           ! 4692                               0,
31426 828D                      0000            .word	0
31427 828F                      0000            .word	0
31428                                           ! 4693                             0,
31429 8291                      0000            .word	0
31430                                           ! 4694                                640,
31431 8293                      0280            .word	$280
31432                                           ! 4695                             0,
31433 8295                        00            .byte	0
31434                                           ! 4696                             0,
31435 8296                        00            .byte	0
31436                                           ! 4697                           0,
31437 8297                        00            .byte	0
31438                                           ! 4698                                0,
31439 8298                        00            .byte	0
31440                                           ! 4699                             0,
31441 8299                        00            .byte	0
31442                                           ! 4700                                  0,
31443 829A                        00            .byte	0
31444                                           ! 4701                            0,
31445 829B                        00            .byte	0
31446                                           ! 4702                                 0,
31447 829C                        00            .byte	0
31448                                           ! 4703                            0,
31449 829D                        00            .byte	0
31450                                           ! 4704                                 0,
31451 829E                        00            .byte	0
31452                                           ! 4705                          0,
31453 829F                      0000            .word	0
31454 82A1                      0000            .word	0
31455                                           ! 4706 } },
31456                                           ! 4707 { 0x0102,
31457 82A3                      0102            .word	$102
31458                                           ! 4708 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31459 82A5                      001F            .word	$1F
31460                                           ! 4709                           0x01 | 0x02 | 0x04,
31461 82A7                        07            .byte	7
31462                                           ! 4710                           0,
31463 82A8                        00            .byte	0
31464                                           ! 4711                           64,
31465 82A9                      0040            .word	$40
31466                                           ! 4712                    64,
31467 82AB                      0040            .word	$40
31468                                           ! 4713                        0xA000,
31469 82AD                      A000            .word	$A000
31470                                           ! 4714                        0x0000,
31471 82AF                      0000            .word	0
31472                                           ! 4715                       0,
31473 82B1                      0000            .word	0
31474 82B3                      0000            .word	0
31475                                           ! 4716                             100,
31476 82B5                      0064            .word	$64
31477                                           ! 4717                        800,
31478 82B7                      0320            .word	$320
31479                                           ! 4718                        600,
31480 82B9                      0258            .word	$258
31481                                           ! 4719                      8,
31482 82BB                        08            .byte	8
31483                                           ! 4720                      16,
31484 82BC                        10            .byte	$10
31485                                           ! 4721                           4,
31486 82BD                        04            .byte	4
31487                                           ! 4722                         4,
31488 82BE                        04            .byte	4
31489                                           ! 4723                          1,
31490 82BF                        01            .byte	1
31491                                           ! 4724                        0x03,
31492 82C0                        03            .byte	3
31493                                           ! 4725                
31494                                           ! 4725      0,
31495 82C1                        00            .byte	0
31496                                           ! 4726                               68,
31497 82C2                        44            .byte	$44
31498                                           ! 4727                          0,
31499 82C3                        00            .byte	0
31500                                           ! 4728                        0,
31501 82C4                        00            .byte	0
31502                                           ! 4729                             0,
31503 82C5                        00            .byte	0
31504                                           ! 4730                          0,
31505 82C6                        00            .byte	0
31506                                           ! 4731                               0,
31507 82C7                        00            .byte	0
31508                                           ! 4732                         0,
31509 82C8                        00            .byte	0
31510                                           ! 4733                              0,
31511 82C9                        00            .byte	0
31512                                           ! 4734                         0,
31513 82CA                        00            .byte	0
31514                                           ! 4735                              0,
31515 82CB                        00            .byte	0
31516                                           ! 4736                                0,
31517 82CC                        00            .byte	0
31518                                           ! 4737                        0,
31519 82CD                      0000            .word	0
31520 82CF                      0000            .word	0
31521                                           ! 4738                               0,
31522 82D1                      0000            .word	0
31523 82D3                      0000            .word	0
31524                                           ! 4739                             0,
31525 82D5                      0000            .word	0
31526                                           ! 4740                                100,
31527 82D7                      0064            .word	$64
31528                                           ! 4741                             0,
31529 82D9                        00            .byte	0
31530                                           ! 4742                             0,
31531 82DA                        00            .byte	0
31532                                           ! 4743                           0,
31533 82DB                        00            .byte	0
31534                                           ! 4744                                0,
31535 82DC                        00            .byte	0
31536                                           ! 4745                             0,
31537 82DD                        00            .byte	0
31538                                           ! 4746                                  0,
31539 82DE                        00            .byte	0
31540                                           ! 4747                            0,
31541 82DF                        00            .byte	0
31542                                           ! 4748                                 0,
31543 82E0                        00            .byte	0
31544                                           ! 4749                            0,
31545 82E1                        00            .byte	0
31546                                           ! 4750                                 0,
31547 82E2                        00            .byte	0
31548                                           ! 4751                          0,
31549 82E3                      0000            .word	0
31550 82E5                      0000            .word	0
31551                                           ! 4752 } },
31552                                           ! 4753 { 0x0103,
31553 82E7                      0103            .word	$103
31554                                           ! 4754 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31555 82E9                      009B            .word	$9B
31556                                           ! 4755                           0x01 | 0x02 | 0x04,
31557 82EB                        07            .byte	7
31558                                           ! 4756                           0,
31559 82EC                        00            .byte	0
31560                                           ! 4757                           64,
31561 82ED                      0040            .word	$40
31562                                           ! 4758                    64,
31563 82EF                      0040            .word	$40
31564                                           ! 4759                        0xA000,
31565 82F1                      A000            .word	$A000
31566                                           ! 4760                        0x0000,
31567 82F3                      0000            .word	0
31568                                           ! 4761                       0,
31569 82F5                      0000            .word	0
31570 82F7                      0000            .word	0
31571                                           ! 4762                             800,
31572 82F9                      0320            .word	$320
31573                                           ! 4763                        800,
31574 82FB                      0320            .word	$320
31575                                           ! 4764                        600,
31576 82FD                      0258            .word	$258
31577                                           ! 4765                      8,
31578 82FF                        08            .byte	8
31579                                           ! 4766                      16,
31580 8300                        10            .byte	$10
31581                                           ! 4767                           1,
31582 8301                        01            .byte	1
31583                                           ! 4768                         8,
31584 8302                        08            .byte	8
31585                                           ! 4769                          8,
31586 8303                        08            .byte	8
31587                                           ! 4770                        0x04,
31588 8304                        04            .byte	4
31589                                           ! 4771                     0,
31590 8305                        00            .byte	0
31591                                           ! 4772                               33,
31592 8306                        21            .byte	$21
31593                                           ! 4773                          0,
31594 8307                        00            .byte	0
31595                                           ! 4774                        0,
31596 8308                        00            .byte	0
31597                                           ! 4775                             0,
31598 8309                        00            .byte	0
31599                                           ! 4776                          0,
31600 830A                        00            .byte	0
31601                                           ! 4777                               0,
31602 830B                        00            .byte	0
31603                                           ! 4778                         0,
31604 830C                        00            .byte	0
31605                                           ! 4779                              0,
31606 830D                        00            .byte	0
31607                                           ! 4780                         0,
31608 830E                        00            .byte	0
31609                                           ! 4781                              0,
31610 830F                        00            .byte	0
31611                                           ! 4782                                0,
31612 8310                        00            .byte	0
31613                                           ! 4783                        0xE0000000,
31614 8311                      0000            .word	0
31615 8313                      E000            .word	$E000
31616                                           ! 4784                               0,
31617 8315                      0000            .word	0
31618 8317                      0000            .word	0
31619                                           ! 4785                             0,
31620 8319                      0000            .word	0
31621                                           ! 4786                                800,
31622 831B                      0320            .word	$320
31623                                           ! 4787                             0,
31624 831D                        00            .byte	0
31625                                           ! 4788                             0,
31626 831E                        00            .byte	0
31627                                           ! 4789                           0,
31628 831F                        00            .byte	0
31629                                           ! 4790                                0,
31630 8320                        00            .byte	0
31631                                           ! 4791                             0,
31632 8321                        00            .byte	0
31633                                           ! 4792                                  0,
31634 8322                        00            .byte	0
31635                                           ! 4793                        
31636                                           ! 4793     0,
31637 8323                        00            .byte	0
31638                                           ! 4794                                 0,
31639 8324                        00            .byte	0
31640                                           ! 4795                            0,
31641 8325                        00            .byte	0
31642                                           ! 4796                                 0,
31643 8326                        00            .byte	0
31644                                           ! 4797                          0,
31645 8327                      0000            .word	0
31646 8329                      0000            .word	0
31647                                           ! 4798 } },
31648                                           ! 4799 { 0x0104,
31649 832B                      0104            .word	$104
31650                                           ! 4800 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31651 832D                      001F            .word	$1F
31652                                           ! 4801                           0x01 | 0x02 | 0x04,
31653 832F                        07            .byte	7
31654                                           ! 4802                           0,
31655 8330                        00            .byte	0
31656                                           ! 4803                           64,
31657 8331                      0040            .word	$40
31658                                           ! 4804                    64,
31659 8333                      0040            .word	$40
31660                                           ! 4805                        0xA000,
31661 8335                      A000            .word	$A000
31662                                           ! 4806                        0x0000,
31663 8337                      0000            .word	0
31664                                           ! 4807                       0,
31665 8339                      0000            .word	0
31666 833B                      0000            .word	0
31667                                           ! 4808                             128,
31668 833D                      0080            .word	$80
31669                                           ! 4809                        1024,
31670 833F                      0400            .word	$400
31671                                           ! 4810                        768,
31672 8341                      0300            .word	$300
31673                                           ! 4811                      8,
31674 8343                        08            .byte	8
31675                                           ! 4812                      16,
31676 8344                        10            .byte	$10
31677                                           ! 4813                           4,
31678 8345                        04            .byte	4
31679                                           ! 4814                         4,
31680 8346                        04            .byte	4
31681                                           ! 4815                          2,
31682 8347                        02            .byte	2
31683                                           ! 4816                        0x03,
31684 8348                        03            .byte	3
31685                                           ! 4817                     0,
31686 8349                        00            .byte	0
31687                                           ! 4818                               41,
31688 834A                        29            .byte	$29
31689                                           ! 4819                          0,
31690 834B                        00            .byte	0
31691                                           ! 4820                        0,
31692 834C                        00            .byte	0
31693                                           ! 4821                             0,
31694 834D                        00            .byte	0
31695                                           ! 4822                          0,
31696 834E                        00            .byte	0
31697                                           ! 4823                               0,
31698 834F                        00            .byte	0
31699                                           ! 4824                         0,
31700 8350                        00            .byte	0
31701                                           ! 4825                              0,
31702 8351                        00            .byte	0
31703                                           ! 4826                         0,
31704 8352                        00            .byte	0
31705                                           ! 4827                              0,
31706 8353                        00            .byte	0
31707                                           ! 4828                                0,
31708 8354                        00            .byte	0
31709                                           ! 4829                        0,
31710 8355                      0000            .word	0
31711 8357                      0000            .word	0
31712                                           ! 4830                               0,
31713 8359                      0000            .word	0
31714 835B                      0000            .word	0
31715                                           ! 4831                             0,
31716 835D                      0000            .word	0
31717                                           ! 4832                                128,
31718 835F                      0080            .word	$80
31719                                           ! 4833                             0,
31720 8361                        00            .byte	0
31721                                           ! 4834                             0,
31722 8362                        00            .byte	0
31723                                           ! 4835                           0,
31724 8363                        00            .byte	0
31725                                           ! 4836                                0,
31726 8364                        00            .byte	0
31727                                           ! 4837                             0,
31728 8365                        00            .byte	0
31729                                           ! 4838                                  0,
31730 8366                        00            .byte	0
31731                                           ! 4839                            0,
31732 8367                        00            .byte	0
31733                                           ! 4840                                 0,
31734 8368                        00            .byte	0
31735                                           ! 4841                            0,
31736 8369                        00            .byte	0
31737                                           ! 4842                                 0,
31738 836A                        00            .byte	0
31739                                           ! 4843                          0,
31740 836B                      0000            .word	0
31741 836D                      0000            .word	0
31742                                           ! 4844 } },
31743                                           ! 4845 { 0x0105,
31744 836F                      0105            .word	$105
31745                                           ! 4846 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31746 8371                      009B            .word	$9B
31747                                           ! 4847                           0x01 | 0x02 | 0x04,
31748 8373                        07            .byte	7
31749                                           ! 4848                           0,
31750 8374                        00            .byte	0
31751                                           ! 4849                           64,
31752 8375                      0040            .word	$40
31753                                           ! 4850                    64,
31754 8377                      0040            .word	$40
31755                                           ! 4851                        0xA000,
31756 8379                      A000            .word	$A000
31757                                           ! 4852                        0x0000,
31758 837B                      0000            .word	0
31759                                           ! 4853                       0,
31760 837D                      0000            .word	0
31761 837F                      0000            .word	0
31762                                           ! 4854                             1024,
31763 8381                      0400            .word	$400
31764                                           ! 4855                        1024,
31765 8383                      0400            .word	$400
31766                                           ! 4856                        768,
31767 8385                      0300            .word	$300
31768                                           ! 4857                      8,
31769 8387                        08            .byte	8
31770                                           ! 4858                      16,
31771 8388                        10            .byte	$10
31772                                           ! 4859                           1,
31773 8389                        01            .byte	1
31774                                           ! 4860                         8,
31775 838A                        08            .byte	8
31776                                           ! 4861                          12,
31777 838B                        0C            .byte	$C
31778                                           ! 4862                        0x04,
31779 838C                        04            .byte	4
31780                                           ! 4863                     0,
31781 838D                        00            .byte	0
31782                                           ! 4864  
31783                                           ! 4864                              20,
31784 838E                        14            .byte	$14
31785                                           ! 4865                          0,
31786 838F                        00            .byte	0
31787                                           ! 4866                        0,
31788 8390                        00            .byte	0
31789                                           ! 4867                             0,
31790 8391                        00            .byte	0
31791                                           ! 4868                          0,
31792 8392                        00            .byte	0
31793                                           ! 4869                               0,
31794 8393                        00            .byte	0
31795                                           ! 4870                         0,
31796 8394                        00            .byte	0
31797                                           ! 4871                              0,
31798 8395                        00            .byte	0
31799                                           ! 4872                         0,
31800 8396                        00            .byte	0
31801                                           ! 4873                              0,
31802 8397                        00            .byte	0
31803                                           ! 4874                                0,
31804 8398                        00            .byte	0
31805                                           ! 4875                        0xE0000000,
31806 8399                      0000            .word	0
31807 839B                      E000            .word	$E000
31808                                           ! 4876                               0,
31809 839D                      0000            .word	0
31810 839F                      0000            .word	0
31811                                           ! 4877                             0,
31812 83A1                      0000            .word	0
31813                                           ! 4878                                1024,
31814 83A3                      0400            .word	$400
31815                                           ! 4879                             0,
31816 83A5                        00            .byte	0
31817                                           ! 4880                             0,
31818 83A6                        00            .byte	0
31819                                           ! 4881                           0,
31820 83A7                        00            .byte	0
31821                                           ! 4882                                0,
31822 83A8                        00            .byte	0
31823                                           ! 4883                             0,
31824 83A9                        00            .byte	0
31825                                           ! 4884                                  0,
31826 83AA                        00            .byte	0
31827                                           ! 4885                            0,
31828 83AB                        00            .byte	0
31829                                           ! 4886                                 0,
31830 83AC                        00            .byte	0
31831                                           ! 4887                            0,
31832 83AD                        00            .byte	0
31833                                           ! 4888                                 0,
31834 83AE                        00            .byte	0
31835                                           ! 4889                          0,
31836 83AF                      0000            .word	0
31837 83B1                      0000            .word	0
31838                                           ! 4890 } },
31839                                           ! 4891 { 0x0106,
31840 83B3                      0106            .word	$106
31841                                           ! 4892 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31842 83B5                      001F            .word	$1F
31843                                           ! 4893                           0x01 | 0x02 | 0x04,
31844 83B7                        07            .byte	7
31845                                           ! 4894                           0,
31846 83B8                        00            .byte	0
31847                                           ! 4895                           64,
31848 83B9                      0040            .word	$40
31849                                           ! 4896                    64,
31850 83BB                      0040            .word	$40
31851                                           ! 4897                        0xA000,
31852 83BD                      A000            .word	$A000
31853                                           ! 4898                        0x0000,
31854 83BF                      0000            .word	0
31855                                           ! 4899                       0,
31856 83C1                      0000            .word	0
31857 83C3                      0000            .word	0
31858                                           ! 4900                             160,
31859 83C5                      00A0            .word	$A0
31860                                           ! 4901                        1280,
31861 83C7                      0500            .word	$500
31862                                           ! 4902                        1024,
31863 83C9                      0400            .word	$400
31864                                           ! 4903                      8,
31865 83CB                        08            .byte	8
31866                                           ! 4904                      16,
31867 83CC                        10            .byte	$10
31868                                           ! 4905                           4,
31869 83CD                        04            .byte	4
31870                                           ! 4906                         4,
31871 83CE                        04            .byte	4
31872                                           ! 4907                          3,
31873 83CF                        03            .byte	3
31874                                           ! 4908                        0x03,
31875 83D0                        03            .byte	3
31876                                           ! 4909                     0,
31877 83D1                        00            .byte	0
31878                                           ! 4910                               24,
31879 83D2                        18            .byte	$18
31880                                           ! 4911                          0,
31881 83D3                        00            .byte	0
31882                                           ! 4912                        0,
31883 83D4                        00            .byte	0
31884                                           ! 4913                             0,
31885 83D5                        00            .byte	0
31886                                           ! 4914                          0,
31887 83D6                        00            .byte	0
31888                                           ! 4915                               0,
31889 83D7                        00            .byte	0
31890                                           ! 4916                         0,
31891 83D8                        00            .byte	0
31892                                           ! 4917                              0,
31893 83D9                        00            .byte	0
31894                                           ! 4918                         0,
31895 83DA                        00            .byte	0
31896                                           ! 4919                              0,
31897 83DB                        00            .byte	0
31898                                           ! 4920                                0,
31899 83DC                        00            .byte	0
31900                                           ! 4921                        0,
31901 83DD                      0000            .word	0
31902 83DF                      0000            .word	0
31903                                           ! 4922                               0,
31904 83E1                      0000            .word	0
31905 83E3                      0000            .word	0
31906                                           ! 4923                             0,
31907 83E5                      0000            .word	0
31908                                           ! 4924                                160,
31909 83E7                      00A0            .word	$A0
31910                                           ! 4925                             0,
31911 83E9                        00            .byte	0
31912                                           ! 4926                             0,
31913 83EA                        00            .byte	0
31914                                           ! 4927                           0,
31915 83EB                        00            .byte	0
31916                                           ! 4928                                0,
31917 83EC                        00            .byte	0
31918                                           ! 4929                             0,
31919 83ED                        00            .byte	0
31920                                           ! 4930                                  0,
31921 83EE                        00            .byte	0
31922                                           ! 4931                            0,
31923                                           ! 4931 
31924 83EF                        00            .byte	0
31925                                           ! 4932                                 0,
31926 83F0                        00            .byte	0
31927                                           ! 4933                            0,
31928 83F1                        00            .byte	0
31929                                           ! 4934                                 0,
31930 83F2                        00            .byte	0
31931                                           ! 4935                          0,
31932 83F3                      0000            .word	0
31933 83F5                      0000            .word	0
31934                                           ! 4936 } },
31935                                           ! 4937 { 0x0107,
31936 83F7                      0107            .word	$107
31937                                           ! 4938 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31938 83F9                      009B            .word	$9B
31939                                           ! 4939                           0x01 | 0x02 | 0x04,
31940 83FB                        07            .byte	7
31941                                           ! 4940                           0,
31942 83FC                        00            .byte	0
31943                                           ! 4941                           64,
31944 83FD                      0040            .word	$40
31945                                           ! 4942                    64,
31946 83FF                      0040            .word	$40
31947                                           ! 4943                        0xA000,
31948 8401                      A000            .word	$A000
31949                                           ! 4944                        0x0000,
31950 8403                      0000            .word	0
31951                                           ! 4945                       0,
31952 8405                      0000            .word	0
31953 8407                      0000            .word	0
31954                                           ! 4946                             1280,
31955 8409                      0500            .word	$500
31956                                           ! 4947                        1280,
31957 840B                      0500            .word	$500
31958                                           ! 4948                        1024,
31959 840D                      0400            .word	$400
31960                                           ! 4949                      8,
31961 840F                        08            .byte	8
31962                                           ! 4950                      16,
31963 8410                        10            .byte	$10
31964                                           ! 4951                           1,
31965 8411                        01            .byte	1
31966                                           ! 4952                         8,
31967 8412                        08            .byte	8
31968                                           ! 4953                          20,
31969 8413                        14            .byte	$14
31970                                           ! 4954                        0x04,
31971 8414                        04            .byte	4
31972                                           ! 4955                     0,
31973 8415                        00            .byte	0
31974                                           ! 4956                               11,
31975 8416                        0B            .byte	$B
31976                                           ! 4957                          0,
31977 8417                        00            .byte	0
31978                                           ! 4958                        0,
31979 8418                        00            .byte	0
31980                                           ! 4959                             0,
31981 8419                        00            .byte	0
31982                                           ! 4960                          0,
31983 841A                        00            .byte	0
31984                                           ! 4961                               0,
31985 841B                        00            .byte	0
31986                                           ! 4962                         0,
31987 841C                        00            .byte	0
31988                                           ! 4963                              0,
31989 841D                        00            .byte	0
31990                                           ! 4964                         0,
31991 841E                        00            .byte	0
31992                                           ! 4965                              0,
31993 841F                        00            .byte	0
31994                                           ! 4966                                0,
31995 8420                        00            .byte	0
31996                                           ! 4967                        0xE0000000,
31997 8421                      0000            .word	0
31998 8423                      E000            .word	$E000
31999                                           ! 4968                               0,
32000 8425                      0000            .word	0
32001 8427                      0000            .word	0
32002                                           ! 4969                             0,
32003 8429                      0000            .word	0
32004                                           ! 4970                                1280,
32005 842B                      0500            .word	$500
32006                                           ! 4971                             0,
32007 842D                        00            .byte	0
32008                                           ! 4972                             0,
32009 842E                        00            .byte	0
32010                                           ! 4973                           0,
32011 842F                        00            .byte	0
32012                                           ! 4974                                0,
32013 8430                        00            .byte	0
32014                                           ! 4975                             0,
32015 8431                        00            .byte	0
32016                                           ! 4976                                  0,
32017 8432                        00            .byte	0
32018                                           ! 4977                            0,
32019 8433                        00            .byte	0
32020                                           ! 4978                                 0,
32021 8434                        00            .byte	0
32022                                           ! 4979                            0,
32023 8435                        00            .byte	0
32024                                           ! 4980                                 0,
32025 8436                        00            .byte	0
32026                                           ! 4981                          0,
32027 8437                      0000            .word	0
32028 8439                      0000            .word	0
32029                                           ! 4982 } },
32030                                           ! 4983 { 0x010d,
32031 843B                      010D            .word	$10D
32032                                           ! 4984 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32033 843D                      009B            .word	$9B
32034                                           ! 4985                           0x01 | 0x02 | 0x04,
32035 843F                        07            .byte	7
32036                                           ! 4986                           0,
32037 8440                        00            .byte	0
32038                                           ! 4987                           64,
32039 8441                      0040            .word	$40
32040                                           ! 4988                    64,
32041 8443                      0040            .word	$40
32042                                           ! 4989                        0xA000,
32043 8445                      A000            .word	$A000
32044                                           ! 4990                        0x0000,
32045 8447                      0000            .word	0
32046                                           ! 4991                       0,
32047 8449                      0000            .word	0
32048 844B                      0000            .word	0
32049                                           ! 4992                             640,
32050 844D                      0280            .word	$280
32051                                           ! 4993                        320,
32052 844F                      0140            .word	$140
32053                                           ! 4994                        200,
32054 8451                      00C8            .word	$C8
32055                                           ! 4995                      8,
32056 8453                        08            .byte	8
32057                                           ! 4996                      16,
32058 8454                        10            .byte	$10
32059                                           ! 4997                           1,
32060 8455                        01            .byte	1
32061                                           ! 4998                         15,
32062 8456                        0F            .byte	$F
32063                                           ! 4999                          2,
32064 8457                        02            .byte	2
32065                                           ! 5000                        0x06,
32066 8458                        06            .byte	6
32067                                           ! 5001                    
32068                                           ! 5001  0,
32069 8459                        00            .byte	0
32070                                           ! 5002                               130,
32071 845A                        82            .byte	$82
32072                                           ! 5003                          0,
32073 845B                        00            .byte	0
32074                                           ! 5004                        5,
32075 845C                        05            .byte	5
32076                                           ! 5005                             10,
32077 845D                        0A            .byte	$A
32078                                           ! 5006                          5,
32079 845E                        05            .byte	5
32080                                           ! 5007                               5,
32081 845F                        05            .byte	5
32082                                           ! 5008                         5,
32083 8460                        05            .byte	5
32084                                           ! 5009                              0,
32085 8461                        00            .byte	0
32086                                           ! 5010                         1,
32087 8462                        01            .byte	1
32088                                           ! 5011                              15,
32089 8463                        0F            .byte	$F
32090                                           ! 5012                                0,
32091 8464                        00            .byte	0
32092                                           ! 5013                        0xE0000000,
32093 8465                      0000            .word	0
32094 8467                      E000            .word	$E000
32095                                           ! 5014                               0,
32096 8469                      0000            .word	0
32097 846B                      0000            .word	0
32098                                           ! 5015                             0,
32099 846D                      0000            .word	0
32100                                           ! 5016                                640,
32101 846F                      0280            .word	$280
32102                                           ! 5017                             0,
32103 8471                        00            .byte	0
32104                                           ! 5018                             0,
32105 8472                        00            .byte	0
32106                                           ! 5019                           5,
32107 8473                        05            .byte	5
32108                                           ! 5020                                10,
32109 8474                        0A            .byte	$A
32110                                           ! 5021                             5,
32111 8475                        05            .byte	5
32112                                           ! 5022                                  5,
32113 8476                        05            .byte	5
32114                                           ! 5023                            5,
32115 8477                        05            .byte	5
32116                                           ! 5024                                 0,
32117 8478                        00            .byte	0
32118                                           ! 5025                            1,
32119 8479                        01            .byte	1
32120                                           ! 5026                                 15,
32121 847A                        0F            .byte	$F
32122                                           ! 5027                          0,
32123 847B                      0000            .word	0
32124 847D                      0000            .word	0
32125                                           ! 5028 } },
32126                                           ! 5029 { 0x010e,
32127 847F                      010E            .word	$10E
32128                                           ! 5030 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32129 8481                      009B            .word	$9B
32130                                           ! 5031                           0x01 | 0x02 | 0x04,
32131 8483                        07            .byte	7
32132                                           ! 5032                           0,
32133 8484                        00            .byte	0
32134                                           ! 5033                           64,
32135 8485                      0040            .word	$40
32136                                           ! 5034                    64,
32137 8487                      0040            .word	$40
32138                                           ! 5035                        0xA000,
32139 8489                      A000            .word	$A000
32140                                           ! 5036                        0x0000,
32141 848B                      0000            .word	0
32142                                           ! 5037                       0,
32143 848D                      0000            .word	0
32144 848F                      0000            .word	0
32145                                           ! 5038                             640,
32146 8491                      0280            .word	$280
32147                                           ! 5039                        320,
32148 8493                      0140            .word	$140
32149                                           ! 5040                        200,
32150 8495                      00C8            .word	$C8
32151                                           ! 5041                      8,
32152 8497                        08            .byte	8
32153                                           ! 5042                      16,
32154 8498                        10            .byte	$10
32155                                           ! 5043                           1,
32156 8499                        01            .byte	1
32157                                           ! 5044                         16,
32158 849A                        10            .byte	$10
32159                                           ! 5045                          2,
32160 849B                        02            .byte	2
32161                                           ! 5046                        0x06,
32162 849C                        06            .byte	6
32163                                           ! 5047                     0,
32164 849D                        00            .byte	0
32165                                           ! 5048                               130,
32166 849E                        82            .byte	$82
32167                                           ! 5049                          0,
32168 849F                        00            .byte	0
32169                                           ! 5050                        5,
32170 84A0                        05            .byte	5
32171                                           ! 5051                             11,
32172 84A1                        0B            .byte	$B
32173                                           ! 5052                          6,
32174 84A2                        06            .byte	6
32175                                           ! 5053                               5,
32176 84A3                        05            .byte	5
32177                                           ! 5054                         5,
32178 84A4                        05            .byte	5
32179                                           ! 5055                              0,
32180 84A5                        00            .byte	0
32181                                           ! 5056                         0,
32182 84A6                        00            .byte	0
32183                                           ! 5057                              0,
32184 84A7                        00            .byte	0
32185                                           ! 5058                                0,
32186 84A8                        00            .byte	0
32187                                           ! 5059                        0xE0000000,
32188 84A9                      0000            .word	0
32189 84AB                      E000            .word	$E000
32190                                           ! 5060                               0,
32191 84AD                      0000            .word	0
32192 84AF                      0000            .word	0
32193                                           ! 5061                             0,
32194 84B1                      0000            .word	0
32195                                           ! 5062                                640,
32196 84B3                      0280            .word	$280
32197                                           ! 5063                             0,
32198 84B5                        00            .byte	0
32199                                           ! 5064                             0,
32200 84B6                        00            .byte	0
32201                                           ! 5065                           5,
32202 84B7                        05            .byte	5
32203                                           ! 5066                                11,
32204 84B8                        0B            .byte	$B
32205                                           ! 5067                             6,
32206 84B9                        06            .byte	6
32207                                           ! 5068                                  5,
32208 84BA                        05            .byte	5
32209                                           ! 5069          
32210                                           ! 5069                   5,
32211 84BB                        05            .byte	5
32212                                           ! 5070                                 0,
32213 84BC                        00            .byte	0
32214                                           ! 5071                            0,
32215 84BD                        00            .byte	0
32216                                           ! 5072                                 0,
32217 84BE                        00            .byte	0
32218                                           ! 5073                          0,
32219 84BF                      0000            .word	0
32220 84C1                      0000            .word	0
32221                                           ! 5074 } },
32222                                           ! 5075 { 0x010f,
32223 84C3                      010F            .word	$10F
32224                                           ! 5076 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32225 84C5                      009B            .word	$9B
32226                                           ! 5077                           0x01 | 0x02 | 0x04,
32227 84C7                        07            .byte	7
32228                                           ! 5078                           0,
32229 84C8                        00            .byte	0
32230                                           ! 5079                           64,
32231 84C9                      0040            .word	$40
32232                                           ! 5080                    64,
32233 84CB                      0040            .word	$40
32234                                           ! 5081                        0xA000,
32235 84CD                      A000            .word	$A000
32236                                           ! 5082                        0x0000,
32237 84CF                      0000            .word	0
32238                                           ! 5083                       0,
32239 84D1                      0000            .word	0
32240 84D3                      0000            .word	0
32241                                           ! 5084                             960,
32242 84D5                      03C0            .word	$3C0
32243                                           ! 5085                        320,
32244 84D7                      0140            .word	$140
32245                                           ! 5086                        200,
32246 84D9                      00C8            .word	$C8
32247                                           ! 5087                      8,
32248 84DB                        08            .byte	8
32249                                           ! 5088                      16,
32250 84DC                        10            .byte	$10
32251                                           ! 5089                           1,
32252 84DD                        01            .byte	1
32253                                           ! 5090                         24,
32254 84DE                        18            .byte	$18
32255                                           ! 5091                          3,
32256 84DF                        03            .byte	3
32257                                           ! 5092                        0x06,
32258 84E0                        06            .byte	6
32259                                           ! 5093                     0,
32260 84E1                        00            .byte	0
32261                                           ! 5094                               86,
32262 84E2                        56            .byte	$56
32263                                           ! 5095                          0,
32264 84E3                        00            .byte	0
32265                                           ! 5096                        8,
32266 84E4                        08            .byte	8
32267                                           ! 5097                             16,
32268 84E5                        10            .byte	$10
32269                                           ! 5098                          8,
32270 84E6                        08            .byte	8
32271                                           ! 5099                               8,
32272 84E7                        08            .byte	8
32273                                           ! 5100                         8,
32274 84E8                        08            .byte	8
32275                                           ! 5101                              0,
32276 84E9                        00            .byte	0
32277                                           ! 5102                         0,
32278 84EA                        00            .byte	0
32279                                           ! 5103                              0,
32280 84EB                        00            .byte	0
32281                                           ! 5104                                0,
32282 84EC                        00            .byte	0
32283                                           ! 5105                        0xE0000000,
32284 84ED                      0000            .word	0
32285 84EF                      E000            .word	$E000
32286                                           ! 5106                               0,
32287 84F1                      0000            .word	0
32288 84F3                      0000            .word	0
32289                                           ! 5107                             0,
32290 84F5                      0000            .word	0
32291                                           ! 5108                                960,
32292 84F7                      03C0            .word	$3C0
32293                                           ! 5109                             0,
32294 84F9                        00            .byte	0
32295                                           ! 5110                             0,
32296 84FA                        00            .byte	0
32297                                           ! 5111                           8,
32298 84FB                        08            .byte	8
32299                                           ! 5112                                16,
32300 84FC                        10            .byte	$10
32301                                           ! 5113                             8,
32302 84FD                        08            .byte	8
32303                                           ! 5114                                  8,
32304 84FE                        08            .byte	8
32305                                           ! 5115                            8,
32306 84FF                        08            .byte	8
32307                                           ! 5116                                 0,
32308 8500                        00            .byte	0
32309                                           ! 5117                            0,
32310 8501                        00            .byte	0
32311                                           ! 5118                                 0,
32312 8502                        00            .byte	0
32313                                           ! 5119                          0,
32314 8503                      0000            .word	0
32315 8505                      0000            .word	0
32316                                           ! 5120 } },
32317                                           ! 5121 { 0x0110,
32318 8507                      0110            .word	$110
32319                                           ! 5122 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32320 8509                      009B            .word	$9B
32321                                           ! 5123                           0x01 | 0x02 | 0x04,
32322 850B                        07            .byte	7
32323                                           ! 5124                           0,
32324 850C                        00            .byte	0
32325                                           ! 5125                           64,
32326 850D                      0040            .word	$40
32327                                           ! 5126                    64,
32328 850F                      0040            .word	$40
32329                                           ! 5127                        0xA000,
32330 8511                      A000            .word	$A000
32331                                           ! 5128                        0x0000,
32332 8513                      0000            .word	0
32333                                           ! 5129                       0,
32334 8515                      0000            .word	0
32335 8517                      0000            .word	0
32336                                           ! 5130                             1280,
32337 8519                      0500            .word	$500
32338                                           ! 5131                        640,
32339 851B                      0280            .word	$280
32340                                           ! 5132                        480,
32341 851D                      01E0            .word	$1E0
32342                                           ! 5133                      8,
32343 851F                        08            .byte	8
32344                                           ! 5134                      16,
32345 8520                        10            .byte	$10
32346                                           ! 5135                           1,
32347 8521                        01            .byte	1
32348                                           ! 5136                         15,
32349 8522                        0F            .byte	$F
32350                                           ! 5137                          10,
32351 8523                        0A            .byte	$A
32352                                           ! 5138                        0x06,
32353                                           ! 5138 
32354 8524                        06            .byte	6
32355                                           ! 5139                     0,
32356 8525                        00            .byte	0
32357                                           ! 5140                               26,
32358 8526                        1A            .byte	$1A
32359                                           ! 5141                          0,
32360 8527                        00            .byte	0
32361                                           ! 5142                        5,
32362 8528                        05            .byte	5
32363                                           ! 5143                             10,
32364 8529                        0A            .byte	$A
32365                                           ! 5144                          5,
32366 852A                        05            .byte	5
32367                                           ! 5145                               5,
32368 852B                        05            .byte	5
32369                                           ! 5146                         5,
32370 852C                        05            .byte	5
32371                                           ! 5147                              0,
32372 852D                        00            .byte	0
32373                                           ! 5148                         1,
32374 852E                        01            .byte	1
32375                                           ! 5149                              15,
32376 852F                        0F            .byte	$F
32377                                           ! 5150                                0,
32378 8530                        00            .byte	0
32379                                           ! 5151                        0xE0000000,
32380 8531                      0000            .word	0
32381 8533                      E000            .word	$E000
32382                                           ! 5152                               0,
32383 8535                      0000            .word	0
32384 8537                      0000            .word	0
32385                                           ! 5153                             0,
32386 8539                      0000            .word	0
32387                                           ! 5154                                1280,
32388 853B                      0500            .word	$500
32389                                           ! 5155                             0,
32390 853D                        00            .byte	0
32391                                           ! 5156                             0,
32392 853E                        00            .byte	0
32393                                           ! 5157                           5,
32394 853F                        05            .byte	5
32395                                           ! 5158                                10,
32396 8540                        0A            .byte	$A
32397                                           ! 5159                             5,
32398 8541                        05            .byte	5
32399                                           ! 5160                                  5,
32400 8542                        05            .byte	5
32401                                           ! 5161                            5,
32402 8543                        05            .byte	5
32403                                           ! 5162                                 0,
32404 8544                        00            .byte	0
32405                                           ! 5163                            1,
32406 8545                        01            .byte	1
32407                                           ! 5164                                 15,
32408 8546                        0F            .byte	$F
32409                                           ! 5165                          0,
32410 8547                      0000            .word	0
32411 8549                      0000            .word	0
32412                                           ! 5166 } },
32413                                           ! 5167 { 0x0111,
32414 854B                      0111            .word	$111
32415                                           ! 5168 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32416 854D                      009B            .word	$9B
32417                                           ! 5169                           0x01 | 0x02 | 0x04,
32418 854F                        07            .byte	7
32419                                           ! 5170                           0,
32420 8550                        00            .byte	0
32421                                           ! 5171                           64,
32422 8551                      0040            .word	$40
32423                                           ! 5172                    64,
32424 8553                      0040            .word	$40
32425                                           ! 5173                        0xA000,
32426 8555                      A000            .word	$A000
32427                                           ! 5174                        0x0000,
32428 8557                      0000            .word	0
32429                                           ! 5175                       0,
32430 8559                      0000            .word	0
32431 855B                      0000            .word	0
32432                                           ! 5176                             1280,
32433 855D                      0500            .word	$500
32434                                           ! 5177                        640,
32435 855F                      0280            .word	$280
32436                                           ! 5178                        480,
32437 8561                      01E0            .word	$1E0
32438                                           ! 5179                      8,
32439 8563                        08            .byte	8
32440                                           ! 5180                      16,
32441 8564                        10            .byte	$10
32442                                           ! 5181                           1,
32443 8565                        01            .byte	1
32444                                           ! 5182                         16,
32445 8566                        10            .byte	$10
32446                                           ! 5183                          10,
32447 8567                        0A            .byte	$A
32448                                           ! 5184                        0x06,
32449 8568                        06            .byte	6
32450                                           ! 5185                     0,
32451 8569                        00            .byte	0
32452                                           ! 5186                               26,
32453 856A                        1A            .byte	$1A
32454                                           ! 5187                          0,
32455 856B                        00            .byte	0
32456                                           ! 5188                        5,
32457 856C                        05            .byte	5
32458                                           ! 5189                             11,
32459 856D                        0B            .byte	$B
32460                                           ! 5190                          6,
32461 856E                        06            .byte	6
32462                                           ! 5191                               5,
32463 856F                        05            .byte	5
32464                                           ! 5192                         5,
32465 8570                        05            .byte	5
32466                                           ! 5193                              0,
32467 8571                        00            .byte	0
32468                                           ! 5194                         0,
32469 8572                        00            .byte	0
32470                                           ! 5195                              0,
32471 8573                        00            .byte	0
32472                                           ! 5196                                0,
32473 8574                        00            .byte	0
32474                                           ! 5197                        0xE0000000,
32475 8575                      0000            .word	0
32476 8577                      E000            .word	$E000
32477                                           ! 5198                               0,
32478 8579                      0000            .word	0
32479 857B                      0000            .word	0
32480                                           ! 5199                             0,
32481 857D                      0000            .word	0
32482                                           ! 5200                                1280,
32483 857F                      0500            .word	$500
32484                                           ! 5201                             0,
32485 8581                        00            .byte	0
32486                                           ! 5202                             0,
32487 8582                        00            .byte	0
32488                                           ! 5203                           5,
32489 8583                        05            .byte	5
32490                                           ! 5204                                11,
32491 8584                        0B            .byte	$B
32492                                           ! 5205                             6,
32493 8585                        06            .byte	6
32494                                           ! 5206                        
32495                                           ! 5206           5,
32496 8586                        05            .byte	5
32497                                           ! 5207                            5,
32498 8587                        05            .byte	5
32499                                           ! 5208                                 0,
32500 8588                        00            .byte	0
32501                                           ! 5209                            0,
32502 8589                        00            .byte	0
32503                                           ! 5210                                 0,
32504 858A                        00            .byte	0
32505                                           ! 5211                          0,
32506 858B                      0000            .word	0
32507 858D                      0000            .word	0
32508                                           ! 5212 } },
32509                                           ! 5213 { 0x0112,
32510 858F                      0112            .word	$112
32511                                           ! 5214 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32512 8591                      009B            .word	$9B
32513                                           ! 5215                           0x01 | 0x02 | 0x04,
32514 8593                        07            .byte	7
32515                                           ! 5216                           0,
32516 8594                        00            .byte	0
32517                                           ! 5217                           64,
32518 8595                      0040            .word	$40
32519                                           ! 5218                    64,
32520 8597                      0040            .word	$40
32521                                           ! 5219                        0xA000,
32522 8599                      A000            .word	$A000
32523                                           ! 5220                        0x0000,
32524 859B                      0000            .word	0
32525                                           ! 5221                       0,
32526 859D                      0000            .word	0
32527 859F                      0000            .word	0
32528                                           ! 5222                             1920,
32529 85A1                      0780            .word	$780
32530                                           ! 5223                        640,
32531 85A3                      0280            .word	$280
32532                                           ! 5224                        480,
32533 85A5                      01E0            .word	$1E0
32534                                           ! 5225                      8,
32535 85A7                        08            .byte	8
32536                                           ! 5226                      16,
32537 85A8                        10            .byte	$10
32538                                           ! 5227                           1,
32539 85A9                        01            .byte	1
32540                                           ! 5228                         24,
32541 85AA                        18            .byte	$18
32542                                           ! 5229                          15,
32543 85AB                        0F            .byte	$F
32544                                           ! 5230                        0x06,
32545 85AC                        06            .byte	6
32546                                           ! 5231                     0,
32547 85AD                        00            .byte	0
32548                                           ! 5232                               17,
32549 85AE                        11            .byte	$11
32550                                           ! 5233                          0,
32551 85AF                        00            .byte	0
32552                                           ! 5234                        8,
32553 85B0                        08            .byte	8
32554                                           ! 5235                             16,
32555 85B1                        10            .byte	$10
32556                                           ! 5236                          8,
32557 85B2                        08            .byte	8
32558                                           ! 5237                               8,
32559 85B3                        08            .byte	8
32560                                           ! 5238                         8,
32561 85B4                        08            .byte	8
32562                                           ! 5239                              0,
32563 85B5                        00            .byte	0
32564                                           ! 5240                         0,
32565 85B6                        00            .byte	0
32566                                           ! 5241                              0,
32567 85B7                        00            .byte	0
32568                                           ! 5242                                0,
32569 85B8                        00            .byte	0
32570                                           ! 5243                        0xE0000000,
32571 85B9                      0000            .word	0
32572 85BB                      E000            .word	$E000
32573                                           ! 5244                               0,
32574 85BD                      0000            .word	0
32575 85BF                      0000            .word	0
32576                                           ! 5245                             0,
32577 85C1                      0000            .word	0
32578                                           ! 5246                                1920,
32579 85C3                      0780            .word	$780
32580                                           ! 5247                             0,
32581 85C5                        00            .byte	0
32582                                           ! 5248                             0,
32583 85C6                        00            .byte	0
32584                                           ! 5249                           8,
32585 85C7                        08            .byte	8
32586                                           ! 5250                                16,
32587 85C8                        10            .byte	$10
32588                                           ! 5251                             8,
32589 85C9                        08            .byte	8
32590                                           ! 5252                                  8,
32591 85CA                        08            .byte	8
32592                                           ! 5253                            8,
32593 85CB                        08            .byte	8
32594                                           ! 5254                                 0,
32595 85CC                        00            .byte	0
32596                                           ! 5255                            0,
32597 85CD                        00            .byte	0
32598                                           ! 5256                                 0,
32599 85CE                        00            .byte	0
32600                                           ! 5257                          0,
32601 85CF                      0000            .word	0
32602 85D1                      0000            .word	0
32603                                           ! 5258 } },
32604                                           ! 5259 { 0x0113,
32605 85D3                      0113            .word	$113
32606                                           ! 5260 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32607 85D5                      009B            .word	$9B
32608                                           ! 5261                           0x01 | 0x02 | 0x04,
32609 85D7                        07            .byte	7
32610                                           ! 5262                           0,
32611 85D8                        00            .byte	0
32612                                           ! 5263                           64,
32613 85D9                      0040            .word	$40
32614                                           ! 5264                    64,
32615 85DB                      0040            .word	$40
32616                                           ! 5265                        0xA000,
32617 85DD                      A000            .word	$A000
32618                                           ! 5266                        0x0000,
32619 85DF                      0000            .word	0
32620                                           ! 5267                       0,
32621 85E1                      0000            .word	0
32622 85E3                      0000            .word	0
32623                                           ! 5268                             1600,
32624 85E5                      0640            .word	$640
32625                                           ! 5269                        800,
32626 85E7                      0320            .word	$320
32627                                           ! 5270                        600,
32628 85E9                      0258            .word	$258
32629                                           ! 5271                      8,
32630 85EB                        08            .byte	8
32631                                           ! 5272                      16,
32632 85EC                        10            .byte	$10
32633                                           ! 5273                           1,
32634 85ED                        01            .byte	1
32635                                           ! 5274                         15,
32636 85EE                        0F            .byte	$F
32637                                           ! 5275                          15,
32638 85EF                        0F            .byte	$F
32639                                           ! 5276    
32640                                           ! 5276                     0x06,
32641 85F0                        06            .byte	6
32642                                           ! 5277                     0,
32643 85F1                        00            .byte	0
32644                                           ! 5278                               16,
32645 85F2                        10            .byte	$10
32646                                           ! 5279                          0,
32647 85F3                        00            .byte	0
32648                                           ! 5280                        5,
32649 85F4                        05            .byte	5
32650                                           ! 5281                             10,
32651 85F5                        0A            .byte	$A
32652                                           ! 5282                          5,
32653 85F6                        05            .byte	5
32654                                           ! 5283                               5,
32655 85F7                        05            .byte	5
32656                                           ! 5284                         5,
32657 85F8                        05            .byte	5
32658                                           ! 5285                              0,
32659 85F9                        00            .byte	0
32660                                           ! 5286                         1,
32661 85FA                        01            .byte	1
32662                                           ! 5287                              15,
32663 85FB                        0F            .byte	$F
32664                                           ! 5288                                0,
32665 85FC                        00            .byte	0
32666                                           ! 5289                        0xE0000000,
32667 85FD                      0000            .word	0
32668 85FF                      E000            .word	$E000
32669                                           ! 5290                               0,
32670 8601                      0000            .word	0
32671 8603                      0000            .word	0
32672                                           ! 5291                             0,
32673 8605                      0000            .word	0
32674                                           ! 5292                                1600,
32675 8607                      0640            .word	$640
32676                                           ! 5293                             0,
32677 8609                        00            .byte	0
32678                                           ! 5294                             0,
32679 860A                        00            .byte	0
32680                                           ! 5295                           5,
32681 860B                        05            .byte	5
32682                                           ! 5296                                10,
32683 860C                        0A            .byte	$A
32684                                           ! 5297                             5,
32685 860D                        05            .byte	5
32686                                           ! 5298                                  5,
32687 860E                        05            .byte	5
32688                                           ! 5299                            5,
32689 860F                        05            .byte	5
32690                                           ! 5300                                 0,
32691 8610                        00            .byte	0
32692                                           ! 5301                            1,
32693 8611                        01            .byte	1
32694                                           ! 5302                                 15,
32695 8612                        0F            .byte	$F
32696                                           ! 5303                          0,
32697 8613                      0000            .word	0
32698 8615                      0000            .word	0
32699                                           ! 5304 } },
32700                                           ! 5305 { 0x0114,
32701 8617                      0114            .word	$114
32702                                           ! 5306 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32703 8619                      009B            .word	$9B
32704                                           ! 5307                           0x01 | 0x02 | 0x04,
32705 861B                        07            .byte	7
32706                                           ! 5308                           0,
32707 861C                        00            .byte	0
32708                                           ! 5309                           64,
32709 861D                      0040            .word	$40
32710                                           ! 5310                    64,
32711 861F                      0040            .word	$40
32712                                           ! 5311                        0xA000,
32713 8621                      A000            .word	$A000
32714                                           ! 5312                        0x0000,
32715 8623                      0000            .word	0
32716                                           ! 5313                       0,
32717 8625                      0000            .word	0
32718 8627                      0000            .word	0
32719                                           ! 5314                             1600,
32720 8629                      0640            .word	$640
32721                                           ! 5315                        800,
32722 862B                      0320            .word	$320
32723                                           ! 5316                        600,
32724 862D                      0258            .word	$258
32725                                           ! 5317                      8,
32726 862F                        08            .byte	8
32727                                           ! 5318                      16,
32728 8630                        10            .byte	$10
32729                                           ! 5319                           1,
32730 8631                        01            .byte	1
32731                                           ! 5320                         16,
32732 8632                        10            .byte	$10
32733                                           ! 5321                          15,
32734 8633                        0F            .byte	$F
32735                                           ! 5322                        0x06,
32736 8634                        06            .byte	6
32737                                           ! 5323                     0,
32738 8635                        00            .byte	0
32739                                           ! 5324                               16,
32740 8636                        10            .byte	$10
32741                                           ! 5325                          0,
32742 8637                        00            .byte	0
32743                                           ! 5326                        5,
32744 8638                        05            .byte	5
32745                                           ! 5327                             11,
32746 8639                        0B            .byte	$B
32747                                           ! 5328                          6,
32748 863A                        06            .byte	6
32749                                           ! 5329                               5,
32750 863B                        05            .byte	5
32751                                           ! 5330                         5,
32752 863C                        05            .byte	5
32753                                           ! 5331                              0,
32754 863D                        00            .byte	0
32755                                           ! 5332                         0,
32756 863E                        00            .byte	0
32757                                           ! 5333                              0,
32758 863F                        00            .byte	0
32759                                           ! 5334                                0,
32760 8640                        00            .byte	0
32761                                           ! 5335                        0xE0000000,
32762 8641                      0000            .word	0
32763 8643                      E000            .word	$E000
32764                                           ! 5336                               0,
32765 8645                      0000            .word	0
32766 8647                      0000            .word	0
32767                                           ! 5337                             0,
32768 8649                      0000            .word	0
32769                                           ! 5338                                1600,
32770 864B                      0640            .word	$640
32771                                           ! 5339                             0,
32772 864D                        00            .byte	0
32773                                           ! 5340                             0,
32774 864E                        00            .byte	0
32775                                           ! 5341                           5,
32776 864F                        05            .byte	5
32777                                           ! 5342                                11,
32778 8650                        0B            .byte	$B
32779                                           ! 5343                             6
32780                                           ! 5343 ,
32781 8651                        06            .byte	6
32782                                           ! 5344                                  5,
32783 8652                        05            .byte	5
32784                                           ! 5345                            5,
32785 8653                        05            .byte	5
32786                                           ! 5346                                 0,
32787 8654                        00            .byte	0
32788                                           ! 5347                            0,
32789 8655                        00            .byte	0
32790                                           ! 5348                                 0,
32791 8656                        00            .byte	0
32792                                           ! 5349                          0,
32793 8657                      0000            .word	0
32794 8659                      0000            .word	0
32795                                           ! 5350 } },
32796                                           ! 5351 { 0x0115,
32797 865B                      0115            .word	$115
32798                                           ! 5352 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32799 865D                      009B            .word	$9B
32800                                           ! 5353                           0x01 | 0x02 | 0x04,
32801 865F                        07            .byte	7
32802                                           ! 5354                           0,
32803 8660                        00            .byte	0
32804                                           ! 5355                           64,
32805 8661                      0040            .word	$40
32806                                           ! 5356                    64,
32807 8663                      0040            .word	$40
32808                                           ! 5357                        0xA000,
32809 8665                      A000            .word	$A000
32810                                           ! 5358                        0x0000,
32811 8667                      0000            .word	0
32812                                           ! 5359                       0,
32813 8669                      0000            .word	0
32814 866B                      0000            .word	0
32815                                           ! 5360                             2400,
32816 866D                      0960            .word	$960
32817                                           ! 5361                        800,
32818 866F                      0320            .word	$320
32819                                           ! 5362                        600,
32820 8671                      0258            .word	$258
32821                                           ! 5363                      8,
32822 8673                        08            .byte	8
32823                                           ! 5364                      16,
32824 8674                        10            .byte	$10
32825                                           ! 5365                           1,
32826 8675                        01            .byte	1
32827                                           ! 5366                         24,
32828 8676                        18            .byte	$18
32829                                           ! 5367                          22,
32830 8677                        16            .byte	$16
32831                                           ! 5368                        0x06,
32832 8678                        06            .byte	6
32833                                           ! 5369                     0,
32834 8679                        00            .byte	0
32835                                           ! 5370                               10,
32836 867A                        0A            .byte	$A
32837                                           ! 5371                          0,
32838 867B                        00            .byte	0
32839                                           ! 5372                        8,
32840 867C                        08            .byte	8
32841                                           ! 5373                             16,
32842 867D                        10            .byte	$10
32843                                           ! 5374                          8,
32844 867E                        08            .byte	8
32845                                           ! 5375                               8,
32846 867F                        08            .byte	8
32847                                           ! 5376                         8,
32848 8680                        08            .byte	8
32849                                           ! 5377                              0,
32850 8681                        00            .byte	0
32851                                           ! 5378                         0,
32852 8682                        00            .byte	0
32853                                           ! 5379                              0,
32854 8683                        00            .byte	0
32855                                           ! 5380                                0,
32856 8684                        00            .byte	0
32857                                           ! 5381                        0xE0000000,
32858 8685                      0000            .word	0
32859 8687                      E000            .word	$E000
32860                                           ! 5382                               0,
32861 8689                      0000            .word	0
32862 868B                      0000            .word	0
32863                                           ! 5383                             0,
32864 868D                      0000            .word	0
32865                                           ! 5384                                2400,
32866 868F                      0960            .word	$960
32867                                           ! 5385                             0,
32868 8691                        00            .byte	0
32869                                           ! 5386                             0,
32870 8692                        00            .byte	0
32871                                           ! 5387                           8,
32872 8693                        08            .byte	8
32873                                           ! 5388                                16,
32874 8694                        10            .byte	$10
32875                                           ! 5389                             8,
32876 8695                        08            .byte	8
32877                                           ! 5390                                  8,
32878 8696                        08            .byte	8
32879                                           ! 5391                            8,
32880 8697                        08            .byte	8
32881                                           ! 5392                                 0,
32882 8698                        00            .byte	0
32883                                           ! 5393                            0,
32884 8699                        00            .byte	0
32885                                           ! 5394                                 0,
32886 869A                        00            .byte	0
32887                                           ! 5395                          0,
32888 869B                      0000            .word	0
32889 869D                      0000            .word	0
32890                                           ! 5396 } },
32891                                           ! 5397 { 0x0116,
32892 869F                      0116            .word	$116
32893                                           ! 5398 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32894 86A1                      009B            .word	$9B
32895                                           ! 5399                           0x01 | 0x02 | 0x04,
32896 86A3                        07            .byte	7
32897                                           ! 5400                           0,
32898 86A4                        00            .byte	0
32899                                           ! 5401                           64,
32900 86A5                      0040            .word	$40
32901                                           ! 5402                    64,
32902 86A7                      0040            .word	$40
32903                                           ! 5403                        0xA000,
32904 86A9                      A000            .word	$A000
32905                                           ! 5404                        0x0000,
32906 86AB                      0000            .word	0
32907                                           ! 5405                       0,
32908 86AD                      0000            .word	0
32909 86AF                      0000            .word	0
32910                                           ! 5406                             2048,
32911 86B1                      0800            .word	$800
32912                                           ! 5407                        1024,
32913 86B3                      0400            .word	$400
32914                                           ! 5408                        768,
32915 86B5                      0300            .word	$300
32916                                           ! 5409                      8,
32917 86B7                        08            .byte	8
32918                                           ! 5410                      16,
32919 86B8                        10            .byte	$10
32920                                           ! 5411                           1,
32921 86B9                        01            .byte	1
32922                                           ! 5412                         15,
32923 86BA                        0F            .byte	$F
32924                                           ! 5413       
32925                                           ! 5413                    24,
32926 86BB                        18            .byte	$18
32927                                           ! 5414                        0x06,
32928 86BC                        06            .byte	6
32929                                           ! 5415                     0,
32930 86BD                        00            .byte	0
32931                                           ! 5416                               9,
32932 86BE                        09            .byte	9
32933                                           ! 5417                          0,
32934 86BF                        00            .byte	0
32935                                           ! 5418                        5,
32936 86C0                        05            .byte	5
32937                                           ! 5419                             10,
32938 86C1                        0A            .byte	$A
32939                                           ! 5420                          5,
32940 86C2                        05            .byte	5
32941                                           ! 5421                               5,
32942 86C3                        05            .byte	5
32943                                           ! 5422                         5,
32944 86C4                        05            .byte	5
32945                                           ! 5423                              0,
32946 86C5                        00            .byte	0
32947                                           ! 5424                         1,
32948 86C6                        01            .byte	1
32949                                           ! 5425                              15,
32950 86C7                        0F            .byte	$F
32951                                           ! 5426                                0,
32952 86C8                        00            .byte	0
32953                                           ! 5427                        0xE0000000,
32954 86C9                      0000            .word	0
32955 86CB                      E000            .word	$E000
32956                                           ! 5428                               0,
32957 86CD                      0000            .word	0
32958 86CF                      0000            .word	0
32959                                           ! 5429                             0,
32960 86D1                      0000            .word	0
32961                                           ! 5430                                2048,
32962 86D3                      0800            .word	$800
32963                                           ! 5431                             0,
32964 86D5                        00            .byte	0
32965                                           ! 5432                             0,
32966 86D6                        00            .byte	0
32967                                           ! 5433                           5,
32968 86D7                        05            .byte	5
32969                                           ! 5434                                10,
32970 86D8                        0A            .byte	$A
32971                                           ! 5435                             5,
32972 86D9                        05            .byte	5
32973                                           ! 5436                                  5,
32974 86DA                        05            .byte	5
32975                                           ! 5437                            5,
32976 86DB                        05            .byte	5
32977                                           ! 5438                                 0,
32978 86DC                        00            .byte	0
32979                                           ! 5439                            1,
32980 86DD                        01            .byte	1
32981                                           ! 5440                                 15,
32982 86DE                        0F            .byte	$F
32983                                           ! 5441                          0,
32984 86DF                      0000            .word	0
32985 86E1                      0000            .word	0
32986                                           ! 5442 } },
32987                                           ! 5443 { 0x0117,
32988 86E3                      0117            .word	$117
32989                                           ! 5444 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32990 86E5                      009B            .word	$9B
32991                                           ! 5445                           0x01 | 0x02 | 0x04,
32992 86E7                        07            .byte	7
32993                                           ! 5446                           0,
32994 86E8                        00            .byte	0
32995                                           ! 5447                           64,
32996 86E9                      0040            .word	$40
32997                                           ! 5448                    64,
32998 86EB                      0040            .word	$40
32999                                           ! 5449                        0xA000,
33000 86ED                      A000            .word	$A000
33001                                           ! 5450                        0x0000,
33002 86EF                      0000            .word	0
33003                                           ! 5451                       0,
33004 86F1                      0000            .word	0
33005 86F3                      0000            .word	0
33006                                           ! 5452                             2048,
33007 86F5                      0800            .word	$800
33008                                           ! 5453                        1024,
33009 86F7                      0400            .word	$400
33010                                           ! 5454                        768,
33011 86F9                      0300            .word	$300
33012                                           ! 5455                      8,
33013 86FB                        08            .byte	8
33014                                           ! 5456                      16,
33015 86FC                        10            .byte	$10
33016                                           ! 5457                           1,
33017 86FD                        01            .byte	1
33018                                           ! 5458                         16,
33019 86FE                        10            .byte	$10
33020                                           ! 5459                          24,
33021 86FF                        18            .byte	$18
33022                                           ! 5460                        0x06,
33023 8700                        06            .byte	6
33024                                           ! 5461                     0,
33025 8701                        00            .byte	0
33026                                           ! 5462                               9,
33027 8702                        09            .byte	9
33028                                           ! 5463                          0,
33029 8703                        00            .byte	0
33030                                           ! 5464                        5,
33031 8704                        05            .byte	5
33032                                           ! 5465                             11,
33033 8705                        0B            .byte	$B
33034                                           ! 5466                          6,
33035 8706                        06            .byte	6
33036                                           ! 5467                               5,
33037 8707                        05            .byte	5
33038                                           ! 5468                         5,
33039 8708                        05            .byte	5
33040                                           ! 5469                              0,
33041 8709                        00            .byte	0
33042                                           ! 5470                         0,
33043 870A                        00            .byte	0
33044                                           ! 5471                              0,
33045 870B                        00            .byte	0
33046                                           ! 5472                                0,
33047 870C                        00            .byte	0
33048                                           ! 5473                        0xE0000000,
33049 870D                      0000            .word	0
33050 870F                      E000            .word	$E000
33051                                           ! 5474                               0,
33052 8711                      0000            .word	0
33053 8713                      0000            .word	0
33054                                           ! 5475                             0,
33055 8715                      0000            .word	0
33056                                           ! 5476                                2048,
33057 8717                      0800            .word	$800
33058                                           ! 5477                             0,
33059 8719                        00            .byte	0
33060                                           ! 5478                             0,
33061 871A                        00            .byte	0
33062                                           ! 5479                           5,
33063 871B                        05            .byte	5
33064                                           ! 5480                                11,
33065 871C                        0B            .byte	$B
33066                                           ! 5481     
33067                                           ! 5481                         6,
33068 871D                        06            .byte	6
33069                                           ! 5482                                  5,
33070 871E                        05            .byte	5
33071                                           ! 5483                            5,
33072 871F                        05            .byte	5
33073                                           ! 5484                                 0,
33074 8720                        00            .byte	0
33075                                           ! 5485                            0,
33076 8721                        00            .byte	0
33077                                           ! 5486                                 0,
33078 8722                        00            .byte	0
33079                                           ! 5487                          0,
33080 8723                      0000            .word	0
33081 8725                      0000            .word	0
33082                                           ! 5488 } },
33083                                           ! 5489 { 0x0118,
33084 8727                      0118            .word	$118
33085                                           ! 5490 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33086 8729                      009B            .word	$9B
33087                                           ! 5491                           0x01 | 0x02 | 0x04,
33088 872B                        07            .byte	7
33089                                           ! 5492                           0,
33090 872C                        00            .byte	0
33091                                           ! 5493                           64,
33092 872D                      0040            .word	$40
33093                                           ! 5494                    64,
33094 872F                      0040            .word	$40
33095                                           ! 5495                        0xA000,
33096 8731                      A000            .word	$A000
33097                                           ! 5496                        0x0000,
33098 8733                      0000            .word	0
33099                                           ! 5497                       0,
33100 8735                      0000            .word	0
33101 8737                      0000            .word	0
33102                                           ! 5498                             3072,
33103 8739                      0C00            .word	$C00
33104                                           ! 5499                        1024,
33105 873B                      0400            .word	$400
33106                                           ! 5500                        768,
33107 873D                      0300            .word	$300
33108                                           ! 5501                      8,
33109 873F                        08            .byte	8
33110                                           ! 5502                      16,
33111 8740                        10            .byte	$10
33112                                           ! 5503                           1,
33113 8741                        01            .byte	1
33114                                           ! 5504                         24,
33115 8742                        18            .byte	$18
33116                                           ! 5505                          36,
33117 8743                        24            .byte	$24
33118                                           ! 5506                        0x06,
33119 8744                        06            .byte	6
33120                                           ! 5507                     0,
33121 8745                        00            .byte	0
33122                                           ! 5508                               6,
33123 8746                        06            .byte	6
33124                                           ! 5509                          0,
33125 8747                        00            .byte	0
33126                                           ! 5510                        8,
33127 8748                        08            .byte	8
33128                                           ! 5511                             16,
33129 8749                        10            .byte	$10
33130                                           ! 5512                          8,
33131 874A                        08            .byte	8
33132                                           ! 5513                               8,
33133 874B                        08            .byte	8
33134                                           ! 5514                         8,
33135 874C                        08            .byte	8
33136                                           ! 5515                              0,
33137 874D                        00            .byte	0
33138                                           ! 5516                         0,
33139 874E                        00            .byte	0
33140                                           ! 5517                              0,
33141 874F                        00            .byte	0
33142                                           ! 5518                                0,
33143 8750                        00            .byte	0
33144                                           ! 5519                        0xE0000000,
33145 8751                      0000            .word	0
33146 8753                      E000            .word	$E000
33147                                           ! 5520                               0,
33148 8755                      0000            .word	0
33149 8757                      0000            .word	0
33150                                           ! 5521                             0,
33151 8759                      0000            .word	0
33152                                           ! 5522                                3072,
33153 875B                      0C00            .word	$C00
33154                                           ! 5523                             0,
33155 875D                        00            .byte	0
33156                                           ! 5524                             0,
33157 875E                        00            .byte	0
33158                                           ! 5525                           8,
33159 875F                        08            .byte	8
33160                                           ! 5526                                16,
33161 8760                        10            .byte	$10
33162                                           ! 5527                             8,
33163 8761                        08            .byte	8
33164                                           ! 5528                                  8,
33165 8762                        08            .byte	8
33166                                           ! 5529                            8,
33167 8763                        08            .byte	8
33168                                           ! 5530                                 0,
33169 8764                        00            .byte	0
33170                                           ! 5531                            0,
33171 8765                        00            .byte	0
33172                                           ! 5532                                 0,
33173 8766                        00            .byte	0
33174                                           ! 5533                          0,
33175 8767                      0000            .word	0
33176 8769                      0000            .word	0
33177                                           ! 5534 } },
33178                                           ! 5535 { 0x0119,
33179 876B                      0119            .word	$119
33180                                           ! 5536 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33181 876D                      009B            .word	$9B
33182                                           ! 5537                           0x01 | 0x02 | 0x04,
33183 876F                        07            .byte	7
33184                                           ! 5538                           0,
33185 8770                        00            .byte	0
33186                                           ! 5539                           64,
33187 8771                      0040            .word	$40
33188                                           ! 5540                    64,
33189 8773                      0040            .word	$40
33190                                           ! 5541                        0xA000,
33191 8775                      A000            .word	$A000
33192                                           ! 5542                        0x0000,
33193 8777                      0000            .word	0
33194                                           ! 5543                       0,
33195 8779                      0000            .word	0
33196 877B                      0000            .word	0
33197                                           ! 5544                             2560,
33198 877D                      0A00            .word	$A00
33199                                           ! 5545                        1280,
33200 877F                      0500            .word	$500
33201                                           ! 5546                        1024,
33202 8781                      0400            .word	$400
33203                                           ! 5547                      8,
33204 8783                        08            .byte	8
33205                                           ! 5548                      16,
33206 8784                        10            .byte	$10
33207                                           ! 5549                           1,
33208 8785                        01            .byte	1
33209                                           ! 5550         
33210                                           ! 5550                 15,
33211 8786                        0F            .byte	$F
33212                                           ! 5551                          40,
33213 8787                        28            .byte	$28
33214                                           ! 5552                        0x06,
33215 8788                        06            .byte	6
33216                                           ! 5553                     0,
33217 8789                        00            .byte	0
33218                                           ! 5554                               5,
33219 878A                        05            .byte	5
33220                                           ! 5555                          0,
33221 878B                        00            .byte	0
33222                                           ! 5556                        5,
33223 878C                        05            .byte	5
33224                                           ! 5557                             10,
33225 878D                        0A            .byte	$A
33226                                           ! 5558                          5,
33227 878E                        05            .byte	5
33228                                           ! 5559                               5,
33229 878F                        05            .byte	5
33230                                           ! 5560                         5,
33231 8790                        05            .byte	5
33232                                           ! 5561                              0,
33233 8791                        00            .byte	0
33234                                           ! 5562                         1,
33235 8792                        01            .byte	1
33236                                           ! 5563                              15,
33237 8793                        0F            .byte	$F
33238                                           ! 5564                                0,
33239 8794                        00            .byte	0
33240                                           ! 5565                        0xE0000000,
33241 8795                      0000            .word	0
33242 8797                      E000            .word	$E000
33243                                           ! 5566                               0,
33244 8799                      0000            .word	0
33245 879B                      0000            .word	0
33246                                           ! 5567                             0,
33247 879D                      0000            .word	0
33248                                           ! 5568                                2560,
33249 879F                      0A00            .word	$A00
33250                                           ! 5569                             0,
33251 87A1                        00            .byte	0
33252                                           ! 5570                             0,
33253 87A2                        00            .byte	0
33254                                           ! 5571                           5,
33255 87A3                        05            .byte	5
33256                                           ! 5572                                10,
33257 87A4                        0A            .byte	$A
33258                                           ! 5573                             5,
33259 87A5                        05            .byte	5
33260                                           ! 5574                                  5,
33261 87A6                        05            .byte	5
33262                                           ! 5575                            5,
33263 87A7                        05            .byte	5
33264                                           ! 5576                                 0,
33265 87A8                        00            .byte	0
33266                                           ! 5577                            1,
33267 87A9                        01            .byte	1
33268                                           ! 5578                                 15,
33269 87AA                        0F            .byte	$F
33270                                           ! 5579                          0,
33271 87AB                      0000            .word	0
33272 87AD                      0000            .word	0
33273                                           ! 5580 } },
33274                                           ! 5581 { 0x011a,
33275 87AF                      011A            .word	$11A
33276                                           ! 5582 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33277 87B1                      009B            .word	$9B
33278                                           ! 5583                           0x01 | 0x02 | 0x04,
33279 87B3                        07            .byte	7
33280                                           ! 5584                           0,
33281 87B4                        00            .byte	0
33282                                           ! 5585                           64,
33283 87B5                      0040            .word	$40
33284                                           ! 5586                    64,
33285 87B7                      0040            .word	$40
33286                                           ! 5587                        0xA000,
33287 87B9                      A000            .word	$A000
33288                                           ! 5588                        0x0000,
33289 87BB                      0000            .word	0
33290                                           ! 5589                       0,
33291 87BD                      0000            .word	0
33292 87BF                      0000            .word	0
33293                                           ! 5590                             2560,
33294 87C1                      0A00            .word	$A00
33295                                           ! 5591                        1280,
33296 87C3                      0500            .word	$500
33297                                           ! 5592                        1024,
33298 87C5                      0400            .word	$400
33299                                           ! 5593                      8,
33300 87C7                        08            .byte	8
33301                                           ! 5594                      16,
33302 87C8                        10            .byte	$10
33303                                           ! 5595                           1,
33304 87C9                        01            .byte	1
33305                                           ! 5596                         16,
33306 87CA                        10            .byte	$10
33307                                           ! 5597                          40,
33308 87CB                        28            .byte	$28
33309                                           ! 5598                        0x06,
33310 87CC                        06            .byte	6
33311                                           ! 5599                     0,
33312 87CD                        00            .byte	0
33313                                           ! 5600                               5,
33314 87CE                        05            .byte	5
33315                                           ! 5601                          0,
33316 87CF                        00            .byte	0
33317                                           ! 5602                        5,
33318 87D0                        05            .byte	5
33319                                           ! 5603                             11,
33320 87D1                        0B            .byte	$B
33321                                           ! 5604                          6,
33322 87D2                        06            .byte	6
33323                                           ! 5605                               5,
33324 87D3                        05            .byte	5
33325                                           ! 5606                         5,
33326 87D4                        05            .byte	5
33327                                           ! 5607                              0,
33328 87D5                        00            .byte	0
33329                                           ! 5608                         0,
33330 87D6                        00            .byte	0
33331                                           ! 5609                              0,
33332 87D7                        00            .byte	0
33333                                           ! 5610                                0,
33334 87D8                        00            .byte	0
33335                                           ! 5611                        0xE0000000,
33336 87D9                      0000            .word	0
33337 87DB                      E000            .word	$E000
33338                                           ! 5612                               0,
33339 87DD                      0000            .word	0
33340 87DF                      0000            .word	0
33341                                           ! 5613                             0,
33342 87E1                      0000            .word	0
33343                                           ! 5614                                2560,
33344 87E3                      0A00            .word	$A00
33345                                           ! 5615                             0,
33346 87E5                        00            .byte	0
33347                                           ! 5616                             0,
33348 87E6                        00            .byte	0
33349                                           ! 5617                           5,
33350 87E7                        05            .byte	5
33351                                           ! 5618             
33352                                           ! 5618                    11,
33353 87E8                        0B            .byte	$B
33354                                           ! 5619                             6,
33355 87E9                        06            .byte	6
33356                                           ! 5620                                  5,
33357 87EA                        05            .byte	5
33358                                           ! 5621                            5,
33359 87EB                        05            .byte	5
33360                                           ! 5622                                 0,
33361 87EC                        00            .byte	0
33362                                           ! 5623                            0,
33363 87ED                        00            .byte	0
33364                                           ! 5624                                 0,
33365 87EE                        00            .byte	0
33366                                           ! 5625                          0,
33367 87EF                      0000            .word	0
33368 87F1                      0000            .word	0
33369                                           ! 5626 } },
33370                                           ! 5627 { 0x011b,
33371 87F3                      011B            .word	$11B
33372                                           ! 5628 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33373 87F5                      009B            .word	$9B
33374                                           ! 5629                           0x01 | 0x02 | 0x04,
33375 87F7                        07            .byte	7
33376                                           ! 5630                           0,
33377 87F8                        00            .byte	0
33378                                           ! 5631                           64,
33379 87F9                      0040            .word	$40
33380                                           ! 5632                    64,
33381 87FB                      0040            .word	$40
33382                                           ! 5633                        0xA000,
33383 87FD                      A000            .word	$A000
33384                                           ! 5634                        0x0000,
33385 87FF                      0000            .word	0
33386                                           ! 5635                       0,
33387 8801                      0000            .word	0
33388 8803                      0000            .word	0
33389                                           ! 5636                             3840,
33390 8805                      0F00            .word	$F00
33391                                           ! 5637                        1280,
33392 8807                      0500            .word	$500
33393                                           ! 5638                        1024,
33394 8809                      0400            .word	$400
33395                                           ! 5639                      8,
33396 880B                        08            .byte	8
33397                                           ! 5640                      16,
33398 880C                        10            .byte	$10
33399                                           ! 5641                           1,
33400 880D                        01            .byte	1
33401                                           ! 5642                         24,
33402 880E                        18            .byte	$18
33403                                           ! 5643                          60,
33404 880F                        3C            .byte	$3C
33405                                           ! 5644                        0x06,
33406 8810                        06            .byte	6
33407                                           ! 5645                     0,
33408 8811                        00            .byte	0
33409                                           ! 5646                               3,
33410 8812                        03            .byte	3
33411                                           ! 5647                          0,
33412 8813                        00            .byte	0
33413                                           ! 5648                        8,
33414 8814                        08            .byte	8
33415                                           ! 5649                             16,
33416 8815                        10            .byte	$10
33417                                           ! 5650                          8,
33418 8816                        08            .byte	8
33419                                           ! 5651                               8,
33420 8817                        08            .byte	8
33421                                           ! 5652                         8,
33422 8818                        08            .byte	8
33423                                           ! 5653                              0,
33424 8819                        00            .byte	0
33425                                           ! 5654                         0,
33426 881A                        00            .byte	0
33427                                           ! 5655                              0,
33428 881B                        00            .byte	0
33429                                           ! 5656                                0,
33430 881C                        00            .byte	0
33431                                           ! 5657                        0xE0000000,
33432 881D                      0000            .word	0
33433 881F                      E000            .word	$E000
33434                                           ! 5658                               0,
33435 8821                      0000            .word	0
33436 8823                      0000            .word	0
33437                                           ! 5659                             0,
33438 8825                      0000            .word	0
33439                                           ! 5660                                3840,
33440 8827                      0F00            .word	$F00
33441                                           ! 5661                             0,
33442 8829                        00            .byte	0
33443                                           ! 5662                             0,
33444 882A                        00            .byte	0
33445                                           ! 5663                           8,
33446 882B                        08            .byte	8
33447                                           ! 5664                                16,
33448 882C                        10            .byte	$10
33449                                           ! 5665                             8,
33450 882D                        08            .byte	8
33451                                           ! 5666                                  8,
33452 882E                        08            .byte	8
33453                                           ! 5667                            8,
33454 882F                        08            .byte	8
33455                                           ! 5668                                 0,
33456 8830                        00            .byte	0
33457                                           ! 5669                            0,
33458 8831                        00            .byte	0
33459                                           ! 5670                                 0,
33460 8832                        00            .byte	0
33461                                           ! 5671                          0,
33462 8833                      0000            .word	0
33463 8835                      0000            .word	0
33464                                           ! 5672 } },
33465                                           ! 5673 { 0x011c,
33466 8837                      011C            .word	$11C
33467                                           ! 5674 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33468 8839                      009B            .word	$9B
33469                                           ! 5675                           0x01 | 0x02 | 0x04,
33470 883B                        07            .byte	7
33471                                           ! 5676                           0,
33472 883C                        00            .byte	0
33473                                           ! 5677                           64,
33474 883D                      0040            .word	$40
33475                                           ! 5678                    64,
33476 883F                      0040            .word	$40
33477                                           ! 5679                        0xA000,
33478 8841                      A000            .word	$A000
33479                                           ! 5680                        0x0000,
33480 8843                      0000            .word	0
33481                                           ! 5681                       0,
33482 8845                      0000            .word	0
33483 8847                      0000            .word	0
33484                                           ! 5682                             1600,
33485 8849                      0640            .word	$640
33486                                           ! 5683                        1600,
33487 884B                      0640            .word	$640
33488                                           ! 5684                        1200,
33489 884D                      04B0            .word	$4B0
33490                                           ! 5685                      8,
33491 884F                        08            .byte	8
33492                                           ! 5686                      16,
33493 8850                        10            .byte	$10
33494                                           ! 5687          
33495                                           ! 5687                  1,
33496 8851                        01            .byte	1
33497                                           ! 5688                         8,
33498 8852                        08            .byte	8
33499                                           ! 5689                          30,
33500 8853                        1E            .byte	$1E
33501                                           ! 5690                        0x04,
33502 8854                        04            .byte	4
33503                                           ! 5691                     0,
33504 8855                        00            .byte	0
33505                                           ! 5692                               7,
33506 8856                        07            .byte	7
33507                                           ! 5693                          0,
33508 8857                        00            .byte	0
33509                                           ! 5694                        0,
33510 8858                        00            .byte	0
33511                                           ! 5695                             0,
33512 8859                        00            .byte	0
33513                                           ! 5696                          0,
33514 885A                        00            .byte	0
33515                                           ! 5697                               0,
33516 885B                        00            .byte	0
33517                                           ! 5698                         0,
33518 885C                        00            .byte	0
33519                                           ! 5699                              0,
33520 885D                        00            .byte	0
33521                                           ! 5700                         0,
33522 885E                        00            .byte	0
33523                                           ! 5701                              0,
33524 885F                        00            .byte	0
33525                                           ! 5702                                0,
33526 8860                        00            .byte	0
33527                                           ! 5703                        0xE0000000,
33528 8861                      0000            .word	0
33529 8863                      E000            .word	$E000
33530                                           ! 5704                               0,
33531 8865                      0000            .word	0
33532 8867                      0000            .word	0
33533                                           ! 5705                             0,
33534 8869                      0000            .word	0
33535                                           ! 5706                                1600,
33536 886B                      0640            .word	$640
33537                                           ! 5707                             0,
33538 886D                        00            .byte	0
33539                                           ! 5708                             0,
33540 886E                        00            .byte	0
33541                                           ! 5709                           0,
33542 886F                        00            .byte	0
33543                                           ! 5710                                0,
33544 8870                        00            .byte	0
33545                                           ! 5711                             0,
33546 8871                        00            .byte	0
33547                                           ! 5712                                  0,
33548 8872                        00            .byte	0
33549                                           ! 5713                            0,
33550 8873                        00            .byte	0
33551                                           ! 5714                                 0,
33552 8874                        00            .byte	0
33553                                           ! 5715                            0,
33554 8875                        00            .byte	0
33555                                           ! 5716                                 0,
33556 8876                        00            .byte	0
33557                                           ! 5717                          0,
33558 8877                      0000            .word	0
33559 8879                      0000            .word	0
33560                                           ! 5718 } },
33561                                           ! 5719 { 0x011d,
33562 887B                      011D            .word	$11D
33563                                           ! 5720 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33564 887D                      009B            .word	$9B
33565                                           ! 5721                           0x01 | 0x02 | 0x04,
33566 887F                        07            .byte	7
33567                                           ! 5722                           0,
33568 8880                        00            .byte	0
33569                                           ! 5723                           64,
33570 8881                      0040            .word	$40
33571                                           ! 5724                    64,
33572 8883                      0040            .word	$40
33573                                           ! 5725                        0xA000,
33574 8885                      A000            .word	$A000
33575                                           ! 5726                        0x0000,
33576 8887                      0000            .word	0
33577                                           ! 5727                       0,
33578 8889                      0000            .word	0
33579 888B                      0000            .word	0
33580                                           ! 5728                             3200,
33581 888D                      0C80            .word	$C80
33582                                           ! 5729                        1600,
33583 888F                      0640            .word	$640
33584                                           ! 5730                        1200,
33585 8891                      04B0            .word	$4B0
33586                                           ! 5731                      8,
33587 8893                        08            .byte	8
33588                                           ! 5732                      16,
33589 8894                        10            .byte	$10
33590                                           ! 5733                           1,
33591 8895                        01            .byte	1
33592                                           ! 5734                         15,
33593 8896                        0F            .byte	$F
33594                                           ! 5735                          59,
33595 8897                        3B            .byte	$3B
33596                                           ! 5736                        0x06,
33597 8898                        06            .byte	6
33598                                           ! 5737                     0,
33599 8899                        00            .byte	0
33600                                           ! 5738                               3,
33601 889A                        03            .byte	3
33602                                           ! 5739                          0,
33603 889B                        00            .byte	0
33604                                           ! 5740                        5,
33605 889C                        05            .byte	5
33606                                           ! 5741                             10,
33607 889D                        0A            .byte	$A
33608                                           ! 5742                          5,
33609 889E                        05            .byte	5
33610                                           ! 5743                               5,
33611 889F                        05            .byte	5
33612                                           ! 5744                         5,
33613 88A0                        05            .byte	5
33614                                           ! 5745                              0,
33615 88A1                        00            .byte	0
33616                                           ! 5746                         1,
33617 88A2                        01            .byte	1
33618                                           ! 5747                              15,
33619 88A3                        0F            .byte	$F
33620                                           ! 5748                                0,
33621 88A4                        00            .byte	0
33622                                           ! 5749                        0xE0000000,
33623 88A5                      0000            .word	0
33624 88A7                      E000            .word	$E000
33625                                           ! 5750                               0,
33626 88A9                      0000            .word	0
33627 88AB                      0000            .word	0
33628                                           ! 5751                             0,
33629 88AD                      0000            .word	0
33630                                           ! 5752                                3200,
33631 88AF                      0C80            .word	$C80
33632                                           ! 5753                             0,
33633 88B1                        00            .byte	0
33634                                           ! 5754                             0,
33635 88B2                        00            .byte	0
33636                                           ! 5755                  
33637                                           ! 5755          5,
33638 88B3                        05            .byte	5
33639                                           ! 5756                                10,
33640 88B4                        0A            .byte	$A
33641                                           ! 5757                             5,
33642 88B5                        05            .byte	5
33643                                           ! 5758                                  5,
33644 88B6                        05            .byte	5
33645                                           ! 5759                            5,
33646 88B7                        05            .byte	5
33647                                           ! 5760                                 0,
33648 88B8                        00            .byte	0
33649                                           ! 5761                            1,
33650 88B9                        01            .byte	1
33651                                           ! 5762                                 15,
33652 88BA                        0F            .byte	$F
33653                                           ! 5763                          0,
33654 88BB                      0000            .word	0
33655 88BD                      0000            .word	0
33656                                           ! 5764 } },
33657                                           ! 5765 { 0x011e,
33658 88BF                      011E            .word	$11E
33659                                           ! 5766 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33660 88C1                      009B            .word	$9B
33661                                           ! 5767                           0x01 | 0x02 | 0x04,
33662 88C3                        07            .byte	7
33663                                           ! 5768                           0,
33664 88C4                        00            .byte	0
33665                                           ! 5769                           64,
33666 88C5                      0040            .word	$40
33667                                           ! 5770                    64,
33668 88C7                      0040            .word	$40
33669                                           ! 5771                        0xA000,
33670 88C9                      A000            .word	$A000
33671                                           ! 5772                        0x0000,
33672 88CB                      0000            .word	0
33673                                           ! 5773                       0,
33674 88CD                      0000            .word	0
33675 88CF                      0000            .word	0
33676                                           ! 5774                             3200,
33677 88D1                      0C80            .word	$C80
33678                                           ! 5775                        1600,
33679 88D3                      0640            .word	$640
33680                                           ! 5776                        1200,
33681 88D5                      04B0            .word	$4B0
33682                                           ! 5777                      8,
33683 88D7                        08            .byte	8
33684                                           ! 5778                      16,
33685 88D8                        10            .byte	$10
33686                                           ! 5779                           1,
33687 88D9                        01            .byte	1
33688                                           ! 5780                         16,
33689 88DA                        10            .byte	$10
33690                                           ! 5781                          59,
33691 88DB                        3B            .byte	$3B
33692                                           ! 5782                        0x06,
33693 88DC                        06            .byte	6
33694                                           ! 5783                     0,
33695 88DD                        00            .byte	0
33696                                           ! 5784                               3,
33697 88DE                        03            .byte	3
33698                                           ! 5785                          0,
33699 88DF                        00            .byte	0
33700                                           ! 5786                        5,
33701 88E0                        05            .byte	5
33702                                           ! 5787                             11,
33703 88E1                        0B            .byte	$B
33704                                           ! 5788                          6,
33705 88E2                        06            .byte	6
33706                                           ! 5789                               5,
33707 88E3                        05            .byte	5
33708                                           ! 5790                         5,
33709 88E4                        05            .byte	5
33710                                           ! 5791                              0,
33711 88E5                        00            .byte	0
33712                                           ! 5792                         0,
33713 88E6                        00            .byte	0
33714                                           ! 5793                              0,
33715 88E7                        00            .byte	0
33716                                           ! 5794                                0,
33717 88E8                        00            .byte	0
33718                                           ! 5795                        0xE0000000,
33719 88E9                      0000            .word	0
33720 88EB                      E000            .word	$E000
33721                                           ! 5796                               0,
33722 88ED                      0000            .word	0
33723 88EF                      0000            .word	0
33724                                           ! 5797                             0,
33725 88F1                      0000            .word	0
33726                                           ! 5798                                3200,
33727 88F3                      0C80            .word	$C80
33728                                           ! 5799                             0,
33729 88F5                        00            .byte	0
33730                                           ! 5800                             0,
33731 88F6                        00            .byte	0
33732                                           ! 5801                           5,
33733 88F7                        05            .byte	5
33734                                           ! 5802                                11,
33735 88F8                        0B            .byte	$B
33736                                           ! 5803                             6,
33737 88F9                        06            .byte	6
33738                                           ! 5804                                  5,
33739 88FA                        05            .byte	5
33740                                           ! 5805                            5,
33741 88FB                        05            .byte	5
33742                                           ! 5806                                 0,
33743 88FC                        00            .byte	0
33744                                           ! 5807                            0,
33745 88FD                        00            .byte	0
33746                                           ! 5808                                 0,
33747 88FE                        00            .byte	0
33748                                           ! 5809                          0,
33749 88FF                      0000            .word	0
33750 8901                      0000            .word	0
33751                                           ! 5810 } },
33752                                           ! 5811 { 0x011f,
33753 8903                      011F            .word	$11F
33754                                           ! 5812 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33755 8905                      009B            .word	$9B
33756                                           ! 5813                           0x01 | 0x02 | 0x04,
33757 8907                        07            .byte	7
33758                                           ! 5814                           0,
33759 8908                        00            .byte	0
33760                                           ! 5815                           64,
33761 8909                      0040            .word	$40
33762                                           ! 5816                    64,
33763 890B                      0040            .word	$40
33764                                           ! 5817                        0xA000,
33765 890D                      A000            .word	$A000
33766                                           ! 5818                        0x0000,
33767 890F                      0000            .word	0
33768                                           ! 5819                       0,
33769 8911                      0000            .word	0
33770 8913                      0000            .word	0
33771                                           ! 5820                             4800,
33772 8915                      12C0            .word	$12C0
33773                                           ! 5821                        1600,
33774 8917                      0640            .word	$640
33775                                           ! 5822                        1200,
33776 8919                      04B0            .word	$4B0
33777                                           ! 5823                      8,
33778 891B                        08            .byte	8
33779                                           ! 5824          
33780                                           ! 5824             16,
33781 891C                        10            .byte	$10
33782                                           ! 5825                           1,
33783 891D                        01            .byte	1
33784                                           ! 5826                         24,
33785 891E                        18            .byte	$18
33786                                           ! 5827                          88,
33787 891F                        58            .byte	$58
33788                                           ! 5828                        0x06,
33789 8920                        06            .byte	6
33790                                           ! 5829                     0,
33791 8921                        00            .byte	0
33792                                           ! 5830                               1,
33793 8922                        01            .byte	1
33794                                           ! 5831                          0,
33795 8923                        00            .byte	0
33796                                           ! 5832                        8,
33797 8924                        08            .byte	8
33798                                           ! 5833                             16,
33799 8925                        10            .byte	$10
33800                                           ! 5834                          8,
33801 8926                        08            .byte	8
33802                                           ! 5835                               8,
33803 8927                        08            .byte	8
33804                                           ! 5836                         8,
33805 8928                        08            .byte	8
33806                                           ! 5837                              0,
33807 8929                        00            .byte	0
33808                                           ! 5838                         0,
33809 892A                        00            .byte	0
33810                                           ! 5839                              0,
33811 892B                        00            .byte	0
33812                                           ! 5840                                0,
33813 892C                        00            .byte	0
33814                                           ! 5841                        0xE0000000,
33815 892D                      0000            .word	0
33816 892F                      E000            .word	$E000
33817                                           ! 5842                               0,
33818 8931                      0000            .word	0
33819 8933                      0000            .word	0
33820                                           ! 5843                             0,
33821 8935                      0000            .word	0
33822                                           ! 5844                                4800,
33823 8937                      12C0            .word	$12C0
33824                                           ! 5845                             0,
33825 8939                        00            .byte	0
33826                                           ! 5846                             0,
33827 893A                        00            .byte	0
33828                                           ! 5847                           8,
33829 893B                        08            .byte	8
33830                                           ! 5848                                16,
33831 893C                        10            .byte	$10
33832                                           ! 5849                             8,
33833 893D                        08            .byte	8
33834                                           ! 5850                                  8,
33835 893E                        08            .byte	8
33836                                           ! 5851                            8,
33837 893F                        08            .byte	8
33838                                           ! 5852                                 0,
33839 8940                        00            .byte	0
33840                                           ! 5853                            0,
33841 8941                        00            .byte	0
33842                                           ! 5854                                 0,
33843 8942                        00            .byte	0
33844                                           ! 5855                          0,
33845 8943                      0000            .word	0
33846 8945                      0000            .word	0
33847                                           ! 5856 } },
33848                                           ! 5857 { 0x0140,
33849 8947                      0140            .word	$140
33850                                           ! 5858 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33851 8949                      009B            .word	$9B
33852                                           ! 5859                           0x01 | 0x02 | 0x04,
33853 894B                        07            .byte	7
33854                                           ! 5860                           0,
33855 894C                        00            .byte	0
33856                                           ! 5861                           64,
33857 894D                      0040            .word	$40
33858                                           ! 5862                    64,
33859 894F                      0040            .word	$40
33860                                           ! 5863                        0xA000,
33861 8951                      A000            .word	$A000
33862                                           ! 5864                        0x0000,
33863 8953                      0000            .word	0
33864                                           ! 5865                       0,
33865 8955                      0000            .word	0
33866 8957                      0000            .word	0
33867                                           ! 5866                             1280,
33868 8959                      0500            .word	$500
33869                                           ! 5867                        320,
33870 895B                      0140            .word	$140
33871                                           ! 5868                        200,
33872 895D                      00C8            .word	$C8
33873                                           ! 5869                      8,
33874 895F                        08            .byte	8
33875                                           ! 5870                      16,
33876 8960                        10            .byte	$10
33877                                           ! 5871                           1,
33878 8961                        01            .byte	1
33879                                           ! 5872                         32,
33880 8962                        20            .byte	$20
33881                                           ! 5873                          4,
33882 8963                        04            .byte	4
33883                                           ! 5874                        0x06,
33884 8964                        06            .byte	6
33885                                           ! 5875                     0,
33886 8965                        00            .byte	0
33887                                           ! 5876                               64,
33888 8966                        40            .byte	$40
33889                                           ! 5877                          0,
33890 8967                        00            .byte	0
33891                                           ! 5878                        8,
33892 8968                        08            .byte	8
33893                                           ! 5879                             16,
33894 8969                        10            .byte	$10
33895                                           ! 5880                          8,
33896 896A                        08            .byte	8
33897                                           ! 5881                               8,
33898 896B                        08            .byte	8
33899                                           ! 5882                         8,
33900 896C                        08            .byte	8
33901                                           ! 5883                              0,
33902 896D                        00            .byte	0
33903                                           ! 5884                         8,
33904 896E                        08            .byte	8
33905                                           ! 5885                              24,
33906 896F                        18            .byte	$18
33907                                           ! 5886                                0x02,
33908 8970                        02            .byte	2
33909                                           ! 5887                        0xE0000000,
33910 8971                      0000            .word	0
33911 8973                      E000            .word	$E000
33912                                           ! 5888                               0,
33913 8975                      0000            .word	0
33914 8977                      0000            .word	0
33915                                           ! 5889                             0,
33916 8979                      0000            .word	0
33917                                           ! 5890                                1280,
33918 897B                      0500            .word	$500
33919                                           ! 5891                             0,
33920 897D                        00            .byte	0
33921                                           ! 5892                    
33922                                           ! 5892          0,
33923 897E                        00            .byte	0
33924                                           ! 5893                           8,
33925 897F                        08            .byte	8
33926                                           ! 5894                                16,
33927 8980                        10            .byte	$10
33928                                           ! 5895                             8,
33929 8981                        08            .byte	8
33930                                           ! 5896                                  8,
33931 8982                        08            .byte	8
33932                                           ! 5897                            8,
33933 8983                        08            .byte	8
33934                                           ! 5898                                 0,
33935 8984                        00            .byte	0
33936                                           ! 5899                            8,
33937 8985                        08            .byte	8
33938                                           ! 5900                                 24,
33939 8986                        18            .byte	$18
33940                                           ! 5901                          0,
33941 8987                      0000            .word	0
33942 8989                      0000            .word	0
33943                                           ! 5902 } },
33944                                           ! 5903 { 0x0141,
33945 898B                      0141            .word	$141
33946                                           ! 5904 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33947 898D                      009B            .word	$9B
33948                                           ! 5905                           0x01 | 0x02 | 0x04,
33949 898F                        07            .byte	7
33950                                           ! 5906                           0,
33951 8990                        00            .byte	0
33952                                           ! 5907                           64,
33953 8991                      0040            .word	$40
33954                                           ! 5908                    64,
33955 8993                      0040            .word	$40
33956                                           ! 5909                        0xA000,
33957 8995                      A000            .word	$A000
33958                                           ! 5910                        0x0000,
33959 8997                      0000            .word	0
33960                                           ! 5911                       0,
33961 8999                      0000            .word	0
33962 899B                      0000            .word	0
33963                                           ! 5912                             2560,
33964 899D                      0A00            .word	$A00
33965                                           ! 5913                        640,
33966 899F                      0280            .word	$280
33967                                           ! 5914                        400,
33968 89A1                      0190            .word	$190
33969                                           ! 5915                      8,
33970 89A3                        08            .byte	8
33971                                           ! 5916                      16,
33972 89A4                        10            .byte	$10
33973                                           ! 5917                           1,
33974 89A5                        01            .byte	1
33975                                           ! 5918                         32,
33976 89A6                        20            .byte	$20
33977                                           ! 5919                          16,
33978 89A7                        10            .byte	$10
33979                                           ! 5920                        0x06,
33980 89A8                        06            .byte	6
33981                                           ! 5921                     0,
33982 89A9                        00            .byte	0
33983                                           ! 5922                               15,
33984 89AA                        0F            .byte	$F
33985                                           ! 5923                          0,
33986 89AB                        00            .byte	0
33987                                           ! 5924                        8,
33988 89AC                        08            .byte	8
33989                                           ! 5925                             16,
33990 89AD                        10            .byte	$10
33991                                           ! 5926                          8,
33992 89AE                        08            .byte	8
33993                                           ! 5927                               8,
33994 89AF                        08            .byte	8
33995                                           ! 5928                         8,
33996 89B0                        08            .byte	8
33997                                           ! 5929                              0,
33998 89B1                        00            .byte	0
33999                                           ! 5930                         8,
34000 89B2                        08            .byte	8
34001                                           ! 5931                              24,
34002 89B3                        18            .byte	$18
34003                                           ! 5932                                0x02,
34004 89B4                        02            .byte	2
34005                                           ! 5933                        0xE0000000,
34006 89B5                      0000            .word	0
34007 89B7                      E000            .word	$E000
34008                                           ! 5934                               0,
34009 89B9                      0000            .word	0
34010 89BB                      0000            .word	0
34011                                           ! 5935                             0,
34012 89BD                      0000            .word	0
34013                                           ! 5936                                2560,
34014 89BF                      0A00            .word	$A00
34015                                           ! 5937                             0,
34016 89C1                        00            .byte	0
34017                                           ! 5938                             0,
34018 89C2                        00            .byte	0
34019                                           ! 5939                           8,
34020 89C3                        08            .byte	8
34021                                           ! 5940                                16,
34022 89C4                        10            .byte	$10
34023                                           ! 5941                             8,
34024 89C5                        08            .byte	8
34025                                           ! 5942                                  8,
34026 89C6                        08            .byte	8
34027                                           ! 5943                            8,
34028 89C7                        08            .byte	8
34029                                           ! 5944                                 0,
34030 89C8                        00            .byte	0
34031                                           ! 5945                            8,
34032 89C9                        08            .byte	8
34033                                           ! 5946                                 24,
34034 89CA                        18            .byte	$18
34035                                           ! 5947                          0,
34036 89CB                      0000            .word	0
34037 89CD                      0000            .word	0
34038                                           ! 5948 } },
34039                                           ! 5949 { 0x0142,
34040 89CF                      0142            .word	$142
34041                                           ! 5950 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34042 89D1                      009B            .word	$9B
34043                                           ! 5951                           0x01 | 0x02 | 0x04,
34044 89D3                        07            .byte	7
34045                                           ! 5952                           0,
34046 89D4                        00            .byte	0
34047                                           ! 5953                           64,
34048 89D5                      0040            .word	$40
34049                                           ! 5954                    64,
34050 89D7                      0040            .word	$40
34051                                           ! 5955                        0xA000,
34052 89D9                      A000            .word	$A000
34053                                           ! 5956                        0x0000,
34054 89DB                      0000            .word	0
34055                                           ! 5957                       0,
34056 89DD                      0000            .word	0
34057 89DF                      0000            .word	0
34058                                           ! 5958                             2560,
34059 89E1                      0A00            .word	$A00
34060                                           ! 5959                        640,
34061 89E3                      0280            .word	$280
34062                                           ! 5960                        480,
34063 89E5                      01E0            .word	$1E0
34064                                           ! 5961   
34065                                           ! 5961                    8,
34066 89E7                        08            .byte	8
34067                                           ! 5962                      16,
34068 89E8                        10            .byte	$10
34069                                           ! 5963                           1,
34070 89E9                        01            .byte	1
34071                                           ! 5964                         32,
34072 89EA                        20            .byte	$20
34073                                           ! 5965                          19,
34074 89EB                        13            .byte	$13
34075                                           ! 5966                        0x06,
34076 89EC                        06            .byte	6
34077                                           ! 5967                     0,
34078 89ED                        00            .byte	0
34079                                           ! 5968                               12,
34080 89EE                        0C            .byte	$C
34081                                           ! 5969                          0,
34082 89EF                        00            .byte	0
34083                                           ! 5970                        8,
34084 89F0                        08            .byte	8
34085                                           ! 5971                             16,
34086 89F1                        10            .byte	$10
34087                                           ! 5972                          8,
34088 89F2                        08            .byte	8
34089                                           ! 5973                               8,
34090 89F3                        08            .byte	8
34091                                           ! 5974                         8,
34092 89F4                        08            .byte	8
34093                                           ! 5975                              0,
34094 89F5                        00            .byte	0
34095                                           ! 5976                         8,
34096 89F6                        08            .byte	8
34097                                           ! 5977                              24,
34098 89F7                        18            .byte	$18
34099                                           ! 5978                                0x02,
34100 89F8                        02            .byte	2
34101                                           ! 5979                        0xE0000000,
34102 89F9                      0000            .word	0
34103 89FB                      E000            .word	$E000
34104                                           ! 5980                               0,
34105 89FD                      0000            .word	0
34106 89FF                      0000            .word	0
34107                                           ! 5981                             0,
34108 8A01                      0000            .word	0
34109                                           ! 5982                                2560,
34110 8A03                      0A00            .word	$A00
34111                                           ! 5983                             0,
34112 8A05                        00            .byte	0
34113                                           ! 5984                             0,
34114 8A06                        00            .byte	0
34115                                           ! 5985                           8,
34116 8A07                        08            .byte	8
34117                                           ! 5986                                16,
34118 8A08                        10            .byte	$10
34119                                           ! 5987                             8,
34120 8A09                        08            .byte	8
34121                                           ! 5988                                  8,
34122 8A0A                        08            .byte	8
34123                                           ! 5989                            8,
34124 8A0B                        08            .byte	8
34125                                           ! 5990                                 0,
34126 8A0C                        00            .byte	0
34127                                           ! 5991                            8,
34128 8A0D                        08            .byte	8
34129                                           ! 5992                                 24,
34130 8A0E                        18            .byte	$18
34131                                           ! 5993                          0,
34132 8A0F                      0000            .word	0
34133 8A11                      0000            .word	0
34134                                           ! 5994 } },
34135                                           ! 5995 { 0x0143,
34136 8A13                      0143            .word	$143
34137                                           ! 5996 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34138 8A15                      009B            .word	$9B
34139                                           ! 5997                           0x01 | 0x02 | 0x04,
34140 8A17                        07            .byte	7
34141                                           ! 5998                           0,
34142 8A18                        00            .byte	0
34143                                           ! 5999                           64,
34144 8A19                      0040            .word	$40
34145                                           ! 6000                    64,
34146 8A1B                      0040            .word	$40
34147                                           ! 6001                        0xA000,
34148 8A1D                      A000            .word	$A000
34149                                           ! 6002                        0x0000,
34150 8A1F                      0000            .word	0
34151                                           ! 6003                       0,
34152 8A21                      0000            .word	0
34153 8A23                      0000            .word	0
34154                                           ! 6004                             3200,
34155 8A25                      0C80            .word	$C80
34156                                           ! 6005                        800,
34157 8A27                      0320            .word	$320
34158                                           ! 6006                        600,
34159 8A29                      0258            .word	$258
34160                                           ! 6007                      8,
34161 8A2B                        08            .byte	8
34162                                           ! 6008                      16,
34163 8A2C                        10            .byte	$10
34164                                           ! 6009                           1,
34165 8A2D                        01            .byte	1
34166                                           ! 6010                         32,
34167 8A2E                        20            .byte	$20
34168                                           ! 6011                          30,
34169 8A2F                        1E            .byte	$1E
34170                                           ! 6012                        0x06,
34171 8A30                        06            .byte	6
34172                                           ! 6013                     0,
34173 8A31                        00            .byte	0
34174                                           ! 6014                               7,
34175 8A32                        07            .byte	7
34176                                           ! 6015                          0,
34177 8A33                        00            .byte	0
34178                                           ! 6016                        8,
34179 8A34                        08            .byte	8
34180                                           ! 6017                             16,
34181 8A35                        10            .byte	$10
34182                                           ! 6018                          8,
34183 8A36                        08            .byte	8
34184                                           ! 6019                               8,
34185 8A37                        08            .byte	8
34186                                           ! 6020                         8,
34187 8A38                        08            .byte	8
34188                                           ! 6021                              0,
34189 8A39                        00            .byte	0
34190                                           ! 6022                         8,
34191 8A3A                        08            .byte	8
34192                                           ! 6023                              24,
34193 8A3B                        18            .byte	$18
34194                                           ! 6024                                0x02,
34195 8A3C                        02            .byte	2
34196                                           ! 6025                        0xE0000000,
34197 8A3D                      0000            .word	0
34198 8A3F                      E000            .word	$E000
34199                                           ! 6026                               0,
34200 8A41                      0000            .word	0
34201 8A43                      0000            .word	0
34202                                           ! 6027                             0,
34203 8A45                      0000            .word	0
34204                                           ! 6028                                3200,
34205 8A47                      0C80            .word	$C80
34206                                           ! 6029              
34207                                           ! 6029                0,
34208 8A49                        00            .byte	0
34209                                           ! 6030                             0,
34210 8A4A                        00            .byte	0
34211                                           ! 6031                           8,
34212 8A4B                        08            .byte	8
34213                                           ! 6032                                16,
34214 8A4C                        10            .byte	$10
34215                                           ! 6033                             8,
34216 8A4D                        08            .byte	8
34217                                           ! 6034                                  8,
34218 8A4E                        08            .byte	8
34219                                           ! 6035                            8,
34220 8A4F                        08            .byte	8
34221                                           ! 6036                                 0,
34222 8A50                        00            .byte	0
34223                                           ! 6037                            8,
34224 8A51                        08            .byte	8
34225                                           ! 6038                                 24,
34226 8A52                        18            .byte	$18
34227                                           ! 6039                          0,
34228 8A53                      0000            .word	0
34229 8A55                      0000            .word	0
34230                                           ! 6040 } },
34231                                           ! 6041 { 0x0144,
34232 8A57                      0144            .word	$144
34233                                           ! 6042 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34234 8A59                      009B            .word	$9B
34235                                           ! 6043                           0x01 | 0x02 | 0x04,
34236 8A5B                        07            .byte	7
34237                                           ! 6044                           0,
34238 8A5C                        00            .byte	0
34239                                           ! 6045                           64,
34240 8A5D                      0040            .word	$40
34241                                           ! 6046                    64,
34242 8A5F                      0040            .word	$40
34243                                           ! 6047                        0xA000,
34244 8A61                      A000            .word	$A000
34245                                           ! 6048                        0x0000,
34246 8A63                      0000            .word	0
34247                                           ! 6049                       0,
34248 8A65                      0000            .word	0
34249 8A67                      0000            .word	0
34250                                           ! 6050                             4096,
34251 8A69                      1000            .word	$1000
34252                                           ! 6051                        1024,
34253 8A6B                      0400            .word	$400
34254                                           ! 6052                        768,
34255 8A6D                      0300            .word	$300
34256                                           ! 6053                      8,
34257 8A6F                        08            .byte	8
34258                                           ! 6054                      16,
34259 8A70                        10            .byte	$10
34260                                           ! 6055                           1,
34261 8A71                        01            .byte	1
34262                                           ! 6056                         32,
34263 8A72                        20            .byte	$20
34264                                           ! 6057                          48,
34265 8A73                        30            .byte	$30
34266                                           ! 6058                        0x06,
34267 8A74                        06            .byte	6
34268                                           ! 6059                     0,
34269 8A75                        00            .byte	0
34270                                           ! 6060                               4,
34271 8A76                        04            .byte	4
34272                                           ! 6061                          0,
34273 8A77                        00            .byte	0
34274                                           ! 6062                        8,
34275 8A78                        08            .byte	8
34276                                           ! 6063                             16,
34277 8A79                        10            .byte	$10
34278                                           ! 6064                          8,
34279 8A7A                        08            .byte	8
34280                                           ! 6065                               8,
34281 8A7B                        08            .byte	8
34282                                           ! 6066                         8,
34283 8A7C                        08            .byte	8
34284                                           ! 6067                              0,
34285 8A7D                        00            .byte	0
34286                                           ! 6068                         8,
34287 8A7E                        08            .byte	8
34288                                           ! 6069                              24,
34289 8A7F                        18            .byte	$18
34290                                           ! 6070                                0x02,
34291 8A80                        02            .byte	2
34292                                           ! 6071                        0xE0000000,
34293 8A81                      0000            .word	0
34294 8A83                      E000            .word	$E000
34295                                           ! 6072                               0,
34296 8A85                      0000            .word	0
34297 8A87                      0000            .word	0
34298                                           ! 6073                             0,
34299 8A89                      0000            .word	0
34300                                           ! 6074                                4096,
34301 8A8B                      1000            .word	$1000
34302                                           ! 6075                             0,
34303 8A8D                        00            .byte	0
34304                                           ! 6076                             0,
34305 8A8E                        00            .byte	0
34306                                           ! 6077                           8,
34307 8A8F                        08            .byte	8
34308                                           ! 6078                                16,
34309 8A90                        10            .byte	$10
34310                                           ! 6079                             8,
34311 8A91                        08            .byte	8
34312                                           ! 6080                                  8,
34313 8A92                        08            .byte	8
34314                                           ! 6081                            8,
34315 8A93                        08            .byte	8
34316                                           ! 6082                                 0,
34317 8A94                        00            .byte	0
34318                                           ! 6083                            8,
34319 8A95                        08            .byte	8
34320                                           ! 6084                                 24,
34321 8A96                        18            .byte	$18
34322                                           ! 6085                          0,
34323 8A97                      0000            .word	0
34324 8A99                      0000            .word	0
34325                                           ! 6086 } },
34326                                           ! 6087 { 0x0145,
34327 8A9B                      0145            .word	$145
34328                                           ! 6088 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34329 8A9D                      009B            .word	$9B
34330                                           ! 6089                           0x01 | 0x02 | 0x04,
34331 8A9F                        07            .byte	7
34332                                           ! 6090                           0,
34333 8AA0                        00            .byte	0
34334                                           ! 6091                           64,
34335 8AA1                      0040            .word	$40
34336                                           ! 6092                    64,
34337 8AA3                      0040            .word	$40
34338                                           ! 6093                        0xA000,
34339 8AA5                      A000            .word	$A000
34340                                           ! 6094                        0x0000,
34341 8AA7                      0000            .word	0
34342                                           ! 6095                       0,
34343 8AA9                      0000            .word	0
34344 8AAB                      0000            .word	0
34345                                           ! 6096                             5120,
34346 8AAD                      1400            .word	$1400
34347                                           ! 6097                      
34348                                           ! 6097   1280,
34349 8AAF                      0500            .word	$500
34350                                           ! 6098                        1024,
34351 8AB1                      0400            .word	$400
34352                                           ! 6099                      8,
34353 8AB3                        08            .byte	8
34354                                           ! 6100                      16,
34355 8AB4                        10            .byte	$10
34356                                           ! 6101                           1,
34357 8AB5                        01            .byte	1
34358                                           ! 6102                         32,
34359 8AB6                        20            .byte	$20
34360                                           ! 6103                          80,
34361 8AB7                        50            .byte	$50
34362                                           ! 6104                        0x06,
34363 8AB8                        06            .byte	6
34364                                           ! 6105                     0,
34365 8AB9                        00            .byte	0
34366                                           ! 6106                               2,
34367 8ABA                        02            .byte	2
34368                                           ! 6107                          0,
34369 8ABB                        00            .byte	0
34370                                           ! 6108                        8,
34371 8ABC                        08            .byte	8
34372                                           ! 6109                             16,
34373 8ABD                        10            .byte	$10
34374                                           ! 6110                          8,
34375 8ABE                        08            .byte	8
34376                                           ! 6111                               8,
34377 8ABF                        08            .byte	8
34378                                           ! 6112                         8,
34379 8AC0                        08            .byte	8
34380                                           ! 6113                              0,
34381 8AC1                        00            .byte	0
34382                                           ! 6114                         8,
34383 8AC2                        08            .byte	8
34384                                           ! 6115                              24,
34385 8AC3                        18            .byte	$18
34386                                           ! 6116                                0x02,
34387 8AC4                        02            .byte	2
34388                                           ! 6117                        0xE0000000,
34389 8AC5                      0000            .word	0
34390 8AC7                      E000            .word	$E000
34391                                           ! 6118                               0,
34392 8AC9                      0000            .word	0
34393 8ACB                      0000            .word	0
34394                                           ! 6119                             0,
34395 8ACD                      0000            .word	0
34396                                           ! 6120                                5120,
34397 8ACF                      1400            .word	$1400
34398                                           ! 6121                             0,
34399 8AD1                        00            .byte	0
34400                                           ! 6122                             0,
34401 8AD2                        00            .byte	0
34402                                           ! 6123                           8,
34403 8AD3                        08            .byte	8
34404                                           ! 6124                                16,
34405 8AD4                        10            .byte	$10
34406                                           ! 6125                             8,
34407 8AD5                        08            .byte	8
34408                                           ! 6126                                  8,
34409 8AD6                        08            .byte	8
34410                                           ! 6127                            8,
34411 8AD7                        08            .byte	8
34412                                           ! 6128                                 0,
34413 8AD8                        00            .byte	0
34414                                           ! 6129                            8,
34415 8AD9                        08            .byte	8
34416                                           ! 6130                                 24,
34417 8ADA                        18            .byte	$18
34418                                           ! 6131                          0,
34419 8ADB                      0000            .word	0
34420 8ADD                      0000            .word	0
34421                                           ! 6132 } },
34422                                           ! 6133 { 0x0146,
34423 8ADF                      0146            .word	$146
34424                                           ! 6134 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34425 8AE1                      009B            .word	$9B
34426                                           ! 6135                           0x01 | 0x02 | 0x04,
34427 8AE3                        07            .byte	7
34428                                           ! 6136                           0,
34429 8AE4                        00            .byte	0
34430                                           ! 6137                           64,
34431 8AE5                      0040            .word	$40
34432                                           ! 6138                    64,
34433 8AE7                      0040            .word	$40
34434                                           ! 6139                        0xA000,
34435 8AE9                      A000            .word	$A000
34436                                           ! 6140                        0x0000,
34437 8AEB                      0000            .word	0
34438                                           ! 6141                       0,
34439 8AED                      0000            .word	0
34440 8AEF                      0000            .word	0
34441                                           ! 6142                             320,
34442 8AF1                      0140            .word	$140
34443                                           ! 6143                        320,
34444 8AF3                      0140            .word	$140
34445                                           ! 6144                        200,
34446 8AF5                      00C8            .word	$C8
34447                                           ! 6145                      8,
34448 8AF7                        08            .byte	8
34449                                           ! 6146                      16,
34450 8AF8                        10            .byte	$10
34451                                           ! 6147                           1,
34452 8AF9                        01            .byte	1
34453                                           ! 6148                         8,
34454 8AFA                        08            .byte	8
34455                                           ! 6149                          1,
34456 8AFB                        01            .byte	1
34457                                           ! 6150                        0x04,
34458 8AFC                        04            .byte	4
34459                                           ! 6151                     0,
34460 8AFD                        00            .byte	0
34461                                           ! 6152                               261,
34462 8AFE                        05            .byte	5
34463                                           ! 6153                          0,
34464 8AFF                        00            .byte	0
34465                                           ! 6154                        0,
34466 8B00                        00            .byte	0
34467                                           ! 6155                             0,
34468 8B01                        00            .byte	0
34469                                           ! 6156                          0,
34470 8B02                        00            .byte	0
34471                                           ! 6157                               0,
34472 8B03                        00            .byte	0
34473                                           ! 6158                         0,
34474 8B04                        00            .byte	0
34475                                           ! 6159                              0,
34476 8B05                        00            .byte	0
34477                                           ! 6160                         0,
34478 8B06                        00            .byte	0
34479                                           ! 6161                              0,
34480 8B07                        00            .byte	0
34481                                           ! 6162                                0,
34482 8B08                        00            .byte	0
34483                                           ! 6163                        0xE0000000,
34484 8B09                      0000            .word	0
34485 8B0B                      E000            .word	$E000
34486                                           ! 6164                               0,
34487 8B0D                      0000            .word	0
34488 8B0F                      0000            .word	0
34489                                           ! 6165                             0,
34490 8B11                      0000            .word	0
34491                                           ! 6166                   
34492                                           ! 6166              320,
34493 8B13                      0140            .word	$140
34494                                           ! 6167                             0,
34495 8B15                        00            .byte	0
34496                                           ! 6168                             0,
34497 8B16                        00            .byte	0
34498                                           ! 6169                           0,
34499 8B17                        00            .byte	0
34500                                           ! 6170                                0,
34501 8B18                        00            .byte	0
34502                                           ! 6171                             0,
34503 8B19                        00            .byte	0
34504                                           ! 6172                                  0,
34505 8B1A                        00            .byte	0
34506                                           ! 6173                            0,
34507 8B1B                        00            .byte	0
34508                                           ! 6174                                 0,
34509 8B1C                        00            .byte	0
34510                                           ! 6175                            0,
34511 8B1D                        00            .byte	0
34512                                           ! 6176                                 0,
34513 8B1E                        00            .byte	0
34514                                           ! 6177                          0,
34515 8B1F                      0000            .word	0
34516 8B21                      0000            .word	0
34517                                           ! 6178 } },
34518                                           ! 6179 { 0x0147,
34519 8B23                      0147            .word	$147
34520                                           ! 6180 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34521 8B25                      009B            .word	$9B
34522                                           ! 6181                           0x01 | 0x02 | 0x04,
34523 8B27                        07            .byte	7
34524                                           ! 6182                           0,
34525 8B28                        00            .byte	0
34526                                           ! 6183                           64,
34527 8B29                      0040            .word	$40
34528                                           ! 6184                    64,
34529 8B2B                      0040            .word	$40
34530                                           ! 6185                        0xA000,
34531 8B2D                      A000            .word	$A000
34532                                           ! 6186                        0x0000,
34533 8B2F                      0000            .word	0
34534                                           ! 6187                       0,
34535 8B31                      0000            .word	0
34536 8B33                      0000            .word	0
34537                                           ! 6188                             6400,
34538 8B35                      1900            .word	$1900
34539                                           ! 6189                        1600,
34540 8B37                      0640            .word	$640
34541                                           ! 6190                        1200,
34542 8B39                      04B0            .word	$4B0
34543                                           ! 6191                      8,
34544 8B3B                        08            .byte	8
34545                                           ! 6192                      16,
34546 8B3C                        10            .byte	$10
34547                                           ! 6193                           1,
34548 8B3D                        01            .byte	1
34549                                           ! 6194                         32,
34550 8B3E                        20            .byte	$20
34551                                           ! 6195                          118,
34552 8B3F                        76            .byte	$76
34553                                           ! 6196                        0x06,
34554 8B40                        06            .byte	6
34555                                           ! 6197                     0,
34556 8B41                        00            .byte	0
34557                                           ! 6198                               1,
34558 8B42                        01            .byte	1
34559                                           ! 6199                          0,
34560 8B43                        00            .byte	0
34561                                           ! 6200                        8,
34562 8B44                        08            .byte	8
34563                                           ! 6201                             16,
34564 8B45                        10            .byte	$10
34565                                           ! 6202                          8,
34566 8B46                        08            .byte	8
34567                                           ! 6203                               8,
34568 8B47                        08            .byte	8
34569                                           ! 6204                         8,
34570 8B48                        08            .byte	8
34571                                           ! 6205                              0,
34572 8B49                        00            .byte	0
34573                                           ! 6206                         8,
34574 8B4A                        08            .byte	8
34575                                           ! 6207                              24,
34576 8B4B                        18            .byte	$18
34577                                           ! 6208                                0x02,
34578 8B4C                        02            .byte	2
34579                                           ! 6209                        0xE0000000,
34580 8B4D                      0000            .word	0
34581 8B4F                      E000            .word	$E000
34582                                           ! 6210                               0,
34583 8B51                      0000            .word	0
34584 8B53                      0000            .word	0
34585                                           ! 6211                             0,
34586 8B55                      0000            .word	0
34587                                           ! 6212                                6400,
34588 8B57                      1900            .word	$1900
34589                                           ! 6213                             0,
34590 8B59                        00            .byte	0
34591                                           ! 6214                             0,
34592 8B5A                        00            .byte	0
34593                                           ! 6215                           8,
34594 8B5B                        08            .byte	8
34595                                           ! 6216                                16,
34596 8B5C                        10            .byte	$10
34597                                           ! 6217                             8,
34598 8B5D                        08            .byte	8
34599                                           ! 6218                                  8,
34600 8B5E                        08            .byte	8
34601                                           ! 6219                            8,
34602 8B5F                        08            .byte	8
34603                                           ! 6220                                 0,
34604 8B60                        00            .byte	0
34605                                           ! 6221                            8,
34606 8B61                        08            .byte	8
34607                                           ! 6222                                 24,
34608 8B62                        18            .byte	$18
34609                                           ! 6223                          0,
34610 8B63                      0000            .word	0
34611 8B65                      0000            .word	0
34612                                           ! 6224 } },
34613                                           ! 6225 { 0x0148,
34614 8B67                      0148            .word	$148
34615                                           ! 6226 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34616 8B69                      009B            .word	$9B
34617                                           ! 6227                           0x01 | 0x02 | 0x04,
34618 8B6B                        07            .byte	7
34619                                           ! 6228                           0,
34620 8B6C                        00            .byte	0
34621                                           ! 6229                           64,
34622 8B6D                      0040            .word	$40
34623                                           ! 6230                    64,
34624 8B6F                      0040            .word	$40
34625                                           ! 6231                        0xA000,
34626 8B71                      A000            .word	$A000
34627                                           ! 6232                        0x0000,
34628 8B73                      0000            .word	0
34629                                           ! 6233                       0,
34630 8B75                      0000            .word	0
34631 8B77                      0000            .word	0
34632                                           ! 6234                         
34633                                           ! 6234     1152,
34634 8B79                      0480            .word	$480
34635                                           ! 6235                        1152,
34636 8B7B                      0480            .word	$480
34637                                           ! 6236                        864,
34638 8B7D                      0360            .word	$360
34639                                           ! 6237                      8,
34640 8B7F                        08            .byte	8
34641                                           ! 6238                      16,
34642 8B80                        10            .byte	$10
34643                                           ! 6239                           1,
34644 8B81                        01            .byte	1
34645                                           ! 6240                         8,
34646 8B82                        08            .byte	8
34647                                           ! 6241                          16,
34648 8B83                        10            .byte	$10
34649                                           ! 6242                        0x04,
34650 8B84                        04            .byte	4
34651                                           ! 6243                     0,
34652 8B85                        00            .byte	0
34653                                           ! 6244                               15,
34654 8B86                        0F            .byte	$F
34655                                           ! 6245                          0,
34656 8B87                        00            .byte	0
34657                                           ! 6246                        0,
34658 8B88                        00            .byte	0
34659                                           ! 6247                             0,
34660 8B89                        00            .byte	0
34661                                           ! 6248                          0,
34662 8B8A                        00            .byte	0
34663                                           ! 6249                               0,
34664 8B8B                        00            .byte	0
34665                                           ! 6250                         0,
34666 8B8C                        00            .byte	0
34667                                           ! 6251                              0,
34668 8B8D                        00            .byte	0
34669                                           ! 6252                         0,
34670 8B8E                        00            .byte	0
34671                                           ! 6253                              0,
34672 8B8F                        00            .byte	0
34673                                           ! 6254                                0,
34674 8B90                        00            .byte	0
34675                                           ! 6255                        0xE0000000,
34676 8B91                      0000            .word	0
34677 8B93                      E000            .word	$E000
34678                                           ! 6256                               0,
34679 8B95                      0000            .word	0
34680 8B97                      0000            .word	0
34681                                           ! 6257                             0,
34682 8B99                      0000            .word	0
34683                                           ! 6258                                1152,
34684 8B9B                      0480            .word	$480
34685                                           ! 6259                             0,
34686 8B9D                        00            .byte	0
34687                                           ! 6260                             0,
34688 8B9E                        00            .byte	0
34689                                           ! 6261                           0,
34690 8B9F                        00            .byte	0
34691                                           ! 6262                                0,
34692 8BA0                        00            .byte	0
34693                                           ! 6263                             0,
34694 8BA1                        00            .byte	0
34695                                           ! 6264                                  0,
34696 8BA2                        00            .byte	0
34697                                           ! 6265                            0,
34698 8BA3                        00            .byte	0
34699                                           ! 6266                                 0,
34700 8BA4                        00            .byte	0
34701                                           ! 6267                            0,
34702 8BA5                        00            .byte	0
34703                                           ! 6268                                 0,
34704 8BA6                        00            .byte	0
34705                                           ! 6269                          0,
34706 8BA7                      0000            .word	0
34707 8BA9                      0000            .word	0
34708                                           ! 6270 } },
34709                                           ! 6271 { 0x0149,
34710 8BAB                      0149            .word	$149
34711                                           ! 6272 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34712 8BAD                      009B            .word	$9B
34713                                           ! 6273                           0x01 | 0x02 | 0x04,
34714 8BAF                        07            .byte	7
34715                                           ! 6274                           0,
34716 8BB0                        00            .byte	0
34717                                           ! 6275                           64,
34718 8BB1                      0040            .word	$40
34719                                           ! 6276                    64,
34720 8BB3                      0040            .word	$40
34721                                           ! 6277                        0xA000,
34722 8BB5                      A000            .word	$A000
34723                                           ! 6278                        0x0000,
34724 8BB7                      0000            .word	0
34725                                           ! 6279                       0,
34726 8BB9                      0000            .word	0
34727 8BBB                      0000            .word	0
34728                                           ! 6280                             2304,
34729 8BBD                      0900            .word	$900
34730                                           ! 6281                        1152,
34731 8BBF                      0480            .word	$480
34732                                           ! 6282                        864,
34733 8BC1                      0360            .word	$360
34734                                           ! 6283                      8,
34735 8BC3                        08            .byte	8
34736                                           ! 6284                      16,
34737 8BC4                        10            .byte	$10
34738                                           ! 6285                           1,
34739 8BC5                        01            .byte	1
34740                                           ! 6286                         15,
34741 8BC6                        0F            .byte	$F
34742                                           ! 6287                          31,
34743 8BC7                        1F            .byte	$1F
34744                                           ! 6288                        0x06,
34745 8BC8                        06            .byte	6
34746                                           ! 6289                     0,
34747 8BC9                        00            .byte	0
34748                                           ! 6290                               7,
34749 8BCA                        07            .byte	7
34750                                           ! 6291                          0,
34751 8BCB                        00            .byte	0
34752                                           ! 6292                        5,
34753 8BCC                        05            .byte	5
34754                                           ! 6293                             10,
34755 8BCD                        0A            .byte	$A
34756                                           ! 6294                          5,
34757 8BCE                        05            .byte	5
34758                                           ! 6295                               5,
34759 8BCF                        05            .byte	5
34760                                           ! 6296                         5,
34761 8BD0                        05            .byte	5
34762                                           ! 6297                              0,
34763 8BD1                        00            .byte	0
34764                                           ! 6298                         1,
34765 8BD2                        01            .byte	1
34766                                           ! 6299                              15,
34767 8BD3                        0F            .byte	$F
34768                                           ! 6300                                0,
34769 8BD4                        00            .byte	0
34770                                           ! 6301                        0xE0000000,
34771 8BD5                      0000            .word	0
34772 8BD7                      E000            .word	$E000
34773                                           ! 6302                               0,
34774 8BD9                      0000            .word	0
34775 8BDB                      0000            .word	0
34776                                           ! 6303                       
34777                                           ! 6303       0,
34778 8BDD                      0000            .word	0
34779                                           ! 6304                                2304,
34780 8BDF                      0900            .word	$900
34781                                           ! 6305                             0,
34782 8BE1                        00            .byte	0
34783                                           ! 6306                             0,
34784 8BE2                        00            .byte	0
34785                                           ! 6307                           5,
34786 8BE3                        05            .byte	5
34787                                           ! 6308                                10,
34788 8BE4                        0A            .byte	$A
34789                                           ! 6309                             5,
34790 8BE5                        05            .byte	5
34791                                           ! 6310                                  5,
34792 8BE6                        05            .byte	5
34793                                           ! 6311                            5,
34794 8BE7                        05            .byte	5
34795                                           ! 6312                                 0,
34796 8BE8                        00            .byte	0
34797                                           ! 6313                            1,
34798 8BE9                        01            .byte	1
34799                                           ! 6314                                 15,
34800 8BEA                        0F            .byte	$F
34801                                           ! 6315                          0,
34802 8BEB                      0000            .word	0
34803 8BED                      0000            .word	0
34804                                           ! 6316 } },
34805                                           ! 6317 { 0x014a,
34806 8BEF                      014A            .word	$14A
34807                                           ! 6318 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34808 8BF1                      009B            .word	$9B
34809                                           ! 6319                           0x01 | 0x02 | 0x04,
34810 8BF3                        07            .byte	7
34811                                           ! 6320                           0,
34812 8BF4                        00            .byte	0
34813                                           ! 6321                           64,
34814 8BF5                      0040            .word	$40
34815                                           ! 6322                    64,
34816 8BF7                      0040            .word	$40
34817                                           ! 6323                        0xA000,
34818 8BF9                      A000            .word	$A000
34819                                           ! 6324                        0x0000,
34820 8BFB                      0000            .word	0
34821                                           ! 6325                       0,
34822 8BFD                      0000            .word	0
34823 8BFF                      0000            .word	0
34824                                           ! 6326                             2304,
34825 8C01                      0900            .word	$900
34826                                           ! 6327                        1152,
34827 8C03                      0480            .word	$480
34828                                           ! 6328                        864,
34829 8C05                      0360            .word	$360
34830                                           ! 6329                      8,
34831 8C07                        08            .byte	8
34832                                           ! 6330                      16,
34833 8C08                        10            .byte	$10
34834                                           ! 6331                           1,
34835 8C09                        01            .byte	1
34836                                           ! 6332                         16,
34837 8C0A                        10            .byte	$10
34838                                           ! 6333                          31,
34839 8C0B                        1F            .byte	$1F
34840                                           ! 6334                        0x06,
34841 8C0C                        06            .byte	6
34842                                           ! 6335                     0,
34843 8C0D                        00            .byte	0
34844                                           ! 6336                               7,
34845 8C0E                        07            .byte	7
34846                                           ! 6337                          0,
34847 8C0F                        00            .byte	0
34848                                           ! 6338                        5,
34849 8C10                        05            .byte	5
34850                                           ! 6339                             11,
34851 8C11                        0B            .byte	$B
34852                                           ! 6340                          6,
34853 8C12                        06            .byte	6
34854                                           ! 6341                               5,
34855 8C13                        05            .byte	5
34856                                           ! 6342                         5,
34857 8C14                        05            .byte	5
34858                                           ! 6343                              0,
34859 8C15                        00            .byte	0
34860                                           ! 6344                         0,
34861 8C16                        00            .byte	0
34862                                           ! 6345                              0,
34863 8C17                        00            .byte	0
34864                                           ! 6346                                0,
34865 8C18                        00            .byte	0
34866                                           ! 6347                        0xE0000000,
34867 8C19                      0000            .word	0
34868 8C1B                      E000            .word	$E000
34869                                           ! 6348                               0,
34870 8C1D                      0000            .word	0
34871 8C1F                      0000            .word	0
34872                                           ! 6349                             0,
34873 8C21                      0000            .word	0
34874                                           ! 6350                                2304,
34875 8C23                      0900            .word	$900
34876                                           ! 6351                             0,
34877 8C25                        00            .byte	0
34878                                           ! 6352                             0,
34879 8C26                        00            .byte	0
34880                                           ! 6353                           5,
34881 8C27                        05            .byte	5
34882                                           ! 6354                                11,
34883 8C28                        0B            .byte	$B
34884                                           ! 6355                             6,
34885 8C29                        06            .byte	6
34886                                           ! 6356                                  5,
34887 8C2A                        05            .byte	5
34888                                           ! 6357                            5,
34889 8C2B                        05            .byte	5
34890                                           ! 6358                                 0,
34891 8C2C                        00            .byte	0
34892                                           ! 6359                            0,
34893 8C2D                        00            .byte	0
34894                                           ! 6360                                 0,
34895 8C2E                        00            .byte	0
34896                                           ! 6361                          0,
34897 8C2F                      0000            .word	0
34898 8C31                      0000            .word	0
34899                                           ! 6362 } },
34900                                           ! 6363 { 0x014b,
34901 8C33                      014B            .word	$14B
34902                                           ! 6364 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34903 8C35                      009B            .word	$9B
34904                                           ! 6365                           0x01 | 0x02 | 0x04,
34905 8C37                        07            .byte	7
34906                                           ! 6366                           0,
34907 8C38                        00            .byte	0
34908                                           ! 6367                           64,
34909 8C39                      0040            .word	$40
34910                                           ! 6368                    64,
34911 8C3B                      0040            .word	$40
34912                                           ! 6369                        0xA000,
34913 8C3D                      A000            .word	$A000
34914                                           ! 6370                        0x0000,
34915 8C3F                      0000            .word	0
34916                                           ! 6371                       0,
34917 8C41                      0000            .word	0
34918 8C43                      0000            .word	0
34919                                           ! 6372  
34920                                           ! 6372                            3456,
34921 8C45                      0D80            .word	$D80
34922                                           ! 6373                        1152,
34923 8C47                      0480            .word	$480
34924                                           ! 6374                        864,
34925 8C49                      0360            .word	$360
34926                                           ! 6375                      8,
34927 8C4B                        08            .byte	8
34928                                           ! 6376                      16,
34929 8C4C                        10            .byte	$10
34930                                           ! 6377                           1,
34931 8C4D                        01            .byte	1
34932                                           ! 6378                         24,
34933 8C4E                        18            .byte	$18
34934                                           ! 6379                          46,
34935 8C4F                        2E            .byte	$2E
34936                                           ! 6380                        0x06,
34937 8C50                        06            .byte	6
34938                                           ! 6381                     0,
34939 8C51                        00            .byte	0
34940                                           ! 6382                               4,
34941 8C52                        04            .byte	4
34942                                           ! 6383                          0,
34943 8C53                        00            .byte	0
34944                                           ! 6384                        8,
34945 8C54                        08            .byte	8
34946                                           ! 6385                             16,
34947 8C55                        10            .byte	$10
34948                                           ! 6386                          8,
34949 8C56                        08            .byte	8
34950                                           ! 6387                               8,
34951 8C57                        08            .byte	8
34952                                           ! 6388                         8,
34953 8C58                        08            .byte	8
34954                                           ! 6389                              0,
34955 8C59                        00            .byte	0
34956                                           ! 6390                         0,
34957 8C5A                        00            .byte	0
34958                                           ! 6391                              0,
34959 8C5B                        00            .byte	0
34960                                           ! 6392                                0,
34961 8C5C                        00            .byte	0
34962                                           ! 6393                        0xE0000000,
34963 8C5D                      0000            .word	0
34964 8C5F                      E000            .word	$E000
34965                                           ! 6394                               0,
34966 8C61                      0000            .word	0
34967 8C63                      0000            .word	0
34968                                           ! 6395                             0,
34969 8C65                      0000            .word	0
34970                                           ! 6396                                3456,
34971 8C67                      0D80            .word	$D80
34972                                           ! 6397                             0,
34973 8C69                        00            .byte	0
34974                                           ! 6398                             0,
34975 8C6A                        00            .byte	0
34976                                           ! 6399                           8,
34977 8C6B                        08            .byte	8
34978                                           ! 6400                                16,
34979 8C6C                        10            .byte	$10
34980                                           ! 6401                             8,
34981 8C6D                        08            .byte	8
34982                                           ! 6402                                  8,
34983 8C6E                        08            .byte	8
34984                                           ! 6403                            8,
34985 8C6F                        08            .byte	8
34986                                           ! 6404                                 0,
34987 8C70                        00            .byte	0
34988                                           ! 6405                            0,
34989 8C71                        00            .byte	0
34990                                           ! 6406                                 0,
34991 8C72                        00            .byte	0
34992                                           ! 6407                          0,
34993 8C73                      0000            .word	0
34994 8C75                      0000            .word	0
34995                                           ! 6408 } },
34996                                           ! 6409 { 0x014c,
34997 8C77                      014C            .word	$14C
34998                                           ! 6410 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34999 8C79                      009B            .word	$9B
35000                                           ! 6411                           0x01 | 0x02 | 0x04,
35001 8C7B                        07            .byte	7
35002                                           ! 6412                           0,
35003 8C7C                        00            .byte	0
35004                                           ! 6413                           64,
35005 8C7D                      0040            .word	$40
35006                                           ! 6414                    64,
35007 8C7F                      0040            .word	$40
35008                                           ! 6415                        0xA000,
35009 8C81                      A000            .word	$A000
35010                                           ! 6416                        0x0000,
35011 8C83                      0000            .word	0
35012                                           ! 6417                       0,
35013 8C85                      0000            .word	0
35014 8C87                      0000            .word	0
35015                                           ! 6418                             4608,
35016 8C89                      1200            .word	$1200
35017                                           ! 6419                        1152,
35018 8C8B                      0480            .word	$480
35019                                           ! 6420                        864,
35020 8C8D                      0360            .word	$360
35021                                           ! 6421                      8,
35022 8C8F                        08            .byte	8
35023                                           ! 6422                      16,
35024 8C90                        10            .byte	$10
35025                                           ! 6423                           1,
35026 8C91                        01            .byte	1
35027                                           ! 6424                         32,
35028 8C92                        20            .byte	$20
35029                                           ! 6425                          61,
35030 8C93                        3D            .byte	$3D
35031                                           ! 6426                        0x06,
35032 8C94                        06            .byte	6
35033                                           ! 6427                     0,
35034 8C95                        00            .byte	0
35035                                           ! 6428                               3,
35036 8C96                        03            .byte	3
35037                                           ! 6429                          0,
35038 8C97                        00            .byte	0
35039                                           ! 6430                        8,
35040 8C98                        08            .byte	8
35041                                           ! 6431                             16,
35042 8C99                        10            .byte	$10
35043                                           ! 6432                          8,
35044 8C9A                        08            .byte	8
35045                                           ! 6433                               8,
35046 8C9B                        08            .byte	8
35047                                           ! 6434                         8,
35048 8C9C                        08            .byte	8
35049                                           ! 6435                              0,
35050 8C9D                        00            .byte	0
35051                                           ! 6436                         8,
35052 8C9E                        08            .byte	8
35053                                           ! 6437                              24,
35054 8C9F                        18            .byte	$18
35055                                           ! 6438                                0x02,
35056 8CA0                        02            .byte	2
35057                                           ! 6439                        0xE0000000,
35058 8CA1                      0000            .word	0
35059 8CA3                      E000            .word	$E000
35060                                           ! 6440                            
35061                                           ! 6440    0,
35062 8CA5                      0000            .word	0
35063 8CA7                      0000            .word	0
35064                                           ! 6441                             0,
35065 8CA9                      0000            .word	0
35066                                           ! 6442                                4608,
35067 8CAB                      1200            .word	$1200
35068                                           ! 6443                             0,
35069 8CAD                        00            .byte	0
35070                                           ! 6444                             0,
35071 8CAE                        00            .byte	0
35072                                           ! 6445                           8,
35073 8CAF                        08            .byte	8
35074                                           ! 6446                                16,
35075 8CB0                        10            .byte	$10
35076                                           ! 6447                             8,
35077 8CB1                        08            .byte	8
35078                                           ! 6448                                  8,
35079 8CB2                        08            .byte	8
35080                                           ! 6449                            8,
35081 8CB3                        08            .byte	8
35082                                           ! 6450                                 0,
35083 8CB4                        00            .byte	0
35084                                           ! 6451                            8,
35085 8CB5                        08            .byte	8
35086                                           ! 6452                                 24,
35087 8CB6                        18            .byte	$18
35088                                           ! 6453                          0,
35089 8CB7                      0000            .word	0
35090 8CB9                      0000            .word	0
35091                                           ! 6454 } },
35092                                           ! 6455 { 0x0175,
35093 8CBB                      0175            .word	$175
35094                                           ! 6456 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35095 8CBD                      009B            .word	$9B
35096                                           ! 6457                           0x01 | 0x02 | 0x04,
35097 8CBF                        07            .byte	7
35098                                           ! 6458                           0,
35099 8CC0                        00            .byte	0
35100                                           ! 6459                           64,
35101 8CC1                      0040            .word	$40
35102                                           ! 6460                    64,
35103 8CC3                      0040            .word	$40
35104                                           ! 6461                        0xA000,
35105 8CC5                      A000            .word	$A000
35106                                           ! 6462                        0x0000,
35107 8CC7                      0000            .word	0
35108                                           ! 6463                       0,
35109 8CC9                      0000            .word	0
35110 8CCB                      0000            .word	0
35111                                           ! 6464                             2560,
35112 8CCD                      0A00            .word	$A00
35113                                           ! 6465                        1280,
35114 8CCF                      0500            .word	$500
35115                                           ! 6466                        768,
35116 8CD1                      0300            .word	$300
35117                                           ! 6467                      8,
35118 8CD3                        08            .byte	8
35119                                           ! 6468                      16,
35120 8CD4                        10            .byte	$10
35121                                           ! 6469                           1,
35122 8CD5                        01            .byte	1
35123                                           ! 6470                         16,
35124 8CD6                        10            .byte	$10
35125                                           ! 6471                          30,
35126 8CD7                        1E            .byte	$1E
35127                                           ! 6472                        0x06,
35128 8CD8                        06            .byte	6
35129                                           ! 6473                     0,
35130 8CD9                        00            .byte	0
35131                                           ! 6474                               7,
35132 8CDA                        07            .byte	7
35133                                           ! 6475                          0,
35134 8CDB                        00            .byte	0
35135                                           ! 6476                        5,
35136 8CDC                        05            .byte	5
35137                                           ! 6477                             11,
35138 8CDD                        0B            .byte	$B
35139                                           ! 6478                          6,
35140 8CDE                        06            .byte	6
35141                                           ! 6479                               5,
35142 8CDF                        05            .byte	5
35143                                           ! 6480                         5,
35144 8CE0                        05            .byte	5
35145                                           ! 6481                              0,
35146 8CE1                        00            .byte	0
35147                                           ! 6482                         0,
35148 8CE2                        00            .byte	0
35149                                           ! 6483                              0,
35150 8CE3                        00            .byte	0
35151                                           ! 6484                                0,
35152 8CE4                        00            .byte	0
35153                                           ! 6485                        0xE0000000,
35154 8CE5                      0000            .word	0
35155 8CE7                      E000            .word	$E000
35156                                           ! 6486                               0,
35157 8CE9                      0000            .word	0
35158 8CEB                      0000            .word	0
35159                                           ! 6487                             0,
35160 8CED                      0000            .word	0
35161                                           ! 6488                                2560,
35162 8CEF                      0A00            .word	$A00
35163                                           ! 6489                             0,
35164 8CF1                        00            .byte	0
35165                                           ! 6490                             0,
35166 8CF2                        00            .byte	0
35167                                           ! 6491                           5,
35168 8CF3                        05            .byte	5
35169                                           ! 6492                                11,
35170 8CF4                        0B            .byte	$B
35171                                           ! 6493                             6,
35172 8CF5                        06            .byte	6
35173                                           ! 6494                                  5,
35174 8CF6                        05            .byte	5
35175                                           ! 6495                            5,
35176 8CF7                        05            .byte	5
35177                                           ! 6496                                 0,
35178 8CF8                        00            .byte	0
35179                                           ! 6497                            0,
35180 8CF9                        00            .byte	0
35181                                           ! 6498                                 0,
35182 8CFA                        00            .byte	0
35183                                           ! 6499                          0,
35184 8CFB                      0000            .word	0
35185 8CFD                      0000            .word	0
35186                                           ! 6500 } },
35187                                           ! 6501 { 0x0176,
35188 8CFF                      0176            .word	$176
35189                                           ! 6502 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35190 8D01                      009B            .word	$9B
35191                                           ! 6503                           0x01 | 0x02 | 0x04,
35192 8D03                        07            .byte	7
35193                                           ! 6504                           0,
35194 8D04                        00            .byte	0
35195                                           ! 6505                           64,
35196 8D05                      0040            .word	$40
35197                                           ! 6506                    64,
35198 8D07                      0040            .word	$40
35199                                           ! 6507                        0xA000,
35200 8D09                      A000            .word	$A000
35201                                           ! 6508                        0x0000
35202                                           ! 6508 ,
35203 8D0B                      0000            .word	0
35204                                           ! 6509                       0,
35205 8D0D                      0000            .word	0
35206 8D0F                      0000            .word	0
35207                                           ! 6510                             3840,
35208 8D11                      0F00            .word	$F00
35209                                           ! 6511                        1280,
35210 8D13                      0500            .word	$500
35211                                           ! 6512                        768,
35212 8D15                      0300            .word	$300
35213                                           ! 6513                      8,
35214 8D17                        08            .byte	8
35215                                           ! 6514                      16,
35216 8D18                        10            .byte	$10
35217                                           ! 6515                           1,
35218 8D19                        01            .byte	1
35219                                           ! 6516                         24,
35220 8D1A                        18            .byte	$18
35221                                           ! 6517                          45,
35222 8D1B                        2D            .byte	$2D
35223                                           ! 6518                        0x06,
35224 8D1C                        06            .byte	6
35225                                           ! 6519                     0,
35226 8D1D                        00            .byte	0
35227                                           ! 6520                               4,
35228 8D1E                        04            .byte	4
35229                                           ! 6521                          0,
35230 8D1F                        00            .byte	0
35231                                           ! 6522                        8,
35232 8D20                        08            .byte	8
35233                                           ! 6523                             16,
35234 8D21                        10            .byte	$10
35235                                           ! 6524                          8,
35236 8D22                        08            .byte	8
35237                                           ! 6525                               8,
35238 8D23                        08            .byte	8
35239                                           ! 6526                         8,
35240 8D24                        08            .byte	8
35241                                           ! 6527                              0,
35242 8D25                        00            .byte	0
35243                                           ! 6528                         0,
35244 8D26                        00            .byte	0
35245                                           ! 6529                              0,
35246 8D27                        00            .byte	0
35247                                           ! 6530                                0,
35248 8D28                        00            .byte	0
35249                                           ! 6531                        0xE0000000,
35250 8D29                      0000            .word	0
35251 8D2B                      E000            .word	$E000
35252                                           ! 6532                               0,
35253 8D2D                      0000            .word	0
35254 8D2F                      0000            .word	0
35255                                           ! 6533                             0,
35256 8D31                      0000            .word	0
35257                                           ! 6534                                3840,
35258 8D33                      0F00            .word	$F00
35259                                           ! 6535                             0,
35260 8D35                        00            .byte	0
35261                                           ! 6536                             0,
35262 8D36                        00            .byte	0
35263                                           ! 6537                           8,
35264 8D37                        08            .byte	8
35265                                           ! 6538                                16,
35266 8D38                        10            .byte	$10
35267                                           ! 6539                             8,
35268 8D39                        08            .byte	8
35269                                           ! 6540                                  8,
35270 8D3A                        08            .byte	8
35271                                           ! 6541                            8,
35272 8D3B                        08            .byte	8
35273                                           ! 6542                                 0,
35274 8D3C                        00            .byte	0
35275                                           ! 6543                            0,
35276 8D3D                        00            .byte	0
35277                                           ! 6544                                 0,
35278 8D3E                        00            .byte	0
35279                                           ! 6545                          0,
35280 8D3F                      0000            .word	0
35281 8D41                      0000            .word	0
35282                                           ! 6546 } },
35283                                           ! 6547 { 0x0177,
35284 8D43                      0177            .word	$177
35285                                           ! 6548 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35286 8D45                      009B            .word	$9B
35287                                           ! 6549                           0x01 | 0x02 | 0x04,
35288 8D47                        07            .byte	7
35289                                           ! 6550                           0,
35290 8D48                        00            .byte	0
35291                                           ! 6551                           64,
35292 8D49                      0040            .word	$40
35293                                           ! 6552                    64,
35294 8D4B                      0040            .word	$40
35295                                           ! 6553                        0xA000,
35296 8D4D                      A000            .word	$A000
35297                                           ! 6554                        0x0000,
35298 8D4F                      0000            .word	0
35299                                           ! 6555                       0,
35300 8D51                      0000            .word	0
35301 8D53                      0000            .word	0
35302                                           ! 6556                             5120,
35303 8D55                      1400            .word	$1400
35304                                           ! 6557                        1280,
35305 8D57                      0500            .word	$500
35306                                           ! 6558                        768,
35307 8D59                      0300            .word	$300
35308                                           ! 6559                      8,
35309 8D5B                        08            .byte	8
35310                                           ! 6560                      16,
35311 8D5C                        10            .byte	$10
35312                                           ! 6561                           1,
35313 8D5D                        01            .byte	1
35314                                           ! 6562                         32,
35315 8D5E                        20            .byte	$20
35316                                           ! 6563                          60,
35317 8D5F                        3C            .byte	$3C
35318                                           ! 6564                        0x06,
35319 8D60                        06            .byte	6
35320                                           ! 6565                     0,
35321 8D61                        00            .byte	0
35322                                           ! 6566                               3,
35323 8D62                        03            .byte	3
35324                                           ! 6567                          0,
35325 8D63                        00            .byte	0
35326                                           ! 6568                        8,
35327 8D64                        08            .byte	8
35328                                           ! 6569                             16,
35329 8D65                        10            .byte	$10
35330                                           ! 6570                          8,
35331 8D66                        08            .byte	8
35332                                           ! 6571                               8,
35333 8D67                        08            .byte	8
35334                                           ! 6572                         8,
35335 8D68                        08            .byte	8
35336                                           ! 6573                              0,
35337 8D69                        00            .byte	0
35338                                           ! 6574                         8,
35339 8D6A                        08            .byte	8
35340                                           ! 6575                              24,
35341 8D6B                        18            .byte	$18
35342                                           ! 6576                                0x02,
35343 8D6C                        02            .byte	2
35344                                           ! 6577                        0xE0000000,
35345                                           ! 6577 
35346 8D6D                      0000            .word	0
35347 8D6F                      E000            .word	$E000
35348                                           ! 6578                               0,
35349 8D71                      0000            .word	0
35350 8D73                      0000            .word	0
35351                                           ! 6579                             0,
35352 8D75                      0000            .word	0
35353                                           ! 6580                                5120,
35354 8D77                      1400            .word	$1400
35355                                           ! 6581                             0,
35356 8D79                        00            .byte	0
35357                                           ! 6582                             0,
35358 8D7A                        00            .byte	0
35359                                           ! 6583                           8,
35360 8D7B                        08            .byte	8
35361                                           ! 6584                                16,
35362 8D7C                        10            .byte	$10
35363                                           ! 6585                             8,
35364 8D7D                        08            .byte	8
35365                                           ! 6586                                  8,
35366 8D7E                        08            .byte	8
35367                                           ! 6587                            8,
35368 8D7F                        08            .byte	8
35369                                           ! 6588                                 0,
35370 8D80                        00            .byte	0
35371                                           ! 6589                            8,
35372 8D81                        08            .byte	8
35373                                           ! 6590                                 24,
35374 8D82                        18            .byte	$18
35375                                           ! 6591                          0,
35376 8D83                      0000            .word	0
35377 8D85                      0000            .word	0
35378                                           ! 6592 } },
35379                                           ! 6593 { 0x0178,
35380 8D87                      0178            .word	$178
35381                                           ! 6594 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35382 8D89                      009B            .word	$9B
35383                                           ! 6595                           0x01 | 0x02 | 0x04,
35384 8D8B                        07            .byte	7
35385                                           ! 6596                           0,
35386 8D8C                        00            .byte	0
35387                                           ! 6597                           64,
35388 8D8D                      0040            .word	$40
35389                                           ! 6598                    64,
35390 8D8F                      0040            .word	$40
35391                                           ! 6599                        0xA000,
35392 8D91                      A000            .word	$A000
35393                                           ! 6600                        0x0000,
35394 8D93                      0000            .word	0
35395                                           ! 6601                       0,
35396 8D95                      0000            .word	0
35397 8D97                      0000            .word	0
35398                                           ! 6602                             2560,
35399 8D99                      0A00            .word	$A00
35400                                           ! 6603                        1280,
35401 8D9B                      0500            .word	$500
35402                                           ! 6604                        800,
35403 8D9D                      0320            .word	$320
35404                                           ! 6605                      8,
35405 8D9F                        08            .byte	8
35406                                           ! 6606                      16,
35407 8DA0                        10            .byte	$10
35408                                           ! 6607                           1,
35409 8DA1                        01            .byte	1
35410                                           ! 6608                         16,
35411 8DA2                        10            .byte	$10
35412                                           ! 6609                          32,
35413 8DA3                        20            .byte	$20
35414                                           ! 6610                        0x06,
35415 8DA4                        06            .byte	6
35416                                           ! 6611                     0,
35417 8DA5                        00            .byte	0
35418                                           ! 6612                               7,
35419 8DA6                        07            .byte	7
35420                                           ! 6613                          0,
35421 8DA7                        00            .byte	0
35422                                           ! 6614                        5,
35423 8DA8                        05            .byte	5
35424                                           ! 6615                             11,
35425 8DA9                        0B            .byte	$B
35426                                           ! 6616                          6,
35427 8DAA                        06            .byte	6
35428                                           ! 6617                               5,
35429 8DAB                        05            .byte	5
35430                                           ! 6618                         5,
35431 8DAC                        05            .byte	5
35432                                           ! 6619                              0,
35433 8DAD                        00            .byte	0
35434                                           ! 6620                         0,
35435 8DAE                        00            .byte	0
35436                                           ! 6621                              0,
35437 8DAF                        00            .byte	0
35438                                           ! 6622                                0,
35439 8DB0                        00            .byte	0
35440                                           ! 6623                        0xE0000000,
35441 8DB1                      0000            .word	0
35442 8DB3                      E000            .word	$E000
35443                                           ! 6624                               0,
35444 8DB5                      0000            .word	0
35445 8DB7                      0000            .word	0
35446                                           ! 6625                             0,
35447 8DB9                      0000            .word	0
35448                                           ! 6626                                2560,
35449 8DBB                      0A00            .word	$A00
35450                                           ! 6627                             0,
35451 8DBD                        00            .byte	0
35452                                           ! 6628                             0,
35453 8DBE                        00            .byte	0
35454                                           ! 6629                           5,
35455 8DBF                        05            .byte	5
35456                                           ! 6630                                11,
35457 8DC0                        0B            .byte	$B
35458                                           ! 6631                             6,
35459 8DC1                        06            .byte	6
35460                                           ! 6632                                  5,
35461 8DC2                        05            .byte	5
35462                                           ! 6633                            5,
35463 8DC3                        05            .byte	5
35464                                           ! 6634                                 0,
35465 8DC4                        00            .byte	0
35466                                           ! 6635                            0,
35467 8DC5                        00            .byte	0
35468                                           ! 6636                                 0,
35469 8DC6                        00            .byte	0
35470                                           ! 6637                          0,
35471 8DC7                      0000            .word	0
35472 8DC9                      0000            .word	0
35473                                           ! 6638 } },
35474                                           ! 6639 { 0x0179,
35475 8DCB                      0179            .word	$179
35476                                           ! 6640 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35477 8DCD                      009B            .word	$9B
35478                                           ! 6641                           0x01 | 0x02 | 0x04,
35479 8DCF                        07            .byte	7
35480                                           ! 6642                           0,
35481 8DD0                        00            .byte	0
35482                                           ! 6643                           64,
35483 8DD1                      0040            .word	$40
35484                                           ! 6644                    64,
35485 8DD3                      0040            .word	$40
35486                                           ! 6645                        0xA000,
35487 8DD5                      A000            .word	$A000
35488                                           ! 6646  
35489                                           ! 6646                       0x0000,
35490 8DD7                      0000            .word	0
35491                                           ! 6647                       0,
35492 8DD9                      0000            .word	0
35493 8DDB                      0000            .word	0
35494                                           ! 6648                             3840,
35495 8DDD                      0F00            .word	$F00
35496                                           ! 6649                        1280,
35497 8DDF                      0500            .word	$500
35498                                           ! 6650                        800,
35499 8DE1                      0320            .word	$320
35500                                           ! 6651                      8,
35501 8DE3                        08            .byte	8
35502                                           ! 6652                      16,
35503 8DE4                        10            .byte	$10
35504                                           ! 6653                           1,
35505 8DE5                        01            .byte	1
35506                                           ! 6654                         24,
35507 8DE6                        18            .byte	$18
35508                                           ! 6655                          47,
35509 8DE7                        2F            .byte	$2F
35510                                           ! 6656                        0x06,
35511 8DE8                        06            .byte	6
35512                                           ! 6657                     0,
35513 8DE9                        00            .byte	0
35514                                           ! 6658                               4,
35515 8DEA                        04            .byte	4
35516                                           ! 6659                          0,
35517 8DEB                        00            .byte	0
35518                                           ! 6660                        8,
35519 8DEC                        08            .byte	8
35520                                           ! 6661                             16,
35521 8DED                        10            .byte	$10
35522                                           ! 6662                          8,
35523 8DEE                        08            .byte	8
35524                                           ! 6663                               8,
35525 8DEF                        08            .byte	8
35526                                           ! 6664                         8,
35527 8DF0                        08            .byte	8
35528                                           ! 6665                              0,
35529 8DF1                        00            .byte	0
35530                                           ! 6666                         0,
35531 8DF2                        00            .byte	0
35532                                           ! 6667                              0,
35533 8DF3                        00            .byte	0
35534                                           ! 6668                                0,
35535 8DF4                        00            .byte	0
35536                                           ! 6669                        0xE0000000,
35537 8DF5                      0000            .word	0
35538 8DF7                      E000            .word	$E000
35539                                           ! 6670                               0,
35540 8DF9                      0000            .word	0
35541 8DFB                      0000            .word	0
35542                                           ! 6671                             0,
35543 8DFD                      0000            .word	0
35544                                           ! 6672                                3840,
35545 8DFF                      0F00            .word	$F00
35546                                           ! 6673                             0,
35547 8E01                        00            .byte	0
35548                                           ! 6674                             0,
35549 8E02                        00            .byte	0
35550                                           ! 6675                           8,
35551 8E03                        08            .byte	8
35552                                           ! 6676                                16,
35553 8E04                        10            .byte	$10
35554                                           ! 6677                             8,
35555 8E05                        08            .byte	8
35556                                           ! 6678                                  8,
35557 8E06                        08            .byte	8
35558                                           ! 6679                            8,
35559 8E07                        08            .byte	8
35560                                           ! 6680                                 0,
35561 8E08                        00            .byte	0
35562                                           ! 6681                            0,
35563 8E09                        00            .byte	0
35564                                           ! 6682                                 0,
35565 8E0A                        00            .byte	0
35566                                           ! 6683                          0,
35567 8E0B                      0000            .word	0
35568 8E0D                      0000            .word	0
35569                                           ! 6684 } },
35570                                           ! 6685 { 0x017a,
35571 8E0F                      017A            .word	$17A
35572                                           ! 6686 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35573 8E11                      009B            .word	$9B
35574                                           ! 6687                           0x01 | 0x02 | 0x04,
35575 8E13                        07            .byte	7
35576                                           ! 6688                           0,
35577 8E14                        00            .byte	0
35578                                           ! 6689                           64,
35579 8E15                      0040            .word	$40
35580                                           ! 6690                    64,
35581 8E17                      0040            .word	$40
35582                                           ! 6691                        0xA000,
35583 8E19                      A000            .word	$A000
35584                                           ! 6692                        0x0000,
35585 8E1B                      0000            .word	0
35586                                           ! 6693                       0,
35587 8E1D                      0000            .word	0
35588 8E1F                      0000            .word	0
35589                                           ! 6694                             5120,
35590 8E21                      1400            .word	$1400
35591                                           ! 6695                        1280,
35592 8E23                      0500            .word	$500
35593                                           ! 6696                        800,
35594 8E25                      0320            .word	$320
35595                                           ! 6697                      8,
35596 8E27                        08            .byte	8
35597                                           ! 6698                      16,
35598 8E28                        10            .byte	$10
35599                                           ! 6699                           1,
35600 8E29                        01            .byte	1
35601                                           ! 6700                         32,
35602 8E2A                        20            .byte	$20
35603                                           ! 6701                          63,
35604 8E2B                        3F            .byte	$3F
35605                                           ! 6702                        0x06,
35606 8E2C                        06            .byte	6
35607                                           ! 6703                     0,
35608 8E2D                        00            .byte	0
35609                                           ! 6704                               3,
35610 8E2E                        03            .byte	3
35611                                           ! 6705                          0,
35612 8E2F                        00            .byte	0
35613                                           ! 6706                        8,
35614 8E30                        08            .byte	8
35615                                           ! 6707                             16,
35616 8E31                        10            .byte	$10
35617                                           ! 6708                          8,
35618 8E32                        08            .byte	8
35619                                           ! 6709                               8,
35620 8E33                        08            .byte	8
35621                                           ! 6710                         8,
35622 8E34                        08            .byte	8
35623                                           ! 6711                              0,
35624 8E35                        00            .byte	0
35625                                           ! 6712                         8,
35626 8E36                        08            .byte	8
35627                                           ! 6713                              24,
35628 8E37                        18            .byte	$18
35629                                           ! 6714                                0x02,
35630 8E38                        02            .byte	2
35631                                           ! 6715       
35632                                           ! 6715                  0xE0000000,
35633 8E39                      0000            .word	0
35634 8E3B                      E000            .word	$E000
35635                                           ! 6716                               0,
35636 8E3D                      0000            .word	0
35637 8E3F                      0000            .word	0
35638                                           ! 6717                             0,
35639 8E41                      0000            .word	0
35640                                           ! 6718                                5120,
35641 8E43                      1400            .word	$1400
35642                                           ! 6719                             0,
35643 8E45                        00            .byte	0
35644                                           ! 6720                             0,
35645 8E46                        00            .byte	0
35646                                           ! 6721                           8,
35647 8E47                        08            .byte	8
35648                                           ! 6722                                16,
35649 8E48                        10            .byte	$10
35650                                           ! 6723                             8,
35651 8E49                        08            .byte	8
35652                                           ! 6724                                  8,
35653 8E4A                        08            .byte	8
35654                                           ! 6725                            8,
35655 8E4B                        08            .byte	8
35656                                           ! 6726                                 0,
35657 8E4C                        00            .byte	0
35658                                           ! 6727                            8,
35659 8E4D                        08            .byte	8
35660                                           ! 6728                                 24,
35661 8E4E                        18            .byte	$18
35662                                           ! 6729                          0,
35663 8E4F                      0000            .word	0
35664 8E51                      0000            .word	0
35665                                           ! 6730 } },
35666                                           ! 6731 { 0x017b,
35667 8E53                      017B            .word	$17B
35668                                           ! 6732 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35669 8E55                      009B            .word	$9B
35670                                           ! 6733                           0x01 | 0x02 | 0x04,
35671 8E57                        07            .byte	7
35672                                           ! 6734                           0,
35673 8E58                        00            .byte	0
35674                                           ! 6735                           64,
35675 8E59                      0040            .word	$40
35676                                           ! 6736                    64,
35677 8E5B                      0040            .word	$40
35678                                           ! 6737                        0xA000,
35679 8E5D                      A000            .word	$A000
35680                                           ! 6738                        0x0000,
35681 8E5F                      0000            .word	0
35682                                           ! 6739                       0,
35683 8E61                      0000            .word	0
35684 8E63                      0000            .word	0
35685                                           ! 6740                             2560,
35686 8E65                      0A00            .word	$A00
35687                                           ! 6741                        1280,
35688 8E67                      0500            .word	$500
35689                                           ! 6742                        960,
35690 8E69                      03C0            .word	$3C0
35691                                           ! 6743                      8,
35692 8E6B                        08            .byte	8
35693                                           ! 6744                      16,
35694 8E6C                        10            .byte	$10
35695                                           ! 6745                           1,
35696 8E6D                        01            .byte	1
35697                                           ! 6746                         16,
35698 8E6E                        10            .byte	$10
35699                                           ! 6747                          38,
35700 8E6F                        26            .byte	$26
35701                                           ! 6748                        0x06,
35702 8E70                        06            .byte	6
35703                                           ! 6749                     0,
35704 8E71                        00            .byte	0
35705                                           ! 6750                               5,
35706 8E72                        05            .byte	5
35707                                           ! 6751                          0,
35708 8E73                        00            .byte	0
35709                                           ! 6752                        5,
35710 8E74                        05            .byte	5
35711                                           ! 6753                             11,
35712 8E75                        0B            .byte	$B
35713                                           ! 6754                          6,
35714 8E76                        06            .byte	6
35715                                           ! 6755                               5,
35716 8E77                        05            .byte	5
35717                                           ! 6756                         5,
35718 8E78                        05            .byte	5
35719                                           ! 6757                              0,
35720 8E79                        00            .byte	0
35721                                           ! 6758                         0,
35722 8E7A                        00            .byte	0
35723                                           ! 6759                              0,
35724 8E7B                        00            .byte	0
35725                                           ! 6760                                0,
35726 8E7C                        00            .byte	0
35727                                           ! 6761                        0xE0000000,
35728 8E7D                      0000            .word	0
35729 8E7F                      E000            .word	$E000
35730                                           ! 6762                               0,
35731 8E81                      0000            .word	0
35732 8E83                      0000            .word	0
35733                                           ! 6763                             0,
35734 8E85                      0000            .word	0
35735                                           ! 6764                                2560,
35736 8E87                      0A00            .word	$A00
35737                                           ! 6765                             0,
35738 8E89                        00            .byte	0
35739                                           ! 6766                             0,
35740 8E8A                        00            .byte	0
35741                                           ! 6767                           5,
35742 8E8B                        05            .byte	5
35743                                           ! 6768                                11,
35744 8E8C                        0B            .byte	$B
35745                                           ! 6769                             6,
35746 8E8D                        06            .byte	6
35747                                           ! 6770                                  5,
35748 8E8E                        05            .byte	5
35749                                           ! 6771                            5,
35750 8E8F                        05            .byte	5
35751                                           ! 6772                                 0,
35752 8E90                        00            .byte	0
35753                                           ! 6773                            0,
35754 8E91                        00            .byte	0
35755                                           ! 6774                                 0,
35756 8E92                        00            .byte	0
35757                                           ! 6775                          0,
35758 8E93                      0000            .word	0
35759 8E95                      0000            .word	0
35760                                           ! 6776 } },
35761                                           ! 6777 { 0x017c,
35762 8E97                      017C            .word	$17C
35763                                           ! 6778 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35764 8E99                      009B            .word	$9B
35765                                           ! 6779                           0x01 | 0x02 | 0x04,
35766 8E9B                        07            .byte	7
35767                                           ! 6780                           0,
35768 8E9C                        00            .byte	0
35769                                           ! 6781                           64,
35770 8E9D                      0040            .word	$40
35771                                           ! 6782                    64,
35772 8E9F                      0040            .word	$40
35773                                           ! 6783     
35774                                           ! 6783                    0xA000,
35775 8EA1                      A000            .word	$A000
35776                                           ! 6784                        0x0000,
35777 8EA3                      0000            .word	0
35778                                           ! 6785                       0,
35779 8EA5                      0000            .word	0
35780 8EA7                      0000            .word	0
35781                                           ! 6786                             3840,
35782 8EA9                      0F00            .word	$F00
35783                                           ! 6787                        1280,
35784 8EAB                      0500            .word	$500
35785                                           ! 6788                        960,
35786 8EAD                      03C0            .word	$3C0
35787                                           ! 6789                      8,
35788 8EAF                        08            .byte	8
35789                                           ! 6790                      16,
35790 8EB0                        10            .byte	$10
35791                                           ! 6791                           1,
35792 8EB1                        01            .byte	1
35793                                           ! 6792                         24,
35794 8EB2                        18            .byte	$18
35795                                           ! 6793                          57,
35796 8EB3                        39            .byte	$39
35797                                           ! 6794                        0x06,
35798 8EB4                        06            .byte	6
35799                                           ! 6795                     0,
35800 8EB5                        00            .byte	0
35801                                           ! 6796                               3,
35802 8EB6                        03            .byte	3
35803                                           ! 6797                          0,
35804 8EB7                        00            .byte	0
35805                                           ! 6798                        8,
35806 8EB8                        08            .byte	8
35807                                           ! 6799                             16,
35808 8EB9                        10            .byte	$10
35809                                           ! 6800                          8,
35810 8EBA                        08            .byte	8
35811                                           ! 6801                               8,
35812 8EBB                        08            .byte	8
35813                                           ! 6802                         8,
35814 8EBC                        08            .byte	8
35815                                           ! 6803                              0,
35816 8EBD                        00            .byte	0
35817                                           ! 6804                         0,
35818 8EBE                        00            .byte	0
35819                                           ! 6805                              0,
35820 8EBF                        00            .byte	0
35821                                           ! 6806                                0,
35822 8EC0                        00            .byte	0
35823                                           ! 6807                        0xE0000000,
35824 8EC1                      0000            .word	0
35825 8EC3                      E000            .word	$E000
35826                                           ! 6808                               0,
35827 8EC5                      0000            .word	0
35828 8EC7                      0000            .word	0
35829                                           ! 6809                             0,
35830 8EC9                      0000            .word	0
35831                                           ! 6810                                3840,
35832 8ECB                      0F00            .word	$F00
35833                                           ! 6811                             0,
35834 8ECD                        00            .byte	0
35835                                           ! 6812                             0,
35836 8ECE                        00            .byte	0
35837                                           ! 6813                           8,
35838 8ECF                        08            .byte	8
35839                                           ! 6814                                16,
35840 8ED0                        10            .byte	$10
35841                                           ! 6815                             8,
35842 8ED1                        08            .byte	8
35843                                           ! 6816                                  8,
35844 8ED2                        08            .byte	8
35845                                           ! 6817                            8,
35846 8ED3                        08            .byte	8
35847                                           ! 6818                                 0,
35848 8ED4                        00            .byte	0
35849                                           ! 6819                            0,
35850 8ED5                        00            .byte	0
35851                                           ! 6820                                 0,
35852 8ED6                        00            .byte	0
35853                                           ! 6821                          0,
35854 8ED7                      0000            .word	0
35855 8ED9                      0000            .word	0
35856                                           ! 6822 } },
35857                                           ! 6823 { 0x017d,
35858 8EDB                      017D            .word	$17D
35859                                           ! 6824 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35860 8EDD                      009B            .word	$9B
35861                                           ! 6825                           0x01 | 0x02 | 0x04,
35862 8EDF                        07            .byte	7
35863                                           ! 6826                           0,
35864 8EE0                        00            .byte	0
35865                                           ! 6827                           64,
35866 8EE1                      0040            .word	$40
35867                                           ! 6828                    64,
35868 8EE3                      0040            .word	$40
35869                                           ! 6829                        0xA000,
35870 8EE5                      A000            .word	$A000
35871                                           ! 6830                        0x0000,
35872 8EE7                      0000            .word	0
35873                                           ! 6831                       0,
35874 8EE9                      0000            .word	0
35875 8EEB                      0000            .word	0
35876                                           ! 6832                             5120,
35877 8EED                      1400            .word	$1400
35878                                           ! 6833                        1280,
35879 8EEF                      0500            .word	$500
35880                                           ! 6834                        960,
35881 8EF1                      03C0            .word	$3C0
35882                                           ! 6835                      8,
35883 8EF3                        08            .byte	8
35884                                           ! 6836                      16,
35885 8EF4                        10            .byte	$10
35886                                           ! 6837                           1,
35887 8EF5                        01            .byte	1
35888                                           ! 6838                         32,
35889 8EF6                        20            .byte	$20
35890                                           ! 6839                          75,
35891 8EF7                        4B            .byte	$4B
35892                                           ! 6840                        0x06,
35893 8EF8                        06            .byte	6
35894                                           ! 6841                     0,
35895 8EF9                        00            .byte	0
35896                                           ! 6842                               2,
35897 8EFA                        02            .byte	2
35898                                           ! 6843                          0,
35899 8EFB                        00            .byte	0
35900                                           ! 6844                        8,
35901 8EFC                        08            .byte	8
35902                                           ! 6845                             16,
35903 8EFD                        10            .byte	$10
35904                                           ! 6846                          8,
35905 8EFE                        08            .byte	8
35906                                           ! 6847                               8,
35907 8EFF                        08            .byte	8
35908                                           ! 6848                         8,
35909 8F00                        08            .byte	8
35910                                           ! 6849                              0,
35911 8F01                        00            .byte	0
35912                                           ! 6850                         8,
35913 8F02                        08            .byte	8
35914                                           ! 6851                              24,
35915 8F03                        18            .byte	$18
35916                                           ! 6852                
35917                                           ! 6852                 0x02,
35918 8F04                        02            .byte	2
35919                                           ! 6853                        0xE0000000,
35920 8F05                      0000            .word	0
35921 8F07                      E000            .word	$E000
35922                                           ! 6854                               0,
35923 8F09                      0000            .word	0
35924 8F0B                      0000            .word	0
35925                                           ! 6855                             0,
35926 8F0D                      0000            .word	0
35927                                           ! 6856                                5120,
35928 8F0F                      1400            .word	$1400
35929                                           ! 6857                             0,
35930 8F11                        00            .byte	0
35931                                           ! 6858                             0,
35932 8F12                        00            .byte	0
35933                                           ! 6859                           8,
35934 8F13                        08            .byte	8
35935                                           ! 6860                                16,
35936 8F14                        10            .byte	$10
35937                                           ! 6861                             8,
35938 8F15                        08            .byte	8
35939                                           ! 6862                                  8,
35940 8F16                        08            .byte	8
35941                                           ! 6863                            8,
35942 8F17                        08            .byte	8
35943                                           ! 6864                                 0,
35944 8F18                        00            .byte	0
35945                                           ! 6865                            8,
35946 8F19                        08            .byte	8
35947                                           ! 6866                                 24,
35948 8F1A                        18            .byte	$18
35949                                           ! 6867                          0,
35950 8F1B                      0000            .word	0
35951 8F1D                      0000            .word	0
35952                                           ! 6868 } },
35953                                           ! 6869 { 0x017e,
35954 8F1F                      017E            .word	$17E
35955                                           ! 6870 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35956 8F21                      009B            .word	$9B
35957                                           ! 6871                           0x01 | 0x02 | 0x04,
35958 8F23                        07            .byte	7
35959                                           ! 6872                           0,
35960 8F24                        00            .byte	0
35961                                           ! 6873                           64,
35962 8F25                      0040            .word	$40
35963                                           ! 6874                    64,
35964 8F27                      0040            .word	$40
35965                                           ! 6875                        0xA000,
35966 8F29                      A000            .word	$A000
35967                                           ! 6876                        0x0000,
35968 8F2B                      0000            .word	0
35969                                           ! 6877                       0,
35970 8F2D                      0000            .word	0
35971 8F2F                      0000            .word	0
35972                                           ! 6878                             2880,
35973 8F31                      0B40            .word	$B40
35974                                           ! 6879                        1440,
35975 8F33                      05A0            .word	$5A0
35976                                           ! 6880                        900,
35977 8F35                      0384            .word	$384
35978                                           ! 6881                      8,
35979 8F37                        08            .byte	8
35980                                           ! 6882                      16,
35981 8F38                        10            .byte	$10
35982                                           ! 6883                           1,
35983 8F39                        01            .byte	1
35984                                           ! 6884                         16,
35985 8F3A                        10            .byte	$10
35986                                           ! 6885                          40,
35987 8F3B                        28            .byte	$28
35988                                           ! 6886                        0x06,
35989 8F3C                        06            .byte	6
35990                                           ! 6887                     0,
35991 8F3D                        00            .byte	0
35992                                           ! 6888                               5,
35993 8F3E                        05            .byte	5
35994                                           ! 6889                          0,
35995 8F3F                        00            .byte	0
35996                                           ! 6890                        5,
35997 8F40                        05            .byte	5
35998                                           ! 6891                             11,
35999 8F41                        0B            .byte	$B
36000                                           ! 6892                          6,
36001 8F42                        06            .byte	6
36002                                           ! 6893                               5,
36003 8F43                        05            .byte	5
36004                                           ! 6894                         5,
36005 8F44                        05            .byte	5
36006                                           ! 6895                              0,
36007 8F45                        00            .byte	0
36008                                           ! 6896                         0,
36009 8F46                        00            .byte	0
36010                                           ! 6897                              0,
36011 8F47                        00            .byte	0
36012                                           ! 6898                                0,
36013 8F48                        00            .byte	0
36014                                           ! 6899                        0xE0000000,
36015 8F49                      0000            .word	0
36016 8F4B                      E000            .word	$E000
36017                                           ! 6900                               0,
36018 8F4D                      0000            .word	0
36019 8F4F                      0000            .word	0
36020                                           ! 6901                             0,
36021 8F51                      0000            .word	0
36022                                           ! 6902                                2880,
36023 8F53                      0B40            .word	$B40
36024                                           ! 6903                             0,
36025 8F55                        00            .byte	0
36026                                           ! 6904                             0,
36027 8F56                        00            .byte	0
36028                                           ! 6905                           5,
36029 8F57                        05            .byte	5
36030                                           ! 6906                                11,
36031 8F58                        0B            .byte	$B
36032                                           ! 6907                             6,
36033 8F59                        06            .byte	6
36034                                           ! 6908                                  5,
36035 8F5A                        05            .byte	5
36036                                           ! 6909                            5,
36037 8F5B                        05            .byte	5
36038                                           ! 6910                                 0,
36039 8F5C                        00            .byte	0
36040                                           ! 6911                            0,
36041 8F5D                        00            .byte	0
36042                                           ! 6912                                 0,
36043 8F5E                        00            .byte	0
36044                                           ! 6913                          0,
36045 8F5F                      0000            .word	0
36046 8F61                      0000            .word	0
36047                                           ! 6914 } },
36048                                           ! 6915 { 0x017f,
36049 8F63                      017F            .word	$17F
36050                                           ! 6916 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36051 8F65                      009B            .word	$9B
36052                                           ! 6917                           0x01 | 0x02 | 0x04,
36053 8F67                        07            .byte	7
36054                                           ! 6918                           0,
36055 8F68                        00            .byte	0
36056                                           ! 6919                           64,
36057                                           ! 6919 
36058 8F69                      0040            .word	$40
36059                                           ! 6920                    64,
36060 8F6B                      0040            .word	$40
36061                                           ! 6921                        0xA000,
36062 8F6D                      A000            .word	$A000
36063                                           ! 6922                        0x0000,
36064 8F6F                      0000            .word	0
36065                                           ! 6923                       0,
36066 8F71                      0000            .word	0
36067 8F73                      0000            .word	0
36068                                           ! 6924                             4320,
36069 8F75                      10E0            .word	$10E0
36070                                           ! 6925                        1440,
36071 8F77                      05A0            .word	$5A0
36072                                           ! 6926                        900,
36073 8F79                      0384            .word	$384
36074                                           ! 6927                      8,
36075 8F7B                        08            .byte	8
36076                                           ! 6928                      16,
36077 8F7C                        10            .byte	$10
36078                                           ! 6929                           1,
36079 8F7D                        01            .byte	1
36080                                           ! 6930                         24,
36081 8F7E                        18            .byte	$18
36082                                           ! 6931                          60,
36083 8F7F                        3C            .byte	$3C
36084                                           ! 6932                        0x06,
36085 8F80                        06            .byte	6
36086                                           ! 6933                     0,
36087 8F81                        00            .byte	0
36088                                           ! 6934                               3,
36089 8F82                        03            .byte	3
36090                                           ! 6935                          0,
36091 8F83                        00            .byte	0
36092                                           ! 6936                        8,
36093 8F84                        08            .byte	8
36094                                           ! 6937                             16,
36095 8F85                        10            .byte	$10
36096                                           ! 6938                          8,
36097 8F86                        08            .byte	8
36098                                           ! 6939                               8,
36099 8F87                        08            .byte	8
36100                                           ! 6940                         8,
36101 8F88                        08            .byte	8
36102                                           ! 6941                              0,
36103 8F89                        00            .byte	0
36104                                           ! 6942                         0,
36105 8F8A                        00            .byte	0
36106                                           ! 6943                              0,
36107 8F8B                        00            .byte	0
36108                                           ! 6944                                0,
36109 8F8C                        00            .byte	0
36110                                           ! 6945                        0xE0000000,
36111 8F8D                      0000            .word	0
36112 8F8F                      E000            .word	$E000
36113                                           ! 6946                               0,
36114 8F91                      0000            .word	0
36115 8F93                      0000            .word	0
36116                                           ! 6947                             0,
36117 8F95                      0000            .word	0
36118                                           ! 6948                                4320,
36119 8F97                      10E0            .word	$10E0
36120                                           ! 6949                             0,
36121 8F99                        00            .byte	0
36122                                           ! 6950                             0,
36123 8F9A                        00            .byte	0
36124                                           ! 6951                           8,
36125 8F9B                        08            .byte	8
36126                                           ! 6952                                16,
36127 8F9C                        10            .byte	$10
36128                                           ! 6953                             8,
36129 8F9D                        08            .byte	8
36130                                           ! 6954                                  8,
36131 8F9E                        08            .byte	8
36132                                           ! 6955                            8,
36133 8F9F                        08            .byte	8
36134                                           ! 6956                                 0,
36135 8FA0                        00            .byte	0
36136                                           ! 6957                            0,
36137 8FA1                        00            .byte	0
36138                                           ! 6958                                 0,
36139 8FA2                        00            .byte	0
36140                                           ! 6959                          0,
36141 8FA3                      0000            .word	0
36142 8FA5                      0000            .word	0
36143                                           ! 6960 } },
36144                                           ! 6961 { 0x0180,
36145 8FA7                      0180            .word	$180
36146                                           ! 6962 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36147 8FA9                      009B            .word	$9B
36148                                           ! 6963                           0x01 | 0x02 | 0x04,
36149 8FAB                        07            .byte	7
36150                                           ! 6964                           0,
36151 8FAC                        00            .byte	0
36152                                           ! 6965                           64,
36153 8FAD                      0040            .word	$40
36154                                           ! 6966                    64,
36155 8FAF                      0040            .word	$40
36156                                           ! 6967                        0xA000,
36157 8FB1                      A000            .word	$A000
36158                                           ! 6968                        0x0000,
36159 8FB3                      0000            .word	0
36160                                           ! 6969                       0,
36161 8FB5                      0000            .word	0
36162 8FB7                      0000            .word	0
36163                                           ! 6970                             5760,
36164 8FB9                      1680            .word	$1680
36165                                           ! 6971                        1440,
36166 8FBB                      05A0            .word	$5A0
36167                                           ! 6972                        900,
36168 8FBD                      0384            .word	$384
36169                                           ! 6973                      8,
36170 8FBF                        08            .byte	8
36171                                           ! 6974                      16,
36172 8FC0                        10            .byte	$10
36173                                           ! 6975                           1,
36174 8FC1                        01            .byte	1
36175                                           ! 6976                         32,
36176 8FC2                        20            .byte	$20
36177                                           ! 6977                          80,
36178 8FC3                        50            .byte	$50
36179                                           ! 6978                        0x06,
36180 8FC4                        06            .byte	6
36181                                           ! 6979                     0,
36182 8FC5                        00            .byte	0
36183                                           ! 6980                               2,
36184 8FC6                        02            .byte	2
36185                                           ! 6981                          0,
36186 8FC7                        00            .byte	0
36187                                           ! 6982                        8,
36188 8FC8                        08            .byte	8
36189                                           ! 6983                             16,
36190 8FC9                        10            .byte	$10
36191                                           ! 6984                          8,
36192 8FCA                        08            .byte	8
36193                                           ! 6985                               8,
36194 8FCB                        08            .byte	8
36195                                           ! 6986                         8,
36196 8FCC                        08            .byte	8
36197                                           ! 6987                              0,
36198 8FCD                        00            .byte	0
36199                                           ! 6988                         8,
36200 8FCE                        08            .byte	8
36201                                           ! 6989                     
36202                                           ! 6989          24,
36203 8FCF                        18            .byte	$18
36204                                           ! 6990                                0x02,
36205 8FD0                        02            .byte	2
36206                                           ! 6991                        0xE0000000,
36207 8FD1                      0000            .word	0
36208 8FD3                      E000            .word	$E000
36209                                           ! 6992                               0,
36210 8FD5                      0000            .word	0
36211 8FD7                      0000            .word	0
36212                                           ! 6993                             0,
36213 8FD9                      0000            .word	0
36214                                           ! 6994                                5760,
36215 8FDB                      1680            .word	$1680
36216                                           ! 6995                             0,
36217 8FDD                        00            .byte	0
36218                                           ! 6996                             0,
36219 8FDE                        00            .byte	0
36220                                           ! 6997                           8,
36221 8FDF                        08            .byte	8
36222                                           ! 6998                                16,
36223 8FE0                        10            .byte	$10
36224                                           ! 6999                             8,
36225 8FE1                        08            .byte	8
36226                                           ! 7000                                  8,
36227 8FE2                        08            .byte	8
36228                                           ! 7001                            8,
36229 8FE3                        08            .byte	8
36230                                           ! 7002                                 0,
36231 8FE4                        00            .byte	0
36232                                           ! 7003                            8,
36233 8FE5                        08            .byte	8
36234                                           ! 7004                                 24,
36235 8FE6                        18            .byte	$18
36236                                           ! 7005                          0,
36237 8FE7                      0000            .word	0
36238 8FE9                      0000            .word	0
36239                                           ! 7006 } },
36240                                           ! 7007 { 0x0181,
36241 8FEB                      0181            .word	$181
36242                                           ! 7008 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36243 8FED                      009B            .word	$9B
36244                                           ! 7009                           0x01 | 0x02 | 0x04,
36245 8FEF                        07            .byte	7
36246                                           ! 7010                           0,
36247 8FF0                        00            .byte	0
36248                                           ! 7011                           64,
36249 8FF1                      0040            .word	$40
36250                                           ! 7012                    64,
36251 8FF3                      0040            .word	$40
36252                                           ! 7013                        0xA000,
36253 8FF5                      A000            .word	$A000
36254                                           ! 7014                        0x0000,
36255 8FF7                      0000            .word	0
36256                                           ! 7015                       0,
36257 8FF9                      0000            .word	0
36258 8FFB                      0000            .word	0
36259                                           ! 7016                             2800,
36260 8FFD                      0AF0            .word	$AF0
36261                                           ! 7017                        1400,
36262 8FFF                      0578            .word	$578
36263                                           ! 7018                        1050,
36264 9001                      041A            .word	$41A
36265                                           ! 7019                      8,
36266 9003                        08            .byte	8
36267                                           ! 7020                      16,
36268 9004                        10            .byte	$10
36269                                           ! 7021                           1,
36270 9005                        01            .byte	1
36271                                           ! 7022                         16,
36272 9006                        10            .byte	$10
36273                                           ! 7023                          45,
36274 9007                        2D            .byte	$2D
36275                                           ! 7024                        0x06,
36276 9008                        06            .byte	6
36277                                           ! 7025                     0,
36278 9009                        00            .byte	0
36279                                           ! 7026                               4,
36280 900A                        04            .byte	4
36281                                           ! 7027                          0,
36282 900B                        00            .byte	0
36283                                           ! 7028                        5,
36284 900C                        05            .byte	5
36285                                           ! 7029                             11,
36286 900D                        0B            .byte	$B
36287                                           ! 7030                          6,
36288 900E                        06            .byte	6
36289                                           ! 7031                               5,
36290 900F                        05            .byte	5
36291                                           ! 7032                         5,
36292 9010                        05            .byte	5
36293                                           ! 7033                              0,
36294 9011                        00            .byte	0
36295                                           ! 7034                         0,
36296 9012                        00            .byte	0
36297                                           ! 7035                              0,
36298 9013                        00            .byte	0
36299                                           ! 7036                                0,
36300 9014                        00            .byte	0
36301                                           ! 7037                        0xE0000000,
36302 9015                      0000            .word	0
36303 9017                      E000            .word	$E000
36304                                           ! 7038                               0,
36305 9019                      0000            .word	0
36306 901B                      0000            .word	0
36307                                           ! 7039                             0,
36308 901D                      0000            .word	0
36309                                           ! 7040                                2800,
36310 901F                      0AF0            .word	$AF0
36311                                           ! 7041                             0,
36312 9021                        00            .byte	0
36313                                           ! 7042                             0,
36314 9022                        00            .byte	0
36315                                           ! 7043                           5,
36316 9023                        05            .byte	5
36317                                           ! 7044                                11,
36318 9024                        0B            .byte	$B
36319                                           ! 7045                             6,
36320 9025                        06            .byte	6
36321                                           ! 7046                                  5,
36322 9026                        05            .byte	5
36323                                           ! 7047                            5,
36324 9027                        05            .byte	5
36325                                           ! 7048                                 0,
36326 9028                        00            .byte	0
36327                                           ! 7049                            0,
36328 9029                        00            .byte	0
36329                                           ! 7050                                 0,
36330 902A                        00            .byte	0
36331                                           ! 7051                          0,
36332 902B                      0000            .word	0
36333 902D                      0000            .word	0
36334                                           ! 7052 } },
36335                                           ! 7053 { 0x0182,
36336 902F                      0182            .word	$182
36337                                           ! 7054 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36338 9031                      009B            .word	$9B
36339                                           ! 7055                           0x01 | 0x02 | 0x04,
36340 9033                        07            .byte	7
36341                                           ! 7056                           0,
36342 9034                        00            .byte	0
36343                                           ! 7057 
36344                                           ! 7057                           64,
36345 9035                      0040            .word	$40
36346                                           ! 7058                    64,
36347 9037                      0040            .word	$40
36348                                           ! 7059                        0xA000,
36349 9039                      A000            .word	$A000
36350                                           ! 7060                        0x0000,
36351 903B                      0000            .word	0
36352                                           ! 7061                       0,
36353 903D                      0000            .word	0
36354 903F                      0000            .word	0
36355                                           ! 7062                             4200,
36356 9041                      1068            .word	$1068
36357                                           ! 7063                        1400,
36358 9043                      0578            .word	$578
36359                                           ! 7064                        1050,
36360 9045                      041A            .word	$41A
36361                                           ! 7065                      8,
36362 9047                        08            .byte	8
36363                                           ! 7066                      16,
36364 9048                        10            .byte	$10
36365                                           ! 7067                           1,
36366 9049                        01            .byte	1
36367                                           ! 7068                         24,
36368 904A                        18            .byte	$18
36369                                           ! 7069                          68,
36370 904B                        44            .byte	$44
36371                                           ! 7070                        0x06,
36372 904C                        06            .byte	6
36373                                           ! 7071                     0,
36374 904D                        00            .byte	0
36375                                           ! 7072                               2,
36376 904E                        02            .byte	2
36377                                           ! 7073                          0,
36378 904F                        00            .byte	0
36379                                           ! 7074                        8,
36380 9050                        08            .byte	8
36381                                           ! 7075                             16,
36382 9051                        10            .byte	$10
36383                                           ! 7076                          8,
36384 9052                        08            .byte	8
36385                                           ! 7077                               8,
36386 9053                        08            .byte	8
36387                                           ! 7078                         8,
36388 9054                        08            .byte	8
36389                                           ! 7079                              0,
36390 9055                        00            .byte	0
36391                                           ! 7080                         0,
36392 9056                        00            .byte	0
36393                                           ! 7081                              0,
36394 9057                        00            .byte	0
36395                                           ! 7082                                0,
36396 9058                        00            .byte	0
36397                                           ! 7083                        0xE0000000,
36398 9059                      0000            .word	0
36399 905B                      E000            .word	$E000
36400                                           ! 7084                               0,
36401 905D                      0000            .word	0
36402 905F                      0000            .word	0
36403                                           ! 7085                             0,
36404 9061                      0000            .word	0
36405                                           ! 7086                                4200,
36406 9063                      1068            .word	$1068
36407                                           ! 7087                             0,
36408 9065                        00            .byte	0
36409                                           ! 7088                             0,
36410 9066                        00            .byte	0
36411                                           ! 7089                           8,
36412 9067                        08            .byte	8
36413                                           ! 7090                                16,
36414 9068                        10            .byte	$10
36415                                           ! 7091                             8,
36416 9069                        08            .byte	8
36417                                           ! 7092                                  8,
36418 906A                        08            .byte	8
36419                                           ! 7093                            8,
36420 906B                        08            .byte	8
36421                                           ! 7094                                 0,
36422 906C                        00            .byte	0
36423                                           ! 7095                            0,
36424 906D                        00            .byte	0
36425                                           ! 7096                                 0,
36426 906E                        00            .byte	0
36427                                           ! 7097                          0,
36428 906F                      0000            .word	0
36429 9071                      0000            .word	0
36430                                           ! 7098 } },
36431                                           ! 7099 { 0x0183,
36432 9073                      0183            .word	$183
36433                                           ! 7100 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36434 9075                      009B            .word	$9B
36435                                           ! 7101                           0x01 | 0x02 | 0x04,
36436 9077                        07            .byte	7
36437                                           ! 7102                           0,
36438 9078                        00            .byte	0
36439                                           ! 7103                           64,
36440 9079                      0040            .word	$40
36441                                           ! 7104                    64,
36442 907B                      0040            .word	$40
36443                                           ! 7105                        0xA000,
36444 907D                      A000            .word	$A000
36445                                           ! 7106                        0x0000,
36446 907F                      0000            .word	0
36447                                           ! 7107                       0,
36448 9081                      0000            .word	0
36449 9083                      0000            .word	0
36450                                           ! 7108                             5600,
36451 9085                      15E0            .word	$15E0
36452                                           ! 7109                        1400,
36453 9087                      0578            .word	$578
36454                                           ! 7110                        1050,
36455 9089                      041A            .word	$41A
36456                                           ! 7111                      8,
36457 908B                        08            .byte	8
36458                                           ! 7112                      16,
36459 908C                        10            .byte	$10
36460                                           ! 7113                           1,
36461 908D                        01            .byte	1
36462                                           ! 7114                         32,
36463 908E                        20            .byte	$20
36464                                           ! 7115                          90,
36465 908F                        5A            .byte	$5A
36466                                           ! 7116                        0x06,
36467 9090                        06            .byte	6
36468                                           ! 7117                     0,
36469 9091                        00            .byte	0
36470                                           ! 7118                               1,
36471 9092                        01            .byte	1
36472                                           ! 7119                          0,
36473 9093                        00            .byte	0
36474                                           ! 7120                        8,
36475 9094                        08            .byte	8
36476                                           ! 7121                             16,
36477 9095                        10            .byte	$10
36478                                           ! 7122                          8,
36479 9096                        08            .byte	8
36480                                           ! 7123                               8,
36481 9097                        08            .byte	8
36482                                           ! 7124                         8,
36483 9098                        08            .byte	8
36484                                           ! 7125                              0,
36485 9099                        00            .byte	0
36486                                           ! 7126                 
36487                                           ! 7126         8,
36488 909A                        08            .byte	8
36489                                           ! 7127                              24,
36490 909B                        18            .byte	$18
36491                                           ! 7128                                0x02,
36492 909C                        02            .byte	2
36493                                           ! 7129                        0xE0000000,
36494 909D                      0000            .word	0
36495 909F                      E000            .word	$E000
36496                                           ! 7130                               0,
36497 90A1                      0000            .word	0
36498 90A3                      0000            .word	0
36499                                           ! 7131                             0,
36500 90A5                      0000            .word	0
36501                                           ! 7132                                5600,
36502 90A7                      15E0            .word	$15E0
36503                                           ! 7133                             0,
36504 90A9                        00            .byte	0
36505                                           ! 7134                             0,
36506 90AA                        00            .byte	0
36507                                           ! 7135                           8,
36508 90AB                        08            .byte	8
36509                                           ! 7136                                16,
36510 90AC                        10            .byte	$10
36511                                           ! 7137                             8,
36512 90AD                        08            .byte	8
36513                                           ! 7138                                  8,
36514 90AE                        08            .byte	8
36515                                           ! 7139                            8,
36516 90AF                        08            .byte	8
36517                                           ! 7140                                 0,
36518 90B0                        00            .byte	0
36519                                           ! 7141                            8,
36520 90B1                        08            .byte	8
36521                                           ! 7142                                 24,
36522 90B2                        18            .byte	$18
36523                                           ! 7143                          0,
36524 90B3                      0000            .word	0
36525 90B5                      0000            .word	0
36526                                           ! 7144 } },
36527                                           ! 7145 { 0x0184,
36528 90B7                      0184            .word	$184
36529                                           ! 7146 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36530 90B9                      009B            .word	$9B
36531                                           ! 7147                           0x01 | 0x02 | 0x04,
36532 90BB                        07            .byte	7
36533                                           ! 7148                           0,
36534 90BC                        00            .byte	0
36535                                           ! 7149                           64,
36536 90BD                      0040            .word	$40
36537                                           ! 7150                    64,
36538 90BF                      0040            .word	$40
36539                                           ! 7151                        0xA000,
36540 90C1                      A000            .word	$A000
36541                                           ! 7152                        0x0000,
36542 90C3                      0000            .word	0
36543                                           ! 7153                       0,
36544 90C5                      0000            .word	0
36545 90C7                      0000            .word	0
36546                                           ! 7154                             3360,
36547 90C9                      0D20            .word	$D20
36548                                           ! 7155                        1680,
36549 90CB                      0690            .word	$690
36550                                           ! 7156                        1050,
36551 90CD                      041A            .word	$41A
36552                                           ! 7157                      8,
36553 90CF                        08            .byte	8
36554                                           ! 7158                      16,
36555 90D0                        10            .byte	$10
36556                                           ! 7159                           1,
36557 90D1                        01            .byte	1
36558                                           ! 7160                         16,
36559 90D2                        10            .byte	$10
36560                                           ! 7161                          54,
36561 90D3                        36            .byte	$36
36562                                           ! 7162                        0x06,
36563 90D4                        06            .byte	6
36564                                           ! 7163                     0,
36565 90D5                        00            .byte	0
36566                                           ! 7164                               3,
36567 90D6                        03            .byte	3
36568                                           ! 7165                          0,
36569 90D7                        00            .byte	0
36570                                           ! 7166                        5,
36571 90D8                        05            .byte	5
36572                                           ! 7167                             11,
36573 90D9                        0B            .byte	$B
36574                                           ! 7168                          6,
36575 90DA                        06            .byte	6
36576                                           ! 7169                               5,
36577 90DB                        05            .byte	5
36578                                           ! 7170                         5,
36579 90DC                        05            .byte	5
36580                                           ! 7171                              0,
36581 90DD                        00            .byte	0
36582                                           ! 7172                         0,
36583 90DE                        00            .byte	0
36584                                           ! 7173                              0,
36585 90DF                        00            .byte	0
36586                                           ! 7174                                0,
36587 90E0                        00            .byte	0
36588                                           ! 7175                        0xE0000000,
36589 90E1                      0000            .word	0
36590 90E3                      E000            .word	$E000
36591                                           ! 7176                               0,
36592 90E5                      0000            .word	0
36593 90E7                      0000            .word	0
36594                                           ! 7177                             0,
36595 90E9                      0000            .word	0
36596                                           ! 7178                                3360,
36597 90EB                      0D20            .word	$D20
36598                                           ! 7179                             0,
36599 90ED                        00            .byte	0
36600                                           ! 7180                             0,
36601 90EE                        00            .byte	0
36602                                           ! 7181                           5,
36603 90EF                        05            .byte	5
36604                                           ! 7182                                11,
36605 90F0                        0B            .byte	$B
36606                                           ! 7183                             6,
36607 90F1                        06            .byte	6
36608                                           ! 7184                                  5,
36609 90F2                        05            .byte	5
36610                                           ! 7185                            5,
36611 90F3                        05            .byte	5
36612                                           ! 7186                                 0,
36613 90F4                        00            .byte	0
36614                                           ! 7187                            0,
36615 90F5                        00            .byte	0
36616                                           ! 7188                                 0,
36617 90F6                        00            .byte	0
36618                                           ! 7189                          0,
36619 90F7                      0000            .word	0
36620 90F9                      0000            .word	0
36621                                           ! 7190 } },
36622                                           ! 7191 { 0x0185,
36623 90FB                      0185            .word	$185
36624                                           ! 7192 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36625 90FD                      009B            .word	$9B
36626                                           ! 7193                           0x01 | 0x02 | 0x04
36627                                           ! 7193 ,
36628 90FF                        07            .byte	7
36629                                           ! 7194                           0,
36630 9100                        00            .byte	0
36631                                           ! 7195                           64,
36632 9101                      0040            .word	$40
36633                                           ! 7196                    64,
36634 9103                      0040            .word	$40
36635                                           ! 7197                        0xA000,
36636 9105                      A000            .word	$A000
36637                                           ! 7198                        0x0000,
36638 9107                      0000            .word	0
36639                                           ! 7199                       0,
36640 9109                      0000            .word	0
36641 910B                      0000            .word	0
36642                                           ! 7200                             5040,
36643 910D                      13B0            .word	$13B0
36644                                           ! 7201                        1680,
36645 910F                      0690            .word	$690
36646                                           ! 7202                        1050,
36647 9111                      041A            .word	$41A
36648                                           ! 7203                      8,
36649 9113                        08            .byte	8
36650                                           ! 7204                      16,
36651 9114                        10            .byte	$10
36652                                           ! 7205                           1,
36653 9115                        01            .byte	1
36654                                           ! 7206                         24,
36655 9116                        18            .byte	$18
36656                                           ! 7207                          81,
36657 9117                        51            .byte	$51
36658                                           ! 7208                        0x06,
36659 9118                        06            .byte	6
36660                                           ! 7209                     0,
36661 9119                        00            .byte	0
36662                                           ! 7210                               2,
36663 911A                        02            .byte	2
36664                                           ! 7211                          0,
36665 911B                        00            .byte	0
36666                                           ! 7212                        8,
36667 911C                        08            .byte	8
36668                                           ! 7213                             16,
36669 911D                        10            .byte	$10
36670                                           ! 7214                          8,
36671 911E                        08            .byte	8
36672                                           ! 7215                               8,
36673 911F                        08            .byte	8
36674                                           ! 7216                         8,
36675 9120                        08            .byte	8
36676                                           ! 7217                              0,
36677 9121                        00            .byte	0
36678                                           ! 7218                         0,
36679 9122                        00            .byte	0
36680                                           ! 7219                              0,
36681 9123                        00            .byte	0
36682                                           ! 7220                                0,
36683 9124                        00            .byte	0
36684                                           ! 7221                        0xE0000000,
36685 9125                      0000            .word	0
36686 9127                      E000            .word	$E000
36687                                           ! 7222                               0,
36688 9129                      0000            .word	0
36689 912B                      0000            .word	0
36690                                           ! 7223                             0,
36691 912D                      0000            .word	0
36692                                           ! 7224                                5040,
36693 912F                      13B0            .word	$13B0
36694                                           ! 7225                             0,
36695 9131                        00            .byte	0
36696                                           ! 7226                             0,
36697 9132                        00            .byte	0
36698                                           ! 7227                           8,
36699 9133                        08            .byte	8
36700                                           ! 7228                                16,
36701 9134                        10            .byte	$10
36702                                           ! 7229                             8,
36703 9135                        08            .byte	8
36704                                           ! 7230                                  8,
36705 9136                        08            .byte	8
36706                                           ! 7231                            8,
36707 9137                        08            .byte	8
36708                                           ! 7232                                 0,
36709 9138                        00            .byte	0
36710                                           ! 7233                            0,
36711 9139                        00            .byte	0
36712                                           ! 7234                                 0,
36713 913A                        00            .byte	0
36714                                           ! 7235                          0,
36715 913B                      0000            .word	0
36716 913D                      0000            .word	0
36717                                           ! 7236 } },
36718                                           ! 7237 { 0x0186,
36719 913F                      0186            .word	$186
36720                                           ! 7238 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36721 9141                      009B            .word	$9B
36722                                           ! 7239                           0x01 | 0x02 | 0x04,
36723 9143                        07            .byte	7
36724                                           ! 7240                           0,
36725 9144                        00            .byte	0
36726                                           ! 7241                           64,
36727 9145                      0040            .word	$40
36728                                           ! 7242                    64,
36729 9147                      0040            .word	$40
36730                                           ! 7243                        0xA000,
36731 9149                      A000            .word	$A000
36732                                           ! 7244                        0x0000,
36733 914B                      0000            .word	0
36734                                           ! 7245                       0,
36735 914D                      0000            .word	0
36736 914F                      0000            .word	0
36737                                           ! 7246                             6720,
36738 9151                      1A40            .word	$1A40
36739                                           ! 7247                        1680,
36740 9153                      0690            .word	$690
36741                                           ! 7248                        1050,
36742 9155                      041A            .word	$41A
36743                                           ! 7249                      8,
36744 9157                        08            .byte	8
36745                                           ! 7250                      16,
36746 9158                        10            .byte	$10
36747                                           ! 7251                           1,
36748 9159                        01            .byte	1
36749                                           ! 7252                         32,
36750 915A                        20            .byte	$20
36751                                           ! 7253                          108,
36752 915B                        6C            .byte	$6C
36753                                           ! 7254                        0x06,
36754 915C                        06            .byte	6
36755                                           ! 7255                     0,
36756 915D                        00            .byte	0
36757                                           ! 7256                               1,
36758 915E                        01            .byte	1
36759                                           ! 7257                          0,
36760 915F                        00            .byte	0
36761                                           ! 7258                        8,
36762 9160                        08            .byte	8
36763                                           ! 7259                             16,
36764 9161                        10            .byte	$10
36765                                           ! 7260                          8,
36766 9162                        08            .byte	8
36767                                           ! 7261                               8,
36768 9163                        08            .byte	8
36769                                           ! 7262                         8,
36770 9164                        08            .byte	8
36771                                           ! 7263                 
36772                                           ! 7263              0,
36773 9165                        00            .byte	0
36774                                           ! 7264                         8,
36775 9166                        08            .byte	8
36776                                           ! 7265                              24,
36777 9167                        18            .byte	$18
36778                                           ! 7266                                0x02,
36779 9168                        02            .byte	2
36780                                           ! 7267                        0xE0000000,
36781 9169                      0000            .word	0
36782 916B                      E000            .word	$E000
36783                                           ! 7268                               0,
36784 916D                      0000            .word	0
36785 916F                      0000            .word	0
36786                                           ! 7269                             0,
36787 9171                      0000            .word	0
36788                                           ! 7270                                6720,
36789 9173                      1A40            .word	$1A40
36790                                           ! 7271                             0,
36791 9175                        00            .byte	0
36792                                           ! 7272                             0,
36793 9176                        00            .byte	0
36794                                           ! 7273                           8,
36795 9177                        08            .byte	8
36796                                           ! 7274                                16,
36797 9178                        10            .byte	$10
36798                                           ! 7275                             8,
36799 9179                        08            .byte	8
36800                                           ! 7276                                  8,
36801 917A                        08            .byte	8
36802                                           ! 7277                            8,
36803 917B                        08            .byte	8
36804                                           ! 7278                                 0,
36805 917C                        00            .byte	0
36806                                           ! 7279                            8,
36807 917D                        08            .byte	8
36808                                           ! 7280                                 24,
36809 917E                        18            .byte	$18
36810                                           ! 7281                          0,
36811 917F                      0000            .word	0
36812 9181                      0000            .word	0
36813                                           ! 7282 } },
36814                                           ! 7283 { 0x0187,
36815 9183                      0187            .word	$187
36816                                           ! 7284 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36817 9185                      009B            .word	$9B
36818                                           ! 7285                           0x01 | 0x02 | 0x04,
36819 9187                        07            .byte	7
36820                                           ! 7286                           0,
36821 9188                        00            .byte	0
36822                                           ! 7287                           64,
36823 9189                      0040            .word	$40
36824                                           ! 7288                    64,
36825 918B                      0040            .word	$40
36826                                           ! 7289                        0xA000,
36827 918D                      A000            .word	$A000
36828                                           ! 7290                        0x0000,
36829 918F                      0000            .word	0
36830                                           ! 7291                       0,
36831 9191                      0000            .word	0
36832 9193                      0000            .word	0
36833                                           ! 7292                             3840,
36834 9195                      0F00            .word	$F00
36835                                           ! 7293                        1920,
36836 9197                      0780            .word	$780
36837                                           ! 7294                        1200,
36838 9199                      04B0            .word	$4B0
36839                                           ! 7295                      8,
36840 919B                        08            .byte	8
36841                                           ! 7296                      16,
36842 919C                        10            .byte	$10
36843                                           ! 7297                           1,
36844 919D                        01            .byte	1
36845                                           ! 7298                         16,
36846 919E                        10            .byte	$10
36847                                           ! 7299                          71,
36848 919F                        47            .byte	$47
36849                                           ! 7300                        0x06,
36850 91A0                        06            .byte	6
36851                                           ! 7301                     0,
36852 91A1                        00            .byte	0
36853                                           ! 7302                               2,
36854 91A2                        02            .byte	2
36855                                           ! 7303                          0,
36856 91A3                        00            .byte	0
36857                                           ! 7304                        5,
36858 91A4                        05            .byte	5
36859                                           ! 7305                             11,
36860 91A5                        0B            .byte	$B
36861                                           ! 7306                          6,
36862 91A6                        06            .byte	6
36863                                           ! 7307                               5,
36864 91A7                        05            .byte	5
36865                                           ! 7308                         5,
36866 91A8                        05            .byte	5
36867                                           ! 7309                              0,
36868 91A9                        00            .byte	0
36869                                           ! 7310                         0,
36870 91AA                        00            .byte	0
36871                                           ! 7311                              0,
36872 91AB                        00            .byte	0
36873                                           ! 7312                                0,
36874 91AC                        00            .byte	0
36875                                           ! 7313                        0xE0000000,
36876 91AD                      0000            .word	0
36877 91AF                      E000            .word	$E000
36878                                           ! 7314                               0,
36879 91B1                      0000            .word	0
36880 91B3                      0000            .word	0
36881                                           ! 7315                             0,
36882 91B5                      0000            .word	0
36883                                           ! 7316                                3840,
36884 91B7                      0F00            .word	$F00
36885                                           ! 7317                             0,
36886 91B9                        00            .byte	0
36887                                           ! 7318                             0,
36888 91BA                        00            .byte	0
36889                                           ! 7319                           5,
36890 91BB                        05            .byte	5
36891                                           ! 7320                                11,
36892 91BC                        0B            .byte	$B
36893                                           ! 7321                             6,
36894 91BD                        06            .byte	6
36895                                           ! 7322                                  5,
36896 91BE                        05            .byte	5
36897                                           ! 7323                            5,
36898 91BF                        05            .byte	5
36899                                           ! 7324                                 0,
36900 91C0                        00            .byte	0
36901                                           ! 7325                            0,
36902 91C1                        00            .byte	0
36903                                           ! 7326                                 0,
36904 91C2                        00            .byte	0
36905                                           ! 7327                          0,
36906 91C3                      0000            .word	0
36907 91C5                      0000            .word	0
36908                                           ! 7328 } },
36909                                           ! 7329 { 0x0188,
36910 91C7                      0188            .word	$188
36911                                           ! 7330 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36912 91C9                      009B            .word	$9B
36913                                           ! 7331             
36914                                           ! 7331               0x01 | 0x02 | 0x04,
36915 91CB                        07            .byte	7
36916                                           ! 7332                           0,
36917 91CC                        00            .byte	0
36918                                           ! 7333                           64,
36919 91CD                      0040            .word	$40
36920                                           ! 7334                    64,
36921 91CF                      0040            .word	$40
36922                                           ! 7335                        0xA000,
36923 91D1                      A000            .word	$A000
36924                                           ! 7336                        0x0000,
36925 91D3                      0000            .word	0
36926                                           ! 7337                       0,
36927 91D5                      0000            .word	0
36928 91D7                      0000            .word	0
36929                                           ! 7338                             5760,
36930 91D9                      1680            .word	$1680
36931                                           ! 7339                        1920,
36932 91DB                      0780            .word	$780
36933                                           ! 7340                        1200,
36934 91DD                      04B0            .word	$4B0
36935                                           ! 7341                      8,
36936 91DF                        08            .byte	8
36937                                           ! 7342                      16,
36938 91E0                        10            .byte	$10
36939                                           ! 7343                           1,
36940 91E1                        01            .byte	1
36941                                           ! 7344                         24,
36942 91E2                        18            .byte	$18
36943                                           ! 7345                          106,
36944 91E3                        6A            .byte	$6A
36945                                           ! 7346                        0x06,
36946 91E4                        06            .byte	6
36947                                           ! 7347                     0,
36948 91E5                        00            .byte	0
36949                                           ! 7348                               1,
36950 91E6                        01            .byte	1
36951                                           ! 7349                          0,
36952 91E7                        00            .byte	0
36953                                           ! 7350                        8,
36954 91E8                        08            .byte	8
36955                                           ! 7351                             16,
36956 91E9                        10            .byte	$10
36957                                           ! 7352                          8,
36958 91EA                        08            .byte	8
36959                                           ! 7353                               8,
36960 91EB                        08            .byte	8
36961                                           ! 7354                         8,
36962 91EC                        08            .byte	8
36963                                           ! 7355                              0,
36964 91ED                        00            .byte	0
36965                                           ! 7356                         0,
36966 91EE                        00            .byte	0
36967                                           ! 7357                              0,
36968 91EF                        00            .byte	0
36969                                           ! 7358                                0,
36970 91F0                        00            .byte	0
36971                                           ! 7359                        0xE0000000,
36972 91F1                      0000            .word	0
36973 91F3                      E000            .word	$E000
36974                                           ! 7360                               0,
36975 91F5                      0000            .word	0
36976 91F7                      0000            .word	0
36977                                           ! 7361                             0,
36978 91F9                      0000            .word	0
36979                                           ! 7362                                5760,
36980 91FB                      1680            .word	$1680
36981                                           ! 7363                             0,
36982 91FD                        00            .byte	0
36983                                           ! 7364                             0,
36984 91FE                        00            .byte	0
36985                                           ! 7365                           8,
36986 91FF                        08            .byte	8
36987                                           ! 7366                                16,
36988 9200                        10            .byte	$10
36989                                           ! 7367                             8,
36990 9201                        08            .byte	8
36991                                           ! 7368                                  8,
36992 9202                        08            .byte	8
36993                                           ! 7369                            8,
36994 9203                        08            .byte	8
36995                                           ! 7370                                 0,
36996 9204                        00            .byte	0
36997                                           ! 7371                            0,
36998 9205                        00            .byte	0
36999                                           ! 7372                                 0,
37000 9206                        00            .byte	0
37001                                           ! 7373                          0,
37002 9207                      0000            .word	0
37003 9209                      0000            .word	0
37004                                           ! 7374 } },
37005                                           ! 7375 { 0x0189,
37006 920B                      0189            .word	$189
37007                                           ! 7376 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37008 920D                      009B            .word	$9B
37009                                           ! 7377                           0x01 | 0x02 | 0x04,
37010 920F                        07            .byte	7
37011                                           ! 7378                           0,
37012 9210                        00            .byte	0
37013                                           ! 7379                           64,
37014 9211                      0040            .word	$40
37015                                           ! 7380                    64,
37016 9213                      0040            .word	$40
37017                                           ! 7381                        0xA000,
37018 9215                      A000            .word	$A000
37019                                           ! 7382                        0x0000,
37020 9217                      0000            .word	0
37021                                           ! 7383                       0,
37022 9219                      0000            .word	0
37023 921B                      0000            .word	0
37024                                           ! 7384                             7680,
37025 921D                      1E00            .word	$1E00
37026                                           ! 7385                        1920,
37027 921F                      0780            .word	$780
37028                                           ! 7386                        1200,
37029 9221                      04B0            .word	$4B0
37030                                           ! 7387                      8,
37031 9223                        08            .byte	8
37032                                           ! 7388                      16,
37033 9224                        10            .byte	$10
37034                                           ! 7389                           1,
37035 9225                        01            .byte	1
37036                                           ! 7390                         32,
37037 9226                        20            .byte	$20
37038                                           ! 7391                          141,
37039 9227                        8D            .byte	$8D
37040                                           ! 7392                        0x06,
37041 9228                        06            .byte	6
37042                                           ! 7393                     0,
37043 9229                        00            .byte	0
37044                                           ! 7394                               0,
37045 922A                        00            .byte	0
37046                                           ! 7395                          0,
37047 922B                        00            .byte	0
37048                                           ! 7396                        8,
37049 922C                        08            .byte	8
37050                                           ! 7397                             16,
37051 922D                        10            .byte	$10
37052                                           ! 7398                          8,
37053 922E                        08            .byte	8
37054                                           ! 7399                               8,
37055 922F                        08            .byte	8
37056                                           ! 7400           
37057                                           ! 7400               8,
37058 9230                        08            .byte	8
37059                                           ! 7401                              0,
37060 9231                        00            .byte	0
37061                                           ! 7402                         8,
37062 9232                        08            .byte	8
37063                                           ! 7403                              24,
37064 9233                        18            .byte	$18
37065                                           ! 7404                                0x02,
37066 9234                        02            .byte	2
37067                                           ! 7405                        0xE0000000,
37068 9235                      0000            .word	0
37069 9237                      E000            .word	$E000
37070                                           ! 7406                               0,
37071 9239                      0000            .word	0
37072 923B                      0000            .word	0
37073                                           ! 7407                             0,
37074 923D                      0000            .word	0
37075                                           ! 7408                                7680,
37076 923F                      1E00            .word	$1E00
37077                                           ! 7409                             0,
37078 9241                        00            .byte	0
37079                                           ! 7410                             0,
37080 9242                        00            .byte	0
37081                                           ! 7411                           8,
37082 9243                        08            .byte	8
37083                                           ! 7412                                16,
37084 9244                        10            .byte	$10
37085                                           ! 7413                             8,
37086 9245                        08            .byte	8
37087                                           ! 7414                                  8,
37088 9246                        08            .byte	8
37089                                           ! 7415                            8,
37090 9247                        08            .byte	8
37091                                           ! 7416                                 0,
37092 9248                        00            .byte	0
37093                                           ! 7417                            8,
37094 9249                        08            .byte	8
37095                                           ! 7418                                 24,
37096 924A                        18            .byte	$18
37097                                           ! 7419                          0,
37098 924B                      0000            .word	0
37099 924D                      0000            .word	0
37100                                           ! 7420 } },
37101                                           ! 7421 { 0x018a,
37102 924F                      018A            .word	$18A
37103                                           ! 7422 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37104 9251                      009B            .word	$9B
37105                                           ! 7423                           0x01 | 0x02 | 0x04,
37106 9253                        07            .byte	7
37107                                           ! 7424                           0,
37108 9254                        00            .byte	0
37109                                           ! 7425                           64,
37110 9255                      0040            .word	$40
37111                                           ! 7426                    64,
37112 9257                      0040            .word	$40
37113                                           ! 7427                        0xA000,
37114 9259                      A000            .word	$A000
37115                                           ! 7428                        0x0000,
37116 925B                      0000            .word	0
37117                                           ! 7429                       0,
37118 925D                      0000            .word	0
37119 925F                      0000            .word	0
37120                                           ! 7430                             5120,
37121 9261                      1400            .word	$1400
37122                                           ! 7431                        2560,
37123 9263                      0A00            .word	$A00
37124                                           ! 7432                        1600,
37125 9265                      0640            .word	$640
37126                                           ! 7433                      8,
37127 9267                        08            .byte	8
37128                                           ! 7434                      16,
37129 9268                        10            .byte	$10
37130                                           ! 7435                           1,
37131 9269                        01            .byte	1
37132                                           ! 7436                         16,
37133 926A                        10            .byte	$10
37134                                           ! 7437                          125,
37135 926B                        7D            .byte	$7D
37136                                           ! 7438                        0x06,
37137 926C                        06            .byte	6
37138                                           ! 7439                     0,
37139 926D                        00            .byte	0
37140                                           ! 7440                               1,
37141 926E                        01            .byte	1
37142                                           ! 7441                          0,
37143 926F                        00            .byte	0
37144                                           ! 7442                        5,
37145 9270                        05            .byte	5
37146                                           ! 7443                             11,
37147 9271                        0B            .byte	$B
37148                                           ! 7444                          6,
37149 9272                        06            .byte	6
37150                                           ! 7445                               5,
37151 9273                        05            .byte	5
37152                                           ! 7446                         5,
37153 9274                        05            .byte	5
37154                                           ! 7447                              0,
37155 9275                        00            .byte	0
37156                                           ! 7448                         0,
37157 9276                        00            .byte	0
37158                                           ! 7449                              0,
37159 9277                        00            .byte	0
37160                                           ! 7450                                0,
37161 9278                        00            .byte	0
37162                                           ! 7451                        0xE0000000,
37163 9279                      0000            .word	0
37164 927B                      E000            .word	$E000
37165                                           ! 7452                               0,
37166 927D                      0000            .word	0
37167 927F                      0000            .word	0
37168                                           ! 7453                             0,
37169 9281                      0000            .word	0
37170                                           ! 7454                                5120,
37171 9283                      1400            .word	$1400
37172                                           ! 7455                             0,
37173 9285                        00            .byte	0
37174                                           ! 7456                             0,
37175 9286                        00            .byte	0
37176                                           ! 7457                           5,
37177 9287                        05            .byte	5
37178                                           ! 7458                                11,
37179 9288                        0B            .byte	$B
37180                                           ! 7459                             6,
37181 9289                        06            .byte	6
37182                                           ! 7460                                  5,
37183 928A                        05            .byte	5
37184                                           ! 7461                            5,
37185 928B                        05            .byte	5
37186                                           ! 7462                                 0,
37187 928C                        00            .byte	0
37188                                           ! 7463                            0,
37189 928D                        00            .byte	0
37190                                           ! 7464                                 0,
37191 928E                        00            .byte	0
37192                                           ! 7465                          0,
37193 928F                      0000            .word	0
37194 9291                      0000            .word	0
37195                                           ! 7466 } },
37196                                           ! 7467 { 0x018b,
37197 9293                      018B            .word	$18B
37198                                           ! 7468 { 0x0001 | 0x0002 | 0x00
37199                                           ! 7468 08 | 0x0080 | 0x0010,
37200 9295                      009B            .word	$9B
37201                                           ! 7469                           0x01 | 0x02 | 0x04,
37202 9297                        07            .byte	7
37203                                           ! 7470                           0,
37204 9298                        00            .byte	0
37205                                           ! 7471                           64,
37206 9299                      0040            .word	$40
37207                                           ! 7472                    64,
37208 929B                      0040            .word	$40
37209                                           ! 7473                        0xA000,
37210 929D                      A000            .word	$A000
37211                                           ! 7474                        0x0000,
37212 929F                      0000            .word	0
37213                                           ! 7475                       0,
37214 92A1                      0000            .word	0
37215 92A3                      0000            .word	0
37216                                           ! 7476                             7680,
37217 92A5                      1E00            .word	$1E00
37218                                           ! 7477                        2560,
37219 92A7                      0A00            .word	$A00
37220                                           ! 7478                        1600,
37221 92A9                      0640            .word	$640
37222                                           ! 7479                      8,
37223 92AB                        08            .byte	8
37224                                           ! 7480                      16,
37225 92AC                        10            .byte	$10
37226                                           ! 7481                           1,
37227 92AD                        01            .byte	1
37228                                           ! 7482                         24,
37229 92AE                        18            .byte	$18
37230                                           ! 7483                          188,
37231 92AF                        BC            .byte	$BC
37232                                           ! 7484                        0x06,
37233 92B0                        06            .byte	6
37234                                           ! 7485                     0,
37235 92B1                        00            .byte	0
37236                                           ! 7486                               0,
37237 92B2                        00            .byte	0
37238                                           ! 7487                          0,
37239 92B3                        00            .byte	0
37240                                           ! 7488                        8,
37241 92B4                        08            .byte	8
37242                                           ! 7489                             16,
37243 92B5                        10            .byte	$10
37244                                           ! 7490                          8,
37245 92B6                        08            .byte	8
37246                                           ! 7491                               8,
37247 92B7                        08            .byte	8
37248                                           ! 7492                         8,
37249 92B8                        08            .byte	8
37250                                           ! 7493                              0,
37251 92B9                        00            .byte	0
37252                                           ! 7494                         0,
37253 92BA                        00            .byte	0
37254                                           ! 7495                              0,
37255 92BB                        00            .byte	0
37256                                           ! 7496                                0,
37257 92BC                        00            .byte	0
37258                                           ! 7497                        0xE0000000,
37259 92BD                      0000            .word	0
37260 92BF                      E000            .word	$E000
37261                                           ! 7498                               0,
37262 92C1                      0000            .word	0
37263 92C3                      0000            .word	0
37264                                           ! 7499                             0,
37265 92C5                      0000            .word	0
37266                                           ! 7500                                7680,
37267 92C7                      1E00            .word	$1E00
37268                                           ! 7501                             0,
37269 92C9                        00            .byte	0
37270                                           ! 7502                             0,
37271 92CA                        00            .byte	0
37272                                           ! 7503                           8,
37273 92CB                        08            .byte	8
37274                                           ! 7504                                16,
37275 92CC                        10            .byte	$10
37276                                           ! 7505                             8,
37277 92CD                        08            .byte	8
37278                                           ! 7506                                  8,
37279 92CE                        08            .byte	8
37280                                           ! 7507                            8,
37281 92CF                        08            .byte	8
37282                                           ! 7508                                 0,
37283 92D0                        00            .byte	0
37284                                           ! 7509                            0,
37285 92D1                        00            .byte	0
37286                                           ! 7510                                 0,
37287 92D2                        00            .byte	0
37288                                           ! 7511                          0,
37289 92D3                      0000            .word	0
37290 92D5                      0000            .word	0
37291                                           ! 7512 } },
37292                                           ! 7513 { 0x018c,
37293 92D7                      018C            .word	$18C
37294                                           ! 7514 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37295 92D9                      009B            .word	$9B
37296                                           ! 7515                           0x01 | 0x02 | 0x04,
37297 92DB                        07            .byte	7
37298                                           ! 7516                           0,
37299 92DC                        00            .byte	0
37300                                           ! 7517                           64,
37301 92DD                      0040            .word	$40
37302                                           ! 7518                    64,
37303 92DF                      0040            .word	$40
37304                                           ! 7519                        0xA000,
37305 92E1                      A000            .word	$A000
37306                                           ! 7520                        0x0000,
37307 92E3                      0000            .word	0
37308                                           ! 7521                       0,
37309 92E5                      0000            .word	0
37310 92E7                      0000            .word	0
37311                                           ! 7522                             10240,
37312 92E9                      2800            .word	$2800
37313                                           ! 7523                        2560,
37314 92EB                      0A00            .word	$A00
37315                                           ! 7524                        1600,
37316 92ED                      0640            .word	$640
37317                                           ! 7525                      8,
37318 92EF                        08            .byte	8
37319                                           ! 7526                      16,
37320 92F0                        10            .byte	$10
37321                                           ! 7527                           1,
37322 92F1                        01            .byte	1
37323                                           ! 7528                         32,
37324 92F2                        20            .byte	$20
37325                                           ! 7529                          250,
37326 92F3                        FA            .byte	$FA
37327                                           ! 7530                        0x06,
37328 92F4                        06            .byte	6
37329                                           ! 7531                     0,
37330 92F5                        00            .byte	0
37331                                           ! 7532                               0,
37332 92F6                        00            .byte	0
37333                                           ! 7533                          0,
37334 92F7                        00            .byte	0
37335                                           ! 7534                        8,
37336 92F8                        08            .byte	8
37337                                           ! 7535                             16,
37338 92F9                        10            .byte	$10
37339                                           ! 7536                          8,
37340 92FA                        08            .byte	8
37341                                           ! 7537         
37342                                           ! 7537                       8,
37343 92FB                        08            .byte	8
37344                                           ! 7538                         8,
37345 92FC                        08            .byte	8
37346                                           ! 7539                              0,
37347 92FD                        00            .byte	0
37348                                           ! 7540                         8,
37349 92FE                        08            .byte	8
37350                                           ! 7541                              24,
37351 92FF                        18            .byte	$18
37352                                           ! 7542                                0x02,
37353 9300                        02            .byte	2
37354                                           ! 7543                        0xE0000000,
37355 9301                      0000            .word	0
37356 9303                      E000            .word	$E000
37357                                           ! 7544                               0,
37358 9305                      0000            .word	0
37359 9307                      0000            .word	0
37360                                           ! 7545                             0,
37361 9309                      0000            .word	0
37362                                           ! 7546                                10240,
37363 930B                      2800            .word	$2800
37364                                           ! 7547                             0,
37365 930D                        00            .byte	0
37366                                           ! 7548                             0,
37367 930E                        00            .byte	0
37368                                           ! 7549                           8,
37369 930F                        08            .byte	8
37370                                           ! 7550                                16,
37371 9310                        10            .byte	$10
37372                                           ! 7551                             8,
37373 9311                        08            .byte	8
37374                                           ! 7552                                  8,
37375 9312                        08            .byte	8
37376                                           ! 7553                            8,
37377 9313                        08            .byte	8
37378                                           ! 7554                                 0,
37379 9314                        00            .byte	0
37380                                           ! 7555                            8,
37381 9315                        08            .byte	8
37382                                           ! 7556                                 24,
37383 9316                        18            .byte	$18
37384                                           ! 7557                          0,
37385 9317                      0000            .word	0
37386 9319                      0000            .word	0
37387                                           ! 7558 } },
37388                                           ! 7559 { 0x018d,
37389 931B                      018D            .word	$18D
37390                                           ! 7560 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37391 931D                      009B            .word	$9B
37392                                           ! 7561                           0x01 | 0x02 | 0x04,
37393 931F                        07            .byte	7
37394                                           ! 7562                           0,
37395 9320                        00            .byte	0
37396                                           ! 7563                           64,
37397 9321                      0040            .word	$40
37398                                           ! 7564                    64,
37399 9323                      0040            .word	$40
37400                                           ! 7565                        0xA000,
37401 9325                      A000            .word	$A000
37402                                           ! 7566                        0x0000,
37403 9327                      0000            .word	0
37404                                           ! 7567                       0,
37405 9329                      0000            .word	0
37406 932B                      0000            .word	0
37407                                           ! 7568                             2560,
37408 932D                      0A00            .word	$A00
37409                                           ! 7569                        1280,
37410 932F                      0500            .word	$500
37411                                           ! 7570                        720,
37412 9331                      02D0            .word	$2D0
37413                                           ! 7571                      8,
37414 9333                        08            .byte	8
37415                                           ! 7572                      16,
37416 9334                        10            .byte	$10
37417                                           ! 7573                           1,
37418 9335                        01            .byte	1
37419                                           ! 7574                         16,
37420 9336                        10            .byte	$10
37421                                           ! 7575                          29,
37422 9337                        1D            .byte	$1D
37423                                           ! 7576                        0x06,
37424 9338                        06            .byte	6
37425                                           ! 7577                     0,
37426 9339                        00            .byte	0
37427                                           ! 7578                               8,
37428 933A                        08            .byte	8
37429                                           ! 7579                          0,
37430 933B                        00            .byte	0
37431                                           ! 7580                        5,
37432 933C                        05            .byte	5
37433                                           ! 7581                             11,
37434 933D                        0B            .byte	$B
37435                                           ! 7582                          6,
37436 933E                        06            .byte	6
37437                                           ! 7583                               5,
37438 933F                        05            .byte	5
37439                                           ! 7584                         5,
37440 9340                        05            .byte	5
37441                                           ! 7585                              0,
37442 9341                        00            .byte	0
37443                                           ! 7586                         0,
37444 9342                        00            .byte	0
37445                                           ! 7587                              0,
37446 9343                        00            .byte	0
37447                                           ! 7588                                0,
37448 9344                        00            .byte	0
37449                                           ! 7589                        0xE0000000,
37450 9345                      0000            .word	0
37451 9347                      E000            .word	$E000
37452                                           ! 7590                               0,
37453 9349                      0000            .word	0
37454 934B                      0000            .word	0
37455                                           ! 7591                             0,
37456 934D                      0000            .word	0
37457                                           ! 7592                                2560,
37458 934F                      0A00            .word	$A00
37459                                           ! 7593                             0,
37460 9351                        00            .byte	0
37461                                           ! 7594                             0,
37462 9352                        00            .byte	0
37463                                           ! 7595                           5,
37464 9353                        05            .byte	5
37465                                           ! 7596                                11,
37466 9354                        0B            .byte	$B
37467                                           ! 7597                             6,
37468 9355                        06            .byte	6
37469                                           ! 7598                                  5,
37470 9356                        05            .byte	5
37471                                           ! 7599                            5,
37472 9357                        05            .byte	5
37473                                           ! 7600                                 0,
37474 9358                        00            .byte	0
37475                                           ! 7601                            0,
37476 9359                        00            .byte	0
37477                                           ! 7602                                 0,
37478 935A                        00            .byte	0
37479                                           ! 7603                          0,
37480 935B                      0000            .word	0
37481 935D                      0000            .word	0
37482                                           ! 7604 } },
37483                                           ! 7605 
37484                                           ! 7605 { 0x018e,
37485 935F                      018E            .word	$18E
37486                                           ! 7606 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37487 9361                      009B            .word	$9B
37488                                           ! 7607                           0x01 | 0x02 | 0x04,
37489 9363                        07            .byte	7
37490                                           ! 7608                           0,
37491 9364                        00            .byte	0
37492                                           ! 7609                           64,
37493 9365                      0040            .word	$40
37494                                           ! 7610                    64,
37495 9367                      0040            .word	$40
37496                                           ! 7611                        0xA000,
37497 9369                      A000            .word	$A000
37498                                           ! 7612                        0x0000,
37499 936B                      0000            .word	0
37500                                           ! 7613                       0,
37501 936D                      0000            .word	0
37502 936F                      0000            .word	0
37503                                           ! 7614                             3840,
37504 9371                      0F00            .word	$F00
37505                                           ! 7615                        1280,
37506 9373                      0500            .word	$500
37507                                           ! 7616                        720,
37508 9375                      02D0            .word	$2D0
37509                                           ! 7617                      8,
37510 9377                        08            .byte	8
37511                                           ! 7618                      16,
37512 9378                        10            .byte	$10
37513                                           ! 7619                           1,
37514 9379                        01            .byte	1
37515                                           ! 7620                         24,
37516 937A                        18            .byte	$18
37517                                           ! 7621                          43,
37518 937B                        2B            .byte	$2B
37519                                           ! 7622                        0x06,
37520 937C                        06            .byte	6
37521                                           ! 7623                     0,
37522 937D                        00            .byte	0
37523                                           ! 7624                               5,
37524 937E                        05            .byte	5
37525                                           ! 7625                          0,
37526 937F                        00            .byte	0
37527                                           ! 7626                        8,
37528 9380                        08            .byte	8
37529                                           ! 7627                             16,
37530 9381                        10            .byte	$10
37531                                           ! 7628                          8,
37532 9382                        08            .byte	8
37533                                           ! 7629                               8,
37534 9383                        08            .byte	8
37535                                           ! 7630                         8,
37536 9384                        08            .byte	8
37537                                           ! 7631                              0,
37538 9385                        00            .byte	0
37539                                           ! 7632                         0,
37540 9386                        00            .byte	0
37541                                           ! 7633                              0,
37542 9387                        00            .byte	0
37543                                           ! 7634                                0,
37544 9388                        00            .byte	0
37545                                           ! 7635                        0xE0000000,
37546 9389                      0000            .word	0
37547 938B                      E000            .word	$E000
37548                                           ! 7636                               0,
37549 938D                      0000            .word	0
37550 938F                      0000            .word	0
37551                                           ! 7637                             0,
37552 9391                      0000            .word	0
37553                                           ! 7638                                3840,
37554 9393                      0F00            .word	$F00
37555                                           ! 7639                             0,
37556 9395                        00            .byte	0
37557                                           ! 7640                             0,
37558 9396                        00            .byte	0
37559                                           ! 7641                           8,
37560 9397                        08            .byte	8
37561                                           ! 7642                                16,
37562 9398                        10            .byte	$10
37563                                           ! 7643                             8,
37564 9399                        08            .byte	8
37565                                           ! 7644                                  8,
37566 939A                        08            .byte	8
37567                                           ! 7645                            8,
37568 939B                        08            .byte	8
37569                                           ! 7646                                 0,
37570 939C                        00            .byte	0
37571                                           ! 7647                            0,
37572 939D                        00            .byte	0
37573                                           ! 7648                                 0,
37574 939E                        00            .byte	0
37575                                           ! 7649                          0,
37576 939F                      0000            .word	0
37577 93A1                      0000            .word	0
37578                                           ! 7650 } },
37579                                           ! 7651 { 0x018f,
37580 93A3                      018F            .word	$18F
37581                                           ! 7652 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37582 93A5                      009B            .word	$9B
37583                                           ! 7653                           0x01 | 0x02 | 0x04,
37584 93A7                        07            .byte	7
37585                                           ! 7654                           0,
37586 93A8                        00            .byte	0
37587                                           ! 7655                           64,
37588 93A9                      0040            .word	$40
37589                                           ! 7656                    64,
37590 93AB                      0040            .word	$40
37591                                           ! 7657                        0xA000,
37592 93AD                      A000            .word	$A000
37593                                           ! 7658                        0x0000,
37594 93AF                      0000            .word	0
37595                                           ! 7659                       0,
37596 93B1                      0000            .word	0
37597 93B3                      0000            .word	0
37598                                           ! 7660                             5120,
37599 93B5                      1400            .word	$1400
37600                                           ! 7661                        1280,
37601 93B7                      0500            .word	$500
37602                                           ! 7662                        720,
37603 93B9                      02D0            .word	$2D0
37604                                           ! 7663                      8,
37605 93BB                        08            .byte	8
37606                                           ! 7664                      16,
37607 93BC                        10            .byte	$10
37608                                           ! 7665                           1,
37609 93BD                        01            .byte	1
37610                                           ! 7666                         32,
37611 93BE                        20            .byte	$20
37612                                           ! 7667                          57,
37613 93BF                        39            .byte	$39
37614                                           ! 7668                        0x06,
37615 93C0                        06            .byte	6
37616                                           ! 7669                     0,
37617 93C1                        00            .byte	0
37618                                           ! 7670                               3,
37619 93C2                        03            .byte	3
37620                                           ! 7671                          0,
37621 93C3                        00            .byte	0
37622                                           ! 7672                        8,
37623 93C4                        08            .byte	8
37624                                           ! 7673                             16,
37625 93C5                        10            .byte	$10
37626                                           ! 7674        
37627                                           ! 7674                   8,
37628 93C6                        08            .byte	8
37629                                           ! 7675                               8,
37630 93C7                        08            .byte	8
37631                                           ! 7676                         8,
37632 93C8                        08            .byte	8
37633                                           ! 7677                              0,
37634 93C9                        00            .byte	0
37635                                           ! 7678                         8,
37636 93CA                        08            .byte	8
37637                                           ! 7679                              24,
37638 93CB                        18            .byte	$18
37639                                           ! 7680                                0x02,
37640 93CC                        02            .byte	2
37641                                           ! 7681                        0xE0000000,
37642 93CD                      0000            .word	0
37643 93CF                      E000            .word	$E000
37644                                           ! 7682                               0,
37645 93D1                      0000            .word	0
37646 93D3                      0000            .word	0
37647                                           ! 7683                             0,
37648 93D5                      0000            .word	0
37649                                           ! 7684                                5120,
37650 93D7                      1400            .word	$1400
37651                                           ! 7685                             0,
37652 93D9                        00            .byte	0
37653                                           ! 7686                             0,
37654 93DA                        00            .byte	0
37655                                           ! 7687                           8,
37656 93DB                        08            .byte	8
37657                                           ! 7688                                16,
37658 93DC                        10            .byte	$10
37659                                           ! 7689                             8,
37660 93DD                        08            .byte	8
37661                                           ! 7690                                  8,
37662 93DE                        08            .byte	8
37663                                           ! 7691                            8,
37664 93DF                        08            .byte	8
37665                                           ! 7692                                 0,
37666 93E0                        00            .byte	0
37667                                           ! 7693                            8,
37668 93E1                        08            .byte	8
37669                                           ! 7694                                 24,
37670 93E2                        18            .byte	$18
37671                                           ! 7695                          0,
37672 93E3                      0000            .word	0
37673 93E5                      0000            .word	0
37674                                           ! 7696 } },
37675                                           ! 7697 { 0x0190,
37676 93E7                      0190            .word	$190
37677                                           ! 7698 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37678 93E9                      009B            .word	$9B
37679                                           ! 7699                           0x01 | 0x02 | 0x04,
37680 93EB                        07            .byte	7
37681                                           ! 7700                           0,
37682 93EC                        00            .byte	0
37683                                           ! 7701                           64,
37684 93ED                      0040            .word	$40
37685                                           ! 7702                    64,
37686 93EF                      0040            .word	$40
37687                                           ! 7703                        0xA000,
37688 93F1                      A000            .word	$A000
37689                                           ! 7704                        0x0000,
37690 93F3                      0000            .word	0
37691                                           ! 7705                       0,
37692 93F5                      0000            .word	0
37693 93F7                      0000            .word	0
37694                                           ! 7706                             3840,
37695 93F9                      0F00            .word	$F00
37696                                           ! 7707                        1920,
37697 93FB                      0780            .word	$780
37698                                           ! 7708                        1080,
37699 93FD                      0438            .word	$438
37700                                           ! 7709                      8,
37701 93FF                        08            .byte	8
37702                                           ! 7710                      16,
37703 9400                        10            .byte	$10
37704                                           ! 7711                           1,
37705 9401                        01            .byte	1
37706                                           ! 7712                         16,
37707 9402                        10            .byte	$10
37708                                           ! 7713                          64,
37709 9403                        40            .byte	$40
37710                                           ! 7714                        0x06,
37711 9404                        06            .byte	6
37712                                           ! 7715                     0,
37713 9405                        00            .byte	0
37714                                           ! 7716                               3,
37715 9406                        03            .byte	3
37716                                           ! 7717                          0,
37717 9407                        00            .byte	0
37718                                           ! 7718                        5,
37719 9408                        05            .byte	5
37720                                           ! 7719                             11,
37721 9409                        0B            .byte	$B
37722                                           ! 7720                          6,
37723 940A                        06            .byte	6
37724                                           ! 7721                               5,
37725 940B                        05            .byte	5
37726                                           ! 7722                         5,
37727 940C                        05            .byte	5
37728                                           ! 7723                              0,
37729 940D                        00            .byte	0
37730                                           ! 7724                         0,
37731 940E                        00            .byte	0
37732                                           ! 7725                              0,
37733 940F                        00            .byte	0
37734                                           ! 7726                                0,
37735 9410                        00            .byte	0
37736                                           ! 7727                        0xE0000000,
37737 9411                      0000            .word	0
37738 9413                      E000            .word	$E000
37739                                           ! 7728                               0,
37740 9415                      0000            .word	0
37741 9417                      0000            .word	0
37742                                           ! 7729                             0,
37743 9419                      0000            .word	0
37744                                           ! 7730                                3840,
37745 941B                      0F00            .word	$F00
37746                                           ! 7731                             0,
37747 941D                        00            .byte	0
37748                                           ! 7732                             0,
37749 941E                        00            .byte	0
37750                                           ! 7733                           5,
37751 941F                        05            .byte	5
37752                                           ! 7734                                11,
37753 9420                        0B            .byte	$B
37754                                           ! 7735                             6,
37755 9421                        06            .byte	6
37756                                           ! 7736                                  5,
37757 9422                        05            .byte	5
37758                                           ! 7737                            5,
37759 9423                        05            .byte	5
37760                                           ! 7738                                 0,
37761 9424                        00            .byte	0
37762                                           ! 7739                            0,
37763 9425                        00            .byte	0
37764                                           ! 7740                                 0,
37765 9426                        00            .byte	0
37766                                           ! 7741     
37767                                           ! 7741                      0,
37768 9427                      0000            .word	0
37769 9429                      0000            .word	0
37770                                           ! 7742 } },
37771                                           ! 7743 { 0x0191,
37772 942B                      0191            .word	$191
37773                                           ! 7744 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37774 942D                      009B            .word	$9B
37775                                           ! 7745                           0x01 | 0x02 | 0x04,
37776 942F                        07            .byte	7
37777                                           ! 7746                           0,
37778 9430                        00            .byte	0
37779                                           ! 7747                           64,
37780 9431                      0040            .word	$40
37781                                           ! 7748                    64,
37782 9433                      0040            .word	$40
37783                                           ! 7749                        0xA000,
37784 9435                      A000            .word	$A000
37785                                           ! 7750                        0x0000,
37786 9437                      0000            .word	0
37787                                           ! 7751                       0,
37788 9439                      0000            .word	0
37789 943B                      0000            .word	0
37790                                           ! 7752                             5760,
37791 943D                      1680            .word	$1680
37792                                           ! 7753                        1920,
37793 943F                      0780            .word	$780
37794                                           ! 7754                        1080,
37795 9441                      0438            .word	$438
37796                                           ! 7755                      8,
37797 9443                        08            .byte	8
37798                                           ! 7756                      16,
37799 9444                        10            .byte	$10
37800                                           ! 7757                           1,
37801 9445                        01            .byte	1
37802                                           ! 7758                         24,
37803 9446                        18            .byte	$18
37804                                           ! 7759                          95,
37805 9447                        5F            .byte	$5F
37806                                           ! 7760                        0x06,
37807 9448                        06            .byte	6
37808                                           ! 7761                     0,
37809 9449                        00            .byte	0
37810                                           ! 7762                               1,
37811 944A                        01            .byte	1
37812                                           ! 7763                          0,
37813 944B                        00            .byte	0
37814                                           ! 7764                        8,
37815 944C                        08            .byte	8
37816                                           ! 7765                             16,
37817 944D                        10            .byte	$10
37818                                           ! 7766                          8,
37819 944E                        08            .byte	8
37820                                           ! 7767                               8,
37821 944F                        08            .byte	8
37822                                           ! 7768                         8,
37823 9450                        08            .byte	8
37824                                           ! 7769                              0,
37825 9451                        00            .byte	0
37826                                           ! 7770                         0,
37827 9452                        00            .byte	0
37828                                           ! 7771                              0,
37829 9453                        00            .byte	0
37830                                           ! 7772                                0,
37831 9454                        00            .byte	0
37832                                           ! 7773                        0xE0000000,
37833 9455                      0000            .word	0
37834 9457                      E000            .word	$E000
37835                                           ! 7774                               0,
37836 9459                      0000            .word	0
37837 945B                      0000            .word	0
37838                                           ! 7775                             0,
37839 945D                      0000            .word	0
37840                                           ! 7776                                5760,
37841 945F                      1680            .word	$1680
37842                                           ! 7777                             0,
37843 9461                        00            .byte	0
37844                                           ! 7778                             0,
37845 9462                        00            .byte	0
37846                                           ! 7779                           8,
37847 9463                        08            .byte	8
37848                                           ! 7780                                16,
37849 9464                        10            .byte	$10
37850                                           ! 7781                             8,
37851 9465                        08            .byte	8
37852                                           ! 7782                                  8,
37853 9466                        08            .byte	8
37854                                           ! 7783                            8,
37855 9467                        08            .byte	8
37856                                           ! 7784                                 0,
37857 9468                        00            .byte	0
37858                                           ! 7785                            0,
37859 9469                        00            .byte	0
37860                                           ! 7786                                 0,
37861 946A                        00            .byte	0
37862                                           ! 7787                          0,
37863 946B                      0000            .word	0
37864 946D                      0000            .word	0
37865                                           ! 7788 } },
37866                                           ! 7789 { 0x0192,
37867 946F                      0192            .word	$192
37868                                           ! 7790 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37869 9471                      009B            .word	$9B
37870                                           ! 7791                           0x01 | 0x02 | 0x04,
37871 9473                        07            .byte	7
37872                                           ! 7792                           0,
37873 9474                        00            .byte	0
37874                                           ! 7793                           64,
37875 9475                      0040            .word	$40
37876                                           ! 7794                    64,
37877 9477                      0040            .word	$40
37878                                           ! 7795                        0xA000,
37879 9479                      A000            .word	$A000
37880                                           ! 7796                        0x0000,
37881 947B                      0000            .word	0
37882                                           ! 7797                       0,
37883 947D                      0000            .word	0
37884 947F                      0000            .word	0
37885                                           ! 7798                             7680,
37886 9481                      1E00            .word	$1E00
37887                                           ! 7799                        1920,
37888 9483                      0780            .word	$780
37889                                           ! 7800                        1080,
37890 9485                      0438            .word	$438
37891                                           ! 7801                      8,
37892 9487                        08            .byte	8
37893                                           ! 7802                      16,
37894 9488                        10            .byte	$10
37895                                           ! 7803                           1,
37896 9489                        01            .byte	1
37897                                           ! 7804                         32,
37898 948A                        20            .byte	$20
37899                                           ! 7805                          127,
37900 948B                        7F            .byte	$7F
37901                                           ! 7806                        0x06,
37902 948C                        06            .byte	6
37903                                           ! 7807                     0,
37904 948D                        00            .byte	0
37905                                           ! 7808                               1,
37906 948E                        01            .byte	1
37907                                           ! 7809                          0,
37908 948F                        00            .byte	0
37909                                           ! 7810                        8,
37910 9490                        08            .byte	8
37911                                           ! 7811        
37912                                           ! 7811                      16,
37913 9491                        10            .byte	$10
37914                                           ! 7812                          8,
37915 9492                        08            .byte	8
37916                                           ! 7813                               8,
37917 9493                        08            .byte	8
37918                                           ! 7814                         8,
37919 9494                        08            .byte	8
37920                                           ! 7815                              0,
37921 9495                        00            .byte	0
37922                                           ! 7816                         8,
37923 9496                        08            .byte	8
37924                                           ! 7817                              24,
37925 9497                        18            .byte	$18
37926                                           ! 7818                                0x02,
37927 9498                        02            .byte	2
37928                                           ! 7819                        0xE0000000,
37929 9499                      0000            .word	0
37930 949B                      E000            .word	$E000
37931                                           ! 7820                               0,
37932 949D                      0000            .word	0
37933 949F                      0000            .word	0
37934                                           ! 7821                             0,
37935 94A1                      0000            .word	0
37936                                           ! 7822                                7680,
37937 94A3                      1E00            .word	$1E00
37938                                           ! 7823                             0,
37939 94A5                        00            .byte	0
37940                                           ! 7824                             0,
37941 94A6                        00            .byte	0
37942                                           ! 7825                           8,
37943 94A7                        08            .byte	8
37944                                           ! 7826                                16,
37945 94A8                        10            .byte	$10
37946                                           ! 7827                             8,
37947 94A9                        08            .byte	8
37948                                           ! 7828                                  8,
37949 94AA                        08            .byte	8
37950                                           ! 7829                            8,
37951 94AB                        08            .byte	8
37952                                           ! 7830                                 0,
37953 94AC                        00            .byte	0
37954                                           ! 7831                            8,
37955 94AD                        08            .byte	8
37956                                           ! 7832                                 24,
37957 94AE                        18            .byte	$18
37958                                           ! 7833                          0,
37959 94AF                      0000            .word	0
37960 94B1                      0000            .word	0
37961                                           ! 7834 } },
37962                                           ! 7835 { 0x0193,
37963 94B3                      0193            .word	$193
37964                                           ! 7836 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37965 94B5                      009B            .word	$9B
37966                                           ! 7837                           0x01 | 0x02 | 0x04,
37967 94B7                        07            .byte	7
37968                                           ! 7838                           0,
37969 94B8                        00            .byte	0
37970                                           ! 7839                           64,
37971 94B9                      0040            .word	$40
37972                                           ! 7840                    64,
37973 94BB                      0040            .word	$40
37974                                           ! 7841                        0xA000,
37975 94BD                      A000            .word	$A000
37976                                           ! 7842                        0x0000,
37977 94BF                      0000            .word	0
37978                                           ! 7843                       0,
37979 94C1                      0000            .word	0
37980 94C3                      0000            .word	0
37981                                           ! 7844                             3200,
37982 94C5                      0C80            .word	$C80
37983                                           ! 7845                        1600,
37984 94C7                      0640            .word	$640
37985                                           ! 7846                        900,
37986 94C9                      0384            .word	$384
37987                                           ! 7847                      8,
37988 94CB                        08            .byte	8
37989                                           ! 7848                      16,
37990 94CC                        10            .byte	$10
37991                                           ! 7849                           1,
37992 94CD                        01            .byte	1
37993                                           ! 7850                         16,
37994 94CE                        10            .byte	$10
37995                                           ! 7851                          44,
37996 94CF                        2C            .byte	$2C
37997                                           ! 7852                        0x06,
37998 94D0                        06            .byte	6
37999                                           ! 7853                     0,
38000 94D1                        00            .byte	0
38001                                           ! 7854                               4,
38002 94D2                        04            .byte	4
38003                                           ! 7855                          0,
38004 94D3                        00            .byte	0
38005                                           ! 7856                        5,
38006 94D4                        05            .byte	5
38007                                           ! 7857                             11,
38008 94D5                        0B            .byte	$B
38009                                           ! 7858                          6,
38010 94D6                        06            .byte	6
38011                                           ! 7859                               5,
38012 94D7                        05            .byte	5
38013                                           ! 7860                         5,
38014 94D8                        05            .byte	5
38015                                           ! 7861                              0,
38016 94D9                        00            .byte	0
38017                                           ! 7862                         0,
38018 94DA                        00            .byte	0
38019                                           ! 7863                              0,
38020 94DB                        00            .byte	0
38021                                           ! 7864                                0,
38022 94DC                        00            .byte	0
38023                                           ! 7865                        0xE0000000,
38024 94DD                      0000            .word	0
38025 94DF                      E000            .word	$E000
38026                                           ! 7866                               0,
38027 94E1                      0000            .word	0
38028 94E3                      0000            .word	0
38029                                           ! 7867                             0,
38030 94E5                      0000            .word	0
38031                                           ! 7868                                3200,
38032 94E7                      0C80            .word	$C80
38033                                           ! 7869                             0,
38034 94E9                        00            .byte	0
38035                                           ! 7870                             0,
38036 94EA                        00            .byte	0
38037                                           ! 7871                           5,
38038 94EB                        05            .byte	5
38039                                           ! 7872                                11,
38040 94EC                        0B            .byte	$B
38041                                           ! 7873                             6,
38042 94ED                        06            .byte	6
38043                                           ! 7874                                  5,
38044 94EE                        05            .byte	5
38045                                           ! 7875                            5,
38046 94EF                        05            .byte	5
38047                                           ! 7876                                 0,
38048 94F0                        00            .byte	0
38049                                           ! 7877                            0,
38050 94F1                        00            .byte	0
38051                                           ! 7878         
38052                                           ! 7878                         0,
38053 94F2                        00            .byte	0
38054                                           ! 7879                          0,
38055 94F3                      0000            .word	0
38056 94F5                      0000            .word	0
38057                                           ! 7880 } },
38058                                           ! 7881 { 0x0194,
38059 94F7                      0194            .word	$194
38060                                           ! 7882 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
38061 94F9                      009B            .word	$9B
38062                                           ! 7883                           0x01 | 0x02 | 0x04,
38063 94FB                        07            .byte	7
38064                                           ! 7884                           0,
38065 94FC                        00            .byte	0
38066                                           ! 7885                           64,
38067 94FD                      0040            .word	$40
38068                                           ! 7886                    64,
38069 94FF                      0040            .word	$40
38070                                           ! 7887                        0xA000,
38071 9501                      A000            .word	$A000
38072                                           ! 7888                        0x0000,
38073 9503                      0000            .word	0
38074                                           ! 7889                       0,
38075 9505                      0000            .word	0
38076 9507                      0000            .word	0
38077                                           ! 7890                             4800,
38078 9509                      12C0            .word	$12C0
38079                                           ! 7891                        1600,
38080 950B                      0640            .word	$640
38081                                           ! 7892                        900,
38082 950D                      0384            .word	$384
38083                                           ! 7893                      8,
38084 950F                        08            .byte	8
38085                                           ! 7894                      16,
38086 9510                        10            .byte	$10
38087                                           ! 7895                           1,
38088 9511                        01            .byte	1
38089                                           ! 7896                         24,
38090 9512                        18            .byte	$18
38091                                           ! 7897                          66,
38092 9513                        42            .byte	$42
38093                                           ! 7898                        0x06,
38094 9514                        06            .byte	6
38095                                           ! 7899                     0,
38096 9515                        00            .byte	0
38097                                           ! 7900                               2,
38098 9516                        02            .byte	2
38099                                           ! 7901                          0,
38100 9517                        00            .byte	0
38101                                           ! 7902                        8,
38102 9518                        08            .byte	8
38103                                           ! 7903                             16,
38104 9519                        10            .byte	$10
38105                                           ! 7904                          8,
38106 951A                        08            .byte	8
38107                                           ! 7905                               8,
38108 951B                        08            .byte	8
38109                                           ! 7906                         8,
38110 951C                        08            .byte	8
38111                                           ! 7907                              0,
38112 951D                        00            .byte	0
38113                                           ! 7908                         0,
38114 951E                        00            .byte	0
38115                                           ! 7909                              0,
38116 951F                        00            .byte	0
38117                                           ! 7910                                0,
38118 9520                        00            .byte	0
38119                                           ! 7911                        0xE0000000,
38120 9521                      0000            .word	0
38121 9523                      E000            .word	$E000
38122                                           ! 7912                               0,
38123 9525                      0000            .word	0
38124 9527                      0000            .word	0
38125                                           ! 7913                             0,
38126 9529                      0000            .word	0
38127                                           ! 7914                                4800,
38128 952B                      12C0            .word	$12C0
38129                                           ! 7915                             0,
38130 952D                        00            .byte	0
38131                                           ! 7916                             0,
38132 952E                        00            .byte	0
38133                                           ! 7917                           8,
38134 952F                        08            .byte	8
38135                                           ! 7918                                16,
38136 9530                        10            .byte	$10
38137                                           ! 7919                             8,
38138 9531                        08            .byte	8
38139                                           ! 7920                                  8,
38140 9532                        08            .byte	8
38141                                           ! 7921                            8,
38142 9533                        08            .byte	8
38143                                           ! 7922                                 0,
38144 9534                        00            .byte	0
38145                                           ! 7923                            0,
38146 9535                        00            .byte	0
38147                                           ! 7924                                 0,
38148 9536                        00            .byte	0
38149                                           ! 7925                          0,
38150 9537                      0000            .word	0
38151 9539                      0000            .word	0
38152                                           ! 7926 } },
38153                                           ! 7927 { 0x0195,
38154 953B                      0195            .word	$195
38155                                           ! 7928 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
38156 953D                      009B            .word	$9B
38157                                           ! 7929                           0x01 | 0x02 | 0x04,
38158 953F                        07            .byte	7
38159                                           ! 7930                           0,
38160 9540                        00            .byte	0
38161                                           ! 7931                           64,
38162 9541                      0040            .word	$40
38163                                           ! 7932                    64,
38164 9543                      0040            .word	$40
38165                                           ! 7933                        0xA000,
38166 9545                      A000            .word	$A000
38167                                           ! 7934                        0x0000,
38168 9547                      0000            .word	0
38169                                           ! 7935                       0,
38170 9549                      0000            .word	0
38171 954B                      0000            .word	0
38172                                           ! 7936                             6400,
38173 954D                      1900            .word	$1900
38174                                           ! 7937                        1600,
38175 954F                      0640            .word	$640
38176                                           ! 7938                        900,
38177 9551                      0384            .word	$384
38178                                           ! 7939                      8,
38179 9553                        08            .byte	8
38180                                           ! 7940                      16,
38181 9554                        10            .byte	$10
38182                                           ! 7941                           1,
38183 9555                        01            .byte	1
38184                                           ! 7942                         32,
38185 9556                        20            .byte	$20
38186                                           ! 7943                          88,
38187 9557                        58            .byte	$58
38188                                           ! 7944                        0x06,
38189 9558                        06            .byte	6
38190                                           ! 7945                     0,
38191 9559                        00            .byte	0
38192                                           ! 7946                               1,
38193 955A                        01            .byte	1
38194                                           ! 7947                          0,
38195 955B                        00            .byte	0
38196                                           ! 7948      
38197                                           ! 7948                   8,
38198 955C                        08            .byte	8
38199                                           ! 7949                             16,
38200 955D                        10            .byte	$10
38201                                           ! 7950                          8,
38202 955E                        08            .byte	8
38203                                           ! 7951                               8,
38204 955F                        08            .byte	8
38205                                           ! 7952                         8,
38206 9560                        08            .byte	8
38207                                           ! 7953                              0,
38208 9561                        00            .byte	0
38209                                           ! 7954                         8,
38210 9562                        08            .byte	8
38211                                           ! 7955                              24,
38212 9563                        18            .byte	$18
38213                                           ! 7956                                0x02,
38214 9564                        02            .byte	2
38215                                           ! 7957                        0xE0000000,
38216 9565                      0000            .word	0
38217 9567                      E000            .word	$E000
38218                                           ! 7958                               0,
38219 9569                      0000            .word	0
38220 956B                      0000            .word	0
38221                                           ! 7959                             0,
38222 956D                      0000            .word	0
38223                                           ! 7960                                6400,
38224 956F                      1900            .word	$1900
38225                                           ! 7961                             0,
38226 9571                        00            .byte	0
38227                                           ! 7962                             0,
38228 9572                        00            .byte	0
38229                                           ! 7963                           8,
38230 9573                        08            .byte	8
38231                                           ! 7964                                16,
38232 9574                        10            .byte	$10
38233                                           ! 7965                             8,
38234 9575                        08            .byte	8
38235                                           ! 7966                                  8,
38236 9576                        08            .byte	8
38237                                           ! 7967                            8,
38238 9577                        08            .byte	8
38239                                           ! 7968                                 0,
38240 9578                        00            .byte	0
38241                                           ! 7969                            8,
38242 9579                        08            .byte	8
38243                                           ! 7970                                 24,
38244 957A                        18            .byte	$18
38245                                           ! 7971                          0,
38246 957B                      0000            .word	0
38247 957D                      0000            .word	0
38248                                           ! 7972 } },
38249                                           ! 7973 { 0xFFFF,
38250 957F                      FFFF            .word	$FFFF
38251                                           ! 7974 { 0,
38252 9581                      0000            .word	0
38253                                           ! 7975 } },
38254 9583                  00000040            .blkb	$40
38255                                           ! 7976 };
38256                                           !BCC_EOS
38257                                           ! 7977 extern char vbebios_copyright;
38258                                           !BCC_EOS
38259                                           ! 7978 extern char vbebios_vendor_name;
38260                                           !BCC_EOS
38261                                           ! 7979 extern char vbebios_product_name;
38262                                           !BCC_EOS
38263                                           ! 7980 extern char vbebios_product_revision;
38264                                           !BCC_EOS
38265                                           ! 7981 #asm
38266                                           !BCC_ASM
38267                       000095C3            _vbebios_copyright:
38268 95C3                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
38269 9608                        00            .byte 0x00
38270                       00009609            _vbebios_vendor_name:
38271 9609                        42            .ascii "Bochs/Plex86 Developers"
38272 9620                        00            .byte 0x00
38273                       00009621            _vbebios_product_name:
38274 9621                        42            .ascii "Bochs/Plex86 VBE Adapter"
38275 9639                        00            .byte 0x00
38276                       0000963A            _vbebios_product_revision:
38277 963A                        24            .ascii "$Id: vbe.c,v 1.64 2011/07/19 18:25:05 vruppert Exp $"
38278 966E                        00            .byte 0x00
38279                       0000966F            _vbebios_info_string:
38280 966F                        42            .ascii "Bochs VBE Display Adapter enabled"
38281 9690                        0A            .byte 0x0a,0x0d
38282 9692                        0A            .byte 0x0a,0x0d
38283 9694                        00            .byte 0x00
38284                       00009695            _no_vbebios_info_string:
38285 9695                        4E            .ascii "NO Bochs VBE Support available!"
38286 96B4                        0A            .byte 0x0a,0x0d
38287 96B6                        0A            .byte 0x0a,0x0d
38288 96B8                        00            .byte 0x00
38289                       000096B9            msg_vbe_init:
38290 96B9                        56            .ascii "VBE Bios $Id: vbe.c,v 1.64 2011/07/19 18:25:05 vruppert Exp $"
38291 96F6                        0A            .byte 0x0a,0x0d, 0x00
38292 96F9                  00000002              .align 2
38293                       000096FA            vesa_pm_start:
38294 96FA                      0014              dw vesa_pm_set_window - vesa_pm_start
38295 96FC                      004B              dw vesa_pm_set_display_start - vesa_pm_start
38296 96FE                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
38297 9700                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
38298                       00009702            vesa_pm_io_ports_table:
38299 9702                      01CE              dw 0x01CE
38300 9704                      01CF              dw 0x01CE + 1
38301 9706                      01CF              dw 0x01CF
38302 9708                      01D0              dw 0x01CF + 1
38303 970A                      FFFF              dw 0xffff
38304 970C                      FFFF              dw 0xffff
38305                                             USE32
38306                       0000970E            vesa_pm_set_window:
38307 970E     66    83FB                   00    cmp bx, #0x00
38308 9712           74           05              je vesa_pm_set_display_window1
38309 9714     66    B8                   0100    mov ax, #0x0100
38310 9718           C3                           ret
38311                       00009719            vesa_pm_set_display_window1:
38312 9719     66    89D0                         mov ax, dx
38313 971C     66    52                           push dx
38314 971E     66    50                           push ax
38315 9720     66    BA                   01CE    mov dx, # 0x01CE
38316 9724     66    B8                   0005    mov ax, # 0x5
38317 9728     66    EF                           out dx, ax
38318 972A     66    58                           pop ax
38319 972C     66    BA                   01CF    mov dx, # 0x01CF
38320 9730     66    EF                           out dx, ax
38321 9732     66    ED                           in ax, dx
38322 9734     66    5A                           pop dx
38323 9736     66    39C2                         cmp dx, ax
38324 9739           75           05              jne illegal_window
38325 973B     66    B8                   004F    mov ax, #0x004f
38326 973F           C3                           ret
38327                       00009740            illegal_window:
38328 9740     66    B8                   014F    mov ax, #0x014f
38329 9744           C3                           ret
38330                       00009745            vesa_pm_set_display_start:
38331 9745           80FB                   80    cmp bl, #0x80
38332 9748           74           0A              je vesa_pm_set_display_start1
38333 974A           80FB                   00    cmp bl, #0x00
38334 974D           74           05              je vesa_pm_set_display_start1
38335 974F     66    B8                   0100    mov ax, #0x0100
38336 9753           C3                           ret
38337                       00009754            vesa_pm_set_display_start1:
38338                                           ; convert offset to (X, Y) coordinate
38339                                           ; (would be simpler to change Bochs 1 API...)
38340 9754           50                           push eax
38341 9755           51                           push ecx
38342 9756           52                           push edx
38343 9757           56                           push esi
38344 9758           57                           push edi
38345 9759           C1E2                   10    shl edx, #16
38346 975C           81E1             0000FFFF    and ecx, #0xffff
38347 9762           09D1                         or ecx, edx
38348 9764           C1E1                   02    shl ecx, #2
38349 9767           89C8                         mov eax, ecx
38350 9769           50                           push eax
38351 976A     66    BA                   01CE    mov dx, # 0x01CE
38352 976E     66    B8                   0006    mov ax, # 0x6
38353 9772     66    EF                           out dx, ax
38354 9774     66    BA                   01CF    mov dx, # 0x01CF
38355 9778     66    ED                           in ax, dx
38356 977A         0FB7C8                         movzx ecx, ax
38357 977D     66    BA                   01CE    mov dx, # 0x01CE
38358 9781     66    B8                   0003    mov ax, # 0x3
38359 9785     66    EF                           out dx, ax
38360 9787     66    BA                   01CF    mov dx, # 0x01CF
38361 978B     66    ED                           in ax, dx
38362 978D         0FB7F0                         movzx esi, ax
38363 9790           58                           pop eax
38364 9791           83FE                   04    cmp esi, #4
38365 9794           74           17              jz bpp4_mode
38366 9796           83C6                   07    add esi, #7
38367 9799           C1EE                   03    shr esi, #3
38368 979C         0FAFCE                         imul ecx, esi
38369 979F           31D2                         xor edx, edx
38370 97A1           F7F1                         div ecx
38371 97A3           89C7                         mov edi, eax
38372 97A5           89D0                         mov eax, edx
38373 97A7           31D2                         xor edx, edx
38374 97A9           F7F6                         div esi
38375 97AB           EB           0C              jmp set_xy_regs
38376                       000097AD            bpp4_mode:
38377 97AD           D1E9                         shr ecx, #1
38378 97AF           31D2                         xor edx, edx
38379 97B1           F7F1                         div ecx
38380 97B3           89C7                         mov edi, eax
38381 97B5           89D0                         mov eax, edx
38382 97B7           D1E0                         shl eax, #1
38383                       000097B9            set_xy_regs:
38384 97B9     66    52                           push dx
38385 97BB     66    50                           push ax
38386 97BD     66    BA                   01CE    mov dx, # 0x01CE
38387 97C1     66    B8                   0008    mov ax, # 0x8
38388 97C5     66    EF                           out dx, ax
38389 97C7     66    58                           pop ax
38390 97C9     66    BA                   01CF    mov dx, # 0x01CF
38391 97CD     66    EF                           out dx, ax
38392 97CF     66    5A                           pop dx
38393 97D1     66    89F8                         mov ax, di
38394 97D4     66    52                           push dx
38395 97D6     66    50                           push ax
38396 97D8     66    BA                   01CE    mov dx, # 0x01CE
38397 97DC     66    B8                   0009    mov ax, # 0x9
38398 97E0     66    EF                           out dx, ax
38399 97E2     66    58                           pop ax
38400 97E4     66    BA                   01CF    mov dx, # 0x01CF
38401 97E8     66    EF                           out dx, ax
38402 97EA     66    5A                           pop dx
38403 97EC           5F                           pop edi
38404 97ED           5E                           pop esi
38405 97EE           5A                           pop edx
38406 97EF           59                           pop ecx
38407 97F0           58                           pop eax
38408 97F1     66    B8                   004F    mov ax, #0x004f
38409 97F5           C3                           ret
38410                       000097F6            vesa_pm_unimplemented:
38411 97F6     66    B8                   014F    mov ax, #0x014f
38412 97FA           C3                           ret
38413                                             USE16
38414                       000097FB            vesa_pm_end:
38415                                           ; DISPI ioport functions
38416                       000097FB            dispi_get_id:
38417 97FB           52                           push dx
38418 97FC           BA                   01CE    mov dx, # 0x01CE
38419 97FF           B8                   0000    mov ax, # 0x0
38420 9802           EF                           out dx, ax
38421 9803           BA                   01CF    mov dx, # 0x01CF
38422 9806           ED                           in ax, dx
38423 9807           5A                           pop dx
38424 9808           C3                           ret
38425                       00009809            dispi_set_id:
38426 9809           52                           push dx
38427 980A           50                           push ax
38428 980B           BA                   01CE    mov dx, # 0x01CE
38429 980E           B8                   0000    mov ax, # 0x0
38430 9811           EF                           out dx, ax
38431 9812           58                           pop ax
38432 9813           BA                   01CF    mov dx, # 0x01CF
38433 9816           EF                           out dx, ax
38434 9817           5A                           pop dx
38435 9818           C3                           ret
38436                                           ! 8151 endasm
38437                                           !BCC_ENDASM
38438                                           ! 8152 static void dispi_set_xres(xres)
38439                                           ! 8153   Bit16u xres;
38440                                           
38441                       00009819            _dispi_set_xres:
38442                                           !BCC_EOS
38443                                           ! 8154 {
38444                                           ! 8155 #asm
38445                                           !BCC_ASM
38446                       00000002            _dispi_set_xres.xres	set	2
38447 9819           55                           push bp
38448 981A           89E5                         mov bp, sp
38449 981C           50                           push ax
38450 981D           52                           push dx
38451 981E           BA                   01CE    mov dx, # 0x01CE
38452 9821           B8                   0001    mov ax, # 0x1
38453 9824           EF                           out dx, ax
38454 9825           BA                   01CF    mov dx, # 0x01CF
38455 9828           8B46         04              mov ax, 4[bp] ; xres
38456 982B           EF                           out dx, ax
38457 982C           5A                           pop dx
38458 982D           58                           pop ax
38459 982E           5D                           pop bp
38460                                           ! 8169 endasm
38461                                           !BCC_ENDASM
38462                                           ! 8170 }
38463 982F           C3                         ret
38464                                           ! 8171 static void dispi_set_yres(y
38465                                           ! 8171 res)
38466                                           ! 8172   Bit16u yres;
38467                       00009830            _dispi_set_yres:
38468                                           !BCC_EOS
38469                                           ! 8173 {
38470                                           ! 8174   outw(0x01CE,0x2);
38471 9830           55                         push	bp
38472 9831           89E5                       mov	bp,sp
38473                                           ! Debug: list int = const 2 (used reg = )
38474 9833           B8                   0002  mov	ax,*2
38475 9836           50                         push	ax
38476                                           ! Debug: list int = const $1CE (used reg = )
38477 9837           B8                   01CE  mov	ax,#$1CE
38478 983A           50                         push	ax
38479                                           ! Debug: func () void = outw+0 (used reg = )
38480 983B           E8         E80D            call	_outw
38481 983E           89EC                       mov	sp,bp
38482                                           !BCC_EOS
38483                                           ! 8175   outw(0x01CF,yres);
38484                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
38485 9840           FF76         04            push	4[bp]
38486                                           ! Debug: list int = const $1CF (used reg = )
38487 9843           B8                   01CF  mov	ax,#$1CF
38488 9846           50                         push	ax
38489                                           ! Debug: func () void = outw+0 (used reg = )
38490 9847           E8         E801            call	_outw
38491 984A           89EC                       mov	sp,bp
38492                                           !BCC_EOS
38493                                           ! 8176 }
38494 984C           5D                         pop	bp
38495 984D           C3                         ret
38496                                           ! 8177 static void dispi_set_bpp(bpp)
38497                                           ! 8178   Bit16u bpp;
38498                       0000984E            _dispi_set_bpp:
38499                                           !BCC_EOS
38500                                           ! 8179 {
38501                                           ! 8180   outw(0x01CE,0x3);
38502 984E           55                         push	bp
38503 984F           89E5                       mov	bp,sp
38504                                           ! Debug: list int = const 3 (used reg = )
38505 9851           B8                   0003  mov	ax,*3
38506 9854           50                         push	ax
38507                                           ! Debug: list int = const $1CE (used reg = )
38508 9855           B8                   01CE  mov	ax,#$1CE
38509 9858           50                         push	ax
38510                                           ! Debug: func () void = outw+0 (used reg = )
38511 9859           E8         E7EF            call	_outw
38512 985C           89EC                       mov	sp,bp
38513                                           !BCC_EOS
38514                                           ! 8181   outw(0x01CF,bpp);
38515                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
38516 985E           FF76         04            push	4[bp]
38517                                           ! Debug: list int = const $1CF (used reg = )
38518 9861           B8                   01CF  mov	ax,#$1CF
38519 9864           50                         push	ax
38520                                           ! Debug: func () void = outw+0 (used reg = )
38521 9865           E8         E7E3            call	_outw
38522 9868           89EC                       mov	sp,bp
38523                                           !BCC_EOS
38524                                           ! 8182 }
38525 986A           5D                         pop	bp
38526 986B           C3                         ret
38527                                           ! 8183 #asm
38528                                           !BCC_ASM
38529                       00000002            _dispi_set_bpp.bpp	set	2
38530                                           ; AL = bits per pixel / AH = bytes per pixel
38531                       0000986C            dispi_get_bpp:
38532 986C           52                           push dx
38533 986D           BA                   01CE    mov dx, # 0x01CE
38534 9870           B8                   0003    mov ax, # 0x3
38535 9873           EF                           out dx, ax
38536 9874           BA                   01CF    mov dx, # 0x01CF
38537 9877           ED                           in ax, dx
38538 9878           88C4                         mov ah, al
38539 987A           C0EC                   03    shr ah, 3
38540 987D           A8                     07    test al, #0x07
38541 987F           74           02              jz get_bpp_noinc
38542 9881           FEC4                         inc ah
38543                       00009883            get_bpp_noinc:
38544 9883           5A                           pop dx
38545 9884           C3                           ret
38546                                           ; get display capabilities
38547                       00009885            _dispi_get_max_xres:
38548 9885           52                           push dx
38549 9886           53                           push bx
38550 9887           E8         004F              call dispi_get_enable
38551 988A           89C3                         mov bx, ax
38552 988C           0D                   0002    or ax, # 0x02
38553 988F           E8         0037              call _dispi_set_enable
38554 9892           BA                   01CE    mov dx, # 0x01CE
38555 9895           B8                   0001    mov ax, # 0x1
38556 9898           EF                           out dx, ax
38557 9899           BA                   01CF    mov dx, # 0x01CF
38558 989C           ED                           in ax, dx
38559 989D           50                           push ax
38560 989E           89D8                         mov ax, bx
38561 98A0           E8         0026              call _dispi_set_enable
38562 98A3           58                           pop ax
38563 98A4           5B                           pop bx
38564 98A5           5A                           pop dx
38565 98A6           C3                           ret
38566                       000098A7            _dispi_get_max_bpp:
38567 98A7           52                           push dx
38568 98A8           53                           push bx
38569 98A9           E8         002D              call dispi_get_enable
38570 98AC           89C3                         mov bx, ax
38571 98AE           0D                   0002    or ax, # 0x02
38572 98B1           E8         0015              call _dispi_set_enable
38573 98B4           BA                   01CE    mov dx, # 0x01CE
38574 98B7           B8                   0003    mov ax, # 0x3
38575 98BA           EF                           out dx, ax
38576 98BB           BA                   01CF    mov dx, # 0x01CF
38577 98BE           ED                           in ax, dx
38578 98BF           50                           push ax
38579 98C0           89D8                         mov ax, bx
38580 98C2           E8         0004              call _dispi_set_enable
38581 98C5           58                           pop ax
38582 98C6           5B                           pop bx
38583 98C7           5A                           pop dx
38584 98C8           C3                           ret
38585                       000098C9            _dispi_set_enable:
38586 98C9           52                           push dx
38587 98CA           50                           push ax
38588 98CB           BA                   01CE    mov dx, # 0x01CE
38589 98CE           B8                   0004    mov ax, # 0x4
38590 98D1           EF                           out dx, ax
38591 98D2           58                           pop ax
38592 98D3           BA                   01CF    mov dx, # 0x01CF
38593 98D6           EF                           out dx, ax
38594 98D7           5A                           pop dx
38595 98D8           C3                           ret
38596                       000098D9            dispi_get_enable:
38597 98D9           52                           push dx
38598 98DA           BA                   01CE    mov dx, # 0x01CE
38599 98DD           B8                   0004    mov ax, # 0x4
38600 98E0           EF                           out dx, ax
38601 98E1           BA                   01CF    mov dx, # 0x01CF
38602 98E4           ED                           in ax, dx
38603 98E5           5A                           pop dx
38604 98E6           C3                           ret
38605                       000098E7            _dispi_set_bank:
38606 98E7           52                           push dx
38607 98E8           50                           push ax
38608 98E9           BA                   01CE    mov dx, # 0x01CE
38609 98EC           B8                   0005    mov ax, # 0x5
38610 98EF           EF                           out dx, ax
38611 98F0           58                           pop ax
38612 98F1           BA                   01CF    mov dx, # 0x01CF
38613 98F4           EF                           out dx, ax
38614 98F5           5A                           pop dx
38615 98F6           C3                           ret
38616                       000098F7            dispi_get_bank:
38617 98F7           52                           push dx
38618 98F8           BA                   01CE    mov dx, # 0x01CE
38619 98FB           B8                   0005    mov ax, # 0x5
38620 98FE           EF                           out dx, ax
38621 98FF           BA                   01CF    mov dx, # 0x01CF
38622 9902           ED                           in ax, dx
38623 9903           5A                           pop dx
38624 9904           C3                           ret
38625                                           ! 8279 endasm
38626                                           !BCC_ENDASM
38627                                           ! 8280 static void dispi_set_bank_farcall()
38628                                           ! 8281 {
38629                       00009905            _dispi_set_bank_farcall:
38630                                           ! 8282 #asm
38631                                           !BCC_ASM
38632 9905           81FB                 0100    cmp bx,#0x0100
38633 9909           74           1E              je dispi_set_bank_farcall_get
38634 990B           09DB                         or bx,bx
38635 990D           75           28              jnz dispi_set_bank_farcall_error
38636 990F           89D0                         mov ax,dx
38637 9911           52                           push dx
38638 9912           50                           push ax
38639 9913           B8                   0005    mov ax,# 0x5
38640 9916           BA                   01CE    mov dx,# 0x01CE
38641 9919           EF                           out dx,ax
38642 991A           58                           pop ax
38643 991B           BA                   01CF    mov dx,# 0x01CF
38644 991E           EF                           out dx,ax
38645 991F           ED                           in ax,dx
38646 9920           5A                           pop dx
38647 9921           39C2                         cmp dx,ax
38648 9923           75           12              jne dispi_set_bank_farcall_error
38649 9925           B8                   004F    mov ax, #0x004f
38650 9928           CB                           retf
38651                       00009929            dispi_set_bank_farcall_get:
38652 9929           B8                   0005    mov ax,# 0x5
38653 992C           BA                   01CE    mov dx,# 0x01CE
38654 992F           EF                           out dx,ax
38655 9930           BA                   01CF    mov dx,# 0x01CF
38656 9933           ED                           in ax,dx
38657 9934           89C2                         mov dx,ax
38658 9936           CB                           retf
38659                       00009937            dispi_set_bank_farcall_error:
38660 9937           B8                   014F    mov ax,#0x014F
38661 993A           CB                           retf
38662                                           ! 8313 endasm
38663                                           !BCC_ENDASM
38664                                           ! 8314 }
38665 993B           C3                         ret
38666                                           ! 8315 #asm
38667                                           !BCC_ASM
38668                       0000993C            dispi_set_x_offset:
38669 993C           52                           push dx
38670 993D           50                           push ax
38671 993E           BA                   01CE    mov dx, # 0x01CE
38672 9941           B8                   0008    mov ax, # 0x8
38673 9944           EF                           out dx, ax
38674 9945           58                           pop ax
38675 9946           BA                   01CF    mov dx, # 0x01CF
38676 9949           EF                           out dx, ax
38677 994A           5A                           pop dx
38678 994B           C3                           ret
38679                       0000994C            dispi_get_x_offset:
38680 994C           52                           push dx
38681 994D           BA                   01CE    mov dx, # 0x01CE
38682 9950           B8                   0008    mov ax, # 0x8
38683 9953           EF                           out dx, ax
38684 9954           BA                   01CF    mov dx, # 0x01CF
38685 9957           ED                           in ax, dx
38686 9958           5A                           pop dx
38687 9959           C3                           ret
38688                       0000995A            dispi_set_y_offset:
38689 995A           52                           push dx
38690 995B           50                           push ax
38691 995C           BA                   01CE    mov dx, # 0x01CE
38692 995F           B8                   0009    mov ax, # 0x9
38693 9962           EF                           out dx, ax
38694 9963           58                           pop ax
38695 9964           BA                   01CF    mov dx, # 0x01CF
38696 9967           EF                           out dx, ax
38697 9968           5A                           pop dx
38698 9969           C3                           ret
38699                       0000996A            dispi_get_y_offset:
38700 996A           52                           push dx
38701 996B           BA                   01CE    mov dx, # 0x01CE
38702 996E           B8                   0009    mov ax, # 0x9
38703 9971           EF                           out dx, ax
38704 9972           BA                   01CF    mov dx, # 0x01CF
38705 9975           ED                           in ax, dx
38706 9976           5A                           pop dx
38707 9977           C3                           ret
38708                       00009978            vga_set_virt_width:
38709 9978           50                           push ax
38710 9979           53                           push bx
38711 997A           52                           push dx
38712 997B           89C3                         mov bx, ax
38713 997D           E8         FEEC              call dispi_get_bpp
38714 9980           3C                     04    cmp al, #0x04
38715 9982           77           02              ja set_width_svga
38716 9984           D1EB                         shr bx, #1
38717                       00009986            set_width_svga:
38718 9986           C1EB                   03    shr bx, #3
38719 9989           BA                   03D4    mov dx, # 0x3d4
38720 998C           88DC                         mov ah, bl
38721 998E           B0                     13    mov al, #0x13
38722 9990           EF                           out dx, ax
38723 9991           5A                           pop dx
38724 9992           5B                           pop bx
38725 9993           58                           pop ax
38726 9994           C3                           ret
38727                       00009995            dispi_set_virt_width:
38728 9995           E8         FFE0              call vga_set_virt_width
38729 9998           52                           push dx
38730 9999           50                           push ax
38731 999A           BA                   01CE    mov dx, # 0x01CE
38732 999D           B8                   0006    mov ax, # 0x6
38733 99A0           EF                           out dx, ax
38734 99A1           58                           pop ax
38735 99A2           BA                   01CF    mov dx, # 0x01CF
38736 99A5           EF                           out dx, ax
38737 99A6           5A                           pop dx
38738 99A7           C3                           ret
38739                       000099A8            dispi_get_virt_width:
38740 99A8           52                           push dx
38741 99A9           BA                   01CE    mov dx, # 0x01CE
38742 99AC           B8                   0006    mov ax, # 0x6
38743 99AF           EF                           out dx, ax
38744 99B0           BA                   01CF    mov dx, # 0x01CF
38745 99B3           ED                           in ax, dx
38746 99B4           5A                           pop dx
38747 99B5           C3                           ret
38748                       000099B6            dispi_get_virt_height:
38749 99B6           52                           push dx
38750 99B7           BA                   01CE    mov dx, # 0x01CE
38751 99BA           B8                   0007    mov ax, # 0x7
38752 99BD           EF                           out dx, ax
38753 99BE           BA                   01CF    mov dx, # 0x01CF
38754 99C1           ED                           in ax, dx
38755 99C2           5A                           pop dx
38756 99C3           C3                           ret
38757                       000099C4            _vga_compat_setup:
38758 99C4           50                           push ax
38759 99C5           52                           push dx
38760                                             ; set CRT X resolution
38761 99C6           BA                   01CE    mov dx, # 0x01CE
38762 99C9           B8                   0001    mov ax, # 0x1
38763 99CC           EF                           out dx, ax
38764 99CD           BA                   01CF    mov dx, # 0x01CF
38765 99D0           ED                           in ax, dx
38766 99D1           50                           push ax
38767 99D2           BA                   03D4    mov dx, # 0x3d4
38768 99D5           B8                   0011    mov ax, #0x0011
38769 99D8           EF                           out dx, ax
38770 99D9           58                           pop ax
38771 99DA           50                           push ax
38772 99DB           C1E8                   03    shr ax, #3
38773 99DE           48                           dec ax
38774 99DF           88C4                         mov ah, al
38775 99E1           B0                     01    mov al, #0x01
38776 99E3           EF                           out dx, ax
38777 99E4           58                           pop ax
38778 99E5           E8         FF90              call vga_set_virt_width
38779                                             ; set CRT Y resolution
38780 99E8           BA                   01CE    mov dx, # 0x01CE
38781 99EB           B8                   0002    mov ax, # 0x2
38782 99EE           EF                           out dx, ax
38783 99EF           BA                   01CF    mov dx, # 0x01CF
38784 99F2           ED                           in ax, dx
38785 99F3           48                           dec ax
38786 99F4           50                           push ax
38787 99F5           BA                   03D4    mov dx, # 0x3d4
38788 99F8           88C4                         mov ah, al
38789 99FA           B0                     12    mov al, #0x12
38790 99FC           EF                           out dx, ax
38791 99FD           58                           pop ax
38792 99FE           B0                     07    mov al, #0x07
38793 9A00           EE                           out dx, al
38794 9A01           42                           inc dx
38795 9A02           EC                           in al, dx
38796 9A03           24                     BD    and al, #0xbd
38797 9A05           F6C4                   01    test ah, #0x01
38798 9A08           74           02              jz bit8_clear
38799 9A0A           0C                     02    or al, #0x02
38800                       00009A0C            bit8_clear:
38801 9A0C           F6C4                   02    test ah, #0x02
38802 9A0F           74           02              jz bit9_clear
38803 9A11           0C                     40    or al, #0x40
38804                       00009A13            bit9_clear:
38805 9A13           EE                           out dx, al
38806                                             ; other settings
38807 9A14           BA                   03D4    mov dx, # 0x3d4
38808 9A17           B8                   0009    mov ax, #0x0009
38809 9A1A           EF                           out dx, ax
38810 9A1B           B0                     17    mov al, #0x17
38811 9A1D           EE                           out dx, al
38812 9A1E           BA                   03D5    mov dx, # 0x3d5
38813 9A21           EC                           in al, dx
38814 9A22           0C                     03    or al, #0x03
38815 9A24           EE                           out dx, al
38816 9A25           BA                   03DA    mov dx, # 0x3da
38817 9A28           EC                           in al, dx
38818 9A29           BA                   03C0    mov dx, # 0x3c0
38819 9A2C           B0                     10    mov al, #0x10
38820 9A2E           EE                           out dx, al
38821 9A2F           BA                   03C1    mov dx, # 0x3c1
38822 9A32           EC                           in al, dx
38823 9A33           0C                     01    or al, #0x01
38824 9A35           BA                   03C0    mov dx, # 0x3c0
38825 9A38           EE                           out dx, al
38826 9A39           B0                     20    mov al, #0x20
38827 9A3B           EE                           out dx, al
38828 9A3C           BA                   03CE    mov dx, # 0x3ce
38829 9A3F           B8                   0506    mov ax, #0x0506
38830 9A42           EF                           out dx, ax
38831 9A43           BA                   03C4    mov dx, # 0x3c4
38832 9A46           B8                   0F02    mov ax, #0x0f02
38833 9A49           EF                           out dx, ax
38834                                             ; settings for >= 8bpp
38835 9A4A           BA                   01CE    mov dx, # 0x01CE
38836 9A4D           B8                   0003    mov ax, # 0x3
38837 9A50           EF                           out dx, ax
38838 9A51           BA                   01CF    mov dx, # 0x01CF
38839 9A54           ED                           in ax, dx
38840 9A55           3C                     08    cmp al, #0x08
38841 9A57           72           40              jb vga_compat_end
38842 9A59           BA                   03D4    mov dx, # 0x3d4
38843 9A5C           B0                     14    mov al, #0x14
38844 9A5E           EE                           out dx, al
38845 9A5F           BA                   03D5    mov dx, # 0x3d5
38846 9A62           EC                           in al, dx
38847 9A63           0C                     40    or al, #0x40
38848 9A65           EE                           out dx, al
38849 9A66           BA                   03DA    mov dx, # 0x3da
38850 9A69           EC                           in al, dx
38851 9A6A           BA                   03C0    mov dx, # 0x3c0
38852 9A6D           B0                     10    mov al, #0x10
38853 9A6F           EE                           out dx, al
38854 9A70           BA                   03C1    mov dx, # 0x3c1
38855 9A73           EC                           in al, dx
38856 9A74           0C                     40    or al, #0x40
38857 9A76           BA                   03C0    mov dx, # 0x3c0
38858 9A79           EE                           out dx, al
38859 9A7A           B0                     20    mov al, #0x20
38860 9A7C           EE                           out dx, al
38861 9A7D           BA                   03C4    mov dx, # 0x3c4
38862 9A80           B0                     04    mov al, #0x04
38863 9A82           EE                           out dx, al
38864 9A83           BA                   03C5    mov dx, # 0x3c5
38865 9A86           EC                           in al, dx
38866 9A87           0C                     08    or al, #0x08
38867 9A89           EE                           out dx, al
38868 9A8A           BA                   03CE    mov dx, # 0x3ce
38869 9A8D           B0                     05    mov al, #0x05
38870 9A8F           EE                           out dx, al
38871 9A90           BA                   03CF    mov dx, # 0x3cf
38872 9A93           EC                           in al, dx
38873 9A94           24                     9F    and al, #0x9f
38874 9A96           0C                     40    or al, #0x40
38875 9A98           EE                           out dx, al
38876                       00009A99            vga_compat_end:
38877 9A99           5A                           pop dx
38878 9A9A           58                           pop ax
38879                                           ! 8527 endasm
38880                                           !BCC_ENDASM
38881                                           ! 8528 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
38882                                           ! 8529   Bit16u mode; Boolean using_lfb;
38883                       00009A9B            _mode_info_find_mode:
38884                                           !BCC_EOS
38885                                           !BCC_EOS
38886                                           ! 8530 {
38887                                           ! 8531   ModeInfoListItem *cur_info=&mode_info_list;
38888 9A9B           55                         push	bp
38889 9A9C           89E5                       mov	bp,sp
38890 9A9E           4C                         dec	sp
38891 9A9F           4C                         dec	sp
38892                                           ! Debug: eq * [$4A] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38893 9AA0           BB                   821B  mov	bx,#_mode_info_list
38894 9AA3           895E         FE            mov	-2[bp],bx
38895                                           !BCC_EOS
38896                                           ! 8532   while (cur_info->mode != 0xFFFF)
38897                                           ! 8533   {
38898 9AA6           EB           43            jmp .2E9
38899                       00009AA8            .2EA:
38900                                           ! 8534     if (cur_info->mode == mode)
38901 9AA8           8B5E         FE            mov	bx,-2[bp]
38902                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
38903 9AAB           8B1F                       mov	bx,[bx]
38904 9AAD           3B5E         04            cmp	bx,4[bp]
38905 9AB0           75           30            jne 	.2EB
38906                       00009AB2            .2EC:
38907                                           ! 8535     {
38908                                           ! 8536       if (!using_lfb)
38909 9AB2           8B46         06            mov	ax,6[bp]
38910 9AB5           85C0                       test	ax,ax
38911 9AB7           75           09            jne 	.2ED
38912                       00009AB9            .2EE:
38913                                           ! 8537       {
38914                                           ! 8538         return cur_info;
38915 9AB9           8B46         FE            mov	ax,-2[bp]
38916 9ABC           89EC                       mov	sp,bp
38917 9ABE           5D                         pop	bp
38918 9ABF           C3                         ret
38919                                           !BCC_EOS
38920                                           ! 8539       }
38921                                           ! 8540       else if (cur_info->info.ModeAttributes & 0x0080)
38922 9AC0           EB           1E            jmp .2EF
38923                       00009AC2            .2ED:
38924 9AC2           8B5E         FE            mov	bx,-2[bp]
38925                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
38926 9AC5           8A47         02            mov	al,2[bx]
38927 9AC8           24                     80  and	al,#$80
38928 9ACA           84C0                       test	al,al
38929 9ACC           74           09            je  	.2F0
38930                       00009ACE            .2F1:
38931                                           ! 8541       {
38932                                           ! 8542         return cur_info;
38933 9ACE           8B46         FE            mov	ax,-2[bp]
38934 9AD1           89EC                       mov	sp,bp
38935 9AD3           5D                         pop	bp
38936 9AD4           C3                         ret
38937                                           !BCC_EOS
38938                                           ! 8543       }
38939                                           ! 8544       else
38940                                           ! 8545       {
38941 9AD5           EB           09            jmp .2F2
38942                       00009AD7            .2F0:
38943                                           ! 8546         cur_info++;
38944                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38945 9AD7           8B5E         FE            mov	bx,-2[bp]
38946 9ADA           83C3                   44  add	bx,*$44
38947 9ADD           895E         FE            mov	-2[bp],bx
38948                                           !BCC_EOS
38949                                           ! 8547       }
38950                                           ! 8548     }
38951                       00009AE0            .2F2:
38952                       00009AE0            .2EF:
38953                                           ! 8549     else
38954                                           ! 8550     {
38955 9AE0           EB           09            jmp .2F3
38956                       00009AE2            .2EB:
38957                                           ! 8551       cur_info++;
38958                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38959 9AE2           8B5E         FE            mov	bx,-2[bp]
38960 9AE5           83C3                   44  add	bx,*$44
38961 9AE8           895E         FE            mov	-2[bp],bx
38962                                           !BCC_EOS
38963                                           ! 8552     }
38964                                           ! 8553   }
38965                       00009AEB            .2F3:
38966                                           ! 8554   return 0;
38967                       00009AEB            .2E9:
38968 9AEB           8B5E         FE            mov	bx,-2[bp]
38969                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38970 9AEE           8B1F                       mov	bx,[bx]
38971 9AF0           81FB                 FFFF  cmp	bx,#$FFFF
38972 9AF4           75           B2            jne	.2EA
38973                       00009AF6            .2F4:
38974                       00009AF6            .2E8:
38975 9AF6           31C0                       xor	ax,ax
38976 9AF8           89EC                       mov	sp,bp
38977 9AFA           5D                         pop	bp
38978 9AFB           C3                         ret
38979                                           !BCC_EOS
38980                                           ! 8555 }
38981                                           ! 8556 #asm
38982                                           !BCC_ASM
38983                       00000004            _mode_info_find_mode.using_lfb	set	4
38984                       00000002            _mode_info_find_mode.mode	set	2
38985                                           ; Has 1 display - Returns true if 1 display detected
38986                       00009AFC            _vbe_has_vbe_display:
38987 9AFC           1E                           push ds
38988 9AFD           53                           push bx
38989 9AFE           B8                   0040    mov ax, # 0x40
38990 9B01           8ED8                         mov ds, ax
38991 9B03           BB                   00B9    mov bx, # 0xB9
38992 9B06           8A07                         mov al, [bx]
38993 9B08           24                     01    and al, #0x01
38994 9B0A           30E4                         xor ah, ah
38995 9B0C           5B                           pop bx
38996 9B0D           1F                           pop ds
38997 9B0E           C3                           ret
38998                                           ; 1 Init - Initialise the Vesa Bios Extension Code
38999                                           ; This function does a sanity check on the host side display code interface.
39000                       00009B0F            vbe_init:
39001 9B0F           B8                   B0C0    mov ax, # 0xB0C0
39002 9B12           E8         FCF4              call dispi_set_id
39003 9B15           E8         FCE3              call dispi_get_id
39004 9B18           3D                   B0C0    cmp ax, # 0xB0C0
39005 9B1B           75           16              jne no_vbe_interface
39006 9B1D           1E                           push ds
39007 9B1E           53                           push bx
39008 9B1F           B8                   0040    mov ax, # 0x40
39009 9B22           8ED8                         mov ds, ax
39010 9B24           BB                   00B9    mov bx, # 0xB9
39011 9B27           B0                     01    mov al, #0x01
39012 9B29           8807                         mov [bx], al
39013 9B2B           5B                           pop bx
39014 9B2C           1F                           pop ds
39015 9B2D           B8                   B0C5    mov ax, # 0xB0C5
39016 9B30           E8         FCD6              call dispi_set_id
39017                       00009B33            no_vbe_interface:
39018 9B33           BB                   96B9    mov bx, #msg_vbe_init
39019 9B36           53                           push bx
39020 9B37           E8         E540              call _printf
39021 9B3A           44                           inc sp
39022 9B3B           44                           inc sp
39023 9B3C           C3                           ret
39024                                           ; 1 Display Info - Display information on screen about the 1
39025                       00009B3D            vbe_display_info:
39026 9B3D           E8         FFBC              call _vbe_has_vbe_display
39027 9B40           85C0                         test ax, ax
39028 9B42           74           0B              jz no_vbe_flag
39029 9B44           B8                   C000    mov ax, #0xc000
39030 9B47           8ED8                         mov ds, ax
39031 9B49           BE                   966F    mov si, #_vbebios_info_string
39032 9B4C           E9         9B2E              jmp _display_string
39033                       00009B4F            no_vbe_flag:
39034 9B4F           B8                   C000    mov ax, #0xc000
39035 9B52           8ED8                         mov ds, ax
39036 9B54           BE                   9695    mov si, #_no_vbebios_info_string
39037 9B57           E9         9B23              jmp _display_string
39038                                           ; helper function for memory size calculation
39039                       00009B5A            lmulul:
39040 9B5A     66    25               0000FFFF    and eax, #0x0000FFFF
39041 9B60     66    C1E3                   10    shl ebx, #16
39042 9B64     66    09D8                         or eax, ebx
39043 9B67           36                           SEG SS
39044 9B68     66    F725                         mul eax, dword ptr [di]
39045 9B6B     66    89C3                         mov ebx, eax
39046 9B6E     66    C1EB                   10    shr ebx, #16
39047 9B72           C3                           ret
39048                                           ! 8620 endasm
39049                                           !BCC_ENDASM
39050                                           ! 8621 void vbe_biosfn_return_controller_information(AX, ES, DI)
39051                                           ! Register BX used in function mode_info_find_mode
39052                                           ! 8622 Bit16u *AX;Bit16u ES;Bit16u DI;
39053                                           export	_vbe_biosfn_return_controller_information
39054                       00009B73            _vbe_biosfn_return_controller_information:
39055                                           !BCC_EOS
39056                                           !BCC_EOS
39057                                           !BCC_EOS
39058                                           ! 8623 {
39059                                           ! 8624         Bit16u ss=get_SS();
39060 9B73           55                         push	bp
39061 9B74           89E5                       mov	bp,sp
39062 9B76           4C                         dec	sp
39063 9B77           4C                         dec	sp
39064                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39065 9B78           E8         E4E0            call	_get_SS
39066                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39067 9B7B           8946         FE            mov	-2[bp],ax
39068                                           !BCC_EOS
39069                                           ! 8625         VbeInfoBlock vbe_info_block;
39070                                           !BCC_EOS
39071                                           ! 8626         Bit16u status;
39072                                           !BCC_EOS
39073                                           ! 8627         Bit16u result;
39074                                           !BCC_EOS
39075                                           ! 8628         Bit16u vbe2_info;
39076                                           !BCC_EOS
39077                                           ! 8629         Bit16u cur_mode=0;
39078 9B7E           81C4                 FDF8  add	sp,#-$208
39079                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
39080 9B82           31C0                       xor	ax,ax
39081 9B84           8986       FDF6            mov	-$20A[bp],ax
39082                                           !BCC_EOS
39083                                           ! 8630         Bit16u cur_ptr=34;
39084 9B88           4C                         dec	sp
39085 9B89           4C                         dec	sp
39086                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
39087 9B8A           B8                   0022  mov	ax,*$22
39088 9B8D           8986       FDF4            mov	-$20C[bp],ax
39089                                           !BCC_EOS
39090                                           ! 8631         Bit16u size_64k;
39091                                           !BCC_EOS
39092                                           ! 8632         ModeInfoListItem *cur_info=&mode_info_list;
39093 9B91           83C4                   FC  add	sp,*-4
39094                                           ! Debug: eq * [$4A] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39095 9B94           BB                   821B  mov	bx,#_mode_info_list
39096 9B97           899E       FDF0            mov	-$210[bp],bx
39097                                           !BCC_EOS
39098                                           ! 8633         status = read_word(ss, AX);
39099                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
39100 9B9B           FF76         04            push	4[bp]
39101                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
39102 9B9E           FF76         FE            push	-2[bp]
39103                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39104 9BA1           E8         E43E            call	_read_word
39105 9BA4           83C4                   04  add	sp,*4
39106                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
39107 9BA7           8986       FDFC            mov	-$204[bp],ax
39108                                           !BCC_EOS
39109                                           ! 8634         printf("VBE vbe_biosfn_return_vbe_info ES%x DI%x AX%x\n",ES,DI,status);
39110                                           ! Debug: list unsigned short status = [S+$212-$206] (used reg = )
39111 9BAB           FFB6       FDFC            push	-$204[bp]
39112                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
39113 9BAF           FF76         08            push	8[bp]
39114                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39115 9BB2           FF76         06            push	6[bp]
39116                                           ! Debug: list * char = .2F5+0 (used reg = )
39117 9BB5           BB                   A726  mov	bx,#.2F5
39118 9BB8           53                         push	bx
39119                                           ! Debug: func () void = printf+0 (used reg = )
39120 9BB9           E8         E4BE            call	_printf
39121 9BBC           83C4                   08  add	sp,*8
39122                                           !BCC_EOS
39123                                           ! 8635         vbe2_info = 0;
39124                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
39125 9BBF           31C0                       xor	ax,ax
39126 9BC1           8986       FDF8            mov	-$208[bp],ax
39127                                           !BCC_EOS
39128                                           ! 8636         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
39129                                           ! Debug: list int = const $200 (used reg = )
39130 9BC5           B8                   0200  mov	ax,#$200
39131 9BC8           50                         push	ax
39132                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
39133 9BC9           FF76         08            push	8[bp]
39134                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39135 9BCC           FF76         06            push	6[bp]
39136                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
39137 9BCF           8D9E       FDFE            lea	bx,-$202[bp]
39138 9BD3           53                         push	bx
39139                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
39140 9BD4           FF76         FE            push	-2[bp]
39141                                           ! Debug: func () void = memcpyb+0 (used reg = )
39142 9BD7           E8         E395            call	_memcpyb
39143 9BDA           83C4                   0A  add	sp,*$A
39144                                           !BCC_EOS
39145                                           ! 8637         if (((vbe_info_block.VbeSignature[0] == 'V') &&
39146                                           ! 8638              (vbe_info_block.VbeSignature[1] == 'B') &&
39147                                           ! 8639              (vbe_info_block.VbeSignature[2] == 'E') &&
39148                                           ! 8640              (vbe_info_block.VbeSignature[3] == '2')) ||
39149                                           ! 8641             ((vbe_info_block.VbeSignature[0] == 'V') &&
39150                                           ! 8642              (vbe_info_block.VbeSignature[1] == 'E') &&
39151                                           ! 8643              (vbe_info_block.VbeSignature[2] == 'S') &&
39152                                           ! 8644              (vbe_info_block.VbeSignature[3] == 'A')) )
39153                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39154 9BDD           8A86       FDFE            mov	al,-$202[bp]
39155 9BE1           3C                     56  cmp	al,*$56
39156 9BE3           75           18            jne 	.2F8
39157                       00009BE5            .2FB:
39158                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39159 9BE5           8A86       FDFF            mov	al,-$201[bp]
39160 9BE9           3C                     42  cmp	al,*$42
39161 9BEB           75           10            jne 	.2F8
39162                       00009BED            .2FA:
39163                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39164 9BED           8A86       FE00            mov	al,-$200[bp]
39165 9BF1           3C                     45  cmp	al,*$45
39166 9BF3           75           08            jne 	.2F8
39167                       00009BF5            .2F9:
39168                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39169 9BF5           8A86       FE01            mov	al,-$1FF[bp]
39170 9BF9           3C                     32  cmp	al,*$32
39171 9BFB           74           20            je  	.2F7
39172                       00009BFD            .2F8:
39173                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39174 9BFD           8A86       FDFE            mov	al,-$202[bp]
39175 9C01           3C                     56  cmp	al,*$56
39176 9C03           75           28            jne 	.2F6
39177                       00009C05            .2FE:
39178                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39179 9C05           8A86       FDFF            mov	al,-$201[bp]
39180 9C09           3C                     45  cmp	al,*$45
39181 9C0B           75           20            jne 	.2F6
39182                       00009C0D            .2FD:
39183                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39184 9C0D           8A86       FE00            mov	al,-$200[bp]
39185 9C11           3C                     53  cmp	al,*$53
39186 9C13           75           18            jne 	.2F6
39187                       00009C15            .2FC:
39188                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39189 9C15           8A86       FE01            mov	al,-$1FF[bp]
39190 9C19           3C                     41  cmp	al,*$41
39191 9C1B           75           10            jne 	.2F6
39192                       00009C1D            .2F7:
39193                                           ! 8645         {
39194                                           ! 8646                 vbe2_info = 1;
39195                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
39196 9C1D           B8                   0001  mov	ax,*1
39197 9C20           8986       FDF8            mov	-$208[bp],ax
39198                                           !BCC_EOS
39199                                           ! 8647                 printf("VBE correct VESA/VBE2 signature found\n");
39200                                           ! Debug: list * char = .2FF+0 (used reg = )
39201 9C24           BB                   A6FF  mov	bx,#.2FF
39202 9C27           53                         push	bx
39203                                           ! Debug: func () void = printf+0 (used reg = )
39204 9C28           E8         E44F            call	_printf
39205 9C2B           44                         inc	sp
39206 9C2C           44                         inc	sp
39207                                           !BCC_EOS
39208                                           ! 8648         }
39209                                           ! 8649         vbe_info_block.VbeSignature[0] = 'V';
39210                       00009C2D            .2F6:
39211                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
39212 9C2D           B0                     56  mov	al,*$56
39213 9C2F           8886       FDFE            mov	-$202[bp],al
39214                                           !BCC_EOS
39215                                           ! 8650         vbe_info_block.VbeSignature[1] = 'E';
39216                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
39217 9C33           B0                     45  mov	al,*$45
39218 9C35           8886       FDFF            mov	-$201[bp],al
39219                                           !BCC_EOS
39220                                           ! 8651         vbe_info_block.VbeSignature[2] = 'S';
39221                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
39222 9C39           B0                     53  mov	al,*$53
39223 9C3B           8886       FE00            mov	-$200[bp],al
39224                                           !BCC_EOS
39225                                           ! 8652         vbe_info_block.VbeSignature[3] = 'A';
39226                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
39227 9C3F           B0                     41  mov	al,*$41
39228 9C41           8886       FE01            mov	-$1FF[bp],al
39229                                           !BCC_EOS
39230                                           ! 8653         vbe_info_block.VbeVersion = 0x0200;
39231                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
39232 9C45           B8                   0200  mov	ax,#$200
39233 9C48           8986       FE02            mov	-$1FE[bp],ax
39234                                           !BCC_EOS
39235                                           ! 8654         v
39236                                           ! 8654 be_info_block.OemStringPtr_Seg = 0xc000;
39237                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
39238 9C4C           B8                   C000  mov	ax,#$C000
39239 9C4F           8986       FE06            mov	-$1FA[bp],ax
39240                                           !BCC_EOS
39241                                           ! 8655         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
39242                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
39243 9C53           BB                   95C3  mov	bx,#_vbebios_copyright
39244 9C56           899E       FE04            mov	-$1FC[bp],bx
39245                                           !BCC_EOS
39246                                           ! 8656         vbe_info_block.Capabilities[0] = 0x0001;
39247                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
39248 9C5A           B0                     01  mov	al,*1
39249 9C5C           8886       FE08            mov	-$1F8[bp],al
39250                                           !BCC_EOS
39251                                           ! 8657         vbe_info_block.Capabilities[1] = 0;
39252                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
39253 9C60           30C0                       xor	al,al
39254 9C62           8886       FE09            mov	-$1F7[bp],al
39255                                           !BCC_EOS
39256                                           ! 8658         vbe_info_block.Capabilities[2] = 0;
39257                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
39258 9C66           30C0                       xor	al,al
39259 9C68           8886       FE0A            mov	-$1F6[bp],al
39260                                           !BCC_EOS
39261                                           ! 8659         vbe_info_block.Capabilities[3] = 0;
39262                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
39263 9C6C           30C0                       xor	al,al
39264 9C6E           8886       FE0B            mov	-$1F5[bp],al
39265                                           !BCC_EOS
39266                                           ! 8660         vbe_info_block.VideoModePtr_Seg= ES ;
39267                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
39268 9C72           8B46         06            mov	ax,6[bp]
39269 9C75           8986       FE0E            mov	-$1F2[bp],ax
39270                                           !BCC_EOS
39271                                           ! 8661         vbe_info_block.VideoModePtr_Off= DI + 34;
39272                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
39273 9C79           8B46         08            mov	ax,8[bp]
39274                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
39275 9C7C           05                   0022  add	ax,*$22
39276 9C7F           8986       FE0C            mov	-$1F4[bp],ax
39277                                           !BCC_EOS
39278                                           ! 8662         outw(0x01CE, 0xa);
39279                                           ! Debug: list int = const $A (used reg = )
39280 9C83           B8                   000A  mov	ax,*$A
39281 9C86           50                         push	ax
39282                                           ! Debug: list int = const $1CE (used reg = )
39283 9C87           B8                   01CE  mov	ax,#$1CE
39284 9C8A           50                         push	ax
39285                                           ! Debug: func () void = outw+0 (used reg = )
39286 9C8B           E8         E3BD            call	_outw
39287 9C8E           83C4                   04  add	sp,*4
39288                                           !BCC_EOS
39289                                           ! 8663         vbe_info_block.TotalMemory = inw(0x01CF);
39290                                           ! Debug: list int = const $1CF (used reg = )
39291 9C91           B8                   01CF  mov	ax,#$1CF
39292 9C94           50                         push	ax
39293                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39294 9C95           E8         E398            call	_inw
39295 9C98           44                         inc	sp
39296 9C99           44                         inc	sp
39297                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
39298 9C9A           8986       FE10            mov	-$1F0[bp],ax
39299                                           !BCC_EOS
39300                                           ! 8664         if (vbe2_info)
39301 9C9E           8B86       FDF8            mov	ax,-$208[bp]
39302 9CA2           85C0                       test	ax,ax
39303 9CA4           74           4B            je  	.300
39304                       00009CA6            .301:
39305                                           ! 8665         {
39306                                           ! 8666                 vbe_info_block.OemSoftwareRev = 0x0002;;
39307                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
39308 9CA6           B8                   0002  mov	ax,*2
39309 9CA9           8986       FE12            mov	-$1EE[bp],ax
39310                                           !BCC_EOS
39311                                           !BCC_EOS
39312                                           ! 8667                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
39313                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
39314 9CAD           B8                   C000  mov	ax,#$C000
39315 9CB0           8986       FE16            mov	-$1EA[bp],ax
39316                                           !BCC_EOS
39317                                           ! 8668                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
39318                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
39319 9CB4           BB                   9609  mov	bx,#_vbebios_vendor_name
39320 9CB7           899E       FE14            mov	-$1EC[bp],bx
39321                                           !BCC_EOS
39322                                           ! 8669                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
39323                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
39324 9CBB           B8                   C000  mov	ax,#$C000
39325 9CBE           8986       FE1A            mov	-$1E6[bp],ax
39326                                           !BCC_EOS
39327                                           ! 8670                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
39328                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
39329 9CC2           BB                   9621  mov	bx,#_vbebios_product_name
39330 9CC5           899E       FE18            mov	-$1E8[bp],bx
39331                                           !BCC_EOS
39332                                           ! 8671                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
39333                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
39334 9CC9           B8                   C000  mov	ax,#$C000
39335 9CCC           8986       FE1E            mov	-$1E2[bp],ax
39336                                           !BCC_EOS
39337                                           ! 8672                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
39338                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
39339 9CD0           BB                   963A  mov	bx,#_vbebios_product_revision
39340 9CD3           899E       FE1C            mov	-$1E4[bp],bx
39341                                           !BCC_EOS
39342                                           ! 8673                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
39343                                           ! Debug: list int = const $200 (used reg = )
39344 9CD7           B8                   0200  mov	ax,#$200
39345 9CDA           50                         push	ax
39346                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39347 9CDB           8D9E       FDFE            lea	bx,-$202[bp]
39348 9CDF           53                         push	bx
39349                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39350 9CE0           FF76         FE            push	-2[bp]
39351                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39352 9CE3           FF76         08            push	8[bp]
39353                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39354 9CE6           FF76         06            push	6[bp]
39355                                           ! Debug: func () void = memcpyb+0 (used reg = )
39356 9CE9           E8         E283            call	_memcpyb
39357 9CEC           83C4                   0A  add	sp,*$A
39358                                           !BCC_EOS
39359                                           ! 8674         }
39360                                           ! 8675         else
39361                                           ! 8676         {
39362 9CEF           EB           18            jmp .302
39363                       00009CF1            .300:
39364                                           ! 8677                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
39365                                           ! Debug: list int = const $100 (used reg = )
39366 9CF1           B8                   0100  mov	ax,#$100
39367 9CF4           50                         push	ax
39368                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39369 9CF5           8D9E       FDFE            lea	bx,-$202[bp]
39370 9CF9           53                         push	bx
39371                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39372 9CFA           FF76         FE            push	-2[bp]
39373                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39374 9CFD           FF76         08            push	8[bp]
39375                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39376 9D00           FF76         06            push	6[bp]
39377                                           ! Debug: func () void = memcpyb+0 (used reg = )
39378 9D03           E8         E269            call	_memcpyb
39379 9D06           83C4                   0A  add	sp,*$A
39380                                           !BCC_EOS
39381                                           ! 8678         }
39382                                           ! 8679         do
39383                       00009D09            .302:
39384                                           ! 8680         {
39385                       00009D09            .305:
39386                                           ! 8681                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
39387 9D09           8B9E       FDF0            mov	bx,-$210[bp]
39388                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
39389 9D0D           8A47         1B            mov	al,$1B[bx]
39390 9D10           30E4                       xor	ah,ah
39391 9D12           31DB                       xor	bx,bx
39392 9D14           53                         push	bx
39393 9D15           50                         push	ax
39394 9D16           8B9E       FDF0            mov	bx,-$210[bp]
39395                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39396 9D1A           8B47         14            mov	ax,$14[bx]
39397 9D1D           31DB                       xor	bx,bx
39398 9D1F           53                         push	bx
39399 9D20           50                         push	ax
39400 9D21           8B9E       FDF0            mov	bx,-$210[bp]
39401                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39402 9D25           8B47         14            mov	ax,$14[bx]
39403 9D28           31DB                       xor	bx,bx
39404                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
39405 9D2A           8DBE       FDE8            lea	di,-$218[bp]
39406 9D2E           E8         FE29            call	lmulul
39407 9D31           83C4                   04  add	sp,*4
39408                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
39409 9D34           8DBE       FDEC            lea	di,-$214[bp]
39410 9D38           E8         FE1F            call	lmulul
39411 9D3B           83C4                   04  add	sp,*4
39412                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
39413                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
39414 9D3E           31C0                       xor	ax,ax
39415                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
39416 9D40           8986       FDF2            mov	-$20E[bp],ax
39417                                           !BCC_EOS
39418                                           ! 8682                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
39419                                           ! 8683                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
39420                                           ! 8684                     (size_64k <= vbe_info_block.TotalMemory)) {
39421                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
39422 9D44           E8         FB3E            call	_dispi_get_max_xres
39423 9D47           8B9E       FDF0            mov	bx,-$210[bp]
39424                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
39425 9D4B           3B47         14            cmp	ax,$14[bx]
39426 9D4E           72           61            jb  	.306
39427                       00009D50            .309:
39428                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
39429 9D50           E8         FB54            call	_dispi_get_max_bpp
39430 9D53           8B9E       FDF0            mov	bx,-$210[bp]
39431                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
39432 9D57           50                         push	ax
39433 9D58           8A47         1B            mov	al,$1B[bx]
39434 9D5B           30E4                       xor	ah,ah
39435 9D5D           3B86       FDEE            cmp	ax,-$212[bp]
39436 9D61           8DA6       FDF0            lea	sp,-$210[bp]
39437 9D65           77           4A            ja  	.306
39438                       00009D67            .308:
39439                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
39440 9D67           8B86       FDF2            mov	ax,-$20E[bp]
39441 9D6B           3B86       FE10            cmp	ax,-$1F0[bp]
39442 9D6F           77           40            ja  	.306
39443                       00009D71            .307:
39444                                           ! 8685                   printf("VBE found mode %x => %x\n", cur_info->mode,cur_mode);
39445                                           ! Debug: list unsigned short cur_mode = [S+$212-$20C] (used reg = )
39446 9D71           FFB6       FDF6            push	-$20A[bp]
39447 9D75           8B9E       FDF0            mov	bx,-$210[bp]
39448                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39449 9D79           FF37                       push	[bx]
39450                                           ! Debug: list * char = .30A+0 (used reg = )
39451 9D7B           BB                   A6E6  mov	bx,#.30A
39452 9D7E           53                         push	bx
39453                                           ! Debug: func () void = printf+0 (used reg = )
39454 9D7F           E8         E2F8            call	_printf
39455 9D82           83C4                   06  add	sp,*6
39456                                           !BCC_EOS
39457                                           ! 8686                   write_word(ES, DI + cur_ptr, cur_info->mode);
39458 9D85           8B9E       FDF0            mov	bx,-$210[bp]
39459                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39460 9D89           FF37                       push	[bx]
39461                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39462 9D8B           8B46         08            mov	ax,8[bp]
39463 9D8E           0386       FDF4            add	ax,-$20C[bp]
39464                                           ! Debug: list unsigned int = ax+0 (used reg = )
39465 9D92           50                         push	ax
39466                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39467 9D93           FF76         06            push	6[bp]
39468                                           ! Debug: func () void = write_word+0 (used reg = )
39469 9D96           E8         E274            call	_write_word
39470 9D99           83C4                   06  add	sp,*6
39471                                           !BCC_EOS
39472                                           ! 8687                   cur_mode++;
39473                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
39474 9D9C           8B86       FDF6            mov	ax,-$20A[bp]
39475 9DA0           40                         inc	ax
39476 9DA1           8986       FDF6            mov	-$20A[bp],ax
39477                                           !BCC_EOS
39478                                           ! 8688                   cur_ptr+=2;
39479                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
39480 9DA5           8B86       FDF4            mov	ax,-$20C[bp]
39481 9DA9           40                         inc	ax
39482 9DAA           40                         inc	ax
39483 9DAB           8986       FDF4            mov	-$20C[bp],ax
39484                                           !BCC_EOS
39485                                           ! 8689                 } else {
39486 9DAF           EB           21            jmp .30B
39487                       00009DB1            .306:
39488                                           ! 8690                   printf("VBE mode %x (xres=%x / bpp=%02x) not supported \n", cur_info->mode,cur_info->info.XResolution,cur_info->info.BitsPerPixel);
39489 9DB1           8B9E       FDF0            mov	bx,-$210[bp]
39490                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
39491 9DB5           8A47         1B            mov	al,$1B[bx]
39492 9DB8           30E4                       xor	ah,ah
39493 9DBA           50                         push	ax
39494 9DBB           8B9E       FDF0            mov	bx,-$210[bp]
39495                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
39496 9DBF           FF77         14            push	$14[bx]
39497 9DC2           8B9E       FDF0            mov	bx,-$210[bp]
39498                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39499 9DC6           FF37                       push	[bx]
39500                                           ! Debug: list * char = .30C+0 (used reg = )
39501 9DC8           BB                   A6B5  mov	bx,#.30C
39502 9DCB           53                         push	bx
39503                                           ! Debug: func () void = printf+0 (used reg = )
39504 9DCC           E8         E2AB            call	_printf
39505 9DCF           83C4                   08  add	sp,*8
39506                                           !BCC_EOS
39507                                           ! 8691                 }
39508                                           ! 8692                 cur_info++;
39509                       00009DD2            .30B:
39510                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39511 9DD2           8B9E       FDF0            mov	bx,-$210[bp]
39512 9DD6           83C3                   44  add	bx,*$44
39513 9DD9           899E       FDF0            mov	-$210[bp],bx
39514                                           !BCC_EOS
39515                                           ! 8693         } while (cur_info->mode != 0xFFFF);
39516                       00009DDD            .304:
39517 9DDD           8B9E       FDF0            mov	bx,-$210[bp]
39518                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
39519 9DE1           8B1F                       mov	bx,[bx]
39520 9DE3           81FB                 FFFF  cmp	bx,#$FFFF
39521 9DE7         0F85         FF1E            bne 	.305
39522                       00009DEB            .30D:
39523                                           !BCC_EOS
39524                                           ! 8694         write_word(ES, DI + cur_ptr, cur_info->mode);
39525                       00009DEB            .303:
39526 9DEB           8B9E       FDF0            mov	bx,-$210[bp]
39527                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39528 9DEF           FF37                       push	[bx]
39529                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39530 9DF1           8B46         08            mov	ax,8[bp]
39531 9DF4           0386       FDF4            add	ax,-$20C[bp]
39532                                           ! Debug: list unsigned int = ax+0 (used reg = )
39533 9DF8           50                         push	ax
39534                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39535 9DF9           FF76         06            push	6[bp]
39536                                           ! Debug: func () void = write_word+0 (used reg = )
39537 9DFC           E8         E20E            call	_write_word
39538 9DFF           83C4                   06  add	sp,*6
39539                                           !BCC_EOS
39540                                           ! 8695  
39541                                           ! 8695        result = 0x4f;
39542                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
39543 9E02           B8                   004F  mov	ax,*$4F
39544 9E05           8986       FDFA            mov	-$206[bp],ax
39545                                           !BCC_EOS
39546                                           ! 8696         write_word(ss, AX, result);
39547                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
39548 9E09           FFB6       FDFA            push	-$206[bp]
39549                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
39550 9E0D           FF76         04            push	4[bp]
39551                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39552 9E10           FF76         FE            push	-2[bp]
39553                                           ! Debug: func () void = write_word+0 (used reg = )
39554 9E13           E8         E1F7            call	_write_word
39555 9E16           83C4                   06  add	sp,*6
39556                                           !BCC_EOS
39557                                           ! 8697 }
39558 9E19           89EC                       mov	sp,bp
39559 9E1B           5D                         pop	bp
39560 9E1C           C3                         ret
39561                                           ! 8698 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
39562                                           ! Register BX used in function vbe_biosfn_return_controller_information
39563                                           ! 8699 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
39564                                           export	_vbe_biosfn_return_mode_information
39565                       00009E1D            _vbe_biosfn_return_mode_information:
39566                                           !BCC_EOS
39567                                           !BCC_EOS
39568                                           !BCC_EOS
39569                                           !BCC_EOS
39570                                           ! 8700 {
39571                                           ! 8701         Bit16u result=0x0100;
39572 9E1D           55                         push	bp
39573 9E1E           89E5                       mov	bp,sp
39574 9E20           4C                         dec	sp
39575 9E21           4C                         dec	sp
39576                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
39577 9E22           B8                   0100  mov	ax,#$100
39578 9E25           8946         FE            mov	-2[bp],ax
39579                                           !BCC_EOS
39580                                           ! 8702         Bit16u ss=get_SS();
39581 9E28           4C                         dec	sp
39582 9E29           4C                         dec	sp
39583                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39584 9E2A           E8         E22E            call	_get_SS
39585                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
39586 9E2D           8946         FC            mov	-4[bp],ax
39587                                           !BCC_EOS
39588                                           ! 8703         ModeInfoBlock info;
39589                                           !BCC_EOS
39590                                           ! 8704         ModeInfoListItem *cur_info;
39591                                           !BCC_EOS
39592                                           ! 8705         Boolean using_lfb;
39593                                           !BCC_EOS
39594                                           ! 8706         Bit16u lfb_addr;
39595                                           !BCC_EOS
39596                                           ! 8707         printf("VBE vbe_biosfn_return_mode_information ES%x DI%x CX%x\n",ES,DI,CX);
39597 9E30           81C4                 FEFA  add	sp,#-$106
39598                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39599 9E34           FF76         06            push	6[bp]
39600                                           ! Debug: list unsigned short DI = [S+$10E+8] (used reg = )
39601 9E37           FF76         0A            push	$A[bp]
39602                                           ! Debug: list unsigned short ES = [S+$110+6] (used reg = )
39603 9E3A           FF76         08            push	8[bp]
39604                                           ! Debug: list * char = .30E+0 (used reg = )
39605 9E3D           BB                   A67E  mov	bx,#.30E
39606 9E40           53                         push	bx
39607                                           ! Debug: func () void = printf+0 (used reg = )
39608 9E41           E8         E236            call	_printf
39609 9E44           83C4                   08  add	sp,*8
39610                                           !BCC_EOS
39611                                           ! 8708         using_lfb=((CX & 0x4000) == 0x4000);
39612                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
39613 9E47           8B46         06            mov	ax,6[bp]
39614 9E4A           25                   4000  and	ax,#$4000
39615                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39616 9E4D           3D                   4000  cmp	ax,#$4000
39617 9E50           75           04            jne	.30F
39618 9E52           B0                     01  mov	al,*1
39619 9E54           EB           02            jmp	.310
39620                       00009E56            .30F:
39621 9E56           30C0                       xor	al,al
39622                       00009E58            .310:
39623                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
39624 9E58           30E4                       xor	ah,ah
39625 9E5A           8986       FEF8            mov	-$108[bp],ax
39626                                           !BCC_EOS
39627                                           ! 8709         CX = (CX & 0x1ff);
39628                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
39629 9E5E           8B46         06            mov	ax,6[bp]
39630 9E61           25                   01FF  and	ax,#$1FF
39631                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
39632 9E64           8946         06            mov	6[bp],ax
39633                                           !BCC_EOS
39634                                           ! 8710         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
39635                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
39636 9E67           8D9E       FEFA            lea	bx,-$106[bp]
39637 9E6B           53                         push	bx
39638                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
39639 9E6C           FFB6       FEF8            push	-$108[bp]
39640                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
39641 9E70           FF76         06            push	6[bp]
39642                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39643 9E73           E8         FC25            call	_mode_info_find_mode
39644 9E76           83C4                   06  add	sp,*6
39645                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39646 9E79           8986       FEFA            mov	-$106[bp],ax
39647                                           !BCC_EOS
39648                                           ! 8711         if (cur_info != 0)
39649                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39650 9E7D           8B86       FEFA            mov	ax,-$106[bp]
39651 9E81           85C0                       test	ax,ax
39652 9E83         0F84         0099            beq 	.311
39653                       00009E87            .312:
39654                                           ! 8712         {
39655                                           ! 8713                 printf("VBE found mode %x\n",CX);
39656                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39657 9E87           FF76         06            push	6[bp]
39658                                           ! Debug: list * char = .313+0 (used reg = )
39659 9E8A           BB                   A66B  mov	bx,#.313
39660 9E8D           53                         push	bx
39661                                           ! Debug: func () void = printf+0 (used reg = )
39662 9E8E           E8         E1E9            call	_printf
39663 9E91           83C4                   04  add	sp,*4
39664                                           !BCC_EOS
39665                                           ! 8714                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
39666                                           ! Debug: list int = const $100 (used reg = )
39667 9E94           B8                   0100  mov	ax,#$100
39668 9E97           50                         push	ax
39669                                           ! Debug: list int = const 0 (used reg = )
39670 9E98           31C0                       xor	ax,ax
39671 9E9A           50                         push	ax
39672                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
39673 9E9B           8D9E       FEFC            lea	bx,-$104[bp]
39674 9E9F           53                         push	bx
39675                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
39676 9EA0           FF76         FC            push	-4[bp]
39677                                           ! Debug: func () void = memsetb+0 (used reg = )
39678 9EA3           E8         E07F            call	_memsetb
39679 9EA6           83C4                   08  add	sp,*8
39680                                           !BCC_EOS
39681                                           ! 8715                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
39682                                           ! Debug: list int = const $42 (used reg = )
39683 9EA9           B8                   0042  mov	ax,*$42
39684 9EAC           50                         push	ax
39685 9EAD           8B9E       FEFA            mov	bx,-$106[bp]
39686                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
39687                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
39688 9EB1           43                         inc	bx
39689 9EB2           43                         inc	bx
39690 9EB3           53                         push	bx
39691                                           ! Debug: list unsigned int = const $C000 (used reg = )
39692 9EB4           B8                   C000  mov	ax,#$C000
39693 9EB7           50                         push	ax
39694                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
39695 9EB8           8D9E       FEFC            lea	bx,-$104[bp]
39696 9EBC           53                         push	bx
39697                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
39698 9EBD           FF76         FC            push	-4[bp]
39699                                           ! Debug: func () void = memcpyb+0 (used reg = )
39700 9EC0           E8         E0AC            call	_memcpyb
39701 9EC3           83C4                   0A  add	sp,*$A
39702                                           !BCC_EOS
39703                                           ! 8716                 if (using_lfb) {
39704 9EC6           8B86       FEF8            mov	ax,-$108[bp]
39705 9ECA           85C0                       test	ax,ax
39706 9ECC           74           06            je  	.314
39707                       00009ECE            .315:
39708                                           ! 8717                   info.NumberOfBanks = 1;
39709                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
39710 9ECE           B0                     01  mov	al,*1
39711 9ED0           8886       FF16            mov	-$EA[bp],al
39712                                           !BCC_EOS
39713                                           ! 8718                 }
39714                                           ! 8719                 lfb_addr = pci_get_lfb_addr(0x1234);
39715                       00009ED4            .314:
39716                                           ! Debug: list int = const $1234 (used reg = )
39717 9ED4           B8                   1234  mov	ax,#$1234
39718 9ED7           50                         push	ax
39719                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
39720 9ED8           E8         E2DC            call	_pci_get_lfb_addr
39721 9EDB           44                         inc	sp
39722 9EDC           44                         inc	sp
39723                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39724 9EDD           8986       FEF6            mov	-$10A[bp],ax
39725                                           !BCC_EOS
39726                                           ! 8720                 if (lfb_addr > 0) {
39727                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39728 9EE1           8B86       FEF6            mov	ax,-$10A[bp]
39729 9EE5           85C0                       test	ax,ax
39730 9EE7           74           11            je  	.316
39731                       00009EE9            .317:
39732                                           ! 8721                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
39733                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39734 9EE9           8B86       FEF6            mov	ax,-$10A[bp]
39735 9EED           31DB                       xor	bx,bx
39736                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
39737 9EEF           93                         xchg	bx,ax
39738 9EF0           31C0                       xor	ax,ax
39739                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
39740 9EF2           8986       FF24            mov	-$DC[bp],ax
39741 9EF6           899E       FF26            mov	-$DA[bp],bx
39742                                           !BCC_EOS
39743                                           ! 8722                 }
39744                                           ! 8723                 if (info.WinAAttributes & 0x01) {
39745                       00009EFA            .316:
39746                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
39747 9EFA           8A86       FEFE            mov	al,-$102[bp]
39748 9EFE           24                     01  and	al,*1
39749 9F00           84C0                       test	al,al
39750 9F02           74           14            je  	.318
39751                       00009F04            .319:
39752                                           ! 8724                   info.WinFuncPtr = 0xC0000000UL;
39753                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
39754 9F04           31C0                       xor	ax,ax
39755 9F06           BB                   C000  mov	bx,#$C000
39756 9F09           8986       FF08            mov	-$F8[bp],ax
39757 9F0D           899E       FF0A            mov	-$F6[bp],bx
39758                                           !BCC_EOS
39759                                           ! 8725                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
39760                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
39761                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
39762 9F11           BB                   9905  mov	bx,#_dispi_set_bank_farcall
39763 9F14           899E       FF08            mov	-$F8[bp],bx
39764                                           !BCC_EOS
39765                                           ! 8726                 }
39766                                           ! 8727                 result = 0x4f;
39767                       00009F18            .318:
39768                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39769 9F18           B8                   004F  mov	ax,*$4F
39770 9F1B           8946         FE            mov	-2[bp],ax
39771                                           !BCC_EOS
39772                                           ! 8728         }
39773                                           ! 8729         else
39774                                           ! 8730         {
39775 9F1E           EB           13            jmp .31A
39776                       00009F20            .311:
39777                                           ! 8731                 printf("VBE *NOT* found mode %x\n",CX);
39778                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
39779 9F20           FF76         06            push	6[bp]
39780                                           ! Debug: list * char = .31B+0 (used reg = )
39781 9F23           BB                   A652  mov	bx,#.31B
39782 9F26           53                         push	bx
39783                                           ! Debug: func () void = printf+0 (used reg = )
39784 9F27           E8         E150            call	_printf
39785 9F2A           83C4                   04  add	sp,*4
39786                                           !BCC_EOS
39787                                           ! 8732                 result = 0x100;
39788                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
39789 9F2D           B8                   0100  mov	ax,#$100
39790 9F30           8946         FE            mov	-2[bp],ax
39791                                           !BCC_EOS
39792                                           ! 8733         }
39793                                           ! 8734         if (result == 0x4f)
39794                       00009F33            .31A:
39795                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39796 9F33           8B46         FE            mov	ax,-2[bp]
39797 9F36           3D                   004F  cmp	ax,*$4F
39798 9F39           75           18            jne 	.31C
39799                       00009F3B            .31D:
39800                                           ! 8735         {
39801                                           ! 8736                 memcpyb(ES, DI, ss, &info, sizeof(info));
39802                                           ! Debug: list int = const $100 (used reg = )
39803 9F3B           B8                   0100  mov	ax,#$100
39804 9F3E           50                         push	ax
39805                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
39806 9F3F           8D9E       FEFC            lea	bx,-$104[bp]
39807 9F43           53                         push	bx
39808                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39809 9F44           FF76         FC            push	-4[bp]
39810                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
39811 9F47           FF76         0A            push	$A[bp]
39812                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
39813 9F4A           FF76         08            push	8[bp]
39814                                           ! Debug: func () void = memcpyb+0 (used reg = )
39815 9F4D           E8         E01F            call	_memcpyb
39816 9F50           83C4                   0A  add	sp,*$A
39817                                           !BCC_EOS
39818                                           ! 8737         }
39819                                           ! 8738         write_word(ss, AX, result);
39820                       00009F53            .31C:
39821                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
39822 9F53           FF76         FE            push	-2[bp]
39823                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
39824 9F56           FF76         04            push	4[bp]
39825                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39826 9F59           FF76         FC            push	-4[bp]
39827                                           ! Debug: func () void = write_word+0 (used reg = )
39828 9F5C           E8         E0AE            call	_write_word
39829 9F5F           83C4                   06  add	sp,*6
39830                                           !BCC_EOS
39831                                           ! 8739 }
39832 9F62           89EC                       mov	sp,bp
39833 9F64           5D                         pop	bp
39834 9F65           C3                         ret
39835                                           ! 8740 void vbe_biosfn_set_mode(AX, BX, ES, DI)
39836                                           ! Register BX used in function vbe_biosfn_return_mode_information
39837                                           ! 8741 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
39838                                           export	_vbe_biosfn_set_mode
39839                       00009F66            _vbe_biosfn_set_mode:
39840                                           !BCC_EOS
39841                                           !BCC_EOS
39842                                           !BCC_EOS
39843                                           !BCC_EOS
39844                                           ! 8742 {
39845                                           ! 8743         Bit16u ss = get_SS();
39846 9F66           55                         push	bp
39847 9F67           89E5                       mov	bp,sp
39848 9F69           4C                         dec	sp
39849 9F6A           4C                         dec	sp
39850                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39851 9F6B           E8         E0ED            call	_get_SS
39852                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39853 9F6E           8946         FE            mov	-2[bp],ax
39854                                           !BCC_EOS
39855                                           ! 8744         Bit16u result;
39856                                           !BCC_EOS
39857                                           ! 8745         ModeInfoListItem *cur_info;
39858                                           !BCC_EOS
39859                                           ! 8746         Boolean using_lfb;
39860                                           !BCC_EOS
39861                                           ! 8747         Bit8u no_clear;
39862                                           !BCC_EOS
39863                                           ! 8748         Bit8u lfb_flag;
39864                                           !BCC_EOS
39865                                           ! 8749         using_lfb=((BX & 0x4000) == 0x4000);
39866 9F71           83C4                   F8  add	sp,*-8
39867                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
39868 9F74           8B46         06            mov	ax,6[bp]
39869 9F77           25                   4000  and	ax,#$4000
39870                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39871 9F7A           3D                   4000  cmp	ax,#$4000
39872 9F7D           75           04            jne	.31E
39873 9F7F           B0                     01  mov	al,*1
39874 9F81           EB           02            jmp	.31F
39875                       00009F83            .31E:
39876 9F83           30C0                       xor	al,al
39877                       00009F85            .31F:
39878                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
39879 9F85           30E4                       xor	ah,ah
39880 9F87           8946         F8            mov	-8[bp],ax
39881                                           !BCC_EOS
39882                                           ! 8750         lfb_flag=using_lfb?0x40:0;
39883 9F8A           8B46         F8            mov	ax,-8[bp]
39884 9F8D           85C0                       test	ax,ax
39885 9F8F           74           04            je  	.320
39886                       00009F91            .321:
39887 9F91           B0                     40  mov	al,*$40
39888 9F93           EB           02            jmp .322
39889                       00009F95            .320:
39890 9F95           30C0                       xor	al,al
39891                       00009F97            .322:
39892                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
39893 9F97           8846         F6            mov	-$A[bp],al
39894                                           !BCC_EOS
39895                                           ! 8751         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
39896                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
39897 9F9A           8B46         06            mov	ax,6[bp]
39898 9F9D           25                   8000  and	ax,#$8000
39899                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
39900 9FA0           3D                   8000  cmp	ax,#$8000
39901 9FA3           75           04            jne 	.323
39902                       00009FA5            .324:
39903 9FA5           B0                     80  mov	al,#$80
39904 9FA7           EB           02            jmp .325
39905                       00009FA9            .323:
39906 9FA9           30C0                       xor	al,al
39907                       00009FAB            .325:
39908                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
39909 9FAB           8846         F7            mov	-9[bp],al
39910                                           !BCC_EOS
39911                                           ! 8752         BX = (BX & 0x1ff);
39912                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
39913 9FAE           8B46         06            mov	ax,6[bp]
39914 9FB1           25                   01FF  and	ax,#$1FF
39915                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
39916 9FB4           8946         06            mov	6[bp],ax
39917                                           !BCC_EOS
39918                                           ! 8753         if (BX<0x0100)
39919                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
39920 9FB7           8B46         06            mov	ax,6[bp]
39921 9FBA           3D                   0100  cmp	ax,#$100
39922 9FBD           73           23            jae 	.326
39923                       00009FBF            .327:
39924                                           ! 8754         {
39925                                           ! 8755                 Bit8u mode;
39926                                           !BCC_EOS
39927                                           ! 8756          
39928                                           ! 8756        dispi_set_enable(0x00);
39929 9FBF           4C                         dec	sp
39930 9FC0           4C                         dec	sp
39931                                           ! Debug: list int = const 0 (used reg = )
39932 9FC1           31C0                       xor	ax,ax
39933 9FC3           50                         push	ax
39934                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39935 9FC4           E8         F902            call	_dispi_set_enable
39936 9FC7           44                         inc	sp
39937 9FC8           44                         inc	sp
39938                                           !BCC_EOS
39939                                           ! 8757                 mode=(BX & 0xff);
39940                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
39941 9FC9           8A46         06            mov	al,6[bp]
39942                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
39943 9FCC           8846         F5            mov	-$B[bp],al
39944                                           !BCC_EOS
39945                                           ! 8758                 biosfn_set_video_mode(mode);
39946                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
39947 9FCF           8A46         F5            mov	al,-$B[bp]
39948 9FD2           30E4                       xor	ah,ah
39949 9FD4           50                         push	ax
39950                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39951 9FD5           E8         9D55            call	_biosfn_set_video_mode
39952 9FD8           44                         inc	sp
39953 9FD9           44                         inc	sp
39954                                           !BCC_EOS
39955                                           ! 8759                 result = 0x4f;
39956                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
39957 9FDA           B8                   004F  mov	ax,*$4F
39958 9FDD           8946         FC            mov	-4[bp],ax
39959                                           !BCC_EOS
39960                                           ! 8760         }
39961 9FE0           44                         inc	sp
39962 9FE1           44                         inc	sp
39963                                           ! 8761         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
39964                       00009FE2            .326:
39965                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
39966 9FE2           8D5E         FA            lea	bx,-6[bp]
39967 9FE5           53                         push	bx
39968                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
39969 9FE6           FF76         F8            push	-8[bp]
39970                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
39971 9FE9           FF76         06            push	6[bp]
39972                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39973 9FEC           E8         FAAC            call	_mode_info_find_mode
39974 9FEF           83C4                   06  add	sp,*6
39975                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39976 9FF2           8946         FA            mov	-6[bp],ax
39977                                           !BCC_EOS
39978                                           ! 8762         if (cur_info != 0)
39979                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39980 9FF5           8B46         FA            mov	ax,-6[bp]
39981 9FF8           85C0                       test	ax,ax
39982 9FFA         0F84         00C8            beq 	.328
39983                       00009FFE            .329:
39984                                           ! 8763         {
39985                                           ! 8764                 printf("VBE found mode %x, setting:\n", BX);
39986                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
39987 9FFE           FF76         06            push	6[bp]
39988                                           ! Debug: list * char = .32A+0 (used reg = )
39989 A001           BB                   A635  mov	bx,#.32A
39990 A004           53                         push	bx
39991                                           ! Debug: func () void = printf+0 (used reg = )
39992 A005           E8         E072            call	_printf
39993 A008           83C4                   04  add	sp,*4
39994                                           !BCC_EOS
39995                                           ! 8765                 printf("\txres%x yres%x bpp%x\n",
39996                                           ! 8766                         cur_info->info.XResolution,
39997                                           ! 8767                         cur_info->info.YResolution,
39998                                           ! 8768                         cur_info->info.BitsPerPixel);
39999 A00B           8B5E         FA            mov	bx,-6[bp]
40000                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
40001 A00E           8A47         1B            mov	al,$1B[bx]
40002 A011           30E4                       xor	ah,ah
40003 A013           50                         push	ax
40004 A014           8B5E         FA            mov	bx,-6[bp]
40005                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
40006 A017           FF77         16            push	$16[bx]
40007 A01A           8B5E         FA            mov	bx,-6[bp]
40008                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
40009 A01D           FF77         14            push	$14[bx]
40010                                           ! Debug: list * char = .32B+0 (used reg = )
40011 A020           BB                   A61F  mov	bx,#.32B
40012 A023           53                         push	bx
40013                                           ! Debug: func () void = printf+0 (used reg = )
40014 A024           E8         E053            call	_printf
40015 A027           83C4                   08  add	sp,*8
40016                                           !BCC_EOS
40017                                           ! 8769                 dispi_set_enable(0x00);
40018                                           ! Debug: list int = const 0 (used reg = )
40019 A02A           31C0                       xor	ax,ax
40020 A02C           50                         push	ax
40021                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
40022 A02D           E8         F899            call	_dispi_set_enable
40023 A030           44                         inc	sp
40024 A031           44                         inc	sp
40025                                           !BCC_EOS
40026                                           ! 8770                 if (cur_info->info.BitsPerPixel == 4)
40027 A032           8B5E         FA            mov	bx,-6[bp]
40028                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
40029 A035           8A47         1B            mov	al,$1B[bx]
40030 A038           3C                     04  cmp	al,*4
40031 A03A           75           09            jne 	.32C
40032                       0000A03C            .32D:
40033                                           ! 8771                 {
40034                                           ! 8772                   biosfn_set_video_mode(0x6a);
40035                                           ! Debug: list int = const $6A (used reg = )
40036 A03C           B8                   006A  mov	ax,*$6A
40037 A03F           50                         push	ax
40038                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
40039 A040           E8         9CEA            call	_biosfn_set_video_mode
40040 A043           44                         inc	sp
40041 A044           44                         inc	sp
40042                                           !BCC_EOS
40043                                           ! 8773                 }
40044                                           ! 8774                 if (cur_info->info.BitsPerPixel == 8)
40045                       0000A045            .32C:
40046 A045           8B5E         FA            mov	bx,-6[bp]
40047                                           ! Debug: logeq int = const 8 to unsigned char = [bx+$1B] (used reg = )
40048 A048           8A47         1B            mov	al,$1B[bx]
40049 A04B           3C                     08  cmp	al,*8
40050 A04D           75           09            jne 	.32E
40051                       0000A04F            .32F:
40052                                           ! 8775                 {
40053                                           ! 8776                   load_dac_palette(3);
40054                                           ! Debug: list int = const 3 (used reg = )
40055 A04F           B8                   0003  mov	ax,*3
40056 A052           50                         push	ax
40057                                           ! Debug: func () void = load_dac_palette+0 (used reg = )
40058 A053           E8         9BDB            call	_load_dac_palette
40059 A056           44                         inc	sp
40060 A057           44                         inc	sp
40061                                           !BCC_EOS
40062                                           ! 8777                 }
40063                                           ! 8778                 dispi_set_bpp(cur_info->info.BitsPerPixel);
40064                       0000A058            .32E:
40065 A058           8B5E         FA            mov	bx,-6[bp]
40066                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
40067 A05B           8A47         1B            mov	al,$1B[bx]
40068 A05E           30E4                       xor	ah,ah
40069 A060           50                         push	ax
40070                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
40071 A061           E8         F7EA            call	_dispi_set_bpp
40072 A064           44                         inc	sp
40073 A065           44                         inc	sp
40074                                           !BCC_EOS
40075                                           ! 8779                 dispi_set_xres(cur_info->info.XResolution);
40076 A066           8B5E         FA            mov	bx,-6[bp]
40077                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
40078 A069           FF77         14            push	$14[bx]
40079                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
40080 A06C           E8         F7AA            call	_dispi_set_xres
40081 A06F           44                         inc	sp
40082 A070           44                         inc	sp
40083                                           !BCC_EOS
40084                                           ! 8780                 dispi_set_yres(cur_info->info.YResolution);
40085 A071           8B5E         FA            mov	bx,-6[bp]
40086                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
40087 A074           FF77         16            push	$16[bx]
40088                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
40089 A077           E8         F7B6            call	_dispi_set_yres
40090 A07A           44                         inc	sp
40091 A07B           44                         inc	sp
40092                                           !BCC_EOS
40093                                           ! 8781                 dispi_set_bank(0);
40094                                           ! Debug: list int = const 0 (used reg = )
40095 A07C           31C0                       xor	ax,ax
40096 A07E           50                         push	ax
40097                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
40098 A07F           E8         F865            call	_dispi_set_bank
40099 A082           44                         inc	sp
40100 A083           44                         inc	sp
40101                                           !BCC_EOS
40102                                           ! 8782                 dispi_set_enable(0x01 | no_clear | lfb_flag);
40103                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
40104                                           ! Debug: expression subtree swapping
40105 A084           8A46         F7            mov	al,-9[bp]
40106 A087           0C                     01  or	al,*1
40107                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
40108 A089           0A46         F6            or	al,-$A[bp]
40109                                           ! Debug: list unsigned char = al+0 (used reg = )
40110 A08C           30E4                       xor	ah,ah
40111 A08E           50                         push	ax
40112                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
40113 A08F           E8         F837            call	_dispi_set_enable
40114 A092           44                         inc	sp
40115 A093           44                         inc	sp
40116                                           !BCC_EOS
40117                                           ! 8783                 vga_compat_setup();
40118                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
40119 A094           E8         F92D            call	_vga_compat_setup
40120                                           !BCC_EOS
40121                                           ! 8784                 write_word(0x40,0xBA,BX);
40122                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40123 A097           FF76         06            push	6[bp]
40124                                           ! Debug: list int = const $BA (used reg = )
40125 A09A           B8                   00BA  mov	ax,#$BA
40126 A09D           50                         push	ax
40127                                           ! Debug: list int = const $40 (used reg = )
40128 A09E           B8                   0040  mov	ax,*$40
40129 A0A1           50                         push	ax
40130                                           ! Debug: func () void = write_word+0 (used reg = )
40131 A0A2           E8         DF68            call	_write_word
40132 A0A5           83C4                   06  add	sp,*6
40133                                           !BCC_EOS
40134                                           ! 8785                 write_byte(0x40,0x87,(0x60 | no_clear));
40135                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
40136                                           ! Debug: expression subtree swapping
40137 A0A8           8A46         F7            mov	al,-9[bp]
40138 A0AB           0C                     60  or	al,*$60
40139                                           ! Debug: list unsigned char = al+0 (used reg = )
40140 A0AD           30E4                       xor	ah,ah
40141 A0AF           50                         push	ax
40142                                           ! Debug: list int = const $87 (used reg = )
40143 A0B0           B8                   0087  mov	ax,#$87
40144 A0B3           50                         push	ax
40145                                           ! Debug: list int = const $40 (used reg = )
40146 A0B4           B8                   0040  mov	ax,*$40
40147 A0B7           50                         push	ax
40148                                           ! Debug: func () void = write_byte+0 (used reg = )
40149 A0B8           E8         DF3A            call	_write_byte
40150 A0BB           83C4                   06  add	sp,*6
40151                                           !BCC_EOS
40152                                           ! 8786                 result = 0x4f;
40153                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
40154 A0BE           B8                   004F  mov	ax,*$4F
40155 A0C1           8946         FC            mov	-4[bp],ax
40156                                           !BCC_EOS
40157                                           ! 8787         }
40158                                           ! 8788         else
40159                                           ! 8789         {
40160 A0C4           EB           21            jmp .330
40161                       0000A0C6            .328:
40162                                           ! 8790                 printf("VBE *NOT* found mode %x\n" , BX);
40163                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
40164 A0C6           FF76         06            push	6[bp]
40165                                           ! Debug: list * char = .331+0 (used reg = )
40166 A0C9           BB                   A606  mov	bx,#.331
40167 A0CC           53                         push	bx
40168                                           ! Debug: func () void = printf+0 (used reg = )
40169 A0CD           E8         DFAA            call	_printf
40170 A0D0           83C4                   04  add	sp,*4
40171                                           !BCC_EOS
40172                                           ! 8791                 result = 0x100;
40173                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
40174 A0D3           B8                   0100  mov	ax,#$100
40175 A0D6           8946         FC            mov	-4[bp],ax
40176                                           !BCC_EOS
40177                                           ! 8792                 if (BX == 3)
40178                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
40179 A0D9           8B46         06            mov	ax,6[bp]
40180 A0DC           3D                   0003  cmp	ax,*3
40181 A0DF           75           06            jne 	.332
40182                       0000A0E1            .333:
40183                                           ! 8793                         result = 0x4f;
40184                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
40185 A0E1           B8                   004F  mov	ax,*$4F
40186 A0E4           8946         FC            mov	-4[bp],ax
40187                                           !BCC_EOS
40188                                           ! 8794         }
40189                       0000A0E7            .332:
40190                                           ! 8795         write_word(ss, AX, result);
40191                       0000A0E7            .330:
40192                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
40193 A0E7           FF76         FC            push	-4[bp]
40194                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
40195 A0EA           FF76         04            push	4[bp]
40196                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
40197 A0ED           FF76         FE            push	-2[bp]
40198                                           ! Debug: func () void = write_word+0 (used reg = )
40199 A0F0           E8         DF1A            call	_write_word
40200 A0F3           83C4                   06  add	sp,*6
40201                                           !BCC_EOS
40202                                           ! 8796 }
40203 A0F6           89EC                       mov	sp,bp
40204 A0F8           5D                         pop	bp
40205 A0F9           C3                         ret
40206                                           ! 8797 #asm
40207                                           !BCC_ASM
40208                       00000008            _vbe_biosfn_set_mode.DI	set	8
40209                       00000006            _vbe_biosfn_set_mode.ES	set	6
40210                       00000002            _vbe_biosfn_set_mode.AX	set	2
40211                       00000004            _vbe_biosfn_set_mode.BX	set	4
40212                       0000A0FA            vbe_biosfn_return_current_mode:
40213 A0FA           1E                           push ds
40214 A0FB           B8                   0040    mov ax, # 0x40
40215 A0FE           8ED8                         mov ds, ax
40216 A100           E8         F7D6              call dispi_get_enable
40217 A103           25                   0001    and ax, # 0x01
40218 A106           74           09              jz no_vbe_mode
40219 A108           BB                   00BA    mov bx, # 0xBA
40220 A10B           8B07                         mov ax, [bx]
40221 A10D           89C3                         mov bx, ax
40222 A10F           75           09              jnz vbe_03_ok
40223                       0000A111            no_vbe_mode:
40224 A111           BB                   0049    mov bx, # 0x49
40225 A114           8A07                         mov al, [bx]
40226 A116           88C3                         mov bl, al
40227 A118           30FF                         xor bh, bh
40228                       0000A11A            vbe_03_ok:
40229 A11A           B8                   004F    mov ax, #0x004f
40230 A11D           1F                           pop ds
40231 A11E           C3                           ret
40232                                           ! 8818 endasm
40233                                           !BCC_ENDASM
40234                                           ! 8819 Bit16u vbe_biosfn_read_video_state_size()
40235                                           ! Register BX used in function vbe_biosfn_set_mode
40236                                           ! 8820 {
40237                                           export	_vbe_biosfn_read_video_state_size
40238                       0000A11F            _vbe_biosfn_read_video_state_size:
40239                                           ! 8821     return 9 * 2;
40240 A11F           55                         push	bp
40241 A120           89E5                       mov	bp,sp
40242 A122           B8                   0012  mov	ax,*$12
40243 A125           5D                         pop	bp
40244 A126           C3                         ret
40245                                           !BCC_EOS
40246                                           ! 8822 }
40247                                           ! 8823 void vbe_biosfn_save_video_state(ES, BX)
40248                                           ! 8824      Bit16u ES; Bit16u BX;
40249                                           export	_vbe_biosfn_save_video_state
40250                       0000A127            _vbe_biosfn_save_video_state:
40251                                           !BCC_EOS
40252                                           !BCC_EOS
40253                                           ! 8825 {
40254                                           ! 8826     Bit16u enable, i;
40255                                           !BCC_EOS
40256                                           ! 8827     outw(0x01CE,0x4);
40257 A127           55                         push	bp
40258 A128           89E5                       mov	bp,sp
40259 A12A           83C4                   FC  add	sp,*-4
40260                                           ! Debug: list int = const 4 (used reg = )
40261 A12D           B8                   0004  mov	ax,*4
40262 A130           50                         push	ax
40263                                           ! Debug: list int = const $1CE (used reg = )
40264 A131           B8                   01CE  mov	ax,#$1CE
40265 A134           50                         push	ax
40266                                           ! Debug: func () void = outw+0 (used reg = )
40267 A135           E8         DF13            call	_outw
40268 A138           83C4                   04  add	sp,*4
40269                                           !BCC_EOS
40270                                           ! 8828     enable = inw(0x01CF);
40271                                           ! Debug: list int = const $1CF (used reg = )
40272 A13B           B8                   01CF  mov	ax,#$1CF
40273 A13E           50                         push	ax
40274                                           ! Debug: func () unsigned short = inw+0 (used reg = )
40275 A13F           E8         DEEE            call	_inw
40276 A142           44                         inc	sp
40277 A143           44                         inc	sp
40278                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
40279 A144           8946         FE            mov	-2[bp],ax
40280                                           !BCC_EOS
40281                                           ! 8829     write_word
40282                                           ! 8829 (ES, BX, enable);
40283                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40284 A147           FF76         FE            push	-2[bp]
40285                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
40286 A14A           FF76         06            push	6[bp]
40287                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
40288 A14D           FF76         04            push	4[bp]
40289                                           ! Debug: func () void = write_word+0 (used reg = )
40290 A150           E8         DEBA            call	_write_word
40291 A153           83C4                   06  add	sp,*6
40292                                           !BCC_EOS
40293                                           ! 8830     BX += 2;
40294                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40295 A156           8B46         06            mov	ax,6[bp]
40296 A159           40                         inc	ax
40297 A15A           40                         inc	ax
40298 A15B           8946         06            mov	6[bp],ax
40299                                           !BCC_EOS
40300                                           ! 8831     if (!(enable & 0x01))
40301                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
40302 A15E           8A46         FE            mov	al,-2[bp]
40303 A161           24                     01  and	al,*1
40304 A163           84C0                       test	al,al
40305 A165           75           04            jne 	.334
40306                       0000A167            .335:
40307                                           ! 8832         return;
40308 A167           89EC                       mov	sp,bp
40309 A169           5D                         pop	bp
40310 A16A           C3                         ret
40311                                           !BCC_EOS
40312                                           ! 8833     for(i = 0x1; i <= 0x9; i++) {
40313                       0000A16B            .334:
40314                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
40315 A16B           B8                   0001  mov	ax,*1
40316 A16E           8946         FC            mov	-4[bp],ax
40317                                           !BCC_EOS
40318                                           !BCC_EOS
40319 A171           EB           3A            jmp .338
40320                       0000A173            .339:
40321                                           ! 8834         if (i != 0x4) {
40322                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
40323 A173           8B46         FC            mov	ax,-4[bp]
40324 A176           3D                   0004  cmp	ax,*4
40325 A179           74           2B            je  	.33A
40326                       0000A17B            .33B:
40327                                           ! 8835             outw(0x01CE, i);
40328                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40329 A17B           FF76         FC            push	-4[bp]
40330                                           ! Debug: list int = const $1CE (used reg = )
40331 A17E           B8                   01CE  mov	ax,#$1CE
40332 A181           50                         push	ax
40333                                           ! Debug: func () void = outw+0 (used reg = )
40334 A182           E8         DEC6            call	_outw
40335 A185           83C4                   04  add	sp,*4
40336                                           !BCC_EOS
40337                                           ! 8836             write_word(ES, BX, inw(0x01CF));
40338                                           ! Debug: list int = const $1CF (used reg = )
40339 A188           B8                   01CF  mov	ax,#$1CF
40340 A18B           50                         push	ax
40341                                           ! Debug: func () unsigned short = inw+0 (used reg = )
40342 A18C           E8         DEA1            call	_inw
40343 A18F           44                         inc	sp
40344 A190           44                         inc	sp
40345                                           ! Debug: list unsigned short = ax+0 (used reg = )
40346 A191           50                         push	ax
40347                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
40348 A192           FF76         06            push	6[bp]
40349                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
40350 A195           FF76         04            push	4[bp]
40351                                           ! Debug: func () void = write_word+0 (used reg = )
40352 A198           E8         DE72            call	_write_word
40353 A19B           83C4                   06  add	sp,*6
40354                                           !BCC_EOS
40355                                           ! 8837             BX += 2;
40356                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40357 A19E           8B46         06            mov	ax,6[bp]
40358 A1A1           40                         inc	ax
40359 A1A2           40                         inc	ax
40360 A1A3           8946         06            mov	6[bp],ax
40361                                           !BCC_EOS
40362                                           ! 8838         }
40363                                           ! 8839     }
40364                       0000A1A6            .33A:
40365                                           ! 8840 }
40366                       0000A1A6            .337:
40367                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40368 A1A6           8B46         FC            mov	ax,-4[bp]
40369 A1A9           40                         inc	ax
40370 A1AA           8946         FC            mov	-4[bp],ax
40371                       0000A1AD            .338:
40372                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40373 A1AD           8B46         FC            mov	ax,-4[bp]
40374 A1B0           3D                   0009  cmp	ax,*9
40375 A1B3           76           BE            jbe	.339
40376                       0000A1B5            .33C:
40377                       0000A1B5            .336:
40378 A1B5           89EC                       mov	sp,bp
40379 A1B7           5D                         pop	bp
40380 A1B8           C3                         ret
40381                                           ! 8841 void vbe_biosfn_restore_video_state(ES, BX)
40382                                           ! 8842      Bit16u ES; Bit16u BX;
40383                                           export	_vbe_biosfn_restore_video_state
40384                       0000A1B9            _vbe_biosfn_restore_video_state:
40385                                           !BCC_EOS
40386                                           !BCC_EOS
40387                                           ! 8843 {
40388                                           ! 8844     Bit16u enable, i;
40389                                           !BCC_EOS
40390                                           ! 8845     enable = read_word(ES, BX);
40391 A1B9           55                         push	bp
40392 A1BA           89E5                       mov	bp,sp
40393 A1BC           83C4                   FC  add	sp,*-4
40394                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40395 A1BF           FF76         06            push	6[bp]
40396                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40397 A1C2           FF76         04            push	4[bp]
40398                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40399 A1C5           E8         DE1A            call	_read_word
40400 A1C8           83C4                   04  add	sp,*4
40401                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
40402 A1CB           8946         FE            mov	-2[bp],ax
40403                                           !BCC_EOS
40404                                           ! 8846     BX += 2;
40405                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40406 A1CE           8B46         06            mov	ax,6[bp]
40407 A1D1           40                         inc	ax
40408 A1D2           40                         inc	ax
40409 A1D3           8946         06            mov	6[bp],ax
40410                                           !BCC_EOS
40411                                           ! 8847     if (!(enable & 0x01)) {
40412                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
40413 A1D6           8A46         FE            mov	al,-2[bp]
40414 A1D9           24                     01  and	al,*1
40415 A1DB           84C0                       test	al,al
40416 A1DD           75           1E            jne 	.33D
40417                       0000A1DF            .33E:
40418                                           ! 8848         outw(0x01CE,0x4);
40419                                           ! Debug: list int = const 4 (used reg = )
40420 A1DF           B8                   0004  mov	ax,*4
40421 A1E2           50                         push	ax
40422                                           ! Debug: list int = const $1CE (used reg = )
40423 A1E3           B8                   01CE  mov	ax,#$1CE
40424 A1E6           50                         push	ax
40425                                           ! Debug: func () void = outw+0 (used reg = )
40426 A1E7           E8         DE61            call	_outw
40427 A1EA           83C4                   04  add	sp,*4
40428                                           !BCC_EOS
40429                                           ! 8849         outw(0x01CF, enable);
40430                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40431 A1ED           FF76         FE            push	-2[bp]
40432                                           ! Debug: list int = const $1CF (used reg = )
40433 A1F0           B8                   01CF  mov	ax,#$1CF
40434 A1F3           50                         push	ax
40435                                           ! Debug: func () void = outw+0 (used reg = )
40436 A1F4           E8         DE54            call	_outw
40437 A1F7           83C4                   04  add	sp,*4
40438                                           !BCC_EOS
40439                                           ! 8850     } else {
40440 A1FA           E9         00E5            br 	.33F
40441                       0000A1FD            .33D:
40442                                           ! 8851         outw(0x01CE, 0x1);
40443                                           ! Debug: list int = const 1 (used reg = )
40444 A1FD           B8                   0001  mov	ax,*1
40445 A200           50                         push	ax
40446                                           ! Debug: list int = const $1CE (used reg = )
40447 A201           B8                   01CE  mov	ax,#$1CE
40448 A204           50                         push	ax
40449                                           ! Debug: func () void = outw+0 (used reg = )
40450 A205           E8         DE43            call	_outw
40451 A208           83C4                   04  add	sp,*4
40452                                           !BCC_EOS
40453                                           ! 8852         outw(0x01CF, read_word(ES, BX));
40454                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40455 A20B           FF76         06            push	6[bp]
40456                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40457 A20E           FF76         04            push	4[bp]
40458                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40459 A211           E8         DDCE            call	_read_word
40460 A214           83C4                   04  add	sp,*4
40461                                           ! Debug: list unsigned short = ax+0 (used reg = )
40462 A217           50                         push	ax
40463                                           ! Debug: list int = const $1CF (used reg = )
40464 A218           B8                   01CF  mov	ax,#$1CF
40465 A21B           50                         push	ax
40466                                           ! Debug: func () void = outw+0 (used reg = )
40467 A21C           E8         DE2C            call	_outw
40468 A21F           83C4                   04  add	sp,*4
40469                                           !BCC_EOS
40470                                           ! 8853         BX += 2;
40471                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40472 A222           8B46         06            mov	ax,6[bp]
40473 A225           40                         inc	ax
40474 A226           40                         inc	ax
40475 A227           8946         06            mov	6[bp],ax
40476                                           !BCC_EOS
40477                                           ! 8854         outw(0x01CE, 0x2);
40478                                           ! Debug: list int = const 2 (used reg = )
40479 A22A           B8                   0002  mov	ax,*2
40480 A22D           50                         push	ax
40481                                           ! Debug: list int = const $1CE (used reg = )
40482 A22E           B8                   01CE  mov	ax,#$1CE
40483 A231           50                         push	ax
40484                                           ! Debug: func () void = outw+0 (used reg = )
40485 A232           E8         DE16            call	_outw
40486 A235           83C4                   04  add	sp,*4
40487                                           !BCC_EOS
40488                                           ! 8855         outw(0x01CF, read_word(ES, BX));
40489                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40490 A238           FF76         06            push	6[bp]
40491                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40492 A23B           FF76         04            push	4[bp]
40493                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40494 A23E           E8         DDA1            call	_read_word
40495 A241           83C4                   04  add	sp,*4
40496                                           ! Debug: list unsigned short = ax+0 (used reg = )
40497 A244           50                         push	ax
40498                                           ! Debug: list int = const $1CF (used reg = )
40499 A245           B8                   01CF  mov	ax,#$1CF
40500 A248           50                         push	ax
40501                                           ! Debug: func () void = outw+0 (used reg = )
40502 A249           E8         DDFF            call	_outw
40503 A24C           83C4                   04  add	sp,*4
40504                                           !BCC_EOS
40505                                           ! 8856         BX += 2;
40506                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40507 A24F           8B46         06            mov	ax,6[bp]
40508 A252           40                         inc	ax
40509 A253           40                         inc	ax
40510 A254           8946         06            mov	6[bp],ax
40511                                           !BCC_EOS
40512                                           ! 8857         outw(0x01CE, 0x3);
40513                                           ! Debug: list int = const 3 (used reg = )
40514 A257           B8                   0003  mov	ax,*3
40515 A25A           50                         push	ax
40516                                           ! Debug: list int = const $1CE (used reg = )
40517 A25B           B8                   01CE  mov	ax,#$1CE
40518 A25E           50                         push	ax
40519                                           ! Debug: func () void = outw+0 (used reg = )
40520 A25F           E8         DDE9            call	_outw
40521 A262           83C4                   04  add	sp,*4
40522                                           !BCC_EOS
40523                                           ! 8858         outw(0x01CF, read_word(ES, BX));
40524                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40525 A265           FF76         06            push	6[bp]
40526                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40527 A268           FF76         04            push	4[bp]
40528                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40529 A26B           E8         DD74            call	_read_word
40530 A26E           83C4                   04  add	sp,*4
40531                                           ! Debug: list unsigned short = ax+0 (used reg = )
40532 A271           50                         push	ax
40533                                           ! Debug: list int = const $1CF (used reg = )
40534 A272           B8                   01CF  mov	ax,#$1CF
40535 A275           50                         push	ax
40536                                           ! Debug: func () void = outw+0 (used reg = )
40537 A276           E8         DDD2            call	_outw
40538 A279           83C4                   04  add	sp,*4
40539                                           !BCC_EOS
40540                                           ! 8859         BX += 2;
40541                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40542 A27C           8B46         06            mov	ax,6[bp]
40543 A27F           40                         inc	ax
40544 A280           40                         inc	ax
40545 A281           8946         06            mov	6[bp],ax
40546                                           !BCC_EOS
40547                                           ! 8860         outw(0x01CE,0x4);
40548                                           ! Debug: list int = const 4 (used reg = )
40549 A284           B8                   0004  mov	ax,*4
40550 A287           50                         push	ax
40551                                           ! Debug: list int = const $1CE (used reg = )
40552 A288           B8                   01CE  mov	ax,#$1CE
40553 A28B           50                         push	ax
40554                                           ! Debug: func () void = outw+0 (used reg = )
40555 A28C           E8         DDBC            call	_outw
40556 A28F           83C4                   04  add	sp,*4
40557                                           !BCC_EOS
40558                                           ! 8861         outw(0x01CF, enable);
40559                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40560 A292           FF76         FE            push	-2[bp]
40561                                           ! Debug: list int = const $1CF (used reg = )
40562 A295           B8                   01CF  mov	ax,#$1CF
40563 A298           50                         push	ax
40564                                           ! Debug: func () void = outw+0 (used reg = )
40565 A299           E8         DDAF            call	_outw
40566 A29C           83C4                   04  add	sp,*4
40567                                           !BCC_EOS
40568                                           ! 8862         for(i = 0x5; i <= 0x9; i++) {
40569                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
40570 A29F           B8                   0005  mov	ax,*5
40571 A2A2           8946         FC            mov	-4[bp],ax
40572                                           !BCC_EOS
40573                                           !BCC_EOS
40574 A2A5           EB           33            jmp .342
40575                       0000A2A7            .343:
40576                                           ! 8863             outw(0x01CE, i);
40577                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40578 A2A7           FF76         FC            push	-4[bp]
40579                                           ! Debug: list int = const $1CE (used reg = )
40580 A2AA           B8                   01CE  mov	ax,#$1CE
40581 A2AD           50                         push	ax
40582                                           ! Debug: func () void = outw+0 (used reg = )
40583 A2AE           E8         DD9A            call	_outw
40584 A2B1           83C4                   04  add	sp,*4
40585                                           !BCC_EOS
40586                                           ! 8864             outw(0x01CF, read_word(ES, BX));
40587                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40588 A2B4           FF76         06            push	6[bp]
40589                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40590 A2B7           FF76         04            push	4[bp]
40591                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40592 A2BA           E8         DD25            call	_read_word
40593 A2BD           83C4                   04  add	sp,*4
40594                                           ! Debug: list unsigned short = ax+0 (used reg = )
40595 A2C0           50                         push	ax
40596                                           ! Debug: list int = const $1CF (used reg = )
40597 A2C1           B8                   01CF  mov	ax,#$1CF
40598 A2C4           50                         push	ax
40599                                           ! Debug: func () void = outw+0 (used reg = )
40600 A2C5           E8         DD83            call	_outw
40601 A2C8           83C4                   04  add	sp,*4
40602                                           !BCC_EOS
40603                                           ! 8865             BX += 2;
40604                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40605 A2CB           8B46         06            mov	ax,6[bp]
40606 A2CE           40                         inc	ax
40607 A2CF           40                         inc	ax
40608 A2D0           8946         06            mov	6[bp],ax
40609                                           !BCC_EOS
40610                                           ! 8866         }
40611                                           ! 8867     }
40612                       0000A2D3            .341:
40613                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40614 A2D3           8B46         FC            mov	ax,-4[bp]
40615 A2D6           40                         inc	ax
40616 A2D7           8946         FC            mov	-4[bp],ax
40617                       0000A2DA            .342:
40618                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40619 A2DA           8B46         FC            mov	ax,-4[bp]
40620 A2DD           3D                   0009  cmp	ax,*9
40621 A2E0           76           C5            jbe	.343
40622                       0000A2E2            .344:
40623                       0000A2E2            .340:
40624                                           ! 8868 }
40625                       0000A2E2            .33F:
40626 A2E2           89EC                       mov	sp,bp
40627 A2E4           5D                         pop	bp
40628 A2E5           C3                         ret
40629                                           ! 8869 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
40630                                           ! 8870 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
40631                                           export	_vbe_biosfn_save_restore_state
40632                       0000A2E6            _vbe_biosfn_save_restore_state:
40633                                           !BCC_EOS
40634                                           !BCC_EOS
40635                                           !BCC_EOS
40636                                           !BCC_EOS
40637                                           !BCC_EOS
40638                                           ! 8871 {
40639                                           ! 8872     Bit16u ss=get_SS();
40640 A2E6           55                         push	bp
40641 A2E7           89E5                       mov	bp,sp
40642 A2E9           4C                         dec	sp
40643 A2EA           4C                         dec	sp
40644                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
40645 A2EB           E8         DD6D            call	_get_SS
40646                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
40647 A2EE           8946         FE            mov	-2[bp],ax
40648                                           !BCC_EOS
40649                                           ! 8873     Bit16u result, val;
40650                                           !BCC_EOS
40651                                           ! 8874     result = 0x4f;
40652 A2F1           83C4                   FC  add	sp,*-4
40653                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
40654 A2F4           B8                   004F  mov	ax,*$4F
40655 A2F7           8946         FC            mov	-4[bp],ax
40656                                           !BCC_EOS
40657                                           ! 8875     switch(( DX & 0x00ff )) {
40658                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
40659 A2FA           8A46         08            mov	al,8[bp]
40660 A2FD           E9         00D0            br 	.347
40661                                           ! 8876     case 0x00:
40662                                           ! 8877         val = biosfn_read_video_state_size2(CX);
40663                       0000A300            .348:
40664                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
40665 A300           FF76         06            push	6[bp]
40666                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
40667 A303           E8         CFCA            call	_biosfn_read_video_state_size2
40668 A306           44                         inc	sp
40669 A307           44                         inc	sp
40670                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40671 A308           8946         FA            mov	-6[bp],ax
40672                                           !BCC_EOS
40673                                           ! 8878         printf("VGA state size=%x\n", val);
40674                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40675 A30B           FF76         FA            push	-6[bp]
40676                                           ! Debug: list * char = .349+0 (used reg = )
40677 A30E           BB                   A5F3  mov	bx,#.349
40678 A311           53                         push	bx
40679                                           ! Debug: func () void = printf+0 (used reg = )
40680 A312           E8         DD65            call	_printf
40681 A315           83C4                   04  add	sp,*4
40682                                           !BCC_EOS
40683                                           ! 8879         if (CX & 8)
40684                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40685 A318           8A46         06            mov	al,6[bp]
40686 A31B           24                     08  and	al,*8
40687 A31D           84C0                       test	al,al
40688 A31F           74           09            je  	.34A
40689                       0000A321            .34B:
40690                                           ! 8880             val += vbe_biosfn_read_video_state_size();
40691                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
40692 A321           E8         FDFB            call	_vbe_biosfn_read_video_state_size
40693                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40694 A324           0346         FA            add	ax,-6[bp]
40695 A327           8946         FA            mov	-6[bp],ax
40696                                           !BCC_EOS
40697                                           ! 8881         write_word(ss, BX, val);
40698                       0000A32A            .34A:
40699                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40700 A32A           FF76         FA            push	-6[bp]
40701                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
40702 A32D           FF76         0C            push	$C[bp]
40703                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40704 A330           FF76         FE            push	-2[bp]
40705                                           ! Debug: func () void = write_word+0 (used reg = )
40706 A333           E8         DCD7            call	_write_word
40707 A336           83C4                   06  add	sp,*6
40708                                           !BCC_EOS
40709                                           ! 8882         break;
40710 A339           E9         00A6            br 	.345
40711                                           !BCC_EOS
40712                                           ! 8883     case 0x01:
40713                                           ! 8884         val = read_word(ss, BX);
40714                       0000A33C            .34C:
40715                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40716 A33C           FF76         0C            push	$C[bp]
40717                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40718 A33F           FF76         FE            push	-2[bp]
40719                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40720 A342           E8         DC9D            call	_read_word
40721 A345           83C4                   04  add	sp,*4
40722                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40723 A348           8946         FA            mov	-6[bp],ax
40724                                           !BCC_EOS
40725                                           ! 8885         val = biosfn_save_video_state(CX, ES, val);
40726                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40727 A34B           FF76         FA            push	-6[bp]
40728                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40729 A34E           FF76         0A            push	$A[bp]
40730                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40731 A351           FF76         06            push	6[bp]
40732                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
40733 A354           E8         CFE4            call	_biosfn_save_video_state
40734 A357           83C4                   06  add	sp,*6
40735                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40736 A35A           8946         FA            mov	-6[bp],ax
40737                                           !BCC_EOS
40738                                           ! 8886         printf("VGA save_state offset=%x\n", val);
40739                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40740 A35D           FF76         FA            push	-6[bp]
40741                                           ! Debug: list * char = .34D+0 (used reg = )
40742 A360           BB                   A5D9  mov	bx,#.34D
40743 A363           53                         push	bx
40744                                           ! Debug: func () void = printf+0 (used reg = )
40745 A364           E8         DD13            call	_printf
40746 A367           83C4                   04  add	sp,*4
40747                                           !BCC_EOS
40748                                           ! 8887         if (CX & 8)
40749                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40750 A36A           8A46         06            mov	al,6[bp]
40751 A36D           24                     08  and	al,*8
40752 A36F           84C0                       test	al,al
40753 A371           74           0C            je  	.34E
40754                       0000A373            .34F:
40755                                           ! 8888             vbe_biosfn_save_video_state(ES, val);
40756                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40757 A373           FF76         FA            push	-6[bp]
40758                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40759 A376           FF76         0A            push	$A[bp]
40760                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
40761 A379           E8         FDAB            call	_vbe_biosfn_save_video_state
40762 A37C           83C4                   04  add	sp,*4
40763                                           !BCC_EOS
40764                                           ! 8889         break;
40765                       0000A37F            .34E:
40766 A37F           EB           61            jmp .345
40767                                           !BCC_EOS
40768                                           ! 8890     case 0x02:
40769                                           ! 8891         val = read_word(ss, BX);
40770                       0000A381            .350:
40771                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40772 A381           FF76         0C            push	$C[bp]
40773                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40774 A384           FF76         FE            push	-2[bp]
40775                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40776 A387           E8         DC58            call	_read_word
40777 A38A           83C4                   04  add	sp,*4
40778                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40779 A38D           8946         FA            mov	-6[bp],ax
40780                                           !BCC_EOS
40781                                           ! 8892         val = biosfn_restore_video_state(CX, ES, val);
40782                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40783 A390           FF76         FA            push	-6[bp]
40784                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40785 A393           FF76         0A            push	$A[bp]
40786                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40787 A396           FF76         06            push	6[bp]
40788                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
40789 A399           E8         D569            call	_biosfn_restore_video_state
40790 A39C           83C4                   06  add	sp,*6
40791                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40792 A39F           8946         FA            mov	-6[bp],ax
40793                                           !BCC_EOS
40794                                           ! 8893         printf("VGA restore_state offset=%x\n", val);
40795                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40796 A3A2           FF76         FA            push	-6[bp]
40797                                           ! Debug: list * char = .351+0 (used reg = )
40798 A3A5           BB                   A5BC  mov	bx,#.351
40799 A3A8           53                         push	bx
40800                                           ! Debug: func () void = printf+0 (used reg = )
40801 A3A9           E8         DCCE            call	_printf
40802 A3AC           83C4                   04  add	sp,*4
40803                                           !BCC_EOS
40804                                           ! 8894         if (CX & 8)
40805                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40806 A3AF           8A46         06            mov	al,6[bp]
40807 A3B2           24                     08  and	al,*8
40808 A3B4           84C0                       test	al,al
40809 A3B6           74           0C            je  	.352
40810                       0000A3B8            .353:
40811                                           ! 8895             vbe_biosfn_restore_video_state(ES, val);
40812                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40813 A3B8           FF76         FA            push	-6[bp]
40814                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40815 A3BB           FF76         0A            push	$A[bp]
40816                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
40817 A3BE           E8         FDF8            call	_vbe_biosfn_restore_video_state
40818 A3C1           83C4                   04  add	sp,*4
40819                                           !BCC_EOS
40820                                           ! 8896         break;
40821                       0000A3C4            .352:
40822 A3C4           EB           1C            jmp .345
40823                                           !BCC_EOS
40824                                           ! 8897     default:
40825                                           ! 8898         result = 0x100;
40826                       0000A3C6            .354:
40827                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
40828 A3C6           B8                   0100  mov	ax,#$100
40829 A3C9           8946         FC            mov	-4[bp],ax
40830                                           !BCC_EOS
40831                                           ! 8899         break;
40832 A3CC           EB           14            jmp .345
40833                                           !BCC_EOS
40834                                           ! 8900     }
40835                                           ! 8901     write_word(ss, AX, result);
40836 A3CE           EB           12            jmp .345
40837                       0000A3D0            .347:
40838 A3D0           2C                     00  sub	al,*0
40839 A3D2         0F84         FF2A            beq 	.348
40840 A3D6           2C                     01  sub	al,*1
40841 A3D8         0F84         FF60            beq 	.34C
40842 A3DC           2C                     01  sub	al,*1
40843 A3DE           74           A1            je 	.350
40844 A3E0           EB           E4            jmp	.354
40845                       0000A3E2            .345:
40846                       FFFFFFF8            ..FFF0	=	-8
40847                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
40848 A3E2           FF76         FC            push	-4[bp]
40849                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
40850 A3E5           FF76         04            push	4[bp]
40851                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40852 A3E8           FF76         FE            push	-2[bp]
40853                                           ! Debug: func () void = write_word+0 (used reg = )
40854 A3EB           E8         DC1F            call	_write_word
40855 A3EE           83C4                   06  add	sp,*6
40856                                           !BCC_EOS
40857                                           ! 8902 }
40858 A3F1           89EC                       mov	sp,bp
40859 A3F3           5D                         pop	bp
40860 A3F4           C3                         ret
40861                                           ! 8903 #asm
40862                                           !BCC_ASM
40863                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40864                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40865                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40866                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40867                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40868                       0000A3F5            vbe_biosfn_display_window_control:
40869 A3F5           80FB                   00    cmp bl, #0x00
40870 A3F8           75           24              jne vbe_05_failed
40871 A3FA           80FF                   01    cmp bh, #0x01
40872 A3FD           74           16              je get_display_window
40873 A3FF           72           04              jb set_display_window
40874 A401           B8                   0100    mov ax, #0x0100
40875 A404           C3                           ret
40876                       0000A405            set_display_window:
40877 A405           89D0                         mov ax, dx
40878 A407           E8         F4DD              call _dispi_set_bank
40879 A40A           E8         F4EA              call dispi_get_bank
40880 A40D           39D0                         cmp ax, dx
40881 A40F           75           0D              jne vbe_05_failed
40882 A411           B8                   004F    mov ax, #0x004f
40883 A414           C3                           ret
40884                       0000A415            get_display_window:
40885 A415           E8         F4DF              call dispi_get_bank
40886 A418           89C2                         mov dx, ax
40887 A41A           B8                   004F    mov ax, #0x004f
40888 A41D           C3                           ret
40889                       0000A41E            vbe_05_failed:
40890 A41E           B8                   014F    mov ax, #0x014f
40891 A421           C3                           ret
40892                                           ! 8928 endasm
40893                                           !BCC_ENDASM
40894                                           ! 8929 #asm
40895                                           !BCC_ASM
40896                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40897                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40898                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40899                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40900                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40901                       0000A422            vbe_biosfn_set_get_logical_scan_line_length:
40902 A422           89C8                         mov ax, cx
40903 A424           80FB                   01    cmp bl, #0x01
40904 A427           74           24              je get_logical_scan_line_length
40905 A429           80FB                   02    cmp bl, #0x02
40906 A42C           74           06              je set_logical_scan_line_bytes
40907 A42E           72           1A              jb set_logical_scan_line_pixels
40908 A430           B8                   0100    mov ax, #0x0100
40909 A433           C3                           ret
40910                       0000A434            set_logical_scan_line_bytes:
40911 A434           50                           push ax
40912 A435           E8         F434              call dispi_get_bpp
40913 A438           30FF                         xor bh, bh
40914 A43A           88E3                         mov bl, ah
40915 A43C           08DB                         or bl, bl
40916 A43E           75           05              jnz no_4bpp_1
40917 A440           C1E0                   03    shl ax, #3
40918 A443           B3                     01    mov bl, #1
40919                       0000A445            no_4bpp_1:
40920 A445           31D2                         xor dx, dx
40921 A447           58                           pop ax
40922 A448           F7F3                         div bx
40923                       0000A44A            set_logical_scan_line_pixels:
40924 A44A           E8         F548              call dispi_set_virt_width
40925                       0000A44D            get_logical_scan_line_length:
40926 A44D           E8         F41C              call dispi_get_bpp
40927 A450           30FF                         xor bh, bh
40928 A452           88E3                         mov bl, ah
40929 A454           E8         F551              call dispi_get_virt_width
40930 A457           89C1                         mov cx, ax
40931 A459           08DB                         or bl, bl
40932 A45B           75           05              jnz no_4bpp_2
40933 A45D           C1E8                   03    shr ax, #3
40934 A460           B3                     01    mov bl, #1
40935                       0000A462            no_4bpp_2:
40936 A462           F7E3                         mul bx
40937 A464           89C3                         mov bx, ax
40938 A466           E8         F54D              call dispi_get_virt_height
40939 A469           89C2                         mov dx, ax
40940 A46B           B8                   004F    mov ax, #0x004f
40941 A46E           C3                           ret
40942                                           ! 8971 endasm
40943                                           !BCC_ENDASM
40944                                           ! 8972 #asm
40945                                           !BCC_ASM
40946                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40947                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40948                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40949                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40950                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40951                       0000A46F            vbe_biosfn_set_get_display_start:
40952 A46F           80FB                   80    cmp bl, #0x80
40953 A472           74           0B              je set_display_start
40954 A474           80FB                   01    cmp bl, #0x01
40955 A477           74           14              je get_display_start
40956 A479           72           04              jb set_display_start
40957 A47B           B8                   0100    mov ax, #0x0100
40958 A47E           C3                           ret
40959                       0000A47F            set_display_start:
40960 A47F           89C8                         mov ax, cx
40961 A481           E8         F4B8              call dispi_set_x_offset
40962 A484           89D0                         mov ax, dx
40963 A486           E8         F4D1              call dispi_set_y_offset
40964 A489           B8                   004F    mov ax, #0x004f
40965 A48C           C3                           ret
40966                       0000A48D            get_display_start:
40967 A48D           E8         F4BC              call dispi_get_x_offset
40968 A490           89C1                         mov cx, ax
40969 A492           E8         F4D5              call dispi_get_y_offset
40970 A495           89C2                         mov dx, ax
40971 A497           30FF                         xor bh, bh
40972 A499           B8                   004F    mov ax, #0x004f
40973 A49C           C3                           ret
40974                                           ! 8996 endasm
40975                                           !BCC_ENDASM
40976                                           ! 8997 #asm
40977                                           !BCC_ASM
40978                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40979                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40980                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40981                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40982                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40983                       0000A49D            vbe_biosfn_set_get_dac_palette_format:
40984 A49D           80FB                   01    cmp bl, #0x01
40985 A4A0           74           1E              je get_dac_palette_format
40986 A4A2           72           04              jb set_dac_palette_format
40987 A4A4           B8                   0100    mov ax, #0x0100
40988 A4A7           C3                           ret
40989                       0000A4A8            set_dac_palette_format:
40990 A4A8           E8         F42E              call dispi_get_enable
40991 A4AB           80FF                   06    cmp bh, #0x06
40992 A4AE           74           0A              je set_normal_dac
40993 A4B0           80FF                   08    cmp bh, #0x08
40994 A4B3           75           1B              jne vbe_08_unsupported
40995 A4B5           0D                   0020    or ax, # 0x20
40996 A4B8           75           03              jnz set_dac_mode
40997                       0000A4BA            set_normal_dac:
40998 A4BA           25                   FFDF    and ax, #~ 0x20
40999                       0000A4BD            set_dac_mode:
41000 A4BD           E8         F409              call _dispi_set_enable
41001                       0000A4C0            get_dac_palette_format:
41002 A4C0           B7                     06    mov bh, #0x06
41003 A4C2           E8         F414              call dispi_get_enable
41004 A4C5           25                   0020    and ax, # 0x20
41005 A4C8           74           02              jz vbe_08_ok
41006 A4CA           B7                     08    mov bh, #0x08
41007                       0000A4CC            vbe_08_ok:
41008 A4CC           B8                   004F    mov ax, #0x004f
41009 A4CF           C3                           ret
41010                       0000A4D0            vbe_08_unsupported:
41011 A4D0           B8                   014F    mov ax, #0x014f
41012 A4D3           C3                           ret
41013                                           ! 9028 endasm
41014                                           !BCC_ENDASM
41015                                           ! 9029 void vbe_biosfn_set_get_palette_data(AX)
41016                                           ! Register BX used in function vbe_biosfn_save_restore_state
41017                                           ! 9030 {
41018                                           export	_vbe_biosfn_set_get_palette_data
41019                       0000A4D4            _vbe_biosfn_set_get_palette_data:
41020                                           ! 9031 }
41021 A4D4           C3                         ret
41022                                           ! 9032 #asm
41023                                           !BCC_ASM
41024                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41025                       0000A4D5            vbe_biosfn_return_protected_mode_interface:
41026 A4D5           84DB                         test bl, bl
41027 A4D7           75           11              jnz _fail
41028 A4D9           BF                   C000    mov di, #0xc000
41029 A4DC           8EC7                         mov es, di
41030 A4DE           BF                   96FA    mov di, # vesa_pm_start
41031 A4E1           B9                   97FB    mov cx, # vesa_pm_end
41032 A4E4           29F9                         sub cx, di
41033 A4E6           B8                   004F    mov ax, #0x004f
41034 A4E9           C3                           ret
41035                       0000A4EA            _fail:
41036 A4EA           B8                   014F    mov ax, #0x014f
41037 A4ED           C3                           ret
41038                                           ! 9046 endasm
41039                                           !BCC_ENDASM
41040                                           ! 9047 #asm
41041                                           !BCC_ASM
41042                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41043                       0000A4EE            vesa_EDID:
41044 A4EE                        00              db 0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00
41045 A4F6                        04              db 0x04,0x21
41046 A4F8                        AB              db 0xAB,0xCD
41047 A4FA                        00              db 0x00,0x00,0x00,0x00
41048 A4FE                        36              db 54, 10
41049 A500                        01              db 0x01, 0x03
41050 A502                        0F              db 0x0F
41051 A503                        21              db 0x21,0x19
41052 A505                        78              db 0x78
41053 A506                        0F              db 0x0F
41054 A507                        78              db 0x78,0xF5
41055 A509                        A6              db 0xA6,0x55,0x48,0x9B,0x26,0x12,0x50,0x54
41056 A511                        FF              db 0xFF
41057 A512                        EF              db 0xEF
41058 A513                        80              db 0x80
41059 A514                        D1              db 0xD1, 0x00
41060 A516                        61              db 0x61, 0x59
41061 A518                        45              db 0x45, 0x59
41062 A51A                        81              db 0x81, 0xCA
41063 A51C                        81              db 0x81, 0x0A
41064 A51E                        A9              db 0xA9, 0xC0
41065 A520                        A9              db 0xA9, 0x40
41066 A522                        D1              db 0xD1, 0x00
41067 A524                        3C              db 0x3C, 0x28
41068 A526                        80              db 0x80
41069 A527                        A0              db 0xA0
41070 A528                        70              db 0x70
41071 A529                        B0              db 0xB0
41072 A52A                        23              db 0x23
41073 A52B                        40              db 0x40
41074 A52C                        30              db 0x30
41075 A52D                        20              db 0x20
41076 A52E                        36              db 0x36
41077 A52F                        00              db 0x00
41078 A530                        06              db 0x06
41079 A531                        44              db 0x44
41080 A532                        21              db 0x21
41081 A533                        00              db 0x00
41082 A534                        00              db 0x00
41083 A535                        1E              db 0x1E
41084 A536                        00              db 0x00,0x00,0x00,0xfD,0x00
41085 A53B                        32              db 50,150
41086 A53D                        1F              db 31,135
41087 A53F                        10              db 16
41088 A540                        00              db 0
41089 A541                        0A              db 0x0A,0x20,0x20,0x20,0x20
41090 A546                        20              db 0x20,0x20
41091 A548                        00              db 0x00,0x00,0x00,0xFF,0x00
41092 A54D                        30              .ascii "0123456789"
41093 A557                        0A              db 0x0A,0x20,0x20
41094 A55A                        00              db 0x00,0x00,0x00,0xFC,0x00
41095 A55F                        42              .ascii "Bochs Screen"
41096 A56B                        0A              db 0x0A
41097 A56C                        00              db 0x00
41098 A56D                        00              db 0x00
41099                                           ! 9104 endasm
41100                                           !BCC_ENDASM
41101                                           ! 9105 #asm
41102                                           !BCC_ASM
41103                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41104                       0000A56E            vbe_biosfn_display_identification_extensions:
41105 A56E           80FB                   01    cmp bl,#0x01
41106 A571           72           06              jb _get_capabilities
41107 A573           74           0F              je _read_EDID
41108                       0000A575            _failed:
41109 A575           B8                   014F    mov ax, #0x014f
41110 A578           C3                           ret
41111                       0000A579            _get_capabilities:
41112 A579           85C9                         test cx,cx
41113 A57B           75           F8              jne _failed
41114 A57D           B8                   004F    mov ax, #0x004f
41115 A580           BB                   0101    mov bx, #0x0101
41116 A583           C3                           ret
41117                       0000A584            _read_EDID:
41118 A584           85C9                         test cx,cx
41119 A586           75           ED              jne _failed
41120 A588           85D2                         test dx,dx
41121 A58A           75           E9              jne _failed
41122 A58C           56                           push si
41123 A58D           57                           push di
41124 A58E           FC                           cld
41125 A58F           B9                   007F    mov cx,#127
41126 A592           BE                   A4EE    mov si, # vesa_EDID
41127 A595           30E4                         xor ah,ah
41128                       0000A597            _nextByte:
41129 A597                        2E              db 0x2E
41130 A598           AC                             lodsb
41131 A599           AA                           stosb
41132 A59A           28C4                         sub ah,al
41133 A59C           E2           F9              loop _nextByte
41134 A59E           88E0                         mov al,ah
41135 A5A0           AA                           stosb
41136 A5A1           5F                           pop di
41137 A5A2           5E                           pop si
41138 A5A3           31C9                         xor cx,cx
41139 A5A5           B8                   004F    mov ax, #0x004f
41140 A5A8           C3                           ret
41141                                           ! 9143 endasm
41142                                           !BCC_ENDASM
41143                                           ! 9144 #asm
41144                                           !BCC_ASM
41145                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41146                                           ;; DATA_SEG_DEFS_HERE
41147                                           ! 9146 endasm
41148                                           !BCC_ENDASM
41149                                           ! 9147 #asm
41150                                           !BCC_ASM
41151                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
41152 A5A9                        76            .ascii "vgabios ends here"
41153 A5BA                        00            .byte 0x00
41154                       0000A5BB            vgabios_end:
41155 A5BB                        CB            .byte 0xCB
41156                                           ;; BLOCK_STRINGS_BEGIN
41157                                           ! 9153 endasm
41158                                           !BCC_ENDASM
41159                                           ! 9154 
41160                                           
41161                       0000A5BC            .351:
41162                       0000A5BC            .355:
41163 A5BC                        56            .ascii	"VGA restore_state offset=%x"
41164 A5D7                        0A            .byte	$A
41165 A5D8                        00            .byte	0
41166                       0000A5D9            .34D:
41167                       0000A5D9            .356:
41168 A5D9                        56            .ascii	"VGA save_state offset=%x"
41169 A5F1                        0A            .byte	$A
41170 A5F2                        00            .byte	0
41171                       0000A5F3            .349:
41172                       0000A5F3            .357:
41173 A5F3                        56            .ascii	"VGA state size=%x"
41174 A604                        0A            .byte	$A
41175 A605                        00            .byte	0
41176                       0000A606            .331:
41177                       0000A606            .358:
41178 A606                        56            .ascii	"VBE *NOT* found mode %x"
41179 A61D                        0A            .byte	$A
41180 A61E                        00            .byte	0
41181                       0000A61F            .32B:
41182                       0000A61F            .359:
41183 A61F                        09            .byte	9
41184 A620                        78            .ascii	"xres%x yres%x bpp%x"
41185 A633                        0A            .byte	$A
41186 A634                        00            .byte	0
41187                       0000A635            .32A:
41188                       0000A635            .35A:
41189 A635                        56            .ascii	"VBE found mode %x, setting:"
41190 A650                        0A            .byte	$A
41191 A651                        00            .byte	0
41192                       0000A652            .31B:
41193                       0000A652            .35B:
41194 A652                        56            .ascii	"VBE *NOT* found mode %x"
41195 A669                        0A            .byte	$A
41196 A66A                        00            .byte	0
41197                       0000A66B            .313:
41198                       0000A66B            .35C:
41199 A66B                        56            .ascii	"VBE found mode %x"
41200 A67C                        0A            .byte	$A
41201 A67D                        00            .byte	0
41202                       0000A67E            .30E:
41203                       0000A67E            .35D:
41204 A67E                        56            .ascii	"VBE vbe_biosfn_return_mode_information E"
41205 A6A6                        53            .ascii	"S%x DI%x CX%x"
41206 A6B3                        0A            .byte	$A
41207 A6B4                        00            .byte	0
41208                       0000A6B5            .30C:
41209                       0000A6B5            .35E:
41210 A6B5                        56            .ascii	"VBE mode %x (xres=%x / bpp=%02x) not sup"
41211 A6DD                        70            .ascii	"ported "
41212 A6E4                        0A            .byte	$A
41213 A6E5                        00            .byte	0
41214                       0000A6E6            .30A:
41215                       0000A6E6            .35F:
41216 A6E6                        56            .ascii	"VBE found mode %x => %x"
41217 A6FD                        0A            .byte	$A
41218 A6FE                        00            .byte	0
41219                       0000A6FF            .2FF:
41220                       0000A6FF            .360:
41221 A6FF                        56            .ascii	"VBE correct VESA/VBE2 signature found"
41222 A724                        0A            .byte	$A
41223 A725                        00            .byte	0
41224                       0000A726            .2F5:
41225                       0000A726            .361:
41226 A726                        56            .ascii	"VBE vbe_biosfn_return_vbe_info ES%x DI%x"
41227 A74E                        20            .ascii	" AX%x"
41228 A753                        0A            .byte	$A
41229 A754                        00            .byte	0
41230                       0000A755            .2CD:
41231                       0000A755            .362:
41232 A755                        2D            .ascii	"--> Unknown int10"
41233 A766                        0A            .byte	$A
41234 A767                        00            .byte	0
41235                       0000A768            .2CC:
41236                       0000A768            .363:
41237 A768                        2D            .ascii	"--> Unimplemented"
41238 A779                        0A            .byte	$A
41239 A77A                        00            .byte	0
41240                       0000A77B            .266:
41241                       0000A77B            .364:
41242 A77B                        47            .ascii	"Get font info BH(%02x) was discarded"
41243 A79F                        0A            .byte	$A
41244 A7A0                        00            .byte	0
41245                       0000A7A1            .147:
41246                       0000A7A1            .365:
41247 A7A1                        53            .ascii	"Scroll in graphics mode "
41248 A7B9                        00            .byte	0
41249                       0000A7BA            .E2:
41250                       0000A7BA            .366:
41251 A7BA                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
41252 A7DF                        0A            .byte	$A
41253 A7E0                        00            .byte	0
41254                       0000A7E1            .B7:
41255                       0000A7E1            .367:
41256 A7E1                        53            .ascii	"Set active page %02x address %04x"
41257 A802                        0A            .byte	$A
41258 A803                        00            .byte	0
41259                       0000A804            .6D:
41260                       0000A804            .368:
41261 A804                        6D            .ascii	"mode search %02x found line %02x"
41262 A824                        0A            .byte	$A
41263 A825                        00            .byte	0
41264                       0000A826            .3:
41265                       0000A826            .369:
41266 A826                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
41267 A84E                        20            .ascii	" dx%04x"
41268 A855                        0A            .byte	$A
41269 A856                        00            .byte	0
41270 A857                                      .bss
41271                                           
41272                                           ! 0 errors detected

Symbols:
..FFF0                      0 FFF8 A   ..FFF1                      0 FFFC A   
..FFF2                      0 FFFE A   ..FFF3                      0 FFFE A   
..FFF4                      0 FFFE A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFFA A   ..FFFF                      0 FFFE A   
.1                          0 36D3 A   .10                         0 3700 A   
.100                        0 4D4C A   .101                        0 5128 A   
.102                        0 5128 A   .104                        0 5114 A   
.105                        0 4D75 A   .106                        0 4D75 A   
.107                        0 4E09 A   .108                        0 4DB4 A   
.109                        0 4DA2 A   .10A                        0 4D90 A   
.10B                        0 4D87 A   .10C                        0 4D7E A   
.10D                        0 4F2A A   .10E                        0 4E9C A   
.10F                        0 4E12 A   .11                         0 3700 A   
.110                        0 4E99 A   .111                        0 4E88 A   
.112                        0 4E8F A   .113                        0 4E1C A   
.114                        0 4E60 A   .115                        0 4E3A A   
.116                        0 4E33 A   .117                        0 4E88 A   
.118                        0 4E99 A   .119                        0 4F2A A   
.11A                        0 4F2A A   .11B                        0 4F17 A   
.11C                        0 4F1E A   .11D                        0 4EA6 A   
.11E                        0 4EE3 A   .11F                        0 4EBD A   
.12                         0 3700 A   .120                        0 4EB6 A   
.121                        0 4F0B A   .122                        0 4F17 A   
.123                        0 4F15 A   .124                        0 4F2A A   
.125                        0 4F2D A   .126                        0 4FC0 A   
.127                        0 4F7B A   .128                        0 4F69 A   
.129                        0 4F57 A   .12A                        0 4F50 A   
.12B                        0 4F49 A   .12C                        0 5104 A   
.12D                        0 4FE3 A   .12E                        0 4FC7 A   
.12F                        0 5076 A   .13                         0 370C A   
.130                        0 4FEC A   .131                        0 5073 A   
.132                        0 5062 A   .133                        0 5069 A   
.134                        0 4FF6 A   .135                        0 503A A   
.136                        0 5014 A   .137                        0 500D A   
.138                        0 5062 A   .139                        0 5073 A   
.13A                        0 5104 A   .13B                        0 5104 A   
.13C                        0 50F1 A   .13D                        0 50F8 A   
.13E                        0 5080 A   .13F                        0 50BD A   
.14                         0 373B A   .140                        0 5097 A   
.141                        0 5090 A   .142                        0 50E5 A   
.143                        0 50F1 A   .144                        0 50EF A   
.145                        0 5104 A   .146                        0 5106 A   
.147                        0 A7A1 A   .148                        0 5164 A   
.149                        0 5160 A   .14A                        0 5223 A   
.14B                        0 51C5 A   .14C                        0 5226 A   
.14D                        0 5257 A   .14F                        0 524D A   
.15                         0 372B A   .150                        0 5235 A   
.151                        0 523D A   .152                        0 5245 A   
.153                        0 52C4 A   .154                        0 52B4 A   
.155                        0 52D2 A   .156                        0 538B A   
.157                        0 537A A   .158                        0 5381 A   
.159                        0 52DA A   .15A                        0 537A A   
.15B                        0 536A A   .15C                        0 5371 A   
.15D                        0 52F8 A   .15E                        0 535A A   
.15F                        0 5343 A   .16                         0 3740 A   
.160                        0 536A A   .161                        0 537A A   
.162                        0 538B A   .163                        0 559E A   
.164                        0 558E A   .165                        0 5595 A   
.166                        0 53E1 A   .167                        0 5405 A   
.168                        0 53FC A   .169                        0 54C7 A   
.16A                        0 5413 A   .16B                        0 542E A   
.16C                        0 541C A   .16D                        0 5433 A   
.16E                        0 54B1 A   .16F                        0 54A3 A   
.17                         0 3757 A   .170                        0 54AA A   
.171                        0 543A A   .172                        0 5499 A   
.173                        0 5451 A   .174                        0 547B A   
.175                        0 545A A   .176                        0 5499 A   
.177                        0 54B1 A   .178                        0 558E A   
.179                        0 558E A   .17A                        0 5585 A   
.17B                        0 54CA A   .17C                        0 54E5 A   
.17D                        0 54D3 A   .17E                        0 54EA A   
.17F                        0 556B A   .18                         0 376B A   
.180                        0 555D A   .181                        0 5564 A   
.182                        0 54F1 A   .183                        0 5553 A   
.184                        0 5508 A   .185                        0 5533 A   
.186                        0 5511 A   .187                        0 5553 A   
.188                        0 556B A   .189                        0 558E A   
.18A                        0 559E A   .18B                        0 5672 A   
.18C                        0 5662 A   .18D                        0 5669 A   
.18E                        0 55E8 A   .18F                        0 5662 A   
.19                         0 3784 A   .190                        0 5654 A   
.191                        0 565B A   .192                        0 560E A   
.193                        0 5630 A   .194                        0 562A A   
.195                        0 5662 A   .196                        0 5672 A   
.197                        0 56A6 A   .198                        0 56A2 A   
.199                        0 5771 A   .19A                        0 5707 A   
.19B                        0 585D A   .19C                        0 585D A   
.19D                        0 5845 A   .19E                        0 579A A   
.19F                        0 583E A   .1A                         0 379E A   
.1A1                        0 5828 A   .1A2                        0 57AE A   
.1A3                        0 57AE A   .1A4                        0 57D7 A   
.1A5                        0 5800 A   .1A6                        0 5823 A   
.1A7                        0 585D A   .1A8                        0 5851 A   
.1A9                        0 5891 A   .1AA                        0 588D A   
.1AB                        0 5960 A   .1AC                        0 58F2 A   
.1AD                        0 595D A   .1AE                        0 5951 A   
.1AF                        0 5928 A   .1B                         0 37AC A   
.1B0                        0 595D A   .1B1                        0 5A4D A   
.1B2                        0 5A4D A   .1B3                        0 5A35 A   
.1B4                        0 5989 A   .1B5                        0 5A2E A   
.1B7                        0 5A18 A   .1B8                        0 599E A   
.1B9                        0 599E A   .1BA                        0 59C7 A   
.1BB                        0 59F0 A   .1BC                        0 5A13 A   
.1BD                        0 5A4D A   .1BE                        0 5A41 A   
.1BF                        0 5AFC A   .1C                         0 37E7 A   
.1C0                        0 5AF8 A   .1C1                        0 5B16 A   
.1C2                        0 5B12 A   .1C3                        0 5D69 A   
.1C5                        0 5D51 A   .1C6                        0 5B2B A   
.1C7                        0 5B2B A   .1C8                        0 5BAC A   
.1C9                        0 5B9E A   .1CA                        0 5BD1 A   
.1CB                        0 5C03 A   .1CC                        0 5BE7 A   
.1CD                        0 5C1D A   .1CE                        0 5C2F A   
.1CF                        0 5C26 A   .1D                         0 3821 A   
.1D0                        0 5C9B A   .1D1                        0 5C55 A   
.1D2                        0 5CDB A   .1D3                        0 5CEF A   
.1D4                        0 5CE4 A   .1D5                        0 5D05 A   
.1D6                        0 5D1A A   .1D7                        0 5D4C A   
.1D8                        0 5DA3 A   .1D9                        0 5D9F A   
.1DA                        0 5DBD A   .1DB                        0 5DB9 A   
.1DC                        0 5F54 A   .1DE                        0 5F3C A   
.1DF                        0 5DD2 A   .1E                         0 3836 A   
.1E0                        0 5DD2 A   .1E1                        0 5E66 A   
.1E2                        0 5E58 A   .1E3                        0 5E5F A   
.1E4                        0 5E14 A   .1E5                        0 5E58 A   
.1E6                        0 5E44 A   .1E7                        0 5E66 A   
.1E8                        0 5E69 A   .1E9                        0 5E95 A   
.1EA                        0 5E8C A   .1EB                        0 5EE0 A   
.1EC                        0 5EBB A   .1ED                        0 5F01 A   
.1EE                        0 5F03 A   .1EF                        0 5F32 A   
.1F                         0 3856 A   .1F0                        0 5F94 A   
.1F1                        0 5F83 A   .1F2                        0 5FBE A   
.1F3                        0 5FBA A   .1F4                        0 6213 A   
.1F6                        0 61F2 A   .1F7                        0 600F A   
.1F8                        0 6012 A   .1F9                        0 6020 A   
.1FA                        0 6019 A   .1FB                        0 6023 A   
.1FC                        0 602B A   .1FD                        0 6035 A   
.1FE                        0 6082 A   .1FF                        0 6077 A   
.2                          0 36B3 A   .20                         0 3876 A   
.200                        0 6035 A   .201                        0 6082 A   
.202                        0 6085 A   .203                        0 611F A   
.204                        0 609D A   .205                        0 611C A   
.206                        0 60F9 A   .207                        0 61E9 A   
.208                        0 61E9 A   .20A                        0 61D3 A   
.20B                        0 6159 A   .20C                        0 6159 A   
.20D                        0 6182 A   .20E                        0 61AB A   
.20F                        0 61CE A   .21                         0 3893 A   
.210                        0 6229 A   .211                        0 621D A   
.212                        0 62FE A   .213                        0 6235 A   
.214                        0 62CE A   .215                        0 624D A   
.216                        0 62F5 A   .217                        0 66AE A   
.218                        0 669D A   .219                        0 66A4 A   
.21A                        0 65E6 A   .21B                        0 6659 A   
.21C                        0 6653 A   .21D                        0 66AE A   
.21E                        0 678F A   .21F                        0 677F A   
.22                         0 38AE A   .220                        0 67A7 A   
.221                        0 68EC A   .222                        0 68DD A   
.223                        0 68E4 A   .224                        0 68A0 A   
.225                        0 68EC A   .226                        0 6901 A   
.227                        0 68F6 A   .228                        0 6985 A   
.229                        0 6976 A   .22A                        0 697D A   
.22B                        0 693C A   .22C                        0 6985 A   
.22D                        0 6998 A   .22E                        0 698F A   
.22F                        0 6A16 A   .23                         0 38CB A   
.230                        0 6A07 A   .231                        0 6A0E A   
.232                        0 69D3 A   .233                        0 6A16 A   
.234                        0 6A29 A   .235                        0 6A20 A   
.236                        0 6AB4 A   .237                        0 6AA5 A   
.238                        0 6AAC A   .239                        0 6A71 A   
.23A                        0 6AB4 A   .23B                        0 6AC7 A   
.23C                        0 6ABE A   .23D                        0 6B90 A   
.23F                        0 6B7E A   .24                         0 38DA A   
.240                        0 6B29 A   .241                        0 6B40 A   
.242                        0 6B54 A   .243                        0 6B68 A   
.244                        0 6B68 A   .245                        0 6C19 A   
.247                        0 6C0B A   .248                        0 6BCD A   
.249                        0 6BE1 A   .24A                        0 6BF5 A   
.24B                        0 6BF5 A   .24C                        0 6CA0 A   
.24E                        0 6C92 A   .24F                        0 6C54 A   
.25                         0 3A1A A   .250                        0 6C68 A   
.251                        0 6C7C A   .252                        0 6C7C A   
.253                        0 6D27 A   .255                        0 6D19 A   
.256                        0 6CDB A   .257                        0 6CEF A   
.258                        0 6D03 A   .259                        0 6D03 A   
.25A                        0 6EC4 A   .25C                        0 6E9F A   
.25D                        0 6D4B A   .25E                        0 6D82 A   
.25F                        0 6DB9 A   .260                        0 6DDC A   
.261                        0 6DFF A   .262                        0 6E22 A   
.263                        0 6E45 A   .264                        0 6E67 A   
.265                        0 6E89 A   .266                        0 A77B A   
.267                        0 6EC2 A   .268                        0 6EB2 A   
.269                        0 707F A   .26A                        0 706D A   
.26B                        0 7109 A   .26C                        0 70FD A   
.26D                        0 70AE A   .26E                        0 70E1 A   
.26F                        0 70CC A   .27                         0 39C4 A   
.270                        0 7109 A   .271                        0 7121 A   
.272                        0 7112 A   .273                        0 72EC A   
.274                        0 72E3 A   .275                        0 72FE A   
.276                        0 72F5 A   .277                        0 7310 A   
.278                        0 7307 A   .279                        0 75C3 A   
.27A                        0 735D A   .27B                        0 7448 A   
.27C                        0 7439 A   .27D                        0 7440 A   
.27E                        0 740D A   .27F                        0 7448 A   
.28                         0 38E0 A   .280                        0 74B6 A   
.281                        0 74A7 A   .282                        0 74AE A   
.283                        0 747B A   .284                        0 74B6 A   
.285                        0 7509 A   .286                        0 74FA A   
.287                        0 7501 A   .288                        0 74BD A   
.289                        0 7509 A   .28A                        0 7554 A   
.28B                        0 7545 A   .28C                        0 754C A   
.28D                        0 7519 A   .28E                        0 7554 A   
.28F                        0 783E A   .29                         0 38E0 A   
.290                        0 75CE A   .291                        0 776F A   
.292                        0 7760 A   .293                        0 7767 A   
.294                        0 7738 A   .295                        0 776F A   
.296                        0 78FE A   .297                        0 7849 A   
.298                        0 78E8 A   .299                        0 78D9 A   
.29A                        0 78E0 A   .29B                        0 78BA A   
.29C                        0 78E8 A   .29D                        0 7BC0 A   
.29E                        0 7916 A   .29F                        0 7985 A   
.2A                         0 3909 A   .2A0                        0 7976 A   
.2A1                        0 797D A   .2A2                        0 7949 A   
.2A3                        0 7985 A   .2A4                        0 7A0A A   
.2A5                        0 79FB A   .2A6                        0 7A02 A   
.2A7                        0 79C6 A   .2A8                        0 79F4 A   
.2A9                        0 79CE A   .2AA                        0 7A0A A   
.2AB                        0 7A2C A   .2AC                        0 7A24 A   
.2AD                        0 7ACD A   .2AE                        0 7ABE A   
.2AF                        0 7AC5 A   .2B                         0 3909 A   
.2B0                        0 7A89 A   .2B1                        0 7ACD A   
.2B2                        0 7B26 A   .2B3                        0 7B17 A   
.2B4                        0 7B1E A   .2B5                        0 7AEA A   
.2B6                        0 7B26 A   .2B7                        0 7E3B A   
.2B8                        0 7BCB A   .2B9                        0 7D6C A   
.2BA                        0 7D5D A   .2BB                        0 7D64 A   
.2BC                        0 7D35 A   .2BD                        0 7D6C A   
.2BE                        0 7EDC A   .2BF                        0 7E46 A   
.2C                         0 391E A   .2C0                        0 7EC8 A   
.2C1                        0 7EB9 A   .2C2                        0 7EC0 A   
.2C3                        0 7E99 A   .2C4                        0 7EC8 A   
.2C5                        0 7F1E A   .2C6                        0 7F10 A   
.2C7                        0 7F17 A   .2C8                        0 7EF4 A   
.2C9                        0 7F10 A   .2CA                        0 7F08 A   
.2CB                        0 7F1E A   .2CC                        0 A768 A   
.2CD                        0 A755 A   .2CE                        0 81B3 A   
.2CF                        0 819D A   .2D                         0 391E A   
.2D0                        0 8099 A   .2D1                        0 80AE A   
.2D2                        0 80A0 A   .2D3                        0 8196 A   
.2D4                        0 8186 A   .2D5                        0 80B7 A   
.2D6                        0 80E6 A   .2D7                        0 80C5 A   
.2D8                        0 80BE A   .2D9                        0 8184 A   
.2DA                        0 8184 A   .2DB                        0 80EF A   
.2DC                        0 8113 A   .2DD                        0 810D A   
.2DE                        0 817F A   .2DF                        0 8170 A   
.2E                         0 3933 A   .2E0                        0 8177 A   
.2E1                        0 8126 A   .2E2                        0 8158 A   
.2E3                        0 8145 A   .2E4                        0 8169 A   
.2E5                        0 817F A   .2E6                        0 8196 A   
.2E7                        0 81B3 A   .2E8                        0 9AF6 A   
.2E9                        0 9AEB A   .2EA                        0 9AA8 A   
.2EB                        0 9AE2 A   .2EC                        0 9AB2 A   
.2ED                        0 9AC2 A   .2EE                        0 9AB9 A   
.2EF                        0 9AE0 A   .2F                         0 3933 A   
.2F0                        0 9AD7 A   .2F1                        0 9ACE A   
.2F2                        0 9AE0 A   .2F3                        0 9AEB A   
.2F4                        0 9AF6 A   .2F5                        0 A726 A   
.2F6                        0 9C2D A   .2F7                        0 9C1D A   
.2F8                        0 9BFD A   .2F9                        0 9BF5 A   
.2FA                        0 9BED A   .2FB                        0 9BE5 A   
.2FC                        0 9C15 A   .2FD                        0 9C0D A   
.2FE                        0 9C05 A   .2FF                        0 A6FF A   
.3                          0 A826 A   .30                         0 3948 A   
.300                        0 9CF1 A   .301                        0 9CA6 A   
.302                        0 9D09 A   .303                        0 9DEB A   
.304                        0 9DDD A   .305                        0 9D09 A   
.306                        0 9DB1 A   .307                        0 9D71 A   
.308                        0 9D67 A   .309                        0 9D50 A   
.30A                        0 A6E6 A   .30B                        0 9DD2 A   
.30C                        0 A6B5 A   .30D                        0 9DEB A   
.30E                        0 A67E A   .30F                        0 9E56 A   
.31                         0 3957 A   .310                        0 9E58 A   
.311                        0 9F20 A   .312                        0 9E87 A   
.313                        0 A66B A   .314                        0 9ED4 A   
.315                        0 9ECE A   .316                        0 9EFA A   
.317                        0 9EE9 A   .318                        0 9F18 A   
.319                        0 9F04 A   .31A                        0 9F33 A   
.31B                        0 A652 A   .31C                        0 9F53 A   
.31D                        0 9F3B A   .31E                        0 9F83 A   
.31F                        0 9F85 A   .32                         0 3975 A   
.320                        0 9F95 A   .321                        0 9F91 A   
.322                        0 9F97 A   .323                        0 9FA9 A   
.324                        0 9FA5 A   .325                        0 9FAB A   
.326                        0 9FE2 A   .327                        0 9FBF A   
.328                        0 A0C6 A   .329                        0 9FFE A   
.32A                        0 A635 A   .32B                        0 A61F A   
.32C                        0 A045 A   .32D                        0 A03C A   
.32E                        0 A058 A   .32F                        0 A04F A   
.33                         0 3983 A   .330                        0 A0E7 A   
.331                        0 A606 A   .332                        0 A0E7 A   
.333                        0 A0E1 A   .334                        0 A16B A   
.335                        0 A167 A   .336                        0 A1B5 A   
.337                        0 A1A6 A   .338                        0 A1AD A   
.339                        0 A173 A   .33A                        0 A1A6 A   
.33B                        0 A17B A   .33C                        0 A1B5 A   
.33D                        0 A1FD A   .33E                        0 A1DF A   
.33F                        0 A2E2 A   .34                         0 3991 A   
.340                        0 A2E2 A   .341                        0 A2D3 A   
.342                        0 A2DA A   .343                        0 A2A7 A   
.344                        0 A2E2 A   .345                        0 A3E2 A   
.347                        0 A3D0 A   .348                        0 A300 A   
.349                        0 A5F3 A   .34A                        0 A32A A   
.34B                        0 A321 A   .34C                        0 A33C A   
.34D                        0 A5D9 A   .34E                        0 A37F A   
.34F                        0 A373 A   .35                         0 399F A   
.350                        0 A381 A   .351                        0 A5BC A   
.352                        0 A3C4 A   .353                        0 A3B8 A   
.354                        0 A3C6 A   .355                        0 A5BC A   
.356                        0 A5D9 A   .357                        0 A5F3 A   
.358                        0 A606 A   .359                        0 A61F A   
.35A                        0 A635 A   .35B                        0 A652 A   
.35C                        0 A66B A   .35D                        0 A67E A   
.35E                        0 A6B5 A   .35F                        0 A6E6 A   
.36                         0 39BF A   .360                        0 A6FF A   
.361                        0 A726 A   .362                        0 A755 A   
.363                        0 A768 A   .364                        0 A77B A   
.365                        0 A7A1 A   .366                        0 A7BA A   
.367                        0 A7E1 A   .368                        0 A804 A   
.369                        0 A826 A   .37                         0 3A1D A   
.38                         0 3A6F A   .3A                         0 3A61 A   
.3B                         0 3A22 A   .3C                         0 3A27 A   
.3D                         0 3A45 A   .3E                         0 3A5C A   
.3F                         0 3A72 A   .4                          0 3C2F A   
.40                         0 3AA6 A   .41                         0 3AC2 A   
.42                         0 3B0B A   .44                         0 3AFD A   
.45                         0 3AC7 A   .46                         0 3AD6 A   
.47                         0 3AE7 A   .48                         0 3AF8 A   
.49                         0 3B18 A   .4A                         0 3BCC A   
.4B                         0 3B21 A   .4C                         0 3BCA A   
.4E                         0 3B9F A   .4F                         0 3B27 A   
.50                         0 3B3A A   .51                         0 3B50 A   
.52                         0 3B65 A   .53                         0 3B7E A   
.54                         0 3B89 A   .55                         0 3B94 A   
.56                         0 3BC8 A   .57                         0 3BB2 A   
.58                         0 3BD2 A   .59                         0 3BD4 A   
.5A                         0 3C26 A   .5B                         0 3BEC A   
.5C                         0 3C7B A   .5E                         0 3C6B A   
.5F                         0 3C49 A   .6                          0 3BD9 A   
.60                         0 3C51 A   .61                         0 3C59 A   
.62                         0 3C61 A   .63                         0 3D29 A   
.64                         0 3D18 A   .65                         0 3D1F A   
.66                         0 3C83 A   .67                         0 3CF1 A   
.68                         0 3C95 A   .69                         0 3D18 A   
.6A                         0 3D29 A   .6B                         0 3D4B A   
.6C                         0 3D43 A   .6D                         0 A804 A   
.6E                         0 3D82 A   .6F                         0 3D7E A   
.7                          0 36E2 A   .70                         0 3E5D A   
.71                         0 3E0E A   .72                         0 3E5D A   
.73                         0 3E50 A   .74                         0 3EAD A   
.75                         0 3E9E A   .76                         0 3EA5 A   
.77                         0 3E6D A   .78                         0 3EAD A   
.79                         0 3F32 A   .7A                         0 3F23 A   
.7B                         0 3F2A A   .7C                         0 3EEB A   
.7D                         0 3F32 A   .7E                         0 3F79 A   
.7F                         0 3F6A A   .8                          0 373D A   
.80                         0 3F71 A   .81                         0 3F39 A   
.82                         0 3F79 A   .83                         0 3F94 A   
.84                         0 3F8F A   .85                         0 3F97 A   
.86                         0 3FEE A   .87                         0 3FDF A   
.88                         0 3FE6 A   .89                         0 3FAE A   
.8A                         0 3FEE A   .8B                         0 40EE A   
.8C                         0 402D A   .8D                         0 4069 A   
.8E                         0 4043 A   .8F                         0 40EE A   
.90                         0 4094 A   .91                         0 4070 A   
.92                         0 40EE A   .93                         0 422B A   
.94                         0 421D A   .95                         0 424D A   
.96                         0 423E A   .97                         0 4245 A   
.98                         0 4232 A   .99                         0 424D A   
.9A                         0 4279 A   .9B                         0 426B A   
.9C                         0 42DF A   .9E                         0 42D0 A   
.9F                         0 4291 A   .A                          0 3718 A   
.A0                         0 42A6 A   .A1                         0 42BA A   
.A2                         0 43AD A   .A3                         0 435D A   
.A4                         0 4356 A   .A5                         0 434F A   
.A6                         0 4347 A   .A7                         0 4386 A   
.A8                         0 4371 A   .A9                         0 439A A   
.AA                         0 440F A   .AB                         0 440B A   
.AC                         0 44FA A   .AD                         0 4442 A   
.AE                         0 4532 A   .AF                         0 452E A   
.B                          0 36F4 A   .B0                         0 4584 A   
.B1                         0 4580 A   .B2                         0 45AE A   
.B3                         0 45AA A   .B4                         0 4646 A   
.B5                         0 45D8 A   .B6                         0 466A A   
.B7                         0 A7E1 A   .B8                         0 47A5 A   
.B9                         0 4796 A   .BA                         0 479D A   
.BB                         0 475A A   .BC                         0 47A5 A   
.BD                         0 4830 A   .BE                         0 4821 A   
.BF                         0 4828 A   .C                          0 3700 A   
.C0                         0 47F7 A   .C1                         0 4830 A   
.C2                         0 4950 A   .C3                         0 493F A   
.C4                         0 4946 A   .C5                         0 489E A   
.C6                         0 48FD A   .C7                         0 48A7 A   
.C8                         0 493F A   .C9                         0 4950 A   
.CA                         0 4A05 A   .CB                         0 49F6 A   
.CC                         0 49FD A   .CD                         0 4988 A   
.CE                         0 49C9 A   .CF                         0 4991 A   
.D                          0 3700 A   .D0                         0 49F6 A   
.D1                         0 4A05 A   .D2                         0 4A1B A   
.D3                         0 4A17 A   .D4                         0 4A27 A   
.D5                         0 4A23 A   .D6                         0 4A51 A   
.D7                         0 4A4D A   .D8                         0 4A8E A   
.D9                         0 4A7D A   .DA                         0 4A9F A   
.DB                         0 4A98 A   .DC                         0 4AB0 A   
.DD                         0 4AA9 A   .DE                         0 4ABF A   
.DF                         0 4ABA A   .E                          0 3700 A   
.E0                         0 4D4F A   .E1                         0 4AE6 A   
.E2                         0 A7BA A   .E3                         0 4B89 A   
.E4                         0 4B54 A   .E5                         0 4B42 A   
.E6                         0 4B30 A   .E7                         0 4B29 A   
.E8                         0 4B22 A   .E9                         0 4D4C A   
.EA                         0 4C6E A   .EB                         0 4B92 A   
.EC                         0 4C6B A   .ED                         0 4C58 A   
.EE                         0 4C5F A   .EF                         0 4B9D A   
.F                          0 3700 A   .F0                         0 4BFD A   
.F1                         0 4BBB A   .F2                         0 4BB4 A   
.F3                         0 4C58 A   .F4                         0 4C6B A   
.F5                         0 4D4C A   .F6                         0 4D4C A   
.F7                         0 4D39 A   .F8                         0 4D40 A   
.F9                         0 4C79 A   .FA                         0 4CD2 A   
.FB                         0 4C90 A   .FC                         0 4C89 A   
.FD                         0 4D2D A   .FE                         0 4D39 A   
.FF                         0 4D37 A   _biosfn_alternate_prtsc     0 6F25 A   
_biosfn_enable_video_refre+ 0 7044 A   _biosfn_get_cursor_pos      0 44FE A   
_biosfn_get_font_info       0 6D3A A   _biosfn_load_gfx_8_14_char+ 0 6BA5 A   
_biosfn_load_gfx_8_16_char+ 0 6CB3 A   _biosfn_load_gfx_8_8_chars  0 6ACB A   
_biosfn_load_gfx_8_8_dd_ch+ 0 6C2C A   _biosfn_load_gfx_user_char+ 0 6AFF A   
_biosfn_load_text_8_14_pat  0 6905 A   _biosfn_load_text_8_16_pat  0 6A3A A   
_biosfn_load_text_8_8_pat   0 699C A   _biosfn_load_text_user_pat  0 6869 A   
_biosfn_perform_gray_scale+ 0 65C2 A   _biosfn_read_char_attr      0 512C A   
_biosfn_read_pixel          0 5D6D A   _biosfn_read_state_info     0 7198 A   
_biosfn_read_video_state_s+ 0 7317 A   _biosfn_read_video_state_s+ 0 72D0 A   
_biosfn_restore_video_stat+ 0 7905 A   _biosfn_save_video_state    0 733B A   
_biosfn_scroll              0 4A09 A   _biosfn_set_active_page     0 4573 A   
_biosfn_set_cursor_pos      0 43FE A   _biosfn_set_cursor_shape    0 42E3 A   
_biosfn_set_video_mode      0 3D2D A   _biosfn_switch_video_inter+ 0 703C A   
_biosfn_write_char_attr     0 5676 A   _biosfn_write_char_only     0 5861 A   
_biosfn_write_pixel         0 5ACC A   _biosfn_write_string        0 704C A   
_biosfn_write_teletype      0 5F76 A   _dac_regs                   0 02D5 A   
_dispi_get_max_bpp          0 98A7 A   _dispi_get_max_xres         0 9885 A   
_dispi_set_bank             0 98E7 A   _dispi_set_bank_farcall     0 9905 A   
_dispi_set_bpp              0 984E A   _dispi_set_enable           0 98C9 A   
_dispi_set_xres             0 9819 A   _dispi_set_yres             0 9830 A   
_display_info               0 365F A   _display_splash_screen      0 365E A   
_display_string             0 367D A   _fail                       0 A4EA A   
_failed                     0 A575 A   _find_vga_entry             0 7EE3 A   
_get_SS                     0 805B A E _get_capabilities           0 A579 A   
_get_font_access            0 66C9 A   _inb                        0 8025 A E 
_int10_debugmsg             0 36A4 A   _int10_func                 0 36D5 A   
_inw                        0 8030 A E _line_to_vpti               0 02C3 A   
_load_dac_palette           0 3C31 A   _memcpyb                    0 7F6F A   
_memcpyw                    0 7F9F A   _memsetb                    0 7F25 A   
_memsetw                    0 7F4A A   _mode_info_find_mode        0 9A9B A   
_mode_info_list             0 821B A   _nextByte                   0 A597 A   
_no_vbebios_info_string     0 9695 A   _outb                       0 803B A E 
_outw                       0 804B A E _palette0                   0 0A59 A   
_palette1                   0 0B19 A   _palette2                   0 0BD9 A   
_palette3                   0 0C99 A   _pci_get_lfb_addr           0 81B7 A   
_printf                     0 807A A E _read_EDID                  0 A584 A   
_read_byte                  0 7FCF A   _read_word                  0 7FE2 A   
_release_font_access        0 66EC A   _set_scan_lines             0 6720 A   
_static_functionality       0 0F99 A   _unimplemented              0 805E A E 
_unknown                    0 806C A E _vbe_biosfn_read_video_sta+ 0 A11F A E 
_vbe_biosfn_restore_video_+ 0 A1B9 A E _vbe_biosfn_return_control+ 0 9B73 A E 
_vbe_biosfn_return_mode_in+ 0 9E1D A E _vbe_biosfn_save_restore_s+ 0 A2E6 A E 
_vbe_biosfn_save_video_sta+ 0 A127 A E _vbe_biosfn_set_get_palett+ 0 A4D4 A E 
_vbe_biosfn_set_mode        0 9F66 A E _vbe_has_vbe_display        0 9AFC A   
_vbebios_copyright          0 95C3 A   _vbebios_info_string        0 966F A   
_vbebios_product_name       0 9621 A   _vbebios_product_revision   0 963A A   
_vbebios_vendor_name        0 9609 A   _vga_compat_setup           0 99C4 A   
_vga_modes                  0 0233 A   _vgafont14                  0 17A9 A   
_vgafont14alt               0 35A9 A   _vgafont16                  0 25A9 A   
_vgafont16alt               0 35AA A   _vgafont8                   0 0FA9 A   
_vgamem_copy_cga            0 4842 A   _vgamem_copy_pl4            0 46F5 A   
_vgamem_fill_cga            0 4954 A   _vgamem_fill_pl4            0 47B7 A   
_video_param_table          0 02D9 A   _video_save_pointer_table   0 3642 A   
_write_byte                 0 7FF5 A   _write_gfx_char_cga         0 539E A   
_write_gfx_char_lin         0 55A2 A   _write_gfx_char_pl4         0 522A A   
_write_word                 0 800D A   biosfn_enable_cursor_emula+ 0 701A A   
biosfn_enable_default_pale+ 0 6FB6 A   biosfn_enable_grayscale_su+ 0 6FF6 A   
biosfn_enable_video_addres+ 0 6FD8 A   biosfn_get_all_palette_reg  0 6467 A   
biosfn_get_ega_info         0 6F02 A   biosfn_get_single_palette_+ 0 6435 A   
biosfn_get_video_mode       0 632F A   biosfn_group_0B             0 5A51 A   
biosfn_group_10             0 6356 A   biosfn_group_1A             0 7125 A   
biosfn_read_all_dac_reg     0 6547 A   biosfn_read_display_code    0 7131 A   
biosfn_read_overscan_borde+ 0 6459 A   biosfn_read_pel_mask        0 657A A   
biosfn_read_single_dac_reg  0 652C A   biosfn_read_video_dac_stat+ 0 6585 A   
biosfn_select_vert_res      0 6F2D A   biosfn_select_video_dac_co+ 0 64E9 A   
biosfn_set_all_dac_reg      0 64C1 A   biosfn_set_all_palette_reg  0 63E2 A   
biosfn_set_border_color     0 5A5F A   biosfn_set_display_code     0 7146 A   
biosfn_set_overscan_border+ 0 63DA A   biosfn_set_palette          0 5A9E A   
biosfn_set_pel_mask         0 656F A   biosfn_set_single_dac_reg   0 64A8 A   
biosfn_set_single_palette_+ 0 63C0 A   biosfn_set_text_block_spec+ 0 6A2D A   
biosfn_toggle_intensity     0 640F A   bit8_clear                  0 9A0C A   
bit9_clear                  0 9A13 A   bpp4_mode                   0 97AD A   
dispi_get_bank              0 98F7 A   dispi_get_bpp               0 986C A   
dispi_get_enable            0 98D9 A   dispi_get_id                0 97FB A   
dispi_get_virt_height       0 99B6 A   dispi_get_virt_width        0 99A8 A   
dispi_get_x_offset          0 994C A   dispi_get_y_offset          0 996A A   
dispi_set_bank_farcall_err+ 0 9937 A   dispi_set_bank_farcall_get  0 9929 A   
dispi_set_id                0 9809 A   dispi_set_virt_width        0 9995 A   
dispi_set_x_offset          0 993C A   dispi_set_y_offset          0 995A A   
get_bpp_noinc               0 9883 A   get_dac_16_page             0 65B5 A   
get_dac_palette_format      0 A4C0 A   get_display_start           0 A48D A   
get_display_window          0 A415 A   get_logical_scan_line_leng+ 0 A44D A   
get_palette_loop            0 646F A   idiv_u                      0 671B A   
illegal_window              0 9740 A   init_bios_area              0 360A A   
init_vga_card               0 35AB A   int10_end                   0 0231 A   
int10_group_10_unknown      0 63BC A   int10_normal                0 0223 A   
int10_test_0B               0 0177 A   int10_test_1001             0 635C A   
int10_test_1002             0 6362 A   int10_test_1003             0 6368 A   
int10_test_1007             0 636F A   int10_test_1008             0 6376 A   
int10_test_1009             0 637D A   int10_test_1010             0 6384 A   
int10_test_1012             0 638B A   int10_test_1013             0 6392 A   
int10_test_1015             0 6399 A   int10_test_1017             0 63A0 A   
int10_test_1018             0 63A7 A   int10_test_1019             0 63AE A   
int10_test_101A             0 63B5 A   int10_test_101B             0 01D0 A   
int10_test_1103             0 0182 A   int10_test_12               0 018D A   
int10_test_1A               0 016C A   int10_test_4F               0 01DF A   
int10_test_BL30             0 019D A   int10_test_BL31             0 01A8 A   
int10_test_BL32             0 01B2 A   int10_test_BL33             0 01BC A   
int10_test_BL34             0 01C6 A   int10_test_vbe_05           0 01ED A   
int10_test_vbe_06           0 01F6 A   int10_test_vbe_07           0 01FF A   
int10_test_vbe_08           0 0208 A   int10_test_vbe_0A           0 0211 A   
int10_test_vbe_15           0 021A A   lmulul                      0 9B5A A   
memcpyb_end                 0 7F97 A   memcpyw_end                 0 7FC7 A   
memsetb_end                 0 7F44 A   memsetw_end                 0 7F69 A   
mode_ega_color              0 6F22 A   msg_alt_dcc                 0 716A A   
msg_vbe_init                0 96B9 A   msg_vert_res                0 6F8F A   
msg_vga_init                0 35C7 A   no_4bpp_1                   0 A445 A   
no_4bpp_2                   0 A462 A   no_actl_reg1                0 63D9 A   
no_actl_reg2                0 6458 A   no_vbe_flag                 0 9B4F A   
no_vbe_interface            0 9B33 A   no_vbe_mode                 0 A111 A   
pci_get_lfb_addr_fail       0 81DC A   pci_get_lfb_addr_found      0 81E0 A   
pci_get_lfb_addr_next_dev   0 81CA A   pci_get_lfb_addr_return     0 81FA A   
pci_get_lfb_addr_success    0 81F4 A   pci_read_reg                0 8202 A   
read_dac_loop               0 6558 A   set_actl_normal             0 6525 A   
set_cga_palette_loop        0 5AAB A   set_dac_16_page             0 651F A   
set_dac_loop                0 64D2 A   set_dac_mode                0 A4BD A   
set_dac_page                0 650C A   set_dac_palette_format      0 A4A8 A   
set_display_start           0 A47F A   set_display_window          0 A405 A   
set_intensity_loop          0 5A7D A   set_logical_scan_line_byte+ 0 A434 A   
set_logical_scan_line_pixe+ 0 A44A A   set_low_border              0 5A77 A   
set_normal_dac              0 A4BA A   set_palette_loop            0 63F1 A   
set_retcode                 0 6F88 A   set_vert_res                0 6F7E A   
set_width_svga              0 9986 A   set_xy_regs                 0 97B9 A   
vbe_03_ok                   0 A11A A   vbe_05_failed               0 A41E A   
vbe_08_ok                   0 A4CC A   vbe_08_unsupported          0 A4D0 A   
vbe_biosfn_display_identif+ 0 A56E A   vbe_biosfn_display_window_+ 0 A3F5 A   
vbe_biosfn_return_current_+ 0 A0FA A   vbe_biosfn_return_protecte+ 0 A4D5 A   
vbe_biosfn_set_get_dac_pal+ 0 A49D A   vbe_biosfn_set_get_display+ 0 A46F A   
vbe_biosfn_set_get_logical+ 0 A422 A   vbe_display_info            0 9B3D A   
vbe_init                    0 9B0F A   vert_res_200                0 6F74 A   
vert_res_350                0 6F6A A   vert_res_400                0 6F5E A   
vesa_EDID                   0 A4EE A   vesa_pm_end                 0 97FB A   
vesa_pm_io_ports_table      0 9702 A   vesa_pm_set_display_start   0 9745 A   
vesa_pm_set_display_start1  0 9754 A   vesa_pm_set_display_window+ 0 9719 A   
vesa_pm_set_window          0 970E A   vesa_pm_start               0 96FA A   
vesa_pm_unimplemented       0 97F6 A   vga_compat_end              0 9A99 A   
vga_set_virt_width          0 9978 A   vgabios_copyright           0 0058 A   
vgabios_date                0 004A A   vgabios_end                 0 A5BB A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0128 A   
vgabios_int10_handler       0 0152 A   vgabios_license             0 0084 A   
vgabios_name                0 0022 A   vgabios_pci_data            0 0110 A   
vgabios_start               0 0000 A   vgabios_version             0 003E A   
vgabios_website             0 00B9 A   

00000 errors
00000 warnings
