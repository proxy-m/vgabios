00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 void dispi_set_enable(enable);
00012                                           !BCC_EOS
00013                                           ! 6 Boolean vbe_has_vbe_display();
00014                                           !BCC_EOS
00015                                           ! 7 void vbe_biosfn_return_controller_information(AX, ES, DI);
00016                                           !BCC_EOS
00017                                           ! 8 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00018                                           !BCC_EOS
00019                                           ! 9 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 10 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00022                                           !BCC_EOS
00023                                           ! 11 void vbe_biosfn_set_get_palette_data(AX);
00024                                           !BCC_EOS
00025                                           ! 12 void vbe_biosfn_return_protected_mode_interface(AX);
00026                                           !BCC_EOS
00027                                           ! 13 void vbe_biosfn_display_identification_extensions(AX, BX, CX, DX, ES, DI);
00028                                           !BCC_EOS
00029                                           ! 14 typedef struct VbeInfoBlock
00030                                           ! 15 {
00031                                           ! 16    Bit8u VbeSignature[4];
00032                                           !BCC_EOS
00033                                           ! 17    Bit16u VbeVersion;
00034                                           !BCC_EOS
00035                                           ! 18    Bit16u OemStringPtr_Off;
00036                                           !BCC_EOS
00037                                           ! 19    Bit16u OemStringPtr_Seg;
00038                                           !BCC_EOS
00039                                           ! 20    Bit8u Capabilities[4];
00040                                           !BCC_EOS
00041                                           ! 21    Bit16u VideoModePtr_Off;
00042                                           !BCC_EOS
00043                                           ! 22    Bit16u VideoModePtr_Seg;
00044                                           !BCC_EOS
00045                                           ! 23    Bit16u TotalMemory;
00046                                           !BCC_EOS
00047                                           ! 24    Bit16u OemSoftwareRev;
00048                                           !BCC_EOS
00049                                           ! 25    Bit16u OemVendorNamePtr_Off;
00050                                           !BCC_EOS
00051                                           ! 26    Bit16u OemVendorNamePtr_Seg;
00052                                           !BCC_EOS
00053                                           ! 27    Bit16u OemProductNamePtr_Off;
00054                                           !BCC_EOS
00055                                           ! 28    Bit16u OemProductNamePtr_Seg;
00056                                           !BCC_EOS
00057                                           ! 29    Bit16u OemProductRevPtr_Off;
00058                                           !BCC_EOS
00059                                           ! 30    Bit16u OemProductRevPtr_Seg;
00060                                           !BCC_EOS
00061                                           ! 31    Bit16u Reserved[111];
00062                                           !BCC_EOS
00063                                           ! 32    Bit8u OemData[256];
00064                                           !BCC_EOS
00065                                           ! 33 } VbeInfoBlock;
00066                                           !BCC_EOS
00067                                           ! 34 typedef struct ModeInfoBlockCompact
00068                                           ! 35 {
00069                                           ! 36    Bit16u ModeAttributes;
00070                                           !BCC_EOS
00071                                           ! 37    Bit8u WinAAttributes;
00072                                           !BCC_EOS
00073                                           ! 38    Bit8u WinBAttributes;
00074                                           !BCC_EOS
00075                                           ! 39    Bit16u WinGranularity;
00076                                           !BCC_EOS
00077                                           ! 40    Bit16u WinSize;
00078                                           !BCC_EOS
00079                                           ! 41    Bit16u WinASegment;
00080                                           !BCC_EOS
00081                                           ! 42    Bit16u WinBSegment;
00082                                           !BCC_EOS
00083                                           ! 43    Bit32u WinFuncPtr;
00084                                           !BCC_EOS
00085                                           ! 44    Bit16u BytesPerScanLine;
00086                                           !BCC_EOS
00087                                           ! 45    Bit16u XResolution;
00088                                           !BCC_EOS
00089                                           ! 46    Bit16u YResolution;
00090                                           !BCC_EOS
00091                                           ! 47    Bit8u XCharSize;
00092                                           !BCC_EOS
00093                                           ! 48    Bit8u YCharSize;
00094                                           !BCC_EOS
00095                                           ! 49    Bit8u NumberOfPlanes;
00096                                           !BCC_EOS
00097                                           ! 50    Bit8u BitsPerPixel;
00098                                           !BCC_EOS
00099                                           ! 51    Bit8u NumberOfBanks;
00100                                           !BCC_EOS
00101                                           ! 52    Bit8u MemoryModel;
00102                                           !BCC_EOS
00103                                           ! 53    Bit8u BankSize;
00104                                           !BCC_EOS
00105                                           ! 54    Bit8u NumberOfImagePages;
00106                                           !BCC_EOS
00107                                           ! 55    Bit8u Reserved_page;
00108                                           !BCC_EOS
00109                                           ! 56    Bit8u RedMaskSize;
00110                                           !BCC_EOS
00111                                           ! 57    Bit8u RedFieldPosition;
00112                                           !BCC_EOS
00113                                           ! 58    Bit8u GreenMaskSize;
00114                                           !BCC_EOS
00115                                           ! 59    Bit8u GreenFieldPosition;
00116                                           !BCC_EOS
00117                                           ! 60    Bit8u BlueMaskSize;
00118                                           !BCC_EOS
00119                                           ! 61    Bit8u BlueFieldPosition;
00120                                           !BCC_EOS
00121                                           ! 62    Bit8u RsvdMaskSize;
00122                                           !BCC_EOS
00123                                           ! 63    Bit8u RsvdFieldPosition;
00124                                           !BCC_EOS
00125                                           ! 64    Bit8u DirectColorModeInfo;
00126                                           !BCC_EOS
00127                                           ! 65    Bit32u PhysBasePtr;
00128                                           !BCC_EOS
00129                                           ! 66    Bit32u OffScreenMemOffset;
00130                                           !BCC_EOS
00131                                           ! 67    Bit16u OffScreenMemSize;
00132                                           !BCC_EOS
00133                                           ! 68    Bit16u LinBytesPerScanLine;
00134                                           !BCC_EOS
00135                                           ! 69    Bit8u BnkNumberOfPages;
00136                                           !BCC_EOS
00137                                           ! 70    Bit8u LinNumberOfPages;
00138                                           !BCC_EOS
00139                                           ! 71    Bit8u LinRedMaskSize;
00140                                           !BCC_EOS
00141                                           ! 72    Bit8
00142                                           ! 72 u LinRedFieldPosition;
00143                                           !BCC_EOS
00144                                           ! 73    Bit8u LinGreenMaskSize;
00145                                           !BCC_EOS
00146                                           ! 74    Bit8u LinGreenFieldPosition;
00147                                           !BCC_EOS
00148                                           ! 75    Bit8u LinBlueMaskSize;
00149                                           !BCC_EOS
00150                                           ! 76    Bit8u LinBlueFieldPosition;
00151                                           !BCC_EOS
00152                                           ! 77    Bit8u LinRsvdMaskSize;
00153                                           !BCC_EOS
00154                                           ! 78    Bit8u LinRsvdFieldPosition;
00155                                           !BCC_EOS
00156                                           ! 79    Bit32u MaxPixelClock;
00157                                           !BCC_EOS
00158                                           ! 80 } ModeInfoBlockCompact;
00159                                           !BCC_EOS
00160                                           ! 81 typedef struct ModeInfoBlock
00161                                           ! 82 {
00162                                           ! 83    Bit16u ModeAttributes;
00163                                           !BCC_EOS
00164                                           ! 84    Bit8u WinAAttributes;
00165                                           !BCC_EOS
00166                                           ! 85    Bit8u WinBAttributes;
00167                                           !BCC_EOS
00168                                           ! 86    Bit16u WinGranularity;
00169                                           !BCC_EOS
00170                                           ! 87    Bit16u WinSize;
00171                                           !BCC_EOS
00172                                           ! 88    Bit16u WinASegment;
00173                                           !BCC_EOS
00174                                           ! 89    Bit16u WinBSegment;
00175                                           !BCC_EOS
00176                                           ! 90    Bit32u WinFuncPtr;
00177                                           !BCC_EOS
00178                                           ! 91    Bit16u BytesPerScanLine;
00179                                           !BCC_EOS
00180                                           ! 92    Bit16u XResolution;
00181                                           !BCC_EOS
00182                                           ! 93    Bit16u YResolution;
00183                                           !BCC_EOS
00184                                           ! 94    Bit8u XCharSize;
00185                                           !BCC_EOS
00186                                           ! 95    Bit8u YCharSize;
00187                                           !BCC_EOS
00188                                           ! 96    Bit8u NumberOfPlanes;
00189                                           !BCC_EOS
00190                                           ! 97    Bit8u BitsPerPixel;
00191                                           !BCC_EOS
00192                                           ! 98    Bit8u NumberOfBanks;
00193                                           !BCC_EOS
00194                                           ! 99    Bit8u MemoryModel;
00195                                           !BCC_EOS
00196                                           ! 100    Bit8u BankSize;
00197                                           !BCC_EOS
00198                                           ! 101    Bit8u NumberOfImagePages;
00199                                           !BCC_EOS
00200                                           ! 102    Bit8u Reserved_page;
00201                                           !BCC_EOS
00202                                           ! 103    Bit8u RedMaskSize;
00203                                           !BCC_EOS
00204                                           ! 104    Bit8u RedFieldPosition;
00205                                           !BCC_EOS
00206                                           ! 105    Bit8u GreenMaskSize;
00207                                           !BCC_EOS
00208                                           ! 106    Bit8u GreenFieldPosition;
00209                                           !BCC_EOS
00210                                           ! 107    Bit8u BlueMaskSize;
00211                                           !BCC_EOS
00212                                           ! 108    Bit8u BlueFieldPosition;
00213                                           !BCC_EOS
00214                                           ! 109    Bit8u RsvdMaskSize;
00215                                           !BCC_EOS
00216                                           ! 110    Bit8u RsvdFieldPosition;
00217                                           !BCC_EOS
00218                                           ! 111    Bit8u DirectColorModeInfo;
00219                                           !BCC_EOS
00220                                           ! 112    Bit32u PhysBasePtr;
00221                                           !BCC_EOS
00222                                           ! 113    Bit32u OffScreenMemOffset;
00223                                           !BCC_EOS
00224                                           ! 114    Bit16u OffScreenMemSize;
00225                                           !BCC_EOS
00226                                           ! 115    Bit16u LinBytesPerScanLine;
00227                                           !BCC_EOS
00228                                           ! 116    Bit8u BnkNumberOfPages;
00229                                           !BCC_EOS
00230                                           ! 117    Bit8u LinNumberOfPages;
00231                                           !BCC_EOS
00232                                           ! 118    Bit8u LinRedMaskSize;
00233                                           !BCC_EOS
00234                                           ! 119    Bit8u LinRedFieldPosition;
00235                                           !BCC_EOS
00236                                           ! 120    Bit8u LinGreenMaskSize;
00237                                           !BCC_EOS
00238                                           ! 121    Bit8u LinGreenFieldPosition;
00239                                           !BCC_EOS
00240                                           ! 122    Bit8u LinBlueMaskSize;
00241                                           !BCC_EOS
00242                                           ! 123    Bit8u LinBlueFieldPosition;
00243                                           !BCC_EOS
00244                                           ! 124    Bit8u LinRsvdMaskSize;
00245                                           !BCC_EOS
00246                                           ! 125    Bit8u LinRsvdFieldPosition;
00247                                           !BCC_EOS
00248                                           ! 126    Bit32u MaxPixelClock;
00249                                           !BCC_EOS
00250                                           ! 127    Bit8u Reserved[189];
00251                                           !BCC_EOS
00252                                           ! 128 } ModeInfoBlock;
00253                                           !BCC_EOS
00254                                           ! 129 typedef struct ModeInfoListItem
00255                                           ! 130 {
00256                                           ! 131   Bit16u mode;
00257                                           !BCC_EOS
00258                                           ! 132   ModeInfoBlockCompact info;
00259                                           !BCC_EOS
00260                                           ! 133 } ModeInfoListItem;
00261                                           !BCC_EOS
00262                                           ! 134 static Bit8u read_byte();
00263                                           !BCC_EOS
00264                                           ! 135 static Bit16u read_word();
00265                                           !BCC_EOS
00266                                           ! 136 static void write_byte();
00267                                           !BCC_EOS
00268                                           ! 137 static void write_word();
00269                                           !BCC_EOS
00270                                           ! 138 static Bit8u inb();
00271                                           !BCC_EOS
00272                                           ! 139 static Bit16u inw();
00273                                           !BCC_EOS
00274                                           ! 140 static void outb();
00275                                           !BCC_EOS
00276                                           ! 141 static void outw();
00277                                           !BCC_EOS
00278                                           ! 142 static Bit16u get_SS();
00279                                           !BCC_EOS
00280                                           ! 143 static void printf();
00281                                           !BCC_EOS
00282                                           ! 144 static void unimplemented();
00283                                           !BCC_EOS
00284                                           ! 145 static void unknown();
00285                                           !BCC_EOS
00286                                           ! 146 static Bit8u find_vga_entry();
00287                                           !BCC_EOS
00288                                           ! 147 static void load_dac_palette();
00289                                           !BCC_EOS
00290                                           ! 148 static void memsetb();
00291                                           !BCC_EOS
00292                                           ! 149 static void memsetw();
00293                                           !BCC_EOS
00294                                           ! 150 static void memcpyb();
00295                                           !BCC_EOS
00296                                           ! 151 static void memcpyw();
00297                                           !BCC_EOS
00298                                           ! 152 static void biosfn_set_video_mode();
00299                                           !BCC_EOS
00300                                           ! 153 static void biosfn_set_cursor_shape
00301                                           ! 153 ();
00302                                           !BCC_EOS
00303                                           ! 154 static void biosfn_set_cursor_pos();
00304                                           !BCC_EOS
00305                                           ! 155 static void biosfn_get_cursor_pos();
00306                                           !BCC_EOS
00307                                           ! 156 static void biosfn_set_active_page();
00308                                           !BCC_EOS
00309                                           ! 157 static void biosfn_scroll();
00310                                           !BCC_EOS
00311                                           ! 158 static void biosfn_read_char_attr();
00312                                           !BCC_EOS
00313                                           ! 159 static void biosfn_write_char_attr();
00314                                           !BCC_EOS
00315                                           ! 160 static void biosfn_write_char_only();
00316                                           !BCC_EOS
00317                                           ! 161 static void biosfn_write_pixel();
00318                                           !BCC_EOS
00319                                           ! 162 static void biosfn_read_pixel();
00320                                           !BCC_EOS
00321                                           ! 163 static void biosfn_write_teletype();
00322                                           !BCC_EOS
00323                                           ! 164 static void biosfn_perform_gray_scale_summing();
00324                                           !BCC_EOS
00325                                           ! 165 static void biosfn_load_text_user_pat();
00326                                           !BCC_EOS
00327                                           ! 166 static void biosfn_load_text_8_14_pat();
00328                                           !BCC_EOS
00329                                           ! 167 static void biosfn_load_text_8_8_pat();
00330                                           !BCC_EOS
00331                                           ! 168 static void biosfn_load_text_8_16_pat();
00332                                           !BCC_EOS
00333                                           ! 169 static void biosfn_load_gfx_8_8_chars();
00334                                           !BCC_EOS
00335                                           ! 170 static void biosfn_load_gfx_user_chars();
00336                                           !BCC_EOS
00337                                           ! 171 static void biosfn_load_gfx_8_14_chars();
00338                                           !BCC_EOS
00339                                           ! 172 static void biosfn_load_gfx_8_8_dd_chars();
00340                                           !BCC_EOS
00341                                           ! 173 static void biosfn_load_gfx_8_16_chars();
00342                                           !BCC_EOS
00343                                           ! 174 static void biosfn_get_font_info();
00344                                           !BCC_EOS
00345                                           ! 175 static void biosfn_alternate_prtsc();
00346                                           !BCC_EOS
00347                                           ! 176 static void biosfn_switch_video_interface();
00348                                           !BCC_EOS
00349                                           ! 177 static void biosfn_enable_video_refresh_control();
00350                                           !BCC_EOS
00351                                           ! 178 static void biosfn_write_string();
00352                                           !BCC_EOS
00353                                           ! 179 static void biosfn_read_state_info();
00354                                           !BCC_EOS
00355                                           ! 180 static void biosfn_read_video_state_size();
00356                                           !BCC_EOS
00357                                           ! 181 static Bit16u biosfn_save_video_state();
00358                                           !BCC_EOS
00359                                           ! 182 static Bit16u biosfn_restore_video_state();
00360                                           !BCC_EOS
00361                                           ! 183 extern Bit8u video_save_pointer_table[];
00362                                           !BCC_EOS
00363                                           ! 184 #asm
00364                                           !BCC_ASM
00365                                           MACRO SET_INT_VECTOR
00366                                             push ds
00367                                             xor ax, ax
00368                                             mov ds, ax
00369                                             mov ax, ?3
00370                                             mov ?1*4, ax
00371                                             mov ax, ?2
00372                                             mov ?1*4+2, ax
00373                                             pop ds
00374                                           MEND
00375                                           ! 195 endasm
00376                                           !BCC_ENDASM
00377                                           ! 196 #asm
00378                                           !BCC_ASM
00379                                           
00380 0000                                      .rom
00381 0000                                      .org 0
00382                                           use16 386
00383                       00000000            vgabios_start:
00384 0000                        55            .byte 0x55, 0xaa
00385 0002                        40            .byte 0x40
00386                       00000003            vgabios_entry_point:
00387 0003           E9         0122              jmp vgabios_init_func
00388 0018                                      .org 0x18
00389 0018                      0110            .word vgabios_pci_data
00390 001E                                      .org 0x1e
00391 001E                        49            .ascii "IBM"
00392 0021                        00            .byte 0x00
00393                       00000022            vgabios_name:
00394 0022                        50            .ascii "Plex86/Bochs VGABios"
00395 0036                        20            .ascii " (PCI)"
00396 003C                        20            .ascii " "
00397 003D                        00            .byte 0x00
00398                       0000003E            vgabios_version:
00399 003E                        63            .ascii "current-cvs"
00400 0049                        20            .ascii " "
00401                       0000004A            vgabios_date:
00402 004A                        31            .ascii "18 May 2021"
00403 0055                        0A            .byte 0x0a,0x0d
00404 0057                        00            .byte 0x00
00405                       00000058            vgabios_copyright:
00406 0058                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00407 0081                        0A            .byte 0x0a,0x0d
00408 0083                        00            .byte 0x00
00409                       00000084            vgabios_license:
00410 0084                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00411 00B4                        0A            .byte 0x0a,0x0d
00412 00B6                        0A            .byte 0x0a,0x0d
00413 00B8                        00            .byte 0x00
00414                       000000B9            vgabios_website:
00415 00B9                        50            .ascii "Please visit :"
00416 00C7                        0A            .byte 0x0a,0x0d
00417                                           ;;.ascii " . http://www.plex86.org"
00418                                           ;;.byte 0x0a,0x0d
00419 00C9                        20            .ascii " . http://bochs.sourceforge.net"
00420 00E8                        0A            .byte 0x0a,0x0d
00421 00EA                        20            .ascii " . http://www.nongnu.org/vgabios"
00422 010A                        0A            .byte 0x0a,0x0d
00423 010C                        0A            .byte 0x0a,0x0d
00424 010E                        00            .byte 0x00
00425 010F                  00000004            .align 4
00426                       00000110            vgabios_pci_data:
00427 0110                        50            .ascii "PCIR"
00428 0114                      1234            .word 0x1234
00429 0116                      1111            .word 0x1111
00430 0118                      0000            .word 0
00431 011A                      0018            .word 0x18
00432 011C                        00            .byte 0
00433 011D                        00            .byte 0x0
00434 011E                      0300            .word 0x300
00435 0120                      0040            .word 0x40
00436 0122                      0001            .word 1
00437 0124                        00            .byte 0
00438 0125                        80            .byte 0x80
00439 0126                      0000            .word 0
00440                                           ;; ============================================================================================
00441                                           ;;
00442                                           ;; Init Entry point
00443                                           ;;
00444                                           ;; ============================================================================================
00445                       00000128            vgabios_init_func:
00446                                           ;; init vga card
00447 0128           E8         3472              call init_vga_card
00448                                           ;; init basic bios vars
00449 012B           E8         34CE              call init_bios_area
00450                                           ;; init vbe functions
00451 012E           E8         9852              call vbe_init
00452                                           ;; set int10 vect
00453                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0131           1E                           push ds
 +a   0132           31C0                         xor ax, ax
 +a   0134           8ED8                         mov ds, ax
 +a   0136           B8                   0152    mov ax,  #vgabios_int10_handler
 +a   0139           A3         0040              mov 0x10*4, ax
 +a   013C           B8                   C000    mov ax,  #0xC000
 +a   013F           A3         0042              mov 0x10*4+2, ax
 +a   0142           1F                           pop ds
00454                                           ;; display splash screen
00455 0143           E8         350A              call _display_splash_screen
00456                                           ;; init video mode and clear the screen
00457 0146           B8                   0003    mov ax,#0x0003
00458 0149           CD                     10    int #0x10
00459                                           ;; show info
00460 014B           E8         3503              call _display_info
00461                                           ;; show vbe info
00462 014E           E8         9860              call vbe_display_info
00463 0151           CB                           retf
00464                                           ! 282 endasm
00465                                           !BCC_ENDASM
00466                                           ! 283 #asm
00467                                           !BCC_ASM
00468                       00000152            vgabios_int10_handler:
00469 0152           9C                           pushf
00470 0153           80FC                   0F    cmp ah, #0x0f
00471 0156           75           06              jne int10_test_1A
00472 0158           E8         6102              call biosfn_get_video_mode
00473 015B           E9         00C5              jmp int10_end
00474                       0000015E            int10_test_1A:
00475 015E           80FC                   1A    cmp ah, #0x1a
00476 0161           75           06              jne int10_test_0B
00477 0163           E8         6E8F              call biosfn_group_1A
00478 0166           E9         00BA              jmp int10_end
00479                       00000169            int10_test_0B:
00480 0169           80FC                   0B    cmp ah, #0x0b
00481 016C           75           06              jne int10_test_1103
00482 016E           E8         581E              call biosfn_group_0B
00483 0171           E9         00AF              jmp int10_end
00484                       00000174            int10_test_1103:
00485 0174           3D                   1103    cmp ax, #0x1103
00486 0177           75           06              jne int10_test_12
00487 0179           E8         67DC              call biosfn_set_text_block_specifier
00488 017C           E9         00A4              jmp int10_end
00489                       0000017F            int10_test_12:
00490 017F           80FC                   12    cmp ah, #0x12
00491 0182           75           3E              jne int10_test_101B
00492 0184           80FB                   10    cmp bl, #0x10
00493 0187           75           06              jne int10_test_BL30
00494 0189           E8         6C91              call biosfn_get_ega_info
00495 018C           E9         0094              jmp int10_end
00496                       0000018F            int10_test_BL30:
00497 018F           80FB                   30    cmp bl, #0x30
00498 0192           75           06              jne int10_test_BL31
00499 0194           E8         6CAA              call biosfn_select_vert_res
00500 0197           E9         0089              jmp int10_end
00501                       0000019A            int10_test_BL31:
00502 019A           80FB                   31    cmp bl, #0x31
00503 019D           75           05              jne int10_test_BL32
00504 019F           E8         6CF2              call biosfn_enable_default_palette_loading
00505 01A2           EB           7F              jmp int10_end
00506                       000001A4            int10_test_BL32:
00507 01A4           80FB                   32    cmp bl, #0x32
00508 01A7           75           05              jne int10_test_BL33
00509 01A9           E8         6D0A              call biosfn_enable_video_addressing
00510 01AC           EB           75              jmp int10_end
00511                       000001AE            int10_test_BL33:
00512 01AE           80FB                   33    cmp bl, #0x33
00513 01B1           75           05              jne int10_test_BL34
00514 01B3           E8         6D1E              call biosfn_enable_grayscale_summing
00515 01B6           EB           6B              jmp int10_end
00516                       000001B8            int10_test_BL34:
00517 01B8           80FB                   34    cmp bl, #0x34
00518 01BB           75           58              jne int10_normal
00519 01BD           E8         6D38              call biosfn_enable_cursor_emulation
00520 01C0           EB           61              jmp int10_end
00521                       000001C2            int10_test_101B:
00522 01C2           3D                   101B    cmp ax, #0x101b
00523 01C5           74           4E              je int10_normal
00524 01C7           80FC                   10    cmp ah, #0x10
00525 01CA           75           05              jne int10_test_4F
00526 01CC           E8         60B5              call biosfn_group_10
00527 01CF           EB           52              jmp int10_end
00528                       000001D1            int10_test_4F:
00529 01D1           80FC                   4F    cmp ah, #0x4f
00530 01D4           75           3F              jne int10_normal
00531 01D6           3C                     03    cmp al, #0x03
00532 01D8           75           05              jne int10_test_vbe_05
00533 01DA           E8         9CD9              call vbe_biosfn_return_current_mode
00534 01DD           EB           44              jmp int10_end
00535                       000001DF            int10_test_vbe_05:
00536 01DF           3C                     05    cmp al, #0x05
00537 01E1           75           05              jne int10_test_vbe_06
00538 01E3           E8         9FA4              call vbe_biosfn_display_window_control
00539 01E6           EB           3B              jmp int10_end
00540                       000001E8            int10_test_vbe_06:
00541 01E8           3C                     06    cmp al, #0x06
00542 01EA           75           05              jne int10_test_vbe_07
00543 01EC           E8         9FC8              call vbe_biosfn_set_get_logical_scan_line_length
00544 01EF           EB           32              jmp int10_end
00545                       000001F1            int10_test_vbe_07:
00546 01F1           3C                     07    cmp al, #0x07
00547 01F3           75           05              jne int10_test_vbe_08
00548 01F5           E8         A00C              call vbe_biosfn_set_get_display_start
00549 01F8           EB           29              jmp int10_end
00550                       000001FA            int10_test_vbe_08:
00551 01FA           3C                     08    cmp al, #0x08
00552 01FC           75           05              jne int10_test_vbe_0A
00553 01FE           E8         A031              call vbe_biosfn_set_get_dac_palette_format
00554 0201           EB           20              jmp int10_end
00555                       00000203            int10_test_vbe_0A:
00556 0203           3C                     0A    cmp al, #0x0A
00557 0205           75           05              jne int10_test_vbe_15
00558 0207           E8         A060              call vbe_biosfn_return_protected_mode_interface
00559 020A           EB           17              jmp int10_end
00560                       0000020C            int10_test_vbe_15:
00561 020C           3C                     15    cmp al, #0x15
00562 020E           75           05              jne int10_normal
00563 0210           E8         A0F0              call vbe_biosfn_display_identification_extensions
00564 0213           EB           0E              jmp int10_end
00565                       00000215            int10_normal:
00566 0215           06                           push es
00567 0216           1E                           push ds
00568 0217           60                           pusha
00569                                           ;; We have to set ds to access the right data segment
00570 0218           BB                   C000    mov bx, #0xc000
00571 021B           8EDB                         mov ds, bx
00572 021D           E8         3476              call _int10_func
00573 0220           61                           popa
00574 0221           1F                           pop ds
00575 0222           07                           pop es
00576                       00000223            int10_end:
00577 0223           9D                           popf
00578 0224           CF                           iret
00579                                           ! 395 endasm
00580                                           !BCC_ENDASM
00581                                           ! 396 typedef struct
00582                                           ! 397 {Bit8u svgamode;
00583                                           !BCC_EOS
00584                                           ! 398  Bit8u class;
00585                                           !BCC_EOS
00586                                           ! 399  Bit8u memmodel;
00587                                           !BCC_EOS
00588                                           ! 400  Bit8u pixbits;
00589                                           !BCC_EOS
00590                                           ! 401  Bit16u sstart;
00591                                           !BCC_EOS
00592                                           ! 402  Bit8u pelmask;
00593                                           !BCC_EOS
00594                                           ! 403  Bit8u dacmodel;
00595                                           !BCC_EOS
00596                                           ! 404 } VGAMODES;
00597                                           !BCC_EOS
00598                                           ! 405 static VGAMODES vga_modes[17 +1]=
00599                                           ! 406 {
00600                                           
00601                       00000225            _vga_modes:
00602                                           ! 407  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00603 0225                        00            .byte	0
00604 0226                        00            .byte	0
00605 0227                        00            .byte	0
00606 0228                        04            .byte	4
00607 0229                      B800            .word	$B800
00608 022B                        FF            .byte	$FF
00609 022C                        02            .byte	2
00610                                           ! 408  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00611 022D                        01            .byte	1
00612 022E                        00            .byte	0
00613 022F                        00            .byte	0
00614 0230                        04            .byte	4
00615 0231                      B800            .word	$B800
00616 0233                        FF            .byte	$FF
00617 0234                        02            .byte	2
00618                                           ! 409  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00619 0235                        02            .byte	2
00620 0236                        00            .byte	0
00621 0237                        00            .byte	0
00622 0238                        04            .byte	4
00623 0239                      B800            .word	$B800
00624 023B                        FF            .byte	$FF
00625 023C                        02            .byte	2
00626                                           ! 410  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00627 023D                        03            .byte	3
00628 023E                        00            .byte	0
00629 023F                        00            .byte	0
00630 0240                        04            .byte	4
00631 0241                      B800            .word	$B800
00632 0243                        FF            .byte	$FF
00633 0244                        02            .byte	2
00634                                           ! 411  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00635 0245                        04            .byte	4
00636 0246                        01            .byte	1
00637 0247                        02            .byte	2
00638 0248                        02            .byte	2
00639 0249                      B800            .word	$B800
00640 024B                        FF            .byte	$FF
00641 024C                        01            .byte	1
00642                                           ! 412  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00643 024D                        05            .byte	5
00644 024E                        01            .byte	1
00645 024F                        02            .byte	2
00646 0250                        02            .byte	2
00647 0251                      B800            .word	$B800
00648 0253                        FF            .byte	$FF
00649 0254                        01            .byte	1
00650                                           ! 413  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00651 0255                        06            .byte	6
00652 0256                        01            .byte	1
00653 0257                        02            .byte	2
00654 0258                        01            .byte	1
00655 0259                      B800            .word	$B800
00656 025B                        FF            .byte	$FF
00657 025C                        01            .byte	1
00658                                           ! 414  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00659 025D                        07            .byte	7
00660 025E                        00            .byte	0
00661 025F                        01            .byte	1
00662 0260                        04            .byte	4
00663 0261                      B000            .word	$B000
00664 0263                        FF            .byte	$FF
00665 0264                        00            .byte	0
00666                                           ! 415  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00667 0265                        0D            .byte	$D
00668 0266                        01            .byte	1
00669 0267                        04            .byte	4
00670 0268                        04            .byte	4
00671 0269                      A000            .word	$A000
00672 026B                        FF            .byte	$FF
00673 026C                        01            .byte	1
00674                                           ! 416  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00675 026D                        0E            .byte	$E
00676 026E                        01            .byte	1
00677 026F                        04            .byte	4
00678 0270                        04            .byte	4
00679 0271                      A000            .word	$A000
00680 0273                        FF            .byte	$FF
00681 0274                        01            .byte	1
00682                                           ! 417  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00683 0275                        0F            .byte	$F
00684 0276                        01            .byte	1
00685 0277                        03            .byte	3
00686 0278                        01            .byte	1
00687 0279                      A000            .word	$A000
00688 027B                        FF            .byte	$FF
00689 027C                        00            .byte	0
00690                                           ! 418  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00691 027D                        10            .byte	$10
00692 027E                        01            .byte	1
00693 027F                        04            .byte	4
00694 0280                        04            .byte	4
00695 0281                      A000            .word	$A000
00696 0283                        FF            .byte	$FF
00697 0284                        02            .byte	2
00698                                           ! 419  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00699 0285                        11            .byte	$11
00700 0286                        01            .byte	1
00701 0287                        03            .byte	3
00702 0288                        01            .byte	1
00703 0289                      A000            .word	$A000
00704 028B                        FF            .byte	$FF
00705 028C                        02            .byte	2
00706                                           ! 420  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00707 028D                        12            .byte	$12
00708 028E                        01            .byte	1
00709 028F                        04            .byte	4
00710 0290                        04            .byte	4
00711 0291                      A000            .word	$A000
00712 0293                        FF            .byte	$FF
00713 0294                        02            .byte	2
00714                                           ! 421  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00715 0295                        13            .byte	$13
00716 0296                        01            .byte	1
00717 0297                        05            .byte	5
00718 0298                        08            .byte	8
00719 0299                      A000            .word	$A000
00720 029B                        FF            .byte	$FF
00721 029C                        03            .byte	3
00722                                           ! 422  {0x6A, 0x01, 0x04, 4, 0x
00723 029D                        6A            .byte	$6A
00724 029E                        01            .byte	1
00725 029F                        04            .byte	4
00726 02A0                        04            .byte	4
00727                                           ! 422 A000, 0xFF, 0x02},
00728 02A1                      A000            .word	$A000
00729 02A3                        FF            .byte	$FF
00730 02A4                        02            .byte	2
00731                                           ! 423  {0x21, 0x00, 0x00, 4, 0xA000, 0xFF, 0x02},
00732 02A5                        21            .byte	$21
00733 02A6                        00            .byte	0
00734 02A7                        00            .byte	0
00735 02A8                        04            .byte	4
00736 02A9                      A000            .word	$A000
00737 02AB                        FF            .byte	$FF
00738 02AC                        02            .byte	2
00739                                           ! 424  {0x22 , 0x00, 0x00, 4, 0xB800, 0xFF, 0x02}
00740 02AD                        22            .byte	$22
00741 02AE                        00            .byte	0
00742 02AF                        00            .byte	0
00743 02B0                        04            .byte	4
00744 02B1                      B800            .word	$B800
00745 02B3                        FF            .byte	$FF
00746 02B4                        02            .byte	2
00747                                           ! 425 };
00748                                           !BCC_EOS
00749                                           ! 426 static Bit8u line_to_vpti[17 +1]={
00750                       000002B5            _line_to_vpti:
00751                                           ! 427     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00752 02B5                        17            .byte	$17
00753 02B6                        17            .byte	$17
00754 02B7                        18            .byte	$18
00755 02B8                        18            .byte	$18
00756 02B9                        04            .byte	4
00757 02BA                        05            .byte	5
00758 02BB                        06            .byte	6
00759 02BC                        07            .byte	7
00760                                           ! 428     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00761 02BD                        0D            .byte	$D
00762 02BE                        0E            .byte	$E
00763 02BF                        11            .byte	$11
00764 02C0                        12            .byte	$12
00765 02C1                        1A            .byte	$1A
00766 02C2                        1B            .byte	$1B
00767 02C3                        1C            .byte	$1C
00768 02C4                        1D            .byte	$1D
00769                                           ! 429     0x18, 0x15
00770 02C5                        18            .byte	$18
00771                                           ! 430 };
00772 02C6                        15            .byte	$15
00773                                           !BCC_EOS
00774                                           ! 431 static Bit8u dac_regs[3 +1]=
00775                                           ! 432 {0x3f,0x3f,0x3f,0xff};
00776                       000002C7            _dac_regs:
00777 02C7                        3F            .byte	$3F
00778 02C8                        3F            .byte	$3F
00779 02C9                        3F            .byte	$3F
00780 02CA                        FF            .byte	$FF
00781                                           !BCC_EOS
00782                                           ! 433 typedef struct {
00783                                           ! 434     Bit8u twidth;
00784                                           !BCC_EOS
00785                                           ! 435     Bit8u theightm1;
00786                                           !BCC_EOS
00787                                           ! 436     Bit8u cheight;
00788                                           !BCC_EOS
00789                                           ! 437     Bit8u slength_l;
00790                                           !BCC_EOS
00791                                           ! 438     Bit8u slength_h;
00792                                           !BCC_EOS
00793                                           ! 439     Bit8u sequ_regs[4];
00794                                           !BCC_EOS
00795                                           ! 440     Bit8u miscreg;
00796                                           !BCC_EOS
00797                                           ! 441     Bit8u crtc_regs[25];
00798                                           !BCC_EOS
00799                                           ! 442     Bit8u actl_regs[20];
00800                                           !BCC_EOS
00801                                           ! 443     Bit8u grdc_regs[9];
00802                                           !BCC_EOS
00803                                           ! 444 } VideoParamTableEntry;
00804                                           !BCC_EOS
00805                                           ! 445 static VideoParamTableEntry video_param_table[30] = {
00806                       000002CB            _video_param_table:
00807                                           ! 446 {
00808                                           ! 447  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00809 02CB                        00            .byte	0
00810 02CC                        00            .byte	0
00811 02CD                        00            .byte	0
00812 02CE                        00            .byte	0
00813 02CF                        00            .byte	0
00814 02D0                        00            .byte	0
00815 02D1                        00            .byte	0
00816 02D2                        00            .byte	0
00817                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00818 02D3                        00            .byte	0
00819 02D4                        00            .byte	0
00820 02D5                        00            .byte	0
00821 02D6                        00            .byte	0
00822 02D7                        00            .byte	0
00823 02D8                        00            .byte	0
00824 02D9                        00            .byte	0
00825 02DA                        00            .byte	0
00826                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00827 02DB                        00            .byte	0
00828 02DC                        00            .byte	0
00829 02DD                        00            .byte	0
00830 02DE                        00            .byte	0
00831 02DF                        00            .byte	0
00832 02E0                        00            .byte	0
00833 02E1                        00            .byte	0
00834 02E2                        00            .byte	0
00835                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00836 02E3                        00            .byte	0
00837 02E4                        00            .byte	0
00838 02E5                        00            .byte	0
00839 02E6                        00            .byte	0
00840 02E7                        00            .byte	0
00841 02E8                        00            .byte	0
00842 02E9                        00            .byte	0
00843 02EA                        00            .byte	0
00844                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00845 02EB                        00            .byte	0
00846 02EC                        00            .byte	0
00847 02ED                        00            .byte	0
00848 02EE                        00            .byte	0
00849 02EF                        00            .byte	0
00850 02F0                        00            .byte	0
00851 02F1                        00            .byte	0
00852 02F2                        00            .byte	0
00853                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00854 02F3                        00            .byte	0
00855 02F4                        00            .byte	0
00856 02F5                        00            .byte	0
00857 02F6                        00            .byte	0
00858 02F7                        00            .byte	0
00859 02F8                        00            .byte	0
00860 02F9                        00            .byte	0
00861 02FA                        00            .byte	0
00862                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00863 02FB                        00            .byte	0
00864 02FC                        00            .byte	0
00865 02FD                        00            .byte	0
00866 02FE                        00            .byte	0
00867 02FF                        00            .byte	0
00868 0300                        00            .byte	0
00869 0301                        00            .byte	0
00870 0302                        00            .byte	0
00871                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00872 0303                        00            .byte	0
00873 0304                        00            .byte	0
00874 0305                        00            .byte	0
00875 0306                        00            .byte	0
00876 0307                        00            .byte	0
00877 0308                        00            .byte	0
00878 0309                        00            .byte	0
00879 030A                        00            .byte	0
00880                                           ! 455 },
00881                                           ! 456 {
00882                                           ! 457  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00883 030B                        00            .byte	0
00884 030C                        00            .byte	0
00885 030D                        00            .byte	0
00886 030E                        00            .byte	0
00887 030F                        00            .byte	0
00888 0310                        00            .byte	0
00889 0311                        00            .byte	0
00890 0312                        00            .byte	0
00891                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00892 0313                        00            .byte	0
00893 0314                        00            .byte	0
00894 0315                        00            .byte	0
00895 0316                        00            .byte	0
00896 0317                        00            .byte	0
00897 0318                        00            .byte	0
00898 0319                        00            .byte	0
00899 031A                        00            .byte	0
00900                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00901 031B                        00            .byte	0
00902 031C                        00            .byte	0
00903 031D                        00            .byte	0
00904 031E                        00            .byte	0
00905 031F                        00            .byte	0
00906 0320                        00            .byte	0
00907 0321                        00            .byte	0
00908 0322                        00            .byte	0
00909                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00910 0323                        00            .byte	0
00911 0324                        00            .byte	0
00912 0325                        00            .byte	0
00913 0326                        00            .byte	0
00914 0327                        00            .byte	0
00915 0328                        00            .byte	0
00916 0329                        00            .byte	0
00917 032A                        00            .byte	0
00918                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00919 032B                        00            .byte	0
00920 032C                        00            .byte	0
00921 032D                        00            .byte	0
00922 032E                        00            .byte	0
00923 032F                        00            .byte	0
00924 0330                        00            .byte	0
00925 0331                        00            .byte	0
00926 0332                        00            .byte	0
00927                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00928 0333                        00            .byte	0
00929 0334                        00            .byte	0
00930 0335                        00            .byte	0
00931 0336                        00            .byte	0
00932 0337                        00            .byte	0
00933 0338                        00            .byte	0
00934 0339                        00            .byte	0
00935 033A                        00            .byte	0
00936                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00937 033B                        00            .byte	0
00938 033C                        00            .byte	0
00939 033D                        00            .byte	0
00940 033E                        00            .byte	0
00941 033F                        00            .byte	0
00942 0340                        00            .byte	0
00943 0341                        00            .byte	0
00944 0342                        00            .byte	0
00945                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00946 0343                        00            .byte	0
00947 0344                        00            .byte	0
00948 0345                        00            .byte	0
00949 0346                        00            .byte	0
00950 0347                        00            .byte	0
00951 0348                        00            .byte	0
00952 0349                        00            .byte	0
00953 034A                        00            .byte	0
00954                                           ! 465 },
00955                                           ! 466 {
00956                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00957 034B                        00            .byte	0
00958 034C                        00            .byte	0
00959 034D                        00            .byte	0
00960 034E                        00            .byte	0
00961 034F                        00            .byte	0
00962 0350                        00            .byte	0
00963 0351                        00            .byte	0
00964 0352                        00            .byte	0
00965                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00966 0353                        00            .byte	0
00967 0354                        00            .byte	0
00968 0355                        00            .byte	0
00969 0356                        00            .byte	0
00970 0357                        00            .byte	0
00971 0358                        00            .byte	0
00972 0359                        00            .byte	0
00973 035A                        00            .byte	0
00974                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00975 035B                        00            .byte	0
00976 035C                        00            .byte	0
00977 035D                        00            .byte	0
00978 035E                        00            .byte	0
00979 035F                        00            .byte	0
00980 0360                        00            .byte	0
00981 0361                        00            .byte	0
00982 0362                        00            .byte	0
00983                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00984 0363                        00            .byte	0
00985 0364                        00            .byte	0
00986 0365                        00            .byte	0
00987 0366                        00            .byte	0
00988 0367                        00            .byte	0
00989 0368                        00            .byte	0
00990 0369                        00            .byte	0
00991 036A                        00            .byte	0
00992                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00993 036B                        00            .byte	0
00994 036C                        00            .byte	0
00995 036D                        00            .byte	0
00996 036E                        00            .byte	0
00997 036F                        00            .byte	0
00998 0370                        00            .byte	0
00999 0371                        00            .byte	0
01000 0372                        00            .byte	0
01001                                           ! 472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01002 0373                        00            .byte	0
01003 0374                        00            .byte	0
01004 0375                        00            .byte	0
01005 0376                        00            .byte	0
01006 0377                        00            .byte	0
01007 0378                        00            .byte	0
01008 0379                        00            .byte	0
01009 037A                        00            .byte	0
01010                                           ! 473  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01011 037B                        00            .byte	0
01012 037C                        00            .byte	0
01013 037D                        00            .byte	0
01014 037E                        00            .byte	0
01015 037F                        00            .byte	0
01016 0380                        00            .byte	0
01017 0381                        00            .byte	0
01018 0382                        00            .byte	0
01019                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01020 0383                        00            .byte	0
01021 0384                        00            .byte	0
01022 0385                        00            .byte	0
01023 0386                        00            .byte	0
01024 0387                        00            .byte	0
01025 0388                        00            .byte	0
01026 0389                        00            .byte	0
01027 038A                        00            .byte	0
01028                                           ! 475 },
01029                                           ! 476 {
01030                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01031 038B                        00            .byte	0
01032 038C                        00            .byte	0
01033 038D                        00            .byte	0
01034 038E                        00            .byte	0
01035 038F                        00            .byte	0
01036 0390                        00            .byte	0
01037 0391                        00            .byte	0
01038 0392                        00            .byte	0
01039                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01040 0393                        00            .byte	0
01041 0394                        00            .byte	0
01042 0395                        00            .byte	0
01043 0396                        00            .byte	0
01044 0397                        00            .byte	0
01045 0398                        00            .byte	0
01046 0399                        00            .byte	0
01047 039A                        00            .byte	0
01048                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01049 039B                        00            .byte	0
01050 039C                        00            .byte	0
01051 039D                        00            .byte	0
01052 039E                        00            .byte	0
01053 039F                        00            .byte	0
01054 03A0                        00            .byte	0
01055 03A1                        00            .byte	0
01056 03A2                        00            .byte	0
01057                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01058 03A3                        00            .byte	0
01059 03A4                        00            .byte	0
01060 03A5                        00            .byte	0
01061 03A6                        00            .byte	0
01062 03A7                        00            .byte	0
01063 03A8                        00            .byte	0
01064 03A9                        00            .byte	0
01065 03AA                        00            .byte	0
01066                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x0
01067 03AB                        00            .byte	0
01068 03AC                        00            .byte	0
01069 03AD                        00            .byte	0
01070 03AE                        00            .byte	0
01071                                           ! 481 0, 0x00, 0x00, 0x00,
01072 03AF                        00            .byte	0
01073 03B0                        00            .byte	0
01074 03B1                        00            .byte	0
01075 03B2                        00            .byte	0
01076                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01077 03B3                        00            .byte	0
01078 03B4                        00            .byte	0
01079 03B5                        00            .byte	0
01080 03B6                        00            .byte	0
01081 03B7                        00            .byte	0
01082 03B8                        00            .byte	0
01083 03B9                        00            .byte	0
01084 03BA                        00            .byte	0
01085                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01086 03BB                        00            .byte	0
01087 03BC                        00            .byte	0
01088 03BD                        00            .byte	0
01089 03BE                        00            .byte	0
01090 03BF                        00            .byte	0
01091 03C0                        00            .byte	0
01092 03C1                        00            .byte	0
01093 03C2                        00            .byte	0
01094                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01095 03C3                        00            .byte	0
01096 03C4                        00            .byte	0
01097 03C5                        00            .byte	0
01098 03C6                        00            .byte	0
01099 03C7                        00            .byte	0
01100 03C8                        00            .byte	0
01101 03C9                        00            .byte	0
01102 03CA                        00            .byte	0
01103                                           ! 485 },
01104                                           ! 486 {
01105                                           ! 487  40, 24, 8, 0x00, 0x40,
01106 03CB                        28            .byte	$28
01107 03CC                        18            .byte	$18
01108 03CD                        08            .byte	8
01109 03CE                        00            .byte	0
01110 03CF                        40            .byte	$40
01111                                           ! 488  0x09, 0x03, 0x00, 0x02,
01112 03D0                        09            .byte	9
01113 03D1                        03            .byte	3
01114 03D2                        00            .byte	0
01115 03D3                        02            .byte	2
01116                                           ! 489  0x63,
01117 03D4                        63            .byte	$63
01118                                           ! 490  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01119 03D5                        2D            .byte	$2D
01120 03D6                        27            .byte	$27
01121 03D7                        28            .byte	$28
01122 03D8                        90            .byte	$90
01123 03D9                        2B            .byte	$2B
01124 03DA                        80            .byte	$80
01125 03DB                        BF            .byte	$BF
01126 03DC                        1F            .byte	$1F
01127                                           ! 491  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01128 03DD                        00            .byte	0
01129 03DE                        C1            .byte	$C1
01130 03DF                        00            .byte	0
01131 03E0                        00            .byte	0
01132 03E1                        00            .byte	0
01133 03E2                        00            .byte	0
01134 03E3                        00            .byte	0
01135 03E4                        00            .byte	0
01136                                           ! 492  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01137 03E5                        9C            .byte	$9C
01138 03E6                        8E            .byte	$8E
01139 03E7                        8F            .byte	$8F
01140 03E8                        14            .byte	$14
01141 03E9                        00            .byte	0
01142 03EA                        96            .byte	$96
01143 03EB                        B9            .byte	$B9
01144 03EC                        A2            .byte	$A2
01145                                           ! 493  0xff,
01146 03ED                        FF            .byte	$FF
01147                                           ! 494  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01148 03EE                        00            .byte	0
01149 03EF                        13            .byte	$13
01150 03F0                        15            .byte	$15
01151 03F1                        17            .byte	$17
01152 03F2                        02            .byte	2
01153 03F3                        04            .byte	4
01154 03F4                        06            .byte	6
01155 03F5                        07            .byte	7
01156                                           ! 495  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01157 03F6                        10            .byte	$10
01158 03F7                        11            .byte	$11
01159 03F8                        12            .byte	$12
01160 03F9                        13            .byte	$13
01161 03FA                        14            .byte	$14
01162 03FB                        15            .byte	$15
01163 03FC                        16            .byte	$16
01164 03FD                        17            .byte	$17
01165                                           ! 496  0x01, 0x00, 0x03, 0x00,
01166 03FE                        01            .byte	1
01167 03FF                        00            .byte	0
01168 0400                        03            .byte	3
01169 0401                        00            .byte	0
01170                                           ! 497  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01171 0402                        00            .byte	0
01172 0403                        00            .byte	0
01173 0404                        00            .byte	0
01174 0405                        00            .byte	0
01175 0406                        00            .byte	0
01176 0407                        30            .byte	$30
01177 0408                        0F            .byte	$F
01178 0409                        0F            .byte	$F
01179 040A                        FF            .byte	$FF
01180                                           ! 498 },
01181                                           ! 499 {
01182                                           ! 500  40, 24, 8, 0x00, 0x40,
01183 040B                        28            .byte	$28
01184 040C                        18            .byte	$18
01185 040D                        08            .byte	8
01186 040E                        00            .byte	0
01187 040F                        40            .byte	$40
01188                                           ! 501  0x09, 0x03, 0x00, 0x02,
01189 0410                        09            .byte	9
01190 0411                        03            .byte	3
01191 0412                        00            .byte	0
01192 0413                        02            .byte	2
01193                                           ! 502  0x63,
01194 0414                        63            .byte	$63
01195                                           ! 503  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01196 0415                        2D            .byte	$2D
01197 0416                        27            .byte	$27
01198 0417                        28            .byte	$28
01199 0418                        90            .byte	$90
01200 0419                        2B            .byte	$2B
01201 041A                        80            .byte	$80
01202 041B                        BF            .byte	$BF
01203 041C                        1F            .byte	$1F
01204                                           ! 504  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01205 041D                        00            .byte	0
01206 041E                        C1            .byte	$C1
01207 041F                        00            .byte	0
01208 0420                        00            .byte	0
01209 0421                        00            .byte	0
01210 0422                        00            .byte	0
01211 0423                        00            .byte	0
01212 0424                        00            .byte	0
01213                                           ! 505  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01214 0425                        9C            .byte	$9C
01215 0426                        8E            .byte	$8E
01216 0427                        8F            .byte	$8F
01217 0428                        14            .byte	$14
01218 0429                        00            .byte	0
01219 042A                        96            .byte	$96
01220 042B                        B9            .byte	$B9
01221 042C                        A2            .byte	$A2
01222                                           ! 506  0xff,
01223 042D                        FF            .byte	$FF
01224                                           ! 507  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01225 042E                        00            .byte	0
01226 042F                        13            .byte	$13
01227 0430                        15            .byte	$15
01228 0431                        17            .byte	$17
01229 0432                        02            .byte	2
01230 0433                        04            .byte	4
01231 0434                        06            .byte	6
01232 0435                        07            .byte	7
01233                                           ! 508  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01234 0436                        10            .byte	$10
01235 0437                        11            .byte	$11
01236 0438                        12            .byte	$12
01237 0439                        13            .byte	$13
01238 043A                        14            .byte	$14
01239 043B                        15            .byte	$15
01240 043C                        16            .byte	$16
01241 043D                        17            .byte	$17
01242                                           ! 509  0x01, 0x00, 0x03, 0x00,
01243 043E                        01            .byte	1
01244 043F                        00            .byte	0
01245 0440                        03            .byte	3
01246 0441                        00            .byte	0
01247                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01248 0442                        00            .byte	0
01249 0443                        00            .byte	0
01250 0444                        00            .byte	0
01251 0445                        00            .byte	0
01252 0446                        00            .byte	0
01253 0447                        30            .byte	$30
01254 0448                        0F            .byte	$F
01255 0449                        0F            .byte	$F
01256 044A                        FF            .byte	$FF
01257                                           ! 511 },
01258                                           ! 512 {
01259                                           ! 513  80, 24, 8, 0x00, 0x40,
01260 044B                        50            .byte	$50
01261 044C                        18            .byte	$18
01262 044D                        08            .byte	8
01263 044E                        00            .byte	0
01264 044F                        40            .byte	$40
01265                                           ! 514  0x01, 0x01, 0x00, 0x06,
01266 0450                        01            .byte	1
01267 0451                        01            .byte	1
01268 0452                        00            .byte	0
01269 0453                        06            .byte	6
01270                                           ! 515  0x63,
01271 0454                        63            .byte	$63
01272                                           ! 516  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01273 0455                        5F            .byte	$5F
01274 0456                        4F            .byte	$4F
01275 0457                        50            .byte	$50
01276 0458                        82            .byte	$82
01277 0459                        54            .byte	$54
01278 045A                        80            .byte	$80
01279 045B                        BF            .byte	$BF
01280 045C                        1F            .byte	$1F
01281                                           ! 517  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01282 045D                        00            .byte	0
01283 045E                        C1            .byte	$C1
01284 045F                        00            .byte	0
01285 0460                        00            .byte	0
01286 0461                        00            .byte	0
01287 0462                        00            .byte	0
01288 0463                        00            .byte	0
01289 0464                        00            .byte	0
01290                                           ! 518  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01291 0465                        9C            .byte	$9C
01292 0466                        8E            .byte	$8E
01293 0467                        8F            .byte	$8F
01294 0468                        28            .byte	$28
01295 0469                        00            .byte	0
01296 046A                        96            .byte	$96
01297 046B                        B9            .byte	$B9
01298 046C                        C2            .byte	$C2
01299                                           ! 519  0xff,
01300 046D                        FF            .byte	$FF
01301                                           ! 520  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01302 046E                        00            .byte	0
01303 046F                        17            .byte	$17
01304 0470                        17            .byte	$17
01305 0471                        17            .byte	$17
01306 0472                        17            .byte	$17
01307 0473                        17            .byte	$17
01308 0474                        17            .byte	$17
01309 0475                        17            .byte	$17
01310                                           ! 521  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01311 0476                        17            .byte	$17
01312 0477                        17            .byte	$17
01313 0478                        17            .byte	$17
01314 0479                        17            .byte	$17
01315 047A                        17            .byte	$17
01316 047B                        17            .byte	$17
01317 047C                        17            .byte	$17
01318 047D                        17            .byte	$17
01319                                           ! 522  0x01, 0x00, 0x01, 0x00,
01320 047E                        01            .byte	1
01321 047F                        00            .byte	0
01322 0480                        01            .byte	1
01323 0481                        00            .byte	0
01324                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01325 0482                        00            .byte	0
01326 0483                        00            .byte	0
01327 0484                        00            .byte	0
01328 0485                        00            .byte	0
01329 0486                        00            .byte	0
01330 0487                        00            .byte	0
01331 0488                        0D            .byte	$D
01332 0489                        0F            .byte	$F
01333 048A                        FF            .byte	$FF
01334                                           ! 524 },
01335                                           ! 525 {
01336                                           ! 526  80, 24, 16, 0x00, 0x10,
01337 048B                        50            .byte	$50
01338 048C                        18            .byte	$18
01339 048D                        10            .byte	$10
01340 048E                        00            .byte	0
01341 048F                        10            .byte	$10
01342                                           ! 527  0x00, 0x03, 0x00, 0x02,
01343 0490                        00            .byte	0
01344 0491                        03            .byte	3
01345 0492                        00            .byte	0
01346 0493                        02            .byte	2
01347                                           ! 528  0x66,
01348 0494                        66            .byte	$66
01349                                           ! 529  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01350 0495                        5F            .byte	$5F
01351 0496                        4F            .byte	$4F
01352 0497                        50            .byte	$50
01353 0498                        82            .byte	$82
01354 0499                        55            .byte	$55
01355 049A                        81            .byte	$81
01356 049B                        BF            .byte	$BF
01357 049C                        1F            .byte	$1F
01358                                           ! 530  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01359 049D                        00            .byte	0
01360 049E                        4F            .byte	$4F
01361 049F                        0D            .byte	$D
01362 04A0                        0E            .byte	$E
01363 04A1                        00            .byte	0
01364 04A2                        00            .byte	0
01365 04A3                        00            .byte	0
01366 04A4                        00            .byte	0
01367                                           ! 531  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01368 04A5                        9C            .byte	$9C
01369 04A6                        8E            .byte	$8E
01370 04A7                        8F            .byte	$8F
01371 04A8                        28            .byte	$28
01372 04A9                        0F            .byte	$F
01373 04AA                        96            .byte	$96
01374 04AB                        B9            .byte	$B9
01375 04AC                        A3            .byte	$A3
01376                                           ! 532  0xff,
01377 04AD                        FF            .byte	$FF
01378                                           ! 533  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01379 04AE                        00            .byte	0
01380 04AF                        08            .byte	8
01381 04B0                        08            .byte	8
01382 04B1                        08            .byte	8
01383 04B2                        08            .byte	8
01384 04B3                        08            .byte	8
01385 04B4                        08            .byte	8
01386 04B5                        08            .byte	8
01387                                           ! 534  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01388 04B6                        10            .byte	$10
01389 04B7                        18            .byte	$18
01390 04B8                        18            .byte	$18
01391 04B9                        18            .byte	$18
01392 04BA                        18            .byte	$18
01393 04BB                        18            .byte	$18
01394 04BC                        18            .byte	$18
01395 04BD                        18            .byte	$18
01396                                           ! 535  0x0e, 0x00, 0x0f, 0x08,
01397 04BE                        0E            .byte	$E
01398 04BF                        00            .byte	0
01399 04C0                        0F            .byte	$F
01400 04C1                        08            .byte	8
01401                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01402 04C2                        00            .byte	0
01403 04C3                        00            .byte	0
01404 04C4                        00            .byte	0
01405 04C5                        00            .byte	0
01406 04C6                        00            .byte	0
01407 04C7                        10            .byte	$10
01408 04C8                        0A            .byte	$A
01409 04C9                        0F            .byte	$F
01410 04CA                        FF            .byte	$FF
01411                                           ! 537 },
01412                                           ! 538 {
01413                                           ! 539  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01414 04CB                        00            .byte	0
01415 04CC                        00            .byte	0
01416 04CD                        00            .byte	0
01417 04CE                        00            .byte	0
01418 04CF                        00            .byte	0
01419 04D0                        00            .byte	0
01420 04D1                        00            .byte	0
01421 04D2                        00            .byte	0
01422                                           ! 540  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01423 04D3                        00            .byte	0
01424 04D4                        00            .byte	0
01425 04D5                        00            .byte	0
01426 04D6                        00            .byte	0
01427 04D7                        00            .byte	0
01428 04D8                        00            .byte	0
01429 04D9                        00            .byte	0
01430 04DA                        00            .byte	0
01431                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01432 04DB                        00            .byte	0
01433 04DC                        00            .byte	0
01434 04DD                        00            .byte	0
01435 04DE                        00            .byte	0
01436 04DF                        00            .byte	0
01437 04E0                        00            .byte	0
01438 04E1                        00            .byte	0
01439 04E2                        00            .byte	0
01440                                           ! 542  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01441 04E3                        00            .byte	0
01442 04E4                        00            .byte	0
01443 04E5                        00            .byte	0
01444 04E6                        00            .byte	0
01445 04E7                        00            .byte	0
01446 04E8                        00            .byte	0
01447 04E9                        00            .byte	0
01448 04EA                        00            .byte	0
01449                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01450 04EB                        00            .byte	0
01451 04EC                        00            .byte	0
01452 04ED                        00            .byte	0
01453 04EE                        00            .byte	0
01454 04EF                        00            .byte	0
01455 04F0                        00            .byte	0
01456 04F1                        00            .byte	0
01457 04F2                        00            .byte	0
01458                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01459 04F3                        00            .byte	0
01460 04F4                        00            .byte	0
01461 04F5                        00            .byte	0
01462 04F6                        00            .byte	0
01463 04F7                        00            .byte	0
01464 04F8                        00            .byte	0
01465 04F9                        00            .byte	0
01466 04FA                        00            .byte	0
01467                                           ! 545  0x00, 0
01468 04FB                        00            .byte	0
01469                                           ! 545 x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01470 04FC                        00            .byte	0
01471 04FD                        00            .byte	0
01472 04FE                        00            .byte	0
01473 04FF                        00            .byte	0
01474 0500                        00            .byte	0
01475 0501                        00            .byte	0
01476 0502                        00            .byte	0
01477                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01478 0503                        00            .byte	0
01479 0504                        00            .byte	0
01480 0505                        00            .byte	0
01481 0506                        00            .byte	0
01482 0507                        00            .byte	0
01483 0508                        00            .byte	0
01484 0509                        00            .byte	0
01485 050A                        00            .byte	0
01486                                           ! 547 },
01487                                           ! 548 {
01488                                           ! 549  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01489 050B                        00            .byte	0
01490 050C                        00            .byte	0
01491 050D                        00            .byte	0
01492 050E                        00            .byte	0
01493 050F                        00            .byte	0
01494 0510                        00            .byte	0
01495 0511                        00            .byte	0
01496 0512                        00            .byte	0
01497                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01498 0513                        00            .byte	0
01499 0514                        00            .byte	0
01500 0515                        00            .byte	0
01501 0516                        00            .byte	0
01502 0517                        00            .byte	0
01503 0518                        00            .byte	0
01504 0519                        00            .byte	0
01505 051A                        00            .byte	0
01506                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01507 051B                        00            .byte	0
01508 051C                        00            .byte	0
01509 051D                        00            .byte	0
01510 051E                        00            .byte	0
01511 051F                        00            .byte	0
01512 0520                        00            .byte	0
01513 0521                        00            .byte	0
01514 0522                        00            .byte	0
01515                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01516 0523                        00            .byte	0
01517 0524                        00            .byte	0
01518 0525                        00            .byte	0
01519 0526                        00            .byte	0
01520 0527                        00            .byte	0
01521 0528                        00            .byte	0
01522 0529                        00            .byte	0
01523 052A                        00            .byte	0
01524                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01525 052B                        00            .byte	0
01526 052C                        00            .byte	0
01527 052D                        00            .byte	0
01528 052E                        00            .byte	0
01529 052F                        00            .byte	0
01530 0530                        00            .byte	0
01531 0531                        00            .byte	0
01532 0532                        00            .byte	0
01533                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01534 0533                        00            .byte	0
01535 0534                        00            .byte	0
01536 0535                        00            .byte	0
01537 0536                        00            .byte	0
01538 0537                        00            .byte	0
01539 0538                        00            .byte	0
01540 0539                        00            .byte	0
01541 053A                        00            .byte	0
01542                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01543 053B                        00            .byte	0
01544 053C                        00            .byte	0
01545 053D                        00            .byte	0
01546 053E                        00            .byte	0
01547 053F                        00            .byte	0
01548 0540                        00            .byte	0
01549 0541                        00            .byte	0
01550 0542                        00            .byte	0
01551                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01552 0543                        00            .byte	0
01553 0544                        00            .byte	0
01554 0545                        00            .byte	0
01555 0546                        00            .byte	0
01556 0547                        00            .byte	0
01557 0548                        00            .byte	0
01558 0549                        00            .byte	0
01559 054A                        00            .byte	0
01560                                           ! 557 },
01561                                           ! 558 {
01562                                           ! 559  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01563 054B                        00            .byte	0
01564 054C                        00            .byte	0
01565 054D                        00            .byte	0
01566 054E                        00            .byte	0
01567 054F                        00            .byte	0
01568 0550                        00            .byte	0
01569 0551                        00            .byte	0
01570 0552                        00            .byte	0
01571                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01572 0553                        00            .byte	0
01573 0554                        00            .byte	0
01574 0555                        00            .byte	0
01575 0556                        00            .byte	0
01576 0557                        00            .byte	0
01577 0558                        00            .byte	0
01578 0559                        00            .byte	0
01579 055A                        00            .byte	0
01580                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01581 055B                        00            .byte	0
01582 055C                        00            .byte	0
01583 055D                        00            .byte	0
01584 055E                        00            .byte	0
01585 055F                        00            .byte	0
01586 0560                        00            .byte	0
01587 0561                        00            .byte	0
01588 0562                        00            .byte	0
01589                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01590 0563                        00            .byte	0
01591 0564                        00            .byte	0
01592 0565                        00            .byte	0
01593 0566                        00            .byte	0
01594 0567                        00            .byte	0
01595 0568                        00            .byte	0
01596 0569                        00            .byte	0
01597 056A                        00            .byte	0
01598                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01599 056B                        00            .byte	0
01600 056C                        00            .byte	0
01601 056D                        00            .byte	0
01602 056E                        00            .byte	0
01603 056F                        00            .byte	0
01604 0570                        00            .byte	0
01605 0571                        00            .byte	0
01606 0572                        00            .byte	0
01607                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01608 0573                        00            .byte	0
01609 0574                        00            .byte	0
01610 0575                        00            .byte	0
01611 0576                        00            .byte	0
01612 0577                        00            .byte	0
01613 0578                        00            .byte	0
01614 0579                        00            .byte	0
01615 057A                        00            .byte	0
01616                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01617 057B                        00            .byte	0
01618 057C                        00            .byte	0
01619 057D                        00            .byte	0
01620 057E                        00            .byte	0
01621 057F                        00            .byte	0
01622 0580                        00            .byte	0
01623 0581                        00            .byte	0
01624 0582                        00            .byte	0
01625                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01626 0583                        00            .byte	0
01627 0584                        00            .byte	0
01628 0585                        00            .byte	0
01629 0586                        00            .byte	0
01630 0587                        00            .byte	0
01631 0588                        00            .byte	0
01632 0589                        00            .byte	0
01633 058A                        00            .byte	0
01634                                           ! 567 },
01635                                           ! 568 {
01636                                           ! 569  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01637 058B                        00            .byte	0
01638 058C                        00            .byte	0
01639 058D                        00            .byte	0
01640 058E                        00            .byte	0
01641 058F                        00            .byte	0
01642 0590                        00            .byte	0
01643 0591                        00            .byte	0
01644 0592                        00            .byte	0
01645                                           ! 570  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01646 0593                        00            .byte	0
01647 0594                        00            .byte	0
01648 0595                        00            .byte	0
01649 0596                        00            .byte	0
01650 0597                        00            .byte	0
01651 0598                        00            .byte	0
01652 0599                        00            .byte	0
01653 059A                        00            .byte	0
01654                                           ! 571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01655 059B                        00            .byte	0
01656 059C                        00            .byte	0
01657 059D                        00            .byte	0
01658 059E                        00            .byte	0
01659 059F                        00            .byte	0
01660 05A0                        00            .byte	0
01661 05A1                        00            .byte	0
01662 05A2                        00            .byte	0
01663                                           ! 572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01664 05A3                        00            .byte	0
01665 05A4                        00            .byte	0
01666 05A5                        00            .byte	0
01667 05A6                        00            .byte	0
01668 05A7                        00            .byte	0
01669 05A8                        00            .byte	0
01670 05A9                        00            .byte	0
01671 05AA                        00            .byte	0
01672                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01673 05AB                        00            .byte	0
01674 05AC                        00            .byte	0
01675 05AD                        00            .byte	0
01676 05AE                        00            .byte	0
01677 05AF                        00            .byte	0
01678 05B0                        00            .byte	0
01679 05B1                        00            .byte	0
01680 05B2                        00            .byte	0
01681                                           ! 574  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01682 05B3                        00            .byte	0
01683 05B4                        00            .byte	0
01684 05B5                        00            .byte	0
01685 05B6                        00            .byte	0
01686 05B7                        00            .byte	0
01687 05B8                        00            .byte	0
01688 05B9                        00            .byte	0
01689 05BA                        00            .byte	0
01690                                           ! 575  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01691 05BB                        00            .byte	0
01692 05BC                        00            .byte	0
01693 05BD                        00            .byte	0
01694 05BE                        00            .byte	0
01695 05BF                        00            .byte	0
01696 05C0                        00            .byte	0
01697 05C1                        00            .byte	0
01698 05C2                        00            .byte	0
01699                                           ! 576  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01700 05C3                        00            .byte	0
01701 05C4                        00            .byte	0
01702 05C5                        00            .byte	0
01703 05C6                        00            .byte	0
01704 05C7                        00            .byte	0
01705 05C8                        00            .byte	0
01706 05C9                        00            .byte	0
01707 05CA                        00            .byte	0
01708                                           ! 577 },
01709                                           ! 578 {
01710                                           ! 579  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01711 05CB                        00            .byte	0
01712 05CC                        00            .byte	0
01713 05CD                        00            .byte	0
01714 05CE                        00            .byte	0
01715 05CF                        00            .byte	0
01716 05D0                        00            .byte	0
01717 05D1                        00            .byte	0
01718 05D2                        00            .byte	0
01719                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01720 05D3                        00            .byte	0
01721 05D4                        00            .byte	0
01722 05D5                        00            .byte	0
01723 05D6                        00            .byte	0
01724 05D7                        00            .byte	0
01725 05D8                        00            .byte	0
01726 05D9                        00            .byte	0
01727 05DA                        00            .byte	0
01728                                           ! 581  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01729 05DB                        00            .byte	0
01730 05DC                        00            .byte	0
01731 05DD                        00            .byte	0
01732 05DE                        00            .byte	0
01733 05DF                        00            .byte	0
01734 05E0                        00            .byte	0
01735 05E1                        00            .byte	0
01736 05E2                        00            .byte	0
01737                                           ! 582  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01738 05E3                        00            .byte	0
01739 05E4                        00            .byte	0
01740 05E5                        00            .byte	0
01741 05E6                        00            .byte	0
01742 05E7                        00            .byte	0
01743 05E8                        00            .byte	0
01744 05E9                        00            .byte	0
01745 05EA                        00            .byte	0
01746                                           ! 583  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01747 05EB                        00            .byte	0
01748 05EC                        00            .byte	0
01749 05ED                        00            .byte	0
01750 05EE                        00            .byte	0
01751 05EF                        00            .byte	0
01752 05F0                        00            .byte	0
01753 05F1                        00            .byte	0
01754 05F2                        00            .byte	0
01755                                           ! 584  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01756 05F3                        00            .byte	0
01757 05F4                        00            .byte	0
01758 05F5                        00            .byte	0
01759 05F6                        00            .byte	0
01760 05F7                        00            .byte	0
01761 05F8                        00            .byte	0
01762 05F9                        00            .byte	0
01763 05FA                        00            .byte	0
01764                                           ! 585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01765 05FB                        00            .byte	0
01766 05FC                        00            .byte	0
01767 05FD                        00            .byte	0
01768 05FE                        00            .byte	0
01769 05FF                        00            .byte	0
01770 0600                        00            .byte	0
01771 0601                        00            .byte	0
01772 0602                        00            .byte	0
01773                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01774 0603                        00            .byte	0
01775 0604                        00            .byte	0
01776 0605                        00            .byte	0
01777 0606                        00            .byte	0
01778 0607                        00            .byte	0
01779 0608                        00            .byte	0
01780 0609                        00            .byte	0
01781 060A                        00            .byte	0
01782                                           ! 587 },
01783                                           ! 588 {
01784                                           ! 589  40, 24, 8, 0x00, 0x20,
01785 060B                        28            .byte	$28
01786 060C                        18            .byte	$18
01787 060D                        08            .byte	8
01788 060E                        00            .byte	0
01789 060F                        20            .byte	$20
01790                                           ! 590  0x09, 0x0f, 0x00, 0x06,
01791 0610                        09            .byte	9
01792 0611                        0F            .byte	$F
01793 0612                        00            .byte	0
01794 0613                        06            .byte	6
01795                                           ! 591  0x63,
01796 0614                        63            .byte	$63
01797                                           ! 592  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01798 0615                        2D            .byte	$2D
01799 0616                        27            .byte	$27
01800 0617                        28            .byte	$28
01801 0618                        90            .byte	$90
01802 0619                        2B            .byte	$2B
01803 061A                        80            .byte	$80
01804 061B                        BF            .byte	$BF
01805 061C                        1F            .byte	$1F
01806                                           ! 593  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01807 061D                        00            .byte	0
01808 061E                        C0            .byte	$C0
01809 061F                        00            .byte	0
01810 0620                        00            .byte	0
01811 0621                        00            .byte	0
01812 0622                        00            .byte	0
01813 0623                        00            .byte	0
01814 0624                        00            .byte	0
01815                                           ! 594  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01816 0625                        9C            .byte	$9C
01817 0626                        8E            .byte	$8E
01818 0627                        8F            .byte	$8F
01819 0628                        14            .byte	$14
01820 0629                        00            .byte	0
01821 062A                        96            .byte	$96
01822 062B                        B9            .byte	$B9
01823 062C                        E3            .byte	$E3
01824                                           ! 595  0xff,
01825 062D                        FF            .byte	$FF
01826                                           ! 596  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01827 062E                        00            .byte	0
01828 062F                        01            .byte	1
01829 0630                        02            .byte	2
01830 0631                        03            .byte	3
01831 0632                        04            .byte	4
01832 0633                        05            .byte	5
01833 0634                        06            .byte	6
01834 0635                        07            .byte	7
01835                                           ! 597  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01836 0636                        10            .byte	$10
01837 0637                        11            .byte	$11
01838 0638                        12            .byte	$12
01839 0639                        13            .byte	$13
01840 063A                        14            .byte	$14
01841 063B                        15            .byte	$15
01842 063C                        16            .byte	$16
01843 063D                        17            .byte	$17
01844                                           ! 598  0x01, 0x00, 0x0f, 0x00,
01845 063E                        01            .byte	1
01846 063F                        00            .byte	0
01847 0640                        0F            .byte	$F
01848 0641                        00            .byte	0
01849                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0
01850 0642                        00            .byte	0
01851 0643                        00            .byte	0
01852 0644                        00            .byte	0
01853 0645                        00            .byte	0
01854 0646                        00            .byte	0
01855                                           ! 599 x00, 0x05, 0x0f, 0xff,
01856 0647                        00            .byte	0
01857 0648                        05            .byte	5
01858 0649                        0F            .byte	$F
01859 064A                        FF            .byte	$FF
01860                                           ! 600 },
01861                                           ! 601 {
01862                                           ! 602  80, 24, 8, 0x00, 0x40,
01863 064B                        50            .byte	$50
01864 064C                        18            .byte	$18
01865 064D                        08            .byte	8
01866 064E                        00            .byte	0
01867 064F                        40            .byte	$40
01868                                           ! 603  0x01, 0x0f, 0x00, 0x06,
01869 0650                        01            .byte	1
01870 0651                        0F            .byte	$F
01871 0652                        00            .byte	0
01872 0653                        06            .byte	6
01873                                           ! 604  0x63,
01874 0654                        63            .byte	$63
01875                                           ! 605  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01876 0655                        5F            .byte	$5F
01877 0656                        4F            .byte	$4F
01878 0657                        50            .byte	$50
01879 0658                        82            .byte	$82
01880 0659                        54            .byte	$54
01881 065A                        80            .byte	$80
01882 065B                        BF            .byte	$BF
01883 065C                        1F            .byte	$1F
01884                                           ! 606  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01885 065D                        00            .byte	0
01886 065E                        C0            .byte	$C0
01887 065F                        00            .byte	0
01888 0660                        00            .byte	0
01889 0661                        00            .byte	0
01890 0662                        00            .byte	0
01891 0663                        00            .byte	0
01892 0664                        00            .byte	0
01893                                           ! 607  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01894 0665                        9C            .byte	$9C
01895 0666                        8E            .byte	$8E
01896 0667                        8F            .byte	$8F
01897 0668                        28            .byte	$28
01898 0669                        00            .byte	0
01899 066A                        96            .byte	$96
01900 066B                        B9            .byte	$B9
01901 066C                        E3            .byte	$E3
01902                                           ! 608  0xff,
01903 066D                        FF            .byte	$FF
01904                                           ! 609  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01905 066E                        00            .byte	0
01906 066F                        01            .byte	1
01907 0670                        02            .byte	2
01908 0671                        03            .byte	3
01909 0672                        04            .byte	4
01910 0673                        05            .byte	5
01911 0674                        06            .byte	6
01912 0675                        07            .byte	7
01913                                           ! 610  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01914 0676                        10            .byte	$10
01915 0677                        11            .byte	$11
01916 0678                        12            .byte	$12
01917 0679                        13            .byte	$13
01918 067A                        14            .byte	$14
01919 067B                        15            .byte	$15
01920 067C                        16            .byte	$16
01921 067D                        17            .byte	$17
01922                                           ! 611  0x01, 0x00, 0x0f, 0x00,
01923 067E                        01            .byte	1
01924 067F                        00            .byte	0
01925 0680                        0F            .byte	$F
01926 0681                        00            .byte	0
01927                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01928 0682                        00            .byte	0
01929 0683                        00            .byte	0
01930 0684                        00            .byte	0
01931 0685                        00            .byte	0
01932 0686                        00            .byte	0
01933 0687                        00            .byte	0
01934 0688                        05            .byte	5
01935 0689                        0F            .byte	$F
01936 068A                        FF            .byte	$FF
01937                                           ! 613 },
01938                                           ! 614 {
01939                                           ! 615  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01940 068B                        00            .byte	0
01941 068C                        00            .byte	0
01942 068D                        00            .byte	0
01943 068E                        00            .byte	0
01944 068F                        00            .byte	0
01945 0690                        00            .byte	0
01946 0691                        00            .byte	0
01947 0692                        00            .byte	0
01948                                           ! 616  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01949 0693                        00            .byte	0
01950 0694                        00            .byte	0
01951 0695                        00            .byte	0
01952 0696                        00            .byte	0
01953 0697                        00            .byte	0
01954 0698                        00            .byte	0
01955 0699                        00            .byte	0
01956 069A                        00            .byte	0
01957                                           ! 617  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01958 069B                        00            .byte	0
01959 069C                        00            .byte	0
01960 069D                        00            .byte	0
01961 069E                        00            .byte	0
01962 069F                        00            .byte	0
01963 06A0                        00            .byte	0
01964 06A1                        00            .byte	0
01965 06A2                        00            .byte	0
01966                                           ! 618  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01967 06A3                        00            .byte	0
01968 06A4                        00            .byte	0
01969 06A5                        00            .byte	0
01970 06A6                        00            .byte	0
01971 06A7                        00            .byte	0
01972 06A8                        00            .byte	0
01973 06A9                        00            .byte	0
01974 06AA                        00            .byte	0
01975                                           ! 619  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01976 06AB                        00            .byte	0
01977 06AC                        00            .byte	0
01978 06AD                        00            .byte	0
01979 06AE                        00            .byte	0
01980 06AF                        00            .byte	0
01981 06B0                        00            .byte	0
01982 06B1                        00            .byte	0
01983 06B2                        00            .byte	0
01984                                           ! 620  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01985 06B3                        00            .byte	0
01986 06B4                        00            .byte	0
01987 06B5                        00            .byte	0
01988 06B6                        00            .byte	0
01989 06B7                        00            .byte	0
01990 06B8                        00            .byte	0
01991 06B9                        00            .byte	0
01992 06BA                        00            .byte	0
01993                                           ! 621  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01994 06BB                        00            .byte	0
01995 06BC                        00            .byte	0
01996 06BD                        00            .byte	0
01997 06BE                        00            .byte	0
01998 06BF                        00            .byte	0
01999 06C0                        00            .byte	0
02000 06C1                        00            .byte	0
02001 06C2                        00            .byte	0
02002                                           ! 622  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02003 06C3                        00            .byte	0
02004 06C4                        00            .byte	0
02005 06C5                        00            .byte	0
02006 06C6                        00            .byte	0
02007 06C7                        00            .byte	0
02008 06C8                        00            .byte	0
02009 06C9                        00            .byte	0
02010 06CA                        00            .byte	0
02011                                           ! 623 },
02012                                           ! 624 {
02013                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02014 06CB                        00            .byte	0
02015 06CC                        00            .byte	0
02016 06CD                        00            .byte	0
02017 06CE                        00            .byte	0
02018 06CF                        00            .byte	0
02019 06D0                        00            .byte	0
02020 06D1                        00            .byte	0
02021 06D2                        00            .byte	0
02022                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02023 06D3                        00            .byte	0
02024 06D4                        00            .byte	0
02025 06D5                        00            .byte	0
02026 06D6                        00            .byte	0
02027 06D7                        00            .byte	0
02028 06D8                        00            .byte	0
02029 06D9                        00            .byte	0
02030 06DA                        00            .byte	0
02031                                           ! 627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02032 06DB                        00            .byte	0
02033 06DC                        00            .byte	0
02034 06DD                        00            .byte	0
02035 06DE                        00            .byte	0
02036 06DF                        00            .byte	0
02037 06E0                        00            .byte	0
02038 06E1                        00            .byte	0
02039 06E2                        00            .byte	0
02040                                           ! 628  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02041 06E3                        00            .byte	0
02042 06E4                        00            .byte	0
02043 06E5                        00            .byte	0
02044 06E6                        00            .byte	0
02045 06E7                        00            .byte	0
02046 06E8                        00            .byte	0
02047 06E9                        00            .byte	0
02048 06EA                        00            .byte	0
02049                                           ! 629  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02050 06EB                        00            .byte	0
02051 06EC                        00            .byte	0
02052 06ED                        00            .byte	0
02053 06EE                        00            .byte	0
02054 06EF                        00            .byte	0
02055 06F0                        00            .byte	0
02056 06F1                        00            .byte	0
02057 06F2                        00            .byte	0
02058                                           ! 630  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02059 06F3                        00            .byte	0
02060 06F4                        00            .byte	0
02061 06F5                        00            .byte	0
02062 06F6                        00            .byte	0
02063 06F7                        00            .byte	0
02064 06F8                        00            .byte	0
02065 06F9                        00            .byte	0
02066 06FA                        00            .byte	0
02067                                           ! 631  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02068 06FB                        00            .byte	0
02069 06FC                        00            .byte	0
02070 06FD                        00            .byte	0
02071 06FE                        00            .byte	0
02072 06FF                        00            .byte	0
02073 0700                        00            .byte	0
02074 0701                        00            .byte	0
02075 0702                        00            .byte	0
02076                                           ! 632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02077 0703                        00            .byte	0
02078 0704                        00            .byte	0
02079 0705                        00            .byte	0
02080 0706                        00            .byte	0
02081 0707                        00            .byte	0
02082 0708                        00            .byte	0
02083 0709                        00            .byte	0
02084 070A                        00            .byte	0
02085                                           ! 633 },
02086                                           ! 634 {
02087                                           ! 635  80, 24, 14, 0x00, 0x80,
02088 070B                        50            .byte	$50
02089 070C                        18            .byte	$18
02090 070D                        0E            .byte	$E
02091 070E                        00            .byte	0
02092 070F                        80            .byte	$80
02093                                           ! 636  0x01, 0x0f, 0x00, 0x06,
02094 0710                        01            .byte	1
02095 0711                        0F            .byte	$F
02096 0712                        00            .byte	0
02097 0713                        06            .byte	6
02098                                           ! 637  0xa3,
02099 0714                        A3            .byte	$A3
02100                                           ! 638  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02101 0715                        5F            .byte	$5F
02102 0716                        4F            .byte	$4F
02103 0717                        50            .byte	$50
02104 0718                        82            .byte	$82
02105 0719                        54            .byte	$54
02106 071A                        80            .byte	$80
02107 071B                        BF            .byte	$BF
02108 071C                        1F            .byte	$1F
02109                                           ! 639  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02110 071D                        00            .byte	0
02111 071E                        40            .byte	$40
02112 071F                        00            .byte	0
02113 0720                        00            .byte	0
02114 0721                        00            .byte	0
02115 0722                        00            .byte	0
02116 0723                        00            .byte	0
02117 0724                        00            .byte	0
02118                                           ! 640  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02119 0725                        83            .byte	$83
02120 0726                        85            .byte	$85
02121 0727                        5D            .byte	$5D
02122 0728                        28            .byte	$28
02123 0729                        0F            .byte	$F
02124 072A                        63            .byte	$63
02125 072B                        BA            .byte	$BA
02126 072C                        E3            .byte	$E3
02127                                           ! 641  0xff,
02128 072D                        FF            .byte	$FF
02129                                           ! 642  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02130 072E                        00            .byte	0
02131 072F                        08            .byte	8
02132 0730                        00            .byte	0
02133 0731                        00            .byte	0
02134 0732                        18            .byte	$18
02135 0733                        18            .byte	$18
02136 0734                        00            .byte	0
02137 0735                        00            .byte	0
02138                                           ! 643  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02139 0736                        00            .byte	0
02140 0737                        08            .byte	8
02141 0738                        00            .byte	0
02142 0739                        00            .byte	0
02143 073A                        00            .byte	0
02144 073B                        18            .byte	$18
02145 073C                        00            .byte	0
02146 073D                        00            .byte	0
02147                                           ! 644  0x01, 0x00, 0x01, 0x00,
02148 073E                        01            .byte	1
02149 073F                        00            .byte	0
02150 0740                        01            .byte	1
02151 0741                        00            .byte	0
02152                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02153 0742                        00            .byte	0
02154 0743                        00            .byte	0
02155 0744                        00            .byte	0
02156 0745                        00            .byte	0
02157 0746                        00            .byte	0
02158 0747                        00            .byte	0
02159 0748                        05            .byte	5
02160 0749                        0F            .byte	$F
02161 074A                        FF            .byte	$FF
02162                                           ! 646 },
02163                                           ! 647 {
02164                                           ! 648  80, 24, 14, 0x00, 0x80,
02165 074B                        50            .byte	$50
02166 074C                        18            .byte	$18
02167 074D                        0E            .byte	$E
02168 074E                        00            .byte	0
02169 074F                        80            .byte	$80
02170                                           ! 649  0x01, 0x0f, 0x00, 0x06,
02171 0750                        01            .byte	1
02172 0751                        0F            .byte	$F
02173 0752                        00            .byte	0
02174 0753                        06            .byte	6
02175                                           ! 650  0xa3,
02176 0754                        A3            .byte	$A3
02177                                           ! 651  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02178 0755                        5F            .byte	$5F
02179 0756                        4F            .byte	$4F
02180 0757                        50            .byte	$50
02181 0758                        82            .byte	$82
02182 0759                        54            .byte	$54
02183 075A                        80            .byte	$80
02184 075B                        BF            .byte	$BF
02185 075C                        1F            .byte	$1F
02186                                           ! 652  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02187 075D                        00            .byte	0
02188 075E                        40            .byte	$40
02189 075F                        00            .byte	0
02190 0760                        00            .byte	0
02191 0761                        00            .byte	0
02192 0762                        00            .byte	0
02193 0763                        00            .byte	0
02194 0764                        00            .byte	0
02195                                           ! 653  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02196 0765                        83            .byte	$83
02197 0766                        85            .byte	$85
02198 0767                        5D            .byte	$5D
02199 0768                        28            .byte	$28
02200 0769                        0F            .byte	$F
02201 076A                        63            .byte	$63
02202 076B                        BA            .byte	$BA
02203 076C                        E3            .byte	$E3
02204                                           ! 654  0xff,
02205 076D                        FF            .byte	$FF
02206                                           ! 655  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02207 076E                        00            .byte	0
02208 076F                        01            .byte	1
02209 0770                        02            .byte	2
02210 0771                        03            .byte	3
02211 0772                        04            .byte	4
02212 0773                        05            .byte	5
02213 0774                        14            .byte	$14
02214 0775                        07            .byte	7
02215                                           ! 656  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02216 0776                        38            .byte	$38
02217 0777                        39            .byte	$39
02218 0778                        3A            .byte	$3A
02219 0779                        3B            .byte	$3B
02220 077A                        3C            .byte	$3C
02221 077B                        3D            .byte	$3D
02222 077C                        3E            .byte	$3E
02223 077D                        3F            .byte	$3F
02224                                           ! 657  0x01, 0x00, 0x0f, 0x00,
02225 077E                        01            .byte	1
02226 077F                        00            .byte	0
02227 0780                        0F            .byte	$F
02228 0781                        00            .byte	0
02229                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02230 0782                        00            .byte	0
02231 0783                        00            .byte	0
02232 0784                        00            .byte	0
02233 0785                        00            .byte	0
02234 0786                        00            .byte	0
02235 0787                        00            .byte	0
02236 0788                        05            .byte	5
02237 0789                        0F            .byte	$F
02238 078A                        FF            .byte	$FF
02239                                           ! 659 },
02240                                           ! 660 {
02241                                           ! 661  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
02242 078B                        00            .byte	0
02243 078C                        00            .byte	0
02244 078D                        00            .byte	0
02245 078E                        00            .byte	0
02246 078F                        00            .byte	0
02247 0790                        00            .byte	0
02248 0791                        00            .byte	0
02249                                           ! 661 00,
02250 0792                        00            .byte	0
02251                                           ! 662  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02252 0793                        00            .byte	0
02253 0794                        00            .byte	0
02254 0795                        00            .byte	0
02255 0796                        00            .byte	0
02256 0797                        00            .byte	0
02257 0798                        00            .byte	0
02258 0799                        00            .byte	0
02259 079A                        00            .byte	0
02260                                           ! 663  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02261 079B                        00            .byte	0
02262 079C                        00            .byte	0
02263 079D                        00            .byte	0
02264 079E                        00            .byte	0
02265 079F                        00            .byte	0
02266 07A0                        00            .byte	0
02267 07A1                        00            .byte	0
02268 07A2                        00            .byte	0
02269                                           ! 664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02270 07A3                        00            .byte	0
02271 07A4                        00            .byte	0
02272 07A5                        00            .byte	0
02273 07A6                        00            .byte	0
02274 07A7                        00            .byte	0
02275 07A8                        00            .byte	0
02276 07A9                        00            .byte	0
02277 07AA                        00            .byte	0
02278                                           ! 665  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02279 07AB                        00            .byte	0
02280 07AC                        00            .byte	0
02281 07AD                        00            .byte	0
02282 07AE                        00            .byte	0
02283 07AF                        00            .byte	0
02284 07B0                        00            .byte	0
02285 07B1                        00            .byte	0
02286 07B2                        00            .byte	0
02287                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02288 07B3                        00            .byte	0
02289 07B4                        00            .byte	0
02290 07B5                        00            .byte	0
02291 07B6                        00            .byte	0
02292 07B7                        00            .byte	0
02293 07B8                        00            .byte	0
02294 07B9                        00            .byte	0
02295 07BA                        00            .byte	0
02296                                           ! 667  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02297 07BB                        00            .byte	0
02298 07BC                        00            .byte	0
02299 07BD                        00            .byte	0
02300 07BE                        00            .byte	0
02301 07BF                        00            .byte	0
02302 07C0                        00            .byte	0
02303 07C1                        00            .byte	0
02304 07C2                        00            .byte	0
02305                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02306 07C3                        00            .byte	0
02307 07C4                        00            .byte	0
02308 07C5                        00            .byte	0
02309 07C6                        00            .byte	0
02310 07C7                        00            .byte	0
02311 07C8                        00            .byte	0
02312 07C9                        00            .byte	0
02313 07CA                        00            .byte	0
02314                                           ! 669 },
02315                                           ! 670 {
02316                                           ! 671  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02317 07CB                        00            .byte	0
02318 07CC                        00            .byte	0
02319 07CD                        00            .byte	0
02320 07CE                        00            .byte	0
02321 07CF                        00            .byte	0
02322 07D0                        00            .byte	0
02323 07D1                        00            .byte	0
02324 07D2                        00            .byte	0
02325                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02326 07D3                        00            .byte	0
02327 07D4                        00            .byte	0
02328 07D5                        00            .byte	0
02329 07D6                        00            .byte	0
02330 07D7                        00            .byte	0
02331 07D8                        00            .byte	0
02332 07D9                        00            .byte	0
02333 07DA                        00            .byte	0
02334                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02335 07DB                        00            .byte	0
02336 07DC                        00            .byte	0
02337 07DD                        00            .byte	0
02338 07DE                        00            .byte	0
02339 07DF                        00            .byte	0
02340 07E0                        00            .byte	0
02341 07E1                        00            .byte	0
02342 07E2                        00            .byte	0
02343                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02344 07E3                        00            .byte	0
02345 07E4                        00            .byte	0
02346 07E5                        00            .byte	0
02347 07E6                        00            .byte	0
02348 07E7                        00            .byte	0
02349 07E8                        00            .byte	0
02350 07E9                        00            .byte	0
02351 07EA                        00            .byte	0
02352                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02353 07EB                        00            .byte	0
02354 07EC                        00            .byte	0
02355 07ED                        00            .byte	0
02356 07EE                        00            .byte	0
02357 07EF                        00            .byte	0
02358 07F0                        00            .byte	0
02359 07F1                        00            .byte	0
02360 07F2                        00            .byte	0
02361                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02362 07F3                        00            .byte	0
02363 07F4                        00            .byte	0
02364 07F5                        00            .byte	0
02365 07F6                        00            .byte	0
02366 07F7                        00            .byte	0
02367 07F8                        00            .byte	0
02368 07F9                        00            .byte	0
02369 07FA                        00            .byte	0
02370                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02371 07FB                        00            .byte	0
02372 07FC                        00            .byte	0
02373 07FD                        00            .byte	0
02374 07FE                        00            .byte	0
02375 07FF                        00            .byte	0
02376 0800                        00            .byte	0
02377 0801                        00            .byte	0
02378 0802                        00            .byte	0
02379                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02380 0803                        00            .byte	0
02381 0804                        00            .byte	0
02382 0805                        00            .byte	0
02383 0806                        00            .byte	0
02384 0807                        00            .byte	0
02385 0808                        00            .byte	0
02386 0809                        00            .byte	0
02387 080A                        00            .byte	0
02388                                           ! 679 },
02389                                           ! 680 {
02390                                           ! 681  120, 49, 16, 0x00, 0x08,
02391 080B                        78            .byte	$78
02392 080C                        31            .byte	$31
02393 080D                        10            .byte	$10
02394 080E                        00            .byte	0
02395 080F                        08            .byte	8
02396                                           ! 682  0x08, 0x03, 0x00, 0x02,
02397 0810                        08            .byte	8
02398 0811                        03            .byte	3
02399 0812                        00            .byte	0
02400 0813                        02            .byte	2
02401                                           ! 683  0x67,
02402 0814                        67            .byte	$67
02403                                           ! 684  0x87, 0x77, 0x78, 0x90, 0x2b, 0xa0, 0xd0, 0x7f,
02404 0815                        87            .byte	$87
02405 0816                        77            .byte	$77
02406 0817                        78            .byte	$78
02407 0818                        90            .byte	$90
02408 0819                        2B            .byte	$2B
02409 081A                        A0            .byte	$A0
02410 081B                        D0            .byte	$D0
02411 081C                        7F            .byte	$7F
02412                                           ! 685  0x00, 0x07, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02413 081D                        00            .byte	0
02414 081E                        07            .byte	7
02415 081F                        0D            .byte	$D
02416 0820                        0E            .byte	$E
02417 0821                        00            .byte	0
02418 0822                        00            .byte	0
02419 0823                        00            .byte	0
02420 0824                        00            .byte	0
02421                                           ! 686  0x9c, 0x8e, 0xd0, 0x3c , 0x1f, 0x96, 0xb9, 0xa3,
02422 0825                        9C            .byte	$9C
02423 0826                        8E            .byte	$8E
02424 0827                        D0            .byte	$D0
02425 0828                        3C            .byte	$3C
02426 0829                        1F            .byte	$1F
02427 082A                        96            .byte	$96
02428 082B                        B9            .byte	$B9
02429 082C                        A3            .byte	$A3
02430                                           ! 687  0xff,
02431 082D                        FF            .byte	$FF
02432                                           ! 688  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02433 082E                        00            .byte	0
02434 082F                        01            .byte	1
02435 0830                        02            .byte	2
02436 0831                        03            .byte	3
02437 0832                        04            .byte	4
02438 0833                        05            .byte	5
02439 0834                        14            .byte	$14
02440 0835                        07            .byte	7
02441                                           ! 689  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02442 0836                        38            .byte	$38
02443 0837                        39            .byte	$39
02444 0838                        3A            .byte	$3A
02445 0839                        3B            .byte	$3B
02446 083A                        3C            .byte	$3C
02447 083B                        3D            .byte	$3D
02448 083C                        3E            .byte	$3E
02449 083D                        3F            .byte	$3F
02450                                           ! 690  0x0c, 0x00, 0x0f, 0x08,
02451 083E                        0C            .byte	$C
02452 083F                        00            .byte	0
02453 0840                        0F            .byte	$F
02454 0841                        08            .byte	8
02455                                           ! 691  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02456 0842                        00            .byte	0
02457 0843                        00            .byte	0
02458 0844                        00            .byte	0
02459 0845                        00            .byte	0
02460 0846                        00            .byte	0
02461 0847                        10            .byte	$10
02462 0848                        0E            .byte	$E
02463 0849                        0F            .byte	$F
02464 084A                        FF            .byte	$FF
02465                                           ! 692 },
02466                                           ! 693 {
02467                                           ! 694     80, 24, 14, 0x00, 0x10,
02468 084B                        50            .byte	$50
02469 084C                        18            .byte	$18
02470 084D                        0E            .byte	$E
02471 084E                        00            .byte	0
02472 084F                        10            .byte	$10
02473                                           ! 695     0x00, 0x03, 0x00, 0x02,
02474 0850                        00            .byte	0
02475 0851                        03            .byte	3
02476 0852                        00            .byte	0
02477 0853                        02            .byte	2
02478                                           ! 696     0x67,
02479 0854                        67            .byte	$67
02480                                           ! 697     0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02481 0855                        5F            .byte	$5F
02482 0856                        4F            .byte	$4F
02483 0857                        50            .byte	$50
02484 0858                        82            .byte	$82
02485 0859                        55            .byte	$55
02486 085A                        81            .byte	$81
02487 085B                        BF            .byte	$BF
02488 085C                        1F            .byte	$1F
02489                                           ! 698     0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02490 085D                        00            .byte	0
02491 085E                        4F            .byte	$4F
02492 085F                        0D            .byte	$D
02493 0860                        0E            .byte	$E
02494 0861                        00            .byte	0
02495 0862                        00            .byte	0
02496 0863                        00            .byte	0
02497 0864                        00            .byte	0
02498                                           ! 699     0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02499 0865                        9C            .byte	$9C
02500 0866                        8E            .byte	$8E
02501 0867                        8F            .byte	$8F
02502 0868                        28            .byte	$28
02503 0869                        1F            .byte	$1F
02504 086A                        96            .byte	$96
02505 086B                        B9            .byte	$B9
02506 086C                        A3            .byte	$A3
02507                                           ! 700     0xff,
02508 086D                        FF            .byte	$FF
02509                                           ! 701     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02510 086E                        00            .byte	0
02511 086F                        01            .byte	1
02512 0870                        02            .byte	2
02513 0871                        03            .byte	3
02514 0872                        04            .byte	4
02515 0873                        05            .byte	5
02516 0874                        14            .byte	$14
02517 0875                        07            .byte	7
02518                                           ! 702     0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02519 0876                        38            .byte	$38
02520 0877                        39            .byte	$39
02521 0878                        3A            .byte	$3A
02522 0879                        3B            .byte	$3B
02523 087A                        3C            .byte	$3C
02524 087B                        3D            .byte	$3D
02525 087C                        3E            .byte	$3E
02526 087D                        3F            .byte	$3F
02527                                           ! 703     0x0c, 0x00, 0x0f, 0x08,
02528 087E                        0C            .byte	$C
02529 087F                        00            .byte	0
02530 0880                        0F            .byte	$F
02531 0881                        08            .byte	8
02532                                           ! 704     0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02533 0882                        00            .byte	0
02534 0883                        00            .byte	0
02535 0884                        00            .byte	0
02536 0885                        00            .byte	0
02537 0886                        00            .byte	0
02538 0887                        10            .byte	$10
02539 0888                        0E            .byte	$E
02540 0889                        0F            .byte	$F
02541 088A                        FF            .byte	$FF
02542                                           ! 705 },
02543                                           ! 706 {
02544                                           ! 707  40, 24, 16, 0x00, 0x08,
02545 088B                        28            .byte	$28
02546 088C                        18            .byte	$18
02547 088D                        10            .byte	$10
02548 088E                        00            .byte	0
02549 088F                        08            .byte	8
02550                                           ! 708  0x08, 0x03, 0x00, 0x02,
02551 0890                        08            .byte	8
02552 0891                        03            .byte	3
02553 0892                        00            .byte	0
02554 0893                        02            .byte	2
02555                                           ! 709  0x67,
02556 0894                        67            .byte	$67
02557                                           ! 710  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02558 0895                        2D            .byte	$2D
02559 0896                        27            .byte	$27
02560 0897                        28            .byte	$28
02561 0898                        90            .byte	$90
02562 0899                        2B            .byte	$2B
02563 089A                        A0            .byte	$A0
02564 089B                        BF            .byte	$BF
02565 089C                        1F            .byte	$1F
02566                                           ! 711  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02567 089D                        00            .byte	0
02568 089E                        4F            .byte	$4F
02569 089F                        0D            .byte	$D
02570 08A0                        0E            .byte	$E
02571 08A1                        00            .byte	0
02572 08A2                        00            .byte	0
02573 08A3                        00            .byte	0
02574 08A4                        00            .byte	0
02575                                           ! 712  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02576 08A5                        9C            .byte	$9C
02577 08A6                        8E            .byte	$8E
02578 08A7                        8F            .byte	$8F
02579 08A8                        14            .byte	$14
02580 08A9                        1F            .byte	$1F
02581 08AA                        96            .byte	$96
02582 08AB                        B9            .byte	$B9
02583 08AC                        A3            .byte	$A3
02584                                           ! 713  0xff,
02585 08AD                        FF            .byte	$FF
02586                                           ! 714  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02587 08AE                        00            .byte	0
02588 08AF                        01            .byte	1
02589 08B0                        02            .byte	2
02590 08B1                        03            .byte	3
02591 08B2                        04            .byte	4
02592 08B3                        05            .byte	5
02593 08B4                        14            .byte	$14
02594 08B5                        07            .byte	7
02595                                           ! 715  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02596 08B6                        38            .byte	$38
02597 08B7                        39            .byte	$39
02598 08B8                        3A            .byte	$3A
02599 08B9                        3B            .byte	$3B
02600 08BA                        3C            .byte	$3C
02601 08BB                        3D            .byte	$3D
02602 08BC                        3E            .byte	$3E
02603 08BD                        3F            .byte	$3F
02604                                           ! 716  0x0c, 0x00, 0x0f, 0x08,
02605 08BE                        0C            .byte	$C
02606 08BF                        00            .byte	0
02607 08C0                        0F            .byte	$F
02608 08C1                        08            .byte	8
02609                                           ! 717  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02610 08C2                        00            .byte	0
02611 08C3                        00            .byte	0
02612 08C4                        00            .byte	0
02613 08C5                        00            .byte	0
02614 08C6                        00            .byte	0
02615 08C7                        10            .byte	$10
02616 08C8                        0E            .byte	$E
02617 08C9                        0F            .byte	$F
02618 08CA                        FF            .byte	$FF
02619                                           ! 718 },
02620                                           ! 719 {
02621                                           ! 720  80, 24, 16, 0x00, 0x10,
02622 08CB                        50            .byte	$50
02623 08CC                        18            .byte	$18
02624 08CD                        10            .byte	$10
02625 08CE                        00            .byte	0
02626 08CF                        10            .byte	$10
02627                                           ! 721  0x00, 0x03, 0x00, 0x02,
02628 08D0                        00            .byte	0
02629 08D1                        03            .byte	3
02630 08D2                        00            .byte	0
02631 08D3                        02            .byte	2
02632                                           ! 722  0x67,
02633 08D4                        67            .byte	$67
02634                                           ! 723  0x5f, 0x4f, 0x50, 0x82, 
02635 08D5                        5F            .byte	$5F
02636 08D6                        4F            .byte	$4F
02637 08D7                        50            .byte	$50
02638 08D8                        82            .byte	$82
02639                                           ! 723 0x55, 0x81, 0xbf, 0x1f,
02640 08D9                        55            .byte	$55
02641 08DA                        81            .byte	$81
02642 08DB                        BF            .byte	$BF
02643 08DC                        1F            .byte	$1F
02644                                           ! 724  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02645 08DD                        00            .byte	0
02646 08DE                        4F            .byte	$4F
02647 08DF                        0D            .byte	$D
02648 08E0                        0E            .byte	$E
02649 08E1                        00            .byte	0
02650 08E2                        00            .byte	0
02651 08E3                        00            .byte	0
02652 08E4                        00            .byte	0
02653                                           ! 725  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02654 08E5                        9C            .byte	$9C
02655 08E6                        8E            .byte	$8E
02656 08E7                        8F            .byte	$8F
02657 08E8                        28            .byte	$28
02658 08E9                        1F            .byte	$1F
02659 08EA                        96            .byte	$96
02660 08EB                        B9            .byte	$B9
02661 08EC                        A3            .byte	$A3
02662                                           ! 726  0xff,
02663 08ED                        FF            .byte	$FF
02664                                           ! 727  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02665 08EE                        00            .byte	0
02666 08EF                        01            .byte	1
02667 08F0                        02            .byte	2
02668 08F1                        03            .byte	3
02669 08F2                        04            .byte	4
02670 08F3                        05            .byte	5
02671 08F4                        14            .byte	$14
02672 08F5                        07            .byte	7
02673                                           ! 728  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02674 08F6                        38            .byte	$38
02675 08F7                        39            .byte	$39
02676 08F8                        3A            .byte	$3A
02677 08F9                        3B            .byte	$3B
02678 08FA                        3C            .byte	$3C
02679 08FB                        3D            .byte	$3D
02680 08FC                        3E            .byte	$3E
02681 08FD                        3F            .byte	$3F
02682                                           ! 729  0x0c, 0x00, 0x0f, 0x08,
02683 08FE                        0C            .byte	$C
02684 08FF                        00            .byte	0
02685 0900                        0F            .byte	$F
02686 0901                        08            .byte	8
02687                                           ! 730  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02688 0902                        00            .byte	0
02689 0903                        00            .byte	0
02690 0904                        00            .byte	0
02691 0905                        00            .byte	0
02692 0906                        00            .byte	0
02693 0907                        10            .byte	$10
02694 0908                        0E            .byte	$E
02695 0909                        0F            .byte	$F
02696 090A                        FF            .byte	$FF
02697                                           ! 731 },
02698                                           ! 732 {
02699                                           ! 733  80, 24, 16, 0x00, 0x10,
02700 090B                        50            .byte	$50
02701 090C                        18            .byte	$18
02702 090D                        10            .byte	$10
02703 090E                        00            .byte	0
02704 090F                        10            .byte	$10
02705                                           ! 734  0x00, 0x03, 0x00, 0x02,
02706 0910                        00            .byte	0
02707 0911                        03            .byte	3
02708 0912                        00            .byte	0
02709 0913                        02            .byte	2
02710                                           ! 735  0x66,
02711 0914                        66            .byte	$66
02712                                           ! 736  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02713 0915                        5F            .byte	$5F
02714 0916                        4F            .byte	$4F
02715 0917                        50            .byte	$50
02716 0918                        82            .byte	$82
02717 0919                        55            .byte	$55
02718 091A                        81            .byte	$81
02719 091B                        BF            .byte	$BF
02720 091C                        1F            .byte	$1F
02721                                           ! 737  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02722 091D                        00            .byte	0
02723 091E                        4F            .byte	$4F
02724 091F                        0D            .byte	$D
02725 0920                        0E            .byte	$E
02726 0921                        00            .byte	0
02727 0922                        00            .byte	0
02728 0923                        00            .byte	0
02729 0924                        00            .byte	0
02730                                           ! 738  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02731 0925                        9C            .byte	$9C
02732 0926                        8E            .byte	$8E
02733 0927                        8F            .byte	$8F
02734 0928                        28            .byte	$28
02735 0929                        0F            .byte	$F
02736 092A                        96            .byte	$96
02737 092B                        B9            .byte	$B9
02738 092C                        A3            .byte	$A3
02739                                           ! 739  0xff,
02740 092D                        FF            .byte	$FF
02741                                           ! 740  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02742 092E                        00            .byte	0
02743 092F                        08            .byte	8
02744 0930                        08            .byte	8
02745 0931                        08            .byte	8
02746 0932                        08            .byte	8
02747 0933                        08            .byte	8
02748 0934                        08            .byte	8
02749 0935                        08            .byte	8
02750                                           ! 741  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02751 0936                        10            .byte	$10
02752 0937                        18            .byte	$18
02753 0938                        18            .byte	$18
02754 0939                        18            .byte	$18
02755 093A                        18            .byte	$18
02756 093B                        18            .byte	$18
02757 093C                        18            .byte	$18
02758 093D                        18            .byte	$18
02759                                           ! 742  0x0e, 0x00, 0x0f, 0x08,
02760 093E                        0E            .byte	$E
02761 093F                        00            .byte	0
02762 0940                        0F            .byte	$F
02763 0941                        08            .byte	8
02764                                           ! 743  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02765 0942                        00            .byte	0
02766 0943                        00            .byte	0
02767 0944                        00            .byte	0
02768 0945                        00            .byte	0
02769 0946                        00            .byte	0
02770 0947                        10            .byte	$10
02771 0948                        0A            .byte	$A
02772 0949                        0F            .byte	$F
02773 094A                        FF            .byte	$FF
02774                                           ! 744 },
02775                                           ! 745 {
02776                                           ! 746  80, 29, 16, 0x00, 0xa0,
02777 094B                        50            .byte	$50
02778 094C                        1D            .byte	$1D
02779 094D                        10            .byte	$10
02780 094E                        00            .byte	0
02781 094F                        A0            .byte	$A0
02782                                           ! 747  0x01, 0x0f, 0x00, 0x06,
02783 0950                        01            .byte	1
02784 0951                        0F            .byte	$F
02785 0952                        00            .byte	0
02786 0953                        06            .byte	6
02787                                           ! 748  0xe3,
02788 0954                        E3            .byte	$E3
02789                                           ! 749  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02790 0955                        5F            .byte	$5F
02791 0956                        4F            .byte	$4F
02792 0957                        50            .byte	$50
02793 0958                        82            .byte	$82
02794 0959                        54            .byte	$54
02795 095A                        80            .byte	$80
02796 095B                        0B            .byte	$B
02797 095C                        3E            .byte	$3E
02798                                           ! 750  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02799 095D                        00            .byte	0
02800 095E                        40            .byte	$40
02801 095F                        00            .byte	0
02802 0960                        00            .byte	0
02803 0961                        00            .byte	0
02804 0962                        00            .byte	0
02805 0963                        00            .byte	0
02806 0964                        00            .byte	0
02807                                           ! 751  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xc3,
02808 0965                        EA            .byte	$EA
02809 0966                        8C            .byte	$8C
02810 0967                        DF            .byte	$DF
02811 0968                        28            .byte	$28
02812 0969                        00            .byte	0
02813 096A                        E7            .byte	$E7
02814 096B                        04            .byte	4
02815 096C                        C3            .byte	$C3
02816                                           ! 752  0xff,
02817 096D                        FF            .byte	$FF
02818                                           ! 753  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02819 096E                        00            .byte	0
02820 096F                        3F            .byte	$3F
02821 0970                        00            .byte	0
02822 0971                        3F            .byte	$3F
02823 0972                        00            .byte	0
02824 0973                        3F            .byte	$3F
02825 0974                        00            .byte	0
02826 0975                        3F            .byte	$3F
02827                                           ! 754  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02828 0976                        00            .byte	0
02829 0977                        3F            .byte	$3F
02830 0978                        00            .byte	0
02831 0979                        3F            .byte	$3F
02832 097A                        00            .byte	0
02833 097B                        3F            .byte	$3F
02834 097C                        00            .byte	0
02835 097D                        3F            .byte	$3F
02836                                           ! 755  0x01, 0x00, 0x0f, 0x00,
02837 097E                        01            .byte	1
02838 097F                        00            .byte	0
02839 0980                        0F            .byte	$F
02840 0981                        00            .byte	0
02841                                           ! 756  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02842 0982                        00            .byte	0
02843 0983                        00            .byte	0
02844 0984                        00            .byte	0
02845 0985                        00            .byte	0
02846 0986                        00            .byte	0
02847 0987                        00            .byte	0
02848 0988                        05            .byte	5
02849 0989                        0F            .byte	$F
02850 098A                        FF            .byte	$FF
02851                                           ! 757 },
02852                                           ! 758 {
02853                                           ! 759  80, 29, 16, 0x00, 0xa0,
02854 098B                        50            .byte	$50
02855 098C                        1D            .byte	$1D
02856 098D                        10            .byte	$10
02857 098E                        00            .byte	0
02858 098F                        A0            .byte	$A0
02859                                           ! 760  0x01, 0x0f, 0x00, 0x06,
02860 0990                        01            .byte	1
02861 0991                        0F            .byte	$F
02862 0992                        00            .byte	0
02863 0993                        06            .byte	6
02864                                           ! 761  0xe3,
02865 0994                        E3            .byte	$E3
02866                                           ! 762  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02867 0995                        5F            .byte	$5F
02868 0996                        4F            .byte	$4F
02869 0997                        50            .byte	$50
02870 0998                        82            .byte	$82
02871 0999                        54            .byte	$54
02872 099A                        80            .byte	$80
02873 099B                        0B            .byte	$B
02874 099C                        3E            .byte	$3E
02875                                           ! 763  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02876 099D                        00            .byte	0
02877 099E                        40            .byte	$40
02878 099F                        00            .byte	0
02879 09A0                        00            .byte	0
02880 09A1                        00            .byte	0
02881 09A2                        00            .byte	0
02882 09A3                        00            .byte	0
02883 09A4                        00            .byte	0
02884                                           ! 764  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02885 09A5                        EA            .byte	$EA
02886 09A6                        8C            .byte	$8C
02887 09A7                        DF            .byte	$DF
02888 09A8                        28            .byte	$28
02889 09A9                        00            .byte	0
02890 09AA                        E7            .byte	$E7
02891 09AB                        04            .byte	4
02892 09AC                        E3            .byte	$E3
02893                                           ! 765  0xff,
02894 09AD                        FF            .byte	$FF
02895                                           ! 766  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02896 09AE                        00            .byte	0
02897 09AF                        01            .byte	1
02898 09B0                        02            .byte	2
02899 09B1                        03            .byte	3
02900 09B2                        04            .byte	4
02901 09B3                        05            .byte	5
02902 09B4                        14            .byte	$14
02903 09B5                        07            .byte	7
02904                                           ! 767  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02905 09B6                        38            .byte	$38
02906 09B7                        39            .byte	$39
02907 09B8                        3A            .byte	$3A
02908 09B9                        3B            .byte	$3B
02909 09BA                        3C            .byte	$3C
02910 09BB                        3D            .byte	$3D
02911 09BC                        3E            .byte	$3E
02912 09BD                        3F            .byte	$3F
02913                                           ! 768  0x01, 0x00, 0x0f, 0x00,
02914 09BE                        01            .byte	1
02915 09BF                        00            .byte	0
02916 09C0                        0F            .byte	$F
02917 09C1                        00            .byte	0
02918                                           ! 769  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02919 09C2                        00            .byte	0
02920 09C3                        00            .byte	0
02921 09C4                        00            .byte	0
02922 09C5                        00            .byte	0
02923 09C6                        00            .byte	0
02924 09C7                        00            .byte	0
02925 09C8                        05            .byte	5
02926 09C9                        0F            .byte	$F
02927 09CA                        FF            .byte	$FF
02928                                           ! 770 },
02929                                           ! 771 {
02930                                           ! 772  40, 24, 8, 0x00, 0x20,
02931 09CB                        28            .byte	$28
02932 09CC                        18            .byte	$18
02933 09CD                        08            .byte	8
02934 09CE                        00            .byte	0
02935 09CF                        20            .byte	$20
02936                                           ! 773  0x01, 0x0f, 0x00, 0x0e,
02937 09D0                        01            .byte	1
02938 09D1                        0F            .byte	$F
02939 09D2                        00            .byte	0
02940 09D3                        0E            .byte	$E
02941                                           ! 774  0x63,
02942 09D4                        63            .byte	$63
02943                                           ! 775  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02944 09D5                        5F            .byte	$5F
02945 09D6                        4F            .byte	$4F
02946 09D7                        50            .byte	$50
02947 09D8                        82            .byte	$82
02948 09D9                        54            .byte	$54
02949 09DA                        80            .byte	$80
02950 09DB                        BF            .byte	$BF
02951 09DC                        1F            .byte	$1F
02952                                           ! 776  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02953 09DD                        00            .byte	0
02954 09DE                        41            .byte	$41
02955 09DF                        00            .byte	0
02956 09E0                        00            .byte	0
02957 09E1                        00            .byte	0
02958 09E2                        00            .byte	0
02959 09E3                        00            .byte	0
02960 09E4                        00            .byte	0
02961                                           ! 777  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02962 09E5                        9C            .byte	$9C
02963 09E6                        8E            .byte	$8E
02964 09E7                        8F            .byte	$8F
02965 09E8                        28            .byte	$28
02966 09E9                        40            .byte	$40
02967 09EA                        96            .byte	$96
02968 09EB                        B9            .byte	$B9
02969 09EC                        A3            .byte	$A3
02970                                           ! 778  0xff,
02971 09ED                        FF            .byte	$FF
02972                                           ! 779  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02973 09EE                        00            .byte	0
02974 09EF                        01            .byte	1
02975 09F0                        02            .byte	2
02976 09F1                        03            .byte	3
02977 09F2                        04            .byte	4
02978 09F3                        05            .byte	5
02979 09F4                        06            .byte	6
02980 09F5                        07            .byte	7
02981                                           ! 780  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02982 09F6                        08            .byte	8
02983 09F7                        09            .byte	9
02984 09F8                        0A            .byte	$A
02985 09F9                        0B            .byte	$B
02986 09FA                        0C            .byte	$C
02987 09FB                        0D            .byte	$D
02988 09FC                        0E            .byte	$E
02989 09FD                        0F            .byte	$F
02990                                           ! 781  0x41, 0x00, 0x0f, 0x00,
02991 09FE                        41            .byte	$41
02992 09FF                        00            .byte	0
02993 0A00                        0F            .byte	$F
02994 0A01                        00            .byte	0
02995                                           ! 782  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02996 0A02                        00            .byte	0
02997 0A03                        00            .byte	0
02998 0A04                        00            .byte	0
02999 0A05                        00            .byte	0
03000 0A06                        00            .byte	0
03001 0A07                        40            .byte	$40
03002 0A08                        05            .byte	5
03003 0A09                        0F            .byte	$F
03004 0A0A                        FF            .byte	$FF
03005                                           ! 783 },
03006                                           ! 784 {
03007                                           ! 785  100, 36, 16, 0x00, 0x00,
03008 0A0B                        64            .byte	$64
03009 0A0C                        24            .byte	$24
03010 0A0D                        10            .byte	$10
03011 0A0E                        00            .byte	0
03012 0A0F                        00            .byte	0
03013                                           ! 786  0x01, 0x0f, 0x00, 0x06,
03014 0A10                        01            .byte	1
03015 0A11                        0F            .byte	$F
03016 0A12                        00            .byte	0
03017 0A13                        06            .byte	6
03018                                           ! 787  0xe3,
03019 0A14                        E3            .byte	$E3
03020                                           ! 788  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
03021 0A15                        7F            .byte	$7F
03022 0A16                        63            .byte	$63
03023 0A17                        63            .byte	$63
03024 0A18                        83            .byte	$83
03025 0A19                        6B            .byte	$6B
03026 0A1A                        1B            .byte	$1B
03027 0A1B                        72            .byte	$72
03028 0A1C                        F0            .byte	$F0
03029                                           ! 789  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
03030 0A1D                        00            .byte	0
03031 0A1E                        60            .byte	$60
03032 0A1F                        00            .byte	0
03033 0A20                        00            .byte	0
03034 0A21                        00            .byte	0
03035 0A22                        00            .byte	0
03036 0A23                        00            .byte	0
03037 0A24                        00            .byte	0
03038                                           ! 790  0x59
03039                                           ! 790 , 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
03040 0A25                        59            .byte	$59
03041 0A26                        8D            .byte	$8D
03042 0A27                        57            .byte	$57
03043 0A28                        32            .byte	$32
03044 0A29                        00            .byte	0
03045 0A2A                        57            .byte	$57
03046 0A2B                        73            .byte	$73
03047 0A2C                        E3            .byte	$E3
03048                                           ! 791  0xff,
03049 0A2D                        FF            .byte	$FF
03050                                           ! 792  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03051 0A2E                        00            .byte	0
03052 0A2F                        01            .byte	1
03053 0A30                        02            .byte	2
03054 0A31                        03            .byte	3
03055 0A32                        04            .byte	4
03056 0A33                        05            .byte	5
03057 0A34                        14            .byte	$14
03058 0A35                        07            .byte	7
03059                                           ! 793  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03060 0A36                        38            .byte	$38
03061 0A37                        39            .byte	$39
03062 0A38                        3A            .byte	$3A
03063 0A39                        3B            .byte	$3B
03064 0A3A                        3C            .byte	$3C
03065 0A3B                        3D            .byte	$3D
03066 0A3C                        3E            .byte	$3E
03067 0A3D                        3F            .byte	$3F
03068                                           ! 794  0x01, 0x00, 0x0f, 0x00,
03069 0A3E                        01            .byte	1
03070 0A3F                        00            .byte	0
03071 0A40                        0F            .byte	$F
03072 0A41                        00            .byte	0
03073                                           ! 795  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03074 0A42                        00            .byte	0
03075 0A43                        00            .byte	0
03076 0A44                        00            .byte	0
03077 0A45                        00            .byte	0
03078 0A46                        00            .byte	0
03079 0A47                        00            .byte	0
03080 0A48                        05            .byte	5
03081 0A49                        0F            .byte	$F
03082 0A4A                        FF            .byte	$FF
03083                                           ! 796 }
03084                                           ! 797 };
03085                                           !BCC_EOS
03086                                           ! 798 static Bit8u palette0[63+1][3]=
03087                                           ! 799 {
03088                       00000A4B            _palette0:
03089                                           ! 800   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03090 0A4B                        00            .byte	0
03091 0A4C                        00            .byte	0
03092 0A4D                        00            .byte	0
03093 0A4E                        00            .byte	0
03094 0A4F                        00            .byte	0
03095 0A50                        00            .byte	0
03096 0A51                        00            .byte	0
03097 0A52                        00            .byte	0
03098 0A53                        00            .byte	0
03099 0A54                        00            .byte	0
03100 0A55                        00            .byte	0
03101 0A56                        00            .byte	0
03102 0A57                        00            .byte	0
03103 0A58                        00            .byte	0
03104 0A59                        00            .byte	0
03105 0A5A                        00            .byte	0
03106 0A5B                        00            .byte	0
03107 0A5C                        00            .byte	0
03108 0A5D                        00            .byte	0
03109 0A5E                        00            .byte	0
03110 0A5F                        00            .byte	0
03111 0A60                        00            .byte	0
03112 0A61                        00            .byte	0
03113 0A62                        00            .byte	0
03114                                           ! 801   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03115 0A63                        2A            .byte	$2A
03116 0A64                        2A            .byte	$2A
03117 0A65                        2A            .byte	$2A
03118 0A66                        2A            .byte	$2A
03119 0A67                        2A            .byte	$2A
03120 0A68                        2A            .byte	$2A
03121 0A69                        2A            .byte	$2A
03122 0A6A                        2A            .byte	$2A
03123 0A6B                        2A            .byte	$2A
03124 0A6C                        2A            .byte	$2A
03125 0A6D                        2A            .byte	$2A
03126 0A6E                        2A            .byte	$2A
03127 0A6F                        2A            .byte	$2A
03128 0A70                        2A            .byte	$2A
03129 0A71                        2A            .byte	$2A
03130 0A72                        2A            .byte	$2A
03131 0A73                        2A            .byte	$2A
03132 0A74                        2A            .byte	$2A
03133 0A75                        2A            .byte	$2A
03134 0A76                        2A            .byte	$2A
03135 0A77                        2A            .byte	$2A
03136 0A78                        2A            .byte	$2A
03137 0A79                        2A            .byte	$2A
03138 0A7A                        2A            .byte	$2A
03139                                           ! 802   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03140 0A7B                        2A            .byte	$2A
03141 0A7C                        2A            .byte	$2A
03142 0A7D                        2A            .byte	$2A
03143 0A7E                        2A            .byte	$2A
03144 0A7F                        2A            .byte	$2A
03145 0A80                        2A            .byte	$2A
03146 0A81                        2A            .byte	$2A
03147 0A82                        2A            .byte	$2A
03148 0A83                        2A            .byte	$2A
03149 0A84                        2A            .byte	$2A
03150 0A85                        2A            .byte	$2A
03151 0A86                        2A            .byte	$2A
03152 0A87                        2A            .byte	$2A
03153 0A88                        2A            .byte	$2A
03154 0A89                        2A            .byte	$2A
03155 0A8A                        2A            .byte	$2A
03156 0A8B                        2A            .byte	$2A
03157 0A8C                        2A            .byte	$2A
03158 0A8D                        2A            .byte	$2A
03159 0A8E                        2A            .byte	$2A
03160 0A8F                        2A            .byte	$2A
03161 0A90                        2A            .byte	$2A
03162 0A91                        2A            .byte	$2A
03163 0A92                        2A            .byte	$2A
03164                                           ! 803   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03165 0A93                        3F            .byte	$3F
03166 0A94                        3F            .byte	$3F
03167 0A95                        3F            .byte	$3F
03168 0A96                        3F            .byte	$3F
03169 0A97                        3F            .byte	$3F
03170 0A98                        3F            .byte	$3F
03171 0A99                        3F            .byte	$3F
03172 0A9A                        3F            .byte	$3F
03173 0A9B                        3F            .byte	$3F
03174 0A9C                        3F            .byte	$3F
03175 0A9D                        3F            .byte	$3F
03176 0A9E                        3F            .byte	$3F
03177 0A9F                        3F            .byte	$3F
03178 0AA0                        3F            .byte	$3F
03179 0AA1                        3F            .byte	$3F
03180 0AA2                        3F            .byte	$3F
03181 0AA3                        3F            .byte	$3F
03182 0AA4                        3F            .byte	$3F
03183 0AA5                        3F            .byte	$3F
03184 0AA6                        3F            .byte	$3F
03185 0AA7                        3F            .byte	$3F
03186 0AA8                        3F            .byte	$3F
03187 0AA9                        3F            .byte	$3F
03188 0AAA                        3F            .byte	$3F
03189                                           ! 804   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03190 0AAB                        00            .byte	0
03191 0AAC                        00            .byte	0
03192 0AAD                        00            .byte	0
03193 0AAE                        00            .byte	0
03194 0AAF                        00            .byte	0
03195 0AB0                        00            .byte	0
03196 0AB1                        00            .byte	0
03197 0AB2                        00            .byte	0
03198 0AB3                        00            .byte	0
03199 0AB4                        00            .byte	0
03200 0AB5                        00            .byte	0
03201 0AB6                        00            .byte	0
03202 0AB7                        00            .byte	0
03203 0AB8                        00            .byte	0
03204 0AB9                        00            .byte	0
03205 0ABA                        00            .byte	0
03206 0ABB                        00            .byte	0
03207 0ABC                        00            .byte	0
03208 0ABD                        00            .byte	0
03209 0ABE                        00            .byte	0
03210 0ABF                        00            .byte	0
03211 0AC0                        00            .byte	0
03212 0AC1                        00            .byte	0
03213 0AC2                        00            .byte	0
03214                                           ! 805   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03215 0AC3                        2A            .byte	$2A
03216 0AC4                        2A            .byte	$2A
03217 0AC5                        2A            .byte	$2A
03218 0AC6                        2A            .byte	$2A
03219 0AC7                        2A            .byte	$2A
03220 0AC8                        2A            .byte	$2A
03221 0AC9                        2A            .byte	$2A
03222 0ACA                        2A            .byte	$2A
03223 0ACB                        2A            .byte	$2A
03224 0ACC                        2A            .byte	$2A
03225 0ACD                        2A            .byte	$2A
03226 0ACE                        2A            .byte	$2A
03227 0ACF                        2A            .byte	$2A
03228 0AD0                        2A            .byte	$2A
03229 0AD1                        2A            .byte	$2A
03230 0AD2                        2A            .byte	$2A
03231 0AD3                        2A            .byte	$2A
03232 0AD4                        2A            .byte	$2A
03233 0AD5                        2A            .byte	$2A
03234 0AD6                        2A            .byte	$2A
03235 0AD7                        2A            .byte	$2A
03236 0AD8                        2A            .byte	$2A
03237 0AD9                        2A            .byte	$2A
03238 0ADA                        2A            .byte	$2A
03239                                           ! 806   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03240 0ADB                        2A            .byte	$2A
03241 0ADC                        2A            .byte	$2A
03242 0ADD                        2A            .byte	$2A
03243 0ADE                        2A            .byte	$2A
03244 0ADF                        2A            .byte	$2A
03245 0AE0                        2A            .byte	$2A
03246 0AE1                        2A            .byte	$2A
03247 0AE2                        2A            .byte	$2A
03248 0AE3                        2A            .byte	$2A
03249 0AE4                        2A            .byte	$2A
03250 0AE5                        2A            .byte	$2A
03251 0AE6                        2A            .byte	$2A
03252 0AE7                        2A            .byte	$2A
03253 0AE8                        2A            .byte	$2A
03254 0AE9                        2A            .byte	$2A
03255 0AEA                        2A            .byte	$2A
03256 0AEB                        2A            .byte	$2A
03257 0AEC                        2A            .byte	$2A
03258 0AED                        2A            .byte	$2A
03259 0AEE                        2A            .byte	$2A
03260 0AEF                        2A            .byte	$2A
03261 0AF0                        2A            .byte	$2A
03262 0AF1                        2A            .byte	$2A
03263 0AF2                        2A            .byte	$2A
03264                                           ! 807   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03265 0AF3                        3F            .byte	$3F
03266 0AF4                        3F            .byte	$3F
03267 0AF5                        3F            .byte	$3F
03268 0AF6                        3F            .byte	$3F
03269 0AF7                        3F            .byte	$3F
03270 0AF8                        3F            .byte	$3F
03271 0AF9                        3F            .byte	$3F
03272 0AFA                        3F            .byte	$3F
03273 0AFB                        3F            .byte	$3F
03274 0AFC                        3F            .byte	$3F
03275 0AFD                        3F            .byte	$3F
03276 0AFE                        3F            .byte	$3F
03277 0AFF                        3F            .byte	$3F
03278 0B00                        3F            .byte	$3F
03279 0B01                        3F            .byte	$3F
03280 0B02                        3F            .byte	$3F
03281 0B03                        3F            .byte	$3F
03282 0B04                        3F            .byte	$3F
03283 0B05                        3F            .byte	$3F
03284 0B06                        3F            .byte	$3F
03285 0B07                        3F            .byte	$3F
03286 0B08                        3F            .byte	$3F
03287 0B09                        3F            .byte	$3F
03288                                           ! 808 };
03289 0B0A                        3F            .byte	$3F
03290                                           !BCC_EOS
03291                                           ! 809 static Bit8u palette1[63+1][3]=
03292                                           ! 810 {
03293                       00000B0B            _palette1:
03294                                           ! 811   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03295 0B0B                        00            .byte	0
03296 0B0C                        00            .byte	0
03297 0B0D                        00            .byte	0
03298 0B0E                        00            .byte	0
03299 0B0F                        00            .byte	0
03300 0B10                        2A            .byte	$2A
03301 0B11                        00            .byte	0
03302 0B12                        2A            .byte	$2A
03303 0B13                        00            .byte	0
03304 0B14                        00            .byte	0
03305 0B15                        2A            .byte	$2A
03306 0B16                        2A            .byte	$2A
03307 0B17                        2A            .byte	$2A
03308 0B18                        00            .byte	0
03309 0B19                        00            .byte	0
03310 0B1A                        2A            .byte	$2A
03311 0B1B                        00            .byte	0
03312 0B1C                        2A            .byte	$2A
03313 0B1D                        2A            .byte	$2A
03314 0B1E                        15            .byte	$15
03315 0B1F                        00            .byte	0
03316 0B20                        2A            .byte	$2A
03317 0B21                        2A            .byte	$2A
03318 0B22                        2A            .byte	$2A
03319                                           ! 812   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03320 0B23                        00            .byte	0
03321 0B24                        00            .byte	0
03322 0B25                        00            .byte	0
03323 0B26                        00            .byte	0
03324 0B27                        00            .byte	0
03325 0B28                        2A            .byte	$2A
03326 0B29                        00            .byte	0
03327 0B2A                        2A            .byte	$2A
03328 0B2B                        00            .byte	0
03329 0B2C                        00            .byte	0
03330 0B2D                        2A            .byte	$2A
03331 0B2E                        2A            .byte	$2A
03332 0B2F                        2A            .byte	$2A
03333 0B30                        00            .byte	0
03334 0B31                        00            .byte	0
03335 0B32                        2A            .byte	$2A
03336 0B33                        00            .byte	0
03337 0B34                        2A            .byte	$2A
03338 0B35                        2A            .byte	$2A
03339 0B36                        15            .byte	$15
03340 0B37                        00            .byte	0
03341 0B38                        2A            .byte	$2A
03342 0B39                        2A            .byte	$2A
03343 0B3A                        2A            .byte	$2A
03344                                           ! 813   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03345 0B3B                        15            .byte	$15
03346 0B3C                        15            .byte	$15
03347 0B3D                        15            .byte	$15
03348 0B3E                        15            .byte	$15
03349 0B3F                        15            .byte	$15
03350 0B40                        3F            .byte	$3F
03351 0B41                        15            .byte	$15
03352 0B42                        3F            .byte	$3F
03353 0B43                        15            .byte	$15
03354 0B44                        15            .byte	$15
03355 0B45                        3F            .byte	$3F
03356 0B46                        3F            .byte	$3F
03357 0B47                        3F            .byte	$3F
03358 0B48                        15            .byte	$15
03359 0B49                        15            .byte	$15
03360 0B4A                        3F            .byte	$3F
03361 0B4B                        15            .byte	$15
03362 0B4C                        3F            .byte	$3F
03363 0B4D                        3F            .byte	$3F
03364 0B4E                        3F            .byte	$3F
03365 0B4F                        15            .byte	$15
03366 0B50                        3F            .byte	$3F
03367 0B51                        3F            .byte	$3F
03368 0B52                        3F            .byte	$3F
03369                                           ! 814   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03370 0B53                        15            .byte	$15
03371 0B54                        15            .byte	$15
03372 0B55                        15            .byte	$15
03373 0B56                        15            .byte	$15
03374 0B57                        15            .byte	$15
03375 0B58                        3F            .byte	$3F
03376 0B59                        15            .byte	$15
03377 0B5A                        3F            .byte	$3F
03378 0B5B                        15            .byte	$15
03379 0B5C                        15            .byte	$15
03380 0B5D                        3F            .byte	$3F
03381 0B5E                        3F            .byte	$3F
03382 0B5F                        3F            .byte	$3F
03383 0B60                        15            .byte	$15
03384 0B61                        15            .byte	$15
03385 0B62                        3F            .byte	$3F
03386 0B63                        15            .byte	$15
03387 0B64                        3F            .byte	$3F
03388 0B65                        3F            .byte	$3F
03389 0B66                        3F            .byte	$3F
03390 0B67                        15            .byte	$15
03391 0B68                        3F            .byte	$3F
03392 0B69                        3F            .byte	$3F
03393 0B6A                        3F            .byte	$3F
03394                                           ! 815   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03395 0B6B                        00            .byte	0
03396 0B6C                        00            .byte	0
03397 0B6D                        00            .byte	0
03398 0B6E                        00            .byte	0
03399 0B6F                        00            .byte	0
03400 0B70                        2A            .byte	$2A
03401 0B71                        00            .byte	0
03402 0B72                        2A            .byte	$2A
03403 0B73                        00            .byte	0
03404 0B74                        00            .byte	0
03405 0B75                        2A            .byte	$2A
03406 0B76                        2A            .byte	$2A
03407 0B77                        2A            .byte	$2A
03408 0B78                        00            .byte	0
03409 0B79                        00            .byte	0
03410 0B7A                        2A            .byte	$2A
03411 0B7B                        00            .byte	0
03412 0B7C                        2A            .byte	$2A
03413 0B7D                        2A            .byte	$2A
03414 0B7E                        15            .byte	$15
03415 0B7F                        00            .byte	0
03416 0B80                        2A            .byte	$2A
03417 0B81                        2A            .byte	$2A
03418 0B82                        2A            .byte	$2A
03419                                           ! 816   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00
03420 0B83                        00            .byte	0
03421 0B84                        00            .byte	0
03422 0B85                        00            .byte	0
03423 0B86                        00            .byte	0
03424 0B87                        00            .byte	0
03425 0B88                        2A            .byte	$2A
03426 0B89                        00            .byte	0
03427 0B8A                        2A            .byte	$2A
03428 0B8B                        00            .byte	0
03429                                           ! 816 ,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03430 0B8C                        00            .byte	0
03431 0B8D                        2A            .byte	$2A
03432 0B8E                        2A            .byte	$2A
03433 0B8F                        2A            .byte	$2A
03434 0B90                        00            .byte	0
03435 0B91                        00            .byte	0
03436 0B92                        2A            .byte	$2A
03437 0B93                        00            .byte	0
03438 0B94                        2A            .byte	$2A
03439 0B95                        2A            .byte	$2A
03440 0B96                        15            .byte	$15
03441 0B97                        00            .byte	0
03442 0B98                        2A            .byte	$2A
03443 0B99                        2A            .byte	$2A
03444 0B9A                        2A            .byte	$2A
03445                                           ! 817   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03446 0B9B                        15            .byte	$15
03447 0B9C                        15            .byte	$15
03448 0B9D                        15            .byte	$15
03449 0B9E                        15            .byte	$15
03450 0B9F                        15            .byte	$15
03451 0BA0                        3F            .byte	$3F
03452 0BA1                        15            .byte	$15
03453 0BA2                        3F            .byte	$3F
03454 0BA3                        15            .byte	$15
03455 0BA4                        15            .byte	$15
03456 0BA5                        3F            .byte	$3F
03457 0BA6                        3F            .byte	$3F
03458 0BA7                        3F            .byte	$3F
03459 0BA8                        15            .byte	$15
03460 0BA9                        15            .byte	$15
03461 0BAA                        3F            .byte	$3F
03462 0BAB                        15            .byte	$15
03463 0BAC                        3F            .byte	$3F
03464 0BAD                        3F            .byte	$3F
03465 0BAE                        3F            .byte	$3F
03466 0BAF                        15            .byte	$15
03467 0BB0                        3F            .byte	$3F
03468 0BB1                        3F            .byte	$3F
03469 0BB2                        3F            .byte	$3F
03470                                           ! 818   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03471 0BB3                        15            .byte	$15
03472 0BB4                        15            .byte	$15
03473 0BB5                        15            .byte	$15
03474 0BB6                        15            .byte	$15
03475 0BB7                        15            .byte	$15
03476 0BB8                        3F            .byte	$3F
03477 0BB9                        15            .byte	$15
03478 0BBA                        3F            .byte	$3F
03479 0BBB                        15            .byte	$15
03480 0BBC                        15            .byte	$15
03481 0BBD                        3F            .byte	$3F
03482 0BBE                        3F            .byte	$3F
03483 0BBF                        3F            .byte	$3F
03484 0BC0                        15            .byte	$15
03485 0BC1                        15            .byte	$15
03486 0BC2                        3F            .byte	$3F
03487 0BC3                        15            .byte	$15
03488 0BC4                        3F            .byte	$3F
03489 0BC5                        3F            .byte	$3F
03490 0BC6                        3F            .byte	$3F
03491 0BC7                        15            .byte	$15
03492 0BC8                        3F            .byte	$3F
03493 0BC9                        3F            .byte	$3F
03494                                           ! 819 };
03495 0BCA                        3F            .byte	$3F
03496                                           !BCC_EOS
03497                                           ! 820 static Bit8u palette2[63+1][3]=
03498                                           ! 821 {
03499                       00000BCB            _palette2:
03500                                           ! 822   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03501 0BCB                        00            .byte	0
03502 0BCC                        00            .byte	0
03503 0BCD                        00            .byte	0
03504 0BCE                        00            .byte	0
03505 0BCF                        00            .byte	0
03506 0BD0                        2A            .byte	$2A
03507 0BD1                        00            .byte	0
03508 0BD2                        2A            .byte	$2A
03509 0BD3                        00            .byte	0
03510 0BD4                        00            .byte	0
03511 0BD5                        2A            .byte	$2A
03512 0BD6                        2A            .byte	$2A
03513 0BD7                        2A            .byte	$2A
03514 0BD8                        00            .byte	0
03515 0BD9                        00            .byte	0
03516 0BDA                        2A            .byte	$2A
03517 0BDB                        00            .byte	0
03518 0BDC                        2A            .byte	$2A
03519 0BDD                        2A            .byte	$2A
03520 0BDE                        2A            .byte	$2A
03521 0BDF                        00            .byte	0
03522 0BE0                        2A            .byte	$2A
03523 0BE1                        2A            .byte	$2A
03524 0BE2                        2A            .byte	$2A
03525                                           ! 823   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03526 0BE3                        00            .byte	0
03527 0BE4                        00            .byte	0
03528 0BE5                        15            .byte	$15
03529 0BE6                        00            .byte	0
03530 0BE7                        00            .byte	0
03531 0BE8                        3F            .byte	$3F
03532 0BE9                        00            .byte	0
03533 0BEA                        2A            .byte	$2A
03534 0BEB                        15            .byte	$15
03535 0BEC                        00            .byte	0
03536 0BED                        2A            .byte	$2A
03537 0BEE                        3F            .byte	$3F
03538 0BEF                        2A            .byte	$2A
03539 0BF0                        00            .byte	0
03540 0BF1                        15            .byte	$15
03541 0BF2                        2A            .byte	$2A
03542 0BF3                        00            .byte	0
03543 0BF4                        3F            .byte	$3F
03544 0BF5                        2A            .byte	$2A
03545 0BF6                        2A            .byte	$2A
03546 0BF7                        15            .byte	$15
03547 0BF8                        2A            .byte	$2A
03548 0BF9                        2A            .byte	$2A
03549 0BFA                        3F            .byte	$3F
03550                                           ! 824   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03551 0BFB                        00            .byte	0
03552 0BFC                        15            .byte	$15
03553 0BFD                        00            .byte	0
03554 0BFE                        00            .byte	0
03555 0BFF                        15            .byte	$15
03556 0C00                        2A            .byte	$2A
03557 0C01                        00            .byte	0
03558 0C02                        3F            .byte	$3F
03559 0C03                        00            .byte	0
03560 0C04                        00            .byte	0
03561 0C05                        3F            .byte	$3F
03562 0C06                        2A            .byte	$2A
03563 0C07                        2A            .byte	$2A
03564 0C08                        15            .byte	$15
03565 0C09                        00            .byte	0
03566 0C0A                        2A            .byte	$2A
03567 0C0B                        15            .byte	$15
03568 0C0C                        2A            .byte	$2A
03569 0C0D                        2A            .byte	$2A
03570 0C0E                        3F            .byte	$3F
03571 0C0F                        00            .byte	0
03572 0C10                        2A            .byte	$2A
03573 0C11                        3F            .byte	$3F
03574 0C12                        2A            .byte	$2A
03575                                           ! 825   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03576 0C13                        00            .byte	0
03577 0C14                        15            .byte	$15
03578 0C15                        15            .byte	$15
03579 0C16                        00            .byte	0
03580 0C17                        15            .byte	$15
03581 0C18                        3F            .byte	$3F
03582 0C19                        00            .byte	0
03583 0C1A                        3F            .byte	$3F
03584 0C1B                        15            .byte	$15
03585 0C1C                        00            .byte	0
03586 0C1D                        3F            .byte	$3F
03587 0C1E                        3F            .byte	$3F
03588 0C1F                        2A            .byte	$2A
03589 0C20                        15            .byte	$15
03590 0C21                        15            .byte	$15
03591 0C22                        2A            .byte	$2A
03592 0C23                        15            .byte	$15
03593 0C24                        3F            .byte	$3F
03594 0C25                        2A            .byte	$2A
03595 0C26                        3F            .byte	$3F
03596 0C27                        15            .byte	$15
03597 0C28                        2A            .byte	$2A
03598 0C29                        3F            .byte	$3F
03599 0C2A                        3F            .byte	$3F
03600                                           ! 826   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03601 0C2B                        15            .byte	$15
03602 0C2C                        00            .byte	0
03603 0C2D                        00            .byte	0
03604 0C2E                        15            .byte	$15
03605 0C2F                        00            .byte	0
03606 0C30                        2A            .byte	$2A
03607 0C31                        15            .byte	$15
03608 0C32                        2A            .byte	$2A
03609 0C33                        00            .byte	0
03610 0C34                        15            .byte	$15
03611 0C35                        2A            .byte	$2A
03612 0C36                        2A            .byte	$2A
03613 0C37                        3F            .byte	$3F
03614 0C38                        00            .byte	0
03615 0C39                        00            .byte	0
03616 0C3A                        3F            .byte	$3F
03617 0C3B                        00            .byte	0
03618 0C3C                        2A            .byte	$2A
03619 0C3D                        3F            .byte	$3F
03620 0C3E                        2A            .byte	$2A
03621 0C3F                        00            .byte	0
03622 0C40                        3F            .byte	$3F
03623 0C41                        2A            .byte	$2A
03624 0C42                        2A            .byte	$2A
03625                                           ! 827   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03626 0C43                        15            .byte	$15
03627 0C44                        00            .byte	0
03628 0C45                        15            .byte	$15
03629 0C46                        15            .byte	$15
03630 0C47                        00            .byte	0
03631 0C48                        3F            .byte	$3F
03632 0C49                        15            .byte	$15
03633 0C4A                        2A            .byte	$2A
03634 0C4B                        15            .byte	$15
03635 0C4C                        15            .byte	$15
03636 0C4D                        2A            .byte	$2A
03637 0C4E                        3F            .byte	$3F
03638 0C4F                        3F            .byte	$3F
03639 0C50                        00            .byte	0
03640 0C51                        15            .byte	$15
03641 0C52                        3F            .byte	$3F
03642 0C53                        00            .byte	0
03643 0C54                        3F            .byte	$3F
03644 0C55                        3F            .byte	$3F
03645 0C56                        2A            .byte	$2A
03646 0C57                        15            .byte	$15
03647 0C58                        3F            .byte	$3F
03648 0C59                        2A            .byte	$2A
03649 0C5A                        3F            .byte	$3F
03650                                           ! 828   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03651 0C5B                        15            .byte	$15
03652 0C5C                        15            .byte	$15
03653 0C5D                        00            .byte	0
03654 0C5E                        15            .byte	$15
03655 0C5F                        15            .byte	$15
03656 0C60                        2A            .byte	$2A
03657 0C61                        15            .byte	$15
03658 0C62                        3F            .byte	$3F
03659 0C63                        00            .byte	0
03660 0C64                        15            .byte	$15
03661 0C65                        3F            .byte	$3F
03662 0C66                        2A            .byte	$2A
03663 0C67                        3F            .byte	$3F
03664 0C68                        15            .byte	$15
03665 0C69                        00            .byte	0
03666 0C6A                        3F            .byte	$3F
03667 0C6B                        15            .byte	$15
03668 0C6C                        2A            .byte	$2A
03669 0C6D                        3F            .byte	$3F
03670 0C6E                        3F            .byte	$3F
03671 0C6F                        00            .byte	0
03672 0C70                        3F            .byte	$3F
03673 0C71                        3F            .byte	$3F
03674 0C72                        2A            .byte	$2A
03675                                           ! 829   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03676 0C73                        15            .byte	$15
03677 0C74                        15            .byte	$15
03678 0C75                        15            .byte	$15
03679 0C76                        15            .byte	$15
03680 0C77                        15            .byte	$15
03681 0C78                        3F            .byte	$3F
03682 0C79                        15            .byte	$15
03683 0C7A                        3F            .byte	$3F
03684 0C7B                        15            .byte	$15
03685 0C7C                        15            .byte	$15
03686 0C7D                        3F            .byte	$3F
03687 0C7E                        3F            .byte	$3F
03688 0C7F                        3F            .byte	$3F
03689 0C80                        15            .byte	$15
03690 0C81                        15            .byte	$15
03691 0C82                        3F            .byte	$3F
03692 0C83                        15            .byte	$15
03693 0C84                        3F            .byte	$3F
03694 0C85                        3F            .byte	$3F
03695 0C86                        3F            .byte	$3F
03696 0C87                        15            .byte	$15
03697 0C88                        3F            .byte	$3F
03698 0C89                        3F            .byte	$3F
03699                                           ! 830 };
03700 0C8A                        3F            .byte	$3F
03701                                           !BCC_EOS
03702                                           ! 831 static Bit8u palette3[256][3]=
03703                                           ! 832 {
03704                       00000C8B            _palette3:
03705                                           ! 833   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03706 0C8B                        00            .byte	0
03707 0C8C                        00            .byte	0
03708 0C8D                        00            .byte	0
03709 0C8E                        00            .byte	0
03710 0C8F                        00            .byte	0
03711 0C90                        2A            .byte	$2A
03712 0C91                        00            .byte	0
03713 0C92                        2A            .byte	$2A
03714 0C93                        00            .byte	0
03715 0C94                        00            .byte	0
03716 0C95                        2A            .byte	$2A
03717 0C96                        2A            .byte	$2A
03718 0C97                        2A            .byte	$2A
03719 0C98                        00            .byte	0
03720 0C99                        00            .byte	0
03721 0C9A                        2A            .byte	$2A
03722 0C9B                        00            .byte	0
03723 0C9C                        2A            .byte	$2A
03724 0C9D                        2A            .byte	$2A
03725 0C9E                        15            .byte	$15
03726 0C9F                        00            .byte	0
03727 0CA0                        2A            .byte	$2A
03728 0CA1                        2A            .byte	$2A
03729 0CA2                        2A            .byte	$2A
03730                                           ! 834   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03731 0CA3                        15            .byte	$15
03732 0CA4                        15            .byte	$15
03733 0CA5                        15            .byte	$15
03734 0CA6                        15            .byte	$15
03735 0CA7                        15            .byte	$15
03736 0CA8                        3F            .byte	$3F
03737 0CA9                        15            .byte	$15
03738 0CAA                        3F            .byte	$3F
03739 0CAB                        15            .byte	$15
03740 0CAC                        15            .byte	$15
03741 0CAD                        3F            .byte	$3F
03742 0CAE                        3F            .byte	$3F
03743 0CAF                        3F            .byte	$3F
03744 0CB0                        15            .byte	$15
03745 0CB1                        15            .byte	$15
03746 0CB2                        3F            .byte	$3F
03747 0CB3                        15            .byte	$15
03748 0CB4                        3F            .byte	$3F
03749 0CB5                        3F            .byte	$3F
03750 0CB6                        3F            .byte	$3F
03751 0CB7                        15            .byte	$15
03752 0CB8                        3F            .byte	$3F
03753 0CB9                        3F            .byte	$3F
03754 0CBA                        3F            .byte	$3F
03755                                           ! 835   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03756 0CBB                        00            .byte	0
03757 0CBC                        00            .byte	0
03758 0CBD                        00            .byte	0
03759 0CBE                        05            .byte	5
03760 0CBF                        05            .byte	5
03761 0CC0                        05            .byte	5
03762 0CC1                        08            .byte	8
03763 0CC2                        08            .byte	8
03764 0CC3                        08            .byte	8
03765 0CC4                        0B            .byte	$B
03766 0CC5                        0B            .byte	$B
03767 0CC6                        0B            .byte	$B
03768 0CC7                        0E            .byte	$E
03769 0CC8                        0E            .byte	$E
03770 0CC9                        0E            .byte	$E
03771 0CCA                        11            .byte	$11
03772 0CCB                        11            .byte	$11
03773 0CCC                        11            .byte	$11
03774 0CCD                        14            .byte	$14
03775 0CCE                        14            .byte	$14
03776 0CCF                        14            .byte	$14
03777 0CD0                        18            .byte	$18
03778 0CD1                        18            .byte	$18
03779 0CD2                        18            .byte	$18
03780                                           ! 836   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03781 0CD3                        1C            .byte	$1C
03782 0CD4                        1C            .byte	$1C
03783 0CD5                        1C            .byte	$1C
03784 0CD6                        20            .byte	$20
03785 0CD7                        20            .byte	$20
03786 0CD8                        20            .byte	$20
03787 0CD9                        24            .byte	$24
03788 0CDA                        24            .byte	$24
03789 0CDB                        24            .byte	$24
03790 0CDC                        28            .byte	$28
03791 0CDD                        28            .byte	$28
03792 0CDE                        28            .byte	$28
03793 0CDF                        2D            .byte	$2D
03794 0CE0                        2D            .byte	$2D
03795 0CE1                        2D            .byte	$2D
03796 0CE2                        32            .byte	$32
03797 0CE3                        32            .byte	$32
03798 0CE4                        32            .byte	$32
03799 0CE5                        38            .byte	$38
03800 0CE6                        38            .byte	$38
03801 0CE7                        38            .byte	$38
03802 0CE8                        3F            .byte	$3F
03803 0CE9                        3F            .byte	$3F
03804 0CEA                        3F            .byte	$3F
03805                                           ! 837   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f,
03806 0CEB                        00            .byte	0
03807 0CEC                        00            .byte	0
03808 0CED                        3F            .byte	$3F
03809 0CEE                        10            .byte	$10
03810 0CEF                        00            .byte	0
03811 0CF0                        3F            .byte	$3F
03812 0CF1                        1F            .byte	$1F
03813 0CF2                        00            .byte	0
03814 0CF3                        3F            .byte	$3F
03815 0CF4                        2F            .byte	$2F
03816 0CF5                        00            .byte	0
03817 0CF6                        3F            .byte	$3F
03818 0CF7                        3F            .byte	$3F
03819 0CF8                        00            .byte	0
03820                                           ! 837  0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03821 0CF9                        3F            .byte	$3F
03822 0CFA                        3F            .byte	$3F
03823 0CFB                        00            .byte	0
03824 0CFC                        2F            .byte	$2F
03825 0CFD                        3F            .byte	$3F
03826 0CFE                        00            .byte	0
03827 0CFF                        1F            .byte	$1F
03828 0D00                        3F            .byte	$3F
03829 0D01                        00            .byte	0
03830 0D02                        10            .byte	$10
03831                                           ! 838   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03832 0D03                        3F            .byte	$3F
03833 0D04                        00            .byte	0
03834 0D05                        00            .byte	0
03835 0D06                        3F            .byte	$3F
03836 0D07                        10            .byte	$10
03837 0D08                        00            .byte	0
03838 0D09                        3F            .byte	$3F
03839 0D0A                        1F            .byte	$1F
03840 0D0B                        00            .byte	0
03841 0D0C                        3F            .byte	$3F
03842 0D0D                        2F            .byte	$2F
03843 0D0E                        00            .byte	0
03844 0D0F                        3F            .byte	$3F
03845 0D10                        3F            .byte	$3F
03846 0D11                        00            .byte	0
03847 0D12                        2F            .byte	$2F
03848 0D13                        3F            .byte	$3F
03849 0D14                        00            .byte	0
03850 0D15                        1F            .byte	$1F
03851 0D16                        3F            .byte	$3F
03852 0D17                        00            .byte	0
03853 0D18                        10            .byte	$10
03854 0D19                        3F            .byte	$3F
03855 0D1A                        00            .byte	0
03856                                           ! 839   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03857 0D1B                        00            .byte	0
03858 0D1C                        3F            .byte	$3F
03859 0D1D                        00            .byte	0
03860 0D1E                        00            .byte	0
03861 0D1F                        3F            .byte	$3F
03862 0D20                        10            .byte	$10
03863 0D21                        00            .byte	0
03864 0D22                        3F            .byte	$3F
03865 0D23                        1F            .byte	$1F
03866 0D24                        00            .byte	0
03867 0D25                        3F            .byte	$3F
03868 0D26                        2F            .byte	$2F
03869 0D27                        00            .byte	0
03870 0D28                        3F            .byte	$3F
03871 0D29                        3F            .byte	$3F
03872 0D2A                        00            .byte	0
03873 0D2B                        2F            .byte	$2F
03874 0D2C                        3F            .byte	$3F
03875 0D2D                        00            .byte	0
03876 0D2E                        1F            .byte	$1F
03877 0D2F                        3F            .byte	$3F
03878 0D30                        00            .byte	0
03879 0D31                        10            .byte	$10
03880 0D32                        3F            .byte	$3F
03881                                           ! 840   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03882 0D33                        1F            .byte	$1F
03883 0D34                        1F            .byte	$1F
03884 0D35                        3F            .byte	$3F
03885 0D36                        27            .byte	$27
03886 0D37                        1F            .byte	$1F
03887 0D38                        3F            .byte	$3F
03888 0D39                        2F            .byte	$2F
03889 0D3A                        1F            .byte	$1F
03890 0D3B                        3F            .byte	$3F
03891 0D3C                        37            .byte	$37
03892 0D3D                        1F            .byte	$1F
03893 0D3E                        3F            .byte	$3F
03894 0D3F                        3F            .byte	$3F
03895 0D40                        1F            .byte	$1F
03896 0D41                        3F            .byte	$3F
03897 0D42                        3F            .byte	$3F
03898 0D43                        1F            .byte	$1F
03899 0D44                        37            .byte	$37
03900 0D45                        3F            .byte	$3F
03901 0D46                        1F            .byte	$1F
03902 0D47                        2F            .byte	$2F
03903 0D48                        3F            .byte	$3F
03904 0D49                        1F            .byte	$1F
03905 0D4A                        27            .byte	$27
03906                                           ! 841   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03907 0D4B                        3F            .byte	$3F
03908 0D4C                        1F            .byte	$1F
03909 0D4D                        1F            .byte	$1F
03910 0D4E                        3F            .byte	$3F
03911 0D4F                        27            .byte	$27
03912 0D50                        1F            .byte	$1F
03913 0D51                        3F            .byte	$3F
03914 0D52                        2F            .byte	$2F
03915 0D53                        1F            .byte	$1F
03916 0D54                        3F            .byte	$3F
03917 0D55                        37            .byte	$37
03918 0D56                        1F            .byte	$1F
03919 0D57                        3F            .byte	$3F
03920 0D58                        3F            .byte	$3F
03921 0D59                        1F            .byte	$1F
03922 0D5A                        37            .byte	$37
03923 0D5B                        3F            .byte	$3F
03924 0D5C                        1F            .byte	$1F
03925 0D5D                        2F            .byte	$2F
03926 0D5E                        3F            .byte	$3F
03927 0D5F                        1F            .byte	$1F
03928 0D60                        27            .byte	$27
03929 0D61                        3F            .byte	$3F
03930 0D62                        1F            .byte	$1F
03931                                           ! 842   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03932 0D63                        1F            .byte	$1F
03933 0D64                        3F            .byte	$3F
03934 0D65                        1F            .byte	$1F
03935 0D66                        1F            .byte	$1F
03936 0D67                        3F            .byte	$3F
03937 0D68                        27            .byte	$27
03938 0D69                        1F            .byte	$1F
03939 0D6A                        3F            .byte	$3F
03940 0D6B                        2F            .byte	$2F
03941 0D6C                        1F            .byte	$1F
03942 0D6D                        3F            .byte	$3F
03943 0D6E                        37            .byte	$37
03944 0D6F                        1F            .byte	$1F
03945 0D70                        3F            .byte	$3F
03946 0D71                        3F            .byte	$3F
03947 0D72                        1F            .byte	$1F
03948 0D73                        37            .byte	$37
03949 0D74                        3F            .byte	$3F
03950 0D75                        1F            .byte	$1F
03951 0D76                        2F            .byte	$2F
03952 0D77                        3F            .byte	$3F
03953 0D78                        1F            .byte	$1F
03954 0D79                        27            .byte	$27
03955 0D7A                        3F            .byte	$3F
03956                                           ! 843   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03957 0D7B                        2D            .byte	$2D
03958 0D7C                        2D            .byte	$2D
03959 0D7D                        3F            .byte	$3F
03960 0D7E                        31            .byte	$31
03961 0D7F                        2D            .byte	$2D
03962 0D80                        3F            .byte	$3F
03963 0D81                        36            .byte	$36
03964 0D82                        2D            .byte	$2D
03965 0D83                        3F            .byte	$3F
03966 0D84                        3A            .byte	$3A
03967 0D85                        2D            .byte	$2D
03968 0D86                        3F            .byte	$3F
03969 0D87                        3F            .byte	$3F
03970 0D88                        2D            .byte	$2D
03971 0D89                        3F            .byte	$3F
03972 0D8A                        3F            .byte	$3F
03973 0D8B                        2D            .byte	$2D
03974 0D8C                        3A            .byte	$3A
03975 0D8D                        3F            .byte	$3F
03976 0D8E                        2D            .byte	$2D
03977 0D8F                        36            .byte	$36
03978 0D90                        3F            .byte	$3F
03979 0D91                        2D            .byte	$2D
03980 0D92                        31            .byte	$31
03981                                           ! 844   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03982 0D93                        3F            .byte	$3F
03983 0D94                        2D            .byte	$2D
03984 0D95                        2D            .byte	$2D
03985 0D96                        3F            .byte	$3F
03986 0D97                        31            .byte	$31
03987 0D98                        2D            .byte	$2D
03988 0D99                        3F            .byte	$3F
03989 0D9A                        36            .byte	$36
03990 0D9B                        2D            .byte	$2D
03991 0D9C                        3F            .byte	$3F
03992 0D9D                        3A            .byte	$3A
03993 0D9E                        2D            .byte	$2D
03994 0D9F                        3F            .byte	$3F
03995 0DA0                        3F            .byte	$3F
03996 0DA1                        2D            .byte	$2D
03997 0DA2                        3A            .byte	$3A
03998 0DA3                        3F            .byte	$3F
03999 0DA4                        2D            .byte	$2D
04000 0DA5                        36            .byte	$36
04001 0DA6                        3F            .byte	$3F
04002 0DA7                        2D            .byte	$2D
04003 0DA8                        31            .byte	$31
04004 0DA9                        3F            .byte	$3F
04005 0DAA                        2D            .byte	$2D
04006                                           ! 845   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
04007 0DAB                        2D            .byte	$2D
04008 0DAC                        3F            .byte	$3F
04009 0DAD                        2D            .byte	$2D
04010 0DAE                        2D            .byte	$2D
04011 0DAF                        3F            .byte	$3F
04012 0DB0                        31            .byte	$31
04013 0DB1                        2D            .byte	$2D
04014 0DB2                        3F            .byte	$3F
04015 0DB3                        36            .byte	$36
04016 0DB4                        2D            .byte	$2D
04017 0DB5                        3F            .byte	$3F
04018 0DB6                        3A            .byte	$3A
04019 0DB7                        2D            .byte	$2D
04020 0DB8                        3F            .byte	$3F
04021 0DB9                        3F            .byte	$3F
04022 0DBA                        2D            .byte	$2D
04023 0DBB                        3A            .byte	$3A
04024 0DBC                        3F            .byte	$3F
04025 0DBD                        2D            .byte	$2D
04026 0DBE                        36            .byte	$36
04027 0DBF                        3F            .byte	$3F
04028 0DC0                        2D            .byte	$2D
04029 0DC1                        31            .byte	$31
04030 0DC2                        3F            .byte	$3F
04031                                           ! 846   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
04032 0DC3                        00            .byte	0
04033 0DC4                        00            .byte	0
04034 0DC5                        1C            .byte	$1C
04035 0DC6                        07            .byte	7
04036 0DC7                        00            .byte	0
04037 0DC8                        1C            .byte	$1C
04038 0DC9                        0E            .byte	$E
04039 0DCA                        00            .byte	0
04040 0DCB                        1C            .byte	$1C
04041 0DCC                        15            .byte	$15
04042 0DCD                        00            .byte	0
04043 0DCE                        1C            .byte	$1C
04044 0DCF                        1C            .byte	$1C
04045 0DD0                        00            .byte	0
04046 0DD1                        1C            .byte	$1C
04047 0DD2                        1C            .byte	$1C
04048 0DD3                        00            .byte	0
04049 0DD4                        15            .byte	$15
04050 0DD5                        1C            .byte	$1C
04051 0DD6                        00            .byte	0
04052 0DD7                        0E            .byte	$E
04053 0DD8                        1C            .byte	$1C
04054 0DD9                        00            .byte	0
04055 0DDA                        07            .byte	7
04056                                           ! 847   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04057 0DDB                        1C            .byte	$1C
04058 0DDC                        00            .byte	0
04059 0DDD                        00            .byte	0
04060 0DDE                        1C            .byte	$1C
04061 0DDF                        07            .byte	7
04062 0DE0                        00            .byte	0
04063 0DE1                        1C            .byte	$1C
04064 0DE2                        0E            .byte	$E
04065 0DE3                        00            .byte	0
04066 0DE4                        1C            .byte	$1C
04067 0DE5                        15            .byte	$15
04068 0DE6                        00            .byte	0
04069 0DE7                        1C            .byte	$1C
04070 0DE8                        1C            .byte	$1C
04071 0DE9                        00            .byte	0
04072 0DEA                        15            .byte	$15
04073 0DEB                        1C            .byte	$1C
04074 0DEC                        00            .byte	0
04075 0DED                        0E            .byte	$E
04076 0DEE                        1C            .byte	$1C
04077 0DEF                        00            .byte	0
04078 0DF0                        07            .byte	7
04079 0DF1                        1C            .byte	$1C
04080 0DF2                        00            .byte	0
04081                                           ! 848   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04082 0DF3                        00            .byte	0
04083 0DF4                        1C            .byte	$1C
04084 0DF5                        00            .byte	0
04085 0DF6                        00            .byte	0
04086 0DF7                        1C            .byte	$1C
04087 0DF8                        07            .byte	7
04088 0DF9                        00            .byte	0
04089 0DFA                        1C            .byte	$1C
04090 0DFB                        0E            .byte	$E
04091 0DFC                        00            .byte	0
04092 0DFD                        1C            .byte	$1C
04093 0DFE                        15            .byte	$15
04094 0DFF                        00            .byte	0
04095 0E00                        1C            .byte	$1C
04096 0E01                        1C            .byte	$1C
04097 0E02                        00            .byte	0
04098 0E03                        15            .byte	$15
04099 0E04                        1C            .byte	$1C
04100 0E05                        00            .byte	0
04101 0E06                        0E            .byte	$E
04102 0E07                        1C            .byte	$1C
04103 0E08                        00            .byte	0
04104 0E09                        07            .byte	7
04105 0E0A                        1C            .byte	$1C
04106                                           ! 849   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04107 0E0B                        0E            .byte	$E
04108 0E0C                        0E            .byte	$E
04109 0E0D                        1C            .byte	$1C
04110 0E0E                        11            .byte	$11
04111 0E0F                        0E            .byte	$E
04112 0E10                        1C            .byte	$1C
04113 0E11                        15            .byte	$15
04114 0E12                        0E            .byte	$E
04115 0E13                        1C            .byte	$1C
04116 0E14                        18            .byte	$18
04117 0E15                        0E            .byte	$E
04118 0E16                        1C            .byte	$1C
04119 0E17                        1C            .byte	$1C
04120 0E18                        0E            .byte	$E
04121 0E19                        1C            .byte	$1C
04122 0E1A                        1C            .byte	$1C
04123 0E1B                        0E            .byte	$E
04124 0E1C                        18            .byte	$18
04125 0E1D                        1C            .byte	$1C
04126 0E1E                        0E            .byte	$E
04127 0E1F                        15            .byte	$15
04128 0E20                        1C            .byte	$1C
04129 0E21                        0E            .byte	$E
04130 0E22                        11            .byte	$11
04131                                           ! 850   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04132 0E23                        1C            .byte	$1C
04133 0E24                        0E            .byte	$E
04134 0E25                        0E            .byte	$E
04135 0E26                        1C            .byte	$1C
04136 0E27                        11            .byte	$11
04137 0E28                        0E            .byte	$E
04138 0E29                        1C            .byte	$1C
04139 0E2A                        15            .byte	$15
04140 0E2B                        0E            .byte	$E
04141 0E2C                        1C            .byte	$1C
04142 0E2D                        18            .byte	$18
04143 0E2E                        0E            .byte	$E
04144 0E2F                        1C            .byte	$1C
04145 0E30                        1C            .byte	$1C
04146 0E31                        0E            .byte	$E
04147 0E32                        18            .byte	$18
04148 0E33                        1C            .byte	$1C
04149 0E34                        0E            .byte	$E
04150 0E35                        15            .byte	$15
04151 0E36                        1C            .byte	$1C
04152 0E37                        0E            .byte	$E
04153 0E38                        11            .byte	$11
04154 0E39                        1C            .byte	$1C
04155 0E3A                        0E            .byte	$E
04156                                           ! 851   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04157 0E3B                        0E            .byte	$E
04158 0E3C                        1C            .byte	$1C
04159 0E3D                        0E            .byte	$E
04160 0E3E                        0E            .byte	$E
04161 0E3F                        1C            .byte	$1C
04162 0E40                        11            .byte	$11
04163 0E41                        0E            .byte	$E
04164 0E42                        1C            .byte	$1C
04165 0E43                        15            .byte	$15
04166 0E44                        0E            .byte	$E
04167 0E45                        1C            .byte	$1C
04168 0E46                        18            .byte	$18
04169 0E47                        0E            .byte	$E
04170 0E48                        1C            .byte	$1C
04171 0E49                        1C            .byte	$1C
04172 0E4A                        0E            .byte	$E
04173 0E4B                        18            .byte	$18
04174 0E4C                        1C            .byte	$1C
04175 0E4D                        0E            .byte	$E
04176 0E4E                        15            .byte	$15
04177 0E4F                        1C            .byte	$1C
04178 0E50                        0E            .byte	$E
04179 0E51                        11            .byte	$11
04180 0E52                        1C            .byte	$1C
04181                                           ! 852   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04182 0E53                        14            .byte	$14
04183 0E54                        14            .byte	$14
04184 0E55                        1C            .byte	$1C
04185 0E56                        16            .byte	$16
04186 0E57                        14            .byte	$14
04187 0E58                        1C            .byte	$1C
04188 0E59                        18            .byte	$18
04189 0E5A                        14            .byte	$14
04190 0E5B                        1C            .byte	$1C
04191 0E5C                        1A            .byte	$1A
04192 0E5D                        14            .byte	$14
04193 0E5E                        1C            .byte	$1C
04194 0E5F                        1C            .byte	$1C
04195 0E60                        14            .byte	$14
04196 0E61                        1C            .byte	$1C
04197 0E62                        1C            .byte	$1C
04198 0E63                        14            .byte	$14
04199 0E64                        1A            .byte	$1A
04200 0E65                        1C            .byte	$1C
04201 0E66                        14            .byte	$14
04202 0E67                        18            .byte	$18
04203 0E68                        1C            .byte	$1C
04204 0E69                        14            .byte	$14
04205 0E6A                        16            .byte	$16
04206                                           ! 853   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14,
04207 0E6B                        1C            .byte	$1C
04208 0E6C                        14            .byte	$14
04209 0E6D                        14            .byte	$14
04210 0E6E                        1C            .byte	$1C
04211 0E6F                        16            .byte	$16
04212 0E70                        14            .byte	$14
04213 0E71                        1C            .byte	$1C
04214 0E72                        18            .byte	$18
04215                                           ! 853  0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04216 0E73                        14            .byte	$14
04217 0E74                        1C            .byte	$1C
04218 0E75                        1A            .byte	$1A
04219 0E76                        14            .byte	$14
04220 0E77                        1C            .byte	$1C
04221 0E78                        1C            .byte	$1C
04222 0E79                        14            .byte	$14
04223 0E7A                        1A            .byte	$1A
04224 0E7B                        1C            .byte	$1C
04225 0E7C                        14            .byte	$14
04226 0E7D                        18            .byte	$18
04227 0E7E                        1C            .byte	$1C
04228 0E7F                        14            .byte	$14
04229 0E80                        16            .byte	$16
04230 0E81                        1C            .byte	$1C
04231 0E82                        14            .byte	$14
04232                                           ! 854   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04233 0E83                        14            .byte	$14
04234 0E84                        1C            .byte	$1C
04235 0E85                        14            .byte	$14
04236 0E86                        14            .byte	$14
04237 0E87                        1C            .byte	$1C
04238 0E88                        16            .byte	$16
04239 0E89                        14            .byte	$14
04240 0E8A                        1C            .byte	$1C
04241 0E8B                        18            .byte	$18
04242 0E8C                        14            .byte	$14
04243 0E8D                        1C            .byte	$1C
04244 0E8E                        1A            .byte	$1A
04245 0E8F                        14            .byte	$14
04246 0E90                        1C            .byte	$1C
04247 0E91                        1C            .byte	$1C
04248 0E92                        14            .byte	$14
04249 0E93                        1A            .byte	$1A
04250 0E94                        1C            .byte	$1C
04251 0E95                        14            .byte	$14
04252 0E96                        18            .byte	$18
04253 0E97                        1C            .byte	$1C
04254 0E98                        14            .byte	$14
04255 0E99                        16            .byte	$16
04256 0E9A                        1C            .byte	$1C
04257                                           ! 855   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04258 0E9B                        00            .byte	0
04259 0E9C                        00            .byte	0
04260 0E9D                        10            .byte	$10
04261 0E9E                        04            .byte	4
04262 0E9F                        00            .byte	0
04263 0EA0                        10            .byte	$10
04264 0EA1                        08            .byte	8
04265 0EA2                        00            .byte	0
04266 0EA3                        10            .byte	$10
04267 0EA4                        0C            .byte	$C
04268 0EA5                        00            .byte	0
04269 0EA6                        10            .byte	$10
04270 0EA7                        10            .byte	$10
04271 0EA8                        00            .byte	0
04272 0EA9                        10            .byte	$10
04273 0EAA                        10            .byte	$10
04274 0EAB                        00            .byte	0
04275 0EAC                        0C            .byte	$C
04276 0EAD                        10            .byte	$10
04277 0EAE                        00            .byte	0
04278 0EAF                        08            .byte	8
04279 0EB0                        10            .byte	$10
04280 0EB1                        00            .byte	0
04281 0EB2                        04            .byte	4
04282                                           ! 856   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
04283 0EB3                        10            .byte	$10
04284 0EB4                        00            .byte	0
04285 0EB5                        00            .byte	0
04286 0EB6                        10            .byte	$10
04287 0EB7                        04            .byte	4
04288 0EB8                        00            .byte	0
04289 0EB9                        10            .byte	$10
04290 0EBA                        08            .byte	8
04291 0EBB                        00            .byte	0
04292 0EBC                        10            .byte	$10
04293 0EBD                        0C            .byte	$C
04294 0EBE                        00            .byte	0
04295 0EBF                        10            .byte	$10
04296 0EC0                        10            .byte	$10
04297 0EC1                        00            .byte	0
04298 0EC2                        0C            .byte	$C
04299 0EC3                        10            .byte	$10
04300 0EC4                        00            .byte	0
04301 0EC5                        08            .byte	8
04302 0EC6                        10            .byte	$10
04303 0EC7                        00            .byte	0
04304 0EC8                        04            .byte	4
04305 0EC9                        10            .byte	$10
04306 0ECA                        00            .byte	0
04307                                           ! 857   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04308 0ECB                        00            .byte	0
04309 0ECC                        10            .byte	$10
04310 0ECD                        00            .byte	0
04311 0ECE                        00            .byte	0
04312 0ECF                        10            .byte	$10
04313 0ED0                        04            .byte	4
04314 0ED1                        00            .byte	0
04315 0ED2                        10            .byte	$10
04316 0ED3                        08            .byte	8
04317 0ED4                        00            .byte	0
04318 0ED5                        10            .byte	$10
04319 0ED6                        0C            .byte	$C
04320 0ED7                        00            .byte	0
04321 0ED8                        10            .byte	$10
04322 0ED9                        10            .byte	$10
04323 0EDA                        00            .byte	0
04324 0EDB                        0C            .byte	$C
04325 0EDC                        10            .byte	$10
04326 0EDD                        00            .byte	0
04327 0EDE                        08            .byte	8
04328 0EDF                        10            .byte	$10
04329 0EE0                        00            .byte	0
04330 0EE1                        04            .byte	4
04331 0EE2                        10            .byte	$10
04332                                           ! 858   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04333 0EE3                        08            .byte	8
04334 0EE4                        08            .byte	8
04335 0EE5                        10            .byte	$10
04336 0EE6                        0A            .byte	$A
04337 0EE7                        08            .byte	8
04338 0EE8                        10            .byte	$10
04339 0EE9                        0C            .byte	$C
04340 0EEA                        08            .byte	8
04341 0EEB                        10            .byte	$10
04342 0EEC                        0E            .byte	$E
04343 0EED                        08            .byte	8
04344 0EEE                        10            .byte	$10
04345 0EEF                        10            .byte	$10
04346 0EF0                        08            .byte	8
04347 0EF1                        10            .byte	$10
04348 0EF2                        10            .byte	$10
04349 0EF3                        08            .byte	8
04350 0EF4                        0E            .byte	$E
04351 0EF5                        10            .byte	$10
04352 0EF6                        08            .byte	8
04353 0EF7                        0C            .byte	$C
04354 0EF8                        10            .byte	$10
04355 0EF9                        08            .byte	8
04356 0EFA                        0A            .byte	$A
04357                                           ! 859   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04358 0EFB                        10            .byte	$10
04359 0EFC                        08            .byte	8
04360 0EFD                        08            .byte	8
04361 0EFE                        10            .byte	$10
04362 0EFF                        0A            .byte	$A
04363 0F00                        08            .byte	8
04364 0F01                        10            .byte	$10
04365 0F02                        0C            .byte	$C
04366 0F03                        08            .byte	8
04367 0F04                        10            .byte	$10
04368 0F05                        0E            .byte	$E
04369 0F06                        08            .byte	8
04370 0F07                        10            .byte	$10
04371 0F08                        10            .byte	$10
04372 0F09                        08            .byte	8
04373 0F0A                        0E            .byte	$E
04374 0F0B                        10            .byte	$10
04375 0F0C                        08            .byte	8
04376 0F0D                        0C            .byte	$C
04377 0F0E                        10            .byte	$10
04378 0F0F                        08            .byte	8
04379 0F10                        0A            .byte	$A
04380 0F11                        10            .byte	$10
04381 0F12                        08            .byte	8
04382                                           ! 860   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04383 0F13                        08            .byte	8
04384 0F14                        10            .byte	$10
04385 0F15                        08            .byte	8
04386 0F16                        08            .byte	8
04387 0F17                        10            .byte	$10
04388 0F18                        0A            .byte	$A
04389 0F19                        08            .byte	8
04390 0F1A                        10            .byte	$10
04391 0F1B                        0C            .byte	$C
04392 0F1C                        08            .byte	8
04393 0F1D                        10            .byte	$10
04394 0F1E                        0E            .byte	$E
04395 0F1F                        08            .byte	8
04396 0F20                        10            .byte	$10
04397 0F21                        10            .byte	$10
04398 0F22                        08            .byte	8
04399 0F23                        0E            .byte	$E
04400 0F24                        10            .byte	$10
04401 0F25                        08            .byte	8
04402 0F26                        0C            .byte	$C
04403 0F27                        10            .byte	$10
04404 0F28                        08            .byte	8
04405 0F29                        0A            .byte	$A
04406 0F2A                        10            .byte	$10
04407                                           ! 861   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04408 0F2B                        0B            .byte	$B
04409 0F2C                        0B            .byte	$B
04410 0F2D                        10            .byte	$10
04411 0F2E                        0C            .byte	$C
04412 0F2F                        0B            .byte	$B
04413 0F30                        10            .byte	$10
04414 0F31                        0D            .byte	$D
04415 0F32                        0B            .byte	$B
04416 0F33                        10            .byte	$10
04417 0F34                        0F            .byte	$F
04418 0F35                        0B            .byte	$B
04419 0F36                        10            .byte	$10
04420 0F37                        10            .byte	$10
04421 0F38                        0B            .byte	$B
04422 0F39                        10            .byte	$10
04423 0F3A                        10            .byte	$10
04424 0F3B                        0B            .byte	$B
04425 0F3C                        0F            .byte	$F
04426 0F3D                        10            .byte	$10
04427 0F3E                        0B            .byte	$B
04428 0F3F                        0D            .byte	$D
04429 0F40                        10            .byte	$10
04430 0F41                        0B            .byte	$B
04431 0F42                        0C            .byte	$C
04432                                           ! 862   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04433 0F43                        10            .byte	$10
04434 0F44                        0B            .byte	$B
04435 0F45                        0B            .byte	$B
04436 0F46                        10            .byte	$10
04437 0F47                        0C            .byte	$C
04438 0F48                        0B            .byte	$B
04439 0F49                        10            .byte	$10
04440 0F4A                        0D            .byte	$D
04441 0F4B                        0B            .byte	$B
04442 0F4C                        10            .byte	$10
04443 0F4D                        0F            .byte	$F
04444 0F4E                        0B            .byte	$B
04445 0F4F                        10            .byte	$10
04446 0F50                        10            .byte	$10
04447 0F51                        0B            .byte	$B
04448 0F52                        0F            .byte	$F
04449 0F53                        10            .byte	$10
04450 0F54                        0B            .byte	$B
04451 0F55                        0D            .byte	$D
04452 0F56                        10            .byte	$10
04453 0F57                        0B            .byte	$B
04454 0F58                        0C            .byte	$C
04455 0F59                        10            .byte	$10
04456 0F5A                        0B            .byte	$B
04457                                           ! 863   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04458 0F5B                        0B            .byte	$B
04459 0F5C                        10            .byte	$10
04460 0F5D                        0B            .byte	$B
04461 0F5E                        0B            .byte	$B
04462 0F5F                        10            .byte	$10
04463 0F60                        0C            .byte	$C
04464 0F61                        0B            .byte	$B
04465 0F62                        10            .byte	$10
04466 0F63                        0D            .byte	$D
04467 0F64                        0B            .byte	$B
04468 0F65                        10            .byte	$10
04469 0F66                        0F            .byte	$F
04470 0F67                        0B            .byte	$B
04471 0F68                        10            .byte	$10
04472 0F69                        10            .byte	$10
04473 0F6A                        0B            .byte	$B
04474 0F6B                        0F            .byte	$F
04475 0F6C                        10            .byte	$10
04476 0F6D                        0B            .byte	$B
04477 0F6E                        0D            .byte	$D
04478 0F6F                        10            .byte	$10
04479 0F70                        0B            .byte	$B
04480 0F71                        0C            .byte	$C
04481 0F72                        10            .byte	$10
04482                                           ! 864   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04483 0F73                        00            .byte	0
04484 0F74                        00            .byte	0
04485 0F75                        00            .byte	0
04486 0F76                        00            .byte	0
04487 0F77                        00            .byte	0
04488 0F78                        00            .byte	0
04489 0F79                        00            .byte	0
04490 0F7A                        00            .byte	0
04491 0F7B                        00            .byte	0
04492 0F7C                        00            .byte	0
04493 0F7D                        00            .byte	0
04494 0F7E                        00            .byte	0
04495 0F7F                        00            .byte	0
04496 0F80                        00            .byte	0
04497 0F81                        00            .byte	0
04498 0F82                        00            .byte	0
04499 0F83                        00            .byte	0
04500 0F84                        00            .byte	0
04501 0F85                        00            .byte	0
04502 0F86                        00            .byte	0
04503 0F87                        00            .byte	0
04504 0F88                        00            .byte	0
04505 0F89                        00            .byte	0
04506                                           ! 865 };
04507 0F8A                        00            .byte	0
04508                                           !BCC_EOS
04509                                           ! 866 static Bit8u static_functionality[0x10]=
04510                                           ! 867 {
04511                       00000F8B            _static_functionality:
04512                                           ! 868          0xff,
04513 0F8B                        FF            .byte	$FF
04514                                           ! 869          0xe0,
04515 0F8C                        E0            .byte	$E0
04516                                           ! 870          0x0f,
04517 0F8D                        0F            .byte	$F
04518                                           ! 871          0x00, 0x00, 0x00, 0x00,
04519 0F8E                        00            .byte	0
04520 0F8F                        00            .byte	0
04521 0F90                        00            .byte	0
04522 0F91                        00            .byte	0
04523                                           ! 872          0x07,
04524 0F92                        07            .byte	7
04525                                           ! 873          0x02,
04526 0F93                        02            .byte	2
04527                                           ! 874          0x08,
04528 0F94                        08            .byte	8
04529                                           ! 875          0xe7,
04530 0F95                        E7            .byte	$E7
04531                                           ! 876          0x0c,
04532 0F96                        0C            .byte	$C
04533                                           ! 877          0x00,
04534 0F97                        00            .byte	0
04535                                           ! 878          0x00,
04536 0F98                        00            .byte	0
04537                                           ! 879          0x00,
04538 0F99                        00            .byte	0
04539                                           ! 880          0x00
04540                                           ! 881 };
04541 0F9A                        00            .byte	0
04542                                           !BCC_EOS
04543                                           ! 882 static Bit8u vgafont8[256*8]=
04544                                           ! 883 {
04545                       00000F9B            _vgafont8:
04546                                           ! 884  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04547 0F9B                        00            .byte	0
04548 0F9C                        00            .byte	0
04549 0F9D                        00            .byte	0
04550 0F9E                        00            .byte	0
04551 0F9F                        00            .byte	0
04552 0FA0                        00            .byte	0
04553 0FA1                        00            .byte	0
04554 0FA2                        00            .byte	0
04555                                           ! 885  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04556 0FA3                        7E            .byte	$7E
04557 0FA4                        81            .byte	$81
04558 0FA5                        A5            .byte	$A5
04559 0FA6                        81            .byte	$81
04560 0FA7                        BD            .byte	$BD
04561 0FA8                        99            .byte	$99
04562 0FA9                        81            .byte	$81
04563 0FAA                        7E            .byte	$7E
04564                                           ! 886  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04565 0FAB                        7E            .byte	$7E
04566 0FAC                        FF            .byte	$FF
04567 0FAD                        DB            .byte	$DB
04568 0FAE                        FF            .byte	$FF
04569 0FAF                        C3            .byte	$C3
04570 0FB0                        E7            .byte	$E7
04571 0FB1                        FF            .byte	$FF
04572 0FB2                        7E            .byte	$7E
04573                                           ! 887  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04574 0FB3                        6C            .byte	$6C
04575 0FB4                        FE            .byte	$FE
04576 0FB5                        FE            .byte	$FE
04577 0FB6                        FE            .byte	$FE
04578 0FB7                        7C            .byte	$7C
04579 0FB8                        38            .byte	$38
04580 0FB9                        10            .byte	$10
04581 0FBA                        00            .byte	0
04582                                           ! 888  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04583 0FBB                        10            .byte	$10
04584 0FBC                        38            .byte	$38
04585 0FBD                        7C            .byte	$7C
04586 0FBE                        FE            .byte	$FE
04587 0FBF                        7C            .byte	$7C
04588 0FC0                        38            .byte	$38
04589 0FC1                        10            .byte	$10
04590 0FC2                        00            .byte	0
04591                                           ! 889 
04592                                           ! 889  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04593 0FC3                        38            .byte	$38
04594 0FC4                        7C            .byte	$7C
04595 0FC5                        38            .byte	$38
04596 0FC6                        FE            .byte	$FE
04597 0FC7                        FE            .byte	$FE
04598 0FC8                        7C            .byte	$7C
04599 0FC9                        38            .byte	$38
04600 0FCA                        7C            .byte	$7C
04601                                           ! 890  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04602 0FCB                        10            .byte	$10
04603 0FCC                        10            .byte	$10
04604 0FCD                        38            .byte	$38
04605 0FCE                        7C            .byte	$7C
04606 0FCF                        FE            .byte	$FE
04607 0FD0                        7C            .byte	$7C
04608 0FD1                        38            .byte	$38
04609 0FD2                        7C            .byte	$7C
04610                                           ! 891  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04611 0FD3                        00            .byte	0
04612 0FD4                        00            .byte	0
04613 0FD5                        18            .byte	$18
04614 0FD6                        3C            .byte	$3C
04615 0FD7                        3C            .byte	$3C
04616 0FD8                        18            .byte	$18
04617 0FD9                        00            .byte	0
04618 0FDA                        00            .byte	0
04619                                           ! 892  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04620 0FDB                        FF            .byte	$FF
04621 0FDC                        FF            .byte	$FF
04622 0FDD                        E7            .byte	$E7
04623 0FDE                        C3            .byte	$C3
04624 0FDF                        C3            .byte	$C3
04625 0FE0                        E7            .byte	$E7
04626 0FE1                        FF            .byte	$FF
04627 0FE2                        FF            .byte	$FF
04628                                           ! 893  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04629 0FE3                        00            .byte	0
04630 0FE4                        3C            .byte	$3C
04631 0FE5                        66            .byte	$66
04632 0FE6                        42            .byte	$42
04633 0FE7                        42            .byte	$42
04634 0FE8                        66            .byte	$66
04635 0FE9                        3C            .byte	$3C
04636 0FEA                        00            .byte	0
04637                                           ! 894  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04638 0FEB                        FF            .byte	$FF
04639 0FEC                        C3            .byte	$C3
04640 0FED                        99            .byte	$99
04641 0FEE                        BD            .byte	$BD
04642 0FEF                        BD            .byte	$BD
04643 0FF0                        99            .byte	$99
04644 0FF1                        C3            .byte	$C3
04645 0FF2                        FF            .byte	$FF
04646                                           ! 895  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04647 0FF3                        0F            .byte	$F
04648 0FF4                        07            .byte	7
04649 0FF5                        0F            .byte	$F
04650 0FF6                        7D            .byte	$7D
04651 0FF7                        CC            .byte	$CC
04652 0FF8                        CC            .byte	$CC
04653 0FF9                        CC            .byte	$CC
04654 0FFA                        78            .byte	$78
04655                                           ! 896  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04656 0FFB                        3C            .byte	$3C
04657 0FFC                        66            .byte	$66
04658 0FFD                        66            .byte	$66
04659 0FFE                        66            .byte	$66
04660 0FFF                        3C            .byte	$3C
04661 1000                        18            .byte	$18
04662 1001                        7E            .byte	$7E
04663 1002                        18            .byte	$18
04664                                           ! 897  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04665 1003                        3F            .byte	$3F
04666 1004                        33            .byte	$33
04667 1005                        3F            .byte	$3F
04668 1006                        30            .byte	$30
04669 1007                        30            .byte	$30
04670 1008                        70            .byte	$70
04671 1009                        F0            .byte	$F0
04672 100A                        E0            .byte	$E0
04673                                           ! 898  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04674 100B                        7F            .byte	$7F
04675 100C                        63            .byte	$63
04676 100D                        7F            .byte	$7F
04677 100E                        63            .byte	$63
04678 100F                        63            .byte	$63
04679 1010                        67            .byte	$67
04680 1011                        E6            .byte	$E6
04681 1012                        C0            .byte	$C0
04682                                           ! 899  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04683 1013                        99            .byte	$99
04684 1014                        5A            .byte	$5A
04685 1015                        3C            .byte	$3C
04686 1016                        E7            .byte	$E7
04687 1017                        E7            .byte	$E7
04688 1018                        3C            .byte	$3C
04689 1019                        5A            .byte	$5A
04690 101A                        99            .byte	$99
04691                                           ! 900  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04692 101B                        80            .byte	$80
04693 101C                        E0            .byte	$E0
04694 101D                        F8            .byte	$F8
04695 101E                        FE            .byte	$FE
04696 101F                        F8            .byte	$F8
04697 1020                        E0            .byte	$E0
04698 1021                        80            .byte	$80
04699 1022                        00            .byte	0
04700                                           ! 901  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04701 1023                        02            .byte	2
04702 1024                        0E            .byte	$E
04703 1025                        3E            .byte	$3E
04704 1026                        FE            .byte	$FE
04705 1027                        3E            .byte	$3E
04706 1028                        0E            .byte	$E
04707 1029                        02            .byte	2
04708 102A                        00            .byte	0
04709                                           ! 902  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04710 102B                        18            .byte	$18
04711 102C                        3C            .byte	$3C
04712 102D                        7E            .byte	$7E
04713 102E                        18            .byte	$18
04714 102F                        18            .byte	$18
04715 1030                        7E            .byte	$7E
04716 1031                        3C            .byte	$3C
04717 1032                        18            .byte	$18
04718                                           ! 903  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04719 1033                        66            .byte	$66
04720 1034                        66            .byte	$66
04721 1035                        66            .byte	$66
04722 1036                        66            .byte	$66
04723 1037                        66            .byte	$66
04724 1038                        00            .byte	0
04725 1039                        66            .byte	$66
04726 103A                        00            .byte	0
04727                                           ! 904  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04728 103B                        7F            .byte	$7F
04729 103C                        DB            .byte	$DB
04730 103D                        DB            .byte	$DB
04731 103E                        7B            .byte	$7B
04732 103F                        1B            .byte	$1B
04733 1040                        1B            .byte	$1B
04734 1041                        1B            .byte	$1B
04735 1042                        00            .byte	0
04736                                           ! 905  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04737 1043                        3E            .byte	$3E
04738 1044                        63            .byte	$63
04739 1045                        38            .byte	$38
04740 1046                        6C            .byte	$6C
04741 1047                        6C            .byte	$6C
04742 1048                        38            .byte	$38
04743 1049                        CC            .byte	$CC
04744 104A                        78            .byte	$78
04745                                           ! 906  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04746 104B                        00            .byte	0
04747 104C                        00            .byte	0
04748 104D                        00            .byte	0
04749 104E                        00            .byte	0
04750 104F                        7E            .byte	$7E
04751 1050                        7E            .byte	$7E
04752 1051                        7E            .byte	$7E
04753 1052                        00            .byte	0
04754                                           ! 907  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04755 1053                        18            .byte	$18
04756 1054                        3C            .byte	$3C
04757 1055                        7E            .byte	$7E
04758 1056                        18            .byte	$18
04759 1057                        7E            .byte	$7E
04760 1058                        3C            .byte	$3C
04761 1059                        18            .byte	$18
04762 105A                        FF            .byte	$FF
04763                                           ! 908  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04764 105B                        18            .byte	$18
04765 105C                        3C            .byte	$3C
04766 105D                        7E            .byte	$7E
04767 105E                        18            .byte	$18
04768 105F                        18            .byte	$18
04769 1060                        18            .byte	$18
04770 1061                        18            .byte	$18
04771 1062                        00            .byte	0
04772                                           ! 909  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04773 1063                        18            .byte	$18
04774 1064                        18            .byte	$18
04775 1065                        18            .byte	$18
04776 1066                        18            .byte	$18
04777 1067                        7E            .byte	$7E
04778 1068                        3C            .byte	$3C
04779 1069                        18            .byte	$18
04780 106A                        00            .byte	0
04781                                           ! 910  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04782 106B                        00            .byte	0
04783 106C                        18            .byte	$18
04784 106D                        0C            .byte	$C
04785 106E                        FE            .byte	$FE
04786 106F                        0C            .byte	$C
04787 1070                        18            .byte	$18
04788 1071                        00            .byte	0
04789 1072                        00            .byte	0
04790                                           ! 911  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04791 1073                        00            .byte	0
04792 1074                        30            .byte	$30
04793 1075                        60            .byte	$60
04794 1076                        FE            .byte	$FE
04795 1077                        60            .byte	$60
04796 1078                        30            .byte	$30
04797 1079                        00            .byte	0
04798 107A                        00            .byte	0
04799                                           ! 912  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04800 107B                        00            .byte	0
04801 107C                        00            .byte	0
04802 107D                        C0            .byte	$C0
04803 107E                        C0            .byte	$C0
04804 107F                        C0            .byte	$C0
04805 1080                        FE            .byte	$FE
04806 1081                        00            .byte	0
04807 1082                        00            .byte	0
04808                                           ! 913  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04809 1083                        00            .byte	0
04810 1084                        24            .byte	$24
04811 1085                        66            .byte	$66
04812 1086                        FF            .byte	$FF
04813 1087                        66            .byte	$66
04814 1088                        24            .byte	$24
04815 1089                        00            .byte	0
04816 108A                        00            .byte	0
04817                                           ! 914  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04818 108B                        00            .byte	0
04819 108C                        18            .byte	$18
04820 108D                        3C            .byte	$3C
04821 108E                        7E            .byte	$7E
04822 108F                        FF            .byte	$FF
04823 1090                        FF            .byte	$FF
04824 1091                        00            .byte	0
04825 1092                        00            .byte	0
04826                                           ! 915  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04827 1093                        00            .byte	0
04828 1094                        FF            .byte	$FF
04829 1095                        FF            .byte	$FF
04830 1096                        7E            .byte	$7E
04831 1097                        3C            .byte	$3C
04832 1098                        18            .byte	$18
04833 1099                        00            .byte	0
04834 109A                        00            .byte	0
04835                                           ! 916  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04836 109B                        00            .byte	0
04837 109C                        00            .byte	0
04838 109D                        00            .byte	0
04839 109E                        00            .byte	0
04840 109F                        00            .byte	0
04841 10A0                        00            .byte	0
04842 10A1                        00            .byte	0
04843 10A2                        00            .byte	0
04844                                           ! 917  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04845 10A3                        30            .byte	$30
04846 10A4                        78            .byte	$78
04847 10A5                        78            .byte	$78
04848 10A6                        30            .byte	$30
04849 10A7                        30            .byte	$30
04850 10A8                        00            .byte	0
04851 10A9                        30            .byte	$30
04852 10AA                        00            .byte	0
04853                                           ! 918  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04854 10AB                        6C            .byte	$6C
04855 10AC                        6C            .byte	$6C
04856 10AD                        6C            .byte	$6C
04857 10AE                        00            .byte	0
04858 10AF                        00            .byte	0
04859 10B0                        00            .byte	0
04860 10B1                        00            .byte	0
04861 10B2                        00            .byte	0
04862                                           ! 919  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04863 10B3                        6C            .byte	$6C
04864 10B4                        6C            .byte	$6C
04865 10B5                        FE            .byte	$FE
04866 10B6                        6C            .byte	$6C
04867 10B7                        FE            .byte	$FE
04868 10B8                        6C            .byte	$6C
04869 10B9                        6C            .byte	$6C
04870 10BA                        00            .byte	0
04871                                           ! 920  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04872 10BB                        30            .byte	$30
04873 10BC                        7C            .byte	$7C
04874 10BD                        C0            .byte	$C0
04875 10BE                        78            .byte	$78
04876 10BF                        0C            .byte	$C
04877 10C0                        F8            .byte	$F8
04878 10C1                        30            .byte	$30
04879 10C2                        00            .byte	0
04880                                           ! 921  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04881 10C3                        00            .byte	0
04882 10C4                        C6            .byte	$C6
04883 10C5                        CC            .byte	$CC
04884 10C6                        18            .byte	$18
04885 10C7                        30            .byte	$30
04886 10C8                        66            .byte	$66
04887 10C9                        C6            .byte	$C6
04888 10CA                        00            .byte	0
04889                                           ! 922  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04890 10CB                        38            .byte	$38
04891 10CC                        6C            .byte	$6C
04892 10CD                        38            .byte	$38
04893 10CE                        76            .byte	$76
04894 10CF                        DC            .byte	$DC
04895 10D0                        CC            .byte	$CC
04896 10D1                        76            .byte	$76
04897 10D2                        00            .byte	0
04898                                           ! 923  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04899 10D3                        60            .byte	$60
04900 10D4                        60            .byte	$60
04901 10D5                        C0            .byte	$C0
04902 10D6                        00            .byte	0
04903 10D7                        00            .byte	0
04904 10D8                        00            .byte	0
04905 10D9                        00            .byte	0
04906 10DA                        00            .byte	0
04907                                           ! 924  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04908 10DB                        18            .byte	$18
04909 10DC                        30            .byte	$30
04910 10DD                        60            .byte	$60
04911 10DE                        60            .byte	$60
04912 10DF                        60            .byte	$60
04913 10E0                        30            .byte	$30
04914 10E1                        18            .byte	$18
04915 10E2                        00            .byte	0
04916                                           ! 925  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04917 10E3                        60            .byte	$60
04918 10E4                        30            .byte	$30
04919 10E5                        18            .byte	$18
04920 10E6                        18            .byte	$18
04921 10E7                        18            .byte	$18
04922 10E8                        30            .byte	$30
04923 10E9                        60            .byte	$60
04924 10EA                        00            .byte	0
04925                                           ! 926  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04926 10EB                        00            .byte	0
04927 10EC                        66            .byte	$66
04928 10ED                        3C            .byte	$3C
04929 10EE                        FF            .byte	$FF
04930 10EF                        3C            .byte	$3C
04931 10F0                        66            .byte	$66
04932 10F1                        00            .byte	0
04933 10F2                        00            .byte	0
04934                                           ! 927  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04935 10F3                        00            .byte	0
04936 10F4                        30            .byte	$30
04937 10F5                        30            .byte	$30
04938 10F6                        FC            .byte	$FC
04939 10F7                        30            .byte	$30
04940 10F8                        30            .byte	$30
04941 10F9                        00            .byte	0
04942 10FA                        00            .byte	0
04943                                           ! 928  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04944 10FB                        00            .byte	0
04945 10FC                        00            .byte	0
04946 10FD                        00            .byte	0
04947 10FE                        00            .byte	0
04948 10FF                        00            .byte	0
04949 1100                        30            .byte	$30
04950 1101                        30            .byte	$30
04951 1102                        60            .byte	$60
04952                                           ! 929  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04953 1103                        00            .byte	0
04954 1104                        00            .byte	0
04955 1105                        00            .byte	0
04956 1106                        FC            .byte	$FC
04957 1107                        00            .byte	0
04958 1108                        00            .byte	0
04959 1109                        00            .byte	0
04960 110A                        00            .byte	0
04961                                           ! 930  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x
04962 110B                        00            .byte	0
04963 110C                        00            .byte	0
04964 110D                        00            .byte	0
04965 110E                        00            .byte	0
04966 110F                        00            .byte	0
04967 1110                        30            .byte	$30
04968                                           ! 930 30, 0x00,
04969 1111                        30            .byte	$30
04970 1112                        00            .byte	0
04971                                           ! 931  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04972 1113                        06            .byte	6
04973 1114                        0C            .byte	$C
04974 1115                        18            .byte	$18
04975 1116                        30            .byte	$30
04976 1117                        60            .byte	$60
04977 1118                        C0            .byte	$C0
04978 1119                        80            .byte	$80
04979 111A                        00            .byte	0
04980                                           ! 932  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04981 111B                        7C            .byte	$7C
04982 111C                        C6            .byte	$C6
04983 111D                        CE            .byte	$CE
04984 111E                        DE            .byte	$DE
04985 111F                        F6            .byte	$F6
04986 1120                        E6            .byte	$E6
04987 1121                        7C            .byte	$7C
04988 1122                        00            .byte	0
04989                                           ! 933  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04990 1123                        30            .byte	$30
04991 1124                        70            .byte	$70
04992 1125                        30            .byte	$30
04993 1126                        30            .byte	$30
04994 1127                        30            .byte	$30
04995 1128                        30            .byte	$30
04996 1129                        FC            .byte	$FC
04997 112A                        00            .byte	0
04998                                           ! 934  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04999 112B                        78            .byte	$78
05000 112C                        CC            .byte	$CC
05001 112D                        0C            .byte	$C
05002 112E                        38            .byte	$38
05003 112F                        60            .byte	$60
05004 1130                        CC            .byte	$CC
05005 1131                        FC            .byte	$FC
05006 1132                        00            .byte	0
05007                                           ! 935  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
05008 1133                        78            .byte	$78
05009 1134                        CC            .byte	$CC
05010 1135                        0C            .byte	$C
05011 1136                        38            .byte	$38
05012 1137                        0C            .byte	$C
05013 1138                        CC            .byte	$CC
05014 1139                        78            .byte	$78
05015 113A                        00            .byte	0
05016                                           ! 936  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
05017 113B                        1C            .byte	$1C
05018 113C                        3C            .byte	$3C
05019 113D                        6C            .byte	$6C
05020 113E                        CC            .byte	$CC
05021 113F                        FE            .byte	$FE
05022 1140                        0C            .byte	$C
05023 1141                        1E            .byte	$1E
05024 1142                        00            .byte	0
05025                                           ! 937  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
05026 1143                        FC            .byte	$FC
05027 1144                        C0            .byte	$C0
05028 1145                        F8            .byte	$F8
05029 1146                        0C            .byte	$C
05030 1147                        0C            .byte	$C
05031 1148                        CC            .byte	$CC
05032 1149                        78            .byte	$78
05033 114A                        00            .byte	0
05034                                           ! 938  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
05035 114B                        38            .byte	$38
05036 114C                        60            .byte	$60
05037 114D                        C0            .byte	$C0
05038 114E                        F8            .byte	$F8
05039 114F                        CC            .byte	$CC
05040 1150                        CC            .byte	$CC
05041 1151                        78            .byte	$78
05042 1152                        00            .byte	0
05043                                           ! 939  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05044 1153                        FC            .byte	$FC
05045 1154                        CC            .byte	$CC
05046 1155                        0C            .byte	$C
05047 1156                        18            .byte	$18
05048 1157                        30            .byte	$30
05049 1158                        30            .byte	$30
05050 1159                        30            .byte	$30
05051 115A                        00            .byte	0
05052                                           ! 940  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05053 115B                        78            .byte	$78
05054 115C                        CC            .byte	$CC
05055 115D                        CC            .byte	$CC
05056 115E                        78            .byte	$78
05057 115F                        CC            .byte	$CC
05058 1160                        CC            .byte	$CC
05059 1161                        78            .byte	$78
05060 1162                        00            .byte	0
05061                                           ! 941  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05062 1163                        78            .byte	$78
05063 1164                        CC            .byte	$CC
05064 1165                        CC            .byte	$CC
05065 1166                        7C            .byte	$7C
05066 1167                        0C            .byte	$C
05067 1168                        18            .byte	$18
05068 1169                        70            .byte	$70
05069 116A                        00            .byte	0
05070                                           ! 942  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05071 116B                        00            .byte	0
05072 116C                        30            .byte	$30
05073 116D                        30            .byte	$30
05074 116E                        00            .byte	0
05075 116F                        00            .byte	0
05076 1170                        30            .byte	$30
05077 1171                        30            .byte	$30
05078 1172                        00            .byte	0
05079                                           ! 943  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05080 1173                        00            .byte	0
05081 1174                        30            .byte	$30
05082 1175                        30            .byte	$30
05083 1176                        00            .byte	0
05084 1177                        00            .byte	0
05085 1178                        30            .byte	$30
05086 1179                        30            .byte	$30
05087 117A                        60            .byte	$60
05088                                           ! 944  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05089 117B                        18            .byte	$18
05090 117C                        30            .byte	$30
05091 117D                        60            .byte	$60
05092 117E                        C0            .byte	$C0
05093 117F                        60            .byte	$60
05094 1180                        30            .byte	$30
05095 1181                        18            .byte	$18
05096 1182                        00            .byte	0
05097                                           ! 945  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05098 1183                        00            .byte	0
05099 1184                        00            .byte	0
05100 1185                        FC            .byte	$FC
05101 1186                        00            .byte	0
05102 1187                        00            .byte	0
05103 1188                        FC            .byte	$FC
05104 1189                        00            .byte	0
05105 118A                        00            .byte	0
05106                                           ! 946  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05107 118B                        60            .byte	$60
05108 118C                        30            .byte	$30
05109 118D                        18            .byte	$18
05110 118E                        0C            .byte	$C
05111 118F                        18            .byte	$18
05112 1190                        30            .byte	$30
05113 1191                        60            .byte	$60
05114 1192                        00            .byte	0
05115                                           ! 947  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05116 1193                        78            .byte	$78
05117 1194                        CC            .byte	$CC
05118 1195                        0C            .byte	$C
05119 1196                        18            .byte	$18
05120 1197                        30            .byte	$30
05121 1198                        00            .byte	0
05122 1199                        30            .byte	$30
05123 119A                        00            .byte	0
05124                                           ! 948  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05125 119B                        7C            .byte	$7C
05126 119C                        C6            .byte	$C6
05127 119D                        DE            .byte	$DE
05128 119E                        DE            .byte	$DE
05129 119F                        DE            .byte	$DE
05130 11A0                        C0            .byte	$C0
05131 11A1                        78            .byte	$78
05132 11A2                        00            .byte	0
05133                                           ! 949  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05134 11A3                        30            .byte	$30
05135 11A4                        78            .byte	$78
05136 11A5                        CC            .byte	$CC
05137 11A6                        CC            .byte	$CC
05138 11A7                        FC            .byte	$FC
05139 11A8                        CC            .byte	$CC
05140 11A9                        CC            .byte	$CC
05141 11AA                        00            .byte	0
05142                                           ! 950  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05143 11AB                        FC            .byte	$FC
05144 11AC                        66            .byte	$66
05145 11AD                        66            .byte	$66
05146 11AE                        7C            .byte	$7C
05147 11AF                        66            .byte	$66
05148 11B0                        66            .byte	$66
05149 11B1                        FC            .byte	$FC
05150 11B2                        00            .byte	0
05151                                           ! 951  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05152 11B3                        3C            .byte	$3C
05153 11B4                        66            .byte	$66
05154 11B5                        C0            .byte	$C0
05155 11B6                        C0            .byte	$C0
05156 11B7                        C0            .byte	$C0
05157 11B8                        66            .byte	$66
05158 11B9                        3C            .byte	$3C
05159 11BA                        00            .byte	0
05160                                           ! 952  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05161 11BB                        F8            .byte	$F8
05162 11BC                        6C            .byte	$6C
05163 11BD                        66            .byte	$66
05164 11BE                        66            .byte	$66
05165 11BF                        66            .byte	$66
05166 11C0                        6C            .byte	$6C
05167 11C1                        F8            .byte	$F8
05168 11C2                        00            .byte	0
05169                                           ! 953  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05170 11C3                        FE            .byte	$FE
05171 11C4                        62            .byte	$62
05172 11C5                        68            .byte	$68
05173 11C6                        78            .byte	$78
05174 11C7                        68            .byte	$68
05175 11C8                        62            .byte	$62
05176 11C9                        FE            .byte	$FE
05177 11CA                        00            .byte	0
05178                                           ! 954  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05179 11CB                        FE            .byte	$FE
05180 11CC                        62            .byte	$62
05181 11CD                        68            .byte	$68
05182 11CE                        78            .byte	$78
05183 11CF                        68            .byte	$68
05184 11D0                        60            .byte	$60
05185 11D1                        F0            .byte	$F0
05186 11D2                        00            .byte	0
05187                                           ! 955  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05188 11D3                        3C            .byte	$3C
05189 11D4                        66            .byte	$66
05190 11D5                        C0            .byte	$C0
05191 11D6                        C0            .byte	$C0
05192 11D7                        CE            .byte	$CE
05193 11D8                        66            .byte	$66
05194 11D9                        3E            .byte	$3E
05195 11DA                        00            .byte	0
05196                                           ! 956  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05197 11DB                        CC            .byte	$CC
05198 11DC                        CC            .byte	$CC
05199 11DD                        CC            .byte	$CC
05200 11DE                        FC            .byte	$FC
05201 11DF                        CC            .byte	$CC
05202 11E0                        CC            .byte	$CC
05203 11E1                        CC            .byte	$CC
05204 11E2                        00            .byte	0
05205                                           ! 957  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05206 11E3                        78            .byte	$78
05207 11E4                        30            .byte	$30
05208 11E5                        30            .byte	$30
05209 11E6                        30            .byte	$30
05210 11E7                        30            .byte	$30
05211 11E8                        30            .byte	$30
05212 11E9                        78            .byte	$78
05213 11EA                        00            .byte	0
05214                                           ! 958  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05215 11EB                        1E            .byte	$1E
05216 11EC                        0C            .byte	$C
05217 11ED                        0C            .byte	$C
05218 11EE                        0C            .byte	$C
05219 11EF                        CC            .byte	$CC
05220 11F0                        CC            .byte	$CC
05221 11F1                        78            .byte	$78
05222 11F2                        00            .byte	0
05223                                           ! 959  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05224 11F3                        E6            .byte	$E6
05225 11F4                        66            .byte	$66
05226 11F5                        6C            .byte	$6C
05227 11F6                        78            .byte	$78
05228 11F7                        6C            .byte	$6C
05229 11F8                        66            .byte	$66
05230 11F9                        E6            .byte	$E6
05231 11FA                        00            .byte	0
05232                                           ! 960  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05233 11FB                        F0            .byte	$F0
05234 11FC                        60            .byte	$60
05235 11FD                        60            .byte	$60
05236 11FE                        60            .byte	$60
05237 11FF                        62            .byte	$62
05238 1200                        66            .byte	$66
05239 1201                        FE            .byte	$FE
05240 1202                        00            .byte	0
05241                                           ! 961  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05242 1203                        C6            .byte	$C6
05243 1204                        EE            .byte	$EE
05244 1205                        FE            .byte	$FE
05245 1206                        FE            .byte	$FE
05246 1207                        D6            .byte	$D6
05247 1208                        C6            .byte	$C6
05248 1209                        C6            .byte	$C6
05249 120A                        00            .byte	0
05250                                           ! 962  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05251 120B                        C6            .byte	$C6
05252 120C                        E6            .byte	$E6
05253 120D                        F6            .byte	$F6
05254 120E                        DE            .byte	$DE
05255 120F                        CE            .byte	$CE
05256 1210                        C6            .byte	$C6
05257 1211                        C6            .byte	$C6
05258 1212                        00            .byte	0
05259                                           ! 963  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05260 1213                        38            .byte	$38
05261 1214                        6C            .byte	$6C
05262 1215                        C6            .byte	$C6
05263 1216                        C6            .byte	$C6
05264 1217                        C6            .byte	$C6
05265 1218                        6C            .byte	$6C
05266 1219                        38            .byte	$38
05267 121A                        00            .byte	0
05268                                           ! 964  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05269 121B                        FC            .byte	$FC
05270 121C                        66            .byte	$66
05271 121D                        66            .byte	$66
05272 121E                        7C            .byte	$7C
05273 121F                        60            .byte	$60
05274 1220                        60            .byte	$60
05275 1221                        F0            .byte	$F0
05276 1222                        00            .byte	0
05277                                           ! 965  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05278 1223                        78            .byte	$78
05279 1224                        CC            .byte	$CC
05280 1225                        CC            .byte	$CC
05281 1226                        CC            .byte	$CC
05282 1227                        DC            .byte	$DC
05283 1228                        78            .byte	$78
05284 1229                        1C            .byte	$1C
05285 122A                        00            .byte	0
05286                                           ! 966  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05287 122B                        FC            .byte	$FC
05288 122C                        66            .byte	$66
05289 122D                        66            .byte	$66
05290 122E                        7C            .byte	$7C
05291 122F                        6C            .byte	$6C
05292 1230                        66            .byte	$66
05293 1231                        E6            .byte	$E6
05294 1232                        00            .byte	0
05295                                           ! 967  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05296 1233                        78            .byte	$78
05297 1234                        CC            .byte	$CC
05298 1235                        E0            .byte	$E0
05299 1236                        70            .byte	$70
05300 1237                        1C            .byte	$1C
05301 1238                        CC            .byte	$CC
05302 1239                        78            .byte	$78
05303 123A                        00            .byte	0
05304                                           ! 968  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05305 123B                        FC            .byte	$FC
05306 123C                        B4            .byte	$B4
05307 123D                        30            .byte	$30
05308 123E                        30            .byte	$30
05309 123F                        30            .byte	$30
05310 1240                        30            .byte	$30
05311 1241                        78            .byte	$78
05312 1242                        00            .byte	0
05313                                           ! 969  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05314 1243                        CC            .byte	$CC
05315 1244                        CC            .byte	$CC
05316 1245                        CC            .byte	$CC
05317 1246                        CC            .byte	$CC
05318 1247                        CC            .byte	$CC
05319 1248                        CC            .byte	$CC
05320 1249                        FC            .byte	$FC
05321 124A                        00            .byte	0
05322                                           ! 970  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05323 124B                        CC            .byte	$CC
05324 124C                        CC            .byte	$CC
05325 124D                        CC            .byte	$CC
05326 124E                        CC            .byte	$CC
05327 124F                        CC            .byte	$CC
05328 1250                        78            .byte	$78
05329 1251                        30            .byte	$30
05330 1252                        00            .byte	0
05331                                           ! 971  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05332 1253                        C6            .byte	$C6
05333 1254                        C6            .byte	$C6
05334 1255                        C6            .byte	$C6
05335 1256                        D6            .byte	$D6
05336 1257                        FE            .byte	$FE
05337 1258                        EE            .byte	$EE
05338 1259                        C6            .byte	$C6
05339 125A                        00            .byte	0
05340                                           ! 972  0xc6, 0xc6, 0x6c, 0x38, 0x38
05341 125B                        C6            .byte	$C6
05342 125C                        C6            .byte	$C6
05343 125D                        6C            .byte	$6C
05344 125E                        38            .byte	$38
05345                                           ! 972 , 0x6c, 0xc6, 0x00,
05346 125F                        38            .byte	$38
05347 1260                        6C            .byte	$6C
05348 1261                        C6            .byte	$C6
05349 1262                        00            .byte	0
05350                                           ! 973  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05351 1263                        CC            .byte	$CC
05352 1264                        CC            .byte	$CC
05353 1265                        CC            .byte	$CC
05354 1266                        78            .byte	$78
05355 1267                        30            .byte	$30
05356 1268                        30            .byte	$30
05357 1269                        78            .byte	$78
05358 126A                        00            .byte	0
05359                                           ! 974  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05360 126B                        FE            .byte	$FE
05361 126C                        C6            .byte	$C6
05362 126D                        8C            .byte	$8C
05363 126E                        18            .byte	$18
05364 126F                        32            .byte	$32
05365 1270                        66            .byte	$66
05366 1271                        FE            .byte	$FE
05367 1272                        00            .byte	0
05368                                           ! 975  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05369 1273                        78            .byte	$78
05370 1274                        60            .byte	$60
05371 1275                        60            .byte	$60
05372 1276                        60            .byte	$60
05373 1277                        60            .byte	$60
05374 1278                        60            .byte	$60
05375 1279                        78            .byte	$78
05376 127A                        00            .byte	0
05377                                           ! 976  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05378 127B                        C0            .byte	$C0
05379 127C                        60            .byte	$60
05380 127D                        30            .byte	$30
05381 127E                        18            .byte	$18
05382 127F                        0C            .byte	$C
05383 1280                        06            .byte	6
05384 1281                        02            .byte	2
05385 1282                        00            .byte	0
05386                                           ! 977  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05387 1283                        78            .byte	$78
05388 1284                        18            .byte	$18
05389 1285                        18            .byte	$18
05390 1286                        18            .byte	$18
05391 1287                        18            .byte	$18
05392 1288                        18            .byte	$18
05393 1289                        78            .byte	$78
05394 128A                        00            .byte	0
05395                                           ! 978  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05396 128B                        10            .byte	$10
05397 128C                        38            .byte	$38
05398 128D                        6C            .byte	$6C
05399 128E                        C6            .byte	$C6
05400 128F                        00            .byte	0
05401 1290                        00            .byte	0
05402 1291                        00            .byte	0
05403 1292                        00            .byte	0
05404                                           ! 979  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05405 1293                        00            .byte	0
05406 1294                        00            .byte	0
05407 1295                        00            .byte	0
05408 1296                        00            .byte	0
05409 1297                        00            .byte	0
05410 1298                        00            .byte	0
05411 1299                        00            .byte	0
05412 129A                        FF            .byte	$FF
05413                                           ! 980  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05414 129B                        30            .byte	$30
05415 129C                        30            .byte	$30
05416 129D                        18            .byte	$18
05417 129E                        00            .byte	0
05418 129F                        00            .byte	0
05419 12A0                        00            .byte	0
05420 12A1                        00            .byte	0
05421 12A2                        00            .byte	0
05422                                           ! 981  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05423 12A3                        00            .byte	0
05424 12A4                        00            .byte	0
05425 12A5                        78            .byte	$78
05426 12A6                        0C            .byte	$C
05427 12A7                        7C            .byte	$7C
05428 12A8                        CC            .byte	$CC
05429 12A9                        76            .byte	$76
05430 12AA                        00            .byte	0
05431                                           ! 982  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05432 12AB                        E0            .byte	$E0
05433 12AC                        60            .byte	$60
05434 12AD                        60            .byte	$60
05435 12AE                        7C            .byte	$7C
05436 12AF                        66            .byte	$66
05437 12B0                        66            .byte	$66
05438 12B1                        DC            .byte	$DC
05439 12B2                        00            .byte	0
05440                                           ! 983  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05441 12B3                        00            .byte	0
05442 12B4                        00            .byte	0
05443 12B5                        78            .byte	$78
05444 12B6                        CC            .byte	$CC
05445 12B7                        C0            .byte	$C0
05446 12B8                        CC            .byte	$CC
05447 12B9                        78            .byte	$78
05448 12BA                        00            .byte	0
05449                                           ! 984  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05450 12BB                        1C            .byte	$1C
05451 12BC                        0C            .byte	$C
05452 12BD                        0C            .byte	$C
05453 12BE                        7C            .byte	$7C
05454 12BF                        CC            .byte	$CC
05455 12C0                        CC            .byte	$CC
05456 12C1                        76            .byte	$76
05457 12C2                        00            .byte	0
05458                                           ! 985  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05459 12C3                        00            .byte	0
05460 12C4                        00            .byte	0
05461 12C5                        78            .byte	$78
05462 12C6                        CC            .byte	$CC
05463 12C7                        FC            .byte	$FC
05464 12C8                        C0            .byte	$C0
05465 12C9                        78            .byte	$78
05466 12CA                        00            .byte	0
05467                                           ! 986  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05468 12CB                        38            .byte	$38
05469 12CC                        6C            .byte	$6C
05470 12CD                        60            .byte	$60
05471 12CE                        F0            .byte	$F0
05472 12CF                        60            .byte	$60
05473 12D0                        60            .byte	$60
05474 12D1                        F0            .byte	$F0
05475 12D2                        00            .byte	0
05476                                           ! 987  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05477 12D3                        00            .byte	0
05478 12D4                        00            .byte	0
05479 12D5                        76            .byte	$76
05480 12D6                        CC            .byte	$CC
05481 12D7                        CC            .byte	$CC
05482 12D8                        7C            .byte	$7C
05483 12D9                        0C            .byte	$C
05484 12DA                        F8            .byte	$F8
05485                                           ! 988  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05486 12DB                        E0            .byte	$E0
05487 12DC                        60            .byte	$60
05488 12DD                        6C            .byte	$6C
05489 12DE                        76            .byte	$76
05490 12DF                        66            .byte	$66
05491 12E0                        66            .byte	$66
05492 12E1                        E6            .byte	$E6
05493 12E2                        00            .byte	0
05494                                           ! 989  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05495 12E3                        30            .byte	$30
05496 12E4                        00            .byte	0
05497 12E5                        70            .byte	$70
05498 12E6                        30            .byte	$30
05499 12E7                        30            .byte	$30
05500 12E8                        30            .byte	$30
05501 12E9                        78            .byte	$78
05502 12EA                        00            .byte	0
05503                                           ! 990  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05504 12EB                        0C            .byte	$C
05505 12EC                        00            .byte	0
05506 12ED                        0C            .byte	$C
05507 12EE                        0C            .byte	$C
05508 12EF                        0C            .byte	$C
05509 12F0                        CC            .byte	$CC
05510 12F1                        CC            .byte	$CC
05511 12F2                        78            .byte	$78
05512                                           ! 991  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05513 12F3                        E0            .byte	$E0
05514 12F4                        60            .byte	$60
05515 12F5                        66            .byte	$66
05516 12F6                        6C            .byte	$6C
05517 12F7                        78            .byte	$78
05518 12F8                        6C            .byte	$6C
05519 12F9                        E6            .byte	$E6
05520 12FA                        00            .byte	0
05521                                           ! 992  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05522 12FB                        70            .byte	$70
05523 12FC                        30            .byte	$30
05524 12FD                        30            .byte	$30
05525 12FE                        30            .byte	$30
05526 12FF                        30            .byte	$30
05527 1300                        30            .byte	$30
05528 1301                        78            .byte	$78
05529 1302                        00            .byte	0
05530                                           ! 993  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05531 1303                        00            .byte	0
05532 1304                        00            .byte	0
05533 1305                        CC            .byte	$CC
05534 1306                        FE            .byte	$FE
05535 1307                        FE            .byte	$FE
05536 1308                        D6            .byte	$D6
05537 1309                        C6            .byte	$C6
05538 130A                        00            .byte	0
05539                                           ! 994  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05540 130B                        00            .byte	0
05541 130C                        00            .byte	0
05542 130D                        F8            .byte	$F8
05543 130E                        CC            .byte	$CC
05544 130F                        CC            .byte	$CC
05545 1310                        CC            .byte	$CC
05546 1311                        CC            .byte	$CC
05547 1312                        00            .byte	0
05548                                           ! 995  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05549 1313                        00            .byte	0
05550 1314                        00            .byte	0
05551 1315                        78            .byte	$78
05552 1316                        CC            .byte	$CC
05553 1317                        CC            .byte	$CC
05554 1318                        CC            .byte	$CC
05555 1319                        78            .byte	$78
05556 131A                        00            .byte	0
05557                                           ! 996  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05558 131B                        00            .byte	0
05559 131C                        00            .byte	0
05560 131D                        DC            .byte	$DC
05561 131E                        66            .byte	$66
05562 131F                        66            .byte	$66
05563 1320                        7C            .byte	$7C
05564 1321                        60            .byte	$60
05565 1322                        F0            .byte	$F0
05566                                           ! 997  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05567 1323                        00            .byte	0
05568 1324                        00            .byte	0
05569 1325                        76            .byte	$76
05570 1326                        CC            .byte	$CC
05571 1327                        CC            .byte	$CC
05572 1328                        7C            .byte	$7C
05573 1329                        0C            .byte	$C
05574 132A                        1E            .byte	$1E
05575                                           ! 998  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05576 132B                        00            .byte	0
05577 132C                        00            .byte	0
05578 132D                        DC            .byte	$DC
05579 132E                        76            .byte	$76
05580 132F                        66            .byte	$66
05581 1330                        60            .byte	$60
05582 1331                        F0            .byte	$F0
05583 1332                        00            .byte	0
05584                                           ! 999  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05585 1333                        00            .byte	0
05586 1334                        00            .byte	0
05587 1335                        7C            .byte	$7C
05588 1336                        C0            .byte	$C0
05589 1337                        78            .byte	$78
05590 1338                        0C            .byte	$C
05591 1339                        F8            .byte	$F8
05592 133A                        00            .byte	0
05593                                           ! 1000  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05594 133B                        10            .byte	$10
05595 133C                        30            .byte	$30
05596 133D                        7C            .byte	$7C
05597 133E                        30            .byte	$30
05598 133F                        30            .byte	$30
05599 1340                        34            .byte	$34
05600 1341                        18            .byte	$18
05601 1342                        00            .byte	0
05602                                           ! 1001  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05603 1343                        00            .byte	0
05604 1344                        00            .byte	0
05605 1345                        CC            .byte	$CC
05606 1346                        CC            .byte	$CC
05607 1347                        CC            .byte	$CC
05608 1348                        CC            .byte	$CC
05609 1349                        76            .byte	$76
05610 134A                        00            .byte	0
05611                                           ! 1002  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05612 134B                        00            .byte	0
05613 134C                        00            .byte	0
05614 134D                        CC            .byte	$CC
05615 134E                        CC            .byte	$CC
05616 134F                        CC            .byte	$CC
05617 1350                        78            .byte	$78
05618 1351                        30            .byte	$30
05619 1352                        00            .byte	0
05620                                           ! 1003  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05621 1353                        00            .byte	0
05622 1354                        00            .byte	0
05623 1355                        C6            .byte	$C6
05624 1356                        D6            .byte	$D6
05625 1357                        FE            .byte	$FE
05626 1358                        FE            .byte	$FE
05627 1359                        6C            .byte	$6C
05628 135A                        00            .byte	0
05629                                           ! 1004  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05630 135B                        00            .byte	0
05631 135C                        00            .byte	0
05632 135D                        C6            .byte	$C6
05633 135E                        6C            .byte	$6C
05634 135F                        38            .byte	$38
05635 1360                        6C            .byte	$6C
05636 1361                        C6            .byte	$C6
05637 1362                        00            .byte	0
05638                                           ! 1005  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05639 1363                        00            .byte	0
05640 1364                        00            .byte	0
05641 1365                        CC            .byte	$CC
05642 1366                        CC            .byte	$CC
05643 1367                        CC            .byte	$CC
05644 1368                        7C            .byte	$7C
05645 1369                        0C            .byte	$C
05646 136A                        F8            .byte	$F8
05647                                           ! 1006  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05648 136B                        00            .byte	0
05649 136C                        00            .byte	0
05650 136D                        FC            .byte	$FC
05651 136E                        98            .byte	$98
05652 136F                        30            .byte	$30
05653 1370                        64            .byte	$64
05654 1371                        FC            .byte	$FC
05655 1372                        00            .byte	0
05656                                           ! 1007  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05657 1373                        1C            .byte	$1C
05658 1374                        30            .byte	$30
05659 1375                        30            .byte	$30
05660 1376                        E0            .byte	$E0
05661 1377                        30            .byte	$30
05662 1378                        30            .byte	$30
05663 1379                        1C            .byte	$1C
05664 137A                        00            .byte	0
05665                                           ! 1008  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05666 137B                        18            .byte	$18
05667 137C                        18            .byte	$18
05668 137D                        18            .byte	$18
05669 137E                        00            .byte	0
05670 137F                        18            .byte	$18
05671 1380                        18            .byte	$18
05672 1381                        18            .byte	$18
05673 1382                        00            .byte	0
05674                                           ! 1009  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05675 1383                        E0            .byte	$E0
05676 1384                        30            .byte	$30
05677 1385                        30            .byte	$30
05678 1386                        1C            .byte	$1C
05679 1387                        30            .byte	$30
05680 1388                        30            .byte	$30
05681 1389                        E0            .byte	$E0
05682 138A                        00            .byte	0
05683                                           ! 1010  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05684 138B                        76            .byte	$76
05685 138C                        DC            .byte	$DC
05686 138D                        00            .byte	0
05687 138E                        00            .byte	0
05688 138F                        00            .byte	0
05689 1390                        00            .byte	0
05690 1391                        00            .byte	0
05691 1392                        00            .byte	0
05692                                           ! 1011  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05693 1393                        00            .byte	0
05694 1394                        10            .byte	$10
05695 1395                        38            .byte	$38
05696 1396                        6C            .byte	$6C
05697 1397                        C6            .byte	$C6
05698 1398                        C6            .byte	$C6
05699 1399                        FE            .byte	$FE
05700 139A                        00            .byte	0
05701                                           ! 1012  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05702 139B                        78            .byte	$78
05703 139C                        CC            .byte	$CC
05704 139D                        C0            .byte	$C0
05705 139E                        CC            .byte	$CC
05706 139F                        78            .byte	$78
05707 13A0                        18            .byte	$18
05708 13A1                        0C            .byte	$C
05709 13A2                        78            .byte	$78
05710                                           ! 1013  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05711 13A3                        00            .byte	0
05712 13A4                        CC            .byte	$CC
05713 13A5                        00            .byte	0
05714 13A6                        CC            .byte	$CC
05715 13A7                        CC            .byte	$CC
05716 13A8                        CC            .byte	$CC
05717 13A9                        7E            .byte	$7E
05718 13AA                        00            .byte	0
05719                                           ! 1014  0x1c, 0x00, 0x78, 
05720 13AB                        1C            .byte	$1C
05721 13AC                        00            .byte	0
05722 13AD                        78            .byte	$78
05723                                           ! 1014 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05724 13AE                        CC            .byte	$CC
05725 13AF                        FC            .byte	$FC
05726 13B0                        C0            .byte	$C0
05727 13B1                        78            .byte	$78
05728 13B2                        00            .byte	0
05729                                           ! 1015  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05730 13B3                        7E            .byte	$7E
05731 13B4                        C3            .byte	$C3
05732 13B5                        3C            .byte	$3C
05733 13B6                        06            .byte	6
05734 13B7                        3E            .byte	$3E
05735 13B8                        66            .byte	$66
05736 13B9                        3F            .byte	$3F
05737 13BA                        00            .byte	0
05738                                           ! 1016  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05739 13BB                        CC            .byte	$CC
05740 13BC                        00            .byte	0
05741 13BD                        78            .byte	$78
05742 13BE                        0C            .byte	$C
05743 13BF                        7C            .byte	$7C
05744 13C0                        CC            .byte	$CC
05745 13C1                        7E            .byte	$7E
05746 13C2                        00            .byte	0
05747                                           ! 1017  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05748 13C3                        E0            .byte	$E0
05749 13C4                        00            .byte	0
05750 13C5                        78            .byte	$78
05751 13C6                        0C            .byte	$C
05752 13C7                        7C            .byte	$7C
05753 13C8                        CC            .byte	$CC
05754 13C9                        7E            .byte	$7E
05755 13CA                        00            .byte	0
05756                                           ! 1018  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05757 13CB                        30            .byte	$30
05758 13CC                        30            .byte	$30
05759 13CD                        78            .byte	$78
05760 13CE                        0C            .byte	$C
05761 13CF                        7C            .byte	$7C
05762 13D0                        CC            .byte	$CC
05763 13D1                        7E            .byte	$7E
05764 13D2                        00            .byte	0
05765                                           ! 1019  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05766 13D3                        00            .byte	0
05767 13D4                        00            .byte	0
05768 13D5                        78            .byte	$78
05769 13D6                        C0            .byte	$C0
05770 13D7                        C0            .byte	$C0
05771 13D8                        78            .byte	$78
05772 13D9                        0C            .byte	$C
05773 13DA                        38            .byte	$38
05774                                           ! 1020  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05775 13DB                        7E            .byte	$7E
05776 13DC                        C3            .byte	$C3
05777 13DD                        3C            .byte	$3C
05778 13DE                        66            .byte	$66
05779 13DF                        7E            .byte	$7E
05780 13E0                        60            .byte	$60
05781 13E1                        3C            .byte	$3C
05782 13E2                        00            .byte	0
05783                                           ! 1021  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05784 13E3                        CC            .byte	$CC
05785 13E4                        00            .byte	0
05786 13E5                        78            .byte	$78
05787 13E6                        CC            .byte	$CC
05788 13E7                        FC            .byte	$FC
05789 13E8                        C0            .byte	$C0
05790 13E9                        78            .byte	$78
05791 13EA                        00            .byte	0
05792                                           ! 1022  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05793 13EB                        E0            .byte	$E0
05794 13EC                        00            .byte	0
05795 13ED                        78            .byte	$78
05796 13EE                        CC            .byte	$CC
05797 13EF                        FC            .byte	$FC
05798 13F0                        C0            .byte	$C0
05799 13F1                        78            .byte	$78
05800 13F2                        00            .byte	0
05801                                           ! 1023  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05802 13F3                        CC            .byte	$CC
05803 13F4                        00            .byte	0
05804 13F5                        70            .byte	$70
05805 13F6                        30            .byte	$30
05806 13F7                        30            .byte	$30
05807 13F8                        30            .byte	$30
05808 13F9                        78            .byte	$78
05809 13FA                        00            .byte	0
05810                                           ! 1024  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05811 13FB                        7C            .byte	$7C
05812 13FC                        C6            .byte	$C6
05813 13FD                        38            .byte	$38
05814 13FE                        18            .byte	$18
05815 13FF                        18            .byte	$18
05816 1400                        18            .byte	$18
05817 1401                        3C            .byte	$3C
05818 1402                        00            .byte	0
05819                                           ! 1025  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05820 1403                        E0            .byte	$E0
05821 1404                        00            .byte	0
05822 1405                        70            .byte	$70
05823 1406                        30            .byte	$30
05824 1407                        30            .byte	$30
05825 1408                        30            .byte	$30
05826 1409                        78            .byte	$78
05827 140A                        00            .byte	0
05828                                           ! 1026  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05829 140B                        C6            .byte	$C6
05830 140C                        38            .byte	$38
05831 140D                        6C            .byte	$6C
05832 140E                        C6            .byte	$C6
05833 140F                        FE            .byte	$FE
05834 1410                        C6            .byte	$C6
05835 1411                        C6            .byte	$C6
05836 1412                        00            .byte	0
05837                                           ! 1027  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05838 1413                        30            .byte	$30
05839 1414                        30            .byte	$30
05840 1415                        00            .byte	0
05841 1416                        78            .byte	$78
05842 1417                        CC            .byte	$CC
05843 1418                        FC            .byte	$FC
05844 1419                        CC            .byte	$CC
05845 141A                        00            .byte	0
05846                                           ! 1028  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05847 141B                        1C            .byte	$1C
05848 141C                        00            .byte	0
05849 141D                        FC            .byte	$FC
05850 141E                        60            .byte	$60
05851 141F                        78            .byte	$78
05852 1420                        60            .byte	$60
05853 1421                        FC            .byte	$FC
05854 1422                        00            .byte	0
05855                                           ! 1029  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05856 1423                        00            .byte	0
05857 1424                        00            .byte	0
05858 1425                        7F            .byte	$7F
05859 1426                        0C            .byte	$C
05860 1427                        7F            .byte	$7F
05861 1428                        CC            .byte	$CC
05862 1429                        7F            .byte	$7F
05863 142A                        00            .byte	0
05864                                           ! 1030  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05865 142B                        3E            .byte	$3E
05866 142C                        6C            .byte	$6C
05867 142D                        CC            .byte	$CC
05868 142E                        FE            .byte	$FE
05869 142F                        CC            .byte	$CC
05870 1430                        CC            .byte	$CC
05871 1431                        CE            .byte	$CE
05872 1432                        00            .byte	0
05873                                           ! 1031  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05874 1433                        78            .byte	$78
05875 1434                        CC            .byte	$CC
05876 1435                        00            .byte	0
05877 1436                        78            .byte	$78
05878 1437                        CC            .byte	$CC
05879 1438                        CC            .byte	$CC
05880 1439                        78            .byte	$78
05881 143A                        00            .byte	0
05882                                           ! 1032  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05883 143B                        00            .byte	0
05884 143C                        CC            .byte	$CC
05885 143D                        00            .byte	0
05886 143E                        78            .byte	$78
05887 143F                        CC            .byte	$CC
05888 1440                        CC            .byte	$CC
05889 1441                        78            .byte	$78
05890 1442                        00            .byte	0
05891                                           ! 1033  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05892 1443                        00            .byte	0
05893 1444                        E0            .byte	$E0
05894 1445                        00            .byte	0
05895 1446                        78            .byte	$78
05896 1447                        CC            .byte	$CC
05897 1448                        CC            .byte	$CC
05898 1449                        78            .byte	$78
05899 144A                        00            .byte	0
05900                                           ! 1034  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05901 144B                        78            .byte	$78
05902 144C                        CC            .byte	$CC
05903 144D                        00            .byte	0
05904 144E                        CC            .byte	$CC
05905 144F                        CC            .byte	$CC
05906 1450                        CC            .byte	$CC
05907 1451                        7E            .byte	$7E
05908 1452                        00            .byte	0
05909                                           ! 1035  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05910 1453                        00            .byte	0
05911 1454                        E0            .byte	$E0
05912 1455                        00            .byte	0
05913 1456                        CC            .byte	$CC
05914 1457                        CC            .byte	$CC
05915 1458                        CC            .byte	$CC
05916 1459                        7E            .byte	$7E
05917 145A                        00            .byte	0
05918                                           ! 1036  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05919 145B                        00            .byte	0
05920 145C                        CC            .byte	$CC
05921 145D                        00            .byte	0
05922 145E                        CC            .byte	$CC
05923 145F                        CC            .byte	$CC
05924 1460                        7C            .byte	$7C
05925 1461                        0C            .byte	$C
05926 1462                        F8            .byte	$F8
05927                                           ! 1037  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05928 1463                        C3            .byte	$C3
05929 1464                        18            .byte	$18
05930 1465                        3C            .byte	$3C
05931 1466                        66            .byte	$66
05932 1467                        66            .byte	$66
05933 1468                        3C            .byte	$3C
05934 1469                        18            .byte	$18
05935 146A                        00            .byte	0
05936                                           ! 1038  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05937 146B                        CC            .byte	$CC
05938 146C                        00            .byte	0
05939 146D                        CC            .byte	$CC
05940 146E                        CC            .byte	$CC
05941 146F                        CC            .byte	$CC
05942 1470                        CC            .byte	$CC
05943 1471                        78            .byte	$78
05944 1472                        00            .byte	0
05945                                           ! 1039  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05946 1473                        18            .byte	$18
05947 1474                        18            .byte	$18
05948 1475                        7E            .byte	$7E
05949 1476                        C0            .byte	$C0
05950 1477                        C0            .byte	$C0
05951 1478                        7E            .byte	$7E
05952 1479                        18            .byte	$18
05953 147A                        18            .byte	$18
05954                                           ! 1040  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05955 147B                        38            .byte	$38
05956 147C                        6C            .byte	$6C
05957 147D                        64            .byte	$64
05958 147E                        F0            .byte	$F0
05959 147F                        60            .byte	$60
05960 1480                        E6            .byte	$E6
05961 1481                        FC            .byte	$FC
05962 1482                        00            .byte	0
05963                                           ! 1041  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05964 1483                        CC            .byte	$CC
05965 1484                        CC            .byte	$CC
05966 1485                        78            .byte	$78
05967 1486                        FC            .byte	$FC
05968 1487                        30            .byte	$30
05969 1488                        FC            .byte	$FC
05970 1489                        30            .byte	$30
05971 148A                        30            .byte	$30
05972                                           ! 1042  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05973 148B                        F8            .byte	$F8
05974 148C                        CC            .byte	$CC
05975 148D                        CC            .byte	$CC
05976 148E                        FA            .byte	$FA
05977 148F                        C6            .byte	$C6
05978 1490                        CF            .byte	$CF
05979 1491                        C6            .byte	$C6
05980 1492                        C7            .byte	$C7
05981                                           ! 1043  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05982 1493                        0E            .byte	$E
05983 1494                        1B            .byte	$1B
05984 1495                        18            .byte	$18
05985 1496                        3C            .byte	$3C
05986 1497                        18            .byte	$18
05987 1498                        18            .byte	$18
05988 1499                        D8            .byte	$D8
05989 149A                        70            .byte	$70
05990                                           ! 1044  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05991 149B                        1C            .byte	$1C
05992 149C                        00            .byte	0
05993 149D                        78            .byte	$78
05994 149E                        0C            .byte	$C
05995 149F                        7C            .byte	$7C
05996 14A0                        CC            .byte	$CC
05997 14A1                        7E            .byte	$7E
05998 14A2                        00            .byte	0
05999                                           ! 1045  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
06000 14A3                        38            .byte	$38
06001 14A4                        00            .byte	0
06002 14A5                        70            .byte	$70
06003 14A6                        30            .byte	$30
06004 14A7                        30            .byte	$30
06005 14A8                        30            .byte	$30
06006 14A9                        78            .byte	$78
06007 14AA                        00            .byte	0
06008                                           ! 1046  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
06009 14AB                        00            .byte	0
06010 14AC                        1C            .byte	$1C
06011 14AD                        00            .byte	0
06012 14AE                        78            .byte	$78
06013 14AF                        CC            .byte	$CC
06014 14B0                        CC            .byte	$CC
06015 14B1                        78            .byte	$78
06016 14B2                        00            .byte	0
06017                                           ! 1047  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
06018 14B3                        00            .byte	0
06019 14B4                        1C            .byte	$1C
06020 14B5                        00            .byte	0
06021 14B6                        CC            .byte	$CC
06022 14B7                        CC            .byte	$CC
06023 14B8                        CC            .byte	$CC
06024 14B9                        7E            .byte	$7E
06025 14BA                        00            .byte	0
06026                                           ! 1048  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
06027 14BB                        00            .byte	0
06028 14BC                        F8            .byte	$F8
06029 14BD                        00            .byte	0
06030 14BE                        F8            .byte	$F8
06031 14BF                        CC            .byte	$CC
06032 14C0                        CC            .byte	$CC
06033 14C1                        CC            .byte	$CC
06034 14C2                        00            .byte	0
06035                                           ! 1049  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
06036 14C3                        FC            .byte	$FC
06037 14C4                        00            .byte	0
06038 14C5                        CC            .byte	$CC
06039 14C6                        EC            .byte	$EC
06040 14C7                        FC            .byte	$FC
06041 14C8                        DC            .byte	$DC
06042 14C9                        CC            .byte	$CC
06043 14CA                        00            .byte	0
06044                                           ! 1050  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06045 14CB                        3C            .byte	$3C
06046 14CC                        6C            .byte	$6C
06047 14CD                        6C            .byte	$6C
06048 14CE                        3E            .byte	$3E
06049 14CF                        00            .byte	0
06050 14D0                        7E            .byte	$7E
06051 14D1                        00            .byte	0
06052 14D2                        00            .byte	0
06053                                           ! 1051  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06054 14D3                        38            .byte	$38
06055 14D4                        6C            .byte	$6C
06056 14D5                        6C            .byte	$6C
06057 14D6                        38            .byte	$38
06058 14D7                        00            .byte	0
06059 14D8                        7C            .byte	$7C
06060 14D9                        00            .byte	0
06061 14DA                        00            .byte	0
06062                                           ! 1052  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06063 14DB                        30            .byte	$30
06064 14DC                        00            .byte	0
06065 14DD                        30            .byte	$30
06066 14DE                        60            .byte	$60
06067 14DF                        C0            .byte	$C0
06068 14E0                        CC            .byte	$CC
06069 14E1                        78            .byte	$78
06070 14E2                        00            .byte	0
06071                                           ! 1053  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06072 14E3                        00            .byte	0
06073 14E4                        00            .byte	0
06074 14E5                        00            .byte	0
06075 14E6                        FC            .byte	$FC
06076 14E7                        C0            .byte	$C0
06077 14E8                        C0            .byte	$C0
06078 14E9                        00            .byte	0
06079 14EA                        00            .byte	0
06080                                           ! 1054  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06081 14EB                        00            .byte	0
06082 14EC                        00            .byte	0
06083 14ED                        00            .byte	0
06084 14EE                        FC            .byte	$FC
06085 14EF                        0C            .byte	$C
06086 14F0                        0C            .byte	$C
06087 14F1                        00            .byte	0
06088 14F2                        00            .byte	0
06089                                           ! 1055  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06090 14F3                        C3            .byte	$C3
06091 14F4                        C6            .byte	$C6
06092 14F5                        CC            .byte	$CC
06093 14F6                        DE            .byte	$DE
06094 14F7                        33            .byte	$33
06095 14F8                        66            .byte	$66
06096 14F9                        CC            .byte	$CC
06097 14FA                        0F            .byte	$F
06098                                           ! 1056  0xc3, 0x
06099 14FB                        C3            .byte	$C3
06100                                           ! 1056 c6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06101 14FC                        C6            .byte	$C6
06102 14FD                        CC            .byte	$CC
06103 14FE                        DB            .byte	$DB
06104 14FF                        37            .byte	$37
06105 1500                        6F            .byte	$6F
06106 1501                        CF            .byte	$CF
06107 1502                        03            .byte	3
06108                                           ! 1057  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06109 1503                        18            .byte	$18
06110 1504                        18            .byte	$18
06111 1505                        00            .byte	0
06112 1506                        18            .byte	$18
06113 1507                        18            .byte	$18
06114 1508                        18            .byte	$18
06115 1509                        18            .byte	$18
06116 150A                        00            .byte	0
06117                                           ! 1058  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06118 150B                        00            .byte	0
06119 150C                        33            .byte	$33
06120 150D                        66            .byte	$66
06121 150E                        CC            .byte	$CC
06122 150F                        66            .byte	$66
06123 1510                        33            .byte	$33
06124 1511                        00            .byte	0
06125 1512                        00            .byte	0
06126                                           ! 1059  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06127 1513                        00            .byte	0
06128 1514                        CC            .byte	$CC
06129 1515                        66            .byte	$66
06130 1516                        33            .byte	$33
06131 1517                        66            .byte	$66
06132 1518                        CC            .byte	$CC
06133 1519                        00            .byte	0
06134 151A                        00            .byte	0
06135                                           ! 1060  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06136 151B                        22            .byte	$22
06137 151C                        88            .byte	$88
06138 151D                        22            .byte	$22
06139 151E                        88            .byte	$88
06140 151F                        22            .byte	$22
06141 1520                        88            .byte	$88
06142 1521                        22            .byte	$22
06143 1522                        88            .byte	$88
06144                                           ! 1061  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06145 1523                        55            .byte	$55
06146 1524                        AA            .byte	$AA
06147 1525                        55            .byte	$55
06148 1526                        AA            .byte	$AA
06149 1527                        55            .byte	$55
06150 1528                        AA            .byte	$AA
06151 1529                        55            .byte	$55
06152 152A                        AA            .byte	$AA
06153                                           ! 1062  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06154 152B                        DB            .byte	$DB
06155 152C                        77            .byte	$77
06156 152D                        DB            .byte	$DB
06157 152E                        EE            .byte	$EE
06158 152F                        DB            .byte	$DB
06159 1530                        77            .byte	$77
06160 1531                        DB            .byte	$DB
06161 1532                        EE            .byte	$EE
06162                                           ! 1063  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06163 1533                        18            .byte	$18
06164 1534                        18            .byte	$18
06165 1535                        18            .byte	$18
06166 1536                        18            .byte	$18
06167 1537                        18            .byte	$18
06168 1538                        18            .byte	$18
06169 1539                        18            .byte	$18
06170 153A                        18            .byte	$18
06171                                           ! 1064  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06172 153B                        18            .byte	$18
06173 153C                        18            .byte	$18
06174 153D                        18            .byte	$18
06175 153E                        18            .byte	$18
06176 153F                        F8            .byte	$F8
06177 1540                        18            .byte	$18
06178 1541                        18            .byte	$18
06179 1542                        18            .byte	$18
06180                                           ! 1065  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06181 1543                        18            .byte	$18
06182 1544                        18            .byte	$18
06183 1545                        F8            .byte	$F8
06184 1546                        18            .byte	$18
06185 1547                        F8            .byte	$F8
06186 1548                        18            .byte	$18
06187 1549                        18            .byte	$18
06188 154A                        18            .byte	$18
06189                                           ! 1066  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06190 154B                        36            .byte	$36
06191 154C                        36            .byte	$36
06192 154D                        36            .byte	$36
06193 154E                        36            .byte	$36
06194 154F                        F6            .byte	$F6
06195 1550                        36            .byte	$36
06196 1551                        36            .byte	$36
06197 1552                        36            .byte	$36
06198                                           ! 1067  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06199 1553                        00            .byte	0
06200 1554                        00            .byte	0
06201 1555                        00            .byte	0
06202 1556                        00            .byte	0
06203 1557                        FE            .byte	$FE
06204 1558                        36            .byte	$36
06205 1559                        36            .byte	$36
06206 155A                        36            .byte	$36
06207                                           ! 1068  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06208 155B                        00            .byte	0
06209 155C                        00            .byte	0
06210 155D                        F8            .byte	$F8
06211 155E                        18            .byte	$18
06212 155F                        F8            .byte	$F8
06213 1560                        18            .byte	$18
06214 1561                        18            .byte	$18
06215 1562                        18            .byte	$18
06216                                           ! 1069  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06217 1563                        36            .byte	$36
06218 1564                        36            .byte	$36
06219 1565                        F6            .byte	$F6
06220 1566                        06            .byte	6
06221 1567                        F6            .byte	$F6
06222 1568                        36            .byte	$36
06223 1569                        36            .byte	$36
06224 156A                        36            .byte	$36
06225                                           ! 1070  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06226 156B                        36            .byte	$36
06227 156C                        36            .byte	$36
06228 156D                        36            .byte	$36
06229 156E                        36            .byte	$36
06230 156F                        36            .byte	$36
06231 1570                        36            .byte	$36
06232 1571                        36            .byte	$36
06233 1572                        36            .byte	$36
06234                                           ! 1071  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06235 1573                        00            .byte	0
06236 1574                        00            .byte	0
06237 1575                        FE            .byte	$FE
06238 1576                        06            .byte	6
06239 1577                        F6            .byte	$F6
06240 1578                        36            .byte	$36
06241 1579                        36            .byte	$36
06242 157A                        36            .byte	$36
06243                                           ! 1072  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06244 157B                        36            .byte	$36
06245 157C                        36            .byte	$36
06246 157D                        F6            .byte	$F6
06247 157E                        06            .byte	6
06248 157F                        FE            .byte	$FE
06249 1580                        00            .byte	0
06250 1581                        00            .byte	0
06251 1582                        00            .byte	0
06252                                           ! 1073  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06253 1583                        36            .byte	$36
06254 1584                        36            .byte	$36
06255 1585                        36            .byte	$36
06256 1586                        36            .byte	$36
06257 1587                        FE            .byte	$FE
06258 1588                        00            .byte	0
06259 1589                        00            .byte	0
06260 158A                        00            .byte	0
06261                                           ! 1074  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06262 158B                        18            .byte	$18
06263 158C                        18            .byte	$18
06264 158D                        F8            .byte	$F8
06265 158E                        18            .byte	$18
06266 158F                        F8            .byte	$F8
06267 1590                        00            .byte	0
06268 1591                        00            .byte	0
06269 1592                        00            .byte	0
06270                                           ! 1075  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06271 1593                        00            .byte	0
06272 1594                        00            .byte	0
06273 1595                        00            .byte	0
06274 1596                        00            .byte	0
06275 1597                        F8            .byte	$F8
06276 1598                        18            .byte	$18
06277 1599                        18            .byte	$18
06278 159A                        18            .byte	$18
06279                                           ! 1076  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06280 159B                        18            .byte	$18
06281 159C                        18            .byte	$18
06282 159D                        18            .byte	$18
06283 159E                        18            .byte	$18
06284 159F                        1F            .byte	$1F
06285 15A0                        00            .byte	0
06286 15A1                        00            .byte	0
06287 15A2                        00            .byte	0
06288                                           ! 1077  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06289 15A3                        18            .byte	$18
06290 15A4                        18            .byte	$18
06291 15A5                        18            .byte	$18
06292 15A6                        18            .byte	$18
06293 15A7                        FF            .byte	$FF
06294 15A8                        00            .byte	0
06295 15A9                        00            .byte	0
06296 15AA                        00            .byte	0
06297                                           ! 1078  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06298 15AB                        00            .byte	0
06299 15AC                        00            .byte	0
06300 15AD                        00            .byte	0
06301 15AE                        00            .byte	0
06302 15AF                        FF            .byte	$FF
06303 15B0                        18            .byte	$18
06304 15B1                        18            .byte	$18
06305 15B2                        18            .byte	$18
06306                                           ! 1079  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06307 15B3                        18            .byte	$18
06308 15B4                        18            .byte	$18
06309 15B5                        18            .byte	$18
06310 15B6                        18            .byte	$18
06311 15B7                        1F            .byte	$1F
06312 15B8                        18            .byte	$18
06313 15B9                        18            .byte	$18
06314 15BA                        18            .byte	$18
06315                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06316 15BB                        00            .byte	0
06317 15BC                        00            .byte	0
06318 15BD                        00            .byte	0
06319 15BE                        00            .byte	0
06320 15BF                        FF            .byte	$FF
06321 15C0                        00            .byte	0
06322 15C1                        00            .byte	0
06323 15C2                        00            .byte	0
06324                                           ! 1081  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06325 15C3                        18            .byte	$18
06326 15C4                        18            .byte	$18
06327 15C5                        18            .byte	$18
06328 15C6                        18            .byte	$18
06329 15C7                        FF            .byte	$FF
06330 15C8                        18            .byte	$18
06331 15C9                        18            .byte	$18
06332 15CA                        18            .byte	$18
06333                                           ! 1082  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06334 15CB                        18            .byte	$18
06335 15CC                        18            .byte	$18
06336 15CD                        1F            .byte	$1F
06337 15CE                        18            .byte	$18
06338 15CF                        1F            .byte	$1F
06339 15D0                        18            .byte	$18
06340 15D1                        18            .byte	$18
06341 15D2                        18            .byte	$18
06342                                           ! 1083  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06343 15D3                        36            .byte	$36
06344 15D4                        36            .byte	$36
06345 15D5                        36            .byte	$36
06346 15D6                        36            .byte	$36
06347 15D7                        37            .byte	$37
06348 15D8                        36            .byte	$36
06349 15D9                        36            .byte	$36
06350 15DA                        36            .byte	$36
06351                                           ! 1084  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06352 15DB                        36            .byte	$36
06353 15DC                        36            .byte	$36
06354 15DD                        37            .byte	$37
06355 15DE                        30            .byte	$30
06356 15DF                        3F            .byte	$3F
06357 15E0                        00            .byte	0
06358 15E1                        00            .byte	0
06359 15E2                        00            .byte	0
06360                                           ! 1085  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06361 15E3                        00            .byte	0
06362 15E4                        00            .byte	0
06363 15E5                        3F            .byte	$3F
06364 15E6                        30            .byte	$30
06365 15E7                        37            .byte	$37
06366 15E8                        36            .byte	$36
06367 15E9                        36            .byte	$36
06368 15EA                        36            .byte	$36
06369                                           ! 1086  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06370 15EB                        36            .byte	$36
06371 15EC                        36            .byte	$36
06372 15ED                        F7            .byte	$F7
06373 15EE                        00            .byte	0
06374 15EF                        FF            .byte	$FF
06375 15F0                        00            .byte	0
06376 15F1                        00            .byte	0
06377 15F2                        00            .byte	0
06378                                           ! 1087  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06379 15F3                        00            .byte	0
06380 15F4                        00            .byte	0
06381 15F5                        FF            .byte	$FF
06382 15F6                        00            .byte	0
06383 15F7                        F7            .byte	$F7
06384 15F8                        36            .byte	$36
06385 15F9                        36            .byte	$36
06386 15FA                        36            .byte	$36
06387                                           ! 1088  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06388 15FB                        36            .byte	$36
06389 15FC                        36            .byte	$36
06390 15FD                        37            .byte	$37
06391 15FE                        30            .byte	$30
06392 15FF                        37            .byte	$37
06393 1600                        36            .byte	$36
06394 1601                        36            .byte	$36
06395 1602                        36            .byte	$36
06396                                           ! 1089  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06397 1603                        00            .byte	0
06398 1604                        00            .byte	0
06399 1605                        FF            .byte	$FF
06400 1606                        00            .byte	0
06401 1607                        FF            .byte	$FF
06402 1608                        00            .byte	0
06403 1609                        00            .byte	0
06404 160A                        00            .byte	0
06405                                           ! 1090  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06406 160B                        36            .byte	$36
06407 160C                        36            .byte	$36
06408 160D                        F7            .byte	$F7
06409 160E                        00            .byte	0
06410 160F                        F7            .byte	$F7
06411 1610                        36            .byte	$36
06412 1611                        36            .byte	$36
06413 1612                        36            .byte	$36
06414                                           ! 1091  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06415 1613                        18            .byte	$18
06416 1614                        18            .byte	$18
06417 1615                        FF            .byte	$FF
06418 1616                        00            .byte	0
06419 1617                        FF            .byte	$FF
06420 1618                        00            .byte	0
06421 1619                        00            .byte	0
06422 161A                        00            .byte	0
06423                                           ! 1092  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06424 161B                        36            .byte	$36
06425 161C                        36            .byte	$36
06426 161D                        36            .byte	$36
06427 161E                        36            .byte	$36
06428 161F                        FF            .byte	$FF
06429 1620                        00            .byte	0
06430 1621                        00            .byte	0
06431 1622                        00            .byte	0
06432                                           ! 1093  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06433 1623                        00            .byte	0
06434 1624                        00            .byte	0
06435 1625                        FF            .byte	$FF
06436 1626                        00            .byte	0
06437 1627                        FF            .byte	$FF
06438 1628                        18            .byte	$18
06439 1629                        18            .byte	$18
06440 162A                        18            .byte	$18
06441                                           ! 1094  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06442 162B                        00            .byte	0
06443 162C                        00            .byte	0
06444 162D                        00            .byte	0
06445 162E                        00            .byte	0
06446 162F                        FF            .byte	$FF
06447 1630                        36            .byte	$36
06448 1631                        36            .byte	$36
06449 1632                        36            .byte	$36
06450                                           ! 1095  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06451 1633                        36            .byte	$36
06452 1634                        36            .byte	$36
06453 1635                        36            .byte	$36
06454 1636                        36            .byte	$36
06455 1637                        3F            .byte	$3F
06456 1638                        00            .byte	0
06457 1639                        00            .byte	0
06458 163A                        00            .byte	0
06459                                           ! 1096  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06460 163B                        18            .byte	$18
06461 163C                        18            .byte	$18
06462 163D                        1F            .byte	$1F
06463 163E                        18            .byte	$18
06464 163F                        1F            .byte	$1F
06465 1640                        00            .byte	0
06466 1641                        00            .byte	0
06467 1642                        00            .byte	0
06468                                           ! 1097  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06469 1643                        00            .byte	0
06470 1644                        00            .byte	0
06471 1645                        1F            .byte	$1F
06472 1646                        18            .byte	$18
06473 1647                        1F            .byte	$1F
06474 1648                        18            .byte	$18
06475 1649                        18            .byte	$18
06476                                           ! 1097 
06477 164A                        18            .byte	$18
06478                                           ! 1098  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06479 164B                        00            .byte	0
06480 164C                        00            .byte	0
06481 164D                        00            .byte	0
06482 164E                        00            .byte	0
06483 164F                        3F            .byte	$3F
06484 1650                        36            .byte	$36
06485 1651                        36            .byte	$36
06486 1652                        36            .byte	$36
06487                                           ! 1099  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06488 1653                        36            .byte	$36
06489 1654                        36            .byte	$36
06490 1655                        36            .byte	$36
06491 1656                        36            .byte	$36
06492 1657                        FF            .byte	$FF
06493 1658                        36            .byte	$36
06494 1659                        36            .byte	$36
06495 165A                        36            .byte	$36
06496                                           ! 1100  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06497 165B                        18            .byte	$18
06498 165C                        18            .byte	$18
06499 165D                        FF            .byte	$FF
06500 165E                        18            .byte	$18
06501 165F                        FF            .byte	$FF
06502 1660                        18            .byte	$18
06503 1661                        18            .byte	$18
06504 1662                        18            .byte	$18
06505                                           ! 1101  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06506 1663                        18            .byte	$18
06507 1664                        18            .byte	$18
06508 1665                        18            .byte	$18
06509 1666                        18            .byte	$18
06510 1667                        F8            .byte	$F8
06511 1668                        00            .byte	0
06512 1669                        00            .byte	0
06513 166A                        00            .byte	0
06514                                           ! 1102  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06515 166B                        00            .byte	0
06516 166C                        00            .byte	0
06517 166D                        00            .byte	0
06518 166E                        00            .byte	0
06519 166F                        1F            .byte	$1F
06520 1670                        18            .byte	$18
06521 1671                        18            .byte	$18
06522 1672                        18            .byte	$18
06523                                           ! 1103  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06524 1673                        FF            .byte	$FF
06525 1674                        FF            .byte	$FF
06526 1675                        FF            .byte	$FF
06527 1676                        FF            .byte	$FF
06528 1677                        FF            .byte	$FF
06529 1678                        FF            .byte	$FF
06530 1679                        FF            .byte	$FF
06531 167A                        FF            .byte	$FF
06532                                           ! 1104  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06533 167B                        00            .byte	0
06534 167C                        00            .byte	0
06535 167D                        00            .byte	0
06536 167E                        00            .byte	0
06537 167F                        FF            .byte	$FF
06538 1680                        FF            .byte	$FF
06539 1681                        FF            .byte	$FF
06540 1682                        FF            .byte	$FF
06541                                           ! 1105  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06542 1683                        F0            .byte	$F0
06543 1684                        F0            .byte	$F0
06544 1685                        F0            .byte	$F0
06545 1686                        F0            .byte	$F0
06546 1687                        F0            .byte	$F0
06547 1688                        F0            .byte	$F0
06548 1689                        F0            .byte	$F0
06549 168A                        F0            .byte	$F0
06550                                           ! 1106  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06551 168B                        0F            .byte	$F
06552 168C                        0F            .byte	$F
06553 168D                        0F            .byte	$F
06554 168E                        0F            .byte	$F
06555 168F                        0F            .byte	$F
06556 1690                        0F            .byte	$F
06557 1691                        0F            .byte	$F
06558 1692                        0F            .byte	$F
06559                                           ! 1107  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06560 1693                        FF            .byte	$FF
06561 1694                        FF            .byte	$FF
06562 1695                        FF            .byte	$FF
06563 1696                        FF            .byte	$FF
06564 1697                        00            .byte	0
06565 1698                        00            .byte	0
06566 1699                        00            .byte	0
06567 169A                        00            .byte	0
06568                                           ! 1108  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06569 169B                        00            .byte	0
06570 169C                        00            .byte	0
06571 169D                        76            .byte	$76
06572 169E                        DC            .byte	$DC
06573 169F                        C8            .byte	$C8
06574 16A0                        DC            .byte	$DC
06575 16A1                        76            .byte	$76
06576 16A2                        00            .byte	0
06577                                           ! 1109  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06578 16A3                        00            .byte	0
06579 16A4                        78            .byte	$78
06580 16A5                        CC            .byte	$CC
06581 16A6                        F8            .byte	$F8
06582 16A7                        CC            .byte	$CC
06583 16A8                        F8            .byte	$F8
06584 16A9                        C0            .byte	$C0
06585 16AA                        C0            .byte	$C0
06586                                           ! 1110  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06587 16AB                        00            .byte	0
06588 16AC                        FC            .byte	$FC
06589 16AD                        CC            .byte	$CC
06590 16AE                        C0            .byte	$C0
06591 16AF                        C0            .byte	$C0
06592 16B0                        C0            .byte	$C0
06593 16B1                        C0            .byte	$C0
06594 16B2                        00            .byte	0
06595                                           ! 1111  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06596 16B3                        00            .byte	0
06597 16B4                        FE            .byte	$FE
06598 16B5                        6C            .byte	$6C
06599 16B6                        6C            .byte	$6C
06600 16B7                        6C            .byte	$6C
06601 16B8                        6C            .byte	$6C
06602 16B9                        6C            .byte	$6C
06603 16BA                        00            .byte	0
06604                                           ! 1112  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06605 16BB                        FC            .byte	$FC
06606 16BC                        CC            .byte	$CC
06607 16BD                        60            .byte	$60
06608 16BE                        30            .byte	$30
06609 16BF                        60            .byte	$60
06610 16C0                        CC            .byte	$CC
06611 16C1                        FC            .byte	$FC
06612 16C2                        00            .byte	0
06613                                           ! 1113  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06614 16C3                        00            .byte	0
06615 16C4                        00            .byte	0
06616 16C5                        7E            .byte	$7E
06617 16C6                        D8            .byte	$D8
06618 16C7                        D8            .byte	$D8
06619 16C8                        D8            .byte	$D8
06620 16C9                        70            .byte	$70
06621 16CA                        00            .byte	0
06622                                           ! 1114  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06623 16CB                        00            .byte	0
06624 16CC                        66            .byte	$66
06625 16CD                        66            .byte	$66
06626 16CE                        66            .byte	$66
06627 16CF                        66            .byte	$66
06628 16D0                        7C            .byte	$7C
06629 16D1                        60            .byte	$60
06630 16D2                        C0            .byte	$C0
06631                                           ! 1115  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06632 16D3                        00            .byte	0
06633 16D4                        76            .byte	$76
06634 16D5                        DC            .byte	$DC
06635 16D6                        18            .byte	$18
06636 16D7                        18            .byte	$18
06637 16D8                        18            .byte	$18
06638 16D9                        18            .byte	$18
06639 16DA                        00            .byte	0
06640                                           ! 1116  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06641 16DB                        FC            .byte	$FC
06642 16DC                        30            .byte	$30
06643 16DD                        78            .byte	$78
06644 16DE                        CC            .byte	$CC
06645 16DF                        CC            .byte	$CC
06646 16E0                        78            .byte	$78
06647 16E1                        30            .byte	$30
06648 16E2                        FC            .byte	$FC
06649                                           ! 1117  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06650 16E3                        38            .byte	$38
06651 16E4                        6C            .byte	$6C
06652 16E5                        C6            .byte	$C6
06653 16E6                        FE            .byte	$FE
06654 16E7                        C6            .byte	$C6
06655 16E8                        6C            .byte	$6C
06656 16E9                        38            .byte	$38
06657 16EA                        00            .byte	0
06658                                           ! 1118  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06659 16EB                        38            .byte	$38
06660 16EC                        6C            .byte	$6C
06661 16ED                        C6            .byte	$C6
06662 16EE                        C6            .byte	$C6
06663 16EF                        6C            .byte	$6C
06664 16F0                        6C            .byte	$6C
06665 16F1                        EE            .byte	$EE
06666 16F2                        00            .byte	0
06667                                           ! 1119  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06668 16F3                        1C            .byte	$1C
06669 16F4                        30            .byte	$30
06670 16F5                        18            .byte	$18
06671 16F6                        7C            .byte	$7C
06672 16F7                        CC            .byte	$CC
06673 16F8                        CC            .byte	$CC
06674 16F9                        78            .byte	$78
06675 16FA                        00            .byte	0
06676                                           ! 1120  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06677 16FB                        00            .byte	0
06678 16FC                        00            .byte	0
06679 16FD                        7E            .byte	$7E
06680 16FE                        DB            .byte	$DB
06681 16FF                        DB            .byte	$DB
06682 1700                        7E            .byte	$7E
06683 1701                        00            .byte	0
06684 1702                        00            .byte	0
06685                                           ! 1121  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06686 1703                        06            .byte	6
06687 1704                        0C            .byte	$C
06688 1705                        7E            .byte	$7E
06689 1706                        DB            .byte	$DB
06690 1707                        DB            .byte	$DB
06691 1708                        7E            .byte	$7E
06692 1709                        60            .byte	$60
06693 170A                        C0            .byte	$C0
06694                                           ! 1122  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06695 170B                        38            .byte	$38
06696 170C                        60            .byte	$60
06697 170D                        C0            .byte	$C0
06698 170E                        F8            .byte	$F8
06699 170F                        C0            .byte	$C0
06700 1710                        60            .byte	$60
06701 1711                        38            .byte	$38
06702 1712                        00            .byte	0
06703                                           ! 1123  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06704 1713                        78            .byte	$78
06705 1714                        CC            .byte	$CC
06706 1715                        CC            .byte	$CC
06707 1716                        CC            .byte	$CC
06708 1717                        CC            .byte	$CC
06709 1718                        CC            .byte	$CC
06710 1719                        CC            .byte	$CC
06711 171A                        00            .byte	0
06712                                           ! 1124  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06713 171B                        00            .byte	0
06714 171C                        FC            .byte	$FC
06715 171D                        00            .byte	0
06716 171E                        FC            .byte	$FC
06717 171F                        00            .byte	0
06718 1720                        FC            .byte	$FC
06719 1721                        00            .byte	0
06720 1722                        00            .byte	0
06721                                           ! 1125  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06722 1723                        30            .byte	$30
06723 1724                        30            .byte	$30
06724 1725                        FC            .byte	$FC
06725 1726                        30            .byte	$30
06726 1727                        30            .byte	$30
06727 1728                        00            .byte	0
06728 1729                        FC            .byte	$FC
06729 172A                        00            .byte	0
06730                                           ! 1126  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06731 172B                        60            .byte	$60
06732 172C                        30            .byte	$30
06733 172D                        18            .byte	$18
06734 172E                        30            .byte	$30
06735 172F                        60            .byte	$60
06736 1730                        00            .byte	0
06737 1731                        FC            .byte	$FC
06738 1732                        00            .byte	0
06739                                           ! 1127  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06740 1733                        18            .byte	$18
06741 1734                        30            .byte	$30
06742 1735                        60            .byte	$60
06743 1736                        30            .byte	$30
06744 1737                        18            .byte	$18
06745 1738                        00            .byte	0
06746 1739                        FC            .byte	$FC
06747 173A                        00            .byte	0
06748                                           ! 1128  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06749 173B                        0E            .byte	$E
06750 173C                        1B            .byte	$1B
06751 173D                        1B            .byte	$1B
06752 173E                        18            .byte	$18
06753 173F                        18            .byte	$18
06754 1740                        18            .byte	$18
06755 1741                        18            .byte	$18
06756 1742                        18            .byte	$18
06757                                           ! 1129  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06758 1743                        18            .byte	$18
06759 1744                        18            .byte	$18
06760 1745                        18            .byte	$18
06761 1746                        18            .byte	$18
06762 1747                        18            .byte	$18
06763 1748                        D8            .byte	$D8
06764 1749                        D8            .byte	$D8
06765 174A                        70            .byte	$70
06766                                           ! 1130  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06767 174B                        30            .byte	$30
06768 174C                        30            .byte	$30
06769 174D                        00            .byte	0
06770 174E                        FC            .byte	$FC
06771 174F                        00            .byte	0
06772 1750                        30            .byte	$30
06773 1751                        30            .byte	$30
06774 1752                        00            .byte	0
06775                                           ! 1131  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06776 1753                        00            .byte	0
06777 1754                        76            .byte	$76
06778 1755                        DC            .byte	$DC
06779 1756                        00            .byte	0
06780 1757                        76            .byte	$76
06781 1758                        DC            .byte	$DC
06782 1759                        00            .byte	0
06783 175A                        00            .byte	0
06784                                           ! 1132  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06785 175B                        38            .byte	$38
06786 175C                        6C            .byte	$6C
06787 175D                        6C            .byte	$6C
06788 175E                        38            .byte	$38
06789 175F                        00            .byte	0
06790 1760                        00            .byte	0
06791 1761                        00            .byte	0
06792 1762                        00            .byte	0
06793                                           ! 1133  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06794 1763                        00            .byte	0
06795 1764                        00            .byte	0
06796 1765                        00            .byte	0
06797 1766                        18            .byte	$18
06798 1767                        18            .byte	$18
06799 1768                        00            .byte	0
06800 1769                        00            .byte	0
06801 176A                        00            .byte	0
06802                                           ! 1134  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06803 176B                        00            .byte	0
06804 176C                        00            .byte	0
06805 176D                        00            .byte	0
06806 176E                        00            .byte	0
06807 176F                        18            .byte	$18
06808 1770                        00            .byte	0
06809 1771                        00            .byte	0
06810 1772                        00            .byte	0
06811                                           ! 1135  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06812 1773                        0F            .byte	$F
06813 1774                        0C            .byte	$C
06814 1775                        0C            .byte	$C
06815 1776                        0C            .byte	$C
06816 1777                        EC            .byte	$EC
06817 1778                        6C            .byte	$6C
06818 1779                        3C            .byte	$3C
06819 177A                        1C            .byte	$1C
06820                                           ! 1136  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06821 177B                        78            .byte	$78
06822 177C                        6C            .byte	$6C
06823 177D                        6C            .byte	$6C
06824 177E                        6C            .byte	$6C
06825 177F                        6C            .byte	$6C
06826 1780                        00            .byte	0
06827 1781                        00            .byte	0
06828 1782                        00            .byte	0
06829                                           ! 1137  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06830 1783                        70            .byte	$70
06831 1784                        18            .byte	$18
06832 1785                        30            .byte	$30
06833 1786                        60            .byte	$60
06834 1787                        78            .byte	$78
06835 1788                        00            .byte	0
06836 1789                        00            .byte	0
06837 178A                        00            .byte	0
06838                                           ! 1138  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06839 178B                        00            .byte	0
06840 178C                        00            .byte	0
06841 178D                        3C            .byte	$3C
06842 178E                        3C            .byte	$3C
06843 178F                        3C            .byte	$3C
06844 1790                        3C            .byte	$3C
06845 1791                        00            .byte	0
06846 1792                        00            .byte	0
06847                                           ! 1139  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
06848 1793                        00            .byte	0
06849 1794                        00            .byte	0
06850 1795                        00            .byte	0
06851 1796                        00            .byte	0
06852 1797                        00            .byte	0
06853 1798                        00            .byte	0
06854                                           ! 1139 x00, 0x00
06855 1799                        00            .byte	0
06856                                           ! 1140 };
06857 179A                        00            .byte	0
06858                                           !BCC_EOS
06859                                           ! 1141 static Bit8u vgafont14[256*14]=
06860                                           ! 1142 {
06861                       0000179B            _vgafont14:
06862                                           ! 1143  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06863 179B                        00            .byte	0
06864 179C                        00            .byte	0
06865 179D                        00            .byte	0
06866 179E                        00            .byte	0
06867 179F                        00            .byte	0
06868 17A0                        00            .byte	0
06869 17A1                        00            .byte	0
06870 17A2                        00            .byte	0
06871 17A3                        00            .byte	0
06872 17A4                        00            .byte	0
06873 17A5                        00            .byte	0
06874 17A6                        00            .byte	0
06875 17A7                        00            .byte	0
06876 17A8                        00            .byte	0
06877                                           ! 1144  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06878 17A9                        00            .byte	0
06879 17AA                        00            .byte	0
06880 17AB                        7E            .byte	$7E
06881 17AC                        81            .byte	$81
06882 17AD                        A5            .byte	$A5
06883 17AE                        81            .byte	$81
06884 17AF                        81            .byte	$81
06885 17B0                        BD            .byte	$BD
06886 17B1                        99            .byte	$99
06887 17B2                        81            .byte	$81
06888 17B3                        7E            .byte	$7E
06889 17B4                        00            .byte	0
06890 17B5                        00            .byte	0
06891 17B6                        00            .byte	0
06892                                           ! 1145  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06893 17B7                        00            .byte	0
06894 17B8                        00            .byte	0
06895 17B9                        7E            .byte	$7E
06896 17BA                        FF            .byte	$FF
06897 17BB                        DB            .byte	$DB
06898 17BC                        FF            .byte	$FF
06899 17BD                        FF            .byte	$FF
06900 17BE                        C3            .byte	$C3
06901 17BF                        E7            .byte	$E7
06902 17C0                        FF            .byte	$FF
06903 17C1                        7E            .byte	$7E
06904 17C2                        00            .byte	0
06905 17C3                        00            .byte	0
06906 17C4                        00            .byte	0
06907                                           ! 1146  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06908 17C5                        00            .byte	0
06909 17C6                        00            .byte	0
06910 17C7                        00            .byte	0
06911 17C8                        6C            .byte	$6C
06912 17C9                        FE            .byte	$FE
06913 17CA                        FE            .byte	$FE
06914 17CB                        FE            .byte	$FE
06915 17CC                        FE            .byte	$FE
06916 17CD                        7C            .byte	$7C
06917 17CE                        38            .byte	$38
06918 17CF                        10            .byte	$10
06919 17D0                        00            .byte	0
06920 17D1                        00            .byte	0
06921 17D2                        00            .byte	0
06922                                           ! 1147  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06923 17D3                        00            .byte	0
06924 17D4                        00            .byte	0
06925 17D5                        00            .byte	0
06926 17D6                        10            .byte	$10
06927 17D7                        38            .byte	$38
06928 17D8                        7C            .byte	$7C
06929 17D9                        FE            .byte	$FE
06930 17DA                        7C            .byte	$7C
06931 17DB                        38            .byte	$38
06932 17DC                        10            .byte	$10
06933 17DD                        00            .byte	0
06934 17DE                        00            .byte	0
06935 17DF                        00            .byte	0
06936 17E0                        00            .byte	0
06937                                           ! 1148  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06938 17E1                        00            .byte	0
06939 17E2                        00            .byte	0
06940 17E3                        18            .byte	$18
06941 17E4                        3C            .byte	$3C
06942 17E5                        3C            .byte	$3C
06943 17E6                        E7            .byte	$E7
06944 17E7                        E7            .byte	$E7
06945 17E8                        E7            .byte	$E7
06946 17E9                        18            .byte	$18
06947 17EA                        18            .byte	$18
06948 17EB                        3C            .byte	$3C
06949 17EC                        00            .byte	0
06950 17ED                        00            .byte	0
06951 17EE                        00            .byte	0
06952                                           ! 1149  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06953 17EF                        00            .byte	0
06954 17F0                        00            .byte	0
06955 17F1                        18            .byte	$18
06956 17F2                        3C            .byte	$3C
06957 17F3                        7E            .byte	$7E
06958 17F4                        FF            .byte	$FF
06959 17F5                        FF            .byte	$FF
06960 17F6                        7E            .byte	$7E
06961 17F7                        18            .byte	$18
06962 17F8                        18            .byte	$18
06963 17F9                        3C            .byte	$3C
06964 17FA                        00            .byte	0
06965 17FB                        00            .byte	0
06966 17FC                        00            .byte	0
06967                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06968 17FD                        00            .byte	0
06969 17FE                        00            .byte	0
06970 17FF                        00            .byte	0
06971 1800                        00            .byte	0
06972 1801                        00            .byte	0
06973 1802                        18            .byte	$18
06974 1803                        3C            .byte	$3C
06975 1804                        3C            .byte	$3C
06976 1805                        18            .byte	$18
06977 1806                        00            .byte	0
06978 1807                        00            .byte	0
06979 1808                        00            .byte	0
06980 1809                        00            .byte	0
06981 180A                        00            .byte	0
06982                                           ! 1151  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06983 180B                        FF            .byte	$FF
06984 180C                        FF            .byte	$FF
06985 180D                        FF            .byte	$FF
06986 180E                        FF            .byte	$FF
06987 180F                        FF            .byte	$FF
06988 1810                        E7            .byte	$E7
06989 1811                        C3            .byte	$C3
06990 1812                        C3            .byte	$C3
06991 1813                        E7            .byte	$E7
06992 1814                        FF            .byte	$FF
06993 1815                        FF            .byte	$FF
06994 1816                        FF            .byte	$FF
06995 1817                        FF            .byte	$FF
06996 1818                        FF            .byte	$FF
06997                                           ! 1152  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06998 1819                        00            .byte	0
06999 181A                        00            .byte	0
07000 181B                        00            .byte	0
07001 181C                        00            .byte	0
07002 181D                        3C            .byte	$3C
07003 181E                        66            .byte	$66
07004 181F                        42            .byte	$42
07005 1820                        42            .byte	$42
07006 1821                        66            .byte	$66
07007 1822                        3C            .byte	$3C
07008 1823                        00            .byte	0
07009 1824                        00            .byte	0
07010 1825                        00            .byte	0
07011 1826                        00            .byte	0
07012                                           ! 1153  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
07013 1827                        FF            .byte	$FF
07014 1828                        FF            .byte	$FF
07015 1829                        FF            .byte	$FF
07016 182A                        FF            .byte	$FF
07017 182B                        C3            .byte	$C3
07018 182C                        99            .byte	$99
07019 182D                        BD            .byte	$BD
07020 182E                        BD            .byte	$BD
07021 182F                        99            .byte	$99
07022 1830                        C3            .byte	$C3
07023 1831                        FF            .byte	$FF
07024 1832                        FF            .byte	$FF
07025 1833                        FF            .byte	$FF
07026 1834                        FF            .byte	$FF
07027                                           ! 1154  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07028 1835                        00            .byte	0
07029 1836                        00            .byte	0
07030 1837                        1E            .byte	$1E
07031 1838                        0E            .byte	$E
07032 1839                        1A            .byte	$1A
07033 183A                        32            .byte	$32
07034 183B                        78            .byte	$78
07035 183C                        CC            .byte	$CC
07036 183D                        CC            .byte	$CC
07037 183E                        CC            .byte	$CC
07038 183F                        78            .byte	$78
07039 1840                        00            .byte	0
07040 1841                        00            .byte	0
07041 1842                        00            .byte	0
07042                                           ! 1155  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07043 1843                        00            .byte	0
07044 1844                        00            .byte	0
07045 1845                        3C            .byte	$3C
07046 1846                        66            .byte	$66
07047 1847                        66            .byte	$66
07048 1848                        66            .byte	$66
07049 1849                        3C            .byte	$3C
07050 184A                        18            .byte	$18
07051 184B                        7E            .byte	$7E
07052 184C                        18            .byte	$18
07053 184D                        18            .byte	$18
07054 184E                        00            .byte	0
07055 184F                        00            .byte	0
07056 1850                        00            .byte	0
07057                                           ! 1156  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07058 1851                        00            .byte	0
07059 1852                        00            .byte	0
07060 1853                        3F            .byte	$3F
07061 1854                        33            .byte	$33
07062 1855                        3F            .byte	$3F
07063 1856                        30            .byte	$30
07064 1857                        30            .byte	$30
07065 1858                        30            .byte	$30
07066 1859                        70            .byte	$70
07067 185A                        F0            .byte	$F0
07068 185B                        E0            .byte	$E0
07069 185C                        00            .byte	0
07070 185D                        00            .byte	0
07071 185E                        00            .byte	0
07072                                           ! 1157  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07073 185F                        00            .byte	0
07074 1860                        00            .byte	0
07075 1861                        7F            .byte	$7F
07076 1862                        63            .byte	$63
07077 1863                        7F            .byte	$7F
07078 1864                        63            .byte	$63
07079 1865                        63            .byte	$63
07080 1866                        63            .byte	$63
07081 1867                        67            .byte	$67
07082 1868                        E7            .byte	$E7
07083 1869                        E6            .byte	$E6
07084 186A                        C0            .byte	$C0
07085 186B                        00            .byte	0
07086 186C                        00            .byte	0
07087                                           ! 1158  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07088 186D                        00            .byte	0
07089 186E                        00            .byte	0
07090 186F                        18            .byte	$18
07091 1870                        18            .byte	$18
07092 1871                        DB            .byte	$DB
07093 1872                        3C            .byte	$3C
07094 1873                        E7            .byte	$E7
07095 1874                        3C            .byte	$3C
07096 1875                        DB            .byte	$DB
07097 1876                        18            .byte	$18
07098 1877                        18            .byte	$18
07099 1878                        00            .byte	0
07100 1879                        00            .byte	0
07101 187A                        00            .byte	0
07102                                           ! 1159  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07103 187B                        00            .byte	0
07104 187C                        00            .byte	0
07105 187D                        80            .byte	$80
07106 187E                        C0            .byte	$C0
07107 187F                        E0            .byte	$E0
07108 1880                        F8            .byte	$F8
07109 1881                        FE            .byte	$FE
07110 1882                        F8            .byte	$F8
07111 1883                        E0            .byte	$E0
07112 1884                        C0            .byte	$C0
07113 1885                        80            .byte	$80
07114 1886                        00            .byte	0
07115 1887                        00            .byte	0
07116 1888                        00            .byte	0
07117                                           ! 1160  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07118 1889                        00            .byte	0
07119 188A                        00            .byte	0
07120 188B                        02            .byte	2
07121 188C                        06            .byte	6
07122 188D                        0E            .byte	$E
07123 188E                        3E            .byte	$3E
07124 188F                        FE            .byte	$FE
07125 1890                        3E            .byte	$3E
07126 1891                        0E            .byte	$E
07127 1892                        06            .byte	6
07128 1893                        02            .byte	2
07129 1894                        00            .byte	0
07130 1895                        00            .byte	0
07131 1896                        00            .byte	0
07132                                           ! 1161  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07133 1897                        00            .byte	0
07134 1898                        00            .byte	0
07135 1899                        18            .byte	$18
07136 189A                        3C            .byte	$3C
07137 189B                        7E            .byte	$7E
07138 189C                        18            .byte	$18
07139 189D                        18            .byte	$18
07140 189E                        18            .byte	$18
07141 189F                        7E            .byte	$7E
07142 18A0                        3C            .byte	$3C
07143 18A1                        18            .byte	$18
07144 18A2                        00            .byte	0
07145 18A3                        00            .byte	0
07146 18A4                        00            .byte	0
07147                                           ! 1162  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07148 18A5                        00            .byte	0
07149 18A6                        00            .byte	0
07150 18A7                        66            .byte	$66
07151 18A8                        66            .byte	$66
07152 18A9                        66            .byte	$66
07153 18AA                        66            .byte	$66
07154 18AB                        66            .byte	$66
07155 18AC                        66            .byte	$66
07156 18AD                        00            .byte	0
07157 18AE                        66            .byte	$66
07158 18AF                        66            .byte	$66
07159 18B0                        00            .byte	0
07160 18B1                        00            .byte	0
07161 18B2                        00            .byte	0
07162                                           ! 1163  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07163 18B3                        00            .byte	0
07164 18B4                        00            .byte	0
07165 18B5                        7F            .byte	$7F
07166 18B6                        DB            .byte	$DB
07167 18B7                        DB            .byte	$DB
07168 18B8                        DB            .byte	$DB
07169 18B9                        7B            .byte	$7B
07170 18BA                        1B            .byte	$1B
07171 18BB                        1B            .byte	$1B
07172 18BC                        1B            .byte	$1B
07173 18BD                        1B            .byte	$1B
07174 18BE                        00            .byte	0
07175 18BF                        00            .byte	0
07176 18C0                        00            .byte	0
07177                                           ! 1164  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07178 18C1                        00            .byte	0
07179 18C2                        7C            .byte	$7C
07180 18C3                        C6            .byte	$C6
07181 18C4                        60            .byte	$60
07182 18C5                        38            .byte	$38
07183 18C6                        6C            .byte	$6C
07184 18C7                        C6            .byte	$C6
07185 18C8                        C6            .byte	$C6
07186 18C9                        6C            .byte	$6C
07187 18CA                        38            .byte	$38
07188 18CB                        0C            .byte	$C
07189 18CC                        C6            .byte	$C6
07190 18CD                        7C            .byte	$7C
07191 18CE                        00            .byte	0
07192                                           ! 1165  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07193 18CF                        00            .byte	0
07194 18D0                        00            .byte	0
07195 18D1                        00            .byte	0
07196 18D2                        00            .byte	0
07197 18D3                        00            .byte	0
07198 18D4                        00            .byte	0
07199 18D5                        00            .byte	0
07200 18D6                        00            .byte	0
07201 18D7                        FE            .byte	$FE
07202 18D8                        FE            .byte	$FE
07203 18D9                        FE            .byte	$FE
07204 18DA                        00            .byte	0
07205 18DB                        00            .byte	0
07206 18DC                        00            .byte	0
07207                                           ! 1166  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x1
07208 18DD                        00            .byte	0
07209 18DE                        00            .byte	0
07210 18DF                        18            .byte	$18
07211 18E0                        3C            .byte	$3C
07212 18E1                        7E            .byte	$7E
07213 18E2                        18            .byte	$18
07214 18E3                        18            .byte	$18
07215                                           ! 1166 8, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07216 18E4                        18            .byte	$18
07217 18E5                        7E            .byte	$7E
07218 18E6                        3C            .byte	$3C
07219 18E7                        18            .byte	$18
07220 18E8                        7E            .byte	$7E
07221 18E9                        00            .byte	0
07222 18EA                        00            .byte	0
07223                                           ! 1167  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07224 18EB                        00            .byte	0
07225 18EC                        00            .byte	0
07226 18ED                        18            .byte	$18
07227 18EE                        3C            .byte	$3C
07228 18EF                        7E            .byte	$7E
07229 18F0                        18            .byte	$18
07230 18F1                        18            .byte	$18
07231 18F2                        18            .byte	$18
07232 18F3                        18            .byte	$18
07233 18F4                        18            .byte	$18
07234 18F5                        18            .byte	$18
07235 18F6                        00            .byte	0
07236 18F7                        00            .byte	0
07237 18F8                        00            .byte	0
07238                                           ! 1168  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07239 18F9                        00            .byte	0
07240 18FA                        00            .byte	0
07241 18FB                        18            .byte	$18
07242 18FC                        18            .byte	$18
07243 18FD                        18            .byte	$18
07244 18FE                        18            .byte	$18
07245 18FF                        18            .byte	$18
07246 1900                        18            .byte	$18
07247 1901                        7E            .byte	$7E
07248 1902                        3C            .byte	$3C
07249 1903                        18            .byte	$18
07250 1904                        00            .byte	0
07251 1905                        00            .byte	0
07252 1906                        00            .byte	0
07253                                           ! 1169  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07254 1907                        00            .byte	0
07255 1908                        00            .byte	0
07256 1909                        00            .byte	0
07257 190A                        00            .byte	0
07258 190B                        18            .byte	$18
07259 190C                        0C            .byte	$C
07260 190D                        FE            .byte	$FE
07261 190E                        0C            .byte	$C
07262 190F                        18            .byte	$18
07263 1910                        00            .byte	0
07264 1911                        00            .byte	0
07265 1912                        00            .byte	0
07266 1913                        00            .byte	0
07267 1914                        00            .byte	0
07268                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07269 1915                        00            .byte	0
07270 1916                        00            .byte	0
07271 1917                        00            .byte	0
07272 1918                        00            .byte	0
07273 1919                        30            .byte	$30
07274 191A                        60            .byte	$60
07275 191B                        FE            .byte	$FE
07276 191C                        60            .byte	$60
07277 191D                        30            .byte	$30
07278 191E                        00            .byte	0
07279 191F                        00            .byte	0
07280 1920                        00            .byte	0
07281 1921                        00            .byte	0
07282 1922                        00            .byte	0
07283                                           ! 1171  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07284 1923                        00            .byte	0
07285 1924                        00            .byte	0
07286 1925                        00            .byte	0
07287 1926                        00            .byte	0
07288 1927                        00            .byte	0
07289 1928                        C0            .byte	$C0
07290 1929                        C0            .byte	$C0
07291 192A                        C0            .byte	$C0
07292 192B                        FE            .byte	$FE
07293 192C                        00            .byte	0
07294 192D                        00            .byte	0
07295 192E                        00            .byte	0
07296 192F                        00            .byte	0
07297 1930                        00            .byte	0
07298                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07299 1931                        00            .byte	0
07300 1932                        00            .byte	0
07301 1933                        00            .byte	0
07302 1934                        00            .byte	0
07303 1935                        28            .byte	$28
07304 1936                        6C            .byte	$6C
07305 1937                        FE            .byte	$FE
07306 1938                        6C            .byte	$6C
07307 1939                        28            .byte	$28
07308 193A                        00            .byte	0
07309 193B                        00            .byte	0
07310 193C                        00            .byte	0
07311 193D                        00            .byte	0
07312 193E                        00            .byte	0
07313                                           ! 1173  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07314 193F                        00            .byte	0
07315 1940                        00            .byte	0
07316 1941                        00            .byte	0
07317 1942                        10            .byte	$10
07318 1943                        38            .byte	$38
07319 1944                        38            .byte	$38
07320 1945                        7C            .byte	$7C
07321 1946                        7C            .byte	$7C
07322 1947                        FE            .byte	$FE
07323 1948                        FE            .byte	$FE
07324 1949                        00            .byte	0
07325 194A                        00            .byte	0
07326 194B                        00            .byte	0
07327 194C                        00            .byte	0
07328                                           ! 1174  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07329 194D                        00            .byte	0
07330 194E                        00            .byte	0
07331 194F                        00            .byte	0
07332 1950                        FE            .byte	$FE
07333 1951                        FE            .byte	$FE
07334 1952                        7C            .byte	$7C
07335 1953                        7C            .byte	$7C
07336 1954                        38            .byte	$38
07337 1955                        38            .byte	$38
07338 1956                        10            .byte	$10
07339 1957                        00            .byte	0
07340 1958                        00            .byte	0
07341 1959                        00            .byte	0
07342 195A                        00            .byte	0
07343                                           ! 1175  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07344 195B                        00            .byte	0
07345 195C                        00            .byte	0
07346 195D                        00            .byte	0
07347 195E                        00            .byte	0
07348 195F                        00            .byte	0
07349 1960                        00            .byte	0
07350 1961                        00            .byte	0
07351 1962                        00            .byte	0
07352 1963                        00            .byte	0
07353 1964                        00            .byte	0
07354 1965                        00            .byte	0
07355 1966                        00            .byte	0
07356 1967                        00            .byte	0
07357 1968                        00            .byte	0
07358                                           ! 1176  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07359 1969                        00            .byte	0
07360 196A                        00            .byte	0
07361 196B                        18            .byte	$18
07362 196C                        3C            .byte	$3C
07363 196D                        3C            .byte	$3C
07364 196E                        3C            .byte	$3C
07365 196F                        18            .byte	$18
07366 1970                        18            .byte	$18
07367 1971                        00            .byte	0
07368 1972                        18            .byte	$18
07369 1973                        18            .byte	$18
07370 1974                        00            .byte	0
07371 1975                        00            .byte	0
07372 1976                        00            .byte	0
07373                                           ! 1177  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07374 1977                        00            .byte	0
07375 1978                        66            .byte	$66
07376 1979                        66            .byte	$66
07377 197A                        66            .byte	$66
07378 197B                        24            .byte	$24
07379 197C                        00            .byte	0
07380 197D                        00            .byte	0
07381 197E                        00            .byte	0
07382 197F                        00            .byte	0
07383 1980                        00            .byte	0
07384 1981                        00            .byte	0
07385 1982                        00            .byte	0
07386 1983                        00            .byte	0
07387 1984                        00            .byte	0
07388                                           ! 1178  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07389 1985                        00            .byte	0
07390 1986                        00            .byte	0
07391 1987                        6C            .byte	$6C
07392 1988                        6C            .byte	$6C
07393 1989                        FE            .byte	$FE
07394 198A                        6C            .byte	$6C
07395 198B                        6C            .byte	$6C
07396 198C                        6C            .byte	$6C
07397 198D                        FE            .byte	$FE
07398 198E                        6C            .byte	$6C
07399 198F                        6C            .byte	$6C
07400 1990                        00            .byte	0
07401 1991                        00            .byte	0
07402 1992                        00            .byte	0
07403                                           ! 1179  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07404 1993                        18            .byte	$18
07405 1994                        18            .byte	$18
07406 1995                        7C            .byte	$7C
07407 1996                        C6            .byte	$C6
07408 1997                        C2            .byte	$C2
07409 1998                        C0            .byte	$C0
07410 1999                        7C            .byte	$7C
07411 199A                        06            .byte	6
07412 199B                        86            .byte	$86
07413 199C                        C6            .byte	$C6
07414 199D                        7C            .byte	$7C
07415 199E                        18            .byte	$18
07416 199F                        18            .byte	$18
07417 19A0                        00            .byte	0
07418                                           ! 1180  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07419 19A1                        00            .byte	0
07420 19A2                        00            .byte	0
07421 19A3                        00            .byte	0
07422 19A4                        00            .byte	0
07423 19A5                        C2            .byte	$C2
07424 19A6                        C6            .byte	$C6
07425 19A7                        0C            .byte	$C
07426 19A8                        18            .byte	$18
07427 19A9                        30            .byte	$30
07428 19AA                        66            .byte	$66
07429 19AB                        C6            .byte	$C6
07430 19AC                        00            .byte	0
07431 19AD                        00            .byte	0
07432 19AE                        00            .byte	0
07433                                           ! 1181  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07434 19AF                        00            .byte	0
07435 19B0                        00            .byte	0
07436 19B1                        38            .byte	$38
07437 19B2                        6C            .byte	$6C
07438 19B3                        6C            .byte	$6C
07439 19B4                        38            .byte	$38
07440 19B5                        76            .byte	$76
07441 19B6                        DC            .byte	$DC
07442 19B7                        CC            .byte	$CC
07443 19B8                        CC            .byte	$CC
07444 19B9                        76            .byte	$76
07445 19BA                        00            .byte	0
07446 19BB                        00            .byte	0
07447 19BC                        00            .byte	0
07448                                           ! 1182  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07449 19BD                        00            .byte	0
07450 19BE                        30            .byte	$30
07451 19BF                        30            .byte	$30
07452 19C0                        30            .byte	$30
07453 19C1                        60            .byte	$60
07454 19C2                        00            .byte	0
07455 19C3                        00            .byte	0
07456 19C4                        00            .byte	0
07457 19C5                        00            .byte	0
07458 19C6                        00            .byte	0
07459 19C7                        00            .byte	0
07460 19C8                        00            .byte	0
07461 19C9                        00            .byte	0
07462 19CA                        00            .byte	0
07463                                           ! 1183  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07464 19CB                        00            .byte	0
07465 19CC                        00            .byte	0
07466 19CD                        0C            .byte	$C
07467 19CE                        18            .byte	$18
07468 19CF                        30            .byte	$30
07469 19D0                        30            .byte	$30
07470 19D1                        30            .byte	$30
07471 19D2                        30            .byte	$30
07472 19D3                        30            .byte	$30
07473 19D4                        18            .byte	$18
07474 19D5                        0C            .byte	$C
07475 19D6                        00            .byte	0
07476 19D7                        00            .byte	0
07477 19D8                        00            .byte	0
07478                                           ! 1184  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07479 19D9                        00            .byte	0
07480 19DA                        00            .byte	0
07481 19DB                        30            .byte	$30
07482 19DC                        18            .byte	$18
07483 19DD                        0C            .byte	$C
07484 19DE                        0C            .byte	$C
07485 19DF                        0C            .byte	$C
07486 19E0                        0C            .byte	$C
07487 19E1                        0C            .byte	$C
07488 19E2                        18            .byte	$18
07489 19E3                        30            .byte	$30
07490 19E4                        00            .byte	0
07491 19E5                        00            .byte	0
07492 19E6                        00            .byte	0
07493                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07494 19E7                        00            .byte	0
07495 19E8                        00            .byte	0
07496 19E9                        00            .byte	0
07497 19EA                        00            .byte	0
07498 19EB                        66            .byte	$66
07499 19EC                        3C            .byte	$3C
07500 19ED                        FF            .byte	$FF
07501 19EE                        3C            .byte	$3C
07502 19EF                        66            .byte	$66
07503 19F0                        00            .byte	0
07504 19F1                        00            .byte	0
07505 19F2                        00            .byte	0
07506 19F3                        00            .byte	0
07507 19F4                        00            .byte	0
07508                                           ! 1186  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07509 19F5                        00            .byte	0
07510 19F6                        00            .byte	0
07511 19F7                        00            .byte	0
07512 19F8                        00            .byte	0
07513 19F9                        18            .byte	$18
07514 19FA                        18            .byte	$18
07515 19FB                        7E            .byte	$7E
07516 19FC                        18            .byte	$18
07517 19FD                        18            .byte	$18
07518 19FE                        00            .byte	0
07519 19FF                        00            .byte	0
07520 1A00                        00            .byte	0
07521 1A01                        00            .byte	0
07522 1A02                        00            .byte	0
07523                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07524 1A03                        00            .byte	0
07525 1A04                        00            .byte	0
07526 1A05                        00            .byte	0
07527 1A06                        00            .byte	0
07528 1A07                        00            .byte	0
07529 1A08                        00            .byte	0
07530 1A09                        00            .byte	0
07531 1A0A                        00            .byte	0
07532 1A0B                        18            .byte	$18
07533 1A0C                        18            .byte	$18
07534 1A0D                        18            .byte	$18
07535 1A0E                        30            .byte	$30
07536 1A0F                        00            .byte	0
07537 1A10                        00            .byte	0
07538                                           ! 1188  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07539 1A11                        00            .byte	0
07540 1A12                        00            .byte	0
07541 1A13                        00            .byte	0
07542 1A14                        00            .byte	0
07543 1A15                        00            .byte	0
07544 1A16                        00            .byte	0
07545 1A17                        FE            .byte	$FE
07546 1A18                        00            .byte	0
07547 1A19                        00            .byte	0
07548 1A1A                        00            .byte	0
07549 1A1B                        00            .byte	0
07550 1A1C                        00            .byte	0
07551 1A1D                        00            .byte	0
07552 1A1E                        00            .byte	0
07553                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07554 1A1F                        00            .byte	0
07555 1A20                        00            .byte	0
07556 1A21                        00            .byte	0
07557 1A22                        00            .byte	0
07558 1A23                        00            .byte	0
07559 1A24                        00            .byte	0
07560 1A25                        00            .byte	0
07561 1A26                        00            .byte	0
07562 1A27                        00            .byte	0
07563 1A28                        18            .byte	$18
07564 1A29                        18            .byte	$18
07565 1A2A                        00            .byte	0
07566 1A2B                        00            .byte	0
07567 1A2C                        00            .byte	0
07568                                           ! 1190  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0,
07569 1A2D                        00            .byte	0
07570 1A2E                        00            .byte	0
07571 1A2F                        02            .byte	2
07572 1A30                        06            .byte	6
07573 1A31                        0C            .byte	$C
07574 1A32                        18            .byte	$18
07575 1A33                        30            .byte	$30
07576 1A34                        60            .byte	$60
07577                                           ! 1190  0x80, 0x00, 0x00, 0x00, 0x00,
07578 1A35                        C0            .byte	$C0
07579 1A36                        80            .byte	$80
07580 1A37                        00            .byte	0
07581 1A38                        00            .byte	0
07582 1A39                        00            .byte	0
07583 1A3A                        00            .byte	0
07584                                           ! 1191  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07585 1A3B                        00            .byte	0
07586 1A3C                        00            .byte	0
07587 1A3D                        7C            .byte	$7C
07588 1A3E                        C6            .byte	$C6
07589 1A3F                        CE            .byte	$CE
07590 1A40                        DE            .byte	$DE
07591 1A41                        F6            .byte	$F6
07592 1A42                        E6            .byte	$E6
07593 1A43                        C6            .byte	$C6
07594 1A44                        C6            .byte	$C6
07595 1A45                        7C            .byte	$7C
07596 1A46                        00            .byte	0
07597 1A47                        00            .byte	0
07598 1A48                        00            .byte	0
07599                                           ! 1192  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07600 1A49                        00            .byte	0
07601 1A4A                        00            .byte	0
07602 1A4B                        18            .byte	$18
07603 1A4C                        38            .byte	$38
07604 1A4D                        78            .byte	$78
07605 1A4E                        18            .byte	$18
07606 1A4F                        18            .byte	$18
07607 1A50                        18            .byte	$18
07608 1A51                        18            .byte	$18
07609 1A52                        18            .byte	$18
07610 1A53                        7E            .byte	$7E
07611 1A54                        00            .byte	0
07612 1A55                        00            .byte	0
07613 1A56                        00            .byte	0
07614                                           ! 1193  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07615 1A57                        00            .byte	0
07616 1A58                        00            .byte	0
07617 1A59                        7C            .byte	$7C
07618 1A5A                        C6            .byte	$C6
07619 1A5B                        06            .byte	6
07620 1A5C                        0C            .byte	$C
07621 1A5D                        18            .byte	$18
07622 1A5E                        30            .byte	$30
07623 1A5F                        60            .byte	$60
07624 1A60                        C6            .byte	$C6
07625 1A61                        FE            .byte	$FE
07626 1A62                        00            .byte	0
07627 1A63                        00            .byte	0
07628 1A64                        00            .byte	0
07629                                           ! 1194  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07630 1A65                        00            .byte	0
07631 1A66                        00            .byte	0
07632 1A67                        7C            .byte	$7C
07633 1A68                        C6            .byte	$C6
07634 1A69                        06            .byte	6
07635 1A6A                        06            .byte	6
07636 1A6B                        3C            .byte	$3C
07637 1A6C                        06            .byte	6
07638 1A6D                        06            .byte	6
07639 1A6E                        C6            .byte	$C6
07640 1A6F                        7C            .byte	$7C
07641 1A70                        00            .byte	0
07642 1A71                        00            .byte	0
07643 1A72                        00            .byte	0
07644                                           ! 1195  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07645 1A73                        00            .byte	0
07646 1A74                        00            .byte	0
07647 1A75                        0C            .byte	$C
07648 1A76                        1C            .byte	$1C
07649 1A77                        3C            .byte	$3C
07650 1A78                        6C            .byte	$6C
07651 1A79                        CC            .byte	$CC
07652 1A7A                        FE            .byte	$FE
07653 1A7B                        0C            .byte	$C
07654 1A7C                        0C            .byte	$C
07655 1A7D                        1E            .byte	$1E
07656 1A7E                        00            .byte	0
07657 1A7F                        00            .byte	0
07658 1A80                        00            .byte	0
07659                                           ! 1196  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07660 1A81                        00            .byte	0
07661 1A82                        00            .byte	0
07662 1A83                        FE            .byte	$FE
07663 1A84                        C0            .byte	$C0
07664 1A85                        C0            .byte	$C0
07665 1A86                        C0            .byte	$C0
07666 1A87                        FC            .byte	$FC
07667 1A88                        06            .byte	6
07668 1A89                        06            .byte	6
07669 1A8A                        C6            .byte	$C6
07670 1A8B                        7C            .byte	$7C
07671 1A8C                        00            .byte	0
07672 1A8D                        00            .byte	0
07673 1A8E                        00            .byte	0
07674                                           ! 1197  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07675 1A8F                        00            .byte	0
07676 1A90                        00            .byte	0
07677 1A91                        38            .byte	$38
07678 1A92                        60            .byte	$60
07679 1A93                        C0            .byte	$C0
07680 1A94                        C0            .byte	$C0
07681 1A95                        FC            .byte	$FC
07682 1A96                        C6            .byte	$C6
07683 1A97                        C6            .byte	$C6
07684 1A98                        C6            .byte	$C6
07685 1A99                        7C            .byte	$7C
07686 1A9A                        00            .byte	0
07687 1A9B                        00            .byte	0
07688 1A9C                        00            .byte	0
07689                                           ! 1198  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07690 1A9D                        00            .byte	0
07691 1A9E                        00            .byte	0
07692 1A9F                        FE            .byte	$FE
07693 1AA0                        C6            .byte	$C6
07694 1AA1                        06            .byte	6
07695 1AA2                        0C            .byte	$C
07696 1AA3                        18            .byte	$18
07697 1AA4                        30            .byte	$30
07698 1AA5                        30            .byte	$30
07699 1AA6                        30            .byte	$30
07700 1AA7                        30            .byte	$30
07701 1AA8                        00            .byte	0
07702 1AA9                        00            .byte	0
07703 1AAA                        00            .byte	0
07704                                           ! 1199  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07705 1AAB                        00            .byte	0
07706 1AAC                        00            .byte	0
07707 1AAD                        7C            .byte	$7C
07708 1AAE                        C6            .byte	$C6
07709 1AAF                        C6            .byte	$C6
07710 1AB0                        C6            .byte	$C6
07711 1AB1                        7C            .byte	$7C
07712 1AB2                        C6            .byte	$C6
07713 1AB3                        C6            .byte	$C6
07714 1AB4                        C6            .byte	$C6
07715 1AB5                        7C            .byte	$7C
07716 1AB6                        00            .byte	0
07717 1AB7                        00            .byte	0
07718 1AB8                        00            .byte	0
07719                                           ! 1200  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07720 1AB9                        00            .byte	0
07721 1ABA                        00            .byte	0
07722 1ABB                        7C            .byte	$7C
07723 1ABC                        C6            .byte	$C6
07724 1ABD                        C6            .byte	$C6
07725 1ABE                        C6            .byte	$C6
07726 1ABF                        7E            .byte	$7E
07727 1AC0                        06            .byte	6
07728 1AC1                        06            .byte	6
07729 1AC2                        0C            .byte	$C
07730 1AC3                        78            .byte	$78
07731 1AC4                        00            .byte	0
07732 1AC5                        00            .byte	0
07733 1AC6                        00            .byte	0
07734                                           ! 1201  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07735 1AC7                        00            .byte	0
07736 1AC8                        00            .byte	0
07737 1AC9                        00            .byte	0
07738 1ACA                        18            .byte	$18
07739 1ACB                        18            .byte	$18
07740 1ACC                        00            .byte	0
07741 1ACD                        00            .byte	0
07742 1ACE                        00            .byte	0
07743 1ACF                        18            .byte	$18
07744 1AD0                        18            .byte	$18
07745 1AD1                        00            .byte	0
07746 1AD2                        00            .byte	0
07747 1AD3                        00            .byte	0
07748 1AD4                        00            .byte	0
07749                                           ! 1202  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07750 1AD5                        00            .byte	0
07751 1AD6                        00            .byte	0
07752 1AD7                        00            .byte	0
07753 1AD8                        18            .byte	$18
07754 1AD9                        18            .byte	$18
07755 1ADA                        00            .byte	0
07756 1ADB                        00            .byte	0
07757 1ADC                        00            .byte	0
07758 1ADD                        18            .byte	$18
07759 1ADE                        18            .byte	$18
07760 1ADF                        30            .byte	$30
07761 1AE0                        00            .byte	0
07762 1AE1                        00            .byte	0
07763 1AE2                        00            .byte	0
07764                                           ! 1203  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07765 1AE3                        00            .byte	0
07766 1AE4                        00            .byte	0
07767 1AE5                        06            .byte	6
07768 1AE6                        0C            .byte	$C
07769 1AE7                        18            .byte	$18
07770 1AE8                        30            .byte	$30
07771 1AE9                        60            .byte	$60
07772 1AEA                        30            .byte	$30
07773 1AEB                        18            .byte	$18
07774 1AEC                        0C            .byte	$C
07775 1AED                        06            .byte	6
07776 1AEE                        00            .byte	0
07777 1AEF                        00            .byte	0
07778 1AF0                        00            .byte	0
07779                                           ! 1204  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07780 1AF1                        00            .byte	0
07781 1AF2                        00            .byte	0
07782 1AF3                        00            .byte	0
07783 1AF4                        00            .byte	0
07784 1AF5                        00            .byte	0
07785 1AF6                        7E            .byte	$7E
07786 1AF7                        00            .byte	0
07787 1AF8                        00            .byte	0
07788 1AF9                        7E            .byte	$7E
07789 1AFA                        00            .byte	0
07790 1AFB                        00            .byte	0
07791 1AFC                        00            .byte	0
07792 1AFD                        00            .byte	0
07793 1AFE                        00            .byte	0
07794                                           ! 1205  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07795 1AFF                        00            .byte	0
07796 1B00                        00            .byte	0
07797 1B01                        60            .byte	$60
07798 1B02                        30            .byte	$30
07799 1B03                        18            .byte	$18
07800 1B04                        0C            .byte	$C
07801 1B05                        06            .byte	6
07802 1B06                        0C            .byte	$C
07803 1B07                        18            .byte	$18
07804 1B08                        30            .byte	$30
07805 1B09                        60            .byte	$60
07806 1B0A                        00            .byte	0
07807 1B0B                        00            .byte	0
07808 1B0C                        00            .byte	0
07809                                           ! 1206  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07810 1B0D                        00            .byte	0
07811 1B0E                        00            .byte	0
07812 1B0F                        7C            .byte	$7C
07813 1B10                        C6            .byte	$C6
07814 1B11                        C6            .byte	$C6
07815 1B12                        0C            .byte	$C
07816 1B13                        18            .byte	$18
07817 1B14                        18            .byte	$18
07818 1B15                        00            .byte	0
07819 1B16                        18            .byte	$18
07820 1B17                        18            .byte	$18
07821 1B18                        00            .byte	0
07822 1B19                        00            .byte	0
07823 1B1A                        00            .byte	0
07824                                           ! 1207  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07825 1B1B                        00            .byte	0
07826 1B1C                        00            .byte	0
07827 1B1D                        7C            .byte	$7C
07828 1B1E                        C6            .byte	$C6
07829 1B1F                        C6            .byte	$C6
07830 1B20                        DE            .byte	$DE
07831 1B21                        DE            .byte	$DE
07832 1B22                        DE            .byte	$DE
07833 1B23                        DC            .byte	$DC
07834 1B24                        C0            .byte	$C0
07835 1B25                        7C            .byte	$7C
07836 1B26                        00            .byte	0
07837 1B27                        00            .byte	0
07838 1B28                        00            .byte	0
07839                                           ! 1208  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07840 1B29                        00            .byte	0
07841 1B2A                        00            .byte	0
07842 1B2B                        10            .byte	$10
07843 1B2C                        38            .byte	$38
07844 1B2D                        6C            .byte	$6C
07845 1B2E                        C6            .byte	$C6
07846 1B2F                        C6            .byte	$C6
07847 1B30                        FE            .byte	$FE
07848 1B31                        C6            .byte	$C6
07849 1B32                        C6            .byte	$C6
07850 1B33                        C6            .byte	$C6
07851 1B34                        00            .byte	0
07852 1B35                        00            .byte	0
07853 1B36                        00            .byte	0
07854                                           ! 1209  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07855 1B37                        00            .byte	0
07856 1B38                        00            .byte	0
07857 1B39                        FC            .byte	$FC
07858 1B3A                        66            .byte	$66
07859 1B3B                        66            .byte	$66
07860 1B3C                        66            .byte	$66
07861 1B3D                        7C            .byte	$7C
07862 1B3E                        66            .byte	$66
07863 1B3F                        66            .byte	$66
07864 1B40                        66            .byte	$66
07865 1B41                        FC            .byte	$FC
07866 1B42                        00            .byte	0
07867 1B43                        00            .byte	0
07868 1B44                        00            .byte	0
07869                                           ! 1210  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07870 1B45                        00            .byte	0
07871 1B46                        00            .byte	0
07872 1B47                        3C            .byte	$3C
07873 1B48                        66            .byte	$66
07874 1B49                        C2            .byte	$C2
07875 1B4A                        C0            .byte	$C0
07876 1B4B                        C0            .byte	$C0
07877 1B4C                        C0            .byte	$C0
07878 1B4D                        C2            .byte	$C2
07879 1B4E                        66            .byte	$66
07880 1B4F                        3C            .byte	$3C
07881 1B50                        00            .byte	0
07882 1B51                        00            .byte	0
07883 1B52                        00            .byte	0
07884                                           ! 1211  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07885 1B53                        00            .byte	0
07886 1B54                        00            .byte	0
07887 1B55                        F8            .byte	$F8
07888 1B56                        6C            .byte	$6C
07889 1B57                        66            .byte	$66
07890 1B58                        66            .byte	$66
07891 1B59                        66            .byte	$66
07892 1B5A                        66            .byte	$66
07893 1B5B                        66            .byte	$66
07894 1B5C                        6C            .byte	$6C
07895 1B5D                        F8            .byte	$F8
07896 1B5E                        00            .byte	0
07897 1B5F                        00            .byte	0
07898 1B60                        00            .byte	0
07899                                           ! 1212  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07900 1B61                        00            .byte	0
07901 1B62                        00            .byte	0
07902 1B63                        FE            .byte	$FE
07903 1B64                        66            .byte	$66
07904 1B65                        62            .byte	$62
07905 1B66                        68            .byte	$68
07906 1B67                        78            .byte	$78
07907 1B68                        68            .byte	$68
07908 1B69                        62            .byte	$62
07909 1B6A                        66            .byte	$66
07910 1B6B                        FE            .byte	$FE
07911 1B6C                        00            .byte	0
07912 1B6D                        00            .byte	0
07913 1B6E                        00            .byte	0
07914                                           ! 1213  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07915 1B6F                        00            .byte	0
07916 1B70                        00            .byte	0
07917 1B71                        FE            .byte	$FE
07918 1B72                        66            .byte	$66
07919 1B73                        62            .byte	$62
07920 1B74                        68            .byte	$68
07921 1B75                        78            .byte	$78
07922 1B76                        68            .byte	$68
07923 1B77                        60            .byte	$60
07924 1B78                        60            .byte	$60
07925 1B79                        F0            .byte	$F0
07926 1B7A                        00            .byte	0
07927 1B7B                        00            .byte	0
07928 1B7C                        00            .byte	0
07929                                           ! 1214  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0
07930 1B7D                        00            .byte	0
07931 1B7E                        00            .byte	0
07932 1B7F                        3C            .byte	$3C
07933 1B80                        66            .byte	$66
07934 1B81                        C2            .byte	$C2
07935 1B82                        C0            .byte	$C0
07936 1B83                        C0            .byte	$C0
07937 1B84                        DE            .byte	$DE
07938 1B85                        C6            .byte	$C6
07939 1B86                        66            .byte	$66
07940                                           ! 1214 x3a, 0x00, 0x00, 0x00,
07941 1B87                        3A            .byte	$3A
07942 1B88                        00            .byte	0
07943 1B89                        00            .byte	0
07944 1B8A                        00            .byte	0
07945                                           ! 1215  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07946 1B8B                        00            .byte	0
07947 1B8C                        00            .byte	0
07948 1B8D                        C6            .byte	$C6
07949 1B8E                        C6            .byte	$C6
07950 1B8F                        C6            .byte	$C6
07951 1B90                        C6            .byte	$C6
07952 1B91                        FE            .byte	$FE
07953 1B92                        C6            .byte	$C6
07954 1B93                        C6            .byte	$C6
07955 1B94                        C6            .byte	$C6
07956 1B95                        C6            .byte	$C6
07957 1B96                        00            .byte	0
07958 1B97                        00            .byte	0
07959 1B98                        00            .byte	0
07960                                           ! 1216  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07961 1B99                        00            .byte	0
07962 1B9A                        00            .byte	0
07963 1B9B                        3C            .byte	$3C
07964 1B9C                        18            .byte	$18
07965 1B9D                        18            .byte	$18
07966 1B9E                        18            .byte	$18
07967 1B9F                        18            .byte	$18
07968 1BA0                        18            .byte	$18
07969 1BA1                        18            .byte	$18
07970 1BA2                        18            .byte	$18
07971 1BA3                        3C            .byte	$3C
07972 1BA4                        00            .byte	0
07973 1BA5                        00            .byte	0
07974 1BA6                        00            .byte	0
07975                                           ! 1217  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07976 1BA7                        00            .byte	0
07977 1BA8                        00            .byte	0
07978 1BA9                        1E            .byte	$1E
07979 1BAA                        0C            .byte	$C
07980 1BAB                        0C            .byte	$C
07981 1BAC                        0C            .byte	$C
07982 1BAD                        0C            .byte	$C
07983 1BAE                        0C            .byte	$C
07984 1BAF                        CC            .byte	$CC
07985 1BB0                        CC            .byte	$CC
07986 1BB1                        78            .byte	$78
07987 1BB2                        00            .byte	0
07988 1BB3                        00            .byte	0
07989 1BB4                        00            .byte	0
07990                                           ! 1218  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07991 1BB5                        00            .byte	0
07992 1BB6                        00            .byte	0
07993 1BB7                        E6            .byte	$E6
07994 1BB8                        66            .byte	$66
07995 1BB9                        6C            .byte	$6C
07996 1BBA                        6C            .byte	$6C
07997 1BBB                        78            .byte	$78
07998 1BBC                        6C            .byte	$6C
07999 1BBD                        6C            .byte	$6C
08000 1BBE                        66            .byte	$66
08001 1BBF                        E6            .byte	$E6
08002 1BC0                        00            .byte	0
08003 1BC1                        00            .byte	0
08004 1BC2                        00            .byte	0
08005                                           ! 1219  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
08006 1BC3                        00            .byte	0
08007 1BC4                        00            .byte	0
08008 1BC5                        F0            .byte	$F0
08009 1BC6                        60            .byte	$60
08010 1BC7                        60            .byte	$60
08011 1BC8                        60            .byte	$60
08012 1BC9                        60            .byte	$60
08013 1BCA                        60            .byte	$60
08014 1BCB                        62            .byte	$62
08015 1BCC                        66            .byte	$66
08016 1BCD                        FE            .byte	$FE
08017 1BCE                        00            .byte	0
08018 1BCF                        00            .byte	0
08019 1BD0                        00            .byte	0
08020                                           ! 1220  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08021 1BD1                        00            .byte	0
08022 1BD2                        00            .byte	0
08023 1BD3                        C6            .byte	$C6
08024 1BD4                        EE            .byte	$EE
08025 1BD5                        FE            .byte	$FE
08026 1BD6                        FE            .byte	$FE
08027 1BD7                        D6            .byte	$D6
08028 1BD8                        C6            .byte	$C6
08029 1BD9                        C6            .byte	$C6
08030 1BDA                        C6            .byte	$C6
08031 1BDB                        C6            .byte	$C6
08032 1BDC                        00            .byte	0
08033 1BDD                        00            .byte	0
08034 1BDE                        00            .byte	0
08035                                           ! 1221  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08036 1BDF                        00            .byte	0
08037 1BE0                        00            .byte	0
08038 1BE1                        C6            .byte	$C6
08039 1BE2                        E6            .byte	$E6
08040 1BE3                        F6            .byte	$F6
08041 1BE4                        FE            .byte	$FE
08042 1BE5                        DE            .byte	$DE
08043 1BE6                        CE            .byte	$CE
08044 1BE7                        C6            .byte	$C6
08045 1BE8                        C6            .byte	$C6
08046 1BE9                        C6            .byte	$C6
08047 1BEA                        00            .byte	0
08048 1BEB                        00            .byte	0
08049 1BEC                        00            .byte	0
08050                                           ! 1222  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08051 1BED                        00            .byte	0
08052 1BEE                        00            .byte	0
08053 1BEF                        38            .byte	$38
08054 1BF0                        6C            .byte	$6C
08055 1BF1                        C6            .byte	$C6
08056 1BF2                        C6            .byte	$C6
08057 1BF3                        C6            .byte	$C6
08058 1BF4                        C6            .byte	$C6
08059 1BF5                        C6            .byte	$C6
08060 1BF6                        6C            .byte	$6C
08061 1BF7                        38            .byte	$38
08062 1BF8                        00            .byte	0
08063 1BF9                        00            .byte	0
08064 1BFA                        00            .byte	0
08065                                           ! 1223  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08066 1BFB                        00            .byte	0
08067 1BFC                        00            .byte	0
08068 1BFD                        FC            .byte	$FC
08069 1BFE                        66            .byte	$66
08070 1BFF                        66            .byte	$66
08071 1C00                        66            .byte	$66
08072 1C01                        7C            .byte	$7C
08073 1C02                        60            .byte	$60
08074 1C03                        60            .byte	$60
08075 1C04                        60            .byte	$60
08076 1C05                        F0            .byte	$F0
08077 1C06                        00            .byte	0
08078 1C07                        00            .byte	0
08079 1C08                        00            .byte	0
08080                                           ! 1224  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08081 1C09                        00            .byte	0
08082 1C0A                        00            .byte	0
08083 1C0B                        7C            .byte	$7C
08084 1C0C                        C6            .byte	$C6
08085 1C0D                        C6            .byte	$C6
08086 1C0E                        C6            .byte	$C6
08087 1C0F                        C6            .byte	$C6
08088 1C10                        D6            .byte	$D6
08089 1C11                        DE            .byte	$DE
08090 1C12                        7C            .byte	$7C
08091 1C13                        0C            .byte	$C
08092 1C14                        0E            .byte	$E
08093 1C15                        00            .byte	0
08094 1C16                        00            .byte	0
08095                                           ! 1225  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08096 1C17                        00            .byte	0
08097 1C18                        00            .byte	0
08098 1C19                        FC            .byte	$FC
08099 1C1A                        66            .byte	$66
08100 1C1B                        66            .byte	$66
08101 1C1C                        66            .byte	$66
08102 1C1D                        7C            .byte	$7C
08103 1C1E                        6C            .byte	$6C
08104 1C1F                        66            .byte	$66
08105 1C20                        66            .byte	$66
08106 1C21                        E6            .byte	$E6
08107 1C22                        00            .byte	0
08108 1C23                        00            .byte	0
08109 1C24                        00            .byte	0
08110                                           ! 1226  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08111 1C25                        00            .byte	0
08112 1C26                        00            .byte	0
08113 1C27                        7C            .byte	$7C
08114 1C28                        C6            .byte	$C6
08115 1C29                        C6            .byte	$C6
08116 1C2A                        60            .byte	$60
08117 1C2B                        38            .byte	$38
08118 1C2C                        0C            .byte	$C
08119 1C2D                        C6            .byte	$C6
08120 1C2E                        C6            .byte	$C6
08121 1C2F                        7C            .byte	$7C
08122 1C30                        00            .byte	0
08123 1C31                        00            .byte	0
08124 1C32                        00            .byte	0
08125                                           ! 1227  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08126 1C33                        00            .byte	0
08127 1C34                        00            .byte	0
08128 1C35                        7E            .byte	$7E
08129 1C36                        7E            .byte	$7E
08130 1C37                        5A            .byte	$5A
08131 1C38                        18            .byte	$18
08132 1C39                        18            .byte	$18
08133 1C3A                        18            .byte	$18
08134 1C3B                        18            .byte	$18
08135 1C3C                        18            .byte	$18
08136 1C3D                        3C            .byte	$3C
08137 1C3E                        00            .byte	0
08138 1C3F                        00            .byte	0
08139 1C40                        00            .byte	0
08140                                           ! 1228  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08141 1C41                        00            .byte	0
08142 1C42                        00            .byte	0
08143 1C43                        C6            .byte	$C6
08144 1C44                        C6            .byte	$C6
08145 1C45                        C6            .byte	$C6
08146 1C46                        C6            .byte	$C6
08147 1C47                        C6            .byte	$C6
08148 1C48                        C6            .byte	$C6
08149 1C49                        C6            .byte	$C6
08150 1C4A                        C6            .byte	$C6
08151 1C4B                        7C            .byte	$7C
08152 1C4C                        00            .byte	0
08153 1C4D                        00            .byte	0
08154 1C4E                        00            .byte	0
08155                                           ! 1229  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08156 1C4F                        00            .byte	0
08157 1C50                        00            .byte	0
08158 1C51                        C6            .byte	$C6
08159 1C52                        C6            .byte	$C6
08160 1C53                        C6            .byte	$C6
08161 1C54                        C6            .byte	$C6
08162 1C55                        C6            .byte	$C6
08163 1C56                        C6            .byte	$C6
08164 1C57                        6C            .byte	$6C
08165 1C58                        38            .byte	$38
08166 1C59                        10            .byte	$10
08167 1C5A                        00            .byte	0
08168 1C5B                        00            .byte	0
08169 1C5C                        00            .byte	0
08170                                           ! 1230  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08171 1C5D                        00            .byte	0
08172 1C5E                        00            .byte	0
08173 1C5F                        C6            .byte	$C6
08174 1C60                        C6            .byte	$C6
08175 1C61                        C6            .byte	$C6
08176 1C62                        C6            .byte	$C6
08177 1C63                        D6            .byte	$D6
08178 1C64                        D6            .byte	$D6
08179 1C65                        FE            .byte	$FE
08180 1C66                        7C            .byte	$7C
08181 1C67                        6C            .byte	$6C
08182 1C68                        00            .byte	0
08183 1C69                        00            .byte	0
08184 1C6A                        00            .byte	0
08185                                           ! 1231  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08186 1C6B                        00            .byte	0
08187 1C6C                        00            .byte	0
08188 1C6D                        C6            .byte	$C6
08189 1C6E                        C6            .byte	$C6
08190 1C6F                        6C            .byte	$6C
08191 1C70                        38            .byte	$38
08192 1C71                        38            .byte	$38
08193 1C72                        38            .byte	$38
08194 1C73                        6C            .byte	$6C
08195 1C74                        C6            .byte	$C6
08196 1C75                        C6            .byte	$C6
08197 1C76                        00            .byte	0
08198 1C77                        00            .byte	0
08199 1C78                        00            .byte	0
08200                                           ! 1232  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08201 1C79                        00            .byte	0
08202 1C7A                        00            .byte	0
08203 1C7B                        66            .byte	$66
08204 1C7C                        66            .byte	$66
08205 1C7D                        66            .byte	$66
08206 1C7E                        66            .byte	$66
08207 1C7F                        3C            .byte	$3C
08208 1C80                        18            .byte	$18
08209 1C81                        18            .byte	$18
08210 1C82                        18            .byte	$18
08211 1C83                        3C            .byte	$3C
08212 1C84                        00            .byte	0
08213 1C85                        00            .byte	0
08214 1C86                        00            .byte	0
08215                                           ! 1233  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08216 1C87                        00            .byte	0
08217 1C88                        00            .byte	0
08218 1C89                        FE            .byte	$FE
08219 1C8A                        C6            .byte	$C6
08220 1C8B                        8C            .byte	$8C
08221 1C8C                        18            .byte	$18
08222 1C8D                        30            .byte	$30
08223 1C8E                        60            .byte	$60
08224 1C8F                        C2            .byte	$C2
08225 1C90                        C6            .byte	$C6
08226 1C91                        FE            .byte	$FE
08227 1C92                        00            .byte	0
08228 1C93                        00            .byte	0
08229 1C94                        00            .byte	0
08230                                           ! 1234  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08231 1C95                        00            .byte	0
08232 1C96                        00            .byte	0
08233 1C97                        3C            .byte	$3C
08234 1C98                        30            .byte	$30
08235 1C99                        30            .byte	$30
08236 1C9A                        30            .byte	$30
08237 1C9B                        30            .byte	$30
08238 1C9C                        30            .byte	$30
08239 1C9D                        30            .byte	$30
08240 1C9E                        30            .byte	$30
08241 1C9F                        3C            .byte	$3C
08242 1CA0                        00            .byte	0
08243 1CA1                        00            .byte	0
08244 1CA2                        00            .byte	0
08245                                           ! 1235  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08246 1CA3                        00            .byte	0
08247 1CA4                        00            .byte	0
08248 1CA5                        80            .byte	$80
08249 1CA6                        C0            .byte	$C0
08250 1CA7                        E0            .byte	$E0
08251 1CA8                        70            .byte	$70
08252 1CA9                        38            .byte	$38
08253 1CAA                        1C            .byte	$1C
08254 1CAB                        0E            .byte	$E
08255 1CAC                        06            .byte	6
08256 1CAD                        02            .byte	2
08257 1CAE                        00            .byte	0
08258 1CAF                        00            .byte	0
08259 1CB0                        00            .byte	0
08260                                           ! 1236  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08261 1CB1                        00            .byte	0
08262 1CB2                        00            .byte	0
08263 1CB3                        3C            .byte	$3C
08264 1CB4                        0C            .byte	$C
08265 1CB5                        0C            .byte	$C
08266 1CB6                        0C            .byte	$C
08267 1CB7                        0C            .byte	$C
08268 1CB8                        0C            .byte	$C
08269 1CB9                        0C            .byte	$C
08270 1CBA                        0C            .byte	$C
08271 1CBB                        3C            .byte	$3C
08272 1CBC                        00            .byte	0
08273 1CBD                        00            .byte	0
08274 1CBE                        00            .byte	0
08275                                           ! 1237  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08276 1CBF                        10            .byte	$10
08277 1CC0                        38            .byte	$38
08278 1CC1                        6C            .byte	$6C
08279 1CC2                        C6            .byte	$C6
08280 1CC3                        00            .byte	0
08281 1CC4                        00            .byte	0
08282 1CC5                        00            .byte	0
08283 1CC6                        00            .byte	0
08284 1CC7                        00            .byte	0
08285 1CC8                        00            .byte	0
08286 1CC9                        00            .byte	0
08287 1CCA                        00            .byte	0
08288 1CCB                        00            .byte	0
08289 1CCC                        00            .byte	0
08290                                           ! 1238  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
08291 1CCD                        00            .byte	0
08292 1CCE                        00            .byte	0
08293 1CCF                        00            .byte	0
08294 1CD0                        00            .byte	0
08295 1CD1                        00            .byte	0
08296 1CD2                        00            .byte	0
08297 1CD3                        00            .byte	0
08298 1CD4                        00            .byte	0
08299 1CD5                        00            .byte	0
08300 1CD6                        00            .byte	0
08301 1CD7                        00            .byte	0
08302                                           ! 1238 0, 0xff, 0x00,
08303 1CD8                        00            .byte	0
08304 1CD9                        FF            .byte	$FF
08305 1CDA                        00            .byte	0
08306                                           ! 1239  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08307 1CDB                        30            .byte	$30
08308 1CDC                        30            .byte	$30
08309 1CDD                        18            .byte	$18
08310 1CDE                        00            .byte	0
08311 1CDF                        00            .byte	0
08312 1CE0                        00            .byte	0
08313 1CE1                        00            .byte	0
08314 1CE2                        00            .byte	0
08315 1CE3                        00            .byte	0
08316 1CE4                        00            .byte	0
08317 1CE5                        00            .byte	0
08318 1CE6                        00            .byte	0
08319 1CE7                        00            .byte	0
08320 1CE8                        00            .byte	0
08321                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08322 1CE9                        00            .byte	0
08323 1CEA                        00            .byte	0
08324 1CEB                        00            .byte	0
08325 1CEC                        00            .byte	0
08326 1CED                        00            .byte	0
08327 1CEE                        78            .byte	$78
08328 1CEF                        0C            .byte	$C
08329 1CF0                        7C            .byte	$7C
08330 1CF1                        CC            .byte	$CC
08331 1CF2                        CC            .byte	$CC
08332 1CF3                        76            .byte	$76
08333 1CF4                        00            .byte	0
08334 1CF5                        00            .byte	0
08335 1CF6                        00            .byte	0
08336                                           ! 1241  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08337 1CF7                        00            .byte	0
08338 1CF8                        00            .byte	0
08339 1CF9                        E0            .byte	$E0
08340 1CFA                        60            .byte	$60
08341 1CFB                        60            .byte	$60
08342 1CFC                        78            .byte	$78
08343 1CFD                        6C            .byte	$6C
08344 1CFE                        66            .byte	$66
08345 1CFF                        66            .byte	$66
08346 1D00                        66            .byte	$66
08347 1D01                        7C            .byte	$7C
08348 1D02                        00            .byte	0
08349 1D03                        00            .byte	0
08350 1D04                        00            .byte	0
08351                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08352 1D05                        00            .byte	0
08353 1D06                        00            .byte	0
08354 1D07                        00            .byte	0
08355 1D08                        00            .byte	0
08356 1D09                        00            .byte	0
08357 1D0A                        7C            .byte	$7C
08358 1D0B                        C6            .byte	$C6
08359 1D0C                        C0            .byte	$C0
08360 1D0D                        C0            .byte	$C0
08361 1D0E                        C6            .byte	$C6
08362 1D0F                        7C            .byte	$7C
08363 1D10                        00            .byte	0
08364 1D11                        00            .byte	0
08365 1D12                        00            .byte	0
08366                                           ! 1243  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08367 1D13                        00            .byte	0
08368 1D14                        00            .byte	0
08369 1D15                        1C            .byte	$1C
08370 1D16                        0C            .byte	$C
08371 1D17                        0C            .byte	$C
08372 1D18                        3C            .byte	$3C
08373 1D19                        6C            .byte	$6C
08374 1D1A                        CC            .byte	$CC
08375 1D1B                        CC            .byte	$CC
08376 1D1C                        CC            .byte	$CC
08377 1D1D                        76            .byte	$76
08378 1D1E                        00            .byte	0
08379 1D1F                        00            .byte	0
08380 1D20                        00            .byte	0
08381                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08382 1D21                        00            .byte	0
08383 1D22                        00            .byte	0
08384 1D23                        00            .byte	0
08385 1D24                        00            .byte	0
08386 1D25                        00            .byte	0
08387 1D26                        7C            .byte	$7C
08388 1D27                        C6            .byte	$C6
08389 1D28                        FE            .byte	$FE
08390 1D29                        C0            .byte	$C0
08391 1D2A                        C6            .byte	$C6
08392 1D2B                        7C            .byte	$7C
08393 1D2C                        00            .byte	0
08394 1D2D                        00            .byte	0
08395 1D2E                        00            .byte	0
08396                                           ! 1245  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08397 1D2F                        00            .byte	0
08398 1D30                        00            .byte	0
08399 1D31                        38            .byte	$38
08400 1D32                        6C            .byte	$6C
08401 1D33                        64            .byte	$64
08402 1D34                        60            .byte	$60
08403 1D35                        F0            .byte	$F0
08404 1D36                        60            .byte	$60
08405 1D37                        60            .byte	$60
08406 1D38                        60            .byte	$60
08407 1D39                        F0            .byte	$F0
08408 1D3A                        00            .byte	0
08409 1D3B                        00            .byte	0
08410 1D3C                        00            .byte	0
08411                                           ! 1246  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08412 1D3D                        00            .byte	0
08413 1D3E                        00            .byte	0
08414 1D3F                        00            .byte	0
08415 1D40                        00            .byte	0
08416 1D41                        00            .byte	0
08417 1D42                        76            .byte	$76
08418 1D43                        CC            .byte	$CC
08419 1D44                        CC            .byte	$CC
08420 1D45                        CC            .byte	$CC
08421 1D46                        7C            .byte	$7C
08422 1D47                        0C            .byte	$C
08423 1D48                        CC            .byte	$CC
08424 1D49                        78            .byte	$78
08425 1D4A                        00            .byte	0
08426                                           ! 1247  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08427 1D4B                        00            .byte	0
08428 1D4C                        00            .byte	0
08429 1D4D                        E0            .byte	$E0
08430 1D4E                        60            .byte	$60
08431 1D4F                        60            .byte	$60
08432 1D50                        6C            .byte	$6C
08433 1D51                        76            .byte	$76
08434 1D52                        66            .byte	$66
08435 1D53                        66            .byte	$66
08436 1D54                        66            .byte	$66
08437 1D55                        E6            .byte	$E6
08438 1D56                        00            .byte	0
08439 1D57                        00            .byte	0
08440 1D58                        00            .byte	0
08441                                           ! 1248  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08442 1D59                        00            .byte	0
08443 1D5A                        00            .byte	0
08444 1D5B                        18            .byte	$18
08445 1D5C                        18            .byte	$18
08446 1D5D                        00            .byte	0
08447 1D5E                        38            .byte	$38
08448 1D5F                        18            .byte	$18
08449 1D60                        18            .byte	$18
08450 1D61                        18            .byte	$18
08451 1D62                        18            .byte	$18
08452 1D63                        3C            .byte	$3C
08453 1D64                        00            .byte	0
08454 1D65                        00            .byte	0
08455 1D66                        00            .byte	0
08456                                           ! 1249  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08457 1D67                        00            .byte	0
08458 1D68                        00            .byte	0
08459 1D69                        06            .byte	6
08460 1D6A                        06            .byte	6
08461 1D6B                        00            .byte	0
08462 1D6C                        0E            .byte	$E
08463 1D6D                        06            .byte	6
08464 1D6E                        06            .byte	6
08465 1D6F                        06            .byte	6
08466 1D70                        06            .byte	6
08467 1D71                        66            .byte	$66
08468 1D72                        66            .byte	$66
08469 1D73                        3C            .byte	$3C
08470 1D74                        00            .byte	0
08471                                           ! 1250  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08472 1D75                        00            .byte	0
08473 1D76                        00            .byte	0
08474 1D77                        E0            .byte	$E0
08475 1D78                        60            .byte	$60
08476 1D79                        60            .byte	$60
08477 1D7A                        66            .byte	$66
08478 1D7B                        6C            .byte	$6C
08479 1D7C                        78            .byte	$78
08480 1D7D                        6C            .byte	$6C
08481 1D7E                        66            .byte	$66
08482 1D7F                        E6            .byte	$E6
08483 1D80                        00            .byte	0
08484 1D81                        00            .byte	0
08485 1D82                        00            .byte	0
08486                                           ! 1251  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08487 1D83                        00            .byte	0
08488 1D84                        00            .byte	0
08489 1D85                        38            .byte	$38
08490 1D86                        18            .byte	$18
08491 1D87                        18            .byte	$18
08492 1D88                        18            .byte	$18
08493 1D89                        18            .byte	$18
08494 1D8A                        18            .byte	$18
08495 1D8B                        18            .byte	$18
08496 1D8C                        18            .byte	$18
08497 1D8D                        3C            .byte	$3C
08498 1D8E                        00            .byte	0
08499 1D8F                        00            .byte	0
08500 1D90                        00            .byte	0
08501                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08502 1D91                        00            .byte	0
08503 1D92                        00            .byte	0
08504 1D93                        00            .byte	0
08505 1D94                        00            .byte	0
08506 1D95                        00            .byte	0
08507 1D96                        EC            .byte	$EC
08508 1D97                        FE            .byte	$FE
08509 1D98                        D6            .byte	$D6
08510 1D99                        D6            .byte	$D6
08511 1D9A                        D6            .byte	$D6
08512 1D9B                        C6            .byte	$C6
08513 1D9C                        00            .byte	0
08514 1D9D                        00            .byte	0
08515 1D9E                        00            .byte	0
08516                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08517 1D9F                        00            .byte	0
08518 1DA0                        00            .byte	0
08519 1DA1                        00            .byte	0
08520 1DA2                        00            .byte	0
08521 1DA3                        00            .byte	0
08522 1DA4                        DC            .byte	$DC
08523 1DA5                        66            .byte	$66
08524 1DA6                        66            .byte	$66
08525 1DA7                        66            .byte	$66
08526 1DA8                        66            .byte	$66
08527 1DA9                        66            .byte	$66
08528 1DAA                        00            .byte	0
08529 1DAB                        00            .byte	0
08530 1DAC                        00            .byte	0
08531                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08532 1DAD                        00            .byte	0
08533 1DAE                        00            .byte	0
08534 1DAF                        00            .byte	0
08535 1DB0                        00            .byte	0
08536 1DB1                        00            .byte	0
08537 1DB2                        7C            .byte	$7C
08538 1DB3                        C6            .byte	$C6
08539 1DB4                        C6            .byte	$C6
08540 1DB5                        C6            .byte	$C6
08541 1DB6                        C6            .byte	$C6
08542 1DB7                        7C            .byte	$7C
08543 1DB8                        00            .byte	0
08544 1DB9                        00            .byte	0
08545 1DBA                        00            .byte	0
08546                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08547 1DBB                        00            .byte	0
08548 1DBC                        00            .byte	0
08549 1DBD                        00            .byte	0
08550 1DBE                        00            .byte	0
08551 1DBF                        00            .byte	0
08552 1DC0                        DC            .byte	$DC
08553 1DC1                        66            .byte	$66
08554 1DC2                        66            .byte	$66
08555 1DC3                        66            .byte	$66
08556 1DC4                        7C            .byte	$7C
08557 1DC5                        60            .byte	$60
08558 1DC6                        60            .byte	$60
08559 1DC7                        F0            .byte	$F0
08560 1DC8                        00            .byte	0
08561                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08562 1DC9                        00            .byte	0
08563 1DCA                        00            .byte	0
08564 1DCB                        00            .byte	0
08565 1DCC                        00            .byte	0
08566 1DCD                        00            .byte	0
08567 1DCE                        76            .byte	$76
08568 1DCF                        CC            .byte	$CC
08569 1DD0                        CC            .byte	$CC
08570 1DD1                        CC            .byte	$CC
08571 1DD2                        7C            .byte	$7C
08572 1DD3                        0C            .byte	$C
08573 1DD4                        0C            .byte	$C
08574 1DD5                        1E            .byte	$1E
08575 1DD6                        00            .byte	0
08576                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08577 1DD7                        00            .byte	0
08578 1DD8                        00            .byte	0
08579 1DD9                        00            .byte	0
08580 1DDA                        00            .byte	0
08581 1DDB                        00            .byte	0
08582 1DDC                        DC            .byte	$DC
08583 1DDD                        76            .byte	$76
08584 1DDE                        66            .byte	$66
08585 1DDF                        60            .byte	$60
08586 1DE0                        60            .byte	$60
08587 1DE1                        F0            .byte	$F0
08588 1DE2                        00            .byte	0
08589 1DE3                        00            .byte	0
08590 1DE4                        00            .byte	0
08591                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08592 1DE5                        00            .byte	0
08593 1DE6                        00            .byte	0
08594 1DE7                        00            .byte	0
08595 1DE8                        00            .byte	0
08596 1DE9                        00            .byte	0
08597 1DEA                        7C            .byte	$7C
08598 1DEB                        C6            .byte	$C6
08599 1DEC                        70            .byte	$70
08600 1DED                        1C            .byte	$1C
08601 1DEE                        C6            .byte	$C6
08602 1DEF                        7C            .byte	$7C
08603 1DF0                        00            .byte	0
08604 1DF1                        00            .byte	0
08605 1DF2                        00            .byte	0
08606                                           ! 1259  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08607 1DF3                        00            .byte	0
08608 1DF4                        00            .byte	0
08609 1DF5                        10            .byte	$10
08610 1DF6                        30            .byte	$30
08611 1DF7                        30            .byte	$30
08612 1DF8                        FC            .byte	$FC
08613 1DF9                        30            .byte	$30
08614 1DFA                        30            .byte	$30
08615 1DFB                        30            .byte	$30
08616 1DFC                        36            .byte	$36
08617 1DFD                        1C            .byte	$1C
08618 1DFE                        00            .byte	0
08619 1DFF                        00            .byte	0
08620 1E00                        00            .byte	0
08621                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08622 1E01                        00            .byte	0
08623 1E02                        00            .byte	0
08624 1E03                        00            .byte	0
08625 1E04                        00            .byte	0
08626 1E05                        00            .byte	0
08627 1E06                        CC            .byte	$CC
08628 1E07                        CC            .byte	$CC
08629 1E08                        CC            .byte	$CC
08630 1E09                        CC            .byte	$CC
08631 1E0A                        CC            .byte	$CC
08632 1E0B                        76            .byte	$76
08633 1E0C                        00            .byte	0
08634 1E0D                        00            .byte	0
08635 1E0E                        00            .byte	0
08636                                           ! 1261  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08637 1E0F                        00            .byte	0
08638 1E10                        00            .byte	0
08639 1E11                        00            .byte	0
08640 1E12                        00            .byte	0
08641 1E13                        00            .byte	0
08642 1E14                        66            .byte	$66
08643 1E15                        66            .byte	$66
08644 1E16                        66            .byte	$66
08645 1E17                        66            .byte	$66
08646 1E18                        3C            .byte	$3C
08647 1E19                        18            .byte	$18
08648 1E1A                        00            .byte	0
08649 1E1B                        00            .byte	0
08650 1E1C                        00            .byte	0
08651                                           ! 1262  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00,
08652 1E1D                        00            .byte	0
08653 1E1E                        00            .byte	0
08654 1E1F                        00            .byte	0
08655 1E20                        00            .byte	0
08656 1E21                        00            .byte	0
08657 1E22                        C6            .byte	$C6
08658 1E23                        C6            .byte	$C6
08659 1E24                        D6            .byte	$D6
08660 1E25                        D6            .byte	$D6
08661 1E26                        FE            .byte	$FE
08662 1E27                        6C            .byte	$6C
08663 1E28                        00            .byte	0
08664                                           ! 1262  0x00,
08665 1E29                        00            .byte	0
08666 1E2A                        00            .byte	0
08667                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08668 1E2B                        00            .byte	0
08669 1E2C                        00            .byte	0
08670 1E2D                        00            .byte	0
08671 1E2E                        00            .byte	0
08672 1E2F                        00            .byte	0
08673 1E30                        C6            .byte	$C6
08674 1E31                        6C            .byte	$6C
08675 1E32                        38            .byte	$38
08676 1E33                        38            .byte	$38
08677 1E34                        6C            .byte	$6C
08678 1E35                        C6            .byte	$C6
08679 1E36                        00            .byte	0
08680 1E37                        00            .byte	0
08681 1E38                        00            .byte	0
08682                                           ! 1264  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08683 1E39                        00            .byte	0
08684 1E3A                        00            .byte	0
08685 1E3B                        00            .byte	0
08686 1E3C                        00            .byte	0
08687 1E3D                        00            .byte	0
08688 1E3E                        C6            .byte	$C6
08689 1E3F                        C6            .byte	$C6
08690 1E40                        C6            .byte	$C6
08691 1E41                        C6            .byte	$C6
08692 1E42                        7E            .byte	$7E
08693 1E43                        06            .byte	6
08694 1E44                        0C            .byte	$C
08695 1E45                        F8            .byte	$F8
08696 1E46                        00            .byte	0
08697                                           ! 1265  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08698 1E47                        00            .byte	0
08699 1E48                        00            .byte	0
08700 1E49                        00            .byte	0
08701 1E4A                        00            .byte	0
08702 1E4B                        00            .byte	0
08703 1E4C                        FE            .byte	$FE
08704 1E4D                        CC            .byte	$CC
08705 1E4E                        18            .byte	$18
08706 1E4F                        30            .byte	$30
08707 1E50                        66            .byte	$66
08708 1E51                        FE            .byte	$FE
08709 1E52                        00            .byte	0
08710 1E53                        00            .byte	0
08711 1E54                        00            .byte	0
08712                                           ! 1266  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08713 1E55                        00            .byte	0
08714 1E56                        00            .byte	0
08715 1E57                        0E            .byte	$E
08716 1E58                        18            .byte	$18
08717 1E59                        18            .byte	$18
08718 1E5A                        18            .byte	$18
08719 1E5B                        70            .byte	$70
08720 1E5C                        18            .byte	$18
08721 1E5D                        18            .byte	$18
08722 1E5E                        18            .byte	$18
08723 1E5F                        0E            .byte	$E
08724 1E60                        00            .byte	0
08725 1E61                        00            .byte	0
08726 1E62                        00            .byte	0
08727                                           ! 1267  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08728 1E63                        00            .byte	0
08729 1E64                        00            .byte	0
08730 1E65                        18            .byte	$18
08731 1E66                        18            .byte	$18
08732 1E67                        18            .byte	$18
08733 1E68                        18            .byte	$18
08734 1E69                        00            .byte	0
08735 1E6A                        18            .byte	$18
08736 1E6B                        18            .byte	$18
08737 1E6C                        18            .byte	$18
08738 1E6D                        18            .byte	$18
08739 1E6E                        00            .byte	0
08740 1E6F                        00            .byte	0
08741 1E70                        00            .byte	0
08742                                           ! 1268  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08743 1E71                        00            .byte	0
08744 1E72                        00            .byte	0
08745 1E73                        70            .byte	$70
08746 1E74                        18            .byte	$18
08747 1E75                        18            .byte	$18
08748 1E76                        18            .byte	$18
08749 1E77                        0E            .byte	$E
08750 1E78                        18            .byte	$18
08751 1E79                        18            .byte	$18
08752 1E7A                        18            .byte	$18
08753 1E7B                        70            .byte	$70
08754 1E7C                        00            .byte	0
08755 1E7D                        00            .byte	0
08756 1E7E                        00            .byte	0
08757                                           ! 1269  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08758 1E7F                        00            .byte	0
08759 1E80                        00            .byte	0
08760 1E81                        76            .byte	$76
08761 1E82                        DC            .byte	$DC
08762 1E83                        00            .byte	0
08763 1E84                        00            .byte	0
08764 1E85                        00            .byte	0
08765 1E86                        00            .byte	0
08766 1E87                        00            .byte	0
08767 1E88                        00            .byte	0
08768 1E89                        00            .byte	0
08769 1E8A                        00            .byte	0
08770 1E8B                        00            .byte	0
08771 1E8C                        00            .byte	0
08772                                           ! 1270  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08773 1E8D                        00            .byte	0
08774 1E8E                        00            .byte	0
08775 1E8F                        00            .byte	0
08776 1E90                        00            .byte	0
08777 1E91                        10            .byte	$10
08778 1E92                        38            .byte	$38
08779 1E93                        6C            .byte	$6C
08780 1E94                        C6            .byte	$C6
08781 1E95                        C6            .byte	$C6
08782 1E96                        FE            .byte	$FE
08783 1E97                        00            .byte	0
08784 1E98                        00            .byte	0
08785 1E99                        00            .byte	0
08786 1E9A                        00            .byte	0
08787                                           ! 1271  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08788 1E9B                        00            .byte	0
08789 1E9C                        00            .byte	0
08790 1E9D                        3C            .byte	$3C
08791 1E9E                        66            .byte	$66
08792 1E9F                        C2            .byte	$C2
08793 1EA0                        C0            .byte	$C0
08794 1EA1                        C0            .byte	$C0
08795 1EA2                        C2            .byte	$C2
08796 1EA3                        66            .byte	$66
08797 1EA4                        3C            .byte	$3C
08798 1EA5                        0C            .byte	$C
08799 1EA6                        06            .byte	6
08800 1EA7                        7C            .byte	$7C
08801 1EA8                        00            .byte	0
08802                                           ! 1272  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08803 1EA9                        00            .byte	0
08804 1EAA                        00            .byte	0
08805 1EAB                        CC            .byte	$CC
08806 1EAC                        CC            .byte	$CC
08807 1EAD                        00            .byte	0
08808 1EAE                        CC            .byte	$CC
08809 1EAF                        CC            .byte	$CC
08810 1EB0                        CC            .byte	$CC
08811 1EB1                        CC            .byte	$CC
08812 1EB2                        CC            .byte	$CC
08813 1EB3                        76            .byte	$76
08814 1EB4                        00            .byte	0
08815 1EB5                        00            .byte	0
08816 1EB6                        00            .byte	0
08817                                           ! 1273  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08818 1EB7                        00            .byte	0
08819 1EB8                        0C            .byte	$C
08820 1EB9                        18            .byte	$18
08821 1EBA                        30            .byte	$30
08822 1EBB                        00            .byte	0
08823 1EBC                        7C            .byte	$7C
08824 1EBD                        C6            .byte	$C6
08825 1EBE                        FE            .byte	$FE
08826 1EBF                        C0            .byte	$C0
08827 1EC0                        C6            .byte	$C6
08828 1EC1                        7C            .byte	$7C
08829 1EC2                        00            .byte	0
08830 1EC3                        00            .byte	0
08831 1EC4                        00            .byte	0
08832                                           ! 1274  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08833 1EC5                        00            .byte	0
08834 1EC6                        10            .byte	$10
08835 1EC7                        38            .byte	$38
08836 1EC8                        6C            .byte	$6C
08837 1EC9                        00            .byte	0
08838 1ECA                        78            .byte	$78
08839 1ECB                        0C            .byte	$C
08840 1ECC                        7C            .byte	$7C
08841 1ECD                        CC            .byte	$CC
08842 1ECE                        CC            .byte	$CC
08843 1ECF                        76            .byte	$76
08844 1ED0                        00            .byte	0
08845 1ED1                        00            .byte	0
08846 1ED2                        00            .byte	0
08847                                           ! 1275  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08848 1ED3                        00            .byte	0
08849 1ED4                        00            .byte	0
08850 1ED5                        CC            .byte	$CC
08851 1ED6                        CC            .byte	$CC
08852 1ED7                        00            .byte	0
08853 1ED8                        78            .byte	$78
08854 1ED9                        0C            .byte	$C
08855 1EDA                        7C            .byte	$7C
08856 1EDB                        CC            .byte	$CC
08857 1EDC                        CC            .byte	$CC
08858 1EDD                        76            .byte	$76
08859 1EDE                        00            .byte	0
08860 1EDF                        00            .byte	0
08861 1EE0                        00            .byte	0
08862                                           ! 1276  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08863 1EE1                        00            .byte	0
08864 1EE2                        60            .byte	$60
08865 1EE3                        30            .byte	$30
08866 1EE4                        18            .byte	$18
08867 1EE5                        00            .byte	0
08868 1EE6                        78            .byte	$78
08869 1EE7                        0C            .byte	$C
08870 1EE8                        7C            .byte	$7C
08871 1EE9                        CC            .byte	$CC
08872 1EEA                        CC            .byte	$CC
08873 1EEB                        76            .byte	$76
08874 1EEC                        00            .byte	0
08875 1EED                        00            .byte	0
08876 1EEE                        00            .byte	0
08877                                           ! 1277  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08878 1EEF                        00            .byte	0
08879 1EF0                        38            .byte	$38
08880 1EF1                        6C            .byte	$6C
08881 1EF2                        38            .byte	$38
08882 1EF3                        00            .byte	0
08883 1EF4                        78            .byte	$78
08884 1EF5                        0C            .byte	$C
08885 1EF6                        7C            .byte	$7C
08886 1EF7                        CC            .byte	$CC
08887 1EF8                        CC            .byte	$CC
08888 1EF9                        76            .byte	$76
08889 1EFA                        00            .byte	0
08890 1EFB                        00            .byte	0
08891 1EFC                        00            .byte	0
08892                                           ! 1278  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08893 1EFD                        00            .byte	0
08894 1EFE                        00            .byte	0
08895 1EFF                        00            .byte	0
08896 1F00                        00            .byte	0
08897 1F01                        3C            .byte	$3C
08898 1F02                        66            .byte	$66
08899 1F03                        60            .byte	$60
08900 1F04                        66            .byte	$66
08901 1F05                        3C            .byte	$3C
08902 1F06                        0C            .byte	$C
08903 1F07                        06            .byte	6
08904 1F08                        3C            .byte	$3C
08905 1F09                        00            .byte	0
08906 1F0A                        00            .byte	0
08907                                           ! 1279  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08908 1F0B                        00            .byte	0
08909 1F0C                        10            .byte	$10
08910 1F0D                        38            .byte	$38
08911 1F0E                        6C            .byte	$6C
08912 1F0F                        00            .byte	0
08913 1F10                        7C            .byte	$7C
08914 1F11                        C6            .byte	$C6
08915 1F12                        FE            .byte	$FE
08916 1F13                        C0            .byte	$C0
08917 1F14                        C6            .byte	$C6
08918 1F15                        7C            .byte	$7C
08919 1F16                        00            .byte	0
08920 1F17                        00            .byte	0
08921 1F18                        00            .byte	0
08922                                           ! 1280  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08923 1F19                        00            .byte	0
08924 1F1A                        00            .byte	0
08925 1F1B                        CC            .byte	$CC
08926 1F1C                        CC            .byte	$CC
08927 1F1D                        00            .byte	0
08928 1F1E                        7C            .byte	$7C
08929 1F1F                        C6            .byte	$C6
08930 1F20                        FE            .byte	$FE
08931 1F21                        C0            .byte	$C0
08932 1F22                        C6            .byte	$C6
08933 1F23                        7C            .byte	$7C
08934 1F24                        00            .byte	0
08935 1F25                        00            .byte	0
08936 1F26                        00            .byte	0
08937                                           ! 1281  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08938 1F27                        00            .byte	0
08939 1F28                        60            .byte	$60
08940 1F29                        30            .byte	$30
08941 1F2A                        18            .byte	$18
08942 1F2B                        00            .byte	0
08943 1F2C                        7C            .byte	$7C
08944 1F2D                        C6            .byte	$C6
08945 1F2E                        FE            .byte	$FE
08946 1F2F                        C0            .byte	$C0
08947 1F30                        C6            .byte	$C6
08948 1F31                        7C            .byte	$7C
08949 1F32                        00            .byte	0
08950 1F33                        00            .byte	0
08951 1F34                        00            .byte	0
08952                                           ! 1282  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08953 1F35                        00            .byte	0
08954 1F36                        00            .byte	0
08955 1F37                        66            .byte	$66
08956 1F38                        66            .byte	$66
08957 1F39                        00            .byte	0
08958 1F3A                        38            .byte	$38
08959 1F3B                        18            .byte	$18
08960 1F3C                        18            .byte	$18
08961 1F3D                        18            .byte	$18
08962 1F3E                        18            .byte	$18
08963 1F3F                        3C            .byte	$3C
08964 1F40                        00            .byte	0
08965 1F41                        00            .byte	0
08966 1F42                        00            .byte	0
08967                                           ! 1283  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08968 1F43                        00            .byte	0
08969 1F44                        18            .byte	$18
08970 1F45                        3C            .byte	$3C
08971 1F46                        66            .byte	$66
08972 1F47                        00            .byte	0
08973 1F48                        38            .byte	$38
08974 1F49                        18            .byte	$18
08975 1F4A                        18            .byte	$18
08976 1F4B                        18            .byte	$18
08977 1F4C                        18            .byte	$18
08978 1F4D                        3C            .byte	$3C
08979 1F4E                        00            .byte	0
08980 1F4F                        00            .byte	0
08981 1F50                        00            .byte	0
08982                                           ! 1284  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08983 1F51                        00            .byte	0
08984 1F52                        60            .byte	$60
08985 1F53                        30            .byte	$30
08986 1F54                        18            .byte	$18
08987 1F55                        00            .byte	0
08988 1F56                        38            .byte	$38
08989 1F57                        18            .byte	$18
08990 1F58                        18            .byte	$18
08991 1F59                        18            .byte	$18
08992 1F5A                        18            .byte	$18
08993 1F5B                        3C            .byte	$3C
08994 1F5C                        00            .byte	0
08995 1F5D                        00            .byte	0
08996 1F5E                        00            .byte	0
08997                                           ! 1285  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08998 1F5F                        00            .byte	0
08999 1F60                        C6            .byte	$C6
09000 1F61                        C6            .byte	$C6
09001 1F62                        10            .byte	$10
09002 1F63                        38            .byte	$38
09003 1F64                        6C            .byte	$6C
09004 1F65                        C6            .byte	$C6
09005 1F66                        C6            .byte	$C6
09006 1F67                        FE            .byte	$FE
09007 1F68                        C6            .byte	$C6
09008 1F69                        C6            .byte	$C6
09009 1F6A                        00            .byte	0
09010 1F6B                        00            .byte	0
09011 1F6C                        00            .byte	0
09012                                           ! 1286  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09013 1F6D                        38            .byte	$38
09014 1F6E                        6C            .byte	$6C
09015 1F6F                        38            .byte	$38
09016 1F70                        00            .byte	0
09017 1F71                        38            .byte	$38
09018 1F72                        6C            .byte	$6C
09019 1F73                        C6            .byte	$C6
09020 1F74                        C6            .byte	$C6
09021 1F75                        FE            .byte	$FE
09022 1F76                        C6            .byte	$C6
09023 1F77                        C6            .byte	$C6
09024 1F78                        00            .byte	0
09025 1F79                        00            .byte	0
09026 1F7A                        00            .byte	0
09027                                           ! 1287  
09028                                           ! 1287 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
09029 1F7B                        18            .byte	$18
09030 1F7C                        30            .byte	$30
09031 1F7D                        60            .byte	$60
09032 1F7E                        00            .byte	0
09033 1F7F                        FE            .byte	$FE
09034 1F80                        66            .byte	$66
09035 1F81                        60            .byte	$60
09036 1F82                        7C            .byte	$7C
09037 1F83                        60            .byte	$60
09038 1F84                        66            .byte	$66
09039 1F85                        FE            .byte	$FE
09040 1F86                        00            .byte	0
09041 1F87                        00            .byte	0
09042 1F88                        00            .byte	0
09043                                           ! 1288  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09044 1F89                        00            .byte	0
09045 1F8A                        00            .byte	0
09046 1F8B                        00            .byte	0
09047 1F8C                        00            .byte	0
09048 1F8D                        CC            .byte	$CC
09049 1F8E                        76            .byte	$76
09050 1F8F                        36            .byte	$36
09051 1F90                        7E            .byte	$7E
09052 1F91                        D8            .byte	$D8
09053 1F92                        D8            .byte	$D8
09054 1F93                        6E            .byte	$6E
09055 1F94                        00            .byte	0
09056 1F95                        00            .byte	0
09057 1F96                        00            .byte	0
09058                                           ! 1289  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09059 1F97                        00            .byte	0
09060 1F98                        00            .byte	0
09061 1F99                        3E            .byte	$3E
09062 1F9A                        6C            .byte	$6C
09063 1F9B                        CC            .byte	$CC
09064 1F9C                        CC            .byte	$CC
09065 1F9D                        FE            .byte	$FE
09066 1F9E                        CC            .byte	$CC
09067 1F9F                        CC            .byte	$CC
09068 1FA0                        CC            .byte	$CC
09069 1FA1                        CE            .byte	$CE
09070 1FA2                        00            .byte	0
09071 1FA3                        00            .byte	0
09072 1FA4                        00            .byte	0
09073                                           ! 1290  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09074 1FA5                        00            .byte	0
09075 1FA6                        10            .byte	$10
09076 1FA7                        38            .byte	$38
09077 1FA8                        6C            .byte	$6C
09078 1FA9                        00            .byte	0
09079 1FAA                        7C            .byte	$7C
09080 1FAB                        C6            .byte	$C6
09081 1FAC                        C6            .byte	$C6
09082 1FAD                        C6            .byte	$C6
09083 1FAE                        C6            .byte	$C6
09084 1FAF                        7C            .byte	$7C
09085 1FB0                        00            .byte	0
09086 1FB1                        00            .byte	0
09087 1FB2                        00            .byte	0
09088                                           ! 1291  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09089 1FB3                        00            .byte	0
09090 1FB4                        00            .byte	0
09091 1FB5                        C6            .byte	$C6
09092 1FB6                        C6            .byte	$C6
09093 1FB7                        00            .byte	0
09094 1FB8                        7C            .byte	$7C
09095 1FB9                        C6            .byte	$C6
09096 1FBA                        C6            .byte	$C6
09097 1FBB                        C6            .byte	$C6
09098 1FBC                        C6            .byte	$C6
09099 1FBD                        7C            .byte	$7C
09100 1FBE                        00            .byte	0
09101 1FBF                        00            .byte	0
09102 1FC0                        00            .byte	0
09103                                           ! 1292  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09104 1FC1                        00            .byte	0
09105 1FC2                        60            .byte	$60
09106 1FC3                        30            .byte	$30
09107 1FC4                        18            .byte	$18
09108 1FC5                        00            .byte	0
09109 1FC6                        7C            .byte	$7C
09110 1FC7                        C6            .byte	$C6
09111 1FC8                        C6            .byte	$C6
09112 1FC9                        C6            .byte	$C6
09113 1FCA                        C6            .byte	$C6
09114 1FCB                        7C            .byte	$7C
09115 1FCC                        00            .byte	0
09116 1FCD                        00            .byte	0
09117 1FCE                        00            .byte	0
09118                                           ! 1293  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09119 1FCF                        00            .byte	0
09120 1FD0                        30            .byte	$30
09121 1FD1                        78            .byte	$78
09122 1FD2                        CC            .byte	$CC
09123 1FD3                        00            .byte	0
09124 1FD4                        CC            .byte	$CC
09125 1FD5                        CC            .byte	$CC
09126 1FD6                        CC            .byte	$CC
09127 1FD7                        CC            .byte	$CC
09128 1FD8                        CC            .byte	$CC
09129 1FD9                        76            .byte	$76
09130 1FDA                        00            .byte	0
09131 1FDB                        00            .byte	0
09132 1FDC                        00            .byte	0
09133                                           ! 1294  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09134 1FDD                        00            .byte	0
09135 1FDE                        60            .byte	$60
09136 1FDF                        30            .byte	$30
09137 1FE0                        18            .byte	$18
09138 1FE1                        00            .byte	0
09139 1FE2                        CC            .byte	$CC
09140 1FE3                        CC            .byte	$CC
09141 1FE4                        CC            .byte	$CC
09142 1FE5                        CC            .byte	$CC
09143 1FE6                        CC            .byte	$CC
09144 1FE7                        76            .byte	$76
09145 1FE8                        00            .byte	0
09146 1FE9                        00            .byte	0
09147 1FEA                        00            .byte	0
09148                                           ! 1295  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09149 1FEB                        00            .byte	0
09150 1FEC                        00            .byte	0
09151 1FED                        C6            .byte	$C6
09152 1FEE                        C6            .byte	$C6
09153 1FEF                        00            .byte	0
09154 1FF0                        C6            .byte	$C6
09155 1FF1                        C6            .byte	$C6
09156 1FF2                        C6            .byte	$C6
09157 1FF3                        C6            .byte	$C6
09158 1FF4                        7E            .byte	$7E
09159 1FF5                        06            .byte	6
09160 1FF6                        0C            .byte	$C
09161 1FF7                        78            .byte	$78
09162 1FF8                        00            .byte	0
09163                                           ! 1296  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09164 1FF9                        00            .byte	0
09165 1FFA                        C6            .byte	$C6
09166 1FFB                        C6            .byte	$C6
09167 1FFC                        38            .byte	$38
09168 1FFD                        6C            .byte	$6C
09169 1FFE                        C6            .byte	$C6
09170 1FFF                        C6            .byte	$C6
09171 2000                        C6            .byte	$C6
09172 2001                        C6            .byte	$C6
09173 2002                        6C            .byte	$6C
09174 2003                        38            .byte	$38
09175 2004                        00            .byte	0
09176 2005                        00            .byte	0
09177 2006                        00            .byte	0
09178                                           ! 1297  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09179 2007                        00            .byte	0
09180 2008                        C6            .byte	$C6
09181 2009                        C6            .byte	$C6
09182 200A                        00            .byte	0
09183 200B                        C6            .byte	$C6
09184 200C                        C6            .byte	$C6
09185 200D                        C6            .byte	$C6
09186 200E                        C6            .byte	$C6
09187 200F                        C6            .byte	$C6
09188 2010                        C6            .byte	$C6
09189 2011                        7C            .byte	$7C
09190 2012                        00            .byte	0
09191 2013                        00            .byte	0
09192 2014                        00            .byte	0
09193                                           ! 1298  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09194 2015                        00            .byte	0
09195 2016                        18            .byte	$18
09196 2017                        18            .byte	$18
09197 2018                        3C            .byte	$3C
09198 2019                        66            .byte	$66
09199 201A                        60            .byte	$60
09200 201B                        60            .byte	$60
09201 201C                        66            .byte	$66
09202 201D                        3C            .byte	$3C
09203 201E                        18            .byte	$18
09204 201F                        18            .byte	$18
09205 2020                        00            .byte	0
09206 2021                        00            .byte	0
09207 2022                        00            .byte	0
09208                                           ! 1299  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09209 2023                        00            .byte	0
09210 2024                        38            .byte	$38
09211 2025                        6C            .byte	$6C
09212 2026                        64            .byte	$64
09213 2027                        60            .byte	$60
09214 2028                        F0            .byte	$F0
09215 2029                        60            .byte	$60
09216 202A                        60            .byte	$60
09217 202B                        60            .byte	$60
09218 202C                        E6            .byte	$E6
09219 202D                        FC            .byte	$FC
09220 202E                        00            .byte	0
09221 202F                        00            .byte	0
09222 2030                        00            .byte	0
09223                                           ! 1300  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09224 2031                        00            .byte	0
09225 2032                        00            .byte	0
09226 2033                        66            .byte	$66
09227 2034                        66            .byte	$66
09228 2035                        3C            .byte	$3C
09229 2036                        18            .byte	$18
09230 2037                        7E            .byte	$7E
09231 2038                        18            .byte	$18
09232 2039                        7E            .byte	$7E
09233 203A                        18            .byte	$18
09234 203B                        18            .byte	$18
09235 203C                        00            .byte	0
09236 203D                        00            .byte	0
09237 203E                        00            .byte	0
09238                                           ! 1301  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09239 203F                        00            .byte	0
09240 2040                        F8            .byte	$F8
09241 2041                        CC            .byte	$CC
09242 2042                        CC            .byte	$CC
09243 2043                        F8            .byte	$F8
09244 2044                        C4            .byte	$C4
09245 2045                        CC            .byte	$CC
09246 2046                        DE            .byte	$DE
09247 2047                        CC            .byte	$CC
09248 2048                        CC            .byte	$CC
09249 2049                        C6            .byte	$C6
09250 204A                        00            .byte	0
09251 204B                        00            .byte	0
09252 204C                        00            .byte	0
09253                                           ! 1302  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09254 204D                        00            .byte	0
09255 204E                        0E            .byte	$E
09256 204F                        1B            .byte	$1B
09257 2050                        18            .byte	$18
09258 2051                        18            .byte	$18
09259 2052                        18            .byte	$18
09260 2053                        7E            .byte	$7E
09261 2054                        18            .byte	$18
09262 2055                        18            .byte	$18
09263 2056                        18            .byte	$18
09264 2057                        18            .byte	$18
09265 2058                        D8            .byte	$D8
09266 2059                        70            .byte	$70
09267 205A                        00            .byte	0
09268                                           ! 1303  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09269 205B                        00            .byte	0
09270 205C                        18            .byte	$18
09271 205D                        30            .byte	$30
09272 205E                        60            .byte	$60
09273 205F                        00            .byte	0
09274 2060                        78            .byte	$78
09275 2061                        0C            .byte	$C
09276 2062                        7C            .byte	$7C
09277 2063                        CC            .byte	$CC
09278 2064                        CC            .byte	$CC
09279 2065                        76            .byte	$76
09280 2066                        00            .byte	0
09281 2067                        00            .byte	0
09282 2068                        00            .byte	0
09283                                           ! 1304  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09284 2069                        00            .byte	0
09285 206A                        0C            .byte	$C
09286 206B                        18            .byte	$18
09287 206C                        30            .byte	$30
09288 206D                        00            .byte	0
09289 206E                        38            .byte	$38
09290 206F                        18            .byte	$18
09291 2070                        18            .byte	$18
09292 2071                        18            .byte	$18
09293 2072                        18            .byte	$18
09294 2073                        3C            .byte	$3C
09295 2074                        00            .byte	0
09296 2075                        00            .byte	0
09297 2076                        00            .byte	0
09298                                           ! 1305  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09299 2077                        00            .byte	0
09300 2078                        18            .byte	$18
09301 2079                        30            .byte	$30
09302 207A                        60            .byte	$60
09303 207B                        00            .byte	0
09304 207C                        7C            .byte	$7C
09305 207D                        C6            .byte	$C6
09306 207E                        C6            .byte	$C6
09307 207F                        C6            .byte	$C6
09308 2080                        C6            .byte	$C6
09309 2081                        7C            .byte	$7C
09310 2082                        00            .byte	0
09311 2083                        00            .byte	0
09312 2084                        00            .byte	0
09313                                           ! 1306  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09314 2085                        00            .byte	0
09315 2086                        18            .byte	$18
09316 2087                        30            .byte	$30
09317 2088                        60            .byte	$60
09318 2089                        00            .byte	0
09319 208A                        CC            .byte	$CC
09320 208B                        CC            .byte	$CC
09321 208C                        CC            .byte	$CC
09322 208D                        CC            .byte	$CC
09323 208E                        CC            .byte	$CC
09324 208F                        76            .byte	$76
09325 2090                        00            .byte	0
09326 2091                        00            .byte	0
09327 2092                        00            .byte	0
09328                                           ! 1307  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09329 2093                        00            .byte	0
09330 2094                        00            .byte	0
09331 2095                        76            .byte	$76
09332 2096                        DC            .byte	$DC
09333 2097                        00            .byte	0
09334 2098                        DC            .byte	$DC
09335 2099                        66            .byte	$66
09336 209A                        66            .byte	$66
09337 209B                        66            .byte	$66
09338 209C                        66            .byte	$66
09339 209D                        66            .byte	$66
09340 209E                        00            .byte	0
09341 209F                        00            .byte	0
09342 20A0                        00            .byte	0
09343                                           ! 1308  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09344 20A1                        76            .byte	$76
09345 20A2                        DC            .byte	$DC
09346 20A3                        00            .byte	0
09347 20A4                        C6            .byte	$C6
09348 20A5                        E6            .byte	$E6
09349 20A6                        F6            .byte	$F6
09350 20A7                        FE            .byte	$FE
09351 20A8                        DE            .byte	$DE
09352 20A9                        CE            .byte	$CE
09353 20AA                        C6            .byte	$C6
09354 20AB                        C6            .byte	$C6
09355 20AC                        00            .byte	0
09356 20AD                        00            .byte	0
09357 20AE                        00            .byte	0
09358                                           ! 1309  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09359 20AF                        00            .byte	0
09360 20B0                        3C            .byte	$3C
09361 20B1                        6C            .byte	$6C
09362 20B2                        6C            .byte	$6C
09363 20B3                        3E            .byte	$3E
09364 20B4                        00            .byte	0
09365 20B5                        7E            .byte	$7E
09366 20B6                        00            .byte	0
09367 20B7                        00            .byte	0
09368 20B8                        00            .byte	0
09369 20B9                        00            .byte	0
09370 20BA                        00            .byte	0
09371 20BB                        00            .byte	0
09372 20BC                        00            .byte	0
09373                                           ! 1310  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09374 20BD                        00            .byte	0
09375 20BE                        38            .byte	$38
09376 20BF                        6C            .byte	$6C
09377 20C0                        6C            .byte	$6C
09378 20C1                        38            .byte	$38
09379 20C2                        00            .byte	0
09380 20C3                        7C            .byte	$7C
09381 20C4                        00            .byte	0
09382 20C5                        00            .byte	0
09383 20C6                        00            .byte	0
09384 20C7                        00            .byte	0
09385 20C8                        00            .byte	0
09386 20C9                        00            .byte	0
09387 20CA                        00            .byte	0
09388                                           ! 1311  0x00, 0x
09389 20CB                        00            .byte	0
09390                                           ! 1311 00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09391 20CC                        00            .byte	0
09392 20CD                        30            .byte	$30
09393 20CE                        30            .byte	$30
09394 20CF                        00            .byte	0
09395 20D0                        30            .byte	$30
09396 20D1                        30            .byte	$30
09397 20D2                        60            .byte	$60
09398 20D3                        C6            .byte	$C6
09399 20D4                        C6            .byte	$C6
09400 20D5                        7C            .byte	$7C
09401 20D6                        00            .byte	0
09402 20D7                        00            .byte	0
09403 20D8                        00            .byte	0
09404                                           ! 1312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09405 20D9                        00            .byte	0
09406 20DA                        00            .byte	0
09407 20DB                        00            .byte	0
09408 20DC                        00            .byte	0
09409 20DD                        00            .byte	0
09410 20DE                        00            .byte	0
09411 20DF                        FE            .byte	$FE
09412 20E0                        C0            .byte	$C0
09413 20E1                        C0            .byte	$C0
09414 20E2                        C0            .byte	$C0
09415 20E3                        00            .byte	0
09416 20E4                        00            .byte	0
09417 20E5                        00            .byte	0
09418 20E6                        00            .byte	0
09419                                           ! 1313  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09420 20E7                        00            .byte	0
09421 20E8                        00            .byte	0
09422 20E9                        00            .byte	0
09423 20EA                        00            .byte	0
09424 20EB                        00            .byte	0
09425 20EC                        00            .byte	0
09426 20ED                        FE            .byte	$FE
09427 20EE                        06            .byte	6
09428 20EF                        06            .byte	6
09429 20F0                        06            .byte	6
09430 20F1                        00            .byte	0
09431 20F2                        00            .byte	0
09432 20F3                        00            .byte	0
09433 20F4                        00            .byte	0
09434                                           ! 1314  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09435 20F5                        00            .byte	0
09436 20F6                        C0            .byte	$C0
09437 20F7                        C0            .byte	$C0
09438 20F8                        C6            .byte	$C6
09439 20F9                        CC            .byte	$CC
09440 20FA                        D8            .byte	$D8
09441 20FB                        30            .byte	$30
09442 20FC                        60            .byte	$60
09443 20FD                        DC            .byte	$DC
09444 20FE                        86            .byte	$86
09445 20FF                        0C            .byte	$C
09446 2100                        18            .byte	$18
09447 2101                        3E            .byte	$3E
09448 2102                        00            .byte	0
09449                                           ! 1315  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09450 2103                        00            .byte	0
09451 2104                        C0            .byte	$C0
09452 2105                        C0            .byte	$C0
09453 2106                        C6            .byte	$C6
09454 2107                        CC            .byte	$CC
09455 2108                        D8            .byte	$D8
09456 2109                        30            .byte	$30
09457 210A                        66            .byte	$66
09458 210B                        CE            .byte	$CE
09459 210C                        9E            .byte	$9E
09460 210D                        3E            .byte	$3E
09461 210E                        06            .byte	6
09462 210F                        06            .byte	6
09463 2110                        00            .byte	0
09464                                           ! 1316  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09465 2111                        00            .byte	0
09466 2112                        00            .byte	0
09467 2113                        18            .byte	$18
09468 2114                        18            .byte	$18
09469 2115                        00            .byte	0
09470 2116                        18            .byte	$18
09471 2117                        18            .byte	$18
09472 2118                        3C            .byte	$3C
09473 2119                        3C            .byte	$3C
09474 211A                        3C            .byte	$3C
09475 211B                        18            .byte	$18
09476 211C                        00            .byte	0
09477 211D                        00            .byte	0
09478 211E                        00            .byte	0
09479                                           ! 1317  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09480 211F                        00            .byte	0
09481 2120                        00            .byte	0
09482 2121                        00            .byte	0
09483 2122                        00            .byte	0
09484 2123                        36            .byte	$36
09485 2124                        6C            .byte	$6C
09486 2125                        D8            .byte	$D8
09487 2126                        6C            .byte	$6C
09488 2127                        36            .byte	$36
09489 2128                        00            .byte	0
09490 2129                        00            .byte	0
09491 212A                        00            .byte	0
09492 212B                        00            .byte	0
09493 212C                        00            .byte	0
09494                                           ! 1318  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09495 212D                        00            .byte	0
09496 212E                        00            .byte	0
09497 212F                        00            .byte	0
09498 2130                        00            .byte	0
09499 2131                        D8            .byte	$D8
09500 2132                        6C            .byte	$6C
09501 2133                        36            .byte	$36
09502 2134                        6C            .byte	$6C
09503 2135                        D8            .byte	$D8
09504 2136                        00            .byte	0
09505 2137                        00            .byte	0
09506 2138                        00            .byte	0
09507 2139                        00            .byte	0
09508 213A                        00            .byte	0
09509                                           ! 1319  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09510 213B                        11            .byte	$11
09511 213C                        44            .byte	$44
09512 213D                        11            .byte	$11
09513 213E                        44            .byte	$44
09514 213F                        11            .byte	$11
09515 2140                        44            .byte	$44
09516 2141                        11            .byte	$11
09517 2142                        44            .byte	$44
09518 2143                        11            .byte	$11
09519 2144                        44            .byte	$44
09520 2145                        11            .byte	$11
09521 2146                        44            .byte	$44
09522 2147                        11            .byte	$11
09523 2148                        44            .byte	$44
09524                                           ! 1320  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09525 2149                        55            .byte	$55
09526 214A                        AA            .byte	$AA
09527 214B                        55            .byte	$55
09528 214C                        AA            .byte	$AA
09529 214D                        55            .byte	$55
09530 214E                        AA            .byte	$AA
09531 214F                        55            .byte	$55
09532 2150                        AA            .byte	$AA
09533 2151                        55            .byte	$55
09534 2152                        AA            .byte	$AA
09535 2153                        55            .byte	$55
09536 2154                        AA            .byte	$AA
09537 2155                        55            .byte	$55
09538 2156                        AA            .byte	$AA
09539                                           ! 1321  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09540 2157                        DD            .byte	$DD
09541 2158                        77            .byte	$77
09542 2159                        DD            .byte	$DD
09543 215A                        77            .byte	$77
09544 215B                        DD            .byte	$DD
09545 215C                        77            .byte	$77
09546 215D                        DD            .byte	$DD
09547 215E                        77            .byte	$77
09548 215F                        DD            .byte	$DD
09549 2160                        77            .byte	$77
09550 2161                        DD            .byte	$DD
09551 2162                        77            .byte	$77
09552 2163                        DD            .byte	$DD
09553 2164                        77            .byte	$77
09554                                           ! 1322  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09555 2165                        18            .byte	$18
09556 2166                        18            .byte	$18
09557 2167                        18            .byte	$18
09558 2168                        18            .byte	$18
09559 2169                        18            .byte	$18
09560 216A                        18            .byte	$18
09561 216B                        18            .byte	$18
09562 216C                        18            .byte	$18
09563 216D                        18            .byte	$18
09564 216E                        18            .byte	$18
09565 216F                        18            .byte	$18
09566 2170                        18            .byte	$18
09567 2171                        18            .byte	$18
09568 2172                        18            .byte	$18
09569                                           ! 1323  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09570 2173                        18            .byte	$18
09571 2174                        18            .byte	$18
09572 2175                        18            .byte	$18
09573 2176                        18            .byte	$18
09574 2177                        18            .byte	$18
09575 2178                        18            .byte	$18
09576 2179                        18            .byte	$18
09577 217A                        F8            .byte	$F8
09578 217B                        18            .byte	$18
09579 217C                        18            .byte	$18
09580 217D                        18            .byte	$18
09581 217E                        18            .byte	$18
09582 217F                        18            .byte	$18
09583 2180                        18            .byte	$18
09584                                           ! 1324  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09585 2181                        18            .byte	$18
09586 2182                        18            .byte	$18
09587 2183                        18            .byte	$18
09588 2184                        18            .byte	$18
09589 2185                        18            .byte	$18
09590 2186                        F8            .byte	$F8
09591 2187                        18            .byte	$18
09592 2188                        F8            .byte	$F8
09593 2189                        18            .byte	$18
09594 218A                        18            .byte	$18
09595 218B                        18            .byte	$18
09596 218C                        18            .byte	$18
09597 218D                        18            .byte	$18
09598 218E                        18            .byte	$18
09599                                           ! 1325  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09600 218F                        36            .byte	$36
09601 2190                        36            .byte	$36
09602 2191                        36            .byte	$36
09603 2192                        36            .byte	$36
09604 2193                        36            .byte	$36
09605 2194                        36            .byte	$36
09606 2195                        36            .byte	$36
09607 2196                        F6            .byte	$F6
09608 2197                        36            .byte	$36
09609 2198                        36            .byte	$36
09610 2199                        36            .byte	$36
09611 219A                        36            .byte	$36
09612 219B                        36            .byte	$36
09613 219C                        36            .byte	$36
09614                                           ! 1326  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09615 219D                        00            .byte	0
09616 219E                        00            .byte	0
09617 219F                        00            .byte	0
09618 21A0                        00            .byte	0
09619 21A1                        00            .byte	0
09620 21A2                        00            .byte	0
09621 21A3                        00            .byte	0
09622 21A4                        FE            .byte	$FE
09623 21A5                        36            .byte	$36
09624 21A6                        36            .byte	$36
09625 21A7                        36            .byte	$36
09626 21A8                        36            .byte	$36
09627 21A9                        36            .byte	$36
09628 21AA                        36            .byte	$36
09629                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09630 21AB                        00            .byte	0
09631 21AC                        00            .byte	0
09632 21AD                        00            .byte	0
09633 21AE                        00            .byte	0
09634 21AF                        00            .byte	0
09635 21B0                        F8            .byte	$F8
09636 21B1                        18            .byte	$18
09637 21B2                        F8            .byte	$F8
09638 21B3                        18            .byte	$18
09639 21B4                        18            .byte	$18
09640 21B5                        18            .byte	$18
09641 21B6                        18            .byte	$18
09642 21B7                        18            .byte	$18
09643 21B8                        18            .byte	$18
09644                                           ! 1328  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09645 21B9                        36            .byte	$36
09646 21BA                        36            .byte	$36
09647 21BB                        36            .byte	$36
09648 21BC                        36            .byte	$36
09649 21BD                        36            .byte	$36
09650 21BE                        F6            .byte	$F6
09651 21BF                        06            .byte	6
09652 21C0                        F6            .byte	$F6
09653 21C1                        36            .byte	$36
09654 21C2                        36            .byte	$36
09655 21C3                        36            .byte	$36
09656 21C4                        36            .byte	$36
09657 21C5                        36            .byte	$36
09658 21C6                        36            .byte	$36
09659                                           ! 1329  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09660 21C7                        36            .byte	$36
09661 21C8                        36            .byte	$36
09662 21C9                        36            .byte	$36
09663 21CA                        36            .byte	$36
09664 21CB                        36            .byte	$36
09665 21CC                        36            .byte	$36
09666 21CD                        36            .byte	$36
09667 21CE                        36            .byte	$36
09668 21CF                        36            .byte	$36
09669 21D0                        36            .byte	$36
09670 21D1                        36            .byte	$36
09671 21D2                        36            .byte	$36
09672 21D3                        36            .byte	$36
09673 21D4                        36            .byte	$36
09674                                           ! 1330  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09675 21D5                        00            .byte	0
09676 21D6                        00            .byte	0
09677 21D7                        00            .byte	0
09678 21D8                        00            .byte	0
09679 21D9                        00            .byte	0
09680 21DA                        FE            .byte	$FE
09681 21DB                        06            .byte	6
09682 21DC                        F6            .byte	$F6
09683 21DD                        36            .byte	$36
09684 21DE                        36            .byte	$36
09685 21DF                        36            .byte	$36
09686 21E0                        36            .byte	$36
09687 21E1                        36            .byte	$36
09688 21E2                        36            .byte	$36
09689                                           ! 1331  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09690 21E3                        36            .byte	$36
09691 21E4                        36            .byte	$36
09692 21E5                        36            .byte	$36
09693 21E6                        36            .byte	$36
09694 21E7                        36            .byte	$36
09695 21E8                        F6            .byte	$F6
09696 21E9                        06            .byte	6
09697 21EA                        FE            .byte	$FE
09698 21EB                        00            .byte	0
09699 21EC                        00            .byte	0
09700 21ED                        00            .byte	0
09701 21EE                        00            .byte	0
09702 21EF                        00            .byte	0
09703 21F0                        00            .byte	0
09704                                           ! 1332  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09705 21F1                        36            .byte	$36
09706 21F2                        36            .byte	$36
09707 21F3                        36            .byte	$36
09708 21F4                        36            .byte	$36
09709 21F5                        36            .byte	$36
09710 21F6                        36            .byte	$36
09711 21F7                        36            .byte	$36
09712 21F8                        FE            .byte	$FE
09713 21F9                        00            .byte	0
09714 21FA                        00            .byte	0
09715 21FB                        00            .byte	0
09716 21FC                        00            .byte	0
09717 21FD                        00            .byte	0
09718 21FE                        00            .byte	0
09719                                           ! 1333  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09720 21FF                        18            .byte	$18
09721 2200                        18            .byte	$18
09722 2201                        18            .byte	$18
09723 2202                        18            .byte	$18
09724 2203                        18            .byte	$18
09725 2204                        F8            .byte	$F8
09726 2205                        18            .byte	$18
09727 2206                        F8            .byte	$F8
09728 2207                        00            .byte	0
09729 2208                        00            .byte	0
09730 2209                        00            .byte	0
09731 220A                        00            .byte	0
09732 220B                        00            .byte	0
09733 220C                        00            .byte	0
09734                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09735 220D                        00            .byte	0
09736 220E                        00            .byte	0
09737 220F                        00            .byte	0
09738 2210                        00            .byte	0
09739 2211                        00            .byte	0
09740 2212                        00            .byte	0
09741 2213                        00            .byte	0
09742 2214                        F8            .byte	$F8
09743 2215                        18            .byte	$18
09744 2216                        18            .byte	$18
09745 2217                        18            .byte	$18
09746 2218                        18            .byte	$18
09747 2219                        18            .byte	$18
09748 221A                        18            .byte	$18
09749                                           ! 1335  0x18, 0x18, 0x18
09750 221B                        18            .byte	$18
09751 221C                        18            .byte	$18
09752                                           ! 1335 , 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09753 221D                        18            .byte	$18
09754 221E                        18            .byte	$18
09755 221F                        18            .byte	$18
09756 2220                        18            .byte	$18
09757 2221                        18            .byte	$18
09758 2222                        1F            .byte	$1F
09759 2223                        00            .byte	0
09760 2224                        00            .byte	0
09761 2225                        00            .byte	0
09762 2226                        00            .byte	0
09763 2227                        00            .byte	0
09764 2228                        00            .byte	0
09765                                           ! 1336  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09766 2229                        18            .byte	$18
09767 222A                        18            .byte	$18
09768 222B                        18            .byte	$18
09769 222C                        18            .byte	$18
09770 222D                        18            .byte	$18
09771 222E                        18            .byte	$18
09772 222F                        18            .byte	$18
09773 2230                        FF            .byte	$FF
09774 2231                        00            .byte	0
09775 2232                        00            .byte	0
09776 2233                        00            .byte	0
09777 2234                        00            .byte	0
09778 2235                        00            .byte	0
09779 2236                        00            .byte	0
09780                                           ! 1337  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09781 2237                        00            .byte	0
09782 2238                        00            .byte	0
09783 2239                        00            .byte	0
09784 223A                        00            .byte	0
09785 223B                        00            .byte	0
09786 223C                        00            .byte	0
09787 223D                        00            .byte	0
09788 223E                        FF            .byte	$FF
09789 223F                        18            .byte	$18
09790 2240                        18            .byte	$18
09791 2241                        18            .byte	$18
09792 2242                        18            .byte	$18
09793 2243                        18            .byte	$18
09794 2244                        18            .byte	$18
09795                                           ! 1338  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09796 2245                        18            .byte	$18
09797 2246                        18            .byte	$18
09798 2247                        18            .byte	$18
09799 2248                        18            .byte	$18
09800 2249                        18            .byte	$18
09801 224A                        18            .byte	$18
09802 224B                        18            .byte	$18
09803 224C                        1F            .byte	$1F
09804 224D                        18            .byte	$18
09805 224E                        18            .byte	$18
09806 224F                        18            .byte	$18
09807 2250                        18            .byte	$18
09808 2251                        18            .byte	$18
09809 2252                        18            .byte	$18
09810                                           ! 1339  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09811 2253                        00            .byte	0
09812 2254                        00            .byte	0
09813 2255                        00            .byte	0
09814 2256                        00            .byte	0
09815 2257                        00            .byte	0
09816 2258                        00            .byte	0
09817 2259                        00            .byte	0
09818 225A                        FF            .byte	$FF
09819 225B                        00            .byte	0
09820 225C                        00            .byte	0
09821 225D                        00            .byte	0
09822 225E                        00            .byte	0
09823 225F                        00            .byte	0
09824 2260                        00            .byte	0
09825                                           ! 1340  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09826 2261                        18            .byte	$18
09827 2262                        18            .byte	$18
09828 2263                        18            .byte	$18
09829 2264                        18            .byte	$18
09830 2265                        18            .byte	$18
09831 2266                        18            .byte	$18
09832 2267                        18            .byte	$18
09833 2268                        FF            .byte	$FF
09834 2269                        18            .byte	$18
09835 226A                        18            .byte	$18
09836 226B                        18            .byte	$18
09837 226C                        18            .byte	$18
09838 226D                        18            .byte	$18
09839 226E                        18            .byte	$18
09840                                           ! 1341  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09841 226F                        18            .byte	$18
09842 2270                        18            .byte	$18
09843 2271                        18            .byte	$18
09844 2272                        18            .byte	$18
09845 2273                        18            .byte	$18
09846 2274                        1F            .byte	$1F
09847 2275                        18            .byte	$18
09848 2276                        1F            .byte	$1F
09849 2277                        18            .byte	$18
09850 2278                        18            .byte	$18
09851 2279                        18            .byte	$18
09852 227A                        18            .byte	$18
09853 227B                        18            .byte	$18
09854 227C                        18            .byte	$18
09855                                           ! 1342  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09856 227D                        36            .byte	$36
09857 227E                        36            .byte	$36
09858 227F                        36            .byte	$36
09859 2280                        36            .byte	$36
09860 2281                        36            .byte	$36
09861 2282                        36            .byte	$36
09862 2283                        36            .byte	$36
09863 2284                        37            .byte	$37
09864 2285                        36            .byte	$36
09865 2286                        36            .byte	$36
09866 2287                        36            .byte	$36
09867 2288                        36            .byte	$36
09868 2289                        36            .byte	$36
09869 228A                        36            .byte	$36
09870                                           ! 1343  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09871 228B                        36            .byte	$36
09872 228C                        36            .byte	$36
09873 228D                        36            .byte	$36
09874 228E                        36            .byte	$36
09875 228F                        36            .byte	$36
09876 2290                        37            .byte	$37
09877 2291                        30            .byte	$30
09878 2292                        3F            .byte	$3F
09879 2293                        00            .byte	0
09880 2294                        00            .byte	0
09881 2295                        00            .byte	0
09882 2296                        00            .byte	0
09883 2297                        00            .byte	0
09884 2298                        00            .byte	0
09885                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09886 2299                        00            .byte	0
09887 229A                        00            .byte	0
09888 229B                        00            .byte	0
09889 229C                        00            .byte	0
09890 229D                        00            .byte	0
09891 229E                        3F            .byte	$3F
09892 229F                        30            .byte	$30
09893 22A0                        37            .byte	$37
09894 22A1                        36            .byte	$36
09895 22A2                        36            .byte	$36
09896 22A3                        36            .byte	$36
09897 22A4                        36            .byte	$36
09898 22A5                        36            .byte	$36
09899 22A6                        36            .byte	$36
09900                                           ! 1345  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09901 22A7                        36            .byte	$36
09902 22A8                        36            .byte	$36
09903 22A9                        36            .byte	$36
09904 22AA                        36            .byte	$36
09905 22AB                        36            .byte	$36
09906 22AC                        F7            .byte	$F7
09907 22AD                        00            .byte	0
09908 22AE                        FF            .byte	$FF
09909 22AF                        00            .byte	0
09910 22B0                        00            .byte	0
09911 22B1                        00            .byte	0
09912 22B2                        00            .byte	0
09913 22B3                        00            .byte	0
09914 22B4                        00            .byte	0
09915                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09916 22B5                        00            .byte	0
09917 22B6                        00            .byte	0
09918 22B7                        00            .byte	0
09919 22B8                        00            .byte	0
09920 22B9                        00            .byte	0
09921 22BA                        FF            .byte	$FF
09922 22BB                        00            .byte	0
09923 22BC                        F7            .byte	$F7
09924 22BD                        36            .byte	$36
09925 22BE                        36            .byte	$36
09926 22BF                        36            .byte	$36
09927 22C0                        36            .byte	$36
09928 22C1                        36            .byte	$36
09929 22C2                        36            .byte	$36
09930                                           ! 1347  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09931 22C3                        36            .byte	$36
09932 22C4                        36            .byte	$36
09933 22C5                        36            .byte	$36
09934 22C6                        36            .byte	$36
09935 22C7                        36            .byte	$36
09936 22C8                        37            .byte	$37
09937 22C9                        30            .byte	$30
09938 22CA                        37            .byte	$37
09939 22CB                        36            .byte	$36
09940 22CC                        36            .byte	$36
09941 22CD                        36            .byte	$36
09942 22CE                        36            .byte	$36
09943 22CF                        36            .byte	$36
09944 22D0                        36            .byte	$36
09945                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09946 22D1                        00            .byte	0
09947 22D2                        00            .byte	0
09948 22D3                        00            .byte	0
09949 22D4                        00            .byte	0
09950 22D5                        00            .byte	0
09951 22D6                        FF            .byte	$FF
09952 22D7                        00            .byte	0
09953 22D8                        FF            .byte	$FF
09954 22D9                        00            .byte	0
09955 22DA                        00            .byte	0
09956 22DB                        00            .byte	0
09957 22DC                        00            .byte	0
09958 22DD                        00            .byte	0
09959 22DE                        00            .byte	0
09960                                           ! 1349  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09961 22DF                        36            .byte	$36
09962 22E0                        36            .byte	$36
09963 22E1                        36            .byte	$36
09964 22E2                        36            .byte	$36
09965 22E3                        36            .byte	$36
09966 22E4                        F7            .byte	$F7
09967 22E5                        00            .byte	0
09968 22E6                        F7            .byte	$F7
09969 22E7                        36            .byte	$36
09970 22E8                        36            .byte	$36
09971 22E9                        36            .byte	$36
09972 22EA                        36            .byte	$36
09973 22EB                        36            .byte	$36
09974 22EC                        36            .byte	$36
09975                                           ! 1350  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09976 22ED                        18            .byte	$18
09977 22EE                        18            .byte	$18
09978 22EF                        18            .byte	$18
09979 22F0                        18            .byte	$18
09980 22F1                        18            .byte	$18
09981 22F2                        FF            .byte	$FF
09982 22F3                        00            .byte	0
09983 22F4                        FF            .byte	$FF
09984 22F5                        00            .byte	0
09985 22F6                        00            .byte	0
09986 22F7                        00            .byte	0
09987 22F8                        00            .byte	0
09988 22F9                        00            .byte	0
09989 22FA                        00            .byte	0
09990                                           ! 1351  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09991 22FB                        36            .byte	$36
09992 22FC                        36            .byte	$36
09993 22FD                        36            .byte	$36
09994 22FE                        36            .byte	$36
09995 22FF                        36            .byte	$36
09996 2300                        36            .byte	$36
09997 2301                        36            .byte	$36
09998 2302                        FF            .byte	$FF
09999 2303                        00            .byte	0
10000 2304                        00            .byte	0
10001 2305                        00            .byte	0
10002 2306                        00            .byte	0
10003 2307                        00            .byte	0
10004 2308                        00            .byte	0
10005                                           ! 1352  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10006 2309                        00            .byte	0
10007 230A                        00            .byte	0
10008 230B                        00            .byte	0
10009 230C                        00            .byte	0
10010 230D                        00            .byte	0
10011 230E                        FF            .byte	$FF
10012 230F                        00            .byte	0
10013 2310                        FF            .byte	$FF
10014 2311                        18            .byte	$18
10015 2312                        18            .byte	$18
10016 2313                        18            .byte	$18
10017 2314                        18            .byte	$18
10018 2315                        18            .byte	$18
10019 2316                        18            .byte	$18
10020                                           ! 1353  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10021 2317                        00            .byte	0
10022 2318                        00            .byte	0
10023 2319                        00            .byte	0
10024 231A                        00            .byte	0
10025 231B                        00            .byte	0
10026 231C                        00            .byte	0
10027 231D                        00            .byte	0
10028 231E                        FF            .byte	$FF
10029 231F                        36            .byte	$36
10030 2320                        36            .byte	$36
10031 2321                        36            .byte	$36
10032 2322                        36            .byte	$36
10033 2323                        36            .byte	$36
10034 2324                        36            .byte	$36
10035                                           ! 1354  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10036 2325                        36            .byte	$36
10037 2326                        36            .byte	$36
10038 2327                        36            .byte	$36
10039 2328                        36            .byte	$36
10040 2329                        36            .byte	$36
10041 232A                        36            .byte	$36
10042 232B                        36            .byte	$36
10043 232C                        3F            .byte	$3F
10044 232D                        00            .byte	0
10045 232E                        00            .byte	0
10046 232F                        00            .byte	0
10047 2330                        00            .byte	0
10048 2331                        00            .byte	0
10049 2332                        00            .byte	0
10050                                           ! 1355  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10051 2333                        18            .byte	$18
10052 2334                        18            .byte	$18
10053 2335                        18            .byte	$18
10054 2336                        18            .byte	$18
10055 2337                        18            .byte	$18
10056 2338                        1F            .byte	$1F
10057 2339                        18            .byte	$18
10058 233A                        1F            .byte	$1F
10059 233B                        00            .byte	0
10060 233C                        00            .byte	0
10061 233D                        00            .byte	0
10062 233E                        00            .byte	0
10063 233F                        00            .byte	0
10064 2340                        00            .byte	0
10065                                           ! 1356  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10066 2341                        00            .byte	0
10067 2342                        00            .byte	0
10068 2343                        00            .byte	0
10069 2344                        00            .byte	0
10070 2345                        00            .byte	0
10071 2346                        1F            .byte	$1F
10072 2347                        18            .byte	$18
10073 2348                        1F            .byte	$1F
10074 2349                        18            .byte	$18
10075 234A                        18            .byte	$18
10076 234B                        18            .byte	$18
10077 234C                        18            .byte	$18
10078 234D                        18            .byte	$18
10079 234E                        18            .byte	$18
10080                                           ! 1357  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10081 234F                        00            .byte	0
10082 2350                        00            .byte	0
10083 2351                        00            .byte	0
10084 2352                        00            .byte	0
10085 2353                        00            .byte	0
10086 2354                        00            .byte	0
10087 2355                        00            .byte	0
10088 2356                        3F            .byte	$3F
10089 2357                        36            .byte	$36
10090 2358                        36            .byte	$36
10091 2359                        36            .byte	$36
10092 235A                        36            .byte	$36
10093 235B                        36            .byte	$36
10094 235C                        36            .byte	$36
10095                                           ! 1358  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10096 235D                        36            .byte	$36
10097 235E                        36            .byte	$36
10098 235F                        36            .byte	$36
10099 2360                        36            .byte	$36
10100 2361                        36            .byte	$36
10101 2362                        36            .byte	$36
10102 2363                        36            .byte	$36
10103 2364                        FF            .byte	$FF
10104 2365                        36            .byte	$36
10105 2366                        36            .byte	$36
10106 2367                        36            .byte	$36
10107 2368                        36            .byte	$36
10108 2369                        36            .byte	$36
10109 236A                        36            .byte	$36
10110                                           ! 1359  0x18, 0x18, 0x18, 0x18, 
10111 236B                        18            .byte	$18
10112 236C                        18            .byte	$18
10113 236D                        18            .byte	$18
10114 236E                        18            .byte	$18
10115                                           ! 1359 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10116 236F                        18            .byte	$18
10117 2370                        FF            .byte	$FF
10118 2371                        18            .byte	$18
10119 2372                        FF            .byte	$FF
10120 2373                        18            .byte	$18
10121 2374                        18            .byte	$18
10122 2375                        18            .byte	$18
10123 2376                        18            .byte	$18
10124 2377                        18            .byte	$18
10125 2378                        18            .byte	$18
10126                                           ! 1360  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10127 2379                        18            .byte	$18
10128 237A                        18            .byte	$18
10129 237B                        18            .byte	$18
10130 237C                        18            .byte	$18
10131 237D                        18            .byte	$18
10132 237E                        18            .byte	$18
10133 237F                        18            .byte	$18
10134 2380                        F8            .byte	$F8
10135 2381                        00            .byte	0
10136 2382                        00            .byte	0
10137 2383                        00            .byte	0
10138 2384                        00            .byte	0
10139 2385                        00            .byte	0
10140 2386                        00            .byte	0
10141                                           ! 1361  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10142 2387                        00            .byte	0
10143 2388                        00            .byte	0
10144 2389                        00            .byte	0
10145 238A                        00            .byte	0
10146 238B                        00            .byte	0
10147 238C                        00            .byte	0
10148 238D                        00            .byte	0
10149 238E                        1F            .byte	$1F
10150 238F                        18            .byte	$18
10151 2390                        18            .byte	$18
10152 2391                        18            .byte	$18
10153 2392                        18            .byte	$18
10154 2393                        18            .byte	$18
10155 2394                        18            .byte	$18
10156                                           ! 1362  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10157 2395                        FF            .byte	$FF
10158 2396                        FF            .byte	$FF
10159 2397                        FF            .byte	$FF
10160 2398                        FF            .byte	$FF
10161 2399                        FF            .byte	$FF
10162 239A                        FF            .byte	$FF
10163 239B                        FF            .byte	$FF
10164 239C                        FF            .byte	$FF
10165 239D                        FF            .byte	$FF
10166 239E                        FF            .byte	$FF
10167 239F                        FF            .byte	$FF
10168 23A0                        FF            .byte	$FF
10169 23A1                        FF            .byte	$FF
10170 23A2                        FF            .byte	$FF
10171                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10172 23A3                        00            .byte	0
10173 23A4                        00            .byte	0
10174 23A5                        00            .byte	0
10175 23A6                        00            .byte	0
10176 23A7                        00            .byte	0
10177 23A8                        00            .byte	0
10178 23A9                        00            .byte	0
10179 23AA                        FF            .byte	$FF
10180 23AB                        FF            .byte	$FF
10181 23AC                        FF            .byte	$FF
10182 23AD                        FF            .byte	$FF
10183 23AE                        FF            .byte	$FF
10184 23AF                        FF            .byte	$FF
10185 23B0                        FF            .byte	$FF
10186                                           ! 1364  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
10187 23B1                        F0            .byte	$F0
10188 23B2                        F0            .byte	$F0
10189 23B3                        F0            .byte	$F0
10190 23B4                        F0            .byte	$F0
10191 23B5                        F0            .byte	$F0
10192 23B6                        F0            .byte	$F0
10193 23B7                        F0            .byte	$F0
10194 23B8                        F0            .byte	$F0
10195 23B9                        F0            .byte	$F0
10196 23BA                        F0            .byte	$F0
10197 23BB                        F0            .byte	$F0
10198 23BC                        F0            .byte	$F0
10199 23BD                        F0            .byte	$F0
10200 23BE                        F0            .byte	$F0
10201                                           ! 1365  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10202 23BF                        0F            .byte	$F
10203 23C0                        0F            .byte	$F
10204 23C1                        0F            .byte	$F
10205 23C2                        0F            .byte	$F
10206 23C3                        0F            .byte	$F
10207 23C4                        0F            .byte	$F
10208 23C5                        0F            .byte	$F
10209 23C6                        0F            .byte	$F
10210 23C7                        0F            .byte	$F
10211 23C8                        0F            .byte	$F
10212 23C9                        0F            .byte	$F
10213 23CA                        0F            .byte	$F
10214 23CB                        0F            .byte	$F
10215 23CC                        0F            .byte	$F
10216                                           ! 1366  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10217 23CD                        FF            .byte	$FF
10218 23CE                        FF            .byte	$FF
10219 23CF                        FF            .byte	$FF
10220 23D0                        FF            .byte	$FF
10221 23D1                        FF            .byte	$FF
10222 23D2                        FF            .byte	$FF
10223 23D3                        FF            .byte	$FF
10224 23D4                        00            .byte	0
10225 23D5                        00            .byte	0
10226 23D6                        00            .byte	0
10227 23D7                        00            .byte	0
10228 23D8                        00            .byte	0
10229 23D9                        00            .byte	0
10230 23DA                        00            .byte	0
10231                                           ! 1367  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10232 23DB                        00            .byte	0
10233 23DC                        00            .byte	0
10234 23DD                        00            .byte	0
10235 23DE                        00            .byte	0
10236 23DF                        00            .byte	0
10237 23E0                        76            .byte	$76
10238 23E1                        DC            .byte	$DC
10239 23E2                        D8            .byte	$D8
10240 23E3                        D8            .byte	$D8
10241 23E4                        DC            .byte	$DC
10242 23E5                        76            .byte	$76
10243 23E6                        00            .byte	0
10244 23E7                        00            .byte	0
10245 23E8                        00            .byte	0
10246                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10247 23E9                        00            .byte	0
10248 23EA                        00            .byte	0
10249 23EB                        00            .byte	0
10250 23EC                        00            .byte	0
10251 23ED                        7C            .byte	$7C
10252 23EE                        C6            .byte	$C6
10253 23EF                        FC            .byte	$FC
10254 23F0                        C6            .byte	$C6
10255 23F1                        C6            .byte	$C6
10256 23F2                        FC            .byte	$FC
10257 23F3                        C0            .byte	$C0
10258 23F4                        C0            .byte	$C0
10259 23F5                        40            .byte	$40
10260 23F6                        00            .byte	0
10261                                           ! 1369  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10262 23F7                        00            .byte	0
10263 23F8                        00            .byte	0
10264 23F9                        FE            .byte	$FE
10265 23FA                        C6            .byte	$C6
10266 23FB                        C6            .byte	$C6
10267 23FC                        C0            .byte	$C0
10268 23FD                        C0            .byte	$C0
10269 23FE                        C0            .byte	$C0
10270 23FF                        C0            .byte	$C0
10271 2400                        C0            .byte	$C0
10272 2401                        C0            .byte	$C0
10273 2402                        00            .byte	0
10274 2403                        00            .byte	0
10275 2404                        00            .byte	0
10276                                           ! 1370  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10277 2405                        00            .byte	0
10278 2406                        00            .byte	0
10279 2407                        00            .byte	0
10280 2408                        00            .byte	0
10281 2409                        FE            .byte	$FE
10282 240A                        6C            .byte	$6C
10283 240B                        6C            .byte	$6C
10284 240C                        6C            .byte	$6C
10285 240D                        6C            .byte	$6C
10286 240E                        6C            .byte	$6C
10287 240F                        6C            .byte	$6C
10288 2410                        00            .byte	0
10289 2411                        00            .byte	0
10290 2412                        00            .byte	0
10291                                           ! 1371  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10292 2413                        00            .byte	0
10293 2414                        00            .byte	0
10294 2415                        FE            .byte	$FE
10295 2416                        C6            .byte	$C6
10296 2417                        60            .byte	$60
10297 2418                        30            .byte	$30
10298 2419                        18            .byte	$18
10299 241A                        30            .byte	$30
10300 241B                        60            .byte	$60
10301 241C                        C6            .byte	$C6
10302 241D                        FE            .byte	$FE
10303 241E                        00            .byte	0
10304 241F                        00            .byte	0
10305 2420                        00            .byte	0
10306                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10307 2421                        00            .byte	0
10308 2422                        00            .byte	0
10309 2423                        00            .byte	0
10310 2424                        00            .byte	0
10311 2425                        00            .byte	0
10312 2426                        7E            .byte	$7E
10313 2427                        D8            .byte	$D8
10314 2428                        D8            .byte	$D8
10315 2429                        D8            .byte	$D8
10316 242A                        D8            .byte	$D8
10317 242B                        70            .byte	$70
10318 242C                        00            .byte	0
10319 242D                        00            .byte	0
10320 242E                        00            .byte	0
10321                                           ! 1373  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10322 242F                        00            .byte	0
10323 2430                        00            .byte	0
10324 2431                        00            .byte	0
10325 2432                        00            .byte	0
10326 2433                        66            .byte	$66
10327 2434                        66            .byte	$66
10328 2435                        66            .byte	$66
10329 2436                        66            .byte	$66
10330 2437                        7C            .byte	$7C
10331 2438                        60            .byte	$60
10332 2439                        60            .byte	$60
10333 243A                        C0            .byte	$C0
10334 243B                        00            .byte	0
10335 243C                        00            .byte	0
10336                                           ! 1374  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10337 243D                        00            .byte	0
10338 243E                        00            .byte	0
10339 243F                        00            .byte	0
10340 2440                        00            .byte	0
10341 2441                        76            .byte	$76
10342 2442                        DC            .byte	$DC
10343 2443                        18            .byte	$18
10344 2444                        18            .byte	$18
10345 2445                        18            .byte	$18
10346 2446                        18            .byte	$18
10347 2447                        18            .byte	$18
10348 2448                        00            .byte	0
10349 2449                        00            .byte	0
10350 244A                        00            .byte	0
10351                                           ! 1375  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10352 244B                        00            .byte	0
10353 244C                        00            .byte	0
10354 244D                        7E            .byte	$7E
10355 244E                        18            .byte	$18
10356 244F                        3C            .byte	$3C
10357 2450                        66            .byte	$66
10358 2451                        66            .byte	$66
10359 2452                        66            .byte	$66
10360 2453                        3C            .byte	$3C
10361 2454                        18            .byte	$18
10362 2455                        7E            .byte	$7E
10363 2456                        00            .byte	0
10364 2457                        00            .byte	0
10365 2458                        00            .byte	0
10366                                           ! 1376  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10367 2459                        00            .byte	0
10368 245A                        00            .byte	0
10369 245B                        38            .byte	$38
10370 245C                        6C            .byte	$6C
10371 245D                        C6            .byte	$C6
10372 245E                        C6            .byte	$C6
10373 245F                        FE            .byte	$FE
10374 2460                        C6            .byte	$C6
10375 2461                        C6            .byte	$C6
10376 2462                        6C            .byte	$6C
10377 2463                        38            .byte	$38
10378 2464                        00            .byte	0
10379 2465                        00            .byte	0
10380 2466                        00            .byte	0
10381                                           ! 1377  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10382 2467                        00            .byte	0
10383 2468                        00            .byte	0
10384 2469                        38            .byte	$38
10385 246A                        6C            .byte	$6C
10386 246B                        C6            .byte	$C6
10387 246C                        C6            .byte	$C6
10388 246D                        C6            .byte	$C6
10389 246E                        6C            .byte	$6C
10390 246F                        6C            .byte	$6C
10391 2470                        6C            .byte	$6C
10392 2471                        EE            .byte	$EE
10393 2472                        00            .byte	0
10394 2473                        00            .byte	0
10395 2474                        00            .byte	0
10396                                           ! 1378  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10397 2475                        00            .byte	0
10398 2476                        00            .byte	0
10399 2477                        1E            .byte	$1E
10400 2478                        30            .byte	$30
10401 2479                        18            .byte	$18
10402 247A                        0C            .byte	$C
10403 247B                        3E            .byte	$3E
10404 247C                        66            .byte	$66
10405 247D                        66            .byte	$66
10406 247E                        66            .byte	$66
10407 247F                        3C            .byte	$3C
10408 2480                        00            .byte	0
10409 2481                        00            .byte	0
10410 2482                        00            .byte	0
10411                                           ! 1379  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10412 2483                        00            .byte	0
10413 2484                        00            .byte	0
10414 2485                        00            .byte	0
10415 2486                        00            .byte	0
10416 2487                        00            .byte	0
10417 2488                        7E            .byte	$7E
10418 2489                        DB            .byte	$DB
10419 248A                        DB            .byte	$DB
10420 248B                        7E            .byte	$7E
10421 248C                        00            .byte	0
10422 248D                        00            .byte	0
10423 248E                        00            .byte	0
10424 248F                        00            .byte	0
10425 2490                        00            .byte	0
10426                                           ! 1380  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10427 2491                        00            .byte	0
10428 2492                        00            .byte	0
10429 2493                        03            .byte	3
10430 2494                        06            .byte	6
10431 2495                        7E            .byte	$7E
10432 2496                        DB            .byte	$DB
10433 2497                        DB            .byte	$DB
10434 2498                        F3            .byte	$F3
10435 2499                        7E            .byte	$7E
10436 249A                        60            .byte	$60
10437 249B                        C0            .byte	$C0
10438 249C                        00            .byte	0
10439 249D                        00            .byte	0
10440 249E                        00            .byte	0
10441                                           ! 1381  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10442 249F                        00            .byte	0
10443 24A0                        00            .byte	0
10444 24A1                        1C            .byte	$1C
10445 24A2                        30            .byte	$30
10446 24A3                        60            .byte	$60
10447 24A4                        60            .byte	$60
10448 24A5                        7C            .byte	$7C
10449 24A6                        60            .byte	$60
10450 24A7                        60            .byte	$60
10451 24A8                        30            .byte	$30
10452 24A9                        1C            .byte	$1C
10453 24AA                        00            .byte	0
10454 24AB                        00            .byte	0
10455 24AC                        00            .byte	0
10456                                           ! 1382  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10457 24AD                        00            .byte	0
10458 24AE                        00            .byte	0
10459 24AF                        00            .byte	0
10460 24B0                        7C            .byte	$7C
10461 24B1                        C6            .byte	$C6
10462 24B2                        C6            .byte	$C6
10463 24B3                        C6            .byte	$C6
10464 24B4                        C6            .byte	$C6
10465 24B5                        C6            .byte	$C6
10466 24B6                        C6            .byte	$C6
10467 24B7                        C6            .byte	$C6
10468 24B8                        00            .byte	0
10469 24B9                        00            .byte	0
10470 24BA                        00            .byte	0
10471                                           ! 1383  0x00, 0x00, 0x00, 0xfe, 0x00, 0x
10472 24BB                        00            .byte	0
10473 24BC                        00            .byte	0
10474 24BD                        00            .byte	0
10475 24BE                        FE            .byte	$FE
10476 24BF                        00            .byte	0
10477                                           ! 1383 00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10478 24C0                        00            .byte	0
10479 24C1                        FE            .byte	$FE
10480 24C2                        00            .byte	0
10481 24C3                        00            .byte	0
10482 24C4                        FE            .byte	$FE
10483 24C5                        00            .byte	0
10484 24C6                        00            .byte	0
10485 24C7                        00            .byte	0
10486 24C8                        00            .byte	0
10487                                           ! 1384  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10488 24C9                        00            .byte	0
10489 24CA                        00            .byte	0
10490 24CB                        00            .byte	0
10491 24CC                        18            .byte	$18
10492 24CD                        18            .byte	$18
10493 24CE                        7E            .byte	$7E
10494 24CF                        18            .byte	$18
10495 24D0                        18            .byte	$18
10496 24D1                        00            .byte	0
10497 24D2                        00            .byte	0
10498 24D3                        FF            .byte	$FF
10499 24D4                        00            .byte	0
10500 24D5                        00            .byte	0
10501 24D6                        00            .byte	0
10502                                           ! 1385  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10503 24D7                        00            .byte	0
10504 24D8                        00            .byte	0
10505 24D9                        30            .byte	$30
10506 24DA                        18            .byte	$18
10507 24DB                        0C            .byte	$C
10508 24DC                        06            .byte	6
10509 24DD                        0C            .byte	$C
10510 24DE                        18            .byte	$18
10511 24DF                        30            .byte	$30
10512 24E0                        00            .byte	0
10513 24E1                        7E            .byte	$7E
10514 24E2                        00            .byte	0
10515 24E3                        00            .byte	0
10516 24E4                        00            .byte	0
10517                                           ! 1386  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10518 24E5                        00            .byte	0
10519 24E6                        00            .byte	0
10520 24E7                        0C            .byte	$C
10521 24E8                        18            .byte	$18
10522 24E9                        30            .byte	$30
10523 24EA                        60            .byte	$60
10524 24EB                        30            .byte	$30
10525 24EC                        18            .byte	$18
10526 24ED                        0C            .byte	$C
10527 24EE                        00            .byte	0
10528 24EF                        7E            .byte	$7E
10529 24F0                        00            .byte	0
10530 24F1                        00            .byte	0
10531 24F2                        00            .byte	0
10532                                           ! 1387  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10533 24F3                        00            .byte	0
10534 24F4                        00            .byte	0
10535 24F5                        0E            .byte	$E
10536 24F6                        1B            .byte	$1B
10537 24F7                        1B            .byte	$1B
10538 24F8                        18            .byte	$18
10539 24F9                        18            .byte	$18
10540 24FA                        18            .byte	$18
10541 24FB                        18            .byte	$18
10542 24FC                        18            .byte	$18
10543 24FD                        18            .byte	$18
10544 24FE                        18            .byte	$18
10545 24FF                        18            .byte	$18
10546 2500                        18            .byte	$18
10547                                           ! 1388  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10548 2501                        18            .byte	$18
10549 2502                        18            .byte	$18
10550 2503                        18            .byte	$18
10551 2504                        18            .byte	$18
10552 2505                        18            .byte	$18
10553 2506                        18            .byte	$18
10554 2507                        18            .byte	$18
10555 2508                        18            .byte	$18
10556 2509                        D8            .byte	$D8
10557 250A                        D8            .byte	$D8
10558 250B                        70            .byte	$70
10559 250C                        00            .byte	0
10560 250D                        00            .byte	0
10561 250E                        00            .byte	0
10562                                           ! 1389  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10563 250F                        00            .byte	0
10564 2510                        00            .byte	0
10565 2511                        00            .byte	0
10566 2512                        18            .byte	$18
10567 2513                        18            .byte	$18
10568 2514                        00            .byte	0
10569 2515                        7E            .byte	$7E
10570 2516                        00            .byte	0
10571 2517                        18            .byte	$18
10572 2518                        18            .byte	$18
10573 2519                        00            .byte	0
10574 251A                        00            .byte	0
10575 251B                        00            .byte	0
10576 251C                        00            .byte	0
10577                                           ! 1390  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10578 251D                        00            .byte	0
10579 251E                        00            .byte	0
10580 251F                        00            .byte	0
10581 2520                        00            .byte	0
10582 2521                        76            .byte	$76
10583 2522                        DC            .byte	$DC
10584 2523                        00            .byte	0
10585 2524                        76            .byte	$76
10586 2525                        DC            .byte	$DC
10587 2526                        00            .byte	0
10588 2527                        00            .byte	0
10589 2528                        00            .byte	0
10590 2529                        00            .byte	0
10591 252A                        00            .byte	0
10592                                           ! 1391  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10593 252B                        00            .byte	0
10594 252C                        38            .byte	$38
10595 252D                        6C            .byte	$6C
10596 252E                        6C            .byte	$6C
10597 252F                        38            .byte	$38
10598 2530                        00            .byte	0
10599 2531                        00            .byte	0
10600 2532                        00            .byte	0
10601 2533                        00            .byte	0
10602 2534                        00            .byte	0
10603 2535                        00            .byte	0
10604 2536                        00            .byte	0
10605 2537                        00            .byte	0
10606 2538                        00            .byte	0
10607                                           ! 1392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10608 2539                        00            .byte	0
10609 253A                        00            .byte	0
10610 253B                        00            .byte	0
10611 253C                        00            .byte	0
10612 253D                        00            .byte	0
10613 253E                        00            .byte	0
10614 253F                        18            .byte	$18
10615 2540                        18            .byte	$18
10616 2541                        00            .byte	0
10617 2542                        00            .byte	0
10618 2543                        00            .byte	0
10619 2544                        00            .byte	0
10620 2545                        00            .byte	0
10621 2546                        00            .byte	0
10622                                           ! 1393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10623 2547                        00            .byte	0
10624 2548                        00            .byte	0
10625 2549                        00            .byte	0
10626 254A                        00            .byte	0
10627 254B                        00            .byte	0
10628 254C                        00            .byte	0
10629 254D                        00            .byte	0
10630 254E                        18            .byte	$18
10631 254F                        00            .byte	0
10632 2550                        00            .byte	0
10633 2551                        00            .byte	0
10634 2552                        00            .byte	0
10635 2553                        00            .byte	0
10636 2554                        00            .byte	0
10637                                           ! 1394  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10638 2555                        00            .byte	0
10639 2556                        0F            .byte	$F
10640 2557                        0C            .byte	$C
10641 2558                        0C            .byte	$C
10642 2559                        0C            .byte	$C
10643 255A                        0C            .byte	$C
10644 255B                        0C            .byte	$C
10645 255C                        EC            .byte	$EC
10646 255D                        6C            .byte	$6C
10647 255E                        3C            .byte	$3C
10648 255F                        1C            .byte	$1C
10649 2560                        00            .byte	0
10650 2561                        00            .byte	0
10651 2562                        00            .byte	0
10652                                           ! 1395  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10653 2563                        00            .byte	0
10654 2564                        D8            .byte	$D8
10655 2565                        6C            .byte	$6C
10656 2566                        6C            .byte	$6C
10657 2567                        6C            .byte	$6C
10658 2568                        6C            .byte	$6C
10659 2569                        6C            .byte	$6C
10660 256A                        00            .byte	0
10661 256B                        00            .byte	0
10662 256C                        00            .byte	0
10663 256D                        00            .byte	0
10664 256E                        00            .byte	0
10665 256F                        00            .byte	0
10666 2570                        00            .byte	0
10667                                           ! 1396  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10668 2571                        00            .byte	0
10669 2572                        70            .byte	$70
10670 2573                        D8            .byte	$D8
10671 2574                        30            .byte	$30
10672 2575                        60            .byte	$60
10673 2576                        C8            .byte	$C8
10674 2577                        F8            .byte	$F8
10675 2578                        00            .byte	0
10676 2579                        00            .byte	0
10677 257A                        00            .byte	0
10678 257B                        00            .byte	0
10679 257C                        00            .byte	0
10680 257D                        00            .byte	0
10681 257E                        00            .byte	0
10682                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10683 257F                        00            .byte	0
10684 2580                        00            .byte	0
10685 2581                        00            .byte	0
10686 2582                        00            .byte	0
10687 2583                        7C            .byte	$7C
10688 2584                        7C            .byte	$7C
10689 2585                        7C            .byte	$7C
10690 2586                        7C            .byte	$7C
10691 2587                        7C            .byte	$7C
10692 2588                        7C            .byte	$7C
10693 2589                        00            .byte	0
10694 258A                        00            .byte	0
10695 258B                        00            .byte	0
10696 258C                        00            .byte	0
10697                                           ! 1398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10698 258D                        00            .byte	0
10699 258E                        00            .byte	0
10700 258F                        00            .byte	0
10701 2590                        00            .byte	0
10702 2591                        00            .byte	0
10703 2592                        00            .byte	0
10704 2593                        00            .byte	0
10705 2594                        00            .byte	0
10706 2595                        00            .byte	0
10707 2596                        00            .byte	0
10708 2597                        00            .byte	0
10709 2598                        00            .byte	0
10710 2599                        00            .byte	0
10711                                           ! 1399 };
10712 259A                        00            .byte	0
10713                                           !BCC_EOS
10714                                           ! 1400 static Bit8u vgafont16[256*16]=
10715                                           ! 1401 {
10716                       0000259B            _vgafont16:
10717                                           ! 1402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10718 259B                        00            .byte	0
10719 259C                        00            .byte	0
10720 259D                        00            .byte	0
10721 259E                        00            .byte	0
10722 259F                        00            .byte	0
10723 25A0                        00            .byte	0
10724 25A1                        00            .byte	0
10725 25A2                        00            .byte	0
10726 25A3                        00            .byte	0
10727 25A4                        00            .byte	0
10728 25A5                        00            .byte	0
10729 25A6                        00            .byte	0
10730 25A7                        00            .byte	0
10731 25A8                        00            .byte	0
10732 25A9                        00            .byte	0
10733 25AA                        00            .byte	0
10734                                           ! 1403  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10735 25AB                        00            .byte	0
10736 25AC                        00            .byte	0
10737 25AD                        7E            .byte	$7E
10738 25AE                        81            .byte	$81
10739 25AF                        A5            .byte	$A5
10740 25B0                        81            .byte	$81
10741 25B1                        81            .byte	$81
10742 25B2                        BD            .byte	$BD
10743 25B3                        99            .byte	$99
10744 25B4                        81            .byte	$81
10745 25B5                        81            .byte	$81
10746 25B6                        7E            .byte	$7E
10747 25B7                        00            .byte	0
10748 25B8                        00            .byte	0
10749 25B9                        00            .byte	0
10750 25BA                        00            .byte	0
10751                                           ! 1404  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10752 25BB                        00            .byte	0
10753 25BC                        00            .byte	0
10754 25BD                        7E            .byte	$7E
10755 25BE                        FF            .byte	$FF
10756 25BF                        DB            .byte	$DB
10757 25C0                        FF            .byte	$FF
10758 25C1                        FF            .byte	$FF
10759 25C2                        C3            .byte	$C3
10760 25C3                        E7            .byte	$E7
10761 25C4                        FF            .byte	$FF
10762 25C5                        FF            .byte	$FF
10763 25C6                        7E            .byte	$7E
10764 25C7                        00            .byte	0
10765 25C8                        00            .byte	0
10766 25C9                        00            .byte	0
10767 25CA                        00            .byte	0
10768                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10769 25CB                        00            .byte	0
10770 25CC                        00            .byte	0
10771 25CD                        00            .byte	0
10772 25CE                        00            .byte	0
10773 25CF                        6C            .byte	$6C
10774 25D0                        FE            .byte	$FE
10775 25D1                        FE            .byte	$FE
10776 25D2                        FE            .byte	$FE
10777 25D3                        FE            .byte	$FE
10778 25D4                        7C            .byte	$7C
10779 25D5                        38            .byte	$38
10780 25D6                        10            .byte	$10
10781 25D7                        00            .byte	0
10782 25D8                        00            .byte	0
10783 25D9                        00            .byte	0
10784 25DA                        00            .byte	0
10785                                           ! 1406  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10786 25DB                        00            .byte	0
10787 25DC                        00            .byte	0
10788 25DD                        00            .byte	0
10789 25DE                        00            .byte	0
10790 25DF                        10            .byte	$10
10791 25E0                        38            .byte	$38
10792 25E1                        7C            .byte	$7C
10793 25E2                        FE            .byte	$FE
10794 25E3                        7C            .byte	$7C
10795 25E4                        38            .byte	$38
10796 25E5                        10            .byte	$10
10797 25E6                        00            .byte	0
10798 25E7                        00            .byte	0
10799 25E8                        00            .byte	0
10800 25E9                        00            .byte	0
10801 25EA                        00            .byte	0
10802                                           ! 1407  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10803 25EB                        00            .byte	0
10804 25EC                        00            .byte	0
10805 25ED                        00            .byte	0
10806 25EE                        18            .byte	$18
10807 25EF                        3C            .byte	$3C
10808 25F0                        3C            .byte	$3C
10809 25F1                        E7            .byte	$E7
10810 25F2                        E7            .byte	$E7
10811 25F3                        E7            .byte	$E7
10812 25F4                        18            .byte	$18
10813 25F5                        18            .byte	$18
10814 25F6                        3C            .byte	$3C
10815 25F7                        00            .byte	0
10816 25F8                        00            .byte	0
10817 25F9                        00            .byte	0
10818 25FA                        00            .byte	0
10819                                           ! 1408  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10820 25FB                        00            .byte	0
10821 25FC                        00            .byte	0
10822 25FD                        00            .byte	0
10823 25FE                        18            .byte	$18
10824 25FF                        3C            .byte	$3C
10825 2600                        7E            .byte	$7E
10826 2601                        FF            .byte	$FF
10827 2602                        FF            .byte	$FF
10828 2603                        7E            .byte	$7E
10829 2604                        18            .byte	$18
10830 2605                        18            .byte	$18
10831 2606                        3C            .byte	$3C
10832 2607                        00            .byte	0
10833 2608                        00            .byte	0
10834 2609                        00            .byte	0
10835 260A                        00            .byte	0
10836                                           ! 1409  0x00,
10837                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10838 260B                        00            .byte	0
10839 260C                        00            .byte	0
10840 260D                        00            .byte	0
10841 260E                        00            .byte	0
10842 260F                        00            .byte	0
10843 2610                        00            .byte	0
10844 2611                        18            .byte	$18
10845 2612                        3C            .byte	$3C
10846 2613                        3C            .byte	$3C
10847 2614                        18            .byte	$18
10848 2615                        00            .byte	0
10849 2616                        00            .byte	0
10850 2617                        00            .byte	0
10851 2618                        00            .byte	0
10852 2619                        00            .byte	0
10853 261A                        00            .byte	0
10854                                           ! 1410  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10855 261B                        FF            .byte	$FF
10856 261C                        FF            .byte	$FF
10857 261D                        FF            .byte	$FF
10858 261E                        FF            .byte	$FF
10859 261F                        FF            .byte	$FF
10860 2620                        FF            .byte	$FF
10861 2621                        E7            .byte	$E7
10862 2622                        C3            .byte	$C3
10863 2623                        C3            .byte	$C3
10864 2624                        E7            .byte	$E7
10865 2625                        FF            .byte	$FF
10866 2626                        FF            .byte	$FF
10867 2627                        FF            .byte	$FF
10868 2628                        FF            .byte	$FF
10869 2629                        FF            .byte	$FF
10870 262A                        FF            .byte	$FF
10871                                           ! 1411  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10872 262B                        00            .byte	0
10873 262C                        00            .byte	0
10874 262D                        00            .byte	0
10875 262E                        00            .byte	0
10876 262F                        00            .byte	0
10877 2630                        3C            .byte	$3C
10878 2631                        66            .byte	$66
10879 2632                        42            .byte	$42
10880 2633                        42            .byte	$42
10881 2634                        66            .byte	$66
10882 2635                        3C            .byte	$3C
10883 2636                        00            .byte	0
10884 2637                        00            .byte	0
10885 2638                        00            .byte	0
10886 2639                        00            .byte	0
10887 263A                        00            .byte	0
10888                                           ! 1412  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10889 263B                        FF            .byte	$FF
10890 263C                        FF            .byte	$FF
10891 263D                        FF            .byte	$FF
10892 263E                        FF            .byte	$FF
10893 263F                        FF            .byte	$FF
10894 2640                        C3            .byte	$C3
10895 2641                        99            .byte	$99
10896 2642                        BD            .byte	$BD
10897 2643                        BD            .byte	$BD
10898 2644                        99            .byte	$99
10899 2645                        C3            .byte	$C3
10900 2646                        FF            .byte	$FF
10901 2647                        FF            .byte	$FF
10902 2648                        FF            .byte	$FF
10903 2649                        FF            .byte	$FF
10904 264A                        FF            .byte	$FF
10905                                           ! 1413  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10906 264B                        00            .byte	0
10907 264C                        00            .byte	0
10908 264D                        1E            .byte	$1E
10909 264E                        0E            .byte	$E
10910 264F                        1A            .byte	$1A
10911 2650                        32            .byte	$32
10912 2651                        78            .byte	$78
10913 2652                        CC            .byte	$CC
10914 2653                        CC            .byte	$CC
10915 2654                        CC            .byte	$CC
10916 2655                        CC            .byte	$CC
10917 2656                        78            .byte	$78
10918 2657                        00            .byte	0
10919 2658                        00            .byte	0
10920 2659                        00            .byte	0
10921 265A                        00            .byte	0
10922                                           ! 1414  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10923 265B                        00            .byte	0
10924 265C                        00            .byte	0
10925 265D                        3C            .byte	$3C
10926 265E                        66            .byte	$66
10927 265F                        66            .byte	$66
10928 2660                        66            .byte	$66
10929 2661                        66            .byte	$66
10930 2662                        3C            .byte	$3C
10931 2663                        18            .byte	$18
10932 2664                        7E            .byte	$7E
10933 2665                        18            .byte	$18
10934 2666                        18            .byte	$18
10935 2667                        00            .byte	0
10936 2668                        00            .byte	0
10937 2669                        00            .byte	0
10938 266A                        00            .byte	0
10939                                           ! 1415  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10940 266B                        00            .byte	0
10941 266C                        00            .byte	0
10942 266D                        3F            .byte	$3F
10943 266E                        33            .byte	$33
10944 266F                        3F            .byte	$3F
10945 2670                        30            .byte	$30
10946 2671                        30            .byte	$30
10947 2672                        30            .byte	$30
10948 2673                        30            .byte	$30
10949 2674                        70            .byte	$70
10950 2675                        F0            .byte	$F0
10951 2676                        E0            .byte	$E0
10952 2677                        00            .byte	0
10953 2678                        00            .byte	0
10954 2679                        00            .byte	0
10955 267A                        00            .byte	0
10956                                           ! 1416  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10957 267B                        00            .byte	0
10958 267C                        00            .byte	0
10959 267D                        7F            .byte	$7F
10960 267E                        63            .byte	$63
10961 267F                        7F            .byte	$7F
10962 2680                        63            .byte	$63
10963 2681                        63            .byte	$63
10964 2682                        63            .byte	$63
10965 2683                        63            .byte	$63
10966 2684                        67            .byte	$67
10967 2685                        E7            .byte	$E7
10968 2686                        E6            .byte	$E6
10969 2687                        C0            .byte	$C0
10970 2688                        00            .byte	0
10971 2689                        00            .byte	0
10972 268A                        00            .byte	0
10973                                           ! 1417  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10974 268B                        00            .byte	0
10975 268C                        00            .byte	0
10976 268D                        00            .byte	0
10977 268E                        18            .byte	$18
10978 268F                        18            .byte	$18
10979 2690                        DB            .byte	$DB
10980 2691                        3C            .byte	$3C
10981 2692                        E7            .byte	$E7
10982 2693                        3C            .byte	$3C
10983 2694                        DB            .byte	$DB
10984 2695                        18            .byte	$18
10985 2696                        18            .byte	$18
10986 2697                        00            .byte	0
10987 2698                        00            .byte	0
10988 2699                        00            .byte	0
10989 269A                        00            .byte	0
10990                                           ! 1418  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10991 269B                        00            .byte	0
10992 269C                        80            .byte	$80
10993 269D                        C0            .byte	$C0
10994 269E                        E0            .byte	$E0
10995 269F                        F0            .byte	$F0
10996 26A0                        F8            .byte	$F8
10997 26A1                        FE            .byte	$FE
10998 26A2                        F8            .byte	$F8
10999 26A3                        F0            .byte	$F0
11000 26A4                        E0            .byte	$E0
11001 26A5                        C0            .byte	$C0
11002 26A6                        80            .byte	$80
11003 26A7                        00            .byte	0
11004 26A8                        00            .byte	0
11005 26A9                        00            .byte	0
11006 26AA                        00            .byte	0
11007                                           ! 1419  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11008 26AB                        00            .byte	0
11009 26AC                        02            .byte	2
11010 26AD                        06            .byte	6
11011 26AE                        0E            .byte	$E
11012 26AF                        1E            .byte	$1E
11013 26B0                        3E            .byte	$3E
11014 26B1                        FE            .byte	$FE
11015 26B2                        3E            .byte	$3E
11016 26B3                        1E            .byte	$1E
11017 26B4                        0E            .byte	$E
11018 26B5                        06            .byte	6
11019 26B6                        02            .byte	2
11020 26B7                        00            .byte	0
11021 26B8                        00            .byte	0
11022 26B9                        00            .byte	0
11023 26BA                        00            .byte	0
11024                                           ! 1420  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11025 26BB                        00            .byte	0
11026 26BC                        00            .byte	0
11027 26BD                        18            .byte	$18
11028 26BE                        3C            .byte	$3C
11029 26BF                        7E            .byte	$7E
11030 26C0                        18            .byte	$18
11031 26C1                        18            .byte	$18
11032 26C2                        18            .byte	$18
11033 26C3                        7E            .byte	$7E
11034 26C4                        3C            .byte	$3C
11035 26C5                        18            .byte	$18
11036 26C6                        00            .byte	0
11037 26C7                        00            .byte	0
11038 26C8                        00            .byte	0
11039 26C9                        00            .byte	0
11040 26CA                        00            .byte	0
11041                                           ! 1421  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11042 26CB                        00            .byte	0
11043 26CC                        00            .byte	0
11044 26CD                        66            .byte	$66
11045 26CE                        66            .byte	$66
11046 26CF                        66            .byte	$66
11047 26D0                        66            .byte	$66
11048 26D1                        66            .byte	$66
11049 26D2                        66            .byte	$66
11050 26D3                        66            .byte	$66
11051 26D4                        00            .byte	0
11052 26D5                        66            .byte	$66
11053 26D6                        66            .byte	$66
11054 26D7                        00            .byte	0
11055 26D8                        00            .byte	0
11056 26D9                        00            .byte	0
11057 26DA                        00            .byte	0
11058                                           ! 1422  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11059 26DB                        00            .byte	0
11060 26DC                        00            .byte	0
11061 26DD                        7F            .byte	$7F
11062 26DE                        DB            .byte	$DB
11063 26DF                        DB            .byte	$DB
11064 26E0                        DB            .byte	$DB
11065 26E1                        7B            .byte	$7B
11066 26E2                        1B            .byte	$1B
11067 26E3                        1B            .byte	$1B
11068 26E4                        1B            .byte	$1B
11069 26E5                        1B            .byte	$1B
11070 26E6                        1B            .byte	$1B
11071 26E7                        00            .byte	0
11072 26E8                        00            .byte	0
11073 26E9                        00            .byte	0
11074 26EA                        00            .byte	0
11075                                           ! 1423  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11076 26EB                        00            .byte	0
11077 26EC                        7C            .byte	$7C
11078 26ED                        C6            .byte	$C6
11079 26EE                        60            .byte	$60
11080 26EF                        38            .byte	$38
11081 26F0                        6C            .byte	$6C
11082 26F1                        C6            .byte	$C6
11083 26F2                        C6            .byte	$C6
11084 26F3                        6C            .byte	$6C
11085 26F4                        38            .byte	$38
11086 26F5                        0C            .byte	$C
11087 26F6                        C6            .byte	$C6
11088 26F7                        7C            .byte	$7C
11089 26F8                        00            .byte	0
11090 26F9                        00            .byte	0
11091 26FA                        00            .byte	0
11092                                           ! 1424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11093 26FB                        00            .byte	0
11094 26FC                        00            .byte	0
11095 26FD                        00            .byte	0
11096 26FE                        00            .byte	0
11097 26FF                        00            .byte	0
11098 2700                        00            .byte	0
11099 2701                        00            .byte	0
11100 2702                        00            .byte	0
11101 2703                        FE            .byte	$FE
11102 2704                        FE            .byte	$FE
11103 2705                        FE            .byte	$FE
11104 2706                        FE            .byte	$FE
11105 2707                        00            .byte	0
11106 2708                        00            .byte	0
11107 2709                        00            .byte	0
11108 270A                        00            .byte	0
11109                                           ! 1425  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11110 270B                        00            .byte	0
11111 270C                        00            .byte	0
11112 270D                        18            .byte	$18
11113 270E                        3C            .byte	$3C
11114 270F                        7E            .byte	$7E
11115 2710                        18            .byte	$18
11116 2711                        18            .byte	$18
11117 2712                        18            .byte	$18
11118 2713                        7E            .byte	$7E
11119 2714                        3C            .byte	$3C
11120 2715                        18            .byte	$18
11121 2716                        7E            .byte	$7E
11122 2717                        00            .byte	0
11123 2718                        00            .byte	0
11124 2719                        00            .byte	0
11125 271A                        00            .byte	0
11126                                           ! 1426  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11127 271B                        00            .byte	0
11128 271C                        00            .byte	0
11129 271D                        18            .byte	$18
11130 271E                        3C            .byte	$3C
11131 271F                        7E            .byte	$7E
11132 2720                        18            .byte	$18
11133 2721                        18            .byte	$18
11134 2722                        18            .byte	$18
11135 2723                        18            .byte	$18
11136 2724                        18            .byte	$18
11137 2725                        18            .byte	$18
11138 2726                        18            .byte	$18
11139 2727                        00            .byte	0
11140 2728                        00            .byte	0
11141 2729                        00            .byte	0
11142 272A                        00            .byte	0
11143                                           ! 1427  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11144 272B                        00            .byte	0
11145 272C                        00            .byte	0
11146 272D                        18            .byte	$18
11147 272E                        18            .byte	$18
11148 272F                        18            .byte	$18
11149 2730                        18            .byte	$18
11150 2731                        18            .byte	$18
11151 2732                        18            .byte	$18
11152 2733                        18            .byte	$18
11153 2734                        7E            .byte	$7E
11154 2735                        3C            .byte	$3C
11155 2736                        18            .byte	$18
11156 2737                        00            .byte	0
11157 2738                        00            .byte	0
11158 2739                        00            .byte	0
11159 273A                        00            .byte	0
11160                                           ! 1428  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11161 273B                        00            .byte	0
11162 273C                        00            .byte	0
11163 273D                        00            .byte	0
11164 273E                        00            .byte	0
11165 273F                        00            .byte	0
11166 2740                        18            .byte	$18
11167 2741                        0C            .byte	$C
11168 2742                        FE            .byte	$FE
11169 2743                        0C            .byte	$C
11170 2744                        18            .byte	$18
11171 2745                        00            .byte	0
11172 2746                        00            .byte	0
11173 2747                        00            .byte	0
11174 2748                        00            .byte	0
11175 2749                        00            .byte	0
11176 274A                        00            .byte	0
11177                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11178 274B                        00            .byte	0
11179 274C                        00            .byte	0
11180 274D                        00            .byte	0
11181 274E                        00            .byte	0
11182 274F                        00            .byte	0
11183 2750                        30            .byte	$30
11184 2751                        60            .byte	$60
11185 2752                        FE            .byte	$FE
11186 2753                        60            .byte	$60
11187 2754                        30            .byte	$30
11188 2755                        00            .byte	0
11189 2756                        00            .byte	0
11190 2757                        00            .byte	0
11191 2758                        00            .byte	0
11192 2759                        00            .byte	0
11193 275A                        00            .byte	0
11194                                           ! 1430  0x00, 0x00, 0x00
11195 275B                        00            .byte	0
11196 275C                        00            .byte	0
11197                                           ! 1430 , 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11198 275D                        00            .byte	0
11199 275E                        00            .byte	0
11200 275F                        00            .byte	0
11201 2760                        00            .byte	0
11202 2761                        C0            .byte	$C0
11203 2762                        C0            .byte	$C0
11204 2763                        C0            .byte	$C0
11205 2764                        FE            .byte	$FE
11206 2765                        00            .byte	0
11207 2766                        00            .byte	0
11208 2767                        00            .byte	0
11209 2768                        00            .byte	0
11210 2769                        00            .byte	0
11211 276A                        00            .byte	0
11212                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11213 276B                        00            .byte	0
11214 276C                        00            .byte	0
11215 276D                        00            .byte	0
11216 276E                        00            .byte	0
11217 276F                        00            .byte	0
11218 2770                        24            .byte	$24
11219 2771                        66            .byte	$66
11220 2772                        FF            .byte	$FF
11221 2773                        66            .byte	$66
11222 2774                        24            .byte	$24
11223 2775                        00            .byte	0
11224 2776                        00            .byte	0
11225 2777                        00            .byte	0
11226 2778                        00            .byte	0
11227 2779                        00            .byte	0
11228 277A                        00            .byte	0
11229                                           ! 1432  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11230 277B                        00            .byte	0
11231 277C                        00            .byte	0
11232 277D                        00            .byte	0
11233 277E                        00            .byte	0
11234 277F                        10            .byte	$10
11235 2780                        38            .byte	$38
11236 2781                        38            .byte	$38
11237 2782                        7C            .byte	$7C
11238 2783                        7C            .byte	$7C
11239 2784                        FE            .byte	$FE
11240 2785                        FE            .byte	$FE
11241 2786                        00            .byte	0
11242 2787                        00            .byte	0
11243 2788                        00            .byte	0
11244 2789                        00            .byte	0
11245 278A                        00            .byte	0
11246                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11247 278B                        00            .byte	0
11248 278C                        00            .byte	0
11249 278D                        00            .byte	0
11250 278E                        00            .byte	0
11251 278F                        FE            .byte	$FE
11252 2790                        FE            .byte	$FE
11253 2791                        7C            .byte	$7C
11254 2792                        7C            .byte	$7C
11255 2793                        38            .byte	$38
11256 2794                        38            .byte	$38
11257 2795                        10            .byte	$10
11258 2796                        00            .byte	0
11259 2797                        00            .byte	0
11260 2798                        00            .byte	0
11261 2799                        00            .byte	0
11262 279A                        00            .byte	0
11263                                           ! 1434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11264 279B                        00            .byte	0
11265 279C                        00            .byte	0
11266 279D                        00            .byte	0
11267 279E                        00            .byte	0
11268 279F                        00            .byte	0
11269 27A0                        00            .byte	0
11270 27A1                        00            .byte	0
11271 27A2                        00            .byte	0
11272 27A3                        00            .byte	0
11273 27A4                        00            .byte	0
11274 27A5                        00            .byte	0
11275 27A6                        00            .byte	0
11276 27A7                        00            .byte	0
11277 27A8                        00            .byte	0
11278 27A9                        00            .byte	0
11279 27AA                        00            .byte	0
11280                                           ! 1435  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11281 27AB                        00            .byte	0
11282 27AC                        00            .byte	0
11283 27AD                        18            .byte	$18
11284 27AE                        3C            .byte	$3C
11285 27AF                        3C            .byte	$3C
11286 27B0                        3C            .byte	$3C
11287 27B1                        18            .byte	$18
11288 27B2                        18            .byte	$18
11289 27B3                        18            .byte	$18
11290 27B4                        00            .byte	0
11291 27B5                        18            .byte	$18
11292 27B6                        18            .byte	$18
11293 27B7                        00            .byte	0
11294 27B8                        00            .byte	0
11295 27B9                        00            .byte	0
11296 27BA                        00            .byte	0
11297                                           ! 1436  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11298 27BB                        00            .byte	0
11299 27BC                        66            .byte	$66
11300 27BD                        66            .byte	$66
11301 27BE                        66            .byte	$66
11302 27BF                        24            .byte	$24
11303 27C0                        00            .byte	0
11304 27C1                        00            .byte	0
11305 27C2                        00            .byte	0
11306 27C3                        00            .byte	0
11307 27C4                        00            .byte	0
11308 27C5                        00            .byte	0
11309 27C6                        00            .byte	0
11310 27C7                        00            .byte	0
11311 27C8                        00            .byte	0
11312 27C9                        00            .byte	0
11313 27CA                        00            .byte	0
11314                                           ! 1437  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11315 27CB                        00            .byte	0
11316 27CC                        00            .byte	0
11317 27CD                        00            .byte	0
11318 27CE                        6C            .byte	$6C
11319 27CF                        6C            .byte	$6C
11320 27D0                        FE            .byte	$FE
11321 27D1                        6C            .byte	$6C
11322 27D2                        6C            .byte	$6C
11323 27D3                        6C            .byte	$6C
11324 27D4                        FE            .byte	$FE
11325 27D5                        6C            .byte	$6C
11326 27D6                        6C            .byte	$6C
11327 27D7                        00            .byte	0
11328 27D8                        00            .byte	0
11329 27D9                        00            .byte	0
11330 27DA                        00            .byte	0
11331                                           ! 1438  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11332 27DB                        18            .byte	$18
11333 27DC                        18            .byte	$18
11334 27DD                        7C            .byte	$7C
11335 27DE                        C6            .byte	$C6
11336 27DF                        C2            .byte	$C2
11337 27E0                        C0            .byte	$C0
11338 27E1                        7C            .byte	$7C
11339 27E2                        06            .byte	6
11340 27E3                        06            .byte	6
11341 27E4                        86            .byte	$86
11342 27E5                        C6            .byte	$C6
11343 27E6                        7C            .byte	$7C
11344 27E7                        18            .byte	$18
11345 27E8                        18            .byte	$18
11346 27E9                        00            .byte	0
11347 27EA                        00            .byte	0
11348                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11349 27EB                        00            .byte	0
11350 27EC                        00            .byte	0
11351 27ED                        00            .byte	0
11352 27EE                        00            .byte	0
11353 27EF                        C2            .byte	$C2
11354 27F0                        C6            .byte	$C6
11355 27F1                        0C            .byte	$C
11356 27F2                        18            .byte	$18
11357 27F3                        30            .byte	$30
11358 27F4                        60            .byte	$60
11359 27F5                        C6            .byte	$C6
11360 27F6                        86            .byte	$86
11361 27F7                        00            .byte	0
11362 27F8                        00            .byte	0
11363 27F9                        00            .byte	0
11364 27FA                        00            .byte	0
11365                                           ! 1440  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11366 27FB                        00            .byte	0
11367 27FC                        00            .byte	0
11368 27FD                        38            .byte	$38
11369 27FE                        6C            .byte	$6C
11370 27FF                        6C            .byte	$6C
11371 2800                        38            .byte	$38
11372 2801                        76            .byte	$76
11373 2802                        DC            .byte	$DC
11374 2803                        CC            .byte	$CC
11375 2804                        CC            .byte	$CC
11376 2805                        CC            .byte	$CC
11377 2806                        76            .byte	$76
11378 2807                        00            .byte	0
11379 2808                        00            .byte	0
11380 2809                        00            .byte	0
11381 280A                        00            .byte	0
11382                                           ! 1441  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11383 280B                        00            .byte	0
11384 280C                        30            .byte	$30
11385 280D                        30            .byte	$30
11386 280E                        30            .byte	$30
11387 280F                        60            .byte	$60
11388 2810                        00            .byte	0
11389 2811                        00            .byte	0
11390 2812                        00            .byte	0
11391 2813                        00            .byte	0
11392 2814                        00            .byte	0
11393 2815                        00            .byte	0
11394 2816                        00            .byte	0
11395 2817                        00            .byte	0
11396 2818                        00            .byte	0
11397 2819                        00            .byte	0
11398 281A                        00            .byte	0
11399                                           ! 1442  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11400 281B                        00            .byte	0
11401 281C                        00            .byte	0
11402 281D                        0C            .byte	$C
11403 281E                        18            .byte	$18
11404 281F                        30            .byte	$30
11405 2820                        30            .byte	$30
11406 2821                        30            .byte	$30
11407 2822                        30            .byte	$30
11408 2823                        30            .byte	$30
11409 2824                        30            .byte	$30
11410 2825                        18            .byte	$18
11411 2826                        0C            .byte	$C
11412 2827                        00            .byte	0
11413 2828                        00            .byte	0
11414 2829                        00            .byte	0
11415 282A                        00            .byte	0
11416                                           ! 1443  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11417 282B                        00            .byte	0
11418 282C                        00            .byte	0
11419 282D                        30            .byte	$30
11420 282E                        18            .byte	$18
11421 282F                        0C            .byte	$C
11422 2830                        0C            .byte	$C
11423 2831                        0C            .byte	$C
11424 2832                        0C            .byte	$C
11425 2833                        0C            .byte	$C
11426 2834                        0C            .byte	$C
11427 2835                        18            .byte	$18
11428 2836                        30            .byte	$30
11429 2837                        00            .byte	0
11430 2838                        00            .byte	0
11431 2839                        00            .byte	0
11432 283A                        00            .byte	0
11433                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11434 283B                        00            .byte	0
11435 283C                        00            .byte	0
11436 283D                        00            .byte	0
11437 283E                        00            .byte	0
11438 283F                        00            .byte	0
11439 2840                        66            .byte	$66
11440 2841                        3C            .byte	$3C
11441 2842                        FF            .byte	$FF
11442 2843                        3C            .byte	$3C
11443 2844                        66            .byte	$66
11444 2845                        00            .byte	0
11445 2846                        00            .byte	0
11446 2847                        00            .byte	0
11447 2848                        00            .byte	0
11448 2849                        00            .byte	0
11449 284A                        00            .byte	0
11450                                           ! 1445  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11451 284B                        00            .byte	0
11452 284C                        00            .byte	0
11453 284D                        00            .byte	0
11454 284E                        00            .byte	0
11455 284F                        00            .byte	0
11456 2850                        18            .byte	$18
11457 2851                        18            .byte	$18
11458 2852                        7E            .byte	$7E
11459 2853                        18            .byte	$18
11460 2854                        18            .byte	$18
11461 2855                        00            .byte	0
11462 2856                        00            .byte	0
11463 2857                        00            .byte	0
11464 2858                        00            .byte	0
11465 2859                        00            .byte	0
11466 285A                        00            .byte	0
11467                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11468 285B                        00            .byte	0
11469 285C                        00            .byte	0
11470 285D                        00            .byte	0
11471 285E                        00            .byte	0
11472 285F                        00            .byte	0
11473 2860                        00            .byte	0
11474 2861                        00            .byte	0
11475 2862                        00            .byte	0
11476 2863                        00            .byte	0
11477 2864                        18            .byte	$18
11478 2865                        18            .byte	$18
11479 2866                        18            .byte	$18
11480 2867                        30            .byte	$30
11481 2868                        00            .byte	0
11482 2869                        00            .byte	0
11483 286A                        00            .byte	0
11484                                           ! 1447  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11485 286B                        00            .byte	0
11486 286C                        00            .byte	0
11487 286D                        00            .byte	0
11488 286E                        00            .byte	0
11489 286F                        00            .byte	0
11490 2870                        00            .byte	0
11491 2871                        00            .byte	0
11492 2872                        FE            .byte	$FE
11493 2873                        00            .byte	0
11494 2874                        00            .byte	0
11495 2875                        00            .byte	0
11496 2876                        00            .byte	0
11497 2877                        00            .byte	0
11498 2878                        00            .byte	0
11499 2879                        00            .byte	0
11500 287A                        00            .byte	0
11501                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11502 287B                        00            .byte	0
11503 287C                        00            .byte	0
11504 287D                        00            .byte	0
11505 287E                        00            .byte	0
11506 287F                        00            .byte	0
11507 2880                        00            .byte	0
11508 2881                        00            .byte	0
11509 2882                        00            .byte	0
11510 2883                        00            .byte	0
11511 2884                        00            .byte	0
11512 2885                        18            .byte	$18
11513 2886                        18            .byte	$18
11514 2887                        00            .byte	0
11515 2888                        00            .byte	0
11516 2889                        00            .byte	0
11517 288A                        00            .byte	0
11518                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11519 288B                        00            .byte	0
11520 288C                        00            .byte	0
11521 288D                        00            .byte	0
11522 288E                        00            .byte	0
11523 288F                        02            .byte	2
11524 2890                        06            .byte	6
11525 2891                        0C            .byte	$C
11526 2892                        18            .byte	$18
11527 2893                        30            .byte	$30
11528 2894                        60            .byte	$60
11529 2895                        C0            .byte	$C0
11530 2896                        80            .byte	$80
11531 2897                        00            .byte	0
11532 2898                        00            .byte	0
11533 2899                        00            .byte	0
11534 289A                        00            .byte	0
11535                                           ! 1450  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11536 289B                        00            .byte	0
11537 289C                        00            .byte	0
11538 289D                        3C            .byte	$3C
11539 289E                        66            .byte	$66
11540 289F                        C3            .byte	$C3
11541 28A0                        C3            .byte	$C3
11542 28A1                        DB            .byte	$DB
11543 28A2                        DB            .byte	$DB
11544 28A3                        C3            .byte	$C3
11545 28A4                        C3            .byte	$C3
11546 28A5                        66            .byte	$66
11547 28A6                        3C            .byte	$3C
11548 28A7                        00            .byte	0
11549 28A8                        00            .byte	0
11550 28A9                        00            .byte	0
11551 28AA                        00            .byte	0
11552                                           ! 1451  0x00, 0x00, 0x18, 0x38, 0x7
11553 28AB                        00            .byte	0
11554 28AC                        00            .byte	0
11555 28AD                        18            .byte	$18
11556 28AE                        38            .byte	$38
11557                                           ! 1451 8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11558 28AF                        78            .byte	$78
11559 28B0                        18            .byte	$18
11560 28B1                        18            .byte	$18
11561 28B2                        18            .byte	$18
11562 28B3                        18            .byte	$18
11563 28B4                        18            .byte	$18
11564 28B5                        18            .byte	$18
11565 28B6                        7E            .byte	$7E
11566 28B7                        00            .byte	0
11567 28B8                        00            .byte	0
11568 28B9                        00            .byte	0
11569 28BA                        00            .byte	0
11570                                           ! 1452  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11571 28BB                        00            .byte	0
11572 28BC                        00            .byte	0
11573 28BD                        7C            .byte	$7C
11574 28BE                        C6            .byte	$C6
11575 28BF                        06            .byte	6
11576 28C0                        0C            .byte	$C
11577 28C1                        18            .byte	$18
11578 28C2                        30            .byte	$30
11579 28C3                        60            .byte	$60
11580 28C4                        C0            .byte	$C0
11581 28C5                        C6            .byte	$C6
11582 28C6                        FE            .byte	$FE
11583 28C7                        00            .byte	0
11584 28C8                        00            .byte	0
11585 28C9                        00            .byte	0
11586 28CA                        00            .byte	0
11587                                           ! 1453  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11588 28CB                        00            .byte	0
11589 28CC                        00            .byte	0
11590 28CD                        7C            .byte	$7C
11591 28CE                        C6            .byte	$C6
11592 28CF                        06            .byte	6
11593 28D0                        06            .byte	6
11594 28D1                        3C            .byte	$3C
11595 28D2                        06            .byte	6
11596 28D3                        06            .byte	6
11597 28D4                        06            .byte	6
11598 28D5                        C6            .byte	$C6
11599 28D6                        7C            .byte	$7C
11600 28D7                        00            .byte	0
11601 28D8                        00            .byte	0
11602 28D9                        00            .byte	0
11603 28DA                        00            .byte	0
11604                                           ! 1454  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11605 28DB                        00            .byte	0
11606 28DC                        00            .byte	0
11607 28DD                        0C            .byte	$C
11608 28DE                        1C            .byte	$1C
11609 28DF                        3C            .byte	$3C
11610 28E0                        6C            .byte	$6C
11611 28E1                        CC            .byte	$CC
11612 28E2                        FE            .byte	$FE
11613 28E3                        0C            .byte	$C
11614 28E4                        0C            .byte	$C
11615 28E5                        0C            .byte	$C
11616 28E6                        1E            .byte	$1E
11617 28E7                        00            .byte	0
11618 28E8                        00            .byte	0
11619 28E9                        00            .byte	0
11620 28EA                        00            .byte	0
11621                                           ! 1455  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11622 28EB                        00            .byte	0
11623 28EC                        00            .byte	0
11624 28ED                        FE            .byte	$FE
11625 28EE                        C0            .byte	$C0
11626 28EF                        C0            .byte	$C0
11627 28F0                        C0            .byte	$C0
11628 28F1                        FC            .byte	$FC
11629 28F2                        06            .byte	6
11630 28F3                        06            .byte	6
11631 28F4                        06            .byte	6
11632 28F5                        C6            .byte	$C6
11633 28F6                        7C            .byte	$7C
11634 28F7                        00            .byte	0
11635 28F8                        00            .byte	0
11636 28F9                        00            .byte	0
11637 28FA                        00            .byte	0
11638                                           ! 1456  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11639 28FB                        00            .byte	0
11640 28FC                        00            .byte	0
11641 28FD                        38            .byte	$38
11642 28FE                        60            .byte	$60
11643 28FF                        C0            .byte	$C0
11644 2900                        C0            .byte	$C0
11645 2901                        FC            .byte	$FC
11646 2902                        C6            .byte	$C6
11647 2903                        C6            .byte	$C6
11648 2904                        C6            .byte	$C6
11649 2905                        C6            .byte	$C6
11650 2906                        7C            .byte	$7C
11651 2907                        00            .byte	0
11652 2908                        00            .byte	0
11653 2909                        00            .byte	0
11654 290A                        00            .byte	0
11655                                           ! 1457  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11656 290B                        00            .byte	0
11657 290C                        00            .byte	0
11658 290D                        FE            .byte	$FE
11659 290E                        C6            .byte	$C6
11660 290F                        06            .byte	6
11661 2910                        06            .byte	6
11662 2911                        0C            .byte	$C
11663 2912                        18            .byte	$18
11664 2913                        30            .byte	$30
11665 2914                        30            .byte	$30
11666 2915                        30            .byte	$30
11667 2916                        30            .byte	$30
11668 2917                        00            .byte	0
11669 2918                        00            .byte	0
11670 2919                        00            .byte	0
11671 291A                        00            .byte	0
11672                                           ! 1458  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11673 291B                        00            .byte	0
11674 291C                        00            .byte	0
11675 291D                        7C            .byte	$7C
11676 291E                        C6            .byte	$C6
11677 291F                        C6            .byte	$C6
11678 2920                        C6            .byte	$C6
11679 2921                        7C            .byte	$7C
11680 2922                        C6            .byte	$C6
11681 2923                        C6            .byte	$C6
11682 2924                        C6            .byte	$C6
11683 2925                        C6            .byte	$C6
11684 2926                        7C            .byte	$7C
11685 2927                        00            .byte	0
11686 2928                        00            .byte	0
11687 2929                        00            .byte	0
11688 292A                        00            .byte	0
11689                                           ! 1459  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11690 292B                        00            .byte	0
11691 292C                        00            .byte	0
11692 292D                        7C            .byte	$7C
11693 292E                        C6            .byte	$C6
11694 292F                        C6            .byte	$C6
11695 2930                        C6            .byte	$C6
11696 2931                        7E            .byte	$7E
11697 2932                        06            .byte	6
11698 2933                        06            .byte	6
11699 2934                        06            .byte	6
11700 2935                        0C            .byte	$C
11701 2936                        78            .byte	$78
11702 2937                        00            .byte	0
11703 2938                        00            .byte	0
11704 2939                        00            .byte	0
11705 293A                        00            .byte	0
11706                                           ! 1460  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11707 293B                        00            .byte	0
11708 293C                        00            .byte	0
11709 293D                        00            .byte	0
11710 293E                        00            .byte	0
11711 293F                        18            .byte	$18
11712 2940                        18            .byte	$18
11713 2941                        00            .byte	0
11714 2942                        00            .byte	0
11715 2943                        00            .byte	0
11716 2944                        18            .byte	$18
11717 2945                        18            .byte	$18
11718 2946                        00            .byte	0
11719 2947                        00            .byte	0
11720 2948                        00            .byte	0
11721 2949                        00            .byte	0
11722 294A                        00            .byte	0
11723                                           ! 1461  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11724 294B                        00            .byte	0
11725 294C                        00            .byte	0
11726 294D                        00            .byte	0
11727 294E                        00            .byte	0
11728 294F                        18            .byte	$18
11729 2950                        18            .byte	$18
11730 2951                        00            .byte	0
11731 2952                        00            .byte	0
11732 2953                        00            .byte	0
11733 2954                        18            .byte	$18
11734 2955                        18            .byte	$18
11735 2956                        30            .byte	$30
11736 2957                        00            .byte	0
11737 2958                        00            .byte	0
11738 2959                        00            .byte	0
11739 295A                        00            .byte	0
11740                                           ! 1462  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11741 295B                        00            .byte	0
11742 295C                        00            .byte	0
11743 295D                        00            .byte	0
11744 295E                        06            .byte	6
11745 295F                        0C            .byte	$C
11746 2960                        18            .byte	$18
11747 2961                        30            .byte	$30
11748 2962                        60            .byte	$60
11749 2963                        30            .byte	$30
11750 2964                        18            .byte	$18
11751 2965                        0C            .byte	$C
11752 2966                        06            .byte	6
11753 2967                        00            .byte	0
11754 2968                        00            .byte	0
11755 2969                        00            .byte	0
11756 296A                        00            .byte	0
11757                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11758 296B                        00            .byte	0
11759 296C                        00            .byte	0
11760 296D                        00            .byte	0
11761 296E                        00            .byte	0
11762 296F                        00            .byte	0
11763 2970                        7E            .byte	$7E
11764 2971                        00            .byte	0
11765 2972                        00            .byte	0
11766 2973                        7E            .byte	$7E
11767 2974                        00            .byte	0
11768 2975                        00            .byte	0
11769 2976                        00            .byte	0
11770 2977                        00            .byte	0
11771 2978                        00            .byte	0
11772 2979                        00            .byte	0
11773 297A                        00            .byte	0
11774                                           ! 1464  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11775 297B                        00            .byte	0
11776 297C                        00            .byte	0
11777 297D                        00            .byte	0
11778 297E                        60            .byte	$60
11779 297F                        30            .byte	$30
11780 2980                        18            .byte	$18
11781 2981                        0C            .byte	$C
11782 2982                        06            .byte	6
11783 2983                        0C            .byte	$C
11784 2984                        18            .byte	$18
11785 2985                        30            .byte	$30
11786 2986                        60            .byte	$60
11787 2987                        00            .byte	0
11788 2988                        00            .byte	0
11789 2989                        00            .byte	0
11790 298A                        00            .byte	0
11791                                           ! 1465  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11792 298B                        00            .byte	0
11793 298C                        00            .byte	0
11794 298D                        7C            .byte	$7C
11795 298E                        C6            .byte	$C6
11796 298F                        C6            .byte	$C6
11797 2990                        0C            .byte	$C
11798 2991                        18            .byte	$18
11799 2992                        18            .byte	$18
11800 2993                        18            .byte	$18
11801 2994                        00            .byte	0
11802 2995                        18            .byte	$18
11803 2996                        18            .byte	$18
11804 2997                        00            .byte	0
11805 2998                        00            .byte	0
11806 2999                        00            .byte	0
11807 299A                        00            .byte	0
11808                                           ! 1466  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11809 299B                        00            .byte	0
11810 299C                        00            .byte	0
11811 299D                        00            .byte	0
11812 299E                        7C            .byte	$7C
11813 299F                        C6            .byte	$C6
11814 29A0                        C6            .byte	$C6
11815 29A1                        DE            .byte	$DE
11816 29A2                        DE            .byte	$DE
11817 29A3                        DE            .byte	$DE
11818 29A4                        DC            .byte	$DC
11819 29A5                        C0            .byte	$C0
11820 29A6                        7C            .byte	$7C
11821 29A7                        00            .byte	0
11822 29A8                        00            .byte	0
11823 29A9                        00            .byte	0
11824 29AA                        00            .byte	0
11825                                           ! 1467  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11826 29AB                        00            .byte	0
11827 29AC                        00            .byte	0
11828 29AD                        10            .byte	$10
11829 29AE                        38            .byte	$38
11830 29AF                        6C            .byte	$6C
11831 29B0                        C6            .byte	$C6
11832 29B1                        C6            .byte	$C6
11833 29B2                        FE            .byte	$FE
11834 29B3                        C6            .byte	$C6
11835 29B4                        C6            .byte	$C6
11836 29B5                        C6            .byte	$C6
11837 29B6                        C6            .byte	$C6
11838 29B7                        00            .byte	0
11839 29B8                        00            .byte	0
11840 29B9                        00            .byte	0
11841 29BA                        00            .byte	0
11842                                           ! 1468  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11843 29BB                        00            .byte	0
11844 29BC                        00            .byte	0
11845 29BD                        FC            .byte	$FC
11846 29BE                        66            .byte	$66
11847 29BF                        66            .byte	$66
11848 29C0                        66            .byte	$66
11849 29C1                        7C            .byte	$7C
11850 29C2                        66            .byte	$66
11851 29C3                        66            .byte	$66
11852 29C4                        66            .byte	$66
11853 29C5                        66            .byte	$66
11854 29C6                        FC            .byte	$FC
11855 29C7                        00            .byte	0
11856 29C8                        00            .byte	0
11857 29C9                        00            .byte	0
11858 29CA                        00            .byte	0
11859                                           ! 1469  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11860 29CB                        00            .byte	0
11861 29CC                        00            .byte	0
11862 29CD                        3C            .byte	$3C
11863 29CE                        66            .byte	$66
11864 29CF                        C2            .byte	$C2
11865 29D0                        C0            .byte	$C0
11866 29D1                        C0            .byte	$C0
11867 29D2                        C0            .byte	$C0
11868 29D3                        C0            .byte	$C0
11869 29D4                        C2            .byte	$C2
11870 29D5                        66            .byte	$66
11871 29D6                        3C            .byte	$3C
11872 29D7                        00            .byte	0
11873 29D8                        00            .byte	0
11874 29D9                        00            .byte	0
11875 29DA                        00            .byte	0
11876                                           ! 1470  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11877 29DB                        00            .byte	0
11878 29DC                        00            .byte	0
11879 29DD                        F8            .byte	$F8
11880 29DE                        6C            .byte	$6C
11881 29DF                        66            .byte	$66
11882 29E0                        66            .byte	$66
11883 29E1                        66            .byte	$66
11884 29E2                        66            .byte	$66
11885 29E3                        66            .byte	$66
11886 29E4                        66            .byte	$66
11887 29E5                        6C            .byte	$6C
11888 29E6                        F8            .byte	$F8
11889 29E7                        00            .byte	0
11890 29E8                        00            .byte	0
11891 29E9                        00            .byte	0
11892 29EA                        00            .byte	0
11893                                           ! 1471  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11894 29EB                        00            .byte	0
11895 29EC                        00            .byte	0
11896 29ED                        FE            .byte	$FE
11897 29EE                        66            .byte	$66
11898 29EF                        62            .byte	$62
11899 29F0                        68            .byte	$68
11900 29F1                        78            .byte	$78
11901 29F2                        68            .byte	$68
11902 29F3                        60            .byte	$60
11903 29F4                        62            .byte	$62
11904 29F5                        66            .byte	$66
11905 29F6                        FE            .byte	$FE
11906 29F7                        00            .byte	0
11907 29F8                        00            .byte	0
11908 29F9                        00            .byte	0
11909 29FA                        00            .byte	0
11910                                           ! 1472  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x
11911 29FB                        00            .byte	0
11912 29FC                        00            .byte	0
11913 29FD                        FE            .byte	$FE
11914 29FE                        66            .byte	$66
11915 29FF                        62            .byte	$62
11916 2A00                        68            .byte	$68
11917                                           ! 1472 78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11918 2A01                        78            .byte	$78
11919 2A02                        68            .byte	$68
11920 2A03                        60            .byte	$60
11921 2A04                        60            .byte	$60
11922 2A05                        60            .byte	$60
11923 2A06                        F0            .byte	$F0
11924 2A07                        00            .byte	0
11925 2A08                        00            .byte	0
11926 2A09                        00            .byte	0
11927 2A0A                        00            .byte	0
11928                                           ! 1473  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11929 2A0B                        00            .byte	0
11930 2A0C                        00            .byte	0
11931 2A0D                        3C            .byte	$3C
11932 2A0E                        66            .byte	$66
11933 2A0F                        C2            .byte	$C2
11934 2A10                        C0            .byte	$C0
11935 2A11                        C0            .byte	$C0
11936 2A12                        DE            .byte	$DE
11937 2A13                        C6            .byte	$C6
11938 2A14                        C6            .byte	$C6
11939 2A15                        66            .byte	$66
11940 2A16                        3A            .byte	$3A
11941 2A17                        00            .byte	0
11942 2A18                        00            .byte	0
11943 2A19                        00            .byte	0
11944 2A1A                        00            .byte	0
11945                                           ! 1474  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11946 2A1B                        00            .byte	0
11947 2A1C                        00            .byte	0
11948 2A1D                        C6            .byte	$C6
11949 2A1E                        C6            .byte	$C6
11950 2A1F                        C6            .byte	$C6
11951 2A20                        C6            .byte	$C6
11952 2A21                        FE            .byte	$FE
11953 2A22                        C6            .byte	$C6
11954 2A23                        C6            .byte	$C6
11955 2A24                        C6            .byte	$C6
11956 2A25                        C6            .byte	$C6
11957 2A26                        C6            .byte	$C6
11958 2A27                        00            .byte	0
11959 2A28                        00            .byte	0
11960 2A29                        00            .byte	0
11961 2A2A                        00            .byte	0
11962                                           ! 1475  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11963 2A2B                        00            .byte	0
11964 2A2C                        00            .byte	0
11965 2A2D                        3C            .byte	$3C
11966 2A2E                        18            .byte	$18
11967 2A2F                        18            .byte	$18
11968 2A30                        18            .byte	$18
11969 2A31                        18            .byte	$18
11970 2A32                        18            .byte	$18
11971 2A33                        18            .byte	$18
11972 2A34                        18            .byte	$18
11973 2A35                        18            .byte	$18
11974 2A36                        3C            .byte	$3C
11975 2A37                        00            .byte	0
11976 2A38                        00            .byte	0
11977 2A39                        00            .byte	0
11978 2A3A                        00            .byte	0
11979                                           ! 1476  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11980 2A3B                        00            .byte	0
11981 2A3C                        00            .byte	0
11982 2A3D                        1E            .byte	$1E
11983 2A3E                        0C            .byte	$C
11984 2A3F                        0C            .byte	$C
11985 2A40                        0C            .byte	$C
11986 2A41                        0C            .byte	$C
11987 2A42                        0C            .byte	$C
11988 2A43                        CC            .byte	$CC
11989 2A44                        CC            .byte	$CC
11990 2A45                        CC            .byte	$CC
11991 2A46                        78            .byte	$78
11992 2A47                        00            .byte	0
11993 2A48                        00            .byte	0
11994 2A49                        00            .byte	0
11995 2A4A                        00            .byte	0
11996                                           ! 1477  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11997 2A4B                        00            .byte	0
11998 2A4C                        00            .byte	0
11999 2A4D                        E6            .byte	$E6
12000 2A4E                        66            .byte	$66
12001 2A4F                        66            .byte	$66
12002 2A50                        6C            .byte	$6C
12003 2A51                        78            .byte	$78
12004 2A52                        78            .byte	$78
12005 2A53                        6C            .byte	$6C
12006 2A54                        66            .byte	$66
12007 2A55                        66            .byte	$66
12008 2A56                        E6            .byte	$E6
12009 2A57                        00            .byte	0
12010 2A58                        00            .byte	0
12011 2A59                        00            .byte	0
12012 2A5A                        00            .byte	0
12013                                           ! 1478  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12014 2A5B                        00            .byte	0
12015 2A5C                        00            .byte	0
12016 2A5D                        F0            .byte	$F0
12017 2A5E                        60            .byte	$60
12018 2A5F                        60            .byte	$60
12019 2A60                        60            .byte	$60
12020 2A61                        60            .byte	$60
12021 2A62                        60            .byte	$60
12022 2A63                        60            .byte	$60
12023 2A64                        62            .byte	$62
12024 2A65                        66            .byte	$66
12025 2A66                        FE            .byte	$FE
12026 2A67                        00            .byte	0
12027 2A68                        00            .byte	0
12028 2A69                        00            .byte	0
12029 2A6A                        00            .byte	0
12030                                           ! 1479  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12031 2A6B                        00            .byte	0
12032 2A6C                        00            .byte	0
12033 2A6D                        C3            .byte	$C3
12034 2A6E                        E7            .byte	$E7
12035 2A6F                        FF            .byte	$FF
12036 2A70                        FF            .byte	$FF
12037 2A71                        DB            .byte	$DB
12038 2A72                        C3            .byte	$C3
12039 2A73                        C3            .byte	$C3
12040 2A74                        C3            .byte	$C3
12041 2A75                        C3            .byte	$C3
12042 2A76                        C3            .byte	$C3
12043 2A77                        00            .byte	0
12044 2A78                        00            .byte	0
12045 2A79                        00            .byte	0
12046 2A7A                        00            .byte	0
12047                                           ! 1480  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12048 2A7B                        00            .byte	0
12049 2A7C                        00            .byte	0
12050 2A7D                        C6            .byte	$C6
12051 2A7E                        E6            .byte	$E6
12052 2A7F                        F6            .byte	$F6
12053 2A80                        FE            .byte	$FE
12054 2A81                        DE            .byte	$DE
12055 2A82                        CE            .byte	$CE
12056 2A83                        C6            .byte	$C6
12057 2A84                        C6            .byte	$C6
12058 2A85                        C6            .byte	$C6
12059 2A86                        C6            .byte	$C6
12060 2A87                        00            .byte	0
12061 2A88                        00            .byte	0
12062 2A89                        00            .byte	0
12063 2A8A                        00            .byte	0
12064                                           ! 1481  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12065 2A8B                        00            .byte	0
12066 2A8C                        00            .byte	0
12067 2A8D                        7C            .byte	$7C
12068 2A8E                        C6            .byte	$C6
12069 2A8F                        C6            .byte	$C6
12070 2A90                        C6            .byte	$C6
12071 2A91                        C6            .byte	$C6
12072 2A92                        C6            .byte	$C6
12073 2A93                        C6            .byte	$C6
12074 2A94                        C6            .byte	$C6
12075 2A95                        C6            .byte	$C6
12076 2A96                        7C            .byte	$7C
12077 2A97                        00            .byte	0
12078 2A98                        00            .byte	0
12079 2A99                        00            .byte	0
12080 2A9A                        00            .byte	0
12081                                           ! 1482  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12082 2A9B                        00            .byte	0
12083 2A9C                        00            .byte	0
12084 2A9D                        FC            .byte	$FC
12085 2A9E                        66            .byte	$66
12086 2A9F                        66            .byte	$66
12087 2AA0                        66            .byte	$66
12088 2AA1                        7C            .byte	$7C
12089 2AA2                        60            .byte	$60
12090 2AA3                        60            .byte	$60
12091 2AA4                        60            .byte	$60
12092 2AA5                        60            .byte	$60
12093 2AA6                        F0            .byte	$F0
12094 2AA7                        00            .byte	0
12095 2AA8                        00            .byte	0
12096 2AA9                        00            .byte	0
12097 2AAA                        00            .byte	0
12098                                           ! 1483  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12099 2AAB                        00            .byte	0
12100 2AAC                        00            .byte	0
12101 2AAD                        7C            .byte	$7C
12102 2AAE                        C6            .byte	$C6
12103 2AAF                        C6            .byte	$C6
12104 2AB0                        C6            .byte	$C6
12105 2AB1                        C6            .byte	$C6
12106 2AB2                        C6            .byte	$C6
12107 2AB3                        C6            .byte	$C6
12108 2AB4                        D6            .byte	$D6
12109 2AB5                        DE            .byte	$DE
12110 2AB6                        7C            .byte	$7C
12111 2AB7                        0C            .byte	$C
12112 2AB8                        0E            .byte	$E
12113 2AB9                        00            .byte	0
12114 2ABA                        00            .byte	0
12115                                           ! 1484  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12116 2ABB                        00            .byte	0
12117 2ABC                        00            .byte	0
12118 2ABD                        FC            .byte	$FC
12119 2ABE                        66            .byte	$66
12120 2ABF                        66            .byte	$66
12121 2AC0                        66            .byte	$66
12122 2AC1                        7C            .byte	$7C
12123 2AC2                        6C            .byte	$6C
12124 2AC3                        66            .byte	$66
12125 2AC4                        66            .byte	$66
12126 2AC5                        66            .byte	$66
12127 2AC6                        E6            .byte	$E6
12128 2AC7                        00            .byte	0
12129 2AC8                        00            .byte	0
12130 2AC9                        00            .byte	0
12131 2ACA                        00            .byte	0
12132                                           ! 1485  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12133 2ACB                        00            .byte	0
12134 2ACC                        00            .byte	0
12135 2ACD                        7C            .byte	$7C
12136 2ACE                        C6            .byte	$C6
12137 2ACF                        C6            .byte	$C6
12138 2AD0                        60            .byte	$60
12139 2AD1                        38            .byte	$38
12140 2AD2                        0C            .byte	$C
12141 2AD3                        06            .byte	6
12142 2AD4                        C6            .byte	$C6
12143 2AD5                        C6            .byte	$C6
12144 2AD6                        7C            .byte	$7C
12145 2AD7                        00            .byte	0
12146 2AD8                        00            .byte	0
12147 2AD9                        00            .byte	0
12148 2ADA                        00            .byte	0
12149                                           ! 1486  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12150 2ADB                        00            .byte	0
12151 2ADC                        00            .byte	0
12152 2ADD                        FF            .byte	$FF
12153 2ADE                        DB            .byte	$DB
12154 2ADF                        99            .byte	$99
12155 2AE0                        18            .byte	$18
12156 2AE1                        18            .byte	$18
12157 2AE2                        18            .byte	$18
12158 2AE3                        18            .byte	$18
12159 2AE4                        18            .byte	$18
12160 2AE5                        18            .byte	$18
12161 2AE6                        3C            .byte	$3C
12162 2AE7                        00            .byte	0
12163 2AE8                        00            .byte	0
12164 2AE9                        00            .byte	0
12165 2AEA                        00            .byte	0
12166                                           ! 1487  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12167 2AEB                        00            .byte	0
12168 2AEC                        00            .byte	0
12169 2AED                        C6            .byte	$C6
12170 2AEE                        C6            .byte	$C6
12171 2AEF                        C6            .byte	$C6
12172 2AF0                        C6            .byte	$C6
12173 2AF1                        C6            .byte	$C6
12174 2AF2                        C6            .byte	$C6
12175 2AF3                        C6            .byte	$C6
12176 2AF4                        C6            .byte	$C6
12177 2AF5                        C6            .byte	$C6
12178 2AF6                        7C            .byte	$7C
12179 2AF7                        00            .byte	0
12180 2AF8                        00            .byte	0
12181 2AF9                        00            .byte	0
12182 2AFA                        00            .byte	0
12183                                           ! 1488  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12184 2AFB                        00            .byte	0
12185 2AFC                        00            .byte	0
12186 2AFD                        C3            .byte	$C3
12187 2AFE                        C3            .byte	$C3
12188 2AFF                        C3            .byte	$C3
12189 2B00                        C3            .byte	$C3
12190 2B01                        C3            .byte	$C3
12191 2B02                        C3            .byte	$C3
12192 2B03                        C3            .byte	$C3
12193 2B04                        66            .byte	$66
12194 2B05                        3C            .byte	$3C
12195 2B06                        18            .byte	$18
12196 2B07                        00            .byte	0
12197 2B08                        00            .byte	0
12198 2B09                        00            .byte	0
12199 2B0A                        00            .byte	0
12200                                           ! 1489  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12201 2B0B                        00            .byte	0
12202 2B0C                        00            .byte	0
12203 2B0D                        C3            .byte	$C3
12204 2B0E                        C3            .byte	$C3
12205 2B0F                        C3            .byte	$C3
12206 2B10                        C3            .byte	$C3
12207 2B11                        C3            .byte	$C3
12208 2B12                        DB            .byte	$DB
12209 2B13                        DB            .byte	$DB
12210 2B14                        FF            .byte	$FF
12211 2B15                        66            .byte	$66
12212 2B16                        66            .byte	$66
12213 2B17                        00            .byte	0
12214 2B18                        00            .byte	0
12215 2B19                        00            .byte	0
12216 2B1A                        00            .byte	0
12217                                           ! 1490  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12218 2B1B                        00            .byte	0
12219 2B1C                        00            .byte	0
12220 2B1D                        C3            .byte	$C3
12221 2B1E                        C3            .byte	$C3
12222 2B1F                        66            .byte	$66
12223 2B20                        3C            .byte	$3C
12224 2B21                        18            .byte	$18
12225 2B22                        18            .byte	$18
12226 2B23                        3C            .byte	$3C
12227 2B24                        66            .byte	$66
12228 2B25                        C3            .byte	$C3
12229 2B26                        C3            .byte	$C3
12230 2B27                        00            .byte	0
12231 2B28                        00            .byte	0
12232 2B29                        00            .byte	0
12233 2B2A                        00            .byte	0
12234                                           ! 1491  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12235 2B2B                        00            .byte	0
12236 2B2C                        00            .byte	0
12237 2B2D                        C3            .byte	$C3
12238 2B2E                        C3            .byte	$C3
12239 2B2F                        C3            .byte	$C3
12240 2B30                        66            .byte	$66
12241 2B31                        3C            .byte	$3C
12242 2B32                        18            .byte	$18
12243 2B33                        18            .byte	$18
12244 2B34                        18            .byte	$18
12245 2B35                        18            .byte	$18
12246 2B36                        3C            .byte	$3C
12247 2B37                        00            .byte	0
12248 2B38                        00            .byte	0
12249 2B39                        00            .byte	0
12250 2B3A                        00            .byte	0
12251                                           ! 1492  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12252 2B3B                        00            .byte	0
12253 2B3C                        00            .byte	0
12254 2B3D                        FF            .byte	$FF
12255 2B3E                        C3            .byte	$C3
12256 2B3F                        86            .byte	$86
12257 2B40                        0C            .byte	$C
12258 2B41                        18            .byte	$18
12259 2B42                        30            .byte	$30
12260 2B43                        60            .byte	$60
12261 2B44                        C1            .byte	$C1
12262 2B45                        C3            .byte	$C3
12263 2B46                        FF            .byte	$FF
12264 2B47                        00            .byte	0
12265 2B48                        00            .byte	0
12266 2B49                        00            .byte	0
12267 2B4A                        00            .byte	0
12268                                           ! 1493  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0
12269 2B4B                        00            .byte	0
12270 2B4C                        00            .byte	0
12271 2B4D                        3C            .byte	$3C
12272 2B4E                        30            .byte	$30
12273 2B4F                        30            .byte	$30
12274 2B50                        30            .byte	$30
12275 2B51                        30            .byte	$30
12276 2B52                        30            .byte	$30
12277                                           ! 1493 x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12278 2B53                        30            .byte	$30
12279 2B54                        30            .byte	$30
12280 2B55                        30            .byte	$30
12281 2B56                        3C            .byte	$3C
12282 2B57                        00            .byte	0
12283 2B58                        00            .byte	0
12284 2B59                        00            .byte	0
12285 2B5A                        00            .byte	0
12286                                           ! 1494  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12287 2B5B                        00            .byte	0
12288 2B5C                        00            .byte	0
12289 2B5D                        00            .byte	0
12290 2B5E                        80            .byte	$80
12291 2B5F                        C0            .byte	$C0
12292 2B60                        E0            .byte	$E0
12293 2B61                        70            .byte	$70
12294 2B62                        38            .byte	$38
12295 2B63                        1C            .byte	$1C
12296 2B64                        0E            .byte	$E
12297 2B65                        06            .byte	6
12298 2B66                        02            .byte	2
12299 2B67                        00            .byte	0
12300 2B68                        00            .byte	0
12301 2B69                        00            .byte	0
12302 2B6A                        00            .byte	0
12303                                           ! 1495  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12304 2B6B                        00            .byte	0
12305 2B6C                        00            .byte	0
12306 2B6D                        3C            .byte	$3C
12307 2B6E                        0C            .byte	$C
12308 2B6F                        0C            .byte	$C
12309 2B70                        0C            .byte	$C
12310 2B71                        0C            .byte	$C
12311 2B72                        0C            .byte	$C
12312 2B73                        0C            .byte	$C
12313 2B74                        0C            .byte	$C
12314 2B75                        0C            .byte	$C
12315 2B76                        3C            .byte	$3C
12316 2B77                        00            .byte	0
12317 2B78                        00            .byte	0
12318 2B79                        00            .byte	0
12319 2B7A                        00            .byte	0
12320                                           ! 1496  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12321 2B7B                        10            .byte	$10
12322 2B7C                        38            .byte	$38
12323 2B7D                        6C            .byte	$6C
12324 2B7E                        C6            .byte	$C6
12325 2B7F                        00            .byte	0
12326 2B80                        00            .byte	0
12327 2B81                        00            .byte	0
12328 2B82                        00            .byte	0
12329 2B83                        00            .byte	0
12330 2B84                        00            .byte	0
12331 2B85                        00            .byte	0
12332 2B86                        00            .byte	0
12333 2B87                        00            .byte	0
12334 2B88                        00            .byte	0
12335 2B89                        00            .byte	0
12336 2B8A                        00            .byte	0
12337                                           ! 1497  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12338 2B8B                        00            .byte	0
12339 2B8C                        00            .byte	0
12340 2B8D                        00            .byte	0
12341 2B8E                        00            .byte	0
12342 2B8F                        00            .byte	0
12343 2B90                        00            .byte	0
12344 2B91                        00            .byte	0
12345 2B92                        00            .byte	0
12346 2B93                        00            .byte	0
12347 2B94                        00            .byte	0
12348 2B95                        00            .byte	0
12349 2B96                        00            .byte	0
12350 2B97                        00            .byte	0
12351 2B98                        FF            .byte	$FF
12352 2B99                        00            .byte	0
12353 2B9A                        00            .byte	0
12354                                           ! 1498  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12355 2B9B                        30            .byte	$30
12356 2B9C                        30            .byte	$30
12357 2B9D                        18            .byte	$18
12358 2B9E                        00            .byte	0
12359 2B9F                        00            .byte	0
12360 2BA0                        00            .byte	0
12361 2BA1                        00            .byte	0
12362 2BA2                        00            .byte	0
12363 2BA3                        00            .byte	0
12364 2BA4                        00            .byte	0
12365 2BA5                        00            .byte	0
12366 2BA6                        00            .byte	0
12367 2BA7                        00            .byte	0
12368 2BA8                        00            .byte	0
12369 2BA9                        00            .byte	0
12370 2BAA                        00            .byte	0
12371                                           ! 1499  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12372 2BAB                        00            .byte	0
12373 2BAC                        00            .byte	0
12374 2BAD                        00            .byte	0
12375 2BAE                        00            .byte	0
12376 2BAF                        00            .byte	0
12377 2BB0                        78            .byte	$78
12378 2BB1                        0C            .byte	$C
12379 2BB2                        7C            .byte	$7C
12380 2BB3                        CC            .byte	$CC
12381 2BB4                        CC            .byte	$CC
12382 2BB5                        CC            .byte	$CC
12383 2BB6                        76            .byte	$76
12384 2BB7                        00            .byte	0
12385 2BB8                        00            .byte	0
12386 2BB9                        00            .byte	0
12387 2BBA                        00            .byte	0
12388                                           ! 1500  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12389 2BBB                        00            .byte	0
12390 2BBC                        00            .byte	0
12391 2BBD                        E0            .byte	$E0
12392 2BBE                        60            .byte	$60
12393 2BBF                        60            .byte	$60
12394 2BC0                        78            .byte	$78
12395 2BC1                        6C            .byte	$6C
12396 2BC2                        66            .byte	$66
12397 2BC3                        66            .byte	$66
12398 2BC4                        66            .byte	$66
12399 2BC5                        66            .byte	$66
12400 2BC6                        7C            .byte	$7C
12401 2BC7                        00            .byte	0
12402 2BC8                        00            .byte	0
12403 2BC9                        00            .byte	0
12404 2BCA                        00            .byte	0
12405                                           ! 1501  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12406 2BCB                        00            .byte	0
12407 2BCC                        00            .byte	0
12408 2BCD                        00            .byte	0
12409 2BCE                        00            .byte	0
12410 2BCF                        00            .byte	0
12411 2BD0                        7C            .byte	$7C
12412 2BD1                        C6            .byte	$C6
12413 2BD2                        C0            .byte	$C0
12414 2BD3                        C0            .byte	$C0
12415 2BD4                        C0            .byte	$C0
12416 2BD5                        C6            .byte	$C6
12417 2BD6                        7C            .byte	$7C
12418 2BD7                        00            .byte	0
12419 2BD8                        00            .byte	0
12420 2BD9                        00            .byte	0
12421 2BDA                        00            .byte	0
12422                                           ! 1502  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12423 2BDB                        00            .byte	0
12424 2BDC                        00            .byte	0
12425 2BDD                        1C            .byte	$1C
12426 2BDE                        0C            .byte	$C
12427 2BDF                        0C            .byte	$C
12428 2BE0                        3C            .byte	$3C
12429 2BE1                        6C            .byte	$6C
12430 2BE2                        CC            .byte	$CC
12431 2BE3                        CC            .byte	$CC
12432 2BE4                        CC            .byte	$CC
12433 2BE5                        CC            .byte	$CC
12434 2BE6                        76            .byte	$76
12435 2BE7                        00            .byte	0
12436 2BE8                        00            .byte	0
12437 2BE9                        00            .byte	0
12438 2BEA                        00            .byte	0
12439                                           ! 1503  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12440 2BEB                        00            .byte	0
12441 2BEC                        00            .byte	0
12442 2BED                        00            .byte	0
12443 2BEE                        00            .byte	0
12444 2BEF                        00            .byte	0
12445 2BF0                        7C            .byte	$7C
12446 2BF1                        C6            .byte	$C6
12447 2BF2                        FE            .byte	$FE
12448 2BF3                        C0            .byte	$C0
12449 2BF4                        C0            .byte	$C0
12450 2BF5                        C6            .byte	$C6
12451 2BF6                        7C            .byte	$7C
12452 2BF7                        00            .byte	0
12453 2BF8                        00            .byte	0
12454 2BF9                        00            .byte	0
12455 2BFA                        00            .byte	0
12456                                           ! 1504  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12457 2BFB                        00            .byte	0
12458 2BFC                        00            .byte	0
12459 2BFD                        38            .byte	$38
12460 2BFE                        6C            .byte	$6C
12461 2BFF                        64            .byte	$64
12462 2C00                        60            .byte	$60
12463 2C01                        F0            .byte	$F0
12464 2C02                        60            .byte	$60
12465 2C03                        60            .byte	$60
12466 2C04                        60            .byte	$60
12467 2C05                        60            .byte	$60
12468 2C06                        F0            .byte	$F0
12469 2C07                        00            .byte	0
12470 2C08                        00            .byte	0
12471 2C09                        00            .byte	0
12472 2C0A                        00            .byte	0
12473                                           ! 1505  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12474 2C0B                        00            .byte	0
12475 2C0C                        00            .byte	0
12476 2C0D                        00            .byte	0
12477 2C0E                        00            .byte	0
12478 2C0F                        00            .byte	0
12479 2C10                        76            .byte	$76
12480 2C11                        CC            .byte	$CC
12481 2C12                        CC            .byte	$CC
12482 2C13                        CC            .byte	$CC
12483 2C14                        CC            .byte	$CC
12484 2C15                        CC            .byte	$CC
12485 2C16                        7C            .byte	$7C
12486 2C17                        0C            .byte	$C
12487 2C18                        CC            .byte	$CC
12488 2C19                        78            .byte	$78
12489 2C1A                        00            .byte	0
12490                                           ! 1506  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12491 2C1B                        00            .byte	0
12492 2C1C                        00            .byte	0
12493 2C1D                        E0            .byte	$E0
12494 2C1E                        60            .byte	$60
12495 2C1F                        60            .byte	$60
12496 2C20                        6C            .byte	$6C
12497 2C21                        76            .byte	$76
12498 2C22                        66            .byte	$66
12499 2C23                        66            .byte	$66
12500 2C24                        66            .byte	$66
12501 2C25                        66            .byte	$66
12502 2C26                        E6            .byte	$E6
12503 2C27                        00            .byte	0
12504 2C28                        00            .byte	0
12505 2C29                        00            .byte	0
12506 2C2A                        00            .byte	0
12507                                           ! 1507  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12508 2C2B                        00            .byte	0
12509 2C2C                        00            .byte	0
12510 2C2D                        18            .byte	$18
12511 2C2E                        18            .byte	$18
12512 2C2F                        00            .byte	0
12513 2C30                        38            .byte	$38
12514 2C31                        18            .byte	$18
12515 2C32                        18            .byte	$18
12516 2C33                        18            .byte	$18
12517 2C34                        18            .byte	$18
12518 2C35                        18            .byte	$18
12519 2C36                        3C            .byte	$3C
12520 2C37                        00            .byte	0
12521 2C38                        00            .byte	0
12522 2C39                        00            .byte	0
12523 2C3A                        00            .byte	0
12524                                           ! 1508  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12525 2C3B                        00            .byte	0
12526 2C3C                        00            .byte	0
12527 2C3D                        06            .byte	6
12528 2C3E                        06            .byte	6
12529 2C3F                        00            .byte	0
12530 2C40                        0E            .byte	$E
12531 2C41                        06            .byte	6
12532 2C42                        06            .byte	6
12533 2C43                        06            .byte	6
12534 2C44                        06            .byte	6
12535 2C45                        06            .byte	6
12536 2C46                        06            .byte	6
12537 2C47                        66            .byte	$66
12538 2C48                        66            .byte	$66
12539 2C49                        3C            .byte	$3C
12540 2C4A                        00            .byte	0
12541                                           ! 1509  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12542 2C4B                        00            .byte	0
12543 2C4C                        00            .byte	0
12544 2C4D                        E0            .byte	$E0
12545 2C4E                        60            .byte	$60
12546 2C4F                        60            .byte	$60
12547 2C50                        66            .byte	$66
12548 2C51                        6C            .byte	$6C
12549 2C52                        78            .byte	$78
12550 2C53                        78            .byte	$78
12551 2C54                        6C            .byte	$6C
12552 2C55                        66            .byte	$66
12553 2C56                        E6            .byte	$E6
12554 2C57                        00            .byte	0
12555 2C58                        00            .byte	0
12556 2C59                        00            .byte	0
12557 2C5A                        00            .byte	0
12558                                           ! 1510  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12559 2C5B                        00            .byte	0
12560 2C5C                        00            .byte	0
12561 2C5D                        38            .byte	$38
12562 2C5E                        18            .byte	$18
12563 2C5F                        18            .byte	$18
12564 2C60                        18            .byte	$18
12565 2C61                        18            .byte	$18
12566 2C62                        18            .byte	$18
12567 2C63                        18            .byte	$18
12568 2C64                        18            .byte	$18
12569 2C65                        18            .byte	$18
12570 2C66                        3C            .byte	$3C
12571 2C67                        00            .byte	0
12572 2C68                        00            .byte	0
12573 2C69                        00            .byte	0
12574 2C6A                        00            .byte	0
12575                                           ! 1511  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12576 2C6B                        00            .byte	0
12577 2C6C                        00            .byte	0
12578 2C6D                        00            .byte	0
12579 2C6E                        00            .byte	0
12580 2C6F                        00            .byte	0
12581 2C70                        E6            .byte	$E6
12582 2C71                        FF            .byte	$FF
12583 2C72                        DB            .byte	$DB
12584 2C73                        DB            .byte	$DB
12585 2C74                        DB            .byte	$DB
12586 2C75                        DB            .byte	$DB
12587 2C76                        DB            .byte	$DB
12588 2C77                        00            .byte	0
12589 2C78                        00            .byte	0
12590 2C79                        00            .byte	0
12591 2C7A                        00            .byte	0
12592                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12593 2C7B                        00            .byte	0
12594 2C7C                        00            .byte	0
12595 2C7D                        00            .byte	0
12596 2C7E                        00            .byte	0
12597 2C7F                        00            .byte	0
12598 2C80                        DC            .byte	$DC
12599 2C81                        66            .byte	$66
12600 2C82                        66            .byte	$66
12601 2C83                        66            .byte	$66
12602 2C84                        66            .byte	$66
12603 2C85                        66            .byte	$66
12604 2C86                        66            .byte	$66
12605 2C87                        00            .byte	0
12606 2C88                        00            .byte	0
12607 2C89                        00            .byte	0
12608 2C8A                        00            .byte	0
12609                                           ! 1513  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12610 2C8B                        00            .byte	0
12611 2C8C                        00            .byte	0
12612 2C8D                        00            .byte	0
12613 2C8E                        00            .byte	0
12614 2C8F                        00            .byte	0
12615 2C90                        7C            .byte	$7C
12616 2C91                        C6            .byte	$C6
12617 2C92                        C6            .byte	$C6
12618 2C93                        C6            .byte	$C6
12619 2C94                        C6            .byte	$C6
12620 2C95                        C6            .byte	$C6
12621 2C96                        7C            .byte	$7C
12622 2C97                        00            .byte	0
12623 2C98                        00            .byte	0
12624 2C99                        00            .byte	0
12625 2C9A                        00            .byte	0
12626                                           ! 1514  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 
12627 2C9B                        00            .byte	0
12628 2C9C                        00            .byte	0
12629 2C9D                        00            .byte	0
12630 2C9E                        00            .byte	0
12631 2C9F                        00            .byte	0
12632 2CA0                        DC            .byte	$DC
12633 2CA1                        66            .byte	$66
12634 2CA2                        66            .byte	$66
12635 2CA3                        66            .byte	$66
12636 2CA4                        66            .byte	$66
12637                                           ! 1514 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12638 2CA5                        66            .byte	$66
12639 2CA6                        7C            .byte	$7C
12640 2CA7                        60            .byte	$60
12641 2CA8                        60            .byte	$60
12642 2CA9                        F0            .byte	$F0
12643 2CAA                        00            .byte	0
12644                                           ! 1515  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12645 2CAB                        00            .byte	0
12646 2CAC                        00            .byte	0
12647 2CAD                        00            .byte	0
12648 2CAE                        00            .byte	0
12649 2CAF                        00            .byte	0
12650 2CB0                        76            .byte	$76
12651 2CB1                        CC            .byte	$CC
12652 2CB2                        CC            .byte	$CC
12653 2CB3                        CC            .byte	$CC
12654 2CB4                        CC            .byte	$CC
12655 2CB5                        CC            .byte	$CC
12656 2CB6                        7C            .byte	$7C
12657 2CB7                        0C            .byte	$C
12658 2CB8                        0C            .byte	$C
12659 2CB9                        1E            .byte	$1E
12660 2CBA                        00            .byte	0
12661                                           ! 1516  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12662 2CBB                        00            .byte	0
12663 2CBC                        00            .byte	0
12664 2CBD                        00            .byte	0
12665 2CBE                        00            .byte	0
12666 2CBF                        00            .byte	0
12667 2CC0                        DC            .byte	$DC
12668 2CC1                        76            .byte	$76
12669 2CC2                        66            .byte	$66
12670 2CC3                        60            .byte	$60
12671 2CC4                        60            .byte	$60
12672 2CC5                        60            .byte	$60
12673 2CC6                        F0            .byte	$F0
12674 2CC7                        00            .byte	0
12675 2CC8                        00            .byte	0
12676 2CC9                        00            .byte	0
12677 2CCA                        00            .byte	0
12678                                           ! 1517  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12679 2CCB                        00            .byte	0
12680 2CCC                        00            .byte	0
12681 2CCD                        00            .byte	0
12682 2CCE                        00            .byte	0
12683 2CCF                        00            .byte	0
12684 2CD0                        7C            .byte	$7C
12685 2CD1                        C6            .byte	$C6
12686 2CD2                        60            .byte	$60
12687 2CD3                        38            .byte	$38
12688 2CD4                        0C            .byte	$C
12689 2CD5                        C6            .byte	$C6
12690 2CD6                        7C            .byte	$7C
12691 2CD7                        00            .byte	0
12692 2CD8                        00            .byte	0
12693 2CD9                        00            .byte	0
12694 2CDA                        00            .byte	0
12695                                           ! 1518  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12696 2CDB                        00            .byte	0
12697 2CDC                        00            .byte	0
12698 2CDD                        10            .byte	$10
12699 2CDE                        30            .byte	$30
12700 2CDF                        30            .byte	$30
12701 2CE0                        FC            .byte	$FC
12702 2CE1                        30            .byte	$30
12703 2CE2                        30            .byte	$30
12704 2CE3                        30            .byte	$30
12705 2CE4                        30            .byte	$30
12706 2CE5                        36            .byte	$36
12707 2CE6                        1C            .byte	$1C
12708 2CE7                        00            .byte	0
12709 2CE8                        00            .byte	0
12710 2CE9                        00            .byte	0
12711 2CEA                        00            .byte	0
12712                                           ! 1519  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12713 2CEB                        00            .byte	0
12714 2CEC                        00            .byte	0
12715 2CED                        00            .byte	0
12716 2CEE                        00            .byte	0
12717 2CEF                        00            .byte	0
12718 2CF0                        CC            .byte	$CC
12719 2CF1                        CC            .byte	$CC
12720 2CF2                        CC            .byte	$CC
12721 2CF3                        CC            .byte	$CC
12722 2CF4                        CC            .byte	$CC
12723 2CF5                        CC            .byte	$CC
12724 2CF6                        76            .byte	$76
12725 2CF7                        00            .byte	0
12726 2CF8                        00            .byte	0
12727 2CF9                        00            .byte	0
12728 2CFA                        00            .byte	0
12729                                           ! 1520  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12730 2CFB                        00            .byte	0
12731 2CFC                        00            .byte	0
12732 2CFD                        00            .byte	0
12733 2CFE                        00            .byte	0
12734 2CFF                        00            .byte	0
12735 2D00                        C3            .byte	$C3
12736 2D01                        C3            .byte	$C3
12737 2D02                        C3            .byte	$C3
12738 2D03                        C3            .byte	$C3
12739 2D04                        66            .byte	$66
12740 2D05                        3C            .byte	$3C
12741 2D06                        18            .byte	$18
12742 2D07                        00            .byte	0
12743 2D08                        00            .byte	0
12744 2D09                        00            .byte	0
12745 2D0A                        00            .byte	0
12746                                           ! 1521  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12747 2D0B                        00            .byte	0
12748 2D0C                        00            .byte	0
12749 2D0D                        00            .byte	0
12750 2D0E                        00            .byte	0
12751 2D0F                        00            .byte	0
12752 2D10                        C3            .byte	$C3
12753 2D11                        C3            .byte	$C3
12754 2D12                        C3            .byte	$C3
12755 2D13                        DB            .byte	$DB
12756 2D14                        DB            .byte	$DB
12757 2D15                        FF            .byte	$FF
12758 2D16                        66            .byte	$66
12759 2D17                        00            .byte	0
12760 2D18                        00            .byte	0
12761 2D19                        00            .byte	0
12762 2D1A                        00            .byte	0
12763                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12764 2D1B                        00            .byte	0
12765 2D1C                        00            .byte	0
12766 2D1D                        00            .byte	0
12767 2D1E                        00            .byte	0
12768 2D1F                        00            .byte	0
12769 2D20                        C3            .byte	$C3
12770 2D21                        66            .byte	$66
12771 2D22                        3C            .byte	$3C
12772 2D23                        18            .byte	$18
12773 2D24                        3C            .byte	$3C
12774 2D25                        66            .byte	$66
12775 2D26                        C3            .byte	$C3
12776 2D27                        00            .byte	0
12777 2D28                        00            .byte	0
12778 2D29                        00            .byte	0
12779 2D2A                        00            .byte	0
12780                                           ! 1523  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12781 2D2B                        00            .byte	0
12782 2D2C                        00            .byte	0
12783 2D2D                        00            .byte	0
12784 2D2E                        00            .byte	0
12785 2D2F                        00            .byte	0
12786 2D30                        C6            .byte	$C6
12787 2D31                        C6            .byte	$C6
12788 2D32                        C6            .byte	$C6
12789 2D33                        C6            .byte	$C6
12790 2D34                        C6            .byte	$C6
12791 2D35                        C6            .byte	$C6
12792 2D36                        7E            .byte	$7E
12793 2D37                        06            .byte	6
12794 2D38                        0C            .byte	$C
12795 2D39                        F8            .byte	$F8
12796 2D3A                        00            .byte	0
12797                                           ! 1524  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12798 2D3B                        00            .byte	0
12799 2D3C                        00            .byte	0
12800 2D3D                        00            .byte	0
12801 2D3E                        00            .byte	0
12802 2D3F                        00            .byte	0
12803 2D40                        FE            .byte	$FE
12804 2D41                        CC            .byte	$CC
12805 2D42                        18            .byte	$18
12806 2D43                        30            .byte	$30
12807 2D44                        60            .byte	$60
12808 2D45                        C6            .byte	$C6
12809 2D46                        FE            .byte	$FE
12810 2D47                        00            .byte	0
12811 2D48                        00            .byte	0
12812 2D49                        00            .byte	0
12813 2D4A                        00            .byte	0
12814                                           ! 1525  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12815 2D4B                        00            .byte	0
12816 2D4C                        00            .byte	0
12817 2D4D                        0E            .byte	$E
12818 2D4E                        18            .byte	$18
12819 2D4F                        18            .byte	$18
12820 2D50                        18            .byte	$18
12821 2D51                        70            .byte	$70
12822 2D52                        18            .byte	$18
12823 2D53                        18            .byte	$18
12824 2D54                        18            .byte	$18
12825 2D55                        18            .byte	$18
12826 2D56                        0E            .byte	$E
12827 2D57                        00            .byte	0
12828 2D58                        00            .byte	0
12829 2D59                        00            .byte	0
12830 2D5A                        00            .byte	0
12831                                           ! 1526  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12832 2D5B                        00            .byte	0
12833 2D5C                        00            .byte	0
12834 2D5D                        18            .byte	$18
12835 2D5E                        18            .byte	$18
12836 2D5F                        18            .byte	$18
12837 2D60                        18            .byte	$18
12838 2D61                        00            .byte	0
12839 2D62                        18            .byte	$18
12840 2D63                        18            .byte	$18
12841 2D64                        18            .byte	$18
12842 2D65                        18            .byte	$18
12843 2D66                        18            .byte	$18
12844 2D67                        00            .byte	0
12845 2D68                        00            .byte	0
12846 2D69                        00            .byte	0
12847 2D6A                        00            .byte	0
12848                                           ! 1527  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12849 2D6B                        00            .byte	0
12850 2D6C                        00            .byte	0
12851 2D6D                        70            .byte	$70
12852 2D6E                        18            .byte	$18
12853 2D6F                        18            .byte	$18
12854 2D70                        18            .byte	$18
12855 2D71                        0E            .byte	$E
12856 2D72                        18            .byte	$18
12857 2D73                        18            .byte	$18
12858 2D74                        18            .byte	$18
12859 2D75                        18            .byte	$18
12860 2D76                        70            .byte	$70
12861 2D77                        00            .byte	0
12862 2D78                        00            .byte	0
12863 2D79                        00            .byte	0
12864 2D7A                        00            .byte	0
12865                                           ! 1528  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12866 2D7B                        00            .byte	0
12867 2D7C                        00            .byte	0
12868 2D7D                        76            .byte	$76
12869 2D7E                        DC            .byte	$DC
12870 2D7F                        00            .byte	0
12871 2D80                        00            .byte	0
12872 2D81                        00            .byte	0
12873 2D82                        00            .byte	0
12874 2D83                        00            .byte	0
12875 2D84                        00            .byte	0
12876 2D85                        00            .byte	0
12877 2D86                        00            .byte	0
12878 2D87                        00            .byte	0
12879 2D88                        00            .byte	0
12880 2D89                        00            .byte	0
12881 2D8A                        00            .byte	0
12882                                           ! 1529  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12883 2D8B                        00            .byte	0
12884 2D8C                        00            .byte	0
12885 2D8D                        00            .byte	0
12886 2D8E                        00            .byte	0
12887 2D8F                        10            .byte	$10
12888 2D90                        38            .byte	$38
12889 2D91                        6C            .byte	$6C
12890 2D92                        C6            .byte	$C6
12891 2D93                        C6            .byte	$C6
12892 2D94                        C6            .byte	$C6
12893 2D95                        FE            .byte	$FE
12894 2D96                        00            .byte	0
12895 2D97                        00            .byte	0
12896 2D98                        00            .byte	0
12897 2D99                        00            .byte	0
12898 2D9A                        00            .byte	0
12899                                           ! 1530  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12900 2D9B                        00            .byte	0
12901 2D9C                        00            .byte	0
12902 2D9D                        3C            .byte	$3C
12903 2D9E                        66            .byte	$66
12904 2D9F                        C2            .byte	$C2
12905 2DA0                        C0            .byte	$C0
12906 2DA1                        C0            .byte	$C0
12907 2DA2                        C0            .byte	$C0
12908 2DA3                        C2            .byte	$C2
12909 2DA4                        66            .byte	$66
12910 2DA5                        3C            .byte	$3C
12911 2DA6                        0C            .byte	$C
12912 2DA7                        06            .byte	6
12913 2DA8                        7C            .byte	$7C
12914 2DA9                        00            .byte	0
12915 2DAA                        00            .byte	0
12916                                           ! 1531  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12917 2DAB                        00            .byte	0
12918 2DAC                        00            .byte	0
12919 2DAD                        CC            .byte	$CC
12920 2DAE                        00            .byte	0
12921 2DAF                        00            .byte	0
12922 2DB0                        CC            .byte	$CC
12923 2DB1                        CC            .byte	$CC
12924 2DB2                        CC            .byte	$CC
12925 2DB3                        CC            .byte	$CC
12926 2DB4                        CC            .byte	$CC
12927 2DB5                        CC            .byte	$CC
12928 2DB6                        76            .byte	$76
12929 2DB7                        00            .byte	0
12930 2DB8                        00            .byte	0
12931 2DB9                        00            .byte	0
12932 2DBA                        00            .byte	0
12933                                           ! 1532  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12934 2DBB                        00            .byte	0
12935 2DBC                        0C            .byte	$C
12936 2DBD                        18            .byte	$18
12937 2DBE                        30            .byte	$30
12938 2DBF                        00            .byte	0
12939 2DC0                        7C            .byte	$7C
12940 2DC1                        C6            .byte	$C6
12941 2DC2                        FE            .byte	$FE
12942 2DC3                        C0            .byte	$C0
12943 2DC4                        C0            .byte	$C0
12944 2DC5                        C6            .byte	$C6
12945 2DC6                        7C            .byte	$7C
12946 2DC7                        00            .byte	0
12947 2DC8                        00            .byte	0
12948 2DC9                        00            .byte	0
12949 2DCA                        00            .byte	0
12950                                           ! 1533  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12951 2DCB                        00            .byte	0
12952 2DCC                        10            .byte	$10
12953 2DCD                        38            .byte	$38
12954 2DCE                        6C            .byte	$6C
12955 2DCF                        00            .byte	0
12956 2DD0                        78            .byte	$78
12957 2DD1                        0C            .byte	$C
12958 2DD2                        7C            .byte	$7C
12959 2DD3                        CC            .byte	$CC
12960 2DD4                        CC            .byte	$CC
12961 2DD5                        CC            .byte	$CC
12962 2DD6                        76            .byte	$76
12963 2DD7                        00            .byte	0
12964 2DD8                        00            .byte	0
12965 2DD9                        00            .byte	0
12966 2DDA                        00            .byte	0
12967                                           ! 1534  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12968 2DDB                        00            .byte	0
12969 2DDC                        00            .byte	0
12970 2DDD                        CC            .byte	$CC
12971 2DDE                        00            .byte	0
12972 2DDF                        00            .byte	0
12973 2DE0                        78            .byte	$78
12974 2DE1                        0C            .byte	$C
12975 2DE2                        7C            .byte	$7C
12976 2DE3                        CC            .byte	$CC
12977 2DE4                        CC            .byte	$CC
12978 2DE5                        CC            .byte	$CC
12979 2DE6                        76            .byte	$76
12980 2DE7                        00            .byte	0
12981 2DE8                        00            .byte	0
12982 2DE9                        00            .byte	0
12983 2DEA                        00            .byte	0
12984                                           ! 1535  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76,
12985 2DEB                        00            .byte	0
12986 2DEC                        60            .byte	$60
12987 2DED                        30            .byte	$30
12988 2DEE                        18            .byte	$18
12989 2DEF                        00            .byte	0
12990 2DF0                        78            .byte	$78
12991 2DF1                        0C            .byte	$C
12992 2DF2                        7C            .byte	$7C
12993 2DF3                        CC            .byte	$CC
12994 2DF4                        CC            .byte	$CC
12995 2DF5                        CC            .byte	$CC
12996                                           ! 1535  0x00, 0x00, 0x00, 0x00,
12997 2DF6                        76            .byte	$76
12998 2DF7                        00            .byte	0
12999 2DF8                        00            .byte	0
13000 2DF9                        00            .byte	0
13001 2DFA                        00            .byte	0
13002                                           ! 1536  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13003 2DFB                        00            .byte	0
13004 2DFC                        38            .byte	$38
13005 2DFD                        6C            .byte	$6C
13006 2DFE                        38            .byte	$38
13007 2DFF                        00            .byte	0
13008 2E00                        78            .byte	$78
13009 2E01                        0C            .byte	$C
13010 2E02                        7C            .byte	$7C
13011 2E03                        CC            .byte	$CC
13012 2E04                        CC            .byte	$CC
13013 2E05                        CC            .byte	$CC
13014 2E06                        76            .byte	$76
13015 2E07                        00            .byte	0
13016 2E08                        00            .byte	0
13017 2E09                        00            .byte	0
13018 2E0A                        00            .byte	0
13019                                           ! 1537  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
13020 2E0B                        00            .byte	0
13021 2E0C                        00            .byte	0
13022 2E0D                        00            .byte	0
13023 2E0E                        00            .byte	0
13024 2E0F                        3C            .byte	$3C
13025 2E10                        66            .byte	$66
13026 2E11                        60            .byte	$60
13027 2E12                        60            .byte	$60
13028 2E13                        66            .byte	$66
13029 2E14                        3C            .byte	$3C
13030 2E15                        0C            .byte	$C
13031 2E16                        06            .byte	6
13032 2E17                        3C            .byte	$3C
13033 2E18                        00            .byte	0
13034 2E19                        00            .byte	0
13035 2E1A                        00            .byte	0
13036                                           ! 1538  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13037 2E1B                        00            .byte	0
13038 2E1C                        10            .byte	$10
13039 2E1D                        38            .byte	$38
13040 2E1E                        6C            .byte	$6C
13041 2E1F                        00            .byte	0
13042 2E20                        7C            .byte	$7C
13043 2E21                        C6            .byte	$C6
13044 2E22                        FE            .byte	$FE
13045 2E23                        C0            .byte	$C0
13046 2E24                        C0            .byte	$C0
13047 2E25                        C6            .byte	$C6
13048 2E26                        7C            .byte	$7C
13049 2E27                        00            .byte	0
13050 2E28                        00            .byte	0
13051 2E29                        00            .byte	0
13052 2E2A                        00            .byte	0
13053                                           ! 1539  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13054 2E2B                        00            .byte	0
13055 2E2C                        00            .byte	0
13056 2E2D                        C6            .byte	$C6
13057 2E2E                        00            .byte	0
13058 2E2F                        00            .byte	0
13059 2E30                        7C            .byte	$7C
13060 2E31                        C6            .byte	$C6
13061 2E32                        FE            .byte	$FE
13062 2E33                        C0            .byte	$C0
13063 2E34                        C0            .byte	$C0
13064 2E35                        C6            .byte	$C6
13065 2E36                        7C            .byte	$7C
13066 2E37                        00            .byte	0
13067 2E38                        00            .byte	0
13068 2E39                        00            .byte	0
13069 2E3A                        00            .byte	0
13070                                           ! 1540  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13071 2E3B                        00            .byte	0
13072 2E3C                        60            .byte	$60
13073 2E3D                        30            .byte	$30
13074 2E3E                        18            .byte	$18
13075 2E3F                        00            .byte	0
13076 2E40                        7C            .byte	$7C
13077 2E41                        C6            .byte	$C6
13078 2E42                        FE            .byte	$FE
13079 2E43                        C0            .byte	$C0
13080 2E44                        C0            .byte	$C0
13081 2E45                        C6            .byte	$C6
13082 2E46                        7C            .byte	$7C
13083 2E47                        00            .byte	0
13084 2E48                        00            .byte	0
13085 2E49                        00            .byte	0
13086 2E4A                        00            .byte	0
13087                                           ! 1541  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13088 2E4B                        00            .byte	0
13089 2E4C                        00            .byte	0
13090 2E4D                        66            .byte	$66
13091 2E4E                        00            .byte	0
13092 2E4F                        00            .byte	0
13093 2E50                        38            .byte	$38
13094 2E51                        18            .byte	$18
13095 2E52                        18            .byte	$18
13096 2E53                        18            .byte	$18
13097 2E54                        18            .byte	$18
13098 2E55                        18            .byte	$18
13099 2E56                        3C            .byte	$3C
13100 2E57                        00            .byte	0
13101 2E58                        00            .byte	0
13102 2E59                        00            .byte	0
13103 2E5A                        00            .byte	0
13104                                           ! 1542  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13105 2E5B                        00            .byte	0
13106 2E5C                        18            .byte	$18
13107 2E5D                        3C            .byte	$3C
13108 2E5E                        66            .byte	$66
13109 2E5F                        00            .byte	0
13110 2E60                        38            .byte	$38
13111 2E61                        18            .byte	$18
13112 2E62                        18            .byte	$18
13113 2E63                        18            .byte	$18
13114 2E64                        18            .byte	$18
13115 2E65                        18            .byte	$18
13116 2E66                        3C            .byte	$3C
13117 2E67                        00            .byte	0
13118 2E68                        00            .byte	0
13119 2E69                        00            .byte	0
13120 2E6A                        00            .byte	0
13121                                           ! 1543  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13122 2E6B                        00            .byte	0
13123 2E6C                        60            .byte	$60
13124 2E6D                        30            .byte	$30
13125 2E6E                        18            .byte	$18
13126 2E6F                        00            .byte	0
13127 2E70                        38            .byte	$38
13128 2E71                        18            .byte	$18
13129 2E72                        18            .byte	$18
13130 2E73                        18            .byte	$18
13131 2E74                        18            .byte	$18
13132 2E75                        18            .byte	$18
13133 2E76                        3C            .byte	$3C
13134 2E77                        00            .byte	0
13135 2E78                        00            .byte	0
13136 2E79                        00            .byte	0
13137 2E7A                        00            .byte	0
13138                                           ! 1544  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13139 2E7B                        00            .byte	0
13140 2E7C                        C6            .byte	$C6
13141 2E7D                        00            .byte	0
13142 2E7E                        10            .byte	$10
13143 2E7F                        38            .byte	$38
13144 2E80                        6C            .byte	$6C
13145 2E81                        C6            .byte	$C6
13146 2E82                        C6            .byte	$C6
13147 2E83                        FE            .byte	$FE
13148 2E84                        C6            .byte	$C6
13149 2E85                        C6            .byte	$C6
13150 2E86                        C6            .byte	$C6
13151 2E87                        00            .byte	0
13152 2E88                        00            .byte	0
13153 2E89                        00            .byte	0
13154 2E8A                        00            .byte	0
13155                                           ! 1545  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13156 2E8B                        38            .byte	$38
13157 2E8C                        6C            .byte	$6C
13158 2E8D                        38            .byte	$38
13159 2E8E                        00            .byte	0
13160 2E8F                        38            .byte	$38
13161 2E90                        6C            .byte	$6C
13162 2E91                        C6            .byte	$C6
13163 2E92                        C6            .byte	$C6
13164 2E93                        FE            .byte	$FE
13165 2E94                        C6            .byte	$C6
13166 2E95                        C6            .byte	$C6
13167 2E96                        C6            .byte	$C6
13168 2E97                        00            .byte	0
13169 2E98                        00            .byte	0
13170 2E99                        00            .byte	0
13171 2E9A                        00            .byte	0
13172                                           ! 1546  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13173 2E9B                        18            .byte	$18
13174 2E9C                        30            .byte	$30
13175 2E9D                        60            .byte	$60
13176 2E9E                        00            .byte	0
13177 2E9F                        FE            .byte	$FE
13178 2EA0                        66            .byte	$66
13179 2EA1                        60            .byte	$60
13180 2EA2                        7C            .byte	$7C
13181 2EA3                        60            .byte	$60
13182 2EA4                        60            .byte	$60
13183 2EA5                        66            .byte	$66
13184 2EA6                        FE            .byte	$FE
13185 2EA7                        00            .byte	0
13186 2EA8                        00            .byte	0
13187 2EA9                        00            .byte	0
13188 2EAA                        00            .byte	0
13189                                           ! 1547  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13190 2EAB                        00            .byte	0
13191 2EAC                        00            .byte	0
13192 2EAD                        00            .byte	0
13193 2EAE                        00            .byte	0
13194 2EAF                        00            .byte	0
13195 2EB0                        6E            .byte	$6E
13196 2EB1                        3B            .byte	$3B
13197 2EB2                        1B            .byte	$1B
13198 2EB3                        7E            .byte	$7E
13199 2EB4                        D8            .byte	$D8
13200 2EB5                        DC            .byte	$DC
13201 2EB6                        77            .byte	$77
13202 2EB7                        00            .byte	0
13203 2EB8                        00            .byte	0
13204 2EB9                        00            .byte	0
13205 2EBA                        00            .byte	0
13206                                           ! 1548  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13207 2EBB                        00            .byte	0
13208 2EBC                        00            .byte	0
13209 2EBD                        3E            .byte	$3E
13210 2EBE                        6C            .byte	$6C
13211 2EBF                        CC            .byte	$CC
13212 2EC0                        CC            .byte	$CC
13213 2EC1                        FE            .byte	$FE
13214 2EC2                        CC            .byte	$CC
13215 2EC3                        CC            .byte	$CC
13216 2EC4                        CC            .byte	$CC
13217 2EC5                        CC            .byte	$CC
13218 2EC6                        CE            .byte	$CE
13219 2EC7                        00            .byte	0
13220 2EC8                        00            .byte	0
13221 2EC9                        00            .byte	0
13222 2ECA                        00            .byte	0
13223                                           ! 1549  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13224 2ECB                        00            .byte	0
13225 2ECC                        10            .byte	$10
13226 2ECD                        38            .byte	$38
13227 2ECE                        6C            .byte	$6C
13228 2ECF                        00            .byte	0
13229 2ED0                        7C            .byte	$7C
13230 2ED1                        C6            .byte	$C6
13231 2ED2                        C6            .byte	$C6
13232 2ED3                        C6            .byte	$C6
13233 2ED4                        C6            .byte	$C6
13234 2ED5                        C6            .byte	$C6
13235 2ED6                        7C            .byte	$7C
13236 2ED7                        00            .byte	0
13237 2ED8                        00            .byte	0
13238 2ED9                        00            .byte	0
13239 2EDA                        00            .byte	0
13240                                           ! 1550  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13241 2EDB                        00            .byte	0
13242 2EDC                        00            .byte	0
13243 2EDD                        C6            .byte	$C6
13244 2EDE                        00            .byte	0
13245 2EDF                        00            .byte	0
13246 2EE0                        7C            .byte	$7C
13247 2EE1                        C6            .byte	$C6
13248 2EE2                        C6            .byte	$C6
13249 2EE3                        C6            .byte	$C6
13250 2EE4                        C6            .byte	$C6
13251 2EE5                        C6            .byte	$C6
13252 2EE6                        7C            .byte	$7C
13253 2EE7                        00            .byte	0
13254 2EE8                        00            .byte	0
13255 2EE9                        00            .byte	0
13256 2EEA                        00            .byte	0
13257                                           ! 1551  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13258 2EEB                        00            .byte	0
13259 2EEC                        60            .byte	$60
13260 2EED                        30            .byte	$30
13261 2EEE                        18            .byte	$18
13262 2EEF                        00            .byte	0
13263 2EF0                        7C            .byte	$7C
13264 2EF1                        C6            .byte	$C6
13265 2EF2                        C6            .byte	$C6
13266 2EF3                        C6            .byte	$C6
13267 2EF4                        C6            .byte	$C6
13268 2EF5                        C6            .byte	$C6
13269 2EF6                        7C            .byte	$7C
13270 2EF7                        00            .byte	0
13271 2EF8                        00            .byte	0
13272 2EF9                        00            .byte	0
13273 2EFA                        00            .byte	0
13274                                           ! 1552  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13275 2EFB                        00            .byte	0
13276 2EFC                        30            .byte	$30
13277 2EFD                        78            .byte	$78
13278 2EFE                        CC            .byte	$CC
13279 2EFF                        00            .byte	0
13280 2F00                        CC            .byte	$CC
13281 2F01                        CC            .byte	$CC
13282 2F02                        CC            .byte	$CC
13283 2F03                        CC            .byte	$CC
13284 2F04                        CC            .byte	$CC
13285 2F05                        CC            .byte	$CC
13286 2F06                        76            .byte	$76
13287 2F07                        00            .byte	0
13288 2F08                        00            .byte	0
13289 2F09                        00            .byte	0
13290 2F0A                        00            .byte	0
13291                                           ! 1553  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13292 2F0B                        00            .byte	0
13293 2F0C                        60            .byte	$60
13294 2F0D                        30            .byte	$30
13295 2F0E                        18            .byte	$18
13296 2F0F                        00            .byte	0
13297 2F10                        CC            .byte	$CC
13298 2F11                        CC            .byte	$CC
13299 2F12                        CC            .byte	$CC
13300 2F13                        CC            .byte	$CC
13301 2F14                        CC            .byte	$CC
13302 2F15                        CC            .byte	$CC
13303 2F16                        76            .byte	$76
13304 2F17                        00            .byte	0
13305 2F18                        00            .byte	0
13306 2F19                        00            .byte	0
13307 2F1A                        00            .byte	0
13308                                           ! 1554  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13309 2F1B                        00            .byte	0
13310 2F1C                        00            .byte	0
13311 2F1D                        C6            .byte	$C6
13312 2F1E                        00            .byte	0
13313 2F1F                        00            .byte	0
13314 2F20                        C6            .byte	$C6
13315 2F21                        C6            .byte	$C6
13316 2F22                        C6            .byte	$C6
13317 2F23                        C6            .byte	$C6
13318 2F24                        C6            .byte	$C6
13319 2F25                        C6            .byte	$C6
13320 2F26                        7E            .byte	$7E
13321 2F27                        06            .byte	6
13322 2F28                        0C            .byte	$C
13323 2F29                        78            .byte	$78
13324 2F2A                        00            .byte	0
13325                                           ! 1555  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13326 2F2B                        00            .byte	0
13327 2F2C                        C6            .byte	$C6
13328 2F2D                        00            .byte	0
13329 2F2E                        7C            .byte	$7C
13330 2F2F                        C6            .byte	$C6
13331 2F30                        C6            .byte	$C6
13332 2F31                        C6            .byte	$C6
13333 2F32                        C6            .byte	$C6
13334 2F33                        C6            .byte	$C6
13335 2F34                        C6            .byte	$C6
13336 2F35                        C6            .byte	$C6
13337 2F36                        7C            .byte	$7C
13338 2F37                        00            .byte	0
13339 2F38                        00            .byte	0
13340 2F39                        00            .byte	0
13341 2F3A                        00            .byte	0
13342                                           ! 1556  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00
13343 2F3B                        00            .byte	0
13344 2F3C                        C6            .byte	$C6
13345 2F3D                        00            .byte	0
13346 2F3E                        C6            .byte	$C6
13347 2F3F                        C6            .byte	$C6
13348 2F40                        C6            .byte	$C6
13349 2F41                        C6            .byte	$C6
13350 2F42                        C6            .byte	$C6
13351 2F43                        C6            .byte	$C6
13352 2F44                        C6            .byte	$C6
13353 2F45                        C6            .byte	$C6
13354 2F46                        7C            .byte	$7C
13355 2F47                        00            .byte	0
13356                                           ! 1556 , 0x00, 0x00,
13357 2F48                        00            .byte	0
13358 2F49                        00            .byte	0
13359 2F4A                        00            .byte	0
13360                                           ! 1557  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13361 2F4B                        00            .byte	0
13362 2F4C                        18            .byte	$18
13363 2F4D                        18            .byte	$18
13364 2F4E                        7E            .byte	$7E
13365 2F4F                        C3            .byte	$C3
13366 2F50                        C0            .byte	$C0
13367 2F51                        C0            .byte	$C0
13368 2F52                        C0            .byte	$C0
13369 2F53                        C3            .byte	$C3
13370 2F54                        7E            .byte	$7E
13371 2F55                        18            .byte	$18
13372 2F56                        18            .byte	$18
13373 2F57                        00            .byte	0
13374 2F58                        00            .byte	0
13375 2F59                        00            .byte	0
13376 2F5A                        00            .byte	0
13377                                           ! 1558  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13378 2F5B                        00            .byte	0
13379 2F5C                        38            .byte	$38
13380 2F5D                        6C            .byte	$6C
13381 2F5E                        64            .byte	$64
13382 2F5F                        60            .byte	$60
13383 2F60                        F0            .byte	$F0
13384 2F61                        60            .byte	$60
13385 2F62                        60            .byte	$60
13386 2F63                        60            .byte	$60
13387 2F64                        60            .byte	$60
13388 2F65                        E6            .byte	$E6
13389 2F66                        FC            .byte	$FC
13390 2F67                        00            .byte	0
13391 2F68                        00            .byte	0
13392 2F69                        00            .byte	0
13393 2F6A                        00            .byte	0
13394                                           ! 1559  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13395 2F6B                        00            .byte	0
13396 2F6C                        00            .byte	0
13397 2F6D                        C3            .byte	$C3
13398 2F6E                        66            .byte	$66
13399 2F6F                        3C            .byte	$3C
13400 2F70                        18            .byte	$18
13401 2F71                        FF            .byte	$FF
13402 2F72                        18            .byte	$18
13403 2F73                        FF            .byte	$FF
13404 2F74                        18            .byte	$18
13405 2F75                        18            .byte	$18
13406 2F76                        18            .byte	$18
13407 2F77                        00            .byte	0
13408 2F78                        00            .byte	0
13409 2F79                        00            .byte	0
13410 2F7A                        00            .byte	0
13411                                           ! 1560  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13412 2F7B                        00            .byte	0
13413 2F7C                        FC            .byte	$FC
13414 2F7D                        66            .byte	$66
13415 2F7E                        66            .byte	$66
13416 2F7F                        7C            .byte	$7C
13417 2F80                        62            .byte	$62
13418 2F81                        66            .byte	$66
13419 2F82                        6F            .byte	$6F
13420 2F83                        66            .byte	$66
13421 2F84                        66            .byte	$66
13422 2F85                        66            .byte	$66
13423 2F86                        F3            .byte	$F3
13424 2F87                        00            .byte	0
13425 2F88                        00            .byte	0
13426 2F89                        00            .byte	0
13427 2F8A                        00            .byte	0
13428                                           ! 1561  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13429 2F8B                        00            .byte	0
13430 2F8C                        0E            .byte	$E
13431 2F8D                        1B            .byte	$1B
13432 2F8E                        18            .byte	$18
13433 2F8F                        18            .byte	$18
13434 2F90                        18            .byte	$18
13435 2F91                        7E            .byte	$7E
13436 2F92                        18            .byte	$18
13437 2F93                        18            .byte	$18
13438 2F94                        18            .byte	$18
13439 2F95                        18            .byte	$18
13440 2F96                        18            .byte	$18
13441 2F97                        D8            .byte	$D8
13442 2F98                        70            .byte	$70
13443 2F99                        00            .byte	0
13444 2F9A                        00            .byte	0
13445                                           ! 1562  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13446 2F9B                        00            .byte	0
13447 2F9C                        18            .byte	$18
13448 2F9D                        30            .byte	$30
13449 2F9E                        60            .byte	$60
13450 2F9F                        00            .byte	0
13451 2FA0                        78            .byte	$78
13452 2FA1                        0C            .byte	$C
13453 2FA2                        7C            .byte	$7C
13454 2FA3                        CC            .byte	$CC
13455 2FA4                        CC            .byte	$CC
13456 2FA5                        CC            .byte	$CC
13457 2FA6                        76            .byte	$76
13458 2FA7                        00            .byte	0
13459 2FA8                        00            .byte	0
13460 2FA9                        00            .byte	0
13461 2FAA                        00            .byte	0
13462                                           ! 1563  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13463 2FAB                        00            .byte	0
13464 2FAC                        0C            .byte	$C
13465 2FAD                        18            .byte	$18
13466 2FAE                        30            .byte	$30
13467 2FAF                        00            .byte	0
13468 2FB0                        38            .byte	$38
13469 2FB1                        18            .byte	$18
13470 2FB2                        18            .byte	$18
13471 2FB3                        18            .byte	$18
13472 2FB4                        18            .byte	$18
13473 2FB5                        18            .byte	$18
13474 2FB6                        3C            .byte	$3C
13475 2FB7                        00            .byte	0
13476 2FB8                        00            .byte	0
13477 2FB9                        00            .byte	0
13478 2FBA                        00            .byte	0
13479                                           ! 1564  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13480 2FBB                        00            .byte	0
13481 2FBC                        18            .byte	$18
13482 2FBD                        30            .byte	$30
13483 2FBE                        60            .byte	$60
13484 2FBF                        00            .byte	0
13485 2FC0                        7C            .byte	$7C
13486 2FC1                        C6            .byte	$C6
13487 2FC2                        C6            .byte	$C6
13488 2FC3                        C6            .byte	$C6
13489 2FC4                        C6            .byte	$C6
13490 2FC5                        C6            .byte	$C6
13491 2FC6                        7C            .byte	$7C
13492 2FC7                        00            .byte	0
13493 2FC8                        00            .byte	0
13494 2FC9                        00            .byte	0
13495 2FCA                        00            .byte	0
13496                                           ! 1565  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13497 2FCB                        00            .byte	0
13498 2FCC                        18            .byte	$18
13499 2FCD                        30            .byte	$30
13500 2FCE                        60            .byte	$60
13501 2FCF                        00            .byte	0
13502 2FD0                        CC            .byte	$CC
13503 2FD1                        CC            .byte	$CC
13504 2FD2                        CC            .byte	$CC
13505 2FD3                        CC            .byte	$CC
13506 2FD4                        CC            .byte	$CC
13507 2FD5                        CC            .byte	$CC
13508 2FD6                        76            .byte	$76
13509 2FD7                        00            .byte	0
13510 2FD8                        00            .byte	0
13511 2FD9                        00            .byte	0
13512 2FDA                        00            .byte	0
13513                                           ! 1566  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13514 2FDB                        00            .byte	0
13515 2FDC                        00            .byte	0
13516 2FDD                        76            .byte	$76
13517 2FDE                        DC            .byte	$DC
13518 2FDF                        00            .byte	0
13519 2FE0                        DC            .byte	$DC
13520 2FE1                        66            .byte	$66
13521 2FE2                        66            .byte	$66
13522 2FE3                        66            .byte	$66
13523 2FE4                        66            .byte	$66
13524 2FE5                        66            .byte	$66
13525 2FE6                        66            .byte	$66
13526 2FE7                        00            .byte	0
13527 2FE8                        00            .byte	0
13528 2FE9                        00            .byte	0
13529 2FEA                        00            .byte	0
13530                                           ! 1567  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13531 2FEB                        76            .byte	$76
13532 2FEC                        DC            .byte	$DC
13533 2FED                        00            .byte	0
13534 2FEE                        C6            .byte	$C6
13535 2FEF                        E6            .byte	$E6
13536 2FF0                        F6            .byte	$F6
13537 2FF1                        FE            .byte	$FE
13538 2FF2                        DE            .byte	$DE
13539 2FF3                        CE            .byte	$CE
13540 2FF4                        C6            .byte	$C6
13541 2FF5                        C6            .byte	$C6
13542 2FF6                        C6            .byte	$C6
13543 2FF7                        00            .byte	0
13544 2FF8                        00            .byte	0
13545 2FF9                        00            .byte	0
13546 2FFA                        00            .byte	0
13547                                           ! 1568  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13548 2FFB                        00            .byte	0
13549 2FFC                        3C            .byte	$3C
13550 2FFD                        6C            .byte	$6C
13551 2FFE                        6C            .byte	$6C
13552 2FFF                        3E            .byte	$3E
13553 3000                        00            .byte	0
13554 3001                        7E            .byte	$7E
13555 3002                        00            .byte	0
13556 3003                        00            .byte	0
13557 3004                        00            .byte	0
13558 3005                        00            .byte	0
13559 3006                        00            .byte	0
13560 3007                        00            .byte	0
13561 3008                        00            .byte	0
13562 3009                        00            .byte	0
13563 300A                        00            .byte	0
13564                                           ! 1569  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13565 300B                        00            .byte	0
13566 300C                        38            .byte	$38
13567 300D                        6C            .byte	$6C
13568 300E                        6C            .byte	$6C
13569 300F                        38            .byte	$38
13570 3010                        00            .byte	0
13571 3011                        7C            .byte	$7C
13572 3012                        00            .byte	0
13573 3013                        00            .byte	0
13574 3014                        00            .byte	0
13575 3015                        00            .byte	0
13576 3016                        00            .byte	0
13577 3017                        00            .byte	0
13578 3018                        00            .byte	0
13579 3019                        00            .byte	0
13580 301A                        00            .byte	0
13581                                           ! 1570  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13582 301B                        00            .byte	0
13583 301C                        00            .byte	0
13584 301D                        30            .byte	$30
13585 301E                        30            .byte	$30
13586 301F                        00            .byte	0
13587 3020                        30            .byte	$30
13588 3021                        30            .byte	$30
13589 3022                        60            .byte	$60
13590 3023                        C0            .byte	$C0
13591 3024                        C6            .byte	$C6
13592 3025                        C6            .byte	$C6
13593 3026                        7C            .byte	$7C
13594 3027                        00            .byte	0
13595 3028                        00            .byte	0
13596 3029                        00            .byte	0
13597 302A                        00            .byte	0
13598                                           ! 1571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13599 302B                        00            .byte	0
13600 302C                        00            .byte	0
13601 302D                        00            .byte	0
13602 302E                        00            .byte	0
13603 302F                        00            .byte	0
13604 3030                        00            .byte	0
13605 3031                        FE            .byte	$FE
13606 3032                        C0            .byte	$C0
13607 3033                        C0            .byte	$C0
13608 3034                        C0            .byte	$C0
13609 3035                        C0            .byte	$C0
13610 3036                        00            .byte	0
13611 3037                        00            .byte	0
13612 3038                        00            .byte	0
13613 3039                        00            .byte	0
13614 303A                        00            .byte	0
13615                                           ! 1572  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13616 303B                        00            .byte	0
13617 303C                        00            .byte	0
13618 303D                        00            .byte	0
13619 303E                        00            .byte	0
13620 303F                        00            .byte	0
13621 3040                        00            .byte	0
13622 3041                        FE            .byte	$FE
13623 3042                        06            .byte	6
13624 3043                        06            .byte	6
13625 3044                        06            .byte	6
13626 3045                        06            .byte	6
13627 3046                        00            .byte	0
13628 3047                        00            .byte	0
13629 3048                        00            .byte	0
13630 3049                        00            .byte	0
13631 304A                        00            .byte	0
13632                                           ! 1573  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13633 304B                        00            .byte	0
13634 304C                        C0            .byte	$C0
13635 304D                        C0            .byte	$C0
13636 304E                        C2            .byte	$C2
13637 304F                        C6            .byte	$C6
13638 3050                        CC            .byte	$CC
13639 3051                        18            .byte	$18
13640 3052                        30            .byte	$30
13641 3053                        60            .byte	$60
13642 3054                        CE            .byte	$CE
13643 3055                        9B            .byte	$9B
13644 3056                        06            .byte	6
13645 3057                        0C            .byte	$C
13646 3058                        1F            .byte	$1F
13647 3059                        00            .byte	0
13648 305A                        00            .byte	0
13649                                           ! 1574  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13650 305B                        00            .byte	0
13651 305C                        C0            .byte	$C0
13652 305D                        C0            .byte	$C0
13653 305E                        C2            .byte	$C2
13654 305F                        C6            .byte	$C6
13655 3060                        CC            .byte	$CC
13656 3061                        18            .byte	$18
13657 3062                        30            .byte	$30
13658 3063                        66            .byte	$66
13659 3064                        CE            .byte	$CE
13660 3065                        96            .byte	$96
13661 3066                        3E            .byte	$3E
13662 3067                        06            .byte	6
13663 3068                        06            .byte	6
13664 3069                        00            .byte	0
13665 306A                        00            .byte	0
13666                                           ! 1575  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13667 306B                        00            .byte	0
13668 306C                        00            .byte	0
13669 306D                        18            .byte	$18
13670 306E                        18            .byte	$18
13671 306F                        00            .byte	0
13672 3070                        18            .byte	$18
13673 3071                        18            .byte	$18
13674 3072                        18            .byte	$18
13675 3073                        3C            .byte	$3C
13676 3074                        3C            .byte	$3C
13677 3075                        3C            .byte	$3C
13678 3076                        18            .byte	$18
13679 3077                        00            .byte	0
13680 3078                        00            .byte	0
13681 3079                        00            .byte	0
13682 307A                        00            .byte	0
13683                                           ! 1576  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13684 307B                        00            .byte	0
13685 307C                        00            .byte	0
13686 307D                        00            .byte	0
13687 307E                        00            .byte	0
13688 307F                        00            .byte	0
13689 3080                        36            .byte	$36
13690 3081                        6C            .byte	$6C
13691 3082                        D8            .byte	$D8
13692 3083                        6C            .byte	$6C
13693 3084                        36            .byte	$36
13694 3085                        00            .byte	0
13695 3086                        00            .byte	0
13696 3087                        00            .byte	0
13697 3088                        00            .byte	0
13698 3089                        00            .byte	0
13699 308A                        00            .byte	0
13700                                           ! 1577  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
13701 308B                        00            .byte	0
13702 308C                        00            .byte	0
13703 308D                        00            .byte	0
13704 308E                        00            .byte	0
13705 308F                        00            .byte	0
13706 3090                        D8            .byte	$D8
13707 3091                        6C            .byte	$6C
13708 3092                        36            .byte	$36
13709 3093                        6C            .byte	$6C
13710 3094                        D8            .byte	$D8
13711 3095                        00            .byte	0
13712 3096                        00            .byte	0
13713 3097                        00            .byte	0
13714 3098                        00            .byte	0
13715 3099                        00            .byte	0
13716                                           ! 1577 0,
13717 309A                        00            .byte	0
13718                                           ! 1578  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13719 309B                        11            .byte	$11
13720 309C                        44            .byte	$44
13721 309D                        11            .byte	$11
13722 309E                        44            .byte	$44
13723 309F                        11            .byte	$11
13724 30A0                        44            .byte	$44
13725 30A1                        11            .byte	$11
13726 30A2                        44            .byte	$44
13727 30A3                        11            .byte	$11
13728 30A4                        44            .byte	$44
13729 30A5                        11            .byte	$11
13730 30A6                        44            .byte	$44
13731 30A7                        11            .byte	$11
13732 30A8                        44            .byte	$44
13733 30A9                        11            .byte	$11
13734 30AA                        44            .byte	$44
13735                                           ! 1579  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13736 30AB                        55            .byte	$55
13737 30AC                        AA            .byte	$AA
13738 30AD                        55            .byte	$55
13739 30AE                        AA            .byte	$AA
13740 30AF                        55            .byte	$55
13741 30B0                        AA            .byte	$AA
13742 30B1                        55            .byte	$55
13743 30B2                        AA            .byte	$AA
13744 30B3                        55            .byte	$55
13745 30B4                        AA            .byte	$AA
13746 30B5                        55            .byte	$55
13747 30B6                        AA            .byte	$AA
13748 30B7                        55            .byte	$55
13749 30B8                        AA            .byte	$AA
13750 30B9                        55            .byte	$55
13751 30BA                        AA            .byte	$AA
13752                                           ! 1580  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13753 30BB                        DD            .byte	$DD
13754 30BC                        77            .byte	$77
13755 30BD                        DD            .byte	$DD
13756 30BE                        77            .byte	$77
13757 30BF                        DD            .byte	$DD
13758 30C0                        77            .byte	$77
13759 30C1                        DD            .byte	$DD
13760 30C2                        77            .byte	$77
13761 30C3                        DD            .byte	$DD
13762 30C4                        77            .byte	$77
13763 30C5                        DD            .byte	$DD
13764 30C6                        77            .byte	$77
13765 30C7                        DD            .byte	$DD
13766 30C8                        77            .byte	$77
13767 30C9                        DD            .byte	$DD
13768 30CA                        77            .byte	$77
13769                                           ! 1581  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13770 30CB                        18            .byte	$18
13771 30CC                        18            .byte	$18
13772 30CD                        18            .byte	$18
13773 30CE                        18            .byte	$18
13774 30CF                        18            .byte	$18
13775 30D0                        18            .byte	$18
13776 30D1                        18            .byte	$18
13777 30D2                        18            .byte	$18
13778 30D3                        18            .byte	$18
13779 30D4                        18            .byte	$18
13780 30D5                        18            .byte	$18
13781 30D6                        18            .byte	$18
13782 30D7                        18            .byte	$18
13783 30D8                        18            .byte	$18
13784 30D9                        18            .byte	$18
13785 30DA                        18            .byte	$18
13786                                           ! 1582  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13787 30DB                        18            .byte	$18
13788 30DC                        18            .byte	$18
13789 30DD                        18            .byte	$18
13790 30DE                        18            .byte	$18
13791 30DF                        18            .byte	$18
13792 30E0                        18            .byte	$18
13793 30E1                        18            .byte	$18
13794 30E2                        F8            .byte	$F8
13795 30E3                        18            .byte	$18
13796 30E4                        18            .byte	$18
13797 30E5                        18            .byte	$18
13798 30E6                        18            .byte	$18
13799 30E7                        18            .byte	$18
13800 30E8                        18            .byte	$18
13801 30E9                        18            .byte	$18
13802 30EA                        18            .byte	$18
13803                                           ! 1583  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13804 30EB                        18            .byte	$18
13805 30EC                        18            .byte	$18
13806 30ED                        18            .byte	$18
13807 30EE                        18            .byte	$18
13808 30EF                        18            .byte	$18
13809 30F0                        F8            .byte	$F8
13810 30F1                        18            .byte	$18
13811 30F2                        F8            .byte	$F8
13812 30F3                        18            .byte	$18
13813 30F4                        18            .byte	$18
13814 30F5                        18            .byte	$18
13815 30F6                        18            .byte	$18
13816 30F7                        18            .byte	$18
13817 30F8                        18            .byte	$18
13818 30F9                        18            .byte	$18
13819 30FA                        18            .byte	$18
13820                                           ! 1584  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13821 30FB                        36            .byte	$36
13822 30FC                        36            .byte	$36
13823 30FD                        36            .byte	$36
13824 30FE                        36            .byte	$36
13825 30FF                        36            .byte	$36
13826 3100                        36            .byte	$36
13827 3101                        36            .byte	$36
13828 3102                        F6            .byte	$F6
13829 3103                        36            .byte	$36
13830 3104                        36            .byte	$36
13831 3105                        36            .byte	$36
13832 3106                        36            .byte	$36
13833 3107                        36            .byte	$36
13834 3108                        36            .byte	$36
13835 3109                        36            .byte	$36
13836 310A                        36            .byte	$36
13837                                           ! 1585  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13838 310B                        00            .byte	0
13839 310C                        00            .byte	0
13840 310D                        00            .byte	0
13841 310E                        00            .byte	0
13842 310F                        00            .byte	0
13843 3110                        00            .byte	0
13844 3111                        00            .byte	0
13845 3112                        FE            .byte	$FE
13846 3113                        36            .byte	$36
13847 3114                        36            .byte	$36
13848 3115                        36            .byte	$36
13849 3116                        36            .byte	$36
13850 3117                        36            .byte	$36
13851 3118                        36            .byte	$36
13852 3119                        36            .byte	$36
13853 311A                        36            .byte	$36
13854                                           ! 1586  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13855 311B                        00            .byte	0
13856 311C                        00            .byte	0
13857 311D                        00            .byte	0
13858 311E                        00            .byte	0
13859 311F                        00            .byte	0
13860 3120                        F8            .byte	$F8
13861 3121                        18            .byte	$18
13862 3122                        F8            .byte	$F8
13863 3123                        18            .byte	$18
13864 3124                        18            .byte	$18
13865 3125                        18            .byte	$18
13866 3126                        18            .byte	$18
13867 3127                        18            .byte	$18
13868 3128                        18            .byte	$18
13869 3129                        18            .byte	$18
13870 312A                        18            .byte	$18
13871                                           ! 1587  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13872 312B                        36            .byte	$36
13873 312C                        36            .byte	$36
13874 312D                        36            .byte	$36
13875 312E                        36            .byte	$36
13876 312F                        36            .byte	$36
13877 3130                        F6            .byte	$F6
13878 3131                        06            .byte	6
13879 3132                        F6            .byte	$F6
13880 3133                        36            .byte	$36
13881 3134                        36            .byte	$36
13882 3135                        36            .byte	$36
13883 3136                        36            .byte	$36
13884 3137                        36            .byte	$36
13885 3138                        36            .byte	$36
13886 3139                        36            .byte	$36
13887 313A                        36            .byte	$36
13888                                           ! 1588  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13889 313B                        36            .byte	$36
13890 313C                        36            .byte	$36
13891 313D                        36            .byte	$36
13892 313E                        36            .byte	$36
13893 313F                        36            .byte	$36
13894 3140                        36            .byte	$36
13895 3141                        36            .byte	$36
13896 3142                        36            .byte	$36
13897 3143                        36            .byte	$36
13898 3144                        36            .byte	$36
13899 3145                        36            .byte	$36
13900 3146                        36            .byte	$36
13901 3147                        36            .byte	$36
13902 3148                        36            .byte	$36
13903 3149                        36            .byte	$36
13904 314A                        36            .byte	$36
13905                                           ! 1589  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13906 314B                        00            .byte	0
13907 314C                        00            .byte	0
13908 314D                        00            .byte	0
13909 314E                        00            .byte	0
13910 314F                        00            .byte	0
13911 3150                        FE            .byte	$FE
13912 3151                        06            .byte	6
13913 3152                        F6            .byte	$F6
13914 3153                        36            .byte	$36
13915 3154                        36            .byte	$36
13916 3155                        36            .byte	$36
13917 3156                        36            .byte	$36
13918 3157                        36            .byte	$36
13919 3158                        36            .byte	$36
13920 3159                        36            .byte	$36
13921 315A                        36            .byte	$36
13922                                           ! 1590  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13923 315B                        36            .byte	$36
13924 315C                        36            .byte	$36
13925 315D                        36            .byte	$36
13926 315E                        36            .byte	$36
13927 315F                        36            .byte	$36
13928 3160                        F6            .byte	$F6
13929 3161                        06            .byte	6
13930 3162                        FE            .byte	$FE
13931 3163                        00            .byte	0
13932 3164                        00            .byte	0
13933 3165                        00            .byte	0
13934 3166                        00            .byte	0
13935 3167                        00            .byte	0
13936 3168                        00            .byte	0
13937 3169                        00            .byte	0
13938 316A                        00            .byte	0
13939                                           ! 1591  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13940 316B                        36            .byte	$36
13941 316C                        36            .byte	$36
13942 316D                        36            .byte	$36
13943 316E                        36            .byte	$36
13944 316F                        36            .byte	$36
13945 3170                        36            .byte	$36
13946 3171                        36            .byte	$36
13947 3172                        FE            .byte	$FE
13948 3173                        00            .byte	0
13949 3174                        00            .byte	0
13950 3175                        00            .byte	0
13951 3176                        00            .byte	0
13952 3177                        00            .byte	0
13953 3178                        00            .byte	0
13954 3179                        00            .byte	0
13955 317A                        00            .byte	0
13956                                           ! 1592  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13957 317B                        18            .byte	$18
13958 317C                        18            .byte	$18
13959 317D                        18            .byte	$18
13960 317E                        18            .byte	$18
13961 317F                        18            .byte	$18
13962 3180                        F8            .byte	$F8
13963 3181                        18            .byte	$18
13964 3182                        F8            .byte	$F8
13965 3183                        00            .byte	0
13966 3184                        00            .byte	0
13967 3185                        00            .byte	0
13968 3186                        00            .byte	0
13969 3187                        00            .byte	0
13970 3188                        00            .byte	0
13971 3189                        00            .byte	0
13972 318A                        00            .byte	0
13973                                           ! 1593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13974 318B                        00            .byte	0
13975 318C                        00            .byte	0
13976 318D                        00            .byte	0
13977 318E                        00            .byte	0
13978 318F                        00            .byte	0
13979 3190                        00            .byte	0
13980 3191                        00            .byte	0
13981 3192                        F8            .byte	$F8
13982 3193                        18            .byte	$18
13983 3194                        18            .byte	$18
13984 3195                        18            .byte	$18
13985 3196                        18            .byte	$18
13986 3197                        18            .byte	$18
13987 3198                        18            .byte	$18
13988 3199                        18            .byte	$18
13989 319A                        18            .byte	$18
13990                                           ! 1594  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13991 319B                        18            .byte	$18
13992 319C                        18            .byte	$18
13993 319D                        18            .byte	$18
13994 319E                        18            .byte	$18
13995 319F                        18            .byte	$18
13996 31A0                        18            .byte	$18
13997 31A1                        18            .byte	$18
13998 31A2                        1F            .byte	$1F
13999 31A3                        00            .byte	0
14000 31A4                        00            .byte	0
14001 31A5                        00            .byte	0
14002 31A6                        00            .byte	0
14003 31A7                        00            .byte	0
14004 31A8                        00            .byte	0
14005 31A9                        00            .byte	0
14006 31AA                        00            .byte	0
14007                                           ! 1595  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14008 31AB                        18            .byte	$18
14009 31AC                        18            .byte	$18
14010 31AD                        18            .byte	$18
14011 31AE                        18            .byte	$18
14012 31AF                        18            .byte	$18
14013 31B0                        18            .byte	$18
14014 31B1                        18            .byte	$18
14015 31B2                        FF            .byte	$FF
14016 31B3                        00            .byte	0
14017 31B4                        00            .byte	0
14018 31B5                        00            .byte	0
14019 31B6                        00            .byte	0
14020 31B7                        00            .byte	0
14021 31B8                        00            .byte	0
14022 31B9                        00            .byte	0
14023 31BA                        00            .byte	0
14024                                           ! 1596  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14025 31BB                        00            .byte	0
14026 31BC                        00            .byte	0
14027 31BD                        00            .byte	0
14028 31BE                        00            .byte	0
14029 31BF                        00            .byte	0
14030 31C0                        00            .byte	0
14031 31C1                        00            .byte	0
14032 31C2                        FF            .byte	$FF
14033 31C3                        18            .byte	$18
14034 31C4                        18            .byte	$18
14035 31C5                        18            .byte	$18
14036 31C6                        18            .byte	$18
14037 31C7                        18            .byte	$18
14038 31C8                        18            .byte	$18
14039 31C9                        18            .byte	$18
14040 31CA                        18            .byte	$18
14041                                           ! 1597  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14042 31CB                        18            .byte	$18
14043 31CC                        18            .byte	$18
14044 31CD                        18            .byte	$18
14045 31CE                        18            .byte	$18
14046 31CF                        18            .byte	$18
14047 31D0                        18            .byte	$18
14048 31D1                        18            .byte	$18
14049 31D2                        1F            .byte	$1F
14050 31D3                        18            .byte	$18
14051 31D4                        18            .byte	$18
14052 31D5                        18            .byte	$18
14053 31D6                        18            .byte	$18
14054 31D7                        18            .byte	$18
14055 31D8                        18            .byte	$18
14056 31D9                        18            .byte	$18
14057 31DA                        18            .byte	$18
14058                                           ! 1598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14059 31DB                        00            .byte	0
14060 31DC                        00            .byte	0
14061 31DD                        00            .byte	0
14062 31DE                        00            .byte	0
14063 31DF                        00            .byte	0
14064 31E0                        00            .byte	0
14065 31E1                        00            .byte	0
14066 31E2                        FF            .byte	$FF
14067 31E3                        00            .byte	0
14068 31E4                        00            .byte	0
14069 31E5                        00            .byte	0
14070 31E6                        00            .byte	0
14071 31E7                        00            .byte	0
14072 31E8                        00            .byte	0
14073 31E9                        00            .byte	0
14074 31EA                        00            .byte	0
14075                                           ! 1599  0x18, 0
14076 31EB                        18            .byte	$18
14077                                           ! 1599 x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14078 31EC                        18            .byte	$18
14079 31ED                        18            .byte	$18
14080 31EE                        18            .byte	$18
14081 31EF                        18            .byte	$18
14082 31F0                        18            .byte	$18
14083 31F1                        18            .byte	$18
14084 31F2                        FF            .byte	$FF
14085 31F3                        18            .byte	$18
14086 31F4                        18            .byte	$18
14087 31F5                        18            .byte	$18
14088 31F6                        18            .byte	$18
14089 31F7                        18            .byte	$18
14090 31F8                        18            .byte	$18
14091 31F9                        18            .byte	$18
14092 31FA                        18            .byte	$18
14093                                           ! 1600  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14094 31FB                        18            .byte	$18
14095 31FC                        18            .byte	$18
14096 31FD                        18            .byte	$18
14097 31FE                        18            .byte	$18
14098 31FF                        18            .byte	$18
14099 3200                        1F            .byte	$1F
14100 3201                        18            .byte	$18
14101 3202                        1F            .byte	$1F
14102 3203                        18            .byte	$18
14103 3204                        18            .byte	$18
14104 3205                        18            .byte	$18
14105 3206                        18            .byte	$18
14106 3207                        18            .byte	$18
14107 3208                        18            .byte	$18
14108 3209                        18            .byte	$18
14109 320A                        18            .byte	$18
14110                                           ! 1601  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14111 320B                        36            .byte	$36
14112 320C                        36            .byte	$36
14113 320D                        36            .byte	$36
14114 320E                        36            .byte	$36
14115 320F                        36            .byte	$36
14116 3210                        36            .byte	$36
14117 3211                        36            .byte	$36
14118 3212                        37            .byte	$37
14119 3213                        36            .byte	$36
14120 3214                        36            .byte	$36
14121 3215                        36            .byte	$36
14122 3216                        36            .byte	$36
14123 3217                        36            .byte	$36
14124 3218                        36            .byte	$36
14125 3219                        36            .byte	$36
14126 321A                        36            .byte	$36
14127                                           ! 1602  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14128 321B                        36            .byte	$36
14129 321C                        36            .byte	$36
14130 321D                        36            .byte	$36
14131 321E                        36            .byte	$36
14132 321F                        36            .byte	$36
14133 3220                        37            .byte	$37
14134 3221                        30            .byte	$30
14135 3222                        3F            .byte	$3F
14136 3223                        00            .byte	0
14137 3224                        00            .byte	0
14138 3225                        00            .byte	0
14139 3226                        00            .byte	0
14140 3227                        00            .byte	0
14141 3228                        00            .byte	0
14142 3229                        00            .byte	0
14143 322A                        00            .byte	0
14144                                           ! 1603  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14145 322B                        00            .byte	0
14146 322C                        00            .byte	0
14147 322D                        00            .byte	0
14148 322E                        00            .byte	0
14149 322F                        00            .byte	0
14150 3230                        3F            .byte	$3F
14151 3231                        30            .byte	$30
14152 3232                        37            .byte	$37
14153 3233                        36            .byte	$36
14154 3234                        36            .byte	$36
14155 3235                        36            .byte	$36
14156 3236                        36            .byte	$36
14157 3237                        36            .byte	$36
14158 3238                        36            .byte	$36
14159 3239                        36            .byte	$36
14160 323A                        36            .byte	$36
14161                                           ! 1604  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14162 323B                        36            .byte	$36
14163 323C                        36            .byte	$36
14164 323D                        36            .byte	$36
14165 323E                        36            .byte	$36
14166 323F                        36            .byte	$36
14167 3240                        F7            .byte	$F7
14168 3241                        00            .byte	0
14169 3242                        FF            .byte	$FF
14170 3243                        00            .byte	0
14171 3244                        00            .byte	0
14172 3245                        00            .byte	0
14173 3246                        00            .byte	0
14174 3247                        00            .byte	0
14175 3248                        00            .byte	0
14176 3249                        00            .byte	0
14177 324A                        00            .byte	0
14178                                           ! 1605  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14179 324B                        00            .byte	0
14180 324C                        00            .byte	0
14181 324D                        00            .byte	0
14182 324E                        00            .byte	0
14183 324F                        00            .byte	0
14184 3250                        FF            .byte	$FF
14185 3251                        00            .byte	0
14186 3252                        F7            .byte	$F7
14187 3253                        36            .byte	$36
14188 3254                        36            .byte	$36
14189 3255                        36            .byte	$36
14190 3256                        36            .byte	$36
14191 3257                        36            .byte	$36
14192 3258                        36            .byte	$36
14193 3259                        36            .byte	$36
14194 325A                        36            .byte	$36
14195                                           ! 1606  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14196 325B                        36            .byte	$36
14197 325C                        36            .byte	$36
14198 325D                        36            .byte	$36
14199 325E                        36            .byte	$36
14200 325F                        36            .byte	$36
14201 3260                        37            .byte	$37
14202 3261                        30            .byte	$30
14203 3262                        37            .byte	$37
14204 3263                        36            .byte	$36
14205 3264                        36            .byte	$36
14206 3265                        36            .byte	$36
14207 3266                        36            .byte	$36
14208 3267                        36            .byte	$36
14209 3268                        36            .byte	$36
14210 3269                        36            .byte	$36
14211 326A                        36            .byte	$36
14212                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14213 326B                        00            .byte	0
14214 326C                        00            .byte	0
14215 326D                        00            .byte	0
14216 326E                        00            .byte	0
14217 326F                        00            .byte	0
14218 3270                        FF            .byte	$FF
14219 3271                        00            .byte	0
14220 3272                        FF            .byte	$FF
14221 3273                        00            .byte	0
14222 3274                        00            .byte	0
14223 3275                        00            .byte	0
14224 3276                        00            .byte	0
14225 3277                        00            .byte	0
14226 3278                        00            .byte	0
14227 3279                        00            .byte	0
14228 327A                        00            .byte	0
14229                                           ! 1608  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14230 327B                        36            .byte	$36
14231 327C                        36            .byte	$36
14232 327D                        36            .byte	$36
14233 327E                        36            .byte	$36
14234 327F                        36            .byte	$36
14235 3280                        F7            .byte	$F7
14236 3281                        00            .byte	0
14237 3282                        F7            .byte	$F7
14238 3283                        36            .byte	$36
14239 3284                        36            .byte	$36
14240 3285                        36            .byte	$36
14241 3286                        36            .byte	$36
14242 3287                        36            .byte	$36
14243 3288                        36            .byte	$36
14244 3289                        36            .byte	$36
14245 328A                        36            .byte	$36
14246                                           ! 1609  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14247 328B                        18            .byte	$18
14248 328C                        18            .byte	$18
14249 328D                        18            .byte	$18
14250 328E                        18            .byte	$18
14251 328F                        18            .byte	$18
14252 3290                        FF            .byte	$FF
14253 3291                        00            .byte	0
14254 3292                        FF            .byte	$FF
14255 3293                        00            .byte	0
14256 3294                        00            .byte	0
14257 3295                        00            .byte	0
14258 3296                        00            .byte	0
14259 3297                        00            .byte	0
14260 3298                        00            .byte	0
14261 3299                        00            .byte	0
14262 329A                        00            .byte	0
14263                                           ! 1610  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14264 329B                        36            .byte	$36
14265 329C                        36            .byte	$36
14266 329D                        36            .byte	$36
14267 329E                        36            .byte	$36
14268 329F                        36            .byte	$36
14269 32A0                        36            .byte	$36
14270 32A1                        36            .byte	$36
14271 32A2                        FF            .byte	$FF
14272 32A3                        00            .byte	0
14273 32A4                        00            .byte	0
14274 32A5                        00            .byte	0
14275 32A6                        00            .byte	0
14276 32A7                        00            .byte	0
14277 32A8                        00            .byte	0
14278 32A9                        00            .byte	0
14279 32AA                        00            .byte	0
14280                                           ! 1611  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14281 32AB                        00            .byte	0
14282 32AC                        00            .byte	0
14283 32AD                        00            .byte	0
14284 32AE                        00            .byte	0
14285 32AF                        00            .byte	0
14286 32B0                        FF            .byte	$FF
14287 32B1                        00            .byte	0
14288 32B2                        FF            .byte	$FF
14289 32B3                        18            .byte	$18
14290 32B4                        18            .byte	$18
14291 32B5                        18            .byte	$18
14292 32B6                        18            .byte	$18
14293 32B7                        18            .byte	$18
14294 32B8                        18            .byte	$18
14295 32B9                        18            .byte	$18
14296 32BA                        18            .byte	$18
14297                                           ! 1612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14298 32BB                        00            .byte	0
14299 32BC                        00            .byte	0
14300 32BD                        00            .byte	0
14301 32BE                        00            .byte	0
14302 32BF                        00            .byte	0
14303 32C0                        00            .byte	0
14304 32C1                        00            .byte	0
14305 32C2                        FF            .byte	$FF
14306 32C3                        36            .byte	$36
14307 32C4                        36            .byte	$36
14308 32C5                        36            .byte	$36
14309 32C6                        36            .byte	$36
14310 32C7                        36            .byte	$36
14311 32C8                        36            .byte	$36
14312 32C9                        36            .byte	$36
14313 32CA                        36            .byte	$36
14314                                           ! 1613  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14315 32CB                        36            .byte	$36
14316 32CC                        36            .byte	$36
14317 32CD                        36            .byte	$36
14318 32CE                        36            .byte	$36
14319 32CF                        36            .byte	$36
14320 32D0                        36            .byte	$36
14321 32D1                        36            .byte	$36
14322 32D2                        3F            .byte	$3F
14323 32D3                        00            .byte	0
14324 32D4                        00            .byte	0
14325 32D5                        00            .byte	0
14326 32D6                        00            .byte	0
14327 32D7                        00            .byte	0
14328 32D8                        00            .byte	0
14329 32D9                        00            .byte	0
14330 32DA                        00            .byte	0
14331                                           ! 1614  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14332 32DB                        18            .byte	$18
14333 32DC                        18            .byte	$18
14334 32DD                        18            .byte	$18
14335 32DE                        18            .byte	$18
14336 32DF                        18            .byte	$18
14337 32E0                        1F            .byte	$1F
14338 32E1                        18            .byte	$18
14339 32E2                        1F            .byte	$1F
14340 32E3                        00            .byte	0
14341 32E4                        00            .byte	0
14342 32E5                        00            .byte	0
14343 32E6                        00            .byte	0
14344 32E7                        00            .byte	0
14345 32E8                        00            .byte	0
14346 32E9                        00            .byte	0
14347 32EA                        00            .byte	0
14348                                           ! 1615  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14349 32EB                        00            .byte	0
14350 32EC                        00            .byte	0
14351 32ED                        00            .byte	0
14352 32EE                        00            .byte	0
14353 32EF                        00            .byte	0
14354 32F0                        1F            .byte	$1F
14355 32F1                        18            .byte	$18
14356 32F2                        1F            .byte	$1F
14357 32F3                        18            .byte	$18
14358 32F4                        18            .byte	$18
14359 32F5                        18            .byte	$18
14360 32F6                        18            .byte	$18
14361 32F7                        18            .byte	$18
14362 32F8                        18            .byte	$18
14363 32F9                        18            .byte	$18
14364 32FA                        18            .byte	$18
14365                                           ! 1616  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14366 32FB                        00            .byte	0
14367 32FC                        00            .byte	0
14368 32FD                        00            .byte	0
14369 32FE                        00            .byte	0
14370 32FF                        00            .byte	0
14371 3300                        00            .byte	0
14372 3301                        00            .byte	0
14373 3302                        3F            .byte	$3F
14374 3303                        36            .byte	$36
14375 3304                        36            .byte	$36
14376 3305                        36            .byte	$36
14377 3306                        36            .byte	$36
14378 3307                        36            .byte	$36
14379 3308                        36            .byte	$36
14380 3309                        36            .byte	$36
14381 330A                        36            .byte	$36
14382                                           ! 1617  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14383 330B                        36            .byte	$36
14384 330C                        36            .byte	$36
14385 330D                        36            .byte	$36
14386 330E                        36            .byte	$36
14387 330F                        36            .byte	$36
14388 3310                        36            .byte	$36
14389 3311                        36            .byte	$36
14390 3312                        FF            .byte	$FF
14391 3313                        36            .byte	$36
14392 3314                        36            .byte	$36
14393 3315                        36            .byte	$36
14394 3316                        36            .byte	$36
14395 3317                        36            .byte	$36
14396 3318                        36            .byte	$36
14397 3319                        36            .byte	$36
14398 331A                        36            .byte	$36
14399                                           ! 1618  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14400 331B                        18            .byte	$18
14401 331C                        18            .byte	$18
14402 331D                        18            .byte	$18
14403 331E                        18            .byte	$18
14404 331F                        18            .byte	$18
14405 3320                        FF            .byte	$FF
14406 3321                        18            .byte	$18
14407 3322                        FF            .byte	$FF
14408 3323                        18            .byte	$18
14409 3324                        18            .byte	$18
14410 3325                        18            .byte	$18
14411 3326                        18            .byte	$18
14412 3327                        18            .byte	$18
14413 3328                        18            .byte	$18
14414 3329                        18            .byte	$18
14415 332A                        18            .byte	$18
14416                                           ! 1619  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14417 332B                        18            .byte	$18
14418 332C                        18            .byte	$18
14419 332D                        18            .byte	$18
14420 332E                        18            .byte	$18
14421 332F                        18            .byte	$18
14422 3330                        18            .byte	$18
14423 3331                        18            .byte	$18
14424 3332                        F8            .byte	$F8
14425 3333                        00            .byte	0
14426 3334                        00            .byte	0
14427 3335                        00            .byte	0
14428 3336                        00            .byte	0
14429 3337                        00            .byte	0
14430 3338                        00            .byte	0
14431 3339                        00            .byte	0
14432 333A                        00            .byte	0
14433                                           ! 1620  0x00, 0x00, 0x00, 
14434 333B                        00            .byte	0
14435 333C                        00            .byte	0
14436 333D                        00            .byte	0
14437                                           ! 1620 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14438 333E                        00            .byte	0
14439 333F                        00            .byte	0
14440 3340                        00            .byte	0
14441 3341                        00            .byte	0
14442 3342                        1F            .byte	$1F
14443 3343                        18            .byte	$18
14444 3344                        18            .byte	$18
14445 3345                        18            .byte	$18
14446 3346                        18            .byte	$18
14447 3347                        18            .byte	$18
14448 3348                        18            .byte	$18
14449 3349                        18            .byte	$18
14450 334A                        18            .byte	$18
14451                                           ! 1621  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14452 334B                        FF            .byte	$FF
14453 334C                        FF            .byte	$FF
14454 334D                        FF            .byte	$FF
14455 334E                        FF            .byte	$FF
14456 334F                        FF            .byte	$FF
14457 3350                        FF            .byte	$FF
14458 3351                        FF            .byte	$FF
14459 3352                        FF            .byte	$FF
14460 3353                        FF            .byte	$FF
14461 3354                        FF            .byte	$FF
14462 3355                        FF            .byte	$FF
14463 3356                        FF            .byte	$FF
14464 3357                        FF            .byte	$FF
14465 3358                        FF            .byte	$FF
14466 3359                        FF            .byte	$FF
14467 335A                        FF            .byte	$FF
14468                                           ! 1622  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14469 335B                        00            .byte	0
14470 335C                        00            .byte	0
14471 335D                        00            .byte	0
14472 335E                        00            .byte	0
14473 335F                        00            .byte	0
14474 3360                        00            .byte	0
14475 3361                        00            .byte	0
14476 3362                        FF            .byte	$FF
14477 3363                        FF            .byte	$FF
14478 3364                        FF            .byte	$FF
14479 3365                        FF            .byte	$FF
14480 3366                        FF            .byte	$FF
14481 3367                        FF            .byte	$FF
14482 3368                        FF            .byte	$FF
14483 3369                        FF            .byte	$FF
14484 336A                        FF            .byte	$FF
14485                                           ! 1623  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14486 336B                        F0            .byte	$F0
14487 336C                        F0            .byte	$F0
14488 336D                        F0            .byte	$F0
14489 336E                        F0            .byte	$F0
14490 336F                        F0            .byte	$F0
14491 3370                        F0            .byte	$F0
14492 3371                        F0            .byte	$F0
14493 3372                        F0            .byte	$F0
14494 3373                        F0            .byte	$F0
14495 3374                        F0            .byte	$F0
14496 3375                        F0            .byte	$F0
14497 3376                        F0            .byte	$F0
14498 3377                        F0            .byte	$F0
14499 3378                        F0            .byte	$F0
14500 3379                        F0            .byte	$F0
14501 337A                        F0            .byte	$F0
14502                                           ! 1624  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14503 337B                        0F            .byte	$F
14504 337C                        0F            .byte	$F
14505 337D                        0F            .byte	$F
14506 337E                        0F            .byte	$F
14507 337F                        0F            .byte	$F
14508 3380                        0F            .byte	$F
14509 3381                        0F            .byte	$F
14510 3382                        0F            .byte	$F
14511 3383                        0F            .byte	$F
14512 3384                        0F            .byte	$F
14513 3385                        0F            .byte	$F
14514 3386                        0F            .byte	$F
14515 3387                        0F            .byte	$F
14516 3388                        0F            .byte	$F
14517 3389                        0F            .byte	$F
14518 338A                        0F            .byte	$F
14519                                           ! 1625  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14520 338B                        FF            .byte	$FF
14521 338C                        FF            .byte	$FF
14522 338D                        FF            .byte	$FF
14523 338E                        FF            .byte	$FF
14524 338F                        FF            .byte	$FF
14525 3390                        FF            .byte	$FF
14526 3391                        FF            .byte	$FF
14527 3392                        00            .byte	0
14528 3393                        00            .byte	0
14529 3394                        00            .byte	0
14530 3395                        00            .byte	0
14531 3396                        00            .byte	0
14532 3397                        00            .byte	0
14533 3398                        00            .byte	0
14534 3399                        00            .byte	0
14535 339A                        00            .byte	0
14536                                           ! 1626  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14537 339B                        00            .byte	0
14538 339C                        00            .byte	0
14539 339D                        00            .byte	0
14540 339E                        00            .byte	0
14541 339F                        00            .byte	0
14542 33A0                        76            .byte	$76
14543 33A1                        DC            .byte	$DC
14544 33A2                        D8            .byte	$D8
14545 33A3                        D8            .byte	$D8
14546 33A4                        D8            .byte	$D8
14547 33A5                        DC            .byte	$DC
14548 33A6                        76            .byte	$76
14549 33A7                        00            .byte	0
14550 33A8                        00            .byte	0
14551 33A9                        00            .byte	0
14552 33AA                        00            .byte	0
14553                                           ! 1627  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14554 33AB                        00            .byte	0
14555 33AC                        00            .byte	0
14556 33AD                        78            .byte	$78
14557 33AE                        CC            .byte	$CC
14558 33AF                        CC            .byte	$CC
14559 33B0                        CC            .byte	$CC
14560 33B1                        D8            .byte	$D8
14561 33B2                        CC            .byte	$CC
14562 33B3                        C6            .byte	$C6
14563 33B4                        C6            .byte	$C6
14564 33B5                        C6            .byte	$C6
14565 33B6                        CC            .byte	$CC
14566 33B7                        00            .byte	0
14567 33B8                        00            .byte	0
14568 33B9                        00            .byte	0
14569 33BA                        00            .byte	0
14570                                           ! 1628  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14571 33BB                        00            .byte	0
14572 33BC                        00            .byte	0
14573 33BD                        FE            .byte	$FE
14574 33BE                        C6            .byte	$C6
14575 33BF                        C6            .byte	$C6
14576 33C0                        C0            .byte	$C0
14577 33C1                        C0            .byte	$C0
14578 33C2                        C0            .byte	$C0
14579 33C3                        C0            .byte	$C0
14580 33C4                        C0            .byte	$C0
14581 33C5                        C0            .byte	$C0
14582 33C6                        C0            .byte	$C0
14583 33C7                        00            .byte	0
14584 33C8                        00            .byte	0
14585 33C9                        00            .byte	0
14586 33CA                        00            .byte	0
14587                                           ! 1629  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14588 33CB                        00            .byte	0
14589 33CC                        00            .byte	0
14590 33CD                        00            .byte	0
14591 33CE                        00            .byte	0
14592 33CF                        FE            .byte	$FE
14593 33D0                        6C            .byte	$6C
14594 33D1                        6C            .byte	$6C
14595 33D2                        6C            .byte	$6C
14596 33D3                        6C            .byte	$6C
14597 33D4                        6C            .byte	$6C
14598 33D5                        6C            .byte	$6C
14599 33D6                        6C            .byte	$6C
14600 33D7                        00            .byte	0
14601 33D8                        00            .byte	0
14602 33D9                        00            .byte	0
14603 33DA                        00            .byte	0
14604                                           ! 1630  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14605 33DB                        00            .byte	0
14606 33DC                        00            .byte	0
14607 33DD                        00            .byte	0
14608 33DE                        FE            .byte	$FE
14609 33DF                        C6            .byte	$C6
14610 33E0                        60            .byte	$60
14611 33E1                        30            .byte	$30
14612 33E2                        18            .byte	$18
14613 33E3                        30            .byte	$30
14614 33E4                        60            .byte	$60
14615 33E5                        C6            .byte	$C6
14616 33E6                        FE            .byte	$FE
14617 33E7                        00            .byte	0
14618 33E8                        00            .byte	0
14619 33E9                        00            .byte	0
14620 33EA                        00            .byte	0
14621                                           ! 1631  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14622 33EB                        00            .byte	0
14623 33EC                        00            .byte	0
14624 33ED                        00            .byte	0
14625 33EE                        00            .byte	0
14626 33EF                        00            .byte	0
14627 33F0                        7E            .byte	$7E
14628 33F1                        D8            .byte	$D8
14629 33F2                        D8            .byte	$D8
14630 33F3                        D8            .byte	$D8
14631 33F4                        D8            .byte	$D8
14632 33F5                        D8            .byte	$D8
14633 33F6                        70            .byte	$70
14634 33F7                        00            .byte	0
14635 33F8                        00            .byte	0
14636 33F9                        00            .byte	0
14637 33FA                        00            .byte	0
14638                                           ! 1632  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14639 33FB                        00            .byte	0
14640 33FC                        00            .byte	0
14641 33FD                        00            .byte	0
14642 33FE                        00            .byte	0
14643 33FF                        66            .byte	$66
14644 3400                        66            .byte	$66
14645 3401                        66            .byte	$66
14646 3402                        66            .byte	$66
14647 3403                        66            .byte	$66
14648 3404                        7C            .byte	$7C
14649 3405                        60            .byte	$60
14650 3406                        60            .byte	$60
14651 3407                        C0            .byte	$C0
14652 3408                        00            .byte	0
14653 3409                        00            .byte	0
14654 340A                        00            .byte	0
14655                                           ! 1633  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14656 340B                        00            .byte	0
14657 340C                        00            .byte	0
14658 340D                        00            .byte	0
14659 340E                        00            .byte	0
14660 340F                        76            .byte	$76
14661 3410                        DC            .byte	$DC
14662 3411                        18            .byte	$18
14663 3412                        18            .byte	$18
14664 3413                        18            .byte	$18
14665 3414                        18            .byte	$18
14666 3415                        18            .byte	$18
14667 3416                        18            .byte	$18
14668 3417                        00            .byte	0
14669 3418                        00            .byte	0
14670 3419                        00            .byte	0
14671 341A                        00            .byte	0
14672                                           ! 1634  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14673 341B                        00            .byte	0
14674 341C                        00            .byte	0
14675 341D                        00            .byte	0
14676 341E                        7E            .byte	$7E
14677 341F                        18            .byte	$18
14678 3420                        3C            .byte	$3C
14679 3421                        66            .byte	$66
14680 3422                        66            .byte	$66
14681 3423                        66            .byte	$66
14682 3424                        3C            .byte	$3C
14683 3425                        18            .byte	$18
14684 3426                        7E            .byte	$7E
14685 3427                        00            .byte	0
14686 3428                        00            .byte	0
14687 3429                        00            .byte	0
14688 342A                        00            .byte	0
14689                                           ! 1635  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14690 342B                        00            .byte	0
14691 342C                        00            .byte	0
14692 342D                        00            .byte	0
14693 342E                        38            .byte	$38
14694 342F                        6C            .byte	$6C
14695 3430                        C6            .byte	$C6
14696 3431                        C6            .byte	$C6
14697 3432                        FE            .byte	$FE
14698 3433                        C6            .byte	$C6
14699 3434                        C6            .byte	$C6
14700 3435                        6C            .byte	$6C
14701 3436                        38            .byte	$38
14702 3437                        00            .byte	0
14703 3438                        00            .byte	0
14704 3439                        00            .byte	0
14705 343A                        00            .byte	0
14706                                           ! 1636  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14707 343B                        00            .byte	0
14708 343C                        00            .byte	0
14709 343D                        38            .byte	$38
14710 343E                        6C            .byte	$6C
14711 343F                        C6            .byte	$C6
14712 3440                        C6            .byte	$C6
14713 3441                        C6            .byte	$C6
14714 3442                        6C            .byte	$6C
14715 3443                        6C            .byte	$6C
14716 3444                        6C            .byte	$6C
14717 3445                        6C            .byte	$6C
14718 3446                        EE            .byte	$EE
14719 3447                        00            .byte	0
14720 3448                        00            .byte	0
14721 3449                        00            .byte	0
14722 344A                        00            .byte	0
14723                                           ! 1637  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14724 344B                        00            .byte	0
14725 344C                        00            .byte	0
14726 344D                        1E            .byte	$1E
14727 344E                        30            .byte	$30
14728 344F                        18            .byte	$18
14729 3450                        0C            .byte	$C
14730 3451                        3E            .byte	$3E
14731 3452                        66            .byte	$66
14732 3453                        66            .byte	$66
14733 3454                        66            .byte	$66
14734 3455                        66            .byte	$66
14735 3456                        3C            .byte	$3C
14736 3457                        00            .byte	0
14737 3458                        00            .byte	0
14738 3459                        00            .byte	0
14739 345A                        00            .byte	0
14740                                           ! 1638  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14741 345B                        00            .byte	0
14742 345C                        00            .byte	0
14743 345D                        00            .byte	0
14744 345E                        00            .byte	0
14745 345F                        00            .byte	0
14746 3460                        7E            .byte	$7E
14747 3461                        DB            .byte	$DB
14748 3462                        DB            .byte	$DB
14749 3463                        DB            .byte	$DB
14750 3464                        7E            .byte	$7E
14751 3465                        00            .byte	0
14752 3466                        00            .byte	0
14753 3467                        00            .byte	0
14754 3468                        00            .byte	0
14755 3469                        00            .byte	0
14756 346A                        00            .byte	0
14757                                           ! 1639  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14758 346B                        00            .byte	0
14759 346C                        00            .byte	0
14760 346D                        00            .byte	0
14761 346E                        03            .byte	3
14762 346F                        06            .byte	6
14763 3470                        7E            .byte	$7E
14764 3471                        DB            .byte	$DB
14765 3472                        DB            .byte	$DB
14766 3473                        F3            .byte	$F3
14767 3474                        7E            .byte	$7E
14768 3475                        60            .byte	$60
14769 3476                        C0            .byte	$C0
14770 3477                        00            .byte	0
14771 3478                        00            .byte	0
14772 3479                        00            .byte	0
14773 347A                        00            .byte	0
14774                                           ! 1640  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14775 347B                        00            .byte	0
14776 347C                        00            .byte	0
14777 347D                        1C            .byte	$1C
14778 347E                        30            .byte	$30
14779 347F                        60            .byte	$60
14780 3480                        60            .byte	$60
14781 3481                        7C            .byte	$7C
14782 3482                        60            .byte	$60
14783 3483                        60            .byte	$60
14784 3484                        60            .byte	$60
14785 3485                        30            .byte	$30
14786 3486                        1C            .byte	$1C
14787 3487                        00            .byte	0
14788 3488                        00            .byte	0
14789 3489                        00            .byte	0
14790 348A                        00            .byte	0
14791                                           ! 1641  0x00, 0x00, 0x00, 0x7c, 0xc6,
14792 348B                        00            .byte	0
14793 348C                        00            .byte	0
14794 348D                        00            .byte	0
14795 348E                        7C            .byte	$7C
14796                                           ! 1641  0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14797 348F                        C6            .byte	$C6
14798 3490                        C6            .byte	$C6
14799 3491                        C6            .byte	$C6
14800 3492                        C6            .byte	$C6
14801 3493                        C6            .byte	$C6
14802 3494                        C6            .byte	$C6
14803 3495                        C6            .byte	$C6
14804 3496                        C6            .byte	$C6
14805 3497                        00            .byte	0
14806 3498                        00            .byte	0
14807 3499                        00            .byte	0
14808 349A                        00            .byte	0
14809                                           ! 1642  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14810 349B                        00            .byte	0
14811 349C                        00            .byte	0
14812 349D                        00            .byte	0
14813 349E                        00            .byte	0
14814 349F                        FE            .byte	$FE
14815 34A0                        00            .byte	0
14816 34A1                        00            .byte	0
14817 34A2                        FE            .byte	$FE
14818 34A3                        00            .byte	0
14819 34A4                        00            .byte	0
14820 34A5                        FE            .byte	$FE
14821 34A6                        00            .byte	0
14822 34A7                        00            .byte	0
14823 34A8                        00            .byte	0
14824 34A9                        00            .byte	0
14825 34AA                        00            .byte	0
14826                                           ! 1643  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14827 34AB                        00            .byte	0
14828 34AC                        00            .byte	0
14829 34AD                        00            .byte	0
14830 34AE                        00            .byte	0
14831 34AF                        18            .byte	$18
14832 34B0                        18            .byte	$18
14833 34B1                        7E            .byte	$7E
14834 34B2                        18            .byte	$18
14835 34B3                        18            .byte	$18
14836 34B4                        00            .byte	0
14837 34B5                        00            .byte	0
14838 34B6                        FF            .byte	$FF
14839 34B7                        00            .byte	0
14840 34B8                        00            .byte	0
14841 34B9                        00            .byte	0
14842 34BA                        00            .byte	0
14843                                           ! 1644  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14844 34BB                        00            .byte	0
14845 34BC                        00            .byte	0
14846 34BD                        00            .byte	0
14847 34BE                        30            .byte	$30
14848 34BF                        18            .byte	$18
14849 34C0                        0C            .byte	$C
14850 34C1                        06            .byte	6
14851 34C2                        0C            .byte	$C
14852 34C3                        18            .byte	$18
14853 34C4                        30            .byte	$30
14854 34C5                        00            .byte	0
14855 34C6                        7E            .byte	$7E
14856 34C7                        00            .byte	0
14857 34C8                        00            .byte	0
14858 34C9                        00            .byte	0
14859 34CA                        00            .byte	0
14860                                           ! 1645  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14861 34CB                        00            .byte	0
14862 34CC                        00            .byte	0
14863 34CD                        00            .byte	0
14864 34CE                        0C            .byte	$C
14865 34CF                        18            .byte	$18
14866 34D0                        30            .byte	$30
14867 34D1                        60            .byte	$60
14868 34D2                        30            .byte	$30
14869 34D3                        18            .byte	$18
14870 34D4                        0C            .byte	$C
14871 34D5                        00            .byte	0
14872 34D6                        7E            .byte	$7E
14873 34D7                        00            .byte	0
14874 34D8                        00            .byte	0
14875 34D9                        00            .byte	0
14876 34DA                        00            .byte	0
14877                                           ! 1646  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14878 34DB                        00            .byte	0
14879 34DC                        00            .byte	0
14880 34DD                        0E            .byte	$E
14881 34DE                        1B            .byte	$1B
14882 34DF                        1B            .byte	$1B
14883 34E0                        18            .byte	$18
14884 34E1                        18            .byte	$18
14885 34E2                        18            .byte	$18
14886 34E3                        18            .byte	$18
14887 34E4                        18            .byte	$18
14888 34E5                        18            .byte	$18
14889 34E6                        18            .byte	$18
14890 34E7                        18            .byte	$18
14891 34E8                        18            .byte	$18
14892 34E9                        18            .byte	$18
14893 34EA                        18            .byte	$18
14894                                           ! 1647  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14895 34EB                        18            .byte	$18
14896 34EC                        18            .byte	$18
14897 34ED                        18            .byte	$18
14898 34EE                        18            .byte	$18
14899 34EF                        18            .byte	$18
14900 34F0                        18            .byte	$18
14901 34F1                        18            .byte	$18
14902 34F2                        18            .byte	$18
14903 34F3                        D8            .byte	$D8
14904 34F4                        D8            .byte	$D8
14905 34F5                        D8            .byte	$D8
14906 34F6                        70            .byte	$70
14907 34F7                        00            .byte	0
14908 34F8                        00            .byte	0
14909 34F9                        00            .byte	0
14910 34FA                        00            .byte	0
14911                                           ! 1648  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14912 34FB                        00            .byte	0
14913 34FC                        00            .byte	0
14914 34FD                        00            .byte	0
14915 34FE                        00            .byte	0
14916 34FF                        18            .byte	$18
14917 3500                        18            .byte	$18
14918 3501                        00            .byte	0
14919 3502                        7E            .byte	$7E
14920 3503                        00            .byte	0
14921 3504                        18            .byte	$18
14922 3505                        18            .byte	$18
14923 3506                        00            .byte	0
14924 3507                        00            .byte	0
14925 3508                        00            .byte	0
14926 3509                        00            .byte	0
14927 350A                        00            .byte	0
14928                                           ! 1649  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14929 350B                        00            .byte	0
14930 350C                        00            .byte	0
14931 350D                        00            .byte	0
14932 350E                        00            .byte	0
14933 350F                        00            .byte	0
14934 3510                        76            .byte	$76
14935 3511                        DC            .byte	$DC
14936 3512                        00            .byte	0
14937 3513                        76            .byte	$76
14938 3514                        DC            .byte	$DC
14939 3515                        00            .byte	0
14940 3516                        00            .byte	0
14941 3517                        00            .byte	0
14942 3518                        00            .byte	0
14943 3519                        00            .byte	0
14944 351A                        00            .byte	0
14945                                           ! 1650  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14946 351B                        00            .byte	0
14947 351C                        38            .byte	$38
14948 351D                        6C            .byte	$6C
14949 351E                        6C            .byte	$6C
14950 351F                        38            .byte	$38
14951 3520                        00            .byte	0
14952 3521                        00            .byte	0
14953 3522                        00            .byte	0
14954 3523                        00            .byte	0
14955 3524                        00            .byte	0
14956 3525                        00            .byte	0
14957 3526                        00            .byte	0
14958 3527                        00            .byte	0
14959 3528                        00            .byte	0
14960 3529                        00            .byte	0
14961 352A                        00            .byte	0
14962                                           ! 1651  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14963 352B                        00            .byte	0
14964 352C                        00            .byte	0
14965 352D                        00            .byte	0
14966 352E                        00            .byte	0
14967 352F                        00            .byte	0
14968 3530                        00            .byte	0
14969 3531                        00            .byte	0
14970 3532                        18            .byte	$18
14971 3533                        18            .byte	$18
14972 3534                        00            .byte	0
14973 3535                        00            .byte	0
14974 3536                        00            .byte	0
14975 3537                        00            .byte	0
14976 3538                        00            .byte	0
14977 3539                        00            .byte	0
14978 353A                        00            .byte	0
14979                                           ! 1652  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14980 353B                        00            .byte	0
14981 353C                        00            .byte	0
14982 353D                        00            .byte	0
14983 353E                        00            .byte	0
14984 353F                        00            .byte	0
14985 3540                        00            .byte	0
14986 3541                        00            .byte	0
14987 3542                        00            .byte	0
14988 3543                        18            .byte	$18
14989 3544                        00            .byte	0
14990 3545                        00            .byte	0
14991 3546                        00            .byte	0
14992 3547                        00            .byte	0
14993 3548                        00            .byte	0
14994 3549                        00            .byte	0
14995 354A                        00            .byte	0
14996                                           ! 1653  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14997 354B                        00            .byte	0
14998 354C                        0F            .byte	$F
14999 354D                        0C            .byte	$C
15000 354E                        0C            .byte	$C
15001 354F                        0C            .byte	$C
15002 3550                        0C            .byte	$C
15003 3551                        0C            .byte	$C
15004 3552                        EC            .byte	$EC
15005 3553                        6C            .byte	$6C
15006 3554                        6C            .byte	$6C
15007 3555                        3C            .byte	$3C
15008 3556                        1C            .byte	$1C
15009 3557                        00            .byte	0
15010 3558                        00            .byte	0
15011 3559                        00            .byte	0
15012 355A                        00            .byte	0
15013                                           ! 1654  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15014 355B                        00            .byte	0
15015 355C                        D8            .byte	$D8
15016 355D                        6C            .byte	$6C
15017 355E                        6C            .byte	$6C
15018 355F                        6C            .byte	$6C
15019 3560                        6C            .byte	$6C
15020 3561                        6C            .byte	$6C
15021 3562                        00            .byte	0
15022 3563                        00            .byte	0
15023 3564                        00            .byte	0
15024 3565                        00            .byte	0
15025 3566                        00            .byte	0
15026 3567                        00            .byte	0
15027 3568                        00            .byte	0
15028 3569                        00            .byte	0
15029 356A                        00            .byte	0
15030                                           ! 1655  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
15031 356B                        00            .byte	0
15032 356C                        70            .byte	$70
15033 356D                        D8            .byte	$D8
15034 356E                        30            .byte	$30
15035 356F                        60            .byte	$60
15036 3570                        C8            .byte	$C8
15037 3571                        F8            .byte	$F8
15038 3572                        00            .byte	0
15039 3573                        00            .byte	0
15040 3574                        00            .byte	0
15041 3575                        00            .byte	0
15042 3576                        00            .byte	0
15043 3577                        00            .byte	0
15044 3578                        00            .byte	0
15045 3579                        00            .byte	0
15046 357A                        00            .byte	0
15047                                           ! 1656  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15048 357B                        00            .byte	0
15049 357C                        00            .byte	0
15050 357D                        00            .byte	0
15051 357E                        00            .byte	0
15052 357F                        7C            .byte	$7C
15053 3580                        7C            .byte	$7C
15054 3581                        7C            .byte	$7C
15055 3582                        7C            .byte	$7C
15056 3583                        7C            .byte	$7C
15057 3584                        7C            .byte	$7C
15058 3585                        7C            .byte	$7C
15059 3586                        00            .byte	0
15060 3587                        00            .byte	0
15061 3588                        00            .byte	0
15062 3589                        00            .byte	0
15063 358A                        00            .byte	0
15064                                           ! 1657  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15065 358B                        00            .byte	0
15066 358C                        00            .byte	0
15067 358D                        00            .byte	0
15068 358E                        00            .byte	0
15069 358F                        00            .byte	0
15070 3590                        00            .byte	0
15071 3591                        00            .byte	0
15072 3592                        00            .byte	0
15073 3593                        00            .byte	0
15074 3594                        00            .byte	0
15075 3595                        00            .byte	0
15076 3596                        00            .byte	0
15077 3597                        00            .byte	0
15078 3598                        00            .byte	0
15079 3599                        00            .byte	0
15080                                           ! 1658 };
15081 359A                        00            .byte	0
15082                                           !BCC_EOS
15083                                           ! 1659 static Bit8u vgafont14alt[1]={0x00};
15084                       0000359B            _vgafont14alt:
15085 359B                        00            .byte	0
15086                                           !BCC_EOS
15087                                           ! 1660 static Bit8u vgafont16alt[1]={0x00};
15088                       0000359C            _vgafont16alt:
15089 359C                        00            .byte	0
15090                                           !BCC_EOS
15091                                           ! 1661 #asm
15092                                           !BCC_ASM
15093                       0000359D            init_vga_card:
15094                                           ;; switch to color mode and enable CPU access 480 lines
15095 359D           BA                   03C2    mov dx, #0x3C2
15096 35A0           B0                     C3    mov al, #0xC3
15097 35A2           EE                           outb dx,al
15098                                           ;; more than 64k 3C4/04
15099 35A3           BA                   03C4    mov dx, #0x3C4
15100 35A6           B0                     04    mov al, #0x04
15101 35A8           EE                           outb dx,al
15102 35A9           BA                   03C5    mov dx, #0x3C5
15103 35AC           B0                     02    mov al, #0x02
15104 35AE           EE                           outb dx,al
15105 35AF           BB                   35B9    mov bx, #msg_vga_init
15106 35B2           53                           push bx
15107 35B3           E8         4938              call _printf
15108 35B6           44                           inc sp
15109 35B7           44                           inc sp
15110 35B8           C3                           ret
15111                       000035B9            msg_vga_init:
15112 35B9                        56            .ascii "VGABios $Id: vgabios.c,v 1.75 2011/10/15 14:07:21 vruppert Exp $"
15113 35F9                        0D            .byte 0x0d,0x0a,0x00
15114                                           ! 1683 endasm
15115                                           !BCC_ENDASM
15116                                           ! 1684 #asm
15117                                           !BCC_ASM
15118                       000035FC            init_bios_area:
15119 35FC           1E                           push ds
15120 35FD           B8                   0040    mov ax, # 0x40
15121 3600           8ED8                         mov ds, ax
15122                                           ;; init detected hardware BIOS Area
15123 3602           BB                   0010    mov bx, # 0x10
15124 3605           8B07                         mov ax, [bx]
15125 3607           25                   FFCF    and ax, #0xffcf
15126                                           ;; set 80x25 color (not clear from RBIL but usual)
15127 360A           0D                   0020    or ax, #0x0020
15128 360D           8907                         mov [bx], ax
15129                                           ;; Just for the first int10 find its children
15130                                           ;; the default char height
15131 360F           BB                   0085    mov bx, # 0x85
15132 3612           B0                     10    mov al, #0x10
15133 3614           8807                         mov [bx], al
15134                                           ;; Clear the screen
15135 3616           BB                   0087    mov bx, # 0x87
15136 3619           B0                     60    mov al, #0x60
15137 361B           8807                         mov [bx], al
15138                                           ;; Set the basic screen we have
15139 361D           BB                   0088    mov bx, # 0x88
15140 3620           B0                     F9    mov al, #0xf9
15141 3622           8807                         mov [bx], al
15142                                           ;; Set the basic modeset options
15143 3624           BB                   0089    mov bx, # 0x89
15144 3627           B0                     51    mov al, #0x51
15145 3629           8807                         mov [bx], al
15146                                           ;; Set the default MSR
15147 362B           BB                   0065    mov bx, # 0x65
15148 362E           B0                     09    mov al, #0x09
15149 3630           8807                         mov [bx], al
15150 3632           1F                           pop ds
15151 3633           C3                           ret
15152                       00003634            _video_save_pointer_table:
15153 3634                      02CB              .word _video_param_table
15154 3636                      C000              .word 0xc000
15155 3638                      0000              .word 0
15156 363A                      0000              .word 0
15157 363C                      0000              .word 0
15158 363E                      0000              .word 0
15159 3640                      0000              .word 0
15160 3642                      0000              .word 0
15161 3644                      0000              .word 0
15162 3646                      0000              .word 0
15163 3648                      0000              .word 0
15164 364A                      0000              .word 0
15165 364C                      0000              .word 0
15166 364E                      0000              .word 0
15167                                           ! 1734 endasm
15168                                           !BCC_ENDASM
15169                                           ! 1735 static void display_splash_screen()
15170                                           ! 1736 {
15171                                           
15172                       00003650            _display_splash_screen:
15173                                           ! 1737 }
15174 3650           C3                         ret
15175                                           ! 1738 static void display_info()
15176                                           ! 1739 {
15177                       00003651            _display_info:
15178                                           ! 1740 #asm
15179                                           !BCC_ASM
15180 3651           B8                   C000   mov ax,#0xc000
15181 3654           8ED8                        mov ds,ax
15182 3656           BE                   0022   mov si,#vgabios_name
15183 3659           E8         0013             call _display_string
15184 365C           BE                   003E   mov si,#vgabios_version
15185 365F           E8         000D             call _display_string
15186                                            ;;mov si,#vgabios_copyright
15187                                            ;;call _display_string
15188                                            ;;mov si,#crlf
15189                                            ;;call _display_string
15190 3662           BE                   0084   mov si,#vgabios_license
15191 3665           E8         0007             call _display_string
15192 3668           BE                   00B9   mov si,#vgabios_website
15193 366B           E8         0001             call _display_string
15194                                           ! 1755 endasm
15195                                           !BCC_ENDASM
15196                                           ! 1756 }
15197 366E           C3                         ret
15198                                           ! 1757 static void display_string()
15199                                           ! 1758 {
15200                       0000366F            _display_string:
15201                                           ! 1759 #asm
15202                                           !BCC_ASM
15203 366F           8CD8                        mov ax,ds
15204 3671           8EC0                        mov es,ax
15205 3673           89F7                        mov di,si
15206 3675           31C9                        xor cx,cx
15207 3677           F7D1                        not cx
15208 3679           30C0                        xor al,al
15209 367B           FC                          cld
15210 367C           F2                          repne
15211 367D           AE                           scasb
15212 367E           F7D1                        not cx
15213 3680           49                          dec cx
15214 3681           51                          push cx
15215 3682           B8                   0300   mov ax,#0x0300
15216 3685           BB                   0000   mov bx,#0x0000
15217 3688           CD                     10   int #0x10
15218 368A           59                          pop cx
15219 368B           B8                   1301   mov ax,#0x1301
15220 368E           BB                   000B   mov bx,#0x000b
15221 3691           89F5                        mov bp,si
15222 3693           CD                     10   int #0x10
15223                                           ! 1780 endasm
15224                                           !BCC_ENDASM
15225                                           ! 1781 }
15226 3695           C3                         ret
15227                                           ! 1782 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15228                                           ! 1783   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15229                       00003696            _int10_func:
15230                                           !BCC_EOS
15231                                           ! 1784 {
15232                                           ! 1785  switch(( AX >> 8 ))
15233 3696           55                         push	bp
15234 3697           89E5                       mov	bp,sp
15235                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15236 3699           8B46         12            mov	ax,$12[bp]
15237 369C           88E0                       mov	al,ah
15238 369E           30E4                       xor	ah,ah
15239                                           ! 1786   {
15240 36A0           E9         04D7            br 	.3
15241                                           ! 1787    case 0x00:
15242                                           ! 1788      biosfn_set_video_mode(( AX & 0x00ff ));
15243                       000036A3            .4:
15244                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15245 36A3           8A46         12            mov	al,$12[bp]
15246                                           ! Debug: list unsigned char = al+0 (used reg = )
15247 36A6           30E4                       xor	ah,ah
15248 36A8           50                         push	ax
15249                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15250 36A9           E8         0620            call	_biosfn_set_video_mode
15251 36AC           44                         inc	sp
15252 36AD           44                         inc	sp
15253                                           !BCC_EOS
15254                                           ! 1789      switch(( AX & 0x00ff )&0x7F)
15255                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15256 36AE           8A46         12            mov	al,$12[bp]
15257                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15258 36B1           24                     7F  and	al,*$7F
15259                                           ! 1790       {case 6:
15260 36B3           EB           24            jmp .7
15261                                           ! 1791         AX = ((AX & 0xff00) | (0x3F));
15262                       000036B5            .8:
15263                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15264 36B5           8B46         12            mov	ax,$12[bp]
15265 36B8           30C0                       xor	al,al
15266                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15267 36BA           0C                     3F  or	al,*$3F
15268                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15269 36BC           8946         12            mov	$12[bp],ax
15270                                           !BCC_EOS
15271                                           ! 1792         break;
15272 36BF           EB           3D            jmp .5
15273                                           !BCC_EOS
15274                                           ! 1793        case 0:
15275                                           ! 1794        case 1:
15276                       000036C1            .9:
15277                                           ! 1795        case 2:
15278                       000036C1            .A:
15279                                           ! 1796        case 3:
15280                       000036C1            .B:
15281                                           ! 1797        case 4:
15282                       000036C1            .C:
15283                                           ! 1798        case 5:
15284                       000036C1            .D:
15285                                           ! 1799        case 7:
15286                       000036C1            .E:
15287                                           ! 1800         AX = ((AX & 0xff00) | (0x30));
15288                       000036C1            .F:
15289                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15290 36C1           8B46         12            mov	ax,$12[bp]
15291 36C4           30C0                       xor	al,al
15292                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15293 36C6           0C                     30  or	al,*$30
15294                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15295 36C8           8946         12            mov	$12[bp],ax
15296                                           !BCC_EOS
15297                                           ! 1801    
15298                                           ! 1801      break;
15299 36CB           EB           31            jmp .5
15300                                           !BCC_EOS
15301                                           ! 1802       default:
15302                                           ! 1803         AX = ((AX & 0xff00) | (0x20));
15303                       000036CD            .10:
15304                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15305 36CD           8B46         12            mov	ax,$12[bp]
15306 36D0           30C0                       xor	al,al
15307                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15308 36D2           0C                     20  or	al,*$20
15309                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15310 36D4           8946         12            mov	$12[bp],ax
15311                                           !BCC_EOS
15312                                           ! 1804       }
15313                                           ! 1805      break;
15314 36D7           EB           25            jmp .5
15315                       000036D9            .7:
15316 36D9           2C                     00  sub	al,*0
15317 36DB           72           F0            jb 	.10
15318 36DD           3C                     07  cmp	al,*7
15319 36DF           77           1B            ja  	.11
15320 36E1           30E4                       xor	ah,ah
15321 36E3           D1E0                       shl	ax,*1
15322 36E5           89C3                       mov	bx,ax
15323 36E7           2E                         seg	cs
15324 36E8           FFA7       36EC            br	.12[bx]
15325                       000036EC            .12:
15326 36EC                      36C1            .word	.9
15327 36EE                      36C1            .word	.A
15328 36F0                      36C1            .word	.B
15329 36F2                      36C1            .word	.C
15330 36F4                      36C1            .word	.D
15331 36F6                      36C1            .word	.E
15332 36F8                      36B5            .word	.8
15333 36FA                      36C1            .word	.F
15334                       000036FC            .11:
15335 36FC           EB           CF            jmp	.10
15336                       000036FE            .5:
15337 36FE           E9         04CD            br 	.1
15338                                           !BCC_EOS
15339                                           ! 1806    case 0x01:
15340                                           ! 1807      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15341                       00003701            .13:
15342                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15343 3701           8A46         10            mov	al,$10[bp]
15344                                           ! Debug: list unsigned char = al+0 (used reg = )
15345 3704           30E4                       xor	ah,ah
15346 3706           50                         push	ax
15347                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15348 3707           8B46         10            mov	ax,$10[bp]
15349 370A           88E0                       mov	al,ah
15350 370C           30E4                       xor	ah,ah
15351                                           ! Debug: list unsigned int = ax+0 (used reg = )
15352 370E           50                         push	ax
15353                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15354 370F           E8         0B59            call	_biosfn_set_cursor_shape
15355 3712           83C4                   04  add	sp,*4
15356                                           !BCC_EOS
15357                                           ! 1808      break;
15358 3715           E9         04B6            br 	.1
15359                                           !BCC_EOS
15360                                           ! 1809    case 0x02:
15361                                           ! 1810      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15362                       00003718            .14:
15363                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15364 3718           FF76         0E            push	$E[bp]
15365                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15366 371B           8B46         0C            mov	ax,$C[bp]
15367 371E           88E0                       mov	al,ah
15368 3720           30E4                       xor	ah,ah
15369                                           ! Debug: list unsigned int = ax+0 (used reg = )
15370 3722           50                         push	ax
15371                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15372 3723           E8         0C60            call	_biosfn_set_cursor_pos
15373 3726           83C4                   04  add	sp,*4
15374                                           !BCC_EOS
15375                                           ! 1811      break;
15376 3729           E9         04A2            br 	.1
15377                                           !BCC_EOS
15378                                           ! 1812    case 0x03:
15379                                           ! 1813      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15380                       0000372C            .15:
15381                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15382 372C           8D5E         0E            lea	bx,$E[bp]
15383 372F           53                         push	bx
15384                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15385 3730           8D5E         10            lea	bx,$10[bp]
15386 3733           53                         push	bx
15387                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15388 3734           8B46         0C            mov	ax,$C[bp]
15389 3737           88E0                       mov	al,ah
15390 3739           30E4                       xor	ah,ah
15391                                           ! Debug: list unsigned int = ax+0 (used reg = )
15392 373B           50                         push	ax
15393                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15394 373C           E8         0D47            call	_biosfn_get_cursor_pos
15395 373F           83C4                   06  add	sp,*6
15396                                           !BCC_EOS
15397                                           ! 1814      break;
15398 3742           E9         0489            br 	.1
15399                                           !BCC_EOS
15400                                           ! 1815    case 0x04:
15401                                           ! 1816      AX=0x00;
15402                       00003745            .16:
15403                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15404 3745           31C0                       xor	ax,ax
15405 3747           8946         12            mov	$12[bp],ax
15406                                           !BCC_EOS
15407                                           ! 1817      BX=0x00;
15408                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15409 374A           31C0                       xor	ax,ax
15410 374C           8946         0C            mov	$C[bp],ax
15411                                           !BCC_EOS
15412                                           ! 1818      CX=0x00;
15413                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15414 374F           31C0                       xor	ax,ax
15415 3751           8946         10            mov	$10[bp],ax
15416                                           !BCC_EOS
15417                                           ! 1819      DX=0x00;
15418                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15419 3754           31C0                       xor	ax,ax
15420 3756           8946         0E            mov	$E[bp],ax
15421                                           !BCC_EOS
15422                                           ! 1820      break;
15423 3759           E9         0472            br 	.1
15424                                           !BCC_EOS
15425                                           ! 1821    case 0x05:
15426                                           ! 1822      biosfn_set_active_page(( AX & 0x00ff ));
15427                       0000375C            .17:
15428                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15429 375C           8A46         12            mov	al,$12[bp]
15430                                           ! Debug: list unsigned char = al+0 (used reg = )
15431 375F           30E4                       xor	ah,ah
15432 3761           50                         push	ax
15433                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15434 3762           E8         0D96            call	_biosfn_set_active_page
15435 3765           44                         inc	sp
15436 3766           44                         inc	sp
15437                                           !BCC_EOS
15438                                           ! 1823      break;
15439 3767           E9         0464            br 	.1
15440                                           !BCC_EOS
15441                                           ! 1824    case 0x06:
15442                                           ! 1825      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15443                       0000376A            .18:
15444                                           ! Debug: list int = const 1 (used reg = )
15445 376A           B8                   0001  mov	ax,*1
15446 376D           50                         push	ax
15447                                           ! Debug: list int = const $FF (used reg = )
15448 376E           B8                   00FF  mov	ax,#$FF
15449 3771           50                         push	ax
15450                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15451 3772           8A46         0E            mov	al,$E[bp]
15452                                           ! Debug: list unsigned char = al+0 (used reg = )
15453 3775           30E4                       xor	ah,ah
15454 3777           50                         push	ax
15455                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15456 3778           8B46         0E            mov	ax,$E[bp]
15457 377B           88E0                       mov	al,ah
15458 377D           30E4                       xor	ah,ah
15459                                           ! Debug: list unsigned int = ax+0 (used reg = )
15460 377F           50                         push	ax
15461                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15462 3780           8A46         10            mov	al,$10[bp]
15463                                           ! Debug: list unsigned char = al+0 (used reg = )
15464 3783           30E4                       xor	ah,ah
15465 3785           50                         push	ax
15466                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15467 3786           8B46         10            mov	ax,$10[bp]
15468 3789           88E0                       mov	al,ah
15469 378B           30E4                       xor	ah,ah
15470                                           ! Debug: list unsigned int = ax+0 (used reg = )
15471 378D           50                         push	ax
15472                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15473 378E           8B46         0C            mov	ax,$C[bp]
15474 3791           88E0                       mov	al,ah
15475 3793           30E4                       xor	ah,ah
15476                                           ! Debug: list unsigned int = ax+0 (used reg = )
15477 3795           50                         push	ax
15478                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15479 3796           8A46         12            mov	al,$12[bp]
15480                                           ! Debug: list unsigned char = al+0 (used reg = )
15481 3799           30E4                       xor	ah,ah
15482 379B           50                         push	ax
15483                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15484 379C           E8         11E1            call	_biosfn_scroll
15485 379F           83C4                   10  add	sp,*$10
15486                                           !BCC_EOS
15487                                           ! 1826      break;
15488 37A2           E9         0429            br 	.1
15489                                           !BCC_EOS
15490                                           ! 1827    case 0x07:
15491                                           ! 1828      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15492                       000037A5            .19:
15493                                           ! Debug: list int = const 0 (used reg = )
15494 37A5           31C0                       xor	ax,ax
15495 37A7           50                         push	ax
15496                                           ! Debug: list int = const $FF (used reg = )
15497 37A8           B8                   00FF  mov	ax,#$FF
15498 37AB           50                         push	ax
15499                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15500 37AC           8A46         0E            mov	al,$E[bp]
15501                                           ! Debug: list unsigned char = al+0 (used reg = )
15502 37AF           30E4                       xor	ah,ah
15503 37B1           50                         push	ax
15504                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15505 37B2           8B46         0E            mov	ax,$E[bp]
15506 37B5           88E0                       mov	al,ah
15507 37B7           30E4                       xor	ah,ah
15508                                           ! Debug: list unsigned int = ax+0 (used reg = )
15509 37B9           50                         push	ax
15510                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15511 37BA           8A46         10            mov	al,$10[bp]
15512                                           ! Debug: list unsigned char = al+0 (used reg = )
15513 37BD           30E4                       xor	ah,ah
15514 37BF           50                         push	ax
15515                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15516 37C0           8B46         10            mov	ax,$10[bp]
15517 37C3           88E0                       mov	al,ah
15518 37C5           30E4                       xor	ah,ah
15519                                           ! Debug: list unsigned int = ax+0 (used reg = )
15520 37C7           50                         push	ax
15521                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15522 37C8           8B46         0C            mov	ax,$C[bp]
15523 37CB           88E0                       mov	al,ah
15524 37CD           30E4                       xor	ah,ah
15525                                           ! Debug: list unsigned int = ax+0 (used reg = )
15526 37CF           50                         push	ax
15527                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15528 37D0           8A46         12            mov	al,$12[bp]
15529                                           ! Debug: list unsigned char = al+0 (used reg = )
15530 37D3           30E4                       xor	ah,ah
15531 37D5           50                         push	ax
15532                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15533 37D6           E8         11A7            call	_biosfn_scroll
15534 37D9           83C4                   10  add	sp,*$10
15535                                           !BCC_EOS
15536                                           ! 1829      break;
15537 37DC           E9         03EF            br 	.1
15538                                           !BCC_EOS
15539                                           ! 1830    case 0x08:
15540                                           ! 1831      biosfn_read_char_attr(( BX >> 8 ),&AX);
15541                       000037DF            .1A:
15542                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15543 37DF           8D5E         12            lea	bx,$12[bp]
15544 37E2           53                         push	bx
15545                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15546 37E3           8B46         0C            mov	ax,$C[bp]
15547 37E6           88E0                       mov	al,ah
15548 37E8           30E4                       xor	ah,ah
15549                                           ! Debug: list unsigned int = ax+0 (used reg = )
15550 37EA           50                         push	ax
15551                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15552 37EB           E8         188C            call	_biosfn_read_char_attr
15553 37EE           83C4                   04  add	sp,*4
15554                                           !BCC_EOS
15555                                           ! 1832      break;
15556 37F1           E9         03DA            br 	.1
15557                                           !BCC_EOS
15558                                           ! 1833    case 0x09:
15559                                           ! 1834      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15560                       000037F4            .1B:
15561                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15562 37F4           FF76         10            push	$10[bp]
15563                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15564 37F7           8A46         0C            mov	al,$C[bp]
15565                                           ! Debug: list unsigned char = al+0 (used reg = )
15566 37FA           30E4                       xor	ah,ah
15567 37FC           50                         push	ax
15568                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15569 37FD           8B46         0C            mov	ax,$C[bp]
15570 3800           88E0                       mov	al,ah
15571 3802           30E4                       xor	ah,ah
15572                                           ! Debug: list unsigned int = ax+0 (used reg = )
15573 3804           50                         push	ax
15574                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15575 3805           8A46         12            mov	al,$12[bp]
15576                                           ! Debug: list unsigned char = al+0 (used reg = )
15577 3808           30E4                       xor	ah,ah
15578 380A           50                         push	ax
15579                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15580 380B           E8         1DB1            call	_biosfn_write_char_attr
15581 380E           83C4                   08  add	sp,*8
15582                                           !BCC_EOS
15583                                           ! 1835      break;
15584 3811           E9         03BA            br 	.1
15585                                           !BCC_EOS
15586                                           ! 1836    case 0x0A:
15587                                           ! 1837      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15588                       00003814            .1C:
15589                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15590 3814           FF76         10            push	$10[bp]
15591                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15592 3817           8A46         0C            mov	al,$C[bp]
15593                                           ! Debug: list unsigned char = al+0 (used reg = )
15594 381A           30E4                       xor	ah,ah
15595 381C           50                         push	ax
15596                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15597 381D           8B46         0C            mov	ax,$C[bp]
15598 3820           88E0                       mov	al,ah
15599 3822           30E4                       xor	ah,ah
15600                                           ! Debug: list unsigned int = ax+0 (used reg = )
15601 3824           50                         push	ax
15602                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15603 3825           8A46         12            mov	al,$12[bp]
15604                                           ! Debug: list unsigned char = al+0 (used reg = )
15605 3828           30E4                       xor	ah,ah
15606 382A           50                         push	ax
15607                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15608 382B           E8         1F77            call	_biosfn_write_char_only
15609 382E           83C4                   08  add	sp,*8
15610                                           !BCC_EOS
15611                                           ! 1838      break;
15612 3831           E9         039A            br 	.1
15613                                           !BCC_EOS
15614                                           ! 1839    case 0x0C:
15615                                           ! 1840      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15616                       00003834            .1D:
15617                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15618 3834           FF76         0E            push	$E[bp]
15619                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15620 3837           FF76         10            push	$10[bp]
15621                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15622 383A           8A46         12            mov	al,$12[bp]
15623                                           ! Debug: list unsigned char = al+0 (used reg = )
15624 383D           30E4                       xor	ah,ah
15625 383F           50                         push	ax
15626                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15627 3840           8B46         0C            mov	ax,$C[bp]
15628 3843           88E0                       mov	al,ah
15629 3845           30E4                       xor	ah,ah
15630                                           ! Debug: list unsigned int = ax+0 (used reg = )
15631 3847           50                         push	ax
15632                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15633 3848           E8         21BC            call	_biosfn_write_pixel
15634 384B           83C4                   08  add	sp,*8
15635                                           !BCC_EOS
15636                                           ! 1841      break;
15637 384E           E9         037D            br 	.1
15638                                           !BCC_EOS
15639                                           ! 1842    case 0x0D:
15640                                           ! 1843      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15641                       00003851            .1E:
15642                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15643 3851           8D5E         12            lea	bx,$12[bp]
15644 3854           53                         push	bx
15645                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15646 3855           FF76         0E            push	$E[bp]
15647                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15648 3858           FF76         10            push	$10[bp]
15649                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15650 385B           8B46         0C            mov	ax,$C[bp]
15651 385E           88E0                       mov	al,ah
15652 3860           30E4                       xor	ah,ah
15653                                           ! Debug: list unsigned int = ax+0 (used reg = )
15654 3862           50                         push	ax
15655                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15656 3863           E8         243D            call	_biosfn_read_pixel
15657 3866           83C4                   08  add	sp,*8
15658                                           !BCC_EOS
15659                                           ! 1844      break;
15660 3869           E9         0362            br 	.1
15661                                           !BCC_EOS
15662                                           ! 1845    case 0x0E:
15663                                           ! 1846      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15664                       0000386C            .1F:
15665                                           ! Debug: list int = const 2 (used reg = )
15666 386C           B8                   0002  mov	ax,*2
15667 386F           50                         push	ax
15668                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15669 3870           8A46         0C            mov	al,$C[bp]
15670                                           ! Debug: list unsigned char = al+0 (used reg = )
15671 3873           30E4                       xor	ah,ah
15672 3875           50                         push	ax
15673                                           ! Debug: list int = const $FF (used reg = )
15674 3876           B8                   00FF  mov	ax,#$FF
15675 3879           50                         push	ax
15676                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15677 387A           8A46         12            mov	al,$12[bp]
15678                                           ! Debug: list unsigned char = al+0 (used reg = )
15679 387D           30E4                       xor	ah,ah
15680 387F           50                         push	ax
15681                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15682 3880           E8         2626            call	_biosfn_write_teletype
15683 3883           83C4                   08  add	sp,*8
15684                                           !BCC_EOS
15685                                           ! 1847      break;
15686 3886           E9         0345            br 	.1
15687                                           !BCC_EOS
15688                                           ! 1848    case 0x10:
15689                                           ! 1849      biosfn_perform_gray_scale_summing(BX,CX);
15690                       00003889            .20:
15691                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15692 3889           FF76         10            push	$10[bp]
15693                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15694 388C           FF76         0C            push	$C[bp]
15695                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15696 388F           E8         2C5B            call	_biosfn_perform_gray_scale_summing
15697 3892           83C4                   04  add	sp,*4
15698                                           !BCC_EOS
15699                                           ! 1850      break;
15700 3895           E9         0336            br 	.1
15701                                           !BCC_EOS
15702                                           ! 1851    case 0x11:
15703                                           ! 1852      switch(( AX & 0x00ff ))
15704                       00003898            .21:
15705                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15706 3898           8A46         12            mov	al,$12[bp]
15707                                           ! 1853       {
15708 389B           E9         00E1            br 	.24
15709                                           ! 1854        case 0x00:
15710                                           ! 1855        case 0x10:
15711                       0000389E            .25:
15712                                           ! 1856         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15713                       0000389E            .26:
15714                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15715 389E           8B46         0C            mov	ax,$C[bp]
15716 38A1           88E0                       mov	al,ah
15717 38A3           30E4                       xor	ah,ah
15718                                           ! Debug: list unsigned int = ax+0 (used reg = )
15719 38A5           50                         push	ax
15720                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15721 38A6           8A46         0C            mov	al,$C[bp]
15722                                           ! Debug: list unsigned char = al+0 (used reg = )
15723 38A9           30E4                       xor	ah,ah
15724 38AB           50                         push	ax
15725                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15726 38AC           FF76         0E            push	$E[bp]
15727                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15728 38AF           FF76         10            push	$10[bp]
15729                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15730 38B2           FF76         08            push	8[bp]
15731                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15732 38B5           FF76         16            push	$16[bp]
15733                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15734 38B8           8A46         12            mov	al,$12[bp]
15735                                           ! Debug: list unsigned char = al+0 (used reg = )
15736 38BB           30E4                       xor	ah,ah
15737 38BD           50                         push	ax
15738                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15739 38BE           E8         2ED3            call	_biosfn_load_text_user_pat
15740 38C1           83C4                   0E  add	sp,*$E
15741                                           !BCC_EOS
15742                                           ! 1857         break;
15743 38C4           E9         010C            br 	.22
15744                                           !BCC_EOS
15745                                           ! 1858        case 0x01:
15746                                           ! 1859        case 0x11:
15747                       000038C7            .27:
15748                                           ! 1860         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15749                       000038C7            .28:
15750                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15751 38C7           8A46         0C            mov	al,$C[bp]
15752                                           ! Debug: list unsigned char = al+0 (used reg = )
15753 38CA           30E4                       xor	ah,ah
15754 38CC           50                         push	ax
15755                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15756 38CD           8A46         12            mov	al,$12[bp]
15757                                           ! Debug: list unsigned char = al+0 (used reg = )
15758 38D0           30E4                       xor	ah,ah
15759 38D2           50                         push	ax
15760                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15761 38D3           E8         2F5A            call	_biosfn_load_text_8_14_pat
15762 38D6           83C4                   04  add	sp,*4
15763                                           !BCC_EOS
15764                                           ! 1861         break;
15765 38D9           E9         00F7            br 	.22
15766                                           !BCC_EOS
15767                                           ! 1862        case 0x02:
15768                                           ! 1863        case 0x12:
15769                       000038DC            .29:
15770                                           ! 1864         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15771                       000038DC            .2A:
15772                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15773 38DC           8A46         0C            mov	al,$C[bp]
15774                                           ! Debug: list unsigned char = al+0 (used reg = )
15775 38DF           30E4                       xor	ah,ah
15776 38E1           50                         push	ax
15777                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15778 38E2           8A46         12            mov	al,$12[bp]
15779                                           ! Debug: list unsigned char = al+0 (used reg = )
15780 38E5           30E4                       xor	ah,ah
15781 38E7           50                         push	ax
15782                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15783 38E8           E8         2FDC            call	_biosfn_load_text_8_8_pat
15784 38EB           83C4                   04  add	sp,*4
15785                                           !BCC_EOS
15786                                           ! 1865         break;
15787 38EE           E9         00E2            br 	.22
15788                                           !BCC_EOS
15789                                           ! 1866        case 0x04:
15790                                           ! 1867        case 0x14:
15791                       000038F1            .2B:
15792                                           ! 1868         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15793                       000038F1            .2C:
15794                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15795 38F1           8A46         0C            mov	al,$C[bp]
15796                                           ! Debug: list unsigned char = al+0 (used reg = )
15797 38F4           30E4                       xor	ah,ah
15798 38F6           50                         push	ax
15799                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15800 38F7           8A46         12            mov	al,$12[bp]
15801                                           ! Debug: list unsigned char = al+0 (used reg = )
15802 38FA           30E4                       xor	ah,ah
15803 38FC           50                         push	ax
15804                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15805 38FD           E8         3065            call	_biosfn_load_text_8_16_pat
15806 3900           83C4                   04  add	sp,*4
15807                                           !BCC_EOS
15808                                           ! 1869         break;
15809 3903           E9         00CD            br 	.22
15810                                           !BCC_EOS
15811                                           ! 1870        case 0x20:
15812                                           ! 1871         biosfn_load_gfx_8_8_chars(ES,BP);
15813                       00003906            .2D:
15814                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15815 3906           FF76         08            push	8[bp]
15816                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15817 3909           FF76         16            push	$16[bp]
15818                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15819 390C           E8         30E7            call	_biosfn_load_gfx_8_8_chars
15820 390F           83C4                   04  add	sp,*4
15821                                           !BCC_EOS
15822                                           ! 1872         break;
15823 3912           E9         00BE            br 	.22
15824                                           !BCC_EOS
15825                                           ! 1873        case 0x21:
15826                                           ! 1874         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00f
15827                       00003915            .2E:
15828                                           ! 1874 f ),( DX & 0x00ff ));
15829                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15830 3915           8A46         0E            mov	al,$E[bp]
15831                                           ! Debug: list unsigned char = al+0 (used reg = )
15832 3918           30E4                       xor	ah,ah
15833 391A           50                         push	ax
15834                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15835 391B           8A46         0C            mov	al,$C[bp]
15836                                           ! Debug: list unsigned char = al+0 (used reg = )
15837 391E           30E4                       xor	ah,ah
15838 3920           50                         push	ax
15839                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15840 3921           FF76         10            push	$10[bp]
15841                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15842 3924           FF76         08            push	8[bp]
15843                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15844 3927           FF76         16            push	$16[bp]
15845                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15846 392A           E8         30FD            call	_biosfn_load_gfx_user_chars
15847 392D           83C4                   0A  add	sp,*$A
15848                                           !BCC_EOS
15849                                           ! 1875         break;
15850 3930           E9         00A0            br 	.22
15851                                           !BCC_EOS
15852                                           ! 1876        case 0x22:
15853                                           ! 1877         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15854                       00003933            .2F:
15855                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15856 3933           8A46         0C            mov	al,$C[bp]
15857                                           ! Debug: list unsigned char = al+0 (used reg = )
15858 3936           30E4                       xor	ah,ah
15859 3938           50                         push	ax
15860                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15861 3939           E8         3194            call	_biosfn_load_gfx_8_14_chars
15862 393C           44                         inc	sp
15863 393D           44                         inc	sp
15864                                           !BCC_EOS
15865                                           ! 1878         break;
15866 393E           E9         0092            br 	.22
15867                                           !BCC_EOS
15868                                           ! 1879        case 0x23:
15869                                           ! 1880         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15870                       00003941            .30:
15871                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15872 3941           8A46         0C            mov	al,$C[bp]
15873                                           ! Debug: list unsigned char = al+0 (used reg = )
15874 3944           30E4                       xor	ah,ah
15875 3946           50                         push	ax
15876                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15877 3947           E8         320E            call	_biosfn_load_gfx_8_8_dd_chars
15878 394A           44                         inc	sp
15879 394B           44                         inc	sp
15880                                           !BCC_EOS
15881                                           ! 1881         break;
15882 394C           E9         0084            br 	.22
15883                                           !BCC_EOS
15884                                           ! 1882        case 0x24:
15885                                           ! 1883         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15886                       0000394F            .31:
15887                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15888 394F           8A46         0C            mov	al,$C[bp]
15889                                           ! Debug: list unsigned char = al+0 (used reg = )
15890 3952           30E4                       xor	ah,ah
15891 3954           50                         push	ax
15892                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15893 3955           E8         3287            call	_biosfn_load_gfx_8_16_chars
15894 3958           44                         inc	sp
15895 3959           44                         inc	sp
15896                                           !BCC_EOS
15897                                           ! 1884         break;
15898 395A           E9         0076            br 	.22
15899                                           !BCC_EOS
15900                                           ! 1885        case 0x30:
15901                                           ! 1886         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15902                       0000395D            .32:
15903                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15904 395D           8D5E         0E            lea	bx,$E[bp]
15905 3960           53                         push	bx
15906                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15907 3961           8D5E         10            lea	bx,$10[bp]
15908 3964           53                         push	bx
15909                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15910 3965           8D5E         08            lea	bx,8[bp]
15911 3968           53                         push	bx
15912                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15913 3969           8D5E         16            lea	bx,$16[bp]
15914 396C           53                         push	bx
15915                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15916 396D           8B46         0C            mov	ax,$C[bp]
15917 3970           88E0                       mov	al,ah
15918 3972           30E4                       xor	ah,ah
15919                                           ! Debug: list unsigned int = ax+0 (used reg = )
15920 3974           50                         push	ax
15921                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15922 3975           E8         32EE            call	_biosfn_get_font_info
15923 3978           83C4                   0A  add	sp,*$A
15924                                           !BCC_EOS
15925                                           ! 1887         break;
15926 397B           EB           56            jmp .22
15927                                           !BCC_EOS
15928                                           ! 1888       }
15929                                           ! 1889      break;
15930 397D           EB           54            jmp .22
15931                       0000397F            .24:
15932 397F           2C                     00  sub	al,*0
15933 3981         0F84         FF19            beq 	.25
15934 3985           2C                     01  sub	al,*1
15935 3987         0F84         FF3C            beq 	.27
15936 398B           2C                     01  sub	al,*1
15937 398D         0F84         FF4B            beq 	.29
15938 3991           2C                     02  sub	al,*2
15939 3993         0F84         FF5A            beq 	.2B
15940 3997           2C                     0C  sub	al,*$C
15941 3999         0F84         FF01            beq 	.26
15942 399D           2C                     01  sub	al,*1
15943 399F         0F84         FF24            beq 	.28
15944 39A3           2C                     01  sub	al,*1
15945 39A5         0F84         FF33            beq 	.2A
15946 39A9           2C                     02  sub	al,*2
15947 39AB         0F84         FF42            beq 	.2C
15948 39AF           2C                     0C  sub	al,*$C
15949 39B1         0F84         FF51            beq 	.2D
15950 39B5           2C                     01  sub	al,*1
15951 39B7         0F84         FF5A            beq 	.2E
15952 39BB           2C                     01  sub	al,*1
15953 39BD         0F84         FF72            beq 	.2F
15954 39C1           2C                     01  sub	al,*1
15955 39C3         0F84         FF7A            beq 	.30
15956 39C7           2C                     01  sub	al,*1
15957 39C9         0F84         FF82            beq 	.31
15958 39CD           2C                     0C  sub	al,*$C
15959 39CF         0F84         FF8A            beq 	.32
15960                       000039D3            .22:
15961 39D3           E9         01F8            br 	.1
15962                                           !BCC_EOS
15963                                           ! 1890    case 0x12:
15964                                           ! 1891      switch(( BX & 0x00ff ))
15965                       000039D6            .33:
15966                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15967 39D6           8A46         0C            mov	al,$C[bp]
15968                                           ! 1892       {
15969 39D9           EB           3C            jmp .36
15970                                           ! 1893        case 0x20:
15971                                           ! 1894         biosfn_alternate_prtsc();
15972                       000039DB            .37:
15973                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15974 39DB           E8         3462            call	_biosfn_alternate_prtsc
15975                                           !BCC_EOS
15976                                           ! 1895         break;
15977 39DE           EB           43            jmp .34
15978                                           !BCC_EOS
15979                                           ! 1896        case 0x35:
15980                                           ! 1897         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15981                       000039E0            .38:
15982                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15983 39E0           FF76         0E            push	$E[bp]
15984                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15985 39E3           FF76         16            push	$16[bp]
15986                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15987 39E6           8A46         12            mov	al,$12[bp]
15988                                           ! Debug: list unsigned char = al+0 (used reg = )
15989 39E9           30E4                       xor	ah,ah
15990 39EB           50                         push	ax
15991                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15992 39EC           E8         352B            call	_biosfn_switch_video_interface
15993 39EF           83C4                   06  add	sp,*6
15994                                           !BCC_EOS
15995                                           ! 1898         AX = ((AX & 0xff00) | (0x12));
15996                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15997 39F2           8B46         12            mov	ax,$12[bp]
15998 39F5           30C0                       xor	al,al
15999                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16000 39F7           0C                     12  or	al,*$12
16001                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16002 39F9           8946         12            mov	$12[bp],ax
16003                                           !BCC_EOS
16004                                           ! 1899         break;
16005 39FC           EB           25            jmp .34
16006                                           !BCC_EOS
16007                                           ! 1900        case 0x36:
16008                                           ! 1901         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16009                       000039FE            .39:
16010                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16011 39FE           8A46         12            mov	al,$12[bp]
16012                                           ! Debug: list unsigned char = al+0 (used reg = )
16013 3A01           30E4                       xor	ah,ah
16014 3A03           50                         push	ax
16015                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16016 3A04           E8         3514            call	_biosfn_enable_video_refresh_control
16017 3A07           44                         inc	sp
16018 3A08           44                         inc	sp
16019                                           !BCC_EOS
16020                                           ! 1902         AX = ((AX & 0xff00) | (0x12));
16021                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16022 3A09           8B46         12            mov	ax,$12[bp]
16023 3A0C           30C0                       xor	al,al
16024                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16025 3A0E           0C                     12  or	al,*$12
16026                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16027 3A10           8946         12            mov	$12[bp],ax
16028                                           !BCC_EOS
16029                                           ! 1903         break;
16030 3A13           EB           0E            jmp .34
16031                                           !BCC_EOS
16032                                           ! 1904       }
16033                                           ! 1905      break;
16034 3A15           EB           0C            jmp .34
16035                       00003A17            .36:
16036 3A17           2C                     20  sub	al,*$20
16037 3A19           74           C0            je 	.37
16038 3A1B           2C                     15  sub	al,*$15
16039 3A1D           74           C1            je 	.38
16040 3A1F           2C                     01  sub	al,*1
16041 3A21           74           DB            je 	.39
16042                       00003A23            .34:
16043 3A23           E9         01A8            br 	.1
16044                                           !BCC_EOS
16045                                           ! 1906    case 0x13:
16046                                           ! 1907      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16047                       00003A26            .3A:
16048                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16049 3A26           FF76         08            push	8[bp]
16050                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16051 3A29           FF76         16            push	$16[bp]
16052                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16053 3A2C           8A46         0E            mov	al,$E[bp]
16054                                           ! Debug: list unsigned char = al+0 (used reg = )
16055 3A2F           30E4                       xor	ah,ah
16056 3A31           50                         push	ax
16057                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16058 3A32           8B46         0E            mov	ax,$E[bp]
16059 3A35           88E0                       mov	al,ah
16060 3A37           30E4                       xor	ah,ah
16061                                           ! Debug: list unsigned int = ax+0 (used reg = )
16062 3A39           50                         push	ax
16063                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16064 3A3A           FF76         10            push	$10[bp]
16065                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16066 3A3D           8A46         0C            mov	al,$C[bp]
16067                                           ! Debug: list unsigned char = al+0 (used reg = )
16068 3A40           30E4                       xor	ah,ah
16069 3A42           50                         push	ax
16070                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16071 3A43           8B46         0C            mov	ax,$C[bp]
16072 3A46           88E0                       mov	al,ah
16073 3A48           30E4                       xor	ah,ah
16074                                           ! Debug: list unsigned int = ax+0 (used reg = )
16075 3A4A           50                         push	ax
16076                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16077 3A4B           8A46         12            mov	al,$12[bp]
16078                                           ! Debug: list unsigned char = al+0 (used reg = )
16079 3A4E           30E4                       xor	ah,ah
16080 3A50           50                         push	ax
16081                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16082 3A51           E8         34C8            call	_biosfn_write_string
16083 3A54           83C4                   10  add	sp,*$10
16084                                           !BCC_EOS
16085                                           ! 1908      break;
16086 3A57           E9         0174            br 	.1
16087                                           !BCC_EOS
16088                                           ! 1909    case 0x1B:
16089                                           ! 1910      biosfn_read_state_info(BX,ES,DI);
16090                       00003A5A            .3B:
16091                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16092 3A5A           FF76         04            push	4[bp]
16093                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16094 3A5D           FF76         16            push	$16[bp]
16095                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16096 3A60           FF76         0C            push	$C[bp]
16097                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16098 3A63           E8         35C2            call	_biosfn_read_state_info
16099 3A66           83C4                   06  add	sp,*6
16100                                           !BCC_EOS
16101                                           ! 1911      AX = ((AX & 0xff00) | (0x1B));
16102                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16103 3A69           8B46         12            mov	ax,$12[bp]
16104 3A6C           30C0                       xor	al,al
16105                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16106 3A6E           0C                     1B  or	al,*$1B
16107                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16108 3A70           8946         12            mov	$12[bp],ax
16109                                           !BCC_EOS
16110                                           ! 1912      break;
16111 3A73           E9         0158            br 	.1
16112                                           !BCC_EOS
16113                                           ! 1913    case 0x1C:
16114                                           ! 1914      switch(( AX & 0x00ff ))
16115                       00003A76            .3C:
16116                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16117 3A76           8A46         12            mov	al,$12[bp]
16118                                           ! 1915       {
16119 3A79           EB           33            jmp .3F
16120                                           ! 1916        case 0x00:
16121                                           ! 1917         biosfn_read_video_state_size(CX,&BX);
16122                       00003A7B            .40:
16123                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16124 3A7B           8D5E         0C            lea	bx,$C[bp]
16125 3A7E           53                         push	bx
16126                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16127 3A7F           FF76         10            push	$10[bp]
16128                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16129 3A82           E8         3722            call	_biosfn_read_video_state_size
16130 3A85           83C4                   04  add	sp,*4
16131                                           !BCC_EOS
16132                                           ! 1918         break;
16133 3A88           EB           30            jmp .3D
16134                                           !BCC_EOS
16135                                           ! 1919        case 0x01:
16136                                           ! 1920         biosfn_save_video_state(CX,ES,BX);
16137                       00003A8A            .41:
16138                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16139 3A8A           FF76         0C            push	$C[bp]
16140                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16141 3A8D           FF76         16            push	$16[bp]
16142                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16143 3A90           FF76         10            push	$10[bp]
16144                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16145 3A93           E8         3735            call	_biosfn_save_video_state
16146 3A96           83C4                   06  add	sp,*6
16147                                           !BCC_EOS
16148                                           ! 1921         break;
16149 3A99           EB           1F            jmp .3D
16150                                           !BCC_EOS
16151                                           ! 1922        case 0x02:
16152                                           ! 1923         biosfn_restore_video_state(CX,ES,BX);
16153                       00003A9B            .42:
16154                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16155 3A9B           FF76         0C            push	$C[bp]
16156                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16157 3A9E           FF76         16            push	$16[bp]
16158                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16159 3AA1           FF76         10            push	$10[bp]
16160                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16161 3AA4           E8         3CEE            call	_biosfn_restore_video_state
16162 3AA7           83C4                   06  add	sp,*6
16163                                           !BCC_EOS
16164                                           ! 1924         break;
16165 3AAA           EB           0E            jmp .3D
16166                                           !BCC_EOS
16167                                           ! 1925       }
16168                                           ! 1926      AX = ((AX & 0xff00) | (0x1C));
16169 3AAC           EB           0C            jmp .3D
16170                       00003AAE            .3F:
16171 3AAE           2C                     00  sub	al,*0
16172 3AB0           74           C9            je 	.40
16173 3AB2           2C                     01  sub	al,*1
16174 3AB4           74           D4            je 	.41
16175 3AB6           2C                     01  sub	al,*1
16176 3AB8           74           E1            je 	.42
16177                       00003ABA            .3D:
16178                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16179 3ABA           8B46         12            mov	ax,$12[bp]
16180 3ABD           30C0                       xor	al,al
16181                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16182 3ABF           0C                     1C  or	al,*$1C
16183                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16184 3AC1           8946         12            mov	$12[bp],ax
16185                                           !BCC_EOS
16186                                           ! 1927      break;
16187 3AC4           E9         0107            br 	.1
16188                                           !BCC_EOS
16189                                           ! 1928    case 0x4f:
16190                                           ! 1929      if (vbe_has_vbe_display()) {
16191                       00003AC7            .43:
16192                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16193 3AC7           E8         5EA6            call	_vbe_has_vbe_display
16194 3ACA           85C0                       test	ax,ax
16195 3ACC         0F84         00A0            beq 	.44
16196                       00003AD0            .45:
16197                                           ! 1930        switch(( AX & 0x00ff ))
16198                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16199 3AD0           8A46         12            mov	al,$12[bp]
16200                                           ! 1931        {
16201 3AD3           EB           6E            jmp .48
16202                                           ! 1932          case 0x00:
16203                                           ! 1933           vbe_biosfn_return_controller_information(&AX,ES,DI);
16204                       00003AD5            .49:
16205                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16206 3AD5           FF76         04            push	4[bp]
16207                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16208 3AD8           FF76         16            push	$16[bp]
16209                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16210 3ADB           8D5E         12            lea	bx,$12[bp]
16211 3ADE           53                         push	bx
16212                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16213 3ADF           E8         5F05            call	_vbe_biosfn_return_controller_information
16214 3AE2           83C4                   06  add	sp,*6
16215                                           !BCC_EOS
16216                                           ! 1934           break;
16217 3AE5           E9         0086            br 	.46
16218                                           !BCC_EOS
16219                                           ! 1935          case 0x01:
16220                                           ! 1936           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16221                       00003AE8            .4A:
16222                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16223 3AE8           FF76         04            push	4[bp]
16224                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16225 3AEB           FF76         16            push	$16[bp]
16226                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16227 3AEE           FF76         10            push	$10[bp]
16228                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16229 3AF1           8D5E         12            lea	bx,$12[bp]
16230 3AF4           53                         push	bx
16231                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16232 3AF5           E8         6147            call	_vbe_biosfn_return_mode_information
16233 3AF8           83C4                   08  add	sp,*8
16234                                           !BCC_EOS
16235                                           ! 1937           break;
16236 3AFB           EB           71            jmp .46
16237                                           !BCC_EOS
16238                                           ! 1938          case 0x02:
16239                                           ! 1939           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16240                       00003AFD            .4B:
16241                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16242 3AFD           FF76         04            push	4[bp]
16243                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16244 3B00           FF76         16            push	$16[bp]
16245                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16246 3B03           FF76         0C            push	$C[bp]
16247                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16248 3B06           8D5E         12            lea	bx,$12[bp]
16249 3B09           53                         push	bx
16250                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16251 3B0A           E8         624E            call	_vbe_biosfn_set_mode
16252 3B0D           83C4                   08  add	sp,*8
16253                                           !BCC_EOS
16254                                           ! 1940           break;
16255 3B10           EB           5C            jmp .46
16256                                           !BCC_EOS
16257                                           ! 1941          case 0x04:
16258                                           ! 1942           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16259                       00003B12            .4C:
16260                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16261 3B12           8D5E         0C            lea	bx,$C[bp]
16262 3B15           53                         push	bx
16263                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16264 3B16           FF76         16            push	$16[bp]
16265                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16266 3B19           FF76         0E            push	$E[bp]
16267                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16268 3B1C           FF76         10            push	$10[bp]
16269                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16270 3B1F           8D5E         12            lea	bx,$12[bp]
16271 3B22           53                         push	bx
16272                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16273 3B23           E8         657C            call	_vbe_biosfn_save_restore_state
16274 3B26           83C4                   0A  add	sp,*$A
16275                                           !BCC_EOS
16276                                           ! 1943           break;
16277 3B29           EB           43            jmp .46
16278                                           !BCC_EOS
16279                                           ! 1944          case 0x09:
16280                                           ! 1945           AX=0x100;
16281                       00003B2B            .4D:
16282                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16283 3B2B           B8                   0100  mov	ax,#$100
16284 3B2E           8946         12            mov	$12[bp],ax
16285                                           !BCC_EOS
16286                                           ! 1946           break;
16287 3B31           EB           3B            jmp .46
16288                                           !BCC_EOS
16289                                           ! 1947          case 0x0A:
16290                                           ! 1948           AX=0x100;
16291                       00003B33            .4E:
16292                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16293 3B33           B8                   0100  mov	ax,#$100
16294 3B36           8946         12            mov	$12[bp],ax
16295                                           !BCC_EOS
16296                                           ! 1949           break;
16297 3B39           EB           33            jmp .46
16298                                           !BCC_EOS
16299                                           ! 1950          default:
16300                                           ! 1951           AX=0x100;
16301                       00003B3B            .4F:
16302                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16303 3B3B           B8                   0100  mov	ax,#$100
16304 3B3E           8946         12            mov	$12[bp],ax
16305                                           !BCC_EOS
16306                                           ! 1952           }
16307                                           ! 1953         }
16308 3B41           EB           2B            jmp .46
16309                       00003B43            .48:
16310 3B43           2C                     00  sub	al,*0
16311 3B45           72           F4            jb 	.4F
16312 3B47           3C                     0A  cmp	al,*$A
16313 3B49           77           21            ja  	.50
16314 3B4B           30E4                       xor	ah,ah
16315 3B4D           D1E0                       shl	ax,*1
16316 3B4F           89C3                       mov	bx,ax
16317 3B51           2E                         seg	cs
16318 3B52           FFA7       3B56            br	.51[bx]
16319                       00003B56            .51:
16320 3B56                      3AD5            .word	.49
16321 3B58                      3AE8            .word	.4A
16322 3B5A                      3AFD            .word	.4B
16323 3B5C                      3B3B            .word	.4F
16324 3B5E                      3B12            .word	.4C
16325 3B60                      3B3B            .word	.4F
16326 3B62                      3B3B            .word	.4F
16327 3B64                      3B3B            .word	.4F
16328 3B66                      3B3B            .word	.4F
16329 3B68                      3B2B            .word	.4D
16330 3B6A                      3B33            .word	.4E
16331                       00003B6C            .50:
16332 3B6C           EB           CD            jmp	.4F
16333                       00003B6E            .46:
16334                                           ! 1954         else {
16335 3B6E           EB           06            jmp .52
16336                       00003B70            .44:
16337                                           ! 1955  
16338                                           ! 1955          AX=0x0100;
16339                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16340 3B70           B8                   0100  mov	ax,#$100
16341 3B73           8946         12            mov	$12[bp],ax
16342                                           !BCC_EOS
16343                                           ! 1956           }
16344                                           ! 1957         break;
16345                       00003B76            .52:
16346 3B76           EB           56            jmp .1
16347                                           !BCC_EOS
16348                                           ! 1958   }
16349                                           ! 1959 }
16350 3B78           EB           54            jmp .1
16351                       00003B7A            .3:
16352 3B7A           2D                   0000  sub	ax,*0
16353 3B7D           7C           4F            jl  	.1
16354 3B7F           3D                   001C  cmp	ax,*$1C
16355 3B82           77           43            ja  	.53
16356 3B84           D1E0                       shl	ax,*1
16357 3B86           89C3                       mov	bx,ax
16358 3B88           2E                         seg	cs
16359 3B89           FFA7       3B8D            br	.54[bx]
16360                       00003B8D            .54:
16361 3B8D                      36A3            .word	.4
16362 3B8F                      3701            .word	.13
16363 3B91                      3718            .word	.14
16364 3B93                      372C            .word	.15
16365 3B95                      3745            .word	.16
16366 3B97                      375C            .word	.17
16367 3B99                      376A            .word	.18
16368 3B9B                      37A5            .word	.19
16369 3B9D                      37DF            .word	.1A
16370 3B9F                      37F4            .word	.1B
16371 3BA1                      3814            .word	.1C
16372 3BA3                      3BCE            .word	.1
16373 3BA5                      3834            .word	.1D
16374 3BA7                      3851            .word	.1E
16375 3BA9                      386C            .word	.1F
16376 3BAB                      3BCE            .word	.1
16377 3BAD                      3889            .word	.20
16378 3BAF                      3898            .word	.21
16379 3BB1                      39D6            .word	.33
16380 3BB3                      3A26            .word	.3A
16381 3BB5                      3BCE            .word	.1
16382 3BB7                      3BCE            .word	.1
16383 3BB9                      3BCE            .word	.1
16384 3BBB                      3BCE            .word	.1
16385 3BBD                      3BCE            .word	.1
16386 3BBF                      3BCE            .word	.1
16387 3BC1                      3BCE            .word	.1
16388 3BC3                      3A5A            .word	.3B
16389 3BC5                      3A76            .word	.3C
16390                       00003BC7            .53:
16391 3BC7           2D                   004F  sub	ax,*$4F
16392 3BCA         0F84         FEF9            beq 	.43
16393                       00003BCE            .1:
16394                       FFFFFFFE            ..FFFF	=	-2
16395 3BCE           5D                         pop	bp
16396 3BCF           C3                         ret
16397                                           ! 1960 static void load_dac_palette(num) Bit8u num;
16398                                           ! Register BX used in function int10_func
16399                       00003BD0            _load_dac_palette:
16400                                           !BCC_EOS
16401                                           ! 1961 {
16402                                           ! 1962   Bit8u *palette;
16403                                           !BCC_EOS
16404                                           ! 1963   Bit16u i;
16405                                           !BCC_EOS
16406                                           ! 1964   outb(0x3c8,0x00);
16407 3BD0           55                         push	bp
16408 3BD1           89E5                       mov	bp,sp
16409 3BD3           83C4                   FC  add	sp,*-4
16410                                           ! Debug: list int = const 0 (used reg = )
16411 3BD6           31C0                       xor	ax,ax
16412 3BD8           50                         push	ax
16413                                           ! Debug: list int = const $3C8 (used reg = )
16414 3BD9           B8                   03C8  mov	ax,#$3C8
16415 3BDC           50                         push	ax
16416                                           ! Debug: func () void = outb+0 (used reg = )
16417 3BDD           E8         42EB            call	_outb
16418 3BE0           83C4                   04  add	sp,*4
16419                                           !BCC_EOS
16420                                           ! 1965   switch (num)
16421 3BE3           8A46         04            mov	al,4[bp]
16422                                           ! 1966   {
16423 3BE6           EB           22            jmp .57
16424                                           ! 1967     case 0:
16425                                           ! 1968       palette=&palette0;
16426                       00003BE8            .58:
16427                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+6-4] (used reg = )
16428 3BE8           BB                   0A4B  mov	bx,#_palette0
16429 3BEB           895E         FE            mov	-2[bp],bx
16430                                           !BCC_EOS
16431                                           ! 1969       break;
16432 3BEE           EB           2A            jmp .55
16433                                           !BCC_EOS
16434                                           ! 1970     case 1:
16435                                           ! 1971       palette=&palette1;
16436                       00003BF0            .59:
16437                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+6-4] (used reg = )
16438 3BF0           BB                   0B0B  mov	bx,#_palette1
16439 3BF3           895E         FE            mov	-2[bp],bx
16440                                           !BCC_EOS
16441                                           ! 1972       break;
16442 3BF6           EB           22            jmp .55
16443                                           !BCC_EOS
16444                                           ! 1973     case 2:
16445                                           ! 1974       palette=&palette2;
16446                       00003BF8            .5A:
16447                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+6-4] (used reg = )
16448 3BF8           BB                   0BCB  mov	bx,#_palette2
16449 3BFB           895E         FE            mov	-2[bp],bx
16450                                           !BCC_EOS
16451                                           ! 1975       break;
16452 3BFE           EB           1A            jmp .55
16453                                           !BCC_EOS
16454                                           ! 1976     case 3:
16455                                           ! 1977       palette=&palette3;
16456                       00003C00            .5B:
16457                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+6-4] (used reg = )
16458 3C00           BB                   0C8B  mov	bx,#_palette3
16459 3C03           895E         FE            mov	-2[bp],bx
16460                                           !BCC_EOS
16461                                           ! 1978       break;
16462 3C06           EB           12            jmp .55
16463                                           !BCC_EOS
16464                                           ! 1979   }
16465                                           ! 1980   for (i=0;i<0x0100;i++)
16466 3C08           EB           10            jmp .55
16467                       00003C0A            .57:
16468 3C0A           2C                     00  sub	al,*0
16469 3C0C           74           DA            je 	.58
16470 3C0E           2C                     01  sub	al,*1
16471 3C10           74           DE            je 	.59
16472 3C12           2C                     01  sub	al,*1
16473 3C14           74           E2            je 	.5A
16474 3C16           2C                     01  sub	al,*1
16475 3C18           74           E6            je 	.5B
16476                       00003C1A            .55:
16477                       FFFFFFFA            ..FFFE	=	-6
16478                                           ! Debug: eq int = const 0 to unsigned short i = [S+6-6] (used reg = )
16479 3C1A           31C0                       xor	ax,ax
16480 3C1C           8946         FC            mov	-4[bp],ax
16481                                           !BCC_EOS
16482                                           !BCC_EOS
16483                                           ! 1981   {
16484 3C1F           E9         009C            br 	.5E
16485                       00003C22            .5F:
16486                                           ! 1982     if(i<=dac_regs[num])
16487                                           ! Debug: ptradd unsigned char num = [S+6+2] to [4] unsigned char = dac_regs+0 (used reg = )
16488 3C22           8A46         04            mov	al,4[bp]
16489 3C25           30E4                       xor	ah,ah
16490 3C27           89C3                       mov	bx,ax
16491                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+6-6] (used reg = )
16492 3C29           8A87       02C7            mov	al,_dac_regs[bx]
16493 3C2D           30E4                       xor	ah,ah
16494 3C2F           3B46         FC            cmp	ax,-4[bp]
16495 3C32           72           5C            jb  	.60
16496                       00003C34            .61:
16497                                           ! 1983     {
16498                                           ! 1984       outb(0x3c9,palette[(i*3)+0]);
16499                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16500 3C34           8B46         FC            mov	ax,-4[bp]
16501 3C37           89C2                       mov	dx,ax
16502 3C39           D1E0                       shl	ax,*1
16503 3C3B           01D0                       add	ax,dx
16504                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16505                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+6-4] (used reg = )
16506 3C3D           0346         FE            add	ax,-2[bp]
16507 3C40           89C3                       mov	bx,ax
16508                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16509 3C42           8A07                       mov	al,[bx]
16510 3C44           30E4                       xor	ah,ah
16511 3C46           50                         push	ax
16512                                           ! Debug: list int = const $3C9 (used reg = )
16513 3C47           B8                   03C9  mov	ax,#$3C9
16514 3C4A           50                         push	ax
16515                                           ! Debug: func () void = outb+0 (used reg = )
16516 3C4B           E8         427D            call	_outb
16517 3C4E           83C4                   04  add	sp,*4
16518                                           !BCC_EOS
16519                                           ! 1985       outb(0x3c9,palette[(i*3)+1]);
16520                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16521 3C51           8B46         FC            mov	ax,-4[bp]
16522 3C54           89C2                       mov	dx,ax
16523 3C56           D1E0                       shl	ax,*1
16524 3C58           01D0                       add	ax,dx
16525                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16526                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+6-4] (used reg = )
16527 3C5A           40                         inc	ax
16528 3C5B           0346         FE            add	ax,-2[bp]
16529 3C5E           89C3                       mov	bx,ax
16530                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16531 3C60           8A07                       mov	al,[bx]
16532 3C62           30E4                       xor	ah,ah
16533 3C64           50                         push	ax
16534                                           ! Debug: list int = const $3C9 (used reg = )
16535 3C65           B8                   03C9  mov	ax,#$3C9
16536 3C68           50                         push	ax
16537                                           ! Debug: func () void = outb+0 (used reg = )
16538 3C69           E8         425F            call	_outb
16539 3C6C           83C4                   04  add	sp,*4
16540                                           !BCC_EOS
16541                                           ! 1986       outb(0x3c9,palette[(i*3)+2]);
16542                                           ! Debug: mul int = const 3 to unsigned short i = [S+6-6] (used reg = )
16543 3C6F           8B46         FC            mov	ax,-4[bp]
16544 3C72           89C2                       mov	dx,ax
16545 3C74           D1E0                       shl	ax,*1
16546 3C76           01D0                       add	ax,dx
16547                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16548                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+6-4] (used reg = )
16549 3C78           40                         inc	ax
16550 3C79           40                         inc	ax
16551 3C7A           0346         FE            add	ax,-2[bp]
16552 3C7D           89C3                       mov	bx,ax
16553                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16554 3C7F           8A07                       mov	al,[bx]
16555 3C81           30E4                       xor	ah,ah
16556 3C83           50                         push	ax
16557                                           ! Debug: list int = const $3C9 (used reg = )
16558 3C84           B8                   03C9  mov	ax,#$3C9
16559 3C87           50                         push	ax
16560                                           ! Debug: func () void = outb+0 (used reg = )
16561 3C88           E8         4240            call	_outb
16562 3C8B           83C4                   04  add	sp,*4
16563                                           !BCC_EOS
16564                                           ! 1987     }
16565                                           ! 1988     else
16566                                           ! 1989     {
16567 3C8E           EB           27            jmp .62
16568                       00003C90            .60:
16569                                           ! 1990       outb(0x3c9,0);
16570                                           ! Debug: list int = const 0 (used reg = )
16571 3C90           31C0                       xor	ax,ax
16572 3C92           50                         push	ax
16573                                           ! Debug: list int = const $3C9 (used reg = )
16574 3C93           B8                   03C9  mov	ax,#$3C9
16575 3C96           50                         push	ax
16576                                           ! Debug: func () void = outb+0 (used reg = )
16577 3C97           E8         4231            call	_outb
16578 3C9A           83C4                   04  add	sp,*4
16579                                           !BCC_EOS
16580                                           ! 1991       outb(0x3c9,0);
16581                                           ! Debug: list int = const 0 (used reg = )
16582 3C9D           31C0                       xor	ax,ax
16583 3C9F           50                         push	ax
16584                                           ! Debug: list int = const $3C9 (used reg = )
16585 3CA0           B8                   03C9  mov	ax,#$3C9
16586 3CA3           50                         push	ax
16587                                           ! Debug: func () void = outb+0 (used reg = )
16588 3CA4           E8         4224            call	_outb
16589 3CA7           83C4                   04  add	sp,*4
16590                                           !BCC_EOS
16591                                           ! 1992       outb(0x3c9,0);
16592                                           ! Debug: list int = const 0 (used reg = )
16593 3CAA           31C0                       xor	ax,ax
16594 3CAC           50                         push	ax
16595                                           ! Debug: list int = const $3C9 (used reg = )
16596 3CAD           B8                   03C9  mov	ax,#$3C9
16597 3CB0           50                         push	ax
16598                                           ! Debug: func () void = outb+0 (used reg = )
16599 3CB1           E8         4217            call	_outb
16600 3CB4           83C4                   04  add	sp,*4
16601                                           !BCC_EOS
16602                                           ! 1993     }
16603                                           ! 1994   }
16604                       00003CB7            .62:
16605                                           ! 1995 }
16606                       00003CB7            .5D:
16607                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
16608 3CB7           8B46         FC            mov	ax,-4[bp]
16609 3CBA           40                         inc	ax
16610 3CBB           8946         FC            mov	-4[bp],ax
16611                       00003CBE            .5E:
16612                                           ! Debug: lt int = const $100 to unsigned short i = [S+6-6] (used reg = )
16613 3CBE           8B46         FC            mov	ax,-4[bp]
16614 3CC1           3D                   0100  cmp	ax,#$100
16615 3CC4         0F82         FF5A            blo 	.5F
16616                       00003CC8            .63:
16617                       00003CC8            .5C:
16618 3CC8           89EC                       mov	sp,bp
16619 3CCA           5D                         pop	bp
16620 3CCB           C3                         ret
16621                                           ! 1996 static void biosfn_set_video_mode(mode) Bit8u mode;
16622                                           ! Register BX used in function load_dac_palette
16623                       00003CCC            _biosfn_set_video_mode:
16624                                           !BCC_EOS
16625                                           ! 1997 {
16626                                           ! 1998   Bit8u noclearmem=mode&0x80;
16627 3CCC           55                         push	bp
16628 3CCD           89E5                       mov	bp,sp
16629 3CCF           4C                         dec	sp
16630                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16631 3CD0           8A46         04            mov	al,4[bp]
16632 3CD3           24                     80  and	al,#$80
16633                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16634 3CD5           8846         FF            mov	-1[bp],al
16635                                           !BCC_EOS
16636                                           ! 1999   Bit8u line,mmask,*palette,vpti;
16637                                           !BCC_EOS
16638                                           ! 2000   Bit16u i,twidth,theightm1,cheight;
16639                                           !BCC_EOS
16640                                           ! 2001   Bit8u modeset_ctl,video_ctl,vga_switches;
16641                                           !BCC_EOS
16642                                           ! 2002   Bit16u crtc_addr;
16643                                           !BCC_EOS
16644                                           ! 2003   if (vbe_has_vbe_display()) {
16645 3CD8           83C4                   EB  add	sp,*-$15
16646                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16647 3CDB           E8         5C92            call	_vbe_has_vbe_display
16648 3CDE           85C0                       test	ax,ax
16649 3CE0           74           08            je  	.64
16650                       00003CE2            .65:
16651                                           ! 2004     dispi_set_enable(0x00);
16652                                           ! Debug: list int = const 0 (used reg = )
16653 3CE2           31C0                       xor	ax,ax
16654 3CE4           50                         push	ax
16655                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16656 3CE5           E8         5A55            call	_dispi_set_enable
16657 3CE8           44                         inc	sp
16658 3CE9           44                         inc	sp
16659                                           !BCC_EOS
16660                                           ! 2005   }
16661                                           ! 2006   mode=mode&0x7f;
16662                       00003CEA            .64:
16663                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16664 3CEA           8A46         04            mov	al,4[bp]
16665 3CED           24                     7F  and	al,*$7F
16666                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16667 3CEF           8846         04            mov	4[bp],al
16668                                           !BCC_EOS
16669                                           ! 2007   line=find_vga_entry(mode);
16670                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16671 3CF2           8A46         04            mov	al,4[bp]
16672 3CF5           30E4                       xor	ah,ah
16673 3CF7           50                         push	ax
16674                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16675 3CF8           E8         4078            call	_find_vga_entry
16676 3CFB           44                         inc	sp
16677 3CFC           44                         inc	sp
16678                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16679 3CFD           8846         FE            mov	-2[bp],al
16680                                           !BCC_EOS
16681                                           ! 2008   if(line==0xFF)
16682                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16683 3D00           8A46         FE            mov	al,-2[bp]
16684 3D03           3C                     FF  cmp	al,#$FF
16685 3D05           75           04            jne 	.66
16686                       00003D07            .67:
16687                                           ! 2009     return;
16688 3D07           89EC                       mov	sp,bp
16689 3D09           5D                         pop	bp
16690 3D0A           C3                         ret
16691                                           !BCC_EOS
16692                                           ! 2010   vpti=line_to_vpti[line];
16693                       00003D0B            .66:
16694                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] unsigned char = line_to_vpti+0 (used reg = )
16695 3D0B           8A46         FE            mov	al,-2[bp]
16696 3D0E           30E4                       xor	ah,ah
16697 3D10           89C3                       mov	bx,ax
16698                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16699 3D12           8A87       02B5            mov	al,_line_to_vpti[bx]
16700 3D16           8846         F9            mov	-7[bp],al
16701                                           !BCC_EOS
16702                                           ! 2011   twidth=video_param_table[vpti].twidth;
16703                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16704 3D19           8A46         F9            mov	al,-7[bp]
16705 3D1C           30E4                       xor	ah,ah
16706 3D1E           B1                     06  mov	cl,*6
16707 3D20           D3E0                       shl	ax,cl
16708 3D22           89C3                       mov	bx,ax
16709                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16710 3D24           8A87       02CB            mov	al,_video_param_table[bx]
16711 3D28           30E4                       xor	ah,ah
16712 3D2A           8946         F4            mov	-$C[bp],ax
16713                                           !BCC_EOS
16714                                           ! 2012   theightm1=video_param_table[vpti].theightm1;
16715                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16716 3D2D           8A46         F9            mov	al,-7[bp]
16717 3D30           30E4                       xor	ah,ah
16718 3D32           B1                     06  mov	cl,*6
16719 3D34           D3E0                       shl	ax,cl
16720 3D36           89C3                       mov	bx,ax
16721 3D38           81C3                 02CB  add	bx,#_video_param_table
16722                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16723 3D3C           8A47         01            mov	al,1[bx]
16724 3D3F           30E4                       xor	ah,ah
16725 3D41           8946         F2            mov	-$E[bp],ax
16726                                           !BCC_EOS
16727                                           ! 2013   cheight=video_param_table[vpti].cheight;
16728                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16729 3D44           8A46         F9            mov	al,-7[bp]
16730 3D47           30E4                       xor	ah,ah
16731 3D49           B1                     06  mov	cl,*6
16732 3D4B           D3E0                       shl	ax,cl
16733 3D4D           89C3                       mov	bx,ax
16734 3D4F           81C3                 02CB  add	bx,#_video_param_table
16735                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16736 3D53           8A47         02            mov	al,2[bx]
16737 3D56           30E4                       xor	ah,ah
16738 3D58           8946         F0            mov	-$10[bp],ax
16739                                           !BCC_EOS
16740                                           ! 2014   video_ctl=read_byte(0x40,0x87);
16741                                           ! Debug: list int = const $87 (used reg = )
16742 3D5B           B8                   0087  mov	ax,#$87
16743 3D5E           50                         push	ax
16744                                           ! Debug: list int = const $40 (used reg = )
16745 3D5F           B8                   0040  mov	ax,*$40
16746 3D62           50                         push	ax
16747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16748 3D63           E8         40F9            call	_read_byte
16749 3D66           83C4                   04  add	sp,*4
16750                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16751 3D69           8846         EE            mov	-$12[bp],al
16752                                           !BCC_EOS
16753                                           ! 2015   vga_switches=read_byte(0x40,0x88);
16754                                           ! Debug: list int = const $88 (used reg = )
16755 3D6C           B8                   0088  mov	ax,#$88
16756 3D6F           50                         push	ax
16757                                           ! Debug: list int = const $40 (used reg = )
16758 3D70           B8                   0040  mov	ax,*$40
16759 3D73           50                         push	ax
16760                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16761 3D74           E8         40E8            call	_read_byte
16762 3D77           83C4                   04  add	sp,*4
16763                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16764 3D7A           8846         ED            mov	-$13[bp],al
16765                                           !BCC_EOS
16766                                           ! 2016   modeset_ctl=read_byte(0x40,0x89);
16767                                           ! Debug: list int = const $89 (used reg = )
16768 3D7D           B8                   0089  mov	ax,#$89
16769 3D80           50                         push	ax
16770                                           ! Debug: list int = const $40 (used reg = )
16771 3D81           B8                   0040  mov	ax,*$40
16772 3D84           50                         push	ax
16773                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16774 3D85           E8         40D7            call	_read_byte
16775 3D88           83C4                   04  add	sp,*4
16776                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16777 3D8B           8846         EF            mov	-$11[bp],al
16778                                           !BCC_EOS
16779                                           ! 2017   if((modeset_ctl&0x08)==0)
16780                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16781 3D8E           8A46         EF            mov	al,-$11[bp]
16782 3D91           24                     08  and	al,*8
16783                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16784 3D93           84C0                       test	al,al
16785 3D95           75           4F            jne 	.68
16786                       00003D97            .69:
16787                                           ! 2018   {
16788                                           ! 2019     outb(0x3c6,vga_modes[line].pelmask);
16789                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16790 3D97           8A46         FE            mov	al,-2[bp]
16791 3D9A           30E4                       xor	ah,ah
16792 3D9C           B1                     03  mov	cl,*3
16793 3D9E           D3E0                       shl	ax,cl
16794 3DA0           89C3                       mov	bx,ax
16795 3DA2           81C3                 0225  add	bx,#_vga_modes
16796                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16797 3DA6           8A47         06            mov	al,6[bx]
16798 3DA9           30E4                       xor	ah,ah
16799 3DAB           50                         push	ax
16800                                           ! Debug: list int = const $3C6 (used reg = )
16801 3DAC           B8                   03C6  mov	ax,#$3C6
16802 3DAF           50                         push	ax
16803                                           ! Debug: func () void = outb+0 (used reg = )
16804 3DB0           E8         4118            call	_outb
16805 3DB3           83C4                   04  add	sp,*4
16806                                           !BCC_EOS
16807                                           ! 2020     load_dac_palette(vga_modes[line].dacmodel);
16808                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
16809 3DB6           8A46         FE            mov	al,-2[bp]
16810 3DB9           30E4                       xor	ah,ah
16811 3DBB           B1                     03  mov	cl,*3
16812 3DBD           D3E0                       shl	ax,cl
16813 3DBF           89C3                       mov	bx,ax
16814 3DC1           81C3                 0225  add	bx,#_vga_modes
16815                                           ! Debug: list unsigned char = [bx+7] (used reg = )
16816 3DC5           8A47         07            mov	al,7[bx]
16817 3DC8           30E4                       xor	ah,ah
16818 3DCA           50                         push	ax
16819                                           ! Debug: func () void = load_dac_palette+0 (used reg = )
16820 3DCB           E8         FE02            call	_load_dac_palette
16821 3DCE           44                         inc	sp
16822 3DCF           44                         inc	sp
16823                                           !BCC_EOS
16824                                           ! 2021     if((modeset_ctl&0x02)==0x02)
16825                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16826 3DD0           8A46         EF            mov	al,-$11[bp]
16827 3DD3           24                     02  and	al,*2
16828                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16829 3DD5           3C                     02  cmp	al,*2
16830 3DD7           75           0D            jne 	.6A
16831                       00003DD9            .6B:
16832                                           ! 2022     {
16833                                           ! 2023       biosfn_perform_gray_scale_summing(0x00, 0x100);
16834                                           ! Debug: list int = const $100 (used reg = )
16835 3DD9           B8                   0100  mov	ax,#$100
16836 3DDC           50                         push	ax
16837                                           ! Debug: list int = const 0 (used reg = )
16838 3DDD           31C0                       xor	ax,ax
16839 3DDF           50                         push	ax
16840                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16841 3DE0           E8         270A            call	_biosfn_perform_gray_scale_summing
16842 3DE3           83C4                   04  add	sp,*4
16843                                           !BCC_EOS
16844                                           ! 2024     }
16845                                           ! 2025   }
16846                       00003DE6            .6A:
16847                                           ! 2026   inb(0x3da);
16848                       00003DE6            .68:
16849                                           ! Debug: list int = const $3DA (used reg = )
16850 3DE6           B8                   03DA  mov	ax,#$3DA
16851 3DE9           50                         push	ax
16852                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16853 3DEA           E8         40C8            call	_inb
16854 3DED           44                         inc	sp
16855 3DEE           44                         inc	sp
16856                                           !BCC_EOS
16857                                           ! 2027  for(i=0;i<=0x13;i++)
16858                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16859 3DEF           31C0                       xor	ax,ax
16860 3DF1           8946         F6            mov	-$A[bp],ax
16861                                           !BCC_EOS
16862                                           !BCC_EOS
16863                                           ! 2028   {outb(0x3c0,i);
16864 3DF4           EB           38            jmp .6E
16865                       00003DF6            .6F:
16866                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16867 3DF6           FF76         F6            push	-$A[bp]
16868                                           ! Debug: list int = const $3C0 (used reg = )
16869 3DF9           B8                   03C0  mov	ax,#$3C0
16870 3DFC           50                         push	ax
16871                                           ! Debug: func () void = outb+0 (used reg = )
16872 3DFD           E8         40CB            call	_outb
16873 3E00           83C4                   04  add	sp,*4
16874                                           !BCC_EOS
16875                                           ! 2029    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16876                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16877 3E03           8A46         F9            mov	al,-7[bp]
16878 3E06           30E4                       xor	ah,ah
16879 3E08           B1                     06  mov	cl,*6
16880 3E0A           D3E0                       shl	ax,cl
16881 3E0C           89C3                       mov	bx,ax
16882 3E0E           81C3                 02CB  add	bx,#_video_param_table
16883                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16884 3E12           8B46         F6            mov	ax,-$A[bp]
16885 3E15           01C3                       add	bx,ax
16886                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16887 3E17           8A47         23            mov	al,$23[bx]
16888 3E1A           30E4                       xor	ah,ah
16889 3E1C           50                         push	ax
16890                                           ! Debug: list int = const $3C0 (used reg = )
16891 3E1D           B8                   03C0  mov	ax,#$3C0
16892 3E20           50                         push	ax
16893                                           ! Debug: func () void = outb+0 (used reg = )
16894 3E21           E8         40A7            call	_outb
16895 3E24           83C4                   04  add	sp,*4
16896                                           !BCC_EOS
16897                                           ! 2030   }
16898                                           ! 2031  outb(0x3c0,0x14);
16899                       00003E27            .6D:
16900                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16901 3E27           8B46         F6            mov	ax,-$A[bp]
16902 3E2A           40                         inc	ax
16903 3E2B           8946         F6            mov	-$A[bp],ax
16904                       00003E2E            .6E:
16905                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16906 3E2E           8B46         F6            mov	ax,-$A[bp]
16907 3E31           3D                   0013  cmp	ax,*$13
16908 3E34           76           C0            jbe	.6F
16909                       00003E36            .70:
16910                       00003E36            .6C:
16911                                           ! Debug: list int = const $14 (used reg = )
16912 3E36           B8                   0014  mov	ax,*$14
16913 3E39           50                         push	ax
16914                                           ! Debug: list int = const $3C0 (used reg = )
16915 3E3A           B8                   03C0  mov	ax,#$3C0
16916 3E3D           50                         push	ax
16917                                           ! Debug: func () void = outb+0 (used reg = )
16918 3E3E           E8         408A            call	_outb
16919 3E41           83C4                   04  add	sp,*4
16920                                           !BCC_EOS
16921                                           ! 2032  outb(0x3c0,0x00);
16922                                           ! Debug: list int = const 0 (used reg = )
16923 3E44           31C0                       xor	ax,ax
16924 3E46           50                         push	ax
16925                                           ! Debug: list int = const $3C0 (used reg = )
16926 3E47           B8                   03C0  mov	ax,#$3C0
16927 3E4A           50                         push	ax
16928                                           ! Debug: func () void = outb+0 (used reg = )
16929 3E4B           E8         407D            call	_outb
16930 3E4E           83C4                   04  add	sp,*4
16931                                           !BCC_EOS
16932                                           ! 2033  outb(0x3c4,0);
16933                                           ! Debug: list int = const 0 (used reg = )
16934 3E51           31C0                       xor	ax,ax
16935 3E53           50                         push	ax
16936                                           ! Debug: list int = const $3C4 (used reg = )
16937 3E54           B8                   03C4  mov	ax,#$3C4
16938 3E57           50                         push	ax
16939                                           ! Debug: func () void = outb+0 (used reg = )
16940 3E58           E8         4070            call	_outb
16941 3E5B           83C4                   04  add	sp,*4
16942                                           !BCC_EOS
16943                                           ! 2034  outb(0x3c5,0x03);
16944                                           ! Debug: list int = const 3 (used reg = )
16945 3E5E           B8                   0003  mov	ax,*3
16946 3E61           50                         push	ax
16947                                           ! Debug: list int = const $3C5 (used reg = )
16948 3E62           B8                   03C5  mov	ax,#$3C5
16949 3E65           50                         push	ax
16950                                           ! Debug: func () void = outb+0 (used reg = )
16951 3E66           E8         4062            call	_outb
16952 3E69           83C4                   04  add	sp,*4
16953                                           !BCC_EOS
16954                                           ! 2035  for(i=1;i<=4;i++)
16955                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16956 3E6C           B8                   0001  mov	ax,*1
16957 3E6F           8946         F6            mov	-$A[bp],ax
16958                                           !BCC_EOS
16959                                           !BCC_EOS
16960                                           ! 2036   {outb(0x3c4,i);
16961 3E72           EB           3F            jmp .73
16962                       00003E74            .74:
16963                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16964 3E74           FF76         F6            push	-$A[bp]
16965                                           ! Debug: list int = const $3C4 (used reg = )
16966 3E77           B8                   03C4  mov	ax,#$3C4
16967 3E7A           50                         push	ax
16968                                           ! Debug: func () void = outb+0 (used reg = )
16969 3E7B           E8         404D            call	_outb
16970 3E7E           83C4                   04  add	sp,*4
16971                                           !BCC_EOS
16972                                           ! 2037    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16973                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16974 3E81           8B46         F6            mov	ax,-$A[bp]
16975 3E84           48                         dec	ax
16976 3E85           50                         push	ax
16977                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16978 3E86           8A46         F9            mov	al,-7[bp]
16979 3E89           30E4                       xor	ah,ah
16980 3E8B           B1                     06  mov	cl,*6
16981 3E8D           D3E0                       shl	ax,cl
16982 3E8F           89C3                       mov	bx,ax
16983 3E91           81C3                 02CB  add	bx,#_video_param_table
16984                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16985 3E95           8B46         E8            mov	ax,-$18[bp]
16986 3E98           01C3                       add	bx,ax
16987 3E9A           44                         inc	sp
16988 3E9B           44                         inc	sp
16989                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16990 3E9C           8A47         05            mov	al,5[bx]
16991 3E9F           30E4                       xor	ah,ah
16992 3EA1           50                         push	ax
16993                                           ! Debug: list int = const $3C5 (used reg = )
16994 3EA2           B8                   03C5  mov	ax,#$3C5
16995 3EA5           50                         push	ax
16996                                           ! Debug: func () void = outb+0 (used reg = )
16997 3EA6           E8         4022            call	_outb
16998 3EA9           83C4                   04  add	sp,*4
16999                                           !BCC_EOS
17000                                           ! 2038   }
17001                                           ! 2039  for(i=0;i<=8;i++)
17002                       00003EAC            .72:
17003                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17004 3EAC           8B46         F6            mov	ax,-$A[bp]
17005 3EAF           40                         inc	ax
17006 3EB0           8946         F6            mov	-$A[bp],ax
17007                       00003EB3            .73:
17008                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17009 3EB3           8B46         F6            mov	ax,-$A[bp]
17010 3EB6           3D                   0004  cmp	ax,*4
17011 3EB9           76           B9            jbe	.74
17012                       00003EBB            .75:
17013                       00003EBB            .71:
17014                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17015 3EBB           31C0                       xor	ax,ax
17016 3EBD           8946         F6            mov	-$A[bp],ax
17017                                           !BCC_EOS
17018                                           !BCC_EOS
17019                                           ! 2040   {outb(0x3ce,i);
17020 3EC0           EB           38            jmp .78
17021                       00003EC2            .79:
17022                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17023 3EC2           FF76         F6            push	-$A[bp]
17024                                           ! Debug: list int = const $3CE (used reg = )
17025 3EC5           B8                   03CE  mov	ax,#$3CE
17026 3EC8           50                         push	ax
17027                                           ! Debug: func () void = outb+0 (used reg = )
17028 3EC9           E8         3FFF            call	_outb
17029 3ECC           83C4                   04  add	sp,*4
17030                                           !BCC_EOS
17031                                           ! 2041    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17032                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17033 3ECF           8A46         F9            mov	al,-7[bp]
17034 3ED2           30E4                       xor	ah,ah
17035 3ED4           B1                     06  mov	cl,*6
17036 3ED6           D3E0                       shl	ax,cl
17037 3ED8           89C3                       mov	bx,ax
17038 3EDA           81C3                 02CB  add	bx,#_video_param_table
17039                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17040 3EDE           8B46         F6            mov	ax,-$A[bp]
17041 3EE1           01C3                       add	bx,ax
17042                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17043 3EE3           8A47         37            mov	al,$37[bx]
17044 3EE6           30E4                       xor	ah,ah
17045 3EE8           50                         push	ax
17046                                           ! Debug: list int = const $3CF (used reg = )
17047 3EE9           B8                   03CF  mov	ax,#$3CF
17048 3EEC           50                         push	ax
17049                                           ! Debug: func () void = outb+0 (used reg = )
17050 3EED           E8         3FDB            call	_outb
17051 3EF0           83C4                   04  add	sp,*4
17052                                           !BCC_EOS
17053                                           ! 2042   }
17054                                           ! 2043  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17055                       00003EF3            .77:
17056                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17057 3EF3           8B46         F6            mov	ax,-$A[bp]
17058 3EF6           40                         inc	ax
17059 3EF7           8946         F6            mov	-$A[bp],ax
17060                       00003EFA            .78:
17061                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17062 3EFA           8B46         F6            mov	ax,-$A[bp]
17063 3EFD           3D                   0008  cmp	ax,*8
17064 3F00           76           C0            jbe	.79
17065                       00003F02            .7A:
17066                       00003F02            .76:
17067                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17068 3F02           8A46         FE            mov	al,-2[bp]
17069 3F05           30E4                       xor	ah,ah
17070 3F07           B1                     03  mov	cl,*3
17071 3F09           D3E0                       shl	ax,cl
17072 3F0B           89C3                       mov	bx,ax
17073 3F0D           81C3                 0225  add	bx,#_vga_modes
17074                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17075 3F11           8A47         02            mov	al,2[bx]
17076 3F14           3C                     01  cmp	al,*1
17077 3F16           75           05            jne 	.7B
17078                       00003F18            .7C:
17079 3F18           B8                   03B4  mov	ax,#$3B4
17080 3F1B           EB           03            jmp .7D
17081                       00003F1D            .7B:
17082 3F1D           B8                   03D4  mov	ax,#$3D4
17083                       00003F20            .7D:
17084                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17085 3F20           8946         EA            mov	-$16[bp],ax
17086                                           !BCC_EOS
17087                                           ! 2044  outw(crtc_addr,0x0011);
17088                                           ! Debug: list int = const $11 (used reg = )
17089 3F23           B8                   0011  mov	ax,*$11
17090 3F26           50                         push	ax
17091                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17092 3F27           FF76         EA            push	-$16[bp]
17093                                           ! Debug: func () void = outw+0 (used reg = )
17094 3F2A           E8         3FAE            call	_outw
17095 3F2D           83C4                   04  add	sp,*4
17096                                           !BCC_EOS
17097                                           ! 2045  for(i=0;i<=0x18;i++)
17098                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17099 3F30           31C0                       xor	ax,ax
17100 3F32           8946         F6            mov	-$A[bp],ax
17101                                           !BCC_EOS
17102                                           !BCC_EOS
17103                                           ! 2046   {outb(crtc_addr,i);
17104 3F35           EB           38            jmp .80
17105                       00003F37            .81:
17106                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17107 3F37           FF76         F6            push	-$A[bp]
17108                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17109 3F3A           FF76         EA            push	-$16[bp]
17110                                           ! Debug: func () void = outb+0 (used reg = )
17111 3F3D           E8         3F8B            call	_outb
17112 3F40           83C4                   04  add	sp,*4
17113                                           !BCC_EOS
17114                                           ! 2047    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17115                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17116 3F43           8A46         F9            mov	al,-7[bp]
17117 3F46           30E4                       xor	ah,ah
17118 3F48           B1                     06  mov	cl,*6
17119 3F4A           D3E0                       shl	ax,cl
17120 3F4C           89C3                       mov	bx,ax
17121 3F4E           81C3                 02CB  add	bx,#_video_param_table
17122                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17123 3F52           8B46         F6            mov	ax,-$A[bp]
17124 3F55           01C3                       add	bx,ax
17125                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17126 3F57           8A47         0A            mov	al,$A[bx]
17127 3F5A           30E4                       xor	ah,ah
17128 3F5C           50                         push	ax
17129                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17130 3F5D           8B46         EA            mov	ax,-$16[bp]
17131                                           ! Debug: list unsigned int = ax+1 (used reg = )
17132 3F60           40                         inc	ax
17133 3F61           50                         push	ax
17134                                           ! Debug: func () void = outb+0 (used reg = )
17135 3F62           E8         3F66            call	_outb
17136 3F65           83C4                   04  add	sp,*4
17137                                           !BCC_EOS
17138                                           ! 2048   }
17139                                           ! 2049  
17140                                           ! 2049 outb(0x3c2,video_param_table[vpti].miscreg);
17141                       00003F68            .7F:
17142                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17143 3F68           8B46         F6            mov	ax,-$A[bp]
17144 3F6B           40                         inc	ax
17145 3F6C           8946         F6            mov	-$A[bp],ax
17146                       00003F6F            .80:
17147                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17148 3F6F           8B46         F6            mov	ax,-$A[bp]
17149 3F72           3D                   0018  cmp	ax,*$18
17150 3F75           76           C0            jbe	.81
17151                       00003F77            .82:
17152                       00003F77            .7E:
17153                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17154 3F77           8A46         F9            mov	al,-7[bp]
17155 3F7A           30E4                       xor	ah,ah
17156 3F7C           B1                     06  mov	cl,*6
17157 3F7E           D3E0                       shl	ax,cl
17158 3F80           89C3                       mov	bx,ax
17159 3F82           81C3                 02CB  add	bx,#_video_param_table
17160                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17161 3F86           8A47         09            mov	al,9[bx]
17162 3F89           30E4                       xor	ah,ah
17163 3F8B           50                         push	ax
17164                                           ! Debug: list int = const $3C2 (used reg = )
17165 3F8C           B8                   03C2  mov	ax,#$3C2
17166 3F8F           50                         push	ax
17167                                           ! Debug: func () void = outb+0 (used reg = )
17168 3F90           E8         3F38            call	_outb
17169 3F93           83C4                   04  add	sp,*4
17170                                           !BCC_EOS
17171                                           ! 2050  outb(0x3c0,0x20);
17172                                           ! Debug: list int = const $20 (used reg = )
17173 3F96           B8                   0020  mov	ax,*$20
17174 3F99           50                         push	ax
17175                                           ! Debug: list int = const $3C0 (used reg = )
17176 3F9A           B8                   03C0  mov	ax,#$3C0
17177 3F9D           50                         push	ax
17178                                           ! Debug: func () void = outb+0 (used reg = )
17179 3F9E           E8         3F2A            call	_outb
17180 3FA1           83C4                   04  add	sp,*4
17181                                           !BCC_EOS
17182                                           ! 2051  inb(0x3da);
17183                                           ! Debug: list int = const $3DA (used reg = )
17184 3FA4           B8                   03DA  mov	ax,#$3DA
17185 3FA7           50                         push	ax
17186                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17187 3FA8           E8         3F0A            call	_inb
17188 3FAB           44                         inc	sp
17189 3FAC           44                         inc	sp
17190                                           !BCC_EOS
17191                                           ! 2052  if(noclearmem==0x00)
17192                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17193 3FAD           8A46         FF            mov	al,-1[bp]
17194 3FB0           84C0                       test	al,al
17195 3FB2         0F85         00C1            bne 	.83
17196                       00003FB6            .84:
17197                                           ! 2053   {
17198                                           ! 2054    if(vga_modes[line].class==0x00)
17199                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17200 3FB6           8A46         FE            mov	al,-2[bp]
17201 3FB9           30E4                       xor	ah,ah
17202 3FBB           B1                     03  mov	cl,*3
17203 3FBD           D3E0                       shl	ax,cl
17204 3FBF           89C3                       mov	bx,ax
17205 3FC1           81C3                 0225  add	bx,#_vga_modes
17206                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17207 3FC5           8A47         01            mov	al,1[bx]
17208 3FC8           84C0                       test	al,al
17209 3FCA           75           26            jne 	.85
17210                       00003FCC            .86:
17211                                           ! 2055     {
17212                                           ! 2056      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17213                                           ! Debug: list int = const $4000 (used reg = )
17214 3FCC           B8                   4000  mov	ax,#$4000
17215 3FCF           50                         push	ax
17216                                           ! Debug: list int = const $720 (used reg = )
17217 3FD0           B8                   0720  mov	ax,#$720
17218 3FD3           50                         push	ax
17219                                           ! Debug: list int = const 0 (used reg = )
17220 3FD4           31C0                       xor	ax,ax
17221 3FD6           50                         push	ax
17222                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
17223 3FD7           8A46         FE            mov	al,-2[bp]
17224 3FDA           30E4                       xor	ah,ah
17225 3FDC           B1                     03  mov	cl,*3
17226 3FDE           D3E0                       shl	ax,cl
17227 3FE0           89C3                       mov	bx,ax
17228 3FE2           81C3                 0225  add	bx,#_vga_modes
17229                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17230 3FE6           FF77         04            push	4[bx]
17231                                           ! Debug: func () void = memsetw+0 (used reg = )
17232 3FE9           E8         3DEE            call	_memsetw
17233 3FEC           83C4                   08  add	sp,*8
17234                                           !BCC_EOS
17235                                           ! 2057     }
17236                                           ! 2058    else
17237                                           ! 2059     {
17238 3FEF           E9         0085            br 	.87
17239                       00003FF2            .85:
17240                                           ! 2060      if(mode<0x0d)
17241                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17242 3FF2           8A46         04            mov	al,4[bp]
17243 3FF5           3C                     0D  cmp	al,*$D
17244 3FF7           73           24            jae 	.88
17245                       00003FF9            .89:
17246                                           ! 2061       {
17247                                           ! 2062        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17248                                           ! Debug: list int = const $4000 (used reg = )
17249 3FF9           B8                   4000  mov	ax,#$4000
17250 3FFC           50                         push	ax
17251                                           ! Debug: list int = const 0 (used reg = )
17252 3FFD           31C0                       xor	ax,ax
17253 3FFF           50                         push	ax
17254                                           ! Debug: list int = const 0 (used reg = )
17255 4000           31C0                       xor	ax,ax
17256 4002           50                         push	ax
17257                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
17258 4003           8A46         FE            mov	al,-2[bp]
17259 4006           30E4                       xor	ah,ah
17260 4008           B1                     03  mov	cl,*3
17261 400A           D3E0                       shl	ax,cl
17262 400C           89C3                       mov	bx,ax
17263 400E           81C3                 0225  add	bx,#_vga_modes
17264                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17265 4012           FF77         04            push	4[bx]
17266                                           ! Debug: func () void = memsetw+0 (used reg = )
17267 4015           E8         3DC2            call	_memsetw
17268 4018           83C4                   08  add	sp,*8
17269                                           !BCC_EOS
17270                                           ! 2063       }
17271                                           ! 2064      else
17272                                           ! 2065       {
17273 401B           EB           5A            jmp .8A
17274                       0000401D            .88:
17275                                           ! 2066        outb( 0x3c4, 0x02 );
17276                                           ! Debug: list int = const 2 (used reg = )
17277 401D           B8                   0002  mov	ax,*2
17278 4020           50                         push	ax
17279                                           ! Debug: list int = const $3C4 (used reg = )
17280 4021           B8                   03C4  mov	ax,#$3C4
17281 4024           50                         push	ax
17282                                           ! Debug: func () void = outb+0 (used reg = )
17283 4025           E8         3EA3            call	_outb
17284 4028           83C4                   04  add	sp,*4
17285                                           !BCC_EOS
17286                                           ! 2067        mmask = inb( 0x3c5 );
17287                                           ! Debug: list int = const $3C5 (used reg = )
17288 402B           B8                   03C5  mov	ax,#$3C5
17289 402E           50                         push	ax
17290                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17291 402F           E8         3E83            call	_inb
17292 4032           44                         inc	sp
17293 4033           44                         inc	sp
17294                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17295 4034           8846         FD            mov	-3[bp],al
17296                                           !BCC_EOS
17297                                           ! 2068        outb( 0x3c5, 0x0f );
17298                                           ! Debug: list int = const $F (used reg = )
17299 4037           B8                   000F  mov	ax,*$F
17300 403A           50                         push	ax
17301                                           ! Debug: list int = const $3C5 (used reg = )
17302 403B           B8                   03C5  mov	ax,#$3C5
17303 403E           50                         push	ax
17304                                           ! Debug: func () void = outb+0 (used reg = )
17305 403F           E8         3E89            call	_outb
17306 4042           83C4                   04  add	sp,*4
17307                                           !BCC_EOS
17308                                           ! 2069        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17309                                           ! Debug: list unsigned int = const $8000 (used reg = )
17310 4045           B8                   8000  mov	ax,#$8000
17311 4048           50                         push	ax
17312                                           ! Debug: list int = const 0 (used reg = )
17313 4049           31C0                       xor	ax,ax
17314 404B           50                         push	ax
17315                                           ! Debug: list int = const 0 (used reg = )
17316 404C           31C0                       xor	ax,ax
17317 404E           50                         push	ax
17318                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$12] struct  = vga_modes+0 (used reg = )
17319 404F           8A46         FE            mov	al,-2[bp]
17320 4052           30E4                       xor	ah,ah
17321 4054           B1                     03  mov	cl,*3
17322 4056           D3E0                       shl	ax,cl
17323 4058           89C3                       mov	bx,ax
17324 405A           81C3                 0225  add	bx,#_vga_modes
17325                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17326 405E           FF77         04            push	4[bx]
17327                                           ! Debug: func () void = memsetw+0 (used reg = )
17328 4061           E8         3D76            call	_memsetw
17329 4064           83C4                   08  add	sp,*8
17330                                           !BCC_EOS
17331                                           ! 2070        outb( 0x3c5, mmask );
17332                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17333 4067           8A46         FD            mov	al,-3[bp]
17334 406A           30E4                       xor	ah,ah
17335 406C           50                         push	ax
17336                                           ! Debug: list int = const $3C5 (used reg = )
17337 406D           B8                   03C5  mov	ax,#$3C5
17338 4070           50                         push	ax
17339                                           ! Debug: func () void = outb+0 (used reg = )
17340 4071           E8         3E57            call	_outb
17341 4074           83C4                   04  add	sp,*4
17342                                           !BCC_EOS
17343                                           ! 2071       }
17344                                           ! 2072     }
17345                       00004077            .8A:
17346                                           ! 2073   }
17347                       00004077            .87:
17348                                           ! 2074  write_byte(0x40,0x49,mode);
17349                       00004077            .83:
17350                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17351 4077           8A46         04            mov	al,4[bp]
17352 407A           30E4                       xor	ah,ah
17353 407C           50                         push	ax
17354                                           ! Debug: list int = const $49 (used reg = )
17355 407D           B8                   0049  mov	ax,*$49
17356 4080           50                         push	ax
17357                                           ! Debug: list int = const $40 (used reg = )
17358 4081           B8                   0040  mov	ax,*$40
17359 4084           50                         push	ax
17360                                           ! Debug: func () void = write_byte+0 (used reg = )
17361 4085           E8         3DFD            call	_write_byte
17362 4088           83C4                   06  add	sp,*6
17363                                           !BCC_EOS
17364                                           ! 2075  write_word(0x40,0x4A,twidth);
17365                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17366 408B           FF76         F4            push	-$C[bp]
17367                                           ! Debug: list int = const $4A (used reg = )
17368 408E           B8                   004A  mov	ax,*$4A
17369 4091           50                         push	ax
17370                                           ! Debug: list int = const $40 (used reg = )
17371 4092           B8                   0040  mov	ax,*$40
17372 4095           50                         push	ax
17373                                           ! Debug: func () void = write_word+0 (used reg = )
17374 4096           E8         3E04            call	_write_word
17375 4099           83C4                   06  add	sp,*6
17376                                           !BCC_EOS
17377                                           ! 2076  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17378                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17379 409C           8A46         F9            mov	al,-7[bp]
17380 409F           30E4                       xor	ah,ah
17381 40A1           B1                     06  mov	cl,*6
17382 40A3           D3E0                       shl	ax,cl
17383 40A5           89C3                       mov	bx,ax
17384 40A7           81C3                 02CB  add	bx,#_video_param_table
17385                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17386                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17387                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17388 40AB           FF77         03            push	3[bx]
17389                                           ! Debug: list int = const $4C (used reg = )
17390 40AE           B8                   004C  mov	ax,*$4C
17391 40B1           50                         push	ax
17392                                           ! Debug: list int = const $40 (used reg = )
17393 40B2           B8                   0040  mov	ax,*$40
17394 40B5           50                         push	ax
17395                                           ! Debug: func () void = write_word+0 (used reg = )
17396 40B6           E8         3DE4            call	_write_word
17397 40B9           83C4                   06  add	sp,*6
17398                                           !BCC_EOS
17399                                           ! 2077  write_word(0x40,0x63,crtc_addr);
17400                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17401 40BC           FF76         EA            push	-$16[bp]
17402                                           ! Debug: list int = const $63 (used reg = )
17403 40BF           B8                   0063  mov	ax,*$63
17404 40C2           50                         push	ax
17405                                           ! Debug: list int = const $40 (used reg = )
17406 40C3           B8                   0040  mov	ax,*$40
17407 40C6           50                         push	ax
17408                                           ! Debug: func () void = write_word+0 (used reg = )
17409 40C7           E8         3DD3            call	_write_word
17410 40CA           83C4                   06  add	sp,*6
17411                                           !BCC_EOS
17412                                           ! 2078  write_byte(0x40,0x84,theightm1);
17413                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17414 40CD           FF76         F2            push	-$E[bp]
17415                                           ! Debug: list int = const $84 (used reg = )
17416 40D0           B8                   0084  mov	ax,#$84
17417 40D3           50                         push	ax
17418                                           ! Debug: list int = const $40 (used reg = )
17419 40D4           B8                   0040  mov	ax,*$40
17420 40D7           50                         push	ax
17421                                           ! Debug: func () void = write_byte+0 (used reg = )
17422 40D8           E8         3DAA            call	_write_byte
17423 40DB           83C4                   06  add	sp,*6
17424                                           !BCC_EOS
17425                                           ! 2079  write_word(0x40,0x85,cheight);
17426                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17427 40DE           FF76         F0            push	-$10[bp]
17428                                           ! Debug: list int = const $85 (used reg = )
17429 40E1           B8                   0085  mov	ax,#$85
17430 40E4           50                         push	ax
17431                                           ! Debug: list int = const $40 (used reg = )
17432 40E5           B8                   0040  mov	ax,*$40
17433 40E8           50                         push	ax
17434                                           ! Debug: func () void = write_word+0 (used reg = )
17435 40E9           E8         3DB1            call	_write_word
17436 40EC           83C4                   06  add	sp,*6
17437                                           !BCC_EOS
17438                                           ! 2080  write_byte(0x40,0x87,(0x60|noclearmem));
17439                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17440                                           ! Debug: expression subtree swapping
17441 40EF           8A46         FF            mov	al,-1[bp]
17442 40F2           0C                     60  or	al,*$60
17443                                           ! Debug: list unsigned char = al+0 (used reg = )
17444 40F4           30E4                       xor	ah,ah
17445 40F6           50                         push	ax
17446                                           ! Debug: list int = const $87 (used reg = )
17447 40F7           B8                   0087  mov	ax,#$87
17448 40FA           50                         push	ax
17449                                           ! Debug: list int = const $40 (used reg = )
17450 40FB           B8                   0040  mov	ax,*$40
17451 40FE           50                         push	ax
17452                                           ! Debug: func () void = write_byte+0 (used reg = )
17453 40FF           E8         3D83            call	_write_byte
17454 4102           83C4                   06  add	sp,*6
17455                                           !BCC_EOS
17456                                           ! 2081  write_byte(0x40,0x88,0xF9);
17457                                           ! Debug: list int = const $F9 (used reg = )
17458 4105           B8                   00F9  mov	ax,#$F9
17459 4108           50                         push	ax
17460                                           ! Debug: list int = const $88 (used reg = )
17461 4109           B8                   0088  mov	ax,#$88
17462 410C           50                         push	ax
17463                                           ! Debug: list int = const $40 (used reg = )
17464 410D           B8                   0040  mov	ax,*$40
17465 4110           50                         push	ax
17466                                           ! Debug: func () void = write_byte+0 (used reg = )
17467 4111           E8         3D71            call	_write_byte
17468 4114           83C4                   06  add	sp,*6
17469                                           !BCC_EOS
17470                                           ! 2082  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17471                                           ! Debug: list int = const $89 (used reg = )
17472 4117           B8                   0089  mov	ax,#$89
17473 411A           50                         push	ax
17474                                           ! Debug: list int = const $40 (used reg = )
17475 411B           B8                   0040  mov	ax,*$40
17476 411E           50                         push	ax
17477                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17478 411F           E8         3D3D            call	_read_byte
17479 4122           83C4                   04  add	sp,*4
17480                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17481 4125           24                     7F  and	al,*$7F
17482                                           ! Debug: list unsigned char = al+0 (used reg = )
17483 4127           30E4                       xor	ah,ah
17484 4129           50                         push	ax
17485                                           ! Debug: list int = const $89 (used reg = )
17486 412A           B8                   0089  mov	ax,#$89
17487 412D           50                         push	ax
17488                                           ! Debug: list int = const $40 (used reg = )
17489 412E           B8                   0040  mov	ax,*$40
17490 4131           50                         push	ax
17491                                           ! Debug: func () void = write_byte+0 (used reg = )
17492 4132           E8         3D50            call	_write_byte
17493 4135           83C4                   06  add	sp,*6
17494                                           !BCC_EOS
17495                                           ! 2083  write_byte(0x40,0x8A,0x08);
17496                                           ! Debug: list int = const 8 (used reg = )
17497 4138           B8                   0008  mov	ax,*8
17498 413B           50                         push	ax
17499                                           ! Debug: list int = const $8A (used reg = )
17500 413C           B8                   008A  mov	ax,#$8A
17501 413F           50                         push	ax
17502                                           ! Debug: list int = const $40 (used reg = )
17503 4140           B8                   0040  mov	ax,*$40
17504 4143           50                         push	ax
17505                                           ! Debug: func () void = write_byte+0 (used reg = )
17506 4144           E8         3D3E            call	_write_byte
17507 4147           83C4                   06  add	sp,*6
17508                                           !BCC_EOS
17509                                           ! 2084  write_word(0x40,0xA8, video_save_pointer_table);
17510                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17511 414A           BB                   3634  mov	bx,#_video_save_pointer_table
17512 414D           53                         push	bx
17513                                           ! Debug: list int = const $A8 (used reg = )
17514 414E           B8                   00A8  mov	ax,#$A8
17515 4151           50                         push	ax
17516                                           ! Debug: list int = const $40 (used reg = )
17517 4152           B8                   0040  mov	ax,*$40
17518 4155           50                         push	ax
17519                                           ! Debug: func () void = write_word+0 (used reg = )
17520 4156           E8         3D44            call	_write_word
17521 4159           83C4                   06  add	sp,*6
17522                                           !BCC_EOS
17523                                           ! 2085  write_word(0x40,0xA8 +2, 0xc000);
17524                                           ! Debug: list unsigned int = const $C000 (used reg = )
17525 415C           B8                   C000  mov	ax,#$C000
17526 415F           50                         push	ax
17527                                           ! Debug: list int = const $AA (used reg = )
17528 4160           B8                   00AA  mov	ax,#$AA
17529 4163           50                         push	ax
17530                                           ! Debug: list int = const $40 (used reg = )
17531 4164           B8                   0040  mov	ax,*$40
17532 4167           50                         push	ax
17533                                           ! Debug: func () void = write_word+0 (used reg = )
17534 4168           E8         3D32            call	_write_word
17535 416B           83C4                   06  add	sp,*6
17536                                           !BCC_EOS
17537                                           ! 2086  write_byte(0x40,0x65,0x00);
17538                                           ! Debug: list int = const 0 (used reg = )
17539 416E           31C0                       xor	ax,ax
17540 4170           50                         push	ax
17541                                           ! Debug: list int = const $65 (used reg = )
17542 4171           B8                   0065  mov	ax,*$65
17543 4174           50                         push	ax
17544                                           ! Debug: list int = const $40 (used reg = )
17545 4175           B8                   0040  mov	ax,*$40
17546 4178           50                         push	ax
17547                                           ! Debug: func () void = write_byte+0 (used reg = )
17548 4179           E8         3D09            call	_write_byte
17549 417C           83C4                   06  add	sp,*6
17550                                           !BCC_EOS
17551                                           ! 2087  write_byte(0x40,0x66,0x00);
17552                                           ! Debug: list int = const 0 (used reg = )
17553 417F           31C0                       xor	ax,ax
17554 4181           50                         push	ax
17555                                           ! Debug: list int = const $66 (used reg = )
17556 4182           B8                   0066  mov	ax,*$66
17557 4185           50                         push	ax
17558                                           ! Debug: list int = const $40 (used reg = )
17559 4186           B8                   0040  mov	ax,*$40
17560 4189           50                         push	ax
17561                                           ! Debug: func () void = write_byte+0 (used reg = )
17562 418A           E8         3CF8            call	_write_byte
17563 418D           83C4                   06  add	sp,*6
17564                                           !BCC_EOS
17565                                           ! 2088  if(vga_modes[line].class==0x00)
17566                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17567 4190           8A46         FE            mov	al,-2[bp]
17568 4193           30E4                       xor	ah,ah
17569 4195           B1                     03  mov	cl,*3
17570 4197           D3E0                       shl	ax,cl
17571 4199           89C3                       mov	bx,ax
17572 419B           81C3                 0225  add	bx,#_vga_modes
17573                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17574 419F           8A47         01            mov	al,1[bx]
17575 41A2           84C0                       test	al,al
17576 41A4           75           0E            jne 	.8B
17577                       000041A6            .8C:
17578                                           ! 2089   {
17579                                           ! 2090    biosfn_set_cursor_shape(0x06,0x07);
17580                                           ! Debug: list int = const 7 (used reg = )
17581 41A6           B8                   0007  mov	ax,*7
17582 41A9           50                         push	ax
17583                                           ! Debug: list int = const 6 (used reg = )
17584 41AA           B8                   0006  mov	ax,*6
17585 41AD           50                         push	ax
17586                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17587 41AE           E8         00BA            call	_biosfn_set_cursor_shape
17588 41B1           83C4                   04  add	sp,*4
17589                                           !BCC_EOS
17590                                           ! 2091   }
17591                                           ! 2092  for(i=0;i<8;i++)
17592                       000041B4            .8B:
17593                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17594 41B4           31C0                       xor	ax,ax
17595 41B6           8946         F6            mov	-$A[bp],ax
17596                                           !BCC_EOS
17597                                           !BCC_EOS
17598                                           ! 2093   biosfn_set_cursor_pos(i,0x0000);
17599 41B9           EB           13            jmp .8F
17600                       000041BB            .90:
17601                                           ! Debug: list int = const 0 (used reg = )
17602 41BB           31C0                       xor	ax,ax
17603 41BD           50                         push	ax
17604                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17605 41BE           FF76         F6            push	-$A[bp]
17606                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17607 41C1           E8         01C2            call	_biosfn_set_cursor_pos
17608 41C4           83C4                   04  add	sp,*4
17609                                           !BCC_EOS
17610                                           ! 2094  biosfn_set_active_page(0x00);
17611                       000041C7            .8E:
17612                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17613 41C7           8B46         F6            mov	ax,-$A[bp]
17614 41CA           40                         inc	ax
17615 41CB           8946         F6            mov	-$A[bp],ax
17616                       000041CE            .8F:
17617                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17618 41CE           8B46         F6            mov	ax,-$A[bp]
17619 41D1           3D                   0008  cmp	ax,*8
17620 41D4           72           E5            jb 	.90
17621                       000041D6            .91:
17622                       000041D6            .8D:
17623                                           ! Debug: list int = const 0 (used reg = )
17624 41D6           31C0                       xor	ax,ax
17625 41D8           50                         push	ax
17626                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17627 41D9           E8         031F            call	_biosfn_set_active_page
17628 41DC           44                         inc	sp
17629 41DD           44                         inc	sp
17630                                           !BCC_EOS
17631                                           ! 2095  if(vga_modes[line].class==0x00)
17632                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
17633 41DE           8A46         FE            mov	al,-2[bp]
17634 41E1           30E4                       xor	ah,ah
17635 41E3           B1                     03  mov	cl,*3
17636 41E5           D3E0                       shl	ax,cl
17637 41E7           89C3                       mov	bx,ax
17638 41E9           81C3                 0225  add	bx,#_vga_modes
17639                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17640 41ED           8A47         01            mov	al,1[bx]
17641 41F0           84C0                       test	al,al
17642 41F2           75           0E            jne 	.92
17643                       000041F4            .93:
17644                                           ! 2096   {
17645                                           ! 2097 #asm
17646                                           !BCC_EOS
17647                                           !BCC_ASM
17648                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17649                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17650                       00000008            _biosfn_set_video_mode.theightm1	set	8
17651                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17652                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17653                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17654                       00000014            _biosfn_set_video_mode.line	set	$14
17655                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17656                       00000006            _biosfn_set_video_mode.cheight	set	6
17657                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17658                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17659                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17660                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17661                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17662                       0000000C            _biosfn_set_video_mode.i	set	$C
17663                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17664                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17665                       00000004            .biosfn_set_video_mode.mode	set	4
17666                       00000010            _biosfn_set_video_mode.palette	set	$10
17667                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17668                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17669                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17670                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17671                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17672                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17673                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17674                       00000013            _biosfn_set_video_mode.mmask	set	$13
17675                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17676                                             ;; copy and activate 8x16 font
17677 41F4           B8                   1104    mov ax, #0x1104
17678 41F7           B3                     00    mov bl, #0x00
17679 41F9           CD                     10    int #0x10
17680 41FB           B8                   1103    mov ax, #0x1103
17681 41FE           B3                     00    mov bl, #0x00
17682 4200           CD                     10    int #0x10
17683                                           ! 2105 endasm
17684                                           !BCC_ENDASM
17685                                           !BCC_EOS
17686                                           ! 2106   }
17687                                           ! 2107 #asm
17688                       00004202            .92:
17689                                           !BCC_EOS
17690                                           !BCC_ASM
17691                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17692                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17693                       00000008            _biosfn_set_video_mode.theightm1	set	8
17694                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17695                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17696                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17697                       00000014            _biosfn_set_video_mode.line	set	$14
17698                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17699                       00000006            _biosfn_set_video_mode.cheight	set	6
17700                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17701                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17702                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17703                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17704                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17705                       0000000C            _biosfn_set_video_mode.i	set	$C
17706                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17707                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17708                       00000004            .biosfn_set_video_mode.mode	set	4
17709                       00000010            _biosfn_set_video_mode.palette	set	$10
17710                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17711                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17712                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17713                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17714                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17715                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17716                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17717                       00000013            _biosfn_set_video_mode.mmask	set	$13
17718                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17719                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4202           1E                           push ds
 +a   4203           31C0                         xor ax, ax
 +a   4205           8ED8                         mov ds, ax
 +a   4207           B8                   139B    mov ax,  #_vgafont8+128*8
 +a   420A           A3         007C              mov 0x1f*4, ax
 +a   420D           B8                   C000    mov ax,  #0xC000
 +a   4210           A3         007E              mov 0x1f*4+2, ax
 +a   4213           1F                           pop ds
17720                                           ! 2109 endasm
17721                                           !BCC_ENDASM
17722                                           !BCC_EOS
17723                                           ! 2110   switch(cheight)
17724 4214           8B46         F0            mov	ax,-$10[bp]
17725                                           ! 2111    {case 8:
17726 4217           E9         003E            br 	.96
17727                                           ! 2112 #asm
17728                       0000421A            .97:
17729                                           !BCC_EOS
17730                                           !BCC_ASM
17731                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17732                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17733                       00000008            _biosfn_set_video_mode.theightm1	set	8
17734                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17735                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17736                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17737                       00000014            _biosfn_set_video_mode.line	set	$14
17738                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17739                       00000006            _biosfn_set_video_mode.cheight	set	6
17740                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17741                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17742                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17743                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17744                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17745                       0000000C            _biosfn_set_video_mode.i	set	$C
17746                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17747                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17748                       00000004            .biosfn_set_video_mode.mode	set	4
17749                       00000010            _biosfn_set_video_mode.palette	set	$10
17750                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17751                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17752                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17753                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17754                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17755                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17756                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17757                       00000013            _biosfn_set_video_mode.mmask	set	$13
17758                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17759                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   421A           1E                           push ds
 +a   421B           31C0                         xor ax, ax
 +a   421D           8ED8                         mov ds, ax
 +a   421F           B8                   0F9B    mov ax,  #_vgafont8
 +a   4222           A3         010C              mov 0x43*4, ax
 +a   4225           B8                   C000    mov ax,  #0xC000
 +a   4228           A3         010E              mov 0x43*4+2, ax
 +a   422B           1F                           pop ds
17760                                           ! 2114 endasm
17761                                           !BCC_ENDASM
17762                                           !BCC_EOS
17763                                           ! 2115      break;
17764 422C           EB           39            jmp .94
17765                                           !BCC_EOS
17766                                           ! 2116     case 14:
17767                                           ! 2117 #asm
17768                       0000422E            .98:
17769                                           !BCC_EOS
17770                                           !BCC_ASM
17771                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17772                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17773                       00000008            _biosfn_set_video_mode.theightm1	set	8
17774                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17775                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17776                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17777                       00000014            _biosfn_set_video_mode.line	set	$14
17778                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17779                       00000006            _biosfn_set_video_mode.cheight	set	6
17780                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17781                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17782                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17783                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17784                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17785                       0000000C            _biosfn_set_video_mode.i	set	$C
17786                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17787                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17788                       00000004            .biosfn_set_video_mode.mode	set	4
17789                       00000010            _biosfn_set_video_mode.palette	set	$10
17790                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17791                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17792                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17793                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17794                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17795                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17796                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17797                       00000013            _biosfn_set_video_mode.mmask	set	$13
17798                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17799                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   422E           1E                           push ds
 +a   422F           31C0                         xor ax, ax
 +a   4231           8ED8                         mov ds, ax
 +a   4233           B8                   179B    mov ax,  #_vgafont14
 +a   4236           A3         010C              mov 0x43*4, ax
 +a   4239           B8                   C000    mov ax,  #0xC000
 +a   423C           A3         010E              mov 0x43*4+2, ax
 +a   423F           1F                           pop ds
17800                                           ! 2119 endasm
17801                                           !BCC_ENDASM
17802                                           !BCC_EOS
17803                                           ! 2120      break;
17804 4240           EB           25            jmp .94
17805                                           !BCC_EOS
17806                                           ! 2121     case 16:
17807                                           ! 2122 #asm
17808                       00004242            .99:
17809                                           !BCC_EOS
17810                                           !BCC_ASM
17811                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17812                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17813                       00000008            _biosfn_set_video_mode.theightm1	set	8
17814                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17815                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17816                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17817                       00000014            _biosfn_set_video_mode.line	set	$14
17818                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17819                       00000006            _biosfn_set_video_mode.cheight	set	6
17820                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17821                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17822                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17823                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17824                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17825                       0000000C            _biosfn_set_video_mode.i	set	$C
17826                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17827                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17828                       00000004            .biosfn_set_video_mode.mode	set	4
17829                       00000010            _biosfn_set_video_mode.palette	set	$10
17830                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17831                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17832                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17833                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17834                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17835                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17836                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17837                       00000013            _biosfn_set_video_mode.mmask	set	$13
17838                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17839                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4242           1E                           push ds
 +a   4243           31C0                         xor ax, ax
 +a   4245           8ED8                         mov ds, ax
 +a   4247           B8                   259B    mov ax,  #_vgafont16
 +a   424A           A3         010C              mov 0x43*4, ax
 +a   424D           B8                   C000    mov ax,  #0xC000
 +a   4250           A3         010E              mov 0x43*4+2, ax
 +a   4253           1F                           pop ds
17840                                           ! 2124 endasm
17841                                           !BCC_ENDASM
17842                                           !BCC_EOS
17843                                           ! 2125      break;
17844 4254           EB           11            jmp .94
17845                                           !BCC_EOS
17846                                           ! 2126    }
17847                                           ! 2127 }
17848 4256           EB           0F            jmp .94
17849                       00004258            .96:
17850 4258           2D                   0008  sub	ax,*8
17851 425B           74           BD            je 	.97
17852 425D           2D                   0006  sub	ax,*6
17853 4260           74           CC            je 	.98
17854 4262           2D                   0002  sub	ax,*2
17855 4265           74           DB            je 	.99
17856                       00004267            .94:
17857                       FFFFFFE8            ..FFFD	=	-$18
17858 4267           89EC                       mov	sp,bp
17859 4269           5D                         pop	bp
17860 426A           C3                         ret
17861                                           ! 2128 static void biosfn_set_cursor_shape (CH,CL)
17862                                           ! Register BX used in function biosfn_set_video_mode
17863                                           ! 2129 Bit8u CH;Bit8u CL;
17864                       0000426B            _biosfn_set_cursor_shape:
17865                                           !BCC_EOS
17866                                           !BCC_EOS
17867                                           ! 2130 {Bit16u cheight,curs,crtc_addr;
17868                                           !BCC_EOS
17869                                           ! 2131  Bit8u modeset_ctl;
17870                                           !BCC_EOS
17871                                           ! 2132  CH&=0x3f;
17872 426B           55                         push	bp
17873 426C           89E5                       mov	bp,sp
17874 426E           83C4                   F8  add	sp,*-8
17875                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17876 4271           8A46         04            mov	al,4[bp]
17877 4274           24                     3F  and	al,*$3F
17878 4276           8846         04            mov	4[bp],al
17879                                           !BCC_EOS
17880                                           ! 2133  CL&=0x1f;
17881                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17882 4279           8A46         06            mov	al,6[bp]
17883 427C           24                     1F  and	al,*$1F
17884 427E           8846         06            mov	6[bp],al
17885                                           !BCC_EOS
17886                                           ! 2134  curs=(CH<<8)+CL;
17887                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17888 4281           8A46         04            mov	al,4[bp]
17889 4284           30E4                       xor	ah,ah
17890 4286           88C4                       mov	ah,al
17891 4288           30C0                       xor	al,al
17892                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17893 428A           0246         06            add	al,6[bp]
17894 428D           80D4                   00  adc	ah,*0
17895                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17896 4290           8946         FC            mov	-4[bp],ax
17897                                           !BCC_EOS
17898                                           ! 2135  write_word(0x40,0x60,curs);
17899                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17900 4293           FF76         FC            push	-4[bp]
17901                                           ! Debug: list int = const $60 (used reg = )
17902 4296           B8                   0060  mov	ax,*$60
17903 4299           50                         push	ax
17904                                           ! Debug: list int = const $40 (used reg = )
17905 429A           B8                   0040  mov	ax,*$40
17906 429D           50                         push	ax
17907                                           ! Debug: func () void = write_word+0 (used reg = )
17908 429E           E8         3BFC            call	_write_word
17909 42A1           83C4                   06  add	sp,*6
17910                                           !BCC_EOS
17911                                           ! 2136  modeset_ctl=read_byte(0x40,0x89);
17912                                           ! Debug: list int = const $89 (used reg = )
17913 42A4           B8                   0089  mov	ax,#$89
17914 42A7           50                         push	ax
17915                                           ! Debug: list int = const $40 (used reg = )
17916 42A8           B8                   0040  mov	ax,*$40
17917 42AB           50                         push	ax
17918                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17919 42AC           E8         3BB0            call	_read_byte
17920 42AF           83C4                   04  add	sp,*4
17921                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17922 42B2           8846         F9            mov	-7[bp],al
17923                                           !BCC_EOS
17924                                           ! 2137  cheight = read_word(0x40,0x85);
17925                                           ! Debug: list int = const $85 (used reg = )
17926 42B5           B8                   0085  mov	ax,#$85
17927 42B8           50                         push	ax
17928                                           ! Debug: list int = const $40 (used reg = )
17929 42B9           B8                   0040  mov	ax,*$40
17930 42BC           50                         push	ax
17931                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17932 42BD           E8         3BB2            call	_read_word
17933 42C0           83C4                   04  add	sp,*4
17934                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17935 42C3           8946         FE            mov	-2[bp],ax
17936                                           !BCC_EOS
17937                                           ! 2138  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17938                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17939 42C6           8A46         F9            mov	al,-7[bp]
17940 42C9           24                     01  and	al,*1
17941 42CB           84C0                       test	al,al
17942 42CD           74           66            je  	.9A
17943                       000042CF            .9E:
17944                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17945 42CF           8B46         FE            mov	ax,-2[bp]
17946 42D2           3D                   0008  cmp	ax,*8
17947 42D5           76           5E            jbe 	.9A
17948                       000042D7            .9D:
17949                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17950 42D7           8A46         06            mov	al,6[bp]
17951 42DA           3C                     08  cmp	al,*8
17952 42DC           73           57            jae 	.9A
17953                       000042DE            .9C:
17954                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17955 42DE           8A46         04            mov	al,4[bp]
17956 42E1           3C                     20  cmp	al,*$20
17957 42E3           73           50            jae 	.9A
17958                       000042E5            .9B:
17959                                           ! 2139   {
17960                                           ! 2140    if(
17961                                           ! 2140 CL!=(CH+1))
17962                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17963 42E5           8A46         04            mov	al,4[bp]
17964 42E8           30E4                       xor	ah,ah
17965                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17966                                           ! Debug: expression subtree swapping
17967 42EA           40                         inc	ax
17968 42EB           50                         push	ax
17969 42EC           8A46         06            mov	al,6[bp]
17970 42EF           30E4                       xor	ah,ah
17971 42F1           3B46         F6            cmp	ax,-$A[bp]
17972 42F4           8D66         F8            lea	sp,-8[bp]
17973 42F7           74           15            je  	.9F
17974                       000042F9            .A0:
17975                                           ! 2141     {
17976                                           ! 2142      CH = ((CH+1) * cheight / 8) -1;
17977                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17978 42F9           8A46         04            mov	al,4[bp]
17979 42FC           30E4                       xor	ah,ah
17980                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17981 42FE           40                         inc	ax
17982 42FF           8B4E         FE            mov	cx,-2[bp]
17983 4302           F7E9                       imul	cx
17984                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17985 4304           B1                     03  mov	cl,*3
17986 4306           D3E8                       shr	ax,cl
17987                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17988                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17989 4308           48                         dec	ax
17990 4309           8846         04            mov	4[bp],al
17991                                           !BCC_EOS
17992                                           ! 2143     }
17993                                           ! 2144    else
17994                                           ! 2145     {
17995 430C           EB           14            jmp .A1
17996                       0000430E            .9F:
17997                                           ! 2146      CH = ((CL+1) * cheight / 8) - 2;
17998                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17999 430E           8A46         06            mov	al,6[bp]
18000 4311           30E4                       xor	ah,ah
18001                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18002 4313           40                         inc	ax
18003 4314           8B4E         FE            mov	cx,-2[bp]
18004 4317           F7E9                       imul	cx
18005                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18006 4319           B1                     03  mov	cl,*3
18007 431B           D3E8                       shr	ax,cl
18008                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18009                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18010 431D           48                         dec	ax
18011 431E           48                         dec	ax
18012 431F           8846         04            mov	4[bp],al
18013                                           !BCC_EOS
18014                                           ! 2147     }
18015                                           ! 2148    CL = ((CL+1) * cheight / 8) - 1;
18016                       00004322            .A1:
18017                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18018 4322           8A46         06            mov	al,6[bp]
18019 4325           30E4                       xor	ah,ah
18020                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18021 4327           40                         inc	ax
18022 4328           8B4E         FE            mov	cx,-2[bp]
18023 432B           F7E9                       imul	cx
18024                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18025 432D           B1                     03  mov	cl,*3
18026 432F           D3E8                       shr	ax,cl
18027                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18028                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18029 4331           48                         dec	ax
18030 4332           8846         06            mov	6[bp],al
18031                                           !BCC_EOS
18032                                           ! 2149   }
18033                                           ! 2150  crtc_addr=read_word(0x40,0x63);
18034                       00004335            .9A:
18035                                           ! Debug: list int = const $63 (used reg = )
18036 4335           B8                   0063  mov	ax,*$63
18037 4338           50                         push	ax
18038                                           ! Debug: list int = const $40 (used reg = )
18039 4339           B8                   0040  mov	ax,*$40
18040 433C           50                         push	ax
18041                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18042 433D           E8         3B32            call	_read_word
18043 4340           83C4                   04  add	sp,*4
18044                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18045 4343           8946         FA            mov	-6[bp],ax
18046                                           !BCC_EOS
18047                                           ! 2151  outb(crtc_addr,0x0a);
18048                                           ! Debug: list int = const $A (used reg = )
18049 4346           B8                   000A  mov	ax,*$A
18050 4349           50                         push	ax
18051                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18052 434A           FF76         FA            push	-6[bp]
18053                                           ! Debug: func () void = outb+0 (used reg = )
18054 434D           E8         3B7B            call	_outb
18055 4350           83C4                   04  add	sp,*4
18056                                           !BCC_EOS
18057                                           ! 2152  outb(crtc_addr+1,CH);
18058                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18059 4353           8A46         04            mov	al,4[bp]
18060 4356           30E4                       xor	ah,ah
18061 4358           50                         push	ax
18062                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18063 4359           8B46         FA            mov	ax,-6[bp]
18064                                           ! Debug: list unsigned int = ax+1 (used reg = )
18065 435C           40                         inc	ax
18066 435D           50                         push	ax
18067                                           ! Debug: func () void = outb+0 (used reg = )
18068 435E           E8         3B6A            call	_outb
18069 4361           83C4                   04  add	sp,*4
18070                                           !BCC_EOS
18071                                           ! 2153  outb(crtc_addr,0x0b);
18072                                           ! Debug: list int = const $B (used reg = )
18073 4364           B8                   000B  mov	ax,*$B
18074 4367           50                         push	ax
18075                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18076 4368           FF76         FA            push	-6[bp]
18077                                           ! Debug: func () void = outb+0 (used reg = )
18078 436B           E8         3B5D            call	_outb
18079 436E           83C4                   04  add	sp,*4
18080                                           !BCC_EOS
18081                                           ! 2154  outb(crtc_addr+1,CL);
18082                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18083 4371           8A46         06            mov	al,6[bp]
18084 4374           30E4                       xor	ah,ah
18085 4376           50                         push	ax
18086                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18087 4377           8B46         FA            mov	ax,-6[bp]
18088                                           ! Debug: list unsigned int = ax+1 (used reg = )
18089 437A           40                         inc	ax
18090 437B           50                         push	ax
18091                                           ! Debug: func () void = outb+0 (used reg = )
18092 437C           E8         3B4C            call	_outb
18093 437F           83C4                   04  add	sp,*4
18094                                           !BCC_EOS
18095                                           ! 2155 }
18096 4382           89EC                       mov	sp,bp
18097 4384           5D                         pop	bp
18098 4385           C3                         ret
18099                                           ! 2156 static void biosfn_set_cursor_pos (page, cursor)
18100                                           ! 2157 Bit8u page;Bit16u cursor;
18101                       00004386            _biosfn_set_cursor_pos:
18102                                           !BCC_EOS
18103                                           !BCC_EOS
18104                                           ! 2158 {
18105                                           ! 2159  Bit8u xcurs,ycurs,current;
18106                                           !BCC_EOS
18107                                           ! 2160  Bit16u nbcols,nbrows,address,crtc_addr;
18108                                           !BCC_EOS
18109                                           ! 2161  if(page>7)return;
18110 4386           55                         push	bp
18111 4387           89E5                       mov	bp,sp
18112 4389           83C4                   F4  add	sp,*-$C
18113                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18114 438C           8A46         04            mov	al,4[bp]
18115 438F           3C                     07  cmp	al,*7
18116 4391           76           04            jbe 	.A2
18117                       00004393            .A3:
18118 4393           89EC                       mov	sp,bp
18119 4395           5D                         pop	bp
18120 4396           C3                         ret
18121                                           !BCC_EOS
18122                                           ! 2162  write_word(0x40, 0x50 +2*page, cursor);
18123                       00004397            .A2:
18124                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18125 4397           FF76         06            push	6[bp]
18126                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18127                                           ! Debug: expression subtree swapping
18128 439A           8A46         04            mov	al,4[bp]
18129 439D           30E4                       xor	ah,ah
18130 439F           D1E0                       shl	ax,*1
18131                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18132                                           ! Debug: expression subtree swapping
18133                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18134 43A1           05                   0050  add	ax,*$50
18135 43A4           50                         push	ax
18136                                           ! Debug: list int = const $40 (used reg = )
18137 43A5           B8                   0040  mov	ax,*$40
18138 43A8           50                         push	ax
18139                                           ! Debug: func () void = write_word+0 (used reg = )
18140 43A9           E8         3AF1            call	_write_word
18141 43AC           83C4                   06  add	sp,*6
18142                                           !BCC_EOS
18143                                           ! 2163  current=read_byte(0x40,0x62);
18144                                           ! Debug: list int = const $62 (used reg = )
18145 43AF           B8                   0062  mov	ax,*$62
18146 43B2           50                         push	ax
18147                                           ! Debug: list int = const $40 (used reg = )
18148 43B3           B8                   0040  mov	ax,*$40
18149 43B6           50                         push	ax
18150                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18151 43B7           E8         3AA5            call	_read_byte
18152 43BA           83C4                   04  add	sp,*4
18153                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18154 43BD           8846         FD            mov	-3[bp],al
18155                                           !BCC_EOS
18156                                           ! 2164  if(page==current)
18157                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18158 43C0           8A46         04            mov	al,4[bp]
18159 43C3           3A46         FD            cmp	al,-3[bp]
18160 43C6         0F85         00B8            bne 	.A4
18161                       000043CA            .A5:
18162                                           ! 2165   {
18163                                           ! 2166    nbcols=read_word(0x40,0x4A);
18164                                           ! Debug: list int = const $4A (used reg = )
18165 43CA           B8                   004A  mov	ax,*$4A
18166 43CD           50                         push	ax
18167                                           ! Debug: list int = const $40 (used reg = )
18168 43CE           B8                   0040  mov	ax,*$40
18169 43D1           50                         push	ax
18170                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18171 43D2           E8         3A9D            call	_read_word
18172 43D5           83C4                   04  add	sp,*4
18173                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18174 43D8           8946         FA            mov	-6[bp],ax
18175                                           !BCC_EOS
18176                                           ! 2167    nbrows=read_byte(0x40,0x84)+1;
18177                                           ! Debug: list int = const $84 (used reg = )
18178 43DB           B8                   0084  mov	ax,#$84
18179 43DE           50                         push	ax
18180                                           ! Debug: list int = const $40 (used reg = )
18181 43DF           B8                   0040  mov	ax,*$40
18182 43E2           50                         push	ax
18183                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18184 43E3           E8         3A79            call	_read_byte
18185 43E6           83C4                   04  add	sp,*4
18186                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18187 43E9           30E4                       xor	ah,ah
18188                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18189 43EB           40                         inc	ax
18190 43EC           8946         F8            mov	-8[bp],ax
18191                                           !BCC_EOS
18192                                           ! 2168    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18193                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18194 43EF           8A46         06            mov	al,6[bp]
18195                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18196 43F2           8846         FF            mov	-1[bp],al
18197                                           !BCC_EOS
18198                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18199 43F5           8B46         06            mov	ax,6[bp]
18200 43F8           30C0                       xor	al,al
18201                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18202 43FA           88E0                       mov	al,ah
18203 43FC           30E4                       xor	ah,ah
18204                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18205 43FE           8846         FE            mov	-2[bp],al
18206                                           !BCC_EOS
18207                                           ! 2169    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18208                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18209 4401           8A46         FE            mov	al,-2[bp]
18210 4404           30E4                       xor	ah,ah
18211 4406           8B4E         FA            mov	cx,-6[bp]
18212 4409           F7E9                       imul	cx
18213 440B           50                         push	ax
18214                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18215 440C           8B46         FA            mov	ax,-6[bp]
18216 440F           8B4E         F8            mov	cx,-8[bp]
18217 4412           F7E9                       imul	cx
18218                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18219 4414           0C                     FF  or	al,#$FF
18220                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18221                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18222 4416           89C3                       mov	bx,ax
18223 4418           8A46         04            mov	al,4[bp]
18224 441B           30E4                       xor	ah,ah
18225 441D           93                         xchg	ax,bx
18226 441E           40                         inc	ax
18227 441F           89D9                       mov	cx,bx
18228 4421           F7E9                       imul	cx
18229                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18230 4423           0246         FF            add	al,-1[bp]
18231 4426           80D4                   00  adc	ah,*0
18232                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18233 4429           0346         F2            add	ax,-$E[bp]
18234 442C           44                         inc	sp
18235 442D           44                         inc	sp
18236                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18237 442E           8946         F6            mov	-$A[bp],ax
18238                                           !BCC_EOS
18239                                           ! 2170    crtc_addr=read_word(0x40,0x63);
18240                                           ! Debug: list int = const $63 (used reg = )
18241 4431           B8                   0063  mov	ax,*$63
18242 4434           50                         push	ax
18243                                           ! Debug: list int = const $40 (used reg = )
18244 4435           B8                   0040  mov	ax,*$40
18245 4438           50                         push	ax
18246                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18247 4439           E8         3A36            call	_read_word
18248 443C           83C4                   04  add	sp,*4
18249                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18250 443F           8946         F4            mov	-$C[bp],ax
18251                                           !BCC_EOS
18252                                           ! 2171    outb(crtc_addr,0x0e);
18253                                           ! Debug: list int = const $E (used reg = )
18254 4442           B8                   000E  mov	ax,*$E
18255 4445           50                         push	ax
18256                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18257 4446           FF76         F4            push	-$C[bp]
18258                                           ! Debug: func () void = outb+0 (used reg = )
18259 4449           E8         3A7F            call	_outb
18260 444C           83C4                   04  add	sp,*4
18261                                           !BCC_EOS
18262                                           ! 2172    outb(crtc_addr+1,(address&0xff00)>>8);
18263                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18264 444F           8B46         F6            mov	ax,-$A[bp]
18265 4452           30C0                       xor	al,al
18266                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18267 4454           88E0                       mov	al,ah
18268 4456           30E4                       xor	ah,ah
18269                                           ! Debug: list unsigned int = ax+0 (used reg = )
18270 4458           50                         push	ax
18271                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18272 4459           8B46         F4            mov	ax,-$C[bp]
18273                                           ! Debug: list unsigned int = ax+1 (used reg = )
18274 445C           40                         inc	ax
18275 445D           50                         push	ax
18276                                           ! Debug: func () void = outb+0 (used reg = )
18277 445E           E8         3A6A            call	_outb
18278 4461           83C4                   04  add	sp,*4
18279                                           !BCC_EOS
18280                                           ! 2173    outb(crtc_addr,0x0f);
18281                                           ! Debug: list int = const $F (used reg = )
18282 4464           B8                   000F  mov	ax,*$F
18283 4467           50                         push	ax
18284                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18285 4468           FF76         F4            push	-$C[bp]
18286                                           ! Debug: func () void = outb+0 (used reg = )
18287 446B           E8         3A5D            call	_outb
18288 446E           83C4                   04  add	sp,*4
18289                                           !BCC_EOS
18290                                           ! 2174    outb(crtc_addr+1,address&0x00ff);
18291                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18292 4471           8A46         F6            mov	al,-$A[bp]
18293                                           ! Debug: list unsigned char = al+0 (used reg = )
18294 4474           30E4                       xor	ah,ah
18295 4476           50                         push	ax
18296                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18297 4477           8B46         F4            mov	ax,-$C[bp]
18298                                           ! Debug: list unsigned int = ax+1 (used reg = )
18299 447A           40                         inc	ax
18300 447B           50                         push	ax
18301                                           ! Debug: func () void = outb+0 (used reg = )
18302 447C           E8         3A4C            call	_outb
18303 447F           83C4                   04  add	sp,*4
18304                                           !BCC_EOS
18305                                           ! 2175   }
18306                                           ! 2176 }
18307                       00004482            .A4:
18308 4482           89EC                       mov	sp,bp
18309 4484           5D                         pop	bp
18310 4485           C3                         ret
18311                                           ! 2177 static void biosfn_get_cursor_pos (page,shape, pos)
18312                                           ! Register BX used in function biosfn_set_cursor_pos
18313                                           ! 2178 Bit8u page;Bit16u *shape;Bit16u *pos;
18314                       00004486            _biosfn_get_cursor_pos:
18315                                           !BCC_EOS
18316                                           !BCC_EOS
18317                                           !BCC_EOS
18318                                           ! 2179 {
18319                                           ! 2180  Bit16u ss=get_SS();
18320 4486           55                         push	bp
18321 4487           89E5                       mov	bp,sp
18322 4489           4C                         dec	sp
18323 448A           4C                         dec	sp
18324                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18325 448B           E8         3A5D            call	_get_SS
18326                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18327 448E           8946         FE            mov	-2[bp],ax
18328                                           !BCC_EOS
18329                                           ! 2181  write_word(ss, shape, 0);
18330                                           ! Debug: list int = const 0 (used reg = )
18331 4491           31C0                       xor	ax,ax
18332 4493           50                         push	ax
18333                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18334 4494           FF76         06            push	6[bp]
18335                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18336 4497           FF76         FE            push	-2[bp]
18337                                           ! Debug: func () void = write_word+0 (used reg = )
18338 449A           E8         3A00            call	_write_word
18339 449D           83C4                   06  add	sp,*6
18340                                           !BCC_EOS
18341                                           ! 2182  write_word(ss, pos, 0);
18342                                           ! Debug: list int = const 0 (used reg = )
18343 44A0           31C0                       xor	ax,ax
18344 44A2           50                         push	ax
18345                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18346 44A3           FF76         08            push	8[bp]
18347                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18348 44A6           FF76         FE            push	-2[bp]
18349                                           ! Debug: func () void = write_word+0 (used reg = )
18350 44A9           E8         39F1            call	_write_word
18351 44AC           83C4                   06  add	sp,*6
18352                                           !BCC_EOS
18353                                           ! 2183  if(page>7)return;
18354                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18355 44AF           8A46         04            mov	al,4[bp]
18356 44B2           3C                     07  cmp	al,*7
18357 44B4           76           04            jbe 	.A6
18358                       000044B6            .A7:
18359 44B6           89EC                       mov	sp,bp
18360 44B8           5D                         pop	bp
18361 44B9           C3                         ret
18362                                           !BCC_EOS
18363                                           ! 2184  write_word(ss,shape,read_word(0x40,0x60));
18364                       000044BA            .A6:
18365                                           ! Debug: list int = const $60 (used reg = )
18366 44BA           B8                   0060  mov	ax,*$60
18367 44BD           50                         push	ax
18368                                           ! Debug: list int = const $40 (used reg = )
18369 44BE           B8                   0040  mov	ax,*$40
18370 44C1           50                         push	ax
18371                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18372 44C2           E8         39AD            call	_read_word
18373 44C5           83C4                   04  add	sp,*4
18374                                           ! Debug: list unsigned short = ax+0 (used reg = )
18375 44C8           50                         push	ax
18376                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18377 44C9           FF76         06            push	6[bp]
18378                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18379 44CC           FF76         FE            push	-2[bp]
18380                                           ! Debug: func () void = write_word+0 (used reg = )
18381 44CF           E8         39CB            call	_write_word
18382 44D2           83C4                   06  add	sp,*6
18383                                           !BCC_EOS
18384                                           ! 2185  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18385                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18386 44D5           8A46         04            mov	al,4[bp]
18387 44D8           30E4                       xor	ah,ah
18388 44DA           D1E0                       shl	ax,*1
18389                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18390                                           ! Debug: expression subtree swapping
18391                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18392 44DC           05                   0050  add	ax,*$50
18393 44DF           50                         push	ax
18394                                           ! Debug: list int = const $40 (used reg = )
18395 44E0           B8                   0040  mov	ax,*$40
18396 44E3           50                         push	ax
18397                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18398 44E4           E8         398B            call	_read_word
18399 44E7           83C4                   04  add	sp,*4
18400                                           ! Debug: list unsigned short = ax+0 (used reg = )
18401 44EA           50                         push	ax
18402                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18403 44EB           FF76         08            push	8[bp]
18404                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18405 44EE           FF76         FE            push	-2[bp]
18406                                           ! Debug: func () void = write_word+0 (used reg = )
18407 44F1           E8         39A9            call	_write_word
18408 44F4           83C4                   06  add	sp,*6
18409                                           !BCC_EOS
18410                                           ! 2186 }
18411 44F7           89EC                       mov	sp,bp
18412 44F9           5D                         pop	bp
18413 44FA           C3                         ret
18414                                           ! 2187 static void biosfn_set_active_page (page)
18415                                           ! 2188 Bit8u page;
18416                       000044FB            _biosfn_set_active_page:
18417                                           !BCC_EOS
18418                                           ! 2189 {
18419                                           ! 2190  Bit16u cursor,dummy,crtc_addr;
18420                                           !BCC_EOS
18421                                           ! 2191  Bit16u nbcols,nbrows,address;
18422                                           !BCC_EOS
18423                                           ! 2192  Bit8u mode,line;
18424                                           !BCC_EOS
18425                                           ! 2193  if(page>7)return;
18426 44FB           55                         push	bp
18427 44FC           89E5                       mov	bp,sp
18428 44FE           83C4                   F2  add	sp,*-$E
18429                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18430 4501           8A46         04            mov	al,4[bp]
18431 4504           3C                     07  cmp	al,*7
18432 4506           76           04            jbe 	.A8
18433                       00004508            .A9:
18434 4508           89EC                       mov	sp,bp
18435 450A           5D                         pop	bp
18436 450B           C3                         ret
18437                                           !BCC_EOS
18438                                           ! 2194  mode=read_byte(0x40,0x49);
18439                       0000450C            .A8:
18440                                           ! Debug: list int = const $49 (used reg = )
18441 450C           B8                   0049  mov	ax,*$49
18442 450F           50                         push	ax
18443                                           ! Debug: list int = const $40 (used reg = )
18444 4510           B8                   0040  mov	ax,*$40
18445 4513           50                         push	ax
18446                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18447 4514           E8         3948            call	_read_byte
18448 4517           83C4                   04  add	sp,*4
18449                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18450 451A           8846         F3            mov	-$D[bp],al
18451                                           !BCC_EOS
18452                                           ! 2195  line=find_vga_entry(mode);
18453                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18454 451D           8A46         F3            mov	al,-$D[bp]
18455 4520           30E4                       xor	ah,ah
18456 4522           50                         push	ax
18457                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18458 4523           E8         384D            call	_find_vga_entry
18459 4526           44                         inc	sp
18460 4527           44                         inc	sp
18461                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18462 4528           8846         F2            mov	-$E[bp],al
18463                                           !BCC_EOS
18464                                           ! 2196  if(line==0xFF)return;
18465                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18466 452B           8A46         F2            mov	al,-$E[bp]
18467 452E           3C                     FF  cmp	al,#$FF
18468 4530           75           04            jne 	.AA
18469                       00004532            .AB:
18470 4532           89EC                       mov	sp,bp
18471 4534           5D                         pop	bp
18472 4535           C3                         ret
18473                                           !BCC_EOS
18474                                           ! 2197  biosfn_get_cursor_pos(page,&dummy,&cursor);
18475                       00004536            .AA:
18476                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18477 4536           8D5E         FE            lea	bx,-2[bp]
18478 4539           53                         push	bx
18479                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18480 453A           8D5E         FC            lea	bx,-4[bp]
18481 453D           53                         push	bx
18482                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18483 453E           8A46         04            mov	al,4[bp]
18484 4541           30E4                       xor	ah,ah
18485 4543           50                         push	ax
18486                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18487 4544           E8         FF3F            call	_biosfn_get_cursor_pos
18488 4547           83C4                   06  add	sp,*6
18489                                           !BCC_EOS
18490                                           ! 2198  if(vga_modes[line].class==0x00)
18491                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$12] struct  = vga_modes+0 (used reg = )
18492 454A           8A46         F2            mov	al,-$E[bp]
18493 454D           30E4                       xor	ah,ah
18494 454F           B1                     03  mov	cl,*3
18495 4551           D3E0                       shl	ax,cl
18496 4553           89C3                       mov	bx,ax
18497 4555           81C3                 0225  add	bx,#_vga_modes
18498                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18499 4559           8A47         01            mov	al,1[bx]
18500 455C           84C0                       test	al,al
18501 455E         0F85         006E            bne 	.AC
18502                       00004562            .AD:
18503                                           ! 2199   {
18504                                           ! 2200    nbcols=read_word(0x40,0x4A);
18505                                           ! Debug: list int = const $4A (used reg = )
18506 4562           B8                   004A  mov	ax,*$4A
18507 4565           50                         push	ax
18508                                           ! Debug: list int = const $40 (used reg = )
18509 4566           B8                   0040  mov	ax,*$40
18510 4569           50                         push	ax
18511                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18512 456A           E8         3905            call	_read_word
18513 456D           83C4                   04  add	sp,*4
18514                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18515 4570           8946         F8            mov	-8[bp],ax
18516                                           !BCC_EOS
18517                                           ! 2201    nbrows=read_byte(0x40,0x84)+1;
18518                                           ! Debug: list int = const $84 (used reg = )
18519 4573           B8                   0084  mov	ax,#$84
18520 4576           50                         push	ax
18521                                           ! Debug: list int = const $40 (used reg = )
18522 4577           B8                   0040  mov	ax,*$40
18523 457A           50                         push	ax
18524                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18525 457B           E8         38E1            call	_read_byte
18526 457E           83C4                   04  add	sp,*4
18527                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18528 4581           30E4                       xor	ah,ah
18529                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18530 4583           40                         inc	ax
18531 4584           8946         F6            mov	-$A[bp],ax
18532                                           !BCC_EOS
18533                                           ! 2202    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18534                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18535 4587           8B46         F8            mov	ax,-8[bp]
18536 458A           8B4E         F6            mov	cx,-$A[bp]
18537 458D           F7E9                       imul	cx
18538                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18539 458F           D1E0                       shl	ax,*1
18540                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18541 4591           0C                     FF  or	al,#$FF
18542                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18543                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18544 4593           89C3                       mov	bx,ax
18545 4595           8A46         04            mov	al,4[bp]
18546 4598           30E4                       xor	ah,ah
18547 459A           93                         xchg	ax,bx
18548 459B           40                         inc	ax
18549 459C           89D9                       mov	cx,bx
18550 459E           F7E9                       imul	cx
18551                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18552 45A0           8946         F4            mov	-$C[bp],ax
18553                                           !BCC_EOS
18554                                           ! 2203    write_word(0x40,0x4E,address);
18555                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18556 45A3           FF76         F4            push	-$C[bp]
18557                                           ! Debug: list int = const $4E (used reg = )
18558 45A6           B8                   004E  mov	ax,*$4E
18559 45A9           50                         push	ax
18560                                           ! Debug: list int = const $40 (used reg = )
18561 45AA           B8                   0040  mov	ax,*$40
18562 45AD           50                         push	ax
18563                                           ! Debug: func () void = write_word+0 (used reg = )
18564 45AE           E8         38EC            call	_write_word
18565 45B1           83C4                   06  add	sp,*6
18566                                           !BCC_EOS
18567                                           ! 2204    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18568                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18569 45B4           8B46         F8            mov	ax,-8[bp]
18570 45B7           8B4E         F6            mov	cx,-$A[bp]
18571 45BA           F7E9                       imul	cx
18572                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18573 45BC           0C                     FF  or	al,#$FF
18574                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18575                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18576 45BE           89C3                       mov	bx,ax
18577 45C0           8A46         04            mov	al,4[bp]
18578 45C3           30E4                       xor	ah,ah
18579 45C5           93                         xchg	ax,bx
18580 45C6           40                         inc	ax
18581 45C7           89D9                       mov	cx,bx
18582 45C9           F7E9                       imul	cx
18583                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18584 45CB           8946         F4            mov	-$C[bp],ax
18585                                           !BCC_EOS
18586                                           ! 2205   }
18587                                           ! 2206  else
18588                                           ! 2207   {
18589 45CE           EB           24            jmp .AE
18590                       000045D0            .AC:
18591                                           ! 2208    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18592                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$12] unsigned char = line_to_vpti+0 (used reg = )
18593 45D0           8A46         F2            mov	al,-$E[bp]
18594 45D3           30E4                       xor	ah,ah
18595 45D5           89C3                       mov	bx,ax
18596                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18597 45D7           8A87       02B5            mov	al,_line_to_vpti[bx]
18598 45DB           30E4                       xor	ah,ah
18599 45DD           B1                     06  mov	cl,*6
18600 45DF           D3E0                       shl	ax,cl
18601 45E1           89C3                       mov	bx,ax
18602 45E3           81C3                 02CB  add	bx,#_video_param_table
18603                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18604                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18605                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18606 45E7           8A46         04            mov	al,4[bp]
18607 45EA           30E4                       xor	ah,ah
18608 45EC           8B4F         03            mov	cx,3[bx]
18609 45EF           F7E9                       imul	cx
18610                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18611 45F1           8946         F4            mov	-$C[bp],ax
18612                                           !BCC_EOS
18613                                           ! 2209   }
18614                                           ! 2210  crtc_addr=read_word(0x40,0x63);
18615                       000045F4            .AE:
18616                                           ! Debug: list int = const $63 (used reg = )
18617 45F4           B8                   0063  mov	ax,*$63
18618 45F7           50                         push	ax
18619                                           ! Debug: list int = const $40 (used reg = )
18620 45F8           B8                   0040  mov	ax,*$40
18621 45FB           50                         push	ax
18622                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18623 45FC           E8         3873            call	_read_word
18624 45FF           83C4                   04  add	sp,*4
18625                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18626 4602           8946         FA            mov	-6[bp],ax
18627                                           !BCC_EOS
18628                                           ! 2211  outb(crtc_addr,0x0c);
18629                                           ! Debug: list int = const $C (used reg = )
18630 4605           B8                   000C  mov	ax,*$C
18631 4608           50                         push	ax
18632                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18633 4609           FF76         FA            push	-6[bp]
18634                                           ! Debug: func () void = outb+0 (used reg = )
18635 460C           E8         38BC            call	_outb
18636 460F           83C4                   04  add	sp,*4
18637                                           !BCC_EOS
18638                                           ! 2212  outb(crtc_addr+1,(address&0xff00)>>8);
18639                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18640 4612           8B46         F4            mov	ax,-$C[bp]
18641 4615           30C0                       xor	al,al
18642                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18643 4617           88E0                       mov	al,ah
18644 4619           30E4                       xor	ah,ah
18645                                           ! Debug: list unsigned int = ax+0 (used reg = )
18646 461B           50                         push	ax
18647                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18648 461C           8B46         FA            mov	ax,-6[bp]
18649                                           ! Debug: list unsigned int = ax+1 (used reg = )
18650 461F           40                         inc	ax
18651 4620           50                         push	ax
18652                                           ! Debug: func () void = outb+0 (used reg = )
18653 4621           E8         38A7            call	_outb
18654 4624           83C4                   04  add	sp,*4
18655                                           !BCC_EOS
18656                                           ! 2213  outb(crtc_addr,0x0d);
18657                                           ! Debug: list int = const $D (used reg = )
18658 4627           B8                   000D  mov	ax,*$D
18659 462A           50                         push	ax
18660                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18661 462B           FF76         FA            push	-6[bp]
18662                                           ! Debug: func () void = outb+0 (used reg = )
18663 462E           E8         389A            call	_outb
18664 4631           83C4                   04  add	sp,*4
18665                                           !BCC_EOS
18666                                           ! 2214  outb(crtc_addr+1,address&0x00ff);
18667                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18668 4634           8A46         F4            mov	al,-$C[bp]
18669                                           ! Debug: list unsigned char = al+0 (used reg = )
18670 4637           30E4                       xor	ah,ah
18671 4639           50                         push	ax
18672                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18673 463A           8B46         FA            mov	ax,-6[bp]
18674                                           ! Debug: list unsigned int = ax+1 (used reg = )
18675 463D           40                         inc	ax
18676 463E           50                         push	ax
18677                                           ! Debug: func () void = outb+0 (used reg = )
18678 463F           E8         3889            call	_outb
18679 4642           83C4                   04  add	sp,*4
18680                                           !BCC_EOS
18681                                           ! 2215  write_byte(0x40,0x62,page);
18682                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18683 4645           8A46         04            mov	al,4[bp]
18684 4648           30E4                       xor	ah,ah
18685 464A           50                         push	ax
18686                                           ! Debug: list int = const $62 (used reg = )
18687 464B           B8                   0062  mov	ax,*$62
18688 464E           50                         push	ax
18689                                           ! Debug: list int = const $40 (used reg = )
18690 464F           B8                   0040  mov	ax,*$40
18691 4652           50                         push	ax
18692                                           ! Debug: func () void = write_byte+0 (used reg = )
18693 4653           E8         382F            call	_write_byte
18694 4656           83C4                   06  add	sp,*6
18695                                           !BCC_EOS
18696                                           ! 2216  biosfn_set_cursor_pos(page,cursor);
18697                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18698 4659           FF76         FE            push	-2[bp]
18699                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18700 465C           8A46         04            mov	al,4[bp]
18701 465F           30E4                       xor	ah,ah
18702 4661           50                         push	ax
18703                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18704 4662           E8         FD21            call	_biosfn_set_cursor_pos
18705 4665           83C4                   04  add	sp,*4
18706                                           !BCC_EOS
18707                                           ! 2217 }
18708 4668           89EC                       mov	sp,bp
18709 466A           5D                         pop	bp
18710 466B           C3                         ret
18711                                           ! 2218 static void vgamem_copy_pl4(xsta
18712                                           ! Register BX used in function biosfn_set_active_page
18713                                           ! 2218 rt,ysrc,ydest,cols,nbcols,cheight)
18714                                           ! 2219 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18715                       0000466C            _vgamem_copy_pl4:
18716                                           !BCC_EOS
18717                                           !BCC_EOS
18718                                           !BCC_EOS
18719                                           !BCC_EOS
18720                                           !BCC_EOS
18721                                           !BCC_EOS
18722                                           ! 2220 {
18723                                           ! 2221  Bit16u src,dest;
18724                                           !BCC_EOS
18725                                           ! 2222  Bit8u i;
18726                                           !BCC_EOS
18727                                           ! 2223  src=ysrc*cheight*nbcols+xstart;
18728 466C           55                         push	bp
18729 466D           89E5                       mov	bp,sp
18730 466F           83C4                   FA  add	sp,*-6
18731                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18732 4672           8A46         0E            mov	al,$E[bp]
18733 4675           30E4                       xor	ah,ah
18734 4677           89C3                       mov	bx,ax
18735 4679           8A46         06            mov	al,6[bp]
18736 467C           30E4                       xor	ah,ah
18737 467E           89D9                       mov	cx,bx
18738 4680           F7E9                       imul	cx
18739                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18740 4682           89C3                       mov	bx,ax
18741 4684           8A46         0C            mov	al,$C[bp]
18742 4687           30E4                       xor	ah,ah
18743 4689           93                         xchg	ax,bx
18744 468A           89D9                       mov	cx,bx
18745 468C           F7E9                       imul	cx
18746                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18747 468E           0246         04            add	al,4[bp]
18748 4691           80D4                   00  adc	ah,*0
18749                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18750 4694           8946         FE            mov	-2[bp],ax
18751                                           !BCC_EOS
18752                                           ! 2224  dest=ydest*cheight*nbcols+xstart;
18753                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18754 4697           8A46         0E            mov	al,$E[bp]
18755 469A           30E4                       xor	ah,ah
18756 469C           89C3                       mov	bx,ax
18757 469E           8A46         08            mov	al,8[bp]
18758 46A1           30E4                       xor	ah,ah
18759 46A3           89D9                       mov	cx,bx
18760 46A5           F7E9                       imul	cx
18761                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18762 46A7           89C3                       mov	bx,ax
18763 46A9           8A46         0C            mov	al,$C[bp]
18764 46AC           30E4                       xor	ah,ah
18765 46AE           93                         xchg	ax,bx
18766 46AF           89D9                       mov	cx,bx
18767 46B1           F7E9                       imul	cx
18768                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18769 46B3           0246         04            add	al,4[bp]
18770 46B6           80D4                   00  adc	ah,*0
18771                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18772 46B9           8946         FC            mov	-4[bp],ax
18773                                           !BCC_EOS
18774                                           ! 2225  outw(0x3ce, 0x0105);
18775                                           ! Debug: list int = const $105 (used reg = )
18776 46BC           B8                   0105  mov	ax,#$105
18777 46BF           50                         push	ax
18778                                           ! Debug: list int = const $3CE (used reg = )
18779 46C0           B8                   03CE  mov	ax,#$3CE
18780 46C3           50                         push	ax
18781                                           ! Debug: func () void = outw+0 (used reg = )
18782 46C4           E8         3814            call	_outw
18783 46C7           83C4                   04  add	sp,*4
18784                                           !BCC_EOS
18785                                           ! 2226  for(i=0;i<cheight;i++)
18786                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18787 46CA           30C0                       xor	al,al
18788 46CC           8846         FB            mov	-5[bp],al
18789                                           !BCC_EOS
18790                                           !BCC_EOS
18791                                           ! 2227   {
18792 46CF           EB           43            jmp .B1
18793                       000046D1            .B2:
18794                                           ! 2228    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18795                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18796 46D1           8A46         0A            mov	al,$A[bp]
18797 46D4           30E4                       xor	ah,ah
18798 46D6           50                         push	ax
18799                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18800 46D7           8A46         0C            mov	al,$C[bp]
18801 46DA           30E4                       xor	ah,ah
18802 46DC           89C3                       mov	bx,ax
18803 46DE           8A46         FB            mov	al,-5[bp]
18804 46E1           30E4                       xor	ah,ah
18805 46E3           89D9                       mov	cx,bx
18806 46E5           F7E9                       imul	cx
18807                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18808                                           ! Debug: expression subtree swapping
18809 46E7           0346         FE            add	ax,-2[bp]
18810                                           ! Debug: list unsigned int = ax+0 (used reg = )
18811 46EA           50                         push	ax
18812                                           ! Debug: list unsigned int = const $A000 (used reg = )
18813 46EB           B8                   A000  mov	ax,#$A000
18814 46EE           50                         push	ax
18815                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18816 46EF           8A46         0C            mov	al,$C[bp]
18817 46F2           30E4                       xor	ah,ah
18818 46F4           89C3                       mov	bx,ax
18819 46F6           8A46         FB            mov	al,-5[bp]
18820 46F9           30E4                       xor	ah,ah
18821 46FB           89D9                       mov	cx,bx
18822 46FD           F7E9                       imul	cx
18823                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18824                                           ! Debug: expression subtree swapping
18825 46FF           0346         FC            add	ax,-4[bp]
18826                                           ! Debug: list unsigned int = ax+0 (used reg = )
18827 4702           50                         push	ax
18828                                           ! Debug: list unsigned int = const $A000 (used reg = )
18829 4703           B8                   A000  mov	ax,#$A000
18830 4706           50                         push	ax
18831                                           ! Debug: func () void = memcpyb+0 (used reg = )
18832 4707           E8         36F5            call	_memcpyb
18833 470A           83C4                   0A  add	sp,*$A
18834                                           !BCC_EOS
18835                                           ! 2229   }
18836                                           ! 2230  outw(0x3ce, 0x0005);
18837                       0000470D            .B0:
18838                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18839 470D           8A46         FB            mov	al,-5[bp]
18840 4710           40                         inc	ax
18841 4711           8846         FB            mov	-5[bp],al
18842                       00004714            .B1:
18843                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18844 4714           8A46         FB            mov	al,-5[bp]
18845 4717           3A46         0E            cmp	al,$E[bp]
18846 471A           72           B5            jb 	.B2
18847                       0000471C            .B3:
18848                       0000471C            .AF:
18849                                           ! Debug: list int = const 5 (used reg = )
18850 471C           B8                   0005  mov	ax,*5
18851 471F           50                         push	ax
18852                                           ! Debug: list int = const $3CE (used reg = )
18853 4720           B8                   03CE  mov	ax,#$3CE
18854 4723           50                         push	ax
18855                                           ! Debug: func () void = outw+0 (used reg = )
18856 4724           E8         37B4            call	_outw
18857 4727           83C4                   04  add	sp,*4
18858                                           !BCC_EOS
18859                                           ! 2231 }
18860 472A           89EC                       mov	sp,bp
18861 472C           5D                         pop	bp
18862 472D           C3                         ret
18863                                           ! 2232 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18864                                           ! Register BX used in function vgamem_copy_pl4
18865                                           ! 2233 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18866                       0000472E            _vgamem_fill_pl4:
18867                                           !BCC_EOS
18868                                           !BCC_EOS
18869                                           !BCC_EOS
18870                                           !BCC_EOS
18871                                           !BCC_EOS
18872                                           !BCC_EOS
18873                                           ! 2234 {
18874                                           ! 2235  Bit16u dest;
18875                                           !BCC_EOS
18876                                           ! 2236  Bit8u i;
18877                                           !BCC_EOS
18878                                           ! 2237  dest=ystart*cheight*nbcols+xstart;
18879 472E           55                         push	bp
18880 472F           89E5                       mov	bp,sp
18881 4731           83C4                   FC  add	sp,*-4
18882                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18883 4734           8A46         0C            mov	al,$C[bp]
18884 4737           30E4                       xor	ah,ah
18885 4739           89C3                       mov	bx,ax
18886 473B           8A46         06            mov	al,6[bp]
18887 473E           30E4                       xor	ah,ah
18888 4740           89D9                       mov	cx,bx
18889 4742           F7E9                       imul	cx
18890                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18891 4744           89C3                       mov	bx,ax
18892 4746           8A46         0A            mov	al,$A[bp]
18893 4749           30E4                       xor	ah,ah
18894 474B           93                         xchg	ax,bx
18895 474C           89D9                       mov	cx,bx
18896 474E           F7E9                       imul	cx
18897                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18898 4750           0246         04            add	al,4[bp]
18899 4753           80D4                   00  adc	ah,*0
18900                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18901 4756           8946         FE            mov	-2[bp],ax
18902                                           !BCC_EOS
18903                                           ! 2238  outw(0x3ce, 0x0205);
18904                                           ! Debug: list int = const $205 (used reg = )
18905 4759           B8                   0205  mov	ax,#$205
18906 475C           50                         push	ax
18907                                           ! Debug: list int = const $3CE (used reg = )
18908 475D           B8                   03CE  mov	ax,#$3CE
18909 4760           50                         push	ax
18910                                           ! Debug: func () void = outw+0 (used reg = )
18911 4761           E8         3777            call	_outw
18912 4764           83C4                   04  add	sp,*4
18913                                           !BCC_EOS
18914                                           ! 2239  for(i=0;i<cheight;i++)
18915                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18916 4767           30C0                       xor	al,al
18917 4769           8846         FD            mov	-3[bp],al
18918                                           !BCC_EOS
18919                                           !BCC_EOS
18920                                           ! 2240   {
18921 476C           EB           31            jmp .B6
18922                       0000476E            .B7:
18923                                           ! 2241    memsetb(0xa000,dest+i*nbcols,attr,cols);
18924                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18925 476E           8A46         08            mov	al,8[bp]
18926 4771           30E4                       xor	ah,ah
18927 4773           50                         push	ax
18928                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18929 4774           8A46         0E            mov	al,$E[bp]
18930 4777           30E4                       xor	ah,ah
18931 4779           50                         push	ax
18932                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18933 477A           8A46         0A            mov	al,$A[bp]
18934 477D           30E4                       xor	ah,ah
18935 477F           89C3                       mov	bx,ax
18936 4781           8A46         FD            mov	al,-3[bp]
18937 4784           30E4                       xor	ah,ah
18938 4786           89D9                       mov	cx,bx
18939 4788           F7E9                       imul	cx
18940                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18941                                           ! Debug: expression subtree swapping
18942 478A           0346         FE            add	ax,-2[bp]
18943                                           ! Debug: list unsigned int = ax+0 (used reg = )
18944 478D           50                         push	ax
18945                                           ! Debug: list unsigned int = const $A000 (used reg = )
18946 478E           B8                   A000  mov	ax,#$A000
18947 4791           50                         push	ax
18948                                           ! Debug: func () void = memsetb+0 (used reg = )
18949 4792           E8         3620            call	_memsetb
18950 4795           83C4                   08  add	sp,*8
18951                                           !BCC_EOS
18952                                           ! 2242   }
18953                                           ! 2243  outw(0x3ce, 0x0005);
18954                       00004798            .B5:
18955                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18956 4798           8A46         FD            mov	al,-3[bp]
18957 479B           40                         inc	ax
18958 479C           8846         FD            mov	-3[bp],al
18959                       0000479F            .B6:
18960                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18961 479F           8A46         FD            mov	al,-3[bp]
18962 47A2           3A46         0C            cmp	al,$C[bp]
18963 47A5           72           C7            jb 	.B7
18964                       000047A7            .B8:
18965                       000047A7            .B4:
18966                                           ! Debug: list int = const 5 (used reg = )
18967 47A7           B8                   0005  mov	ax,*5
18968 47AA           50                         push	ax
18969                                           ! Debug: list int = const $3CE (used reg = )
18970 47AB           B8                   03CE  mov	ax,#$3CE
18971 47AE           50                         push	ax
18972                                           ! Debug: func () void = outw+0 (used reg = )
18973 47AF           E8         3729            call	_outw
18974 47B2           83C4                   04  add	sp,*4
18975                                           !BCC_EOS
18976                                           ! 2244 }
18977 47B5           89EC                       mov	sp,bp
18978 47B7           5D                         pop	bp
18979 47B8           C3                         ret
18980                                           ! 2245 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18981                                           ! Register BX used in function vgamem_fill_pl4
18982                                           ! 2246 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18983                       000047B9            _vgamem_copy_cga:
18984                                           !BCC_EOS
18985                                           !BCC_EOS
18986                                           !BCC_EOS
18987                                           !BCC_EOS
18988                                           !BCC_EOS
18989                                           !BCC_EOS
18990                                           ! 2247 {
18991                                           ! 2248  Bit16u src,dest;
18992                                           !BCC_EOS
18993                                           ! 2249  Bit8u i;
18994                                           !BCC_EOS
18995                                           ! 2250  src=((ysrc*cheight*nbcols)>>1)+xstart;
18996 47B9           55                         push	bp
18997 47BA           89E5                       mov	bp,sp
18998 47BC           83C4                   FA  add	sp,*-6
18999                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19000 47BF           8A46         0E            mov	al,$E[bp]
19001 47C2           30E4                       xor	ah,ah
19002 47C4           89C3                       mov	bx,ax
19003 47C6           8A46         06            mov	al,6[bp]
19004 47C9           30E4                       xor	ah,ah
19005 47CB           89D9                       mov	cx,bx
19006 47CD           F7E9                       imul	cx
19007                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19008 47CF           89C3                       mov	bx,ax
19009 47D1           8A46         0C            mov	al,$C[bp]
19010 47D4           30E4                       xor	ah,ah
19011 47D6           93                         xchg	ax,bx
19012 47D7           89D9                       mov	cx,bx
19013 47D9           F7E9                       imul	cx
19014                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19015 47DB           D1E8                       shr	ax,*1
19016                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19017 47DD           0246         04            add	al,4[bp]
19018 47E0           80D4                   00  adc	ah,*0
19019                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19020 47E3           8946         FE            mov	-2[bp],ax
19021                                           !BCC_EOS
19022                                           ! 2251  dest=((ydest*cheight*nbcols)>>1)+xstart;
19023                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19024 47E6           8A46         0E            mov	al,$E[bp]
19025 47E9           30E4                       xor	ah,ah
19026 47EB           89C3                       mov	bx,ax
19027 47ED           8A46         08            mov	al,8[bp]
19028 47F0           30E4                       xor	ah,ah
19029 47F2           89D9                       mov	cx,bx
19030 47F4           F7E9                       imul	cx
19031                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19032 47F6           89C3                       mov	bx,ax
19033 47F8           8A46         0C            mov	al,$C[bp]
19034 47FB           30E4                       xor	ah,ah
19035 47FD           93                         xchg	ax,bx
19036 47FE           89D9                       mov	cx,bx
19037 4800           F7E9                       imul	cx
19038                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19039 4802           D1E8                       shr	ax,*1
19040                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19041 4804           0246         04            add	al,4[bp]
19042 4807           80D4                   00  adc	ah,*0
19043                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19044 480A           8946         FC            mov	-4[bp],ax
19045                                           !BCC_EOS
19046                                           ! 2252  for(i=0;i<cheight;i++)
19047                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19048 480D           30C0                       xor	al,al
19049 480F           8846         FB            mov	-5[bp],al
19050                                           !BCC_EOS
19051                                           !BCC_EOS
19052                                           ! 2253   {
19053 4812           E9         00A8            br 	.BB
19054                       00004815            .BC:
19055                                           ! 2254    if (i & 1)
19056                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19057 4815           8A46         FB            mov	al,-5[bp]
19058 4818           24                     01  and	al,*1
19059 481A           84C0                       test	al,al
19060 481C           74           56            je  	.BD
19061                       0000481E            .BE:
19062                                           ! 2255      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19063                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19064 481E           8A46         0A            mov	al,$A[bp]
19065 4821           30E4                       xor	ah,ah
19066 4823           50                         push	ax
19067                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19068 4824           8A46         FB            mov	al,-5[bp]
19069 4827           30E4                       xor	ah,ah
19070 4829           D1E8                       shr	ax,*1
19071                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19072 482B           89C3                       mov	bx,ax
19073 482D           8A46         0C            mov	al,$C[bp]
19074 4830           30E4                       xor	ah,ah
19075 4832           93                         xchg	ax,bx
19076 4833           89D9                       mov	cx,bx
19077 4835           F7E9                       imul	cx
19078 4837           50                         push	ax
19079                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19080                                           ! Debug: expression subtree swapping
19081 4838           8B46         FE            mov	ax,-2[bp]
19082                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19083 483B           05                   2000  add	ax,#$2000
19084 483E           0346         F6            add	ax,-$A[bp]
19085 4841           44                         inc	sp
19086 4842           44                         inc	sp
19087                                           ! Debug: list unsigned int = ax+0 (used reg = )
19088 4843           50                         push	ax
19089                                           ! Debug: list unsigned int = const $B800 (used reg = )
19090 4844           B8                   B800  mov	ax,#$B800
19091 4847           50                         push	ax
19092                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19093 4848           8A46         FB            mov	al,-5[bp]
19094 484B           30E4                       xor	ah,ah
19095 484D           D1E8                       shr	ax,*1
19096                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19097 484F           89C3                       mov	bx,ax
19098 4851           8A46         0C            mov	al,$C[bp]
19099 4854           30E4                       xor	ah,ah
19100 4856           93                         xchg	ax,bx
19101 4857           89D9                       mov	cx,bx
19102 4859           F7E9                       imul	cx
19103 485B           50                         push	ax
19104                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19105                                           ! Debug: expression subtree swapping
19106 485C           8B46         FC            mov	ax,-4[bp]
19107                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19108 485F           05                   2000  add	ax,#$2000
19109 4862           0346         F2            add	ax,-$E[bp]
19110 4865           44                         inc	sp
19111 4866           44                         inc	sp
19112                                           ! Debug: list unsigned int = ax+0 (used reg = )
19113 4867           50                         push	ax
19114                                           ! Debug: list unsigned int = const $B800 (used reg = )
19115 4868           B8                   B800  mov	ax,#$B800
19116 486B           50                         push	ax
19117                                           ! Debug: func () void = memcpyb+0 (used reg = )
19118 486C           E8         3590            call	_memcpyb
19119 486F           83C4                   0A  add	sp,*$A
19120                                           !BCC_EOS
19121                                           ! 2256    else
19122                                           ! 2257      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19123 4872           EB           42            jmp .BF
19124                       00004874            .BD:
19125                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19126 4874           8A46         0A            mov	al,$A[bp]
19127 4877           30E4                       xor	ah,ah
19128 4879           50                         push	ax
19129                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19130 487A           8A46         FB            mov	al,-5[bp]
19131 487D           30E4                       xor	ah,ah
19132 487F           D1E8                       shr	ax,*1
19133                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19134 4881           89C3                       mov	bx,ax
19135 4883           8A46         0C            mov	al,$C[bp]
19136 4886           30E4                       xor	ah,ah
19137 4888           93                         xchg	ax,bx
19138 4889           89D9                       mov	cx,bx
19139 488B           F7E9                       imul	cx
19140                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19141                                           ! Debug: expression subtree swapping
19142 488D           0346         FE            add	ax,-2[bp]
19143                                           ! Debug: list unsigned int = ax+0 (used reg = )
19144 4890           50                         push	ax
19145                                           ! Debug: list unsigned int = const $B800 (used reg = )
19146 4891           B8                   B800  mov	ax,#$B800
19147 4894           50                         push	ax
19148                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19149 4895           8A46         FB            mov	al,-5[bp]
19150 4898           30E4                       xor	ah,ah
19151 489A           D1E8                       shr	ax,*1
19152                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19153 489C           89C3                       mov	bx,ax
19154 489E           8A46         0C            mov	al,$C[bp]
19155 48A1           30E4                       xor	ah,ah
19156 48A3           93                         xchg	ax,bx
19157 48A4           89D9                       mov	cx,bx
19158 48A6           F7E9                       imul	cx
19159                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19160                                           ! Debug: expression subtree swapping
19161 48A8           0346         FC            add	ax,-4[bp]
19162                                           ! Debug: list unsigned int = ax+0 (used reg = )
19163 48AB           50                         push	ax
19164                                           ! Debug: list unsigned int = const $B800 (used reg = )
19165 48AC           B8                   B800  mov	ax,#$B800
19166 48AF           50                         push	ax
19167                                           ! Debug: func () void = memcpyb+0 (used reg = )
19168 48B0           E8         354C            call	_memcpyb
19169 48B3           83C4                   0A  add	sp,*$A
19170                                           !BCC_EOS
19171                                           ! 2258   }
19172                       000048B6            .BF:
19173                                           ! 2259 }
19174                       000048B6            .BA:
19175                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19176 48B6           8A46         FB            mov	al,-5[bp]
19177 48B9           40                         inc	ax
19178 48BA           8846         FB            mov	-5[bp],al
19179                       000048BD            .BB:
19180                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19181 48BD           8A46         FB            mov	al,-5[bp]
19182 48C0           3A46         0E            cmp	al,$E[bp]
19183 48C3         0F82         FF4E            blo 	.BC
19184                       000048C7            .C0:
19185                       000048C7            .B9:
19186 48C7           89EC                       mov	sp,bp
19187 48C9           5D                         pop	bp
19188 48CA           C3                         ret
19189                                           ! 2260 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19190                                           ! Register BX used in function vgamem_copy_cga
19191                                           ! 2261 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19192                       000048CB            _vgamem_fill_cga:
19193                                           !BCC_EOS
19194                                           !BCC_EOS
19195                                           !BCC_EOS
19196                                           !BCC_EOS
19197                                           !BCC_EOS
19198                                           !BCC_EOS
19199                                           ! 2262 {
19200                                           ! 2263  Bit16u dest;
19201                                           !BCC_EOS
19202                                           ! 2264  Bit8u i;
19203                                           !BCC_EOS
19204                                           ! 2265  dest=((ystart*cheight*nbcols)>>1)+xstart;
19205 48CB           55                         push	bp
19206 48CC           89E5                       mov	bp,sp
19207 48CE           83C4                   FC  add	sp,*-4
19208                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19209 48D1           8A46         0C            mov	al,$C[bp]
19210 48D4           30E4                       xor	ah,ah
19211 48D6           89C3                       mov	bx,ax
19212 48D8           8A46         06            mov	al,6[bp]
19213 48DB           30E4                       xor	ah,ah
19214 48DD           89D9                       mov	cx,bx
19215 48DF           F7E9                       imul	cx
19216                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19217 48E1           89C3                       mov	bx,ax
19218 48E3           8A46         0A            mov	al,$A[bp]
19219 48E6           30E4                       xor	ah,ah
19220 48E8           93                         xchg	ax,bx
19221 48E9           89D9                       mov	cx,bx
19222 48EB           F7E9                       imul	cx
19223                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19224 48ED           D1E8                       shr	ax,*1
19225                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19226 48EF           0246         04            add	al,4[bp]
19227 48F2           80D4                   00  adc	ah,*0
19228                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19229 48F5           8946         FE            mov	-2[bp],ax
19230                                           !BCC_EOS
19231                                           ! 2266  for(i=0;i<cheight;i++)
19232                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19233 48F8           30C0                       xor	al,al
19234 48FA           8846         FD            mov	-3[bp],al
19235                                           !BCC_EOS
19236                                           !BCC_EOS
19237                                           ! 2267   {
19238 48FD           EB           75            jmp .C3
19239                       000048FF            .C4:
19240                                           ! 2268    if (i & 1)
19241                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19242 48FF           8A46         FD            mov	al,-3[bp]
19243 4902           24                     01  and	al,*1
19244 4904           84C0                       test	al,al
19245 4906           74           38            je  	.C5
19246                       00004908            .C6:
19247                                           ! 2269      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19248                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19249 4908           8A46         08            mov	al,8[bp]
19250 490B           30E4                       xor	ah,ah
19251 490D           50                         push	ax
19252                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19253 490E           8A46         0E            mov	al,$E[bp]
19254 4911           30E4                       xor	ah,ah
19255 4913           50                         push	ax
19256                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19257 4914           8A46         FD            mov	al,-3[bp]
19258 4917           30E4                       xor	ah,ah
19259 4919           D1E8                       shr	ax,*1
19260                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19261 491B           89C3                       mov	bx,ax
19262 491D           8A46         0A            mov	al,$A[bp]
19263 4920           30E4                       xor	ah,ah
19264 4922           93                         xchg	ax,bx
19265 4923           89D9                       mov	cx,bx
19266 4925           F7E9                       imul	cx
19267 4927           50                         push	ax
19268                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19269                                           ! Debug: expression subtree swapping
19270 4928           8B46         FE            mov	ax,-2[bp]
19271                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19272 492B           05                   2000  add	ax,#$2000
19273 492E           0346         F6            add	ax,-$A[bp]
19274 4931           44                         inc	sp
19275 4932           44                         inc	sp
19276                                           ! Debug: list unsigned int = ax+0 (used reg = )
19277 4933           50                         push	ax
19278                                           ! Debug: list unsigned int = const $B800 (used reg = )
19279 4934           B8                   B800  mov	ax,#$B800
19280 4937           50                         push	ax
19281                                           ! Debug: func () void = memsetb+0 (used reg = )
19282 4938           E8         347A            call	_memsetb
19283 493B           83C4                   08  add	sp,*8
19284                                           !BCC_EOS
19285                                           ! 2270    else
19286                                           ! 2271      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19287 493E           EB           2D            jmp .C7
19288                       00004940            .C5:
19289                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19290 4940           8A46         08            mov	al,8[bp]
19291 4943           30E4                       xor	ah,ah
19292 4945           50                         push	ax
19293                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19294 4946           8A46         0E            mov	al,$E[bp]
19295 4949           30E4                       xor	ah,ah
19296 494B           50                         push	ax
19297                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19298 494C           8A46         FD            mov	al,-3[bp]
19299 494F           30E4                       xor	ah,ah
19300 4951           D1E8                       shr	ax,*1
19301                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19302 4953           89C3                       mov	bx,ax
19303 4955           8A46         0A            mov	al,$A[bp]
19304 4958           30E4                       xor	ah,ah
19305 495A           93                         xchg	ax,bx
19306 495B           89D9                       mov	cx,bx
19307 495D           F7E9                       imul	cx
19308                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19309                                           ! Debug: expression subtree swapping
19310 495F           0346         FE            add	ax,-2[bp]
19311                                           ! Debug: list unsigned int = ax+0 (used reg = )
19312 4962           50                         push	ax
19313                                           ! Debug: list unsigned int = const $B800 (used reg = )
19314 4963           B8                   B800  mov	ax,#$B800
19315 4966           50                         push	ax
19316                                           ! Debug: func () void = memsetb+0 (used reg = )
19317 4967           E8         344B            call	_memsetb
19318 496A           83C4                   08  add	sp,*8
19319                                           !BCC_EOS
19320                                           ! 2272   }
19321                       0000496D            .C7:
19322                                           ! 2273 }
19323                       0000496D            .C2:
19324                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19325 496D           8A46         FD            mov	al,-3[bp]
19326 4970           40                         inc	ax
19327 4971           8846         FD            mov	-3[bp],al
19328                       00004974            .C3:
19329                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19330 4974           8A46         FD            mov	al,-3[bp]
19331 4977           3A46         0C            cmp	al,$C[bp]
19332 497A           72           83            jb 	.C4
19333                       0000497C            .C8:
19334                       0000497C            .C1:
19335 497C           89EC                       mov	sp,bp
19336 497E           5D                         pop	bp
19337 497F           C3                         ret
19338                                           ! 2274 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19339                                           ! Register BX used in function vgamem_fill_cga
19340                                           ! 2275 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19341                       00004980            _biosfn_scroll:
19342                                           !BCC_EOS
19343                                           !BCC_EOS
19344                                           !BCC_EOS
19345                                           !BCC_EOS
19346                                           !BCC_EOS
19347                                           !BCC_EOS
19348                                           !BCC_EOS
19349                                           !BCC_EOS
19350                                           ! 2276 {
19351                                           ! 2277  Bit8u mode,line,cheight,bpp,cols;
19352                                           !BCC_EOS
19353                                           ! 2278  Bit16u nbcols,nbrows,i;
19354                                           !BCC_EOS
19355                                           ! 2279  Bit16u address;
19356                                           !BCC_EOS
19357                                           ! 2280  if(rul>rlr)return;
19358 4980           55                         push	bp
19359 4981           89E5                       mov	bp,sp
19360 4983           83C4                   F2  add	sp,*-$E
19361                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19362 4986           8A46         08            mov	al,8[bp]
19363 4989           3A46         0C            cmp	al,$C[bp]
19364 498C           76           04            jbe 	.C9
19365                       0000498E            .CA:
19366 498E           89EC                       mov	sp,bp
19367 4990           5D                         pop	bp
19368 4991           C3                         ret
19369                                           !BCC_EOS
19370                                           ! 2281  if(cul>clr)return;
19371                       00004992            .C9:
19372                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19373 4992           8A46         0A            mov	al,$A[bp]
19374 4995           3A46         0E            cmp	al,$E[bp]
19375 4998           76           04            jbe 	.CB
19376                       0000499A            .CC:
19377 499A           89EC                       mov	sp,bp
19378 499C           5D                         pop	bp
19379 499D           C3                         ret
19380                                           !BCC_EOS
19381                                           ! 2282  mode=read_byte(0x40,0x49);
19382                       0000499E            .CB:
19383                                           ! Debug: list int = const $49 (used reg = )
19384 499E           B8                   0049  mov	ax,*$49
19385 49A1           50                         push	ax
19386                                           ! Debug: list int = const $40 (used reg = )
19387 49A2           B8                   0040  mov	ax,*$40
19388 49A5           50                         push	ax
19389                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19390 49A6           E8         34B6            call	_read_byte
19391 49A9           83C4                   04  add	sp,*4
19392                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19393 49AC           8846         FF            mov	-1[bp],al
19394                                           !BCC_EOS
19395                                           ! 2283  line=find_vga_entry(mode);
19396                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19397 49AF           8A46         FF            mov	al,-1[bp]
19398 49B2           30E4                       xor	ah,ah
19399 49B4           50                         push	ax
19400                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19401 49B5           E8         33BB            call	_find_vga_entry
19402 49B8           44                         inc	sp
19403 49B9           44                         inc	sp
19404                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19405 49BA           8846         FE            mov	-2[bp],al
19406                                           !BCC_EOS
19407                                           ! 2284  if(line==0xFF)return;
19408                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19409 49BD           8A46         FE            mov	al,-2[bp]
19410 49C0           3C                     FF  cmp	al,#$FF
19411 49C2           75           04            jne 	.CD
19412                       000049C4            .CE:
19413 49C4           89EC                       mov	sp,bp
19414 49C6           5D                         pop	bp
19415 49C7           C3                         ret
19416                                           !BCC_EOS
19417                                           ! 2285  nbrows=read_byte(0x40,0x84)+1;
19418                       000049C8            .CD:
19419                                           ! Debug: list int = const $84 (used reg = )
19420 49C8           B8                   0084  mov	ax,#$84
19421 49CB           50                         push	ax
19422                                           ! Debug: list int = const $40 (used reg = )
19423 49CC           B8                   0040  mov	ax,*$40
19424 49CF           50                         push	ax
19425                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19426 49D0           E8         348C            call	_read_byte
19427 49D3           83C4                   04  add	sp,*4
19428                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19429 49D6           30E4                       xor	ah,ah
19430                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19431 49D8           40                         inc	ax
19432 49D9           8946         F6            mov	-$A[bp],ax
19433                                           !BCC_EOS
19434                                           ! 2286  nbcols=read_word(0x40,0x4A);
19435                                           ! Debug: list int = const $4A (used reg = )
19436 49DC           B8                   004A  mov	ax,*$4A
19437 49DF           50                         push	ax
19438                                           ! Debug: list int = const $40 (used reg = )
19439 49E0           B8                   0040  mov	ax,*$40
19440 49E3           50                         push	ax
19441                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19442 49E4           E8         348B            call	_read_word
19443 49E7           83C4                   04  add	sp,*4
19444                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19445 49EA           8946         F8            mov	-8[bp],ax
19446                                           !BCC_EOS
19447                                           ! 2287  if(page==0xFF)
19448                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19449 49ED           8A46         10            mov	al,$10[bp]
19450 49F0           3C                     FF  cmp	al,#$FF
19451 49F2           75           11            jne 	.CF
19452                       000049F4            .D0:
19453                                           ! 2288   page=read_byte(0x40,0x62);
19454                                           ! Debug: list int = const $62 (used reg = )
19455 49F4           B8                   0062  mov	ax,*$62
19456 49F7           50                         push	ax
19457                                           ! Debug: list int = const $40 (used reg = )
19458 49F8           B8                   0040  mov	ax,*$40
19459 49FB           50                         push	ax
19460                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19461 49FC           E8         3460            call	_read_byte
19462 49FF           83C4                   04  add	sp,*4
19463                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19464 4A02           8846         10            mov	$10[bp],al
19465                                           !BCC_EOS
19466                                           ! 2289  if(rlr>=nbrows)rlr=nbrows-1;
19467                       00004A05            .CF:
19468                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19469 4A05           8A46         0C            mov	al,$C[bp]
19470 4A08           30E4                       xor	ah,ah
19471 4A0A           3B46         F6            cmp	ax,-$A[bp]
19472 4A0D           72           07            jb  	.D1
19473                       00004A0F            .D2:
19474                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19475 4A0F           8B46         F6            mov	ax,-$A[bp]
19476                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19477 4A12           48                         dec	ax
19478 4A13           8846         0C            mov	$C[bp],al
19479                                           !BCC_EOS
19480                                           ! 2290  if(clr>=nbcols)clr=nbcols-1;
19481                       00004A16            .D1:
19482                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19483 4A16           8A46         0E            mov	al,$E[bp]
19484 4A19           30E4                       xor	ah,ah
19485 4A1B           3B46         F8            cmp	ax,-8[bp]
19486 4A1E           72           07            jb  	.D3
19487                       00004A20            .D4:
19488                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19489 4A20           8B46         F8            mov	ax,-8[bp]
19490                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19491 4A23           48                         dec	ax
19492 4A24           8846         0E            mov	$E[bp],al
19493                                           !BCC_EOS
19494                                           ! 2291  if(nblines>n
19495                       00004A27            .D3:
19496                                           ! 2291 brows)nblines=0;
19497                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19498 4A27           8A46         04            mov	al,4[bp]
19499 4A2A           30E4                       xor	ah,ah
19500 4A2C           3B46         F6            cmp	ax,-$A[bp]
19501 4A2F           76           05            jbe 	.D5
19502                       00004A31            .D6:
19503                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19504 4A31           30C0                       xor	al,al
19505 4A33           8846         04            mov	4[bp],al
19506                                           !BCC_EOS
19507                                           ! 2292  cols=clr-cul+1;
19508                       00004A36            .D5:
19509                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19510 4A36           8A46         0E            mov	al,$E[bp]
19511 4A39           30E4                       xor	ah,ah
19512 4A3B           2A46         0A            sub	al,$A[bp]
19513 4A3E           80DC                   00  sbb	ah,*0
19514                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19515                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19516 4A41           40                         inc	ax
19517 4A42           8846         FB            mov	-5[bp],al
19518                                           !BCC_EOS
19519                                           ! 2293  if(vga_modes[line].class==0x00)
19520                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
19521 4A45           8A46         FE            mov	al,-2[bp]
19522 4A48           30E4                       xor	ah,ah
19523 4A4A           B1                     03  mov	cl,*3
19524 4A4C           D3E0                       shl	ax,cl
19525 4A4E           89C3                       mov	bx,ax
19526 4A50           81C3                 0225  add	bx,#_vga_modes
19527                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19528 4A54           8A47         01            mov	al,1[bx]
19529 4A57           84C0                       test	al,al
19530 4A59         0F85         0250            bne 	.D7
19531                       00004A5D            .D8:
19532                                           ! 2294   {
19533                                           ! 2295    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19534                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19535 4A5D           8B46         F8            mov	ax,-8[bp]
19536 4A60           8B4E         F6            mov	cx,-$A[bp]
19537 4A63           F7E9                       imul	cx
19538                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19539 4A65           D1E0                       shl	ax,*1
19540                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19541 4A67           0C                     FF  or	al,#$FF
19542                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19543                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19544 4A69           89C3                       mov	bx,ax
19545 4A6B           8A46         10            mov	al,$10[bp]
19546 4A6E           30E4                       xor	ah,ah
19547 4A70           93                         xchg	ax,bx
19548 4A71           40                         inc	ax
19549 4A72           89D9                       mov	cx,bx
19550 4A74           F7E9                       imul	cx
19551                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19552 4A76           8946         F2            mov	-$E[bp],ax
19553                                           !BCC_EOS
19554                                           ! 2296    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19555                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19556 4A79           8A46         04            mov	al,4[bp]
19557 4A7C           84C0                       test	al,al
19558 4A7E           75           67            jne 	.D9
19559                       00004A80            .DE:
19560                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19561 4A80           8A46         08            mov	al,8[bp]
19562 4A83           84C0                       test	al,al
19563 4A85           75           60            jne 	.D9
19564                       00004A87            .DD:
19565                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19566 4A87           8A46         0A            mov	al,$A[bp]
19567 4A8A           84C0                       test	al,al
19568 4A8C           75           59            jne 	.D9
19569                       00004A8E            .DC:
19570                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19571 4A8E           8B46         F6            mov	ax,-$A[bp]
19572                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19573                                           ! Debug: expression subtree swapping
19574 4A91           48                         dec	ax
19575 4A92           50                         push	ax
19576 4A93           8A46         0C            mov	al,$C[bp]
19577 4A96           30E4                       xor	ah,ah
19578 4A98           3B46         F0            cmp	ax,-$10[bp]
19579 4A9B           8D66         F2            lea	sp,-$E[bp]
19580 4A9E           75           47            jne 	.D9
19581                       00004AA0            .DB:
19582                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19583 4AA0           8B46         F8            mov	ax,-8[bp]
19584                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19585                                           ! Debug: expression subtree swapping
19586 4AA3           48                         dec	ax
19587 4AA4           50                         push	ax
19588 4AA5           8A46         0E            mov	al,$E[bp]
19589 4AA8           30E4                       xor	ah,ah
19590 4AAA           3B46         F0            cmp	ax,-$10[bp]
19591 4AAD           8D66         F2            lea	sp,-$E[bp]
19592 4AB0           75           35            jne 	.D9
19593                       00004AB2            .DA:
19594                                           ! 2297     {
19595                                           ! 2298      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19596                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19597 4AB2           8B46         F6            mov	ax,-$A[bp]
19598 4AB5           8B4E         F8            mov	cx,-8[bp]
19599 4AB8           F7E9                       imul	cx
19600                                           ! Debug: list unsigned int = ax+0 (used reg = )
19601 4ABA           50                         push	ax
19602                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19603 4ABB           8A46         06            mov	al,6[bp]
19604 4ABE           30E4                       xor	ah,ah
19605                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19606 4AC0           B9                   0100  mov	cx,#$100
19607 4AC3           F7E9                       imul	cx
19608                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19609                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19610 4AC5           05                   0020  add	ax,*$20
19611 4AC8           50                         push	ax
19612                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19613 4AC9           FF76         F2            push	-$E[bp]
19614                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19615 4ACC           8A46         FE            mov	al,-2[bp]
19616 4ACF           30E4                       xor	ah,ah
19617 4AD1           B1                     03  mov	cl,*3
19618 4AD3           D3E0                       shl	ax,cl
19619 4AD5           89C3                       mov	bx,ax
19620 4AD7           81C3                 0225  add	bx,#_vga_modes
19621                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19622 4ADB           FF77         04            push	4[bx]
19623                                           ! Debug: func () void = memsetw+0 (used reg = )
19624 4ADE           E8         32F9            call	_memsetw
19625 4AE1           83C4                   08  add	sp,*8
19626                                           !BCC_EOS
19627                                           ! 2299     }
19628                                           ! 2300    else
19629                                           ! 2301     {
19630 4AE4           E9         01C3            br 	.DF
19631                       00004AE7            .D9:
19632                                           ! 2302      if(dir==1)
19633                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19634 4AE7           8A46         12            mov	al,$12[bp]
19635 4AEA           3C                     01  cmp	al,*1
19636 4AEC         0F85         00DC            bne 	.E0
19637                       00004AF0            .E1:
19638                                           ! 2303       {for(i=rul;i<=rlr;i++)
19639                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19640 4AF0           8A46         08            mov	al,8[bp]
19641 4AF3           30E4                       xor	ah,ah
19642 4AF5           8946         F4            mov	-$C[bp],ax
19643                                           !BCC_EOS
19644                                           !BCC_EOS
19645                                           ! 2304         {
19646 4AF8           E9         00C2            br 	.E4
19647                       00004AFB            .E5:
19648                                           ! 2305          if((i+nblines>rlr)||(nblines==0))
19649                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19650 4AFB           8B46         F4            mov	ax,-$C[bp]
19651 4AFE           0246         04            add	al,4[bp]
19652 4B01           80D4                   00  adc	ah,*0
19653                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19654 4B04           50                         push	ax
19655 4B05           8A46         0C            mov	al,$C[bp]
19656 4B08           30E4                       xor	ah,ah
19657 4B0A           3B46         F0            cmp	ax,-$10[bp]
19658 4B0D           8D66         F2            lea	sp,-$E[bp]
19659 4B10           72           07            jb  	.E7
19660                       00004B12            .E8:
19661                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19662 4B12           8A46         04            mov	al,4[bp]
19663 4B15           84C0                       test	al,al
19664 4B17           75           42            jne 	.E6
19665                       00004B19            .E7:
19666                                           ! 2306           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19667                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19668 4B19           8A46         FB            mov	al,-5[bp]
19669 4B1C           30E4                       xor	ah,ah
19670 4B1E           50                         push	ax
19671                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19672 4B1F           8A46         06            mov	al,6[bp]
19673 4B22           30E4                       xor	ah,ah
19674                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19675 4B24           B9                   0100  mov	cx,#$100
19676 4B27           F7E9                       imul	cx
19677                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19678                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19679 4B29           05                   0020  add	ax,*$20
19680 4B2C           50                         push	ax
19681                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19682 4B2D           8B46         F4            mov	ax,-$C[bp]
19683 4B30           8B4E         F8            mov	cx,-8[bp]
19684 4B33           F7E9                       imul	cx
19685                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19686 4B35           0246         0A            add	al,$A[bp]
19687 4B38           80D4                   00  adc	ah,*0
19688                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19689 4B3B           D1E0                       shl	ax,*1
19690                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19691                                           ! Debug: expression subtree swapping
19692 4B3D           0346         F2            add	ax,-$E[bp]
19693                                           ! Debug: list unsigned int = ax+0 (used reg = )
19694 4B40           50                         push	ax
19695                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19696 4B41           8A46         FE            mov	al,-2[bp]
19697 4B44           30E4                       xor	ah,ah
19698 4B46           B1                     03  mov	cl,*3
19699 4B48           D3E0                       shl	ax,cl
19700 4B4A           89C3                       mov	bx,ax
19701 4B4C           81C3                 0225  add	bx,#_vga_modes
19702                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19703 4B50           FF77         04            push	4[bx]
19704                                           ! Debug: func () void = memsetw+0 (used reg = )
19705 4B53           E8         3284            call	_memsetw
19706 4B56           83C4                   08  add	sp,*8
19707                                           !BCC_EOS
19708                                           ! 2307          else
19709                                           ! 2308           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19710 4B59           EB           5B            jmp .E9
19711                       00004B5B            .E6:
19712                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19713 4B5B           8A46         FB            mov	al,-5[bp]
19714 4B5E           30E4                       xor	ah,ah
19715 4B60           50                         push	ax
19716                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19717 4B61           8B46         F4            mov	ax,-$C[bp]
19718 4B64           0246         04            add	al,4[bp]
19719 4B67           80D4                   00  adc	ah,*0
19720                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19721 4B6A           8B4E         F8            mov	cx,-8[bp]
19722 4B6D           F7E9                       imul	cx
19723                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19724 4B6F           0246         0A            add	al,$A[bp]
19725 4B72           80D4                   00  adc	ah,*0
19726                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19727 4B75           D1E0                       shl	ax,*1
19728                                           ! Debug: list unsigned int = ax+0 (used reg = )
19729 4B77           50                         push	ax
19730                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$12] struct  = vga_modes+0 (used reg = )
19731 4B78           8A46         FE            mov	al,-2[bp]
19732 4B7B           30E4                       xor	ah,ah
19733 4B7D           B1                     03  mov	cl,*3
19734 4B7F           D3E0                       shl	ax,cl
19735 4B81           89C3                       mov	bx,ax
19736 4B83           81C3                 0225  add	bx,#_vga_modes
19737                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19738 4B87           FF77         04            push	4[bx]
19739                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19740 4B8A           8B46         F4            mov	ax,-$C[bp]
19741 4B8D           8B4E         F8            mov	cx,-8[bp]
19742 4B90           F7E9                       imul	cx
19743                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19744 4B92           0246         0A            add	al,$A[bp]
19745 4B95           80D4                   00  adc	ah,*0
19746                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19747 4B98           D1E0                       shl	ax,*1
19748                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19749                                           ! Debug: expression subtree swapping
19750 4B9A           0346         F2            add	ax,-$E[bp]
19751                                           ! Debug: list unsigned int = ax+0 (used reg = )
19752 4B9D           50                         push	ax
19753                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
19754 4B9E           8A46         FE            mov	al,-2[bp]
19755 4BA1           30E4                       xor	ah,ah
19756 4BA3           B1                     03  mov	cl,*3
19757 4BA5           D3E0                       shl	ax,cl
19758 4BA7           89C3                       mov	bx,ax
19759 4BA9           81C3                 0225  add	bx,#_vga_modes
19760                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19761 4BAD           FF77         04            push	4[bx]
19762                                           ! Debug: func () void = memcpyw+0 (used reg = )
19763 4BB0           E8         327C            call	_memcpyw
19764 4BB3           83C4                   0A  add	sp,*$A
19765                                           !BCC_EOS
19766                                           ! 2309         }
19767                       00004BB6            .E9:
19768                                           ! 2310       }
19769                       00004BB6            .E3:
19770                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19771 4BB6           8B46         F4            mov	ax,-$C[bp]
19772 4BB9           40                         inc	ax
19773 4BBA           8946         F4            mov	-$C[bp],ax
19774                       00004BBD            .E4:
19775                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19776 4BBD           8A46         0C            mov	al,$C[bp]
19777 4BC0           30E4                       xor	ah,ah
19778 4BC2           3B46         F4            cmp	ax,-$C[bp]
19779 4BC5         0F83         FF32            bhis	.E5
19780                       00004BC9            .EA:
19781                       00004BC9            .E2:
19782                                           ! 2311      else
19783                                           ! 2312       {for(i=rlr;i>=rul;i--)
19784 4BC9           E9         00DE            br 	.EB
19785                       00004BCC            .E0:
19786                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19787 4BCC           8A46         0C            mov	al,$C[bp]
19788 4BCF           30E4                       xor	ah,ah
19789 4BD1           8946         F4            mov	-$C[bp],ax
19790                                           !BCC_EOS
19791                                           !BCC_EOS
19792                                           ! 2313         {
19793 4BD4           E9         00C7            br 	.EE
19794                       00004BD7            .EF:
19795                                           ! 2314          if((i<rul+nblines)||(nblines==0))
19796                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19797 4BD7           8A46         08            mov	al,8[bp]
19798 4BDA           30E4                       xor	ah,ah
19799 4BDC           0246         04            add	al,4[bp]
19800 4BDF           80D4                   00  adc	ah,*0
19801                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19802 4BE2           3B46         F4            cmp	ax,-$C[bp]
19803 4BE5           77           07            ja  	.F1
19804                       00004BE7            .F2:
19805                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19806 4BE7           8A46         04            mov	al,4[bp]
19807 4BEA           84C0                       test	al,al
19808 4BEC           75           42            jne 	.F0
19809                       00004BEE            .F1:
19810                                           ! 2315           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19811                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19812 4BEE           8A46         FB            mov	al,-5[bp]
19813 4BF1           30E4                       xor	ah,ah
19814 4BF3           50                         push	ax
19815                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19816 4BF4           8A46         06            mov	al,6[bp]
19817 4BF7           30E4                       xor	ah,ah
19818                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19819 4BF9           B9                   0100  mov	cx,#$100
19820 4BFC           F7E9                       imul	cx
19821                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19822                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19823 4BFE           05                   0020  add	ax,*$20
19824 4C01           50                         push	ax
19825                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19826 4C02           8B46         F4            mov	ax,-$C[bp]
19827 4C05           8B4E         F8            mov	cx,-8[bp]
19828 4C08           F7E9                       imul	cx
19829                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19830 4C0A           0246         0A            add	al,$A[bp]
19831 4C0D           80D4                   00  adc	ah,*0
19832                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19833 4C10           D1E0                       shl	ax,*1
19834                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19835                                           ! Debug: expression subtree swapping
19836 4C12           0346         F2            add	ax,-$E[bp]
19837                                           ! Debug: list unsigned int = ax+0 (used reg = )
19838 4C15           50                         push	ax
19839                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
19840 4C16           8A46         FE            mov	al,-2[bp]
19841 4C19           30E4                       xor	ah,ah
19842 4C1B           B1                     03  mov	cl,*3
19843 4C1D           D3E0                       shl	ax,cl
19844 4C1F           89C3                       mov	bx,ax
19845 4C21           81C3                 0225  add	bx,#_vga_modes
19846                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19847 4C25           FF77         04            push	4[bx]
19848                                           ! Debug: func () void = memsetw+0 (used reg = )
19849 4C28           E8         31AF            call	_memsetw
19850 4C2B           83C4                   08  add	sp,*8
19851                                           !BCC_EOS
19852                                           ! 2316          else
19853                                           ! 2317           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19854 4C2E           EB           5B            jmp .F3
19855                       00004C30            .F0:
19856                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19857 4C30           8A46         FB            mov	al,-5[bp]
19858 4C33           30E4                       xor	ah,ah
19859 4C35           50                         push	ax
19860                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19861 4C36           8B46         F4            mov	ax,-$C[bp]
19862 4C39           2A46         04            sub	al,4[bp]
19863 4C3C           80DC                   00  sbb	ah,*0
19864                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19865 4C3F           8B4E         F8            mov	cx,-8[bp]
19866 4C42           F7E9                       imul	cx
19867                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19868 4C44           0246         0A            add	al,$A[bp]
19869 4C47           80D4                   00  adc	ah,*0
19870                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19871 4C4A           D1E0                       shl	ax,*1
19872                                           ! Debug: list unsigned int = ax+0 (used reg = )
19873 4C4C           50                         push	ax
19874                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$12] struct  = vga_modes+0 (used reg = )
19875 4C4D           8A46         FE            mov	al,-2[bp]
19876 4C50           30E4                       xor	ah,ah
19877 4C52           B1                     03  mov	cl,*3
19878 4C54           D3E0                       shl	ax,cl
19879 4C56           89C3                       mov	bx,ax
19880 4C58           81C3                 0225  add	bx,#_vga_modes
19881                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19882 4C5C           FF77         04            push	4[bx]
19883                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19884 4C5F           8B46         F4            mov	ax,-$C[bp]
19885 4C62           8B4E         F8            mov	cx,-8[bp]
19886 4C65           F7E9                       imul	cx
19887                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19888 4C67           0246         0A            add	al,$A[bp]
19889 4C6A           80D4                   00  adc	ah,*0
19890                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19891 4C6D           D1E0                       shl	ax,*1
19892                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19893                                           ! Debug: expression subtree swapping
19894 4C6F           0346         F2            add	ax,-$E[bp]
19895                                           ! Debug: list unsigned int = ax+0 (used reg = )
19896 4C72           50                         push	ax
19897                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$12] struct  = vga_modes+0 (used reg = )
19898 4C73           8A46         FE            mov	al,-2[bp]
19899 4C76           30E4                       xor	ah,ah
19900 4C78           B1                     03  mov	cl,*3
19901 4C7A           D3E0                       shl	ax,cl
19902 4C7C           89C3                       mov	bx,ax
19903 4C7E           81C3                 0225  add	bx,#_vga_modes
19904                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19905 4C82           FF77         04            push	4[bx]
19906                                           ! Debug: func () void = memcpyw+0 (used reg = )
19907 4C85           E8         31A7            call	_memcpyw
19908 4C88           83C4                   0A  add	sp,*$A
19909                                           !BCC_EOS
19910                                           ! 2318          if (i>rlr) break;
19911                       00004C8B            .F3:
19912                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19913 4C8B           8A46         0C            mov	al,$C[bp]
19914 4C8E           30E4                       xor	ah,ah
19915 4C90           3B46         F4            cmp	ax,-$C[bp]
19916 4C93           73           02            jae 	.F4
19917                       00004C95            .F5:
19918 4C95           EB           13            jmp .EC
19919                                           !BCC_EOS
19920                                           ! 2319         }
19921                       00004C97            .F4:
19922                                           ! 2320       }
19923                       00004C97            .ED:
19924                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19925 4C97           8B46         F4            mov	ax,-$C[bp]
19926 4C9A           48                         dec	ax
19927 4C9B           8946         F4            mov	-$C[bp],ax
19928                       00004C9E            .EE:
19929                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19930 4C9E           8A46         08            mov	al,8[bp]
19931 4CA1           30E4                       xor	ah,ah
19932 4CA3           3B46         F4            cmp	ax,-$C[bp]
19933 4CA6         0F86         FF2D            blos	.EF
19934                       00004CAA            .F6:
19935                       00004CAA            .EC:
19936                                           ! 2321     }
19937                       00004CAA            .EB:
19938                                           ! 2322   }
19939                       00004CAA            .DF:
19940                                           ! 2323  else
19941                                           ! 2324   {
19942 4CAA           E9         03C9            br 	.F7
19943                       00004CAD            .D7:
19944                                           ! 2325    cheight=read_byte(0x40,0x85);
19945                                           ! Debug: list int = const $85 (used reg = )
19946 4CAD           B8                   0085  mov	ax,#$85
19947 4CB0           50                         push	ax
19948                                           ! Debug: list int = const $40 (used reg = )
19949 4CB1           B8                   0040  mov	ax,*$40
19950 4CB4           50                         push	ax
19951                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19952 4CB5           E8         31A7            call	_read_byte
19953 4CB8           83C4                   04  add	sp,*4
19954                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$10-5] (used reg = )
19955 4CBB           8846         FD            mov	-3[bp],al
19956                                           !BCC_EOS
19957                                           ! 2326    switch(vga_modes[line].memmodel)
19958                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
19959 4CBE           8A46         FE            mov	al,-2[bp]
19960 4CC1           30E4                       xor	ah,ah
19961 4CC3           B1                     03  mov	cl,*3
19962 4CC5           D3E0                       shl	ax,cl
19963 4CC7           89C3                       mov	bx,ax
19964 4CC9           81C3                 0225  add	bx,#_vga_modes
19965 4CCD           8A47         02            mov	al,2[bx]
19966                                           ! 2327     {
19967 4CD0           E9         0391            br 	.FA
19968                                           ! 2328      case 0x04:
19969                                           ! 2329      case 0x03:
19970                       00004CD3            .FB:
19971                                           ! 2330        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19972                       00004CD3            .FC:
19973                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19974 4CD3           8A46         04            mov	al,4[bp]
19975 4CD6           84C0                       test	al,al
19976 4CD8         0F85         0089            bne 	.FD
19977                       00004CDC            .102:
19978                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19979 4CDC           8A46         08            mov	al,8[bp]
19980 4CDF           84C0                       test	al,al
19981 4CE1         0F85         0080            bne 	.FD
19982                       00004CE5            .101:
19983                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19984 4CE5           8A46         0A            mov	al,$A[bp]
19985 4CE8           84C0                       test	al,al
19986 4CEA           75           79            jne 	.FD
19987                       00004CEC            .100:
19988                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19989 4CEC           8B46         F6            mov	ax,-$A[bp]
19990                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19991                                           ! Debug: expression subtree swapping
19992 4CEF           48                         dec	ax
19993 4CF0           50                         push	ax
19994 4CF1           8A46         0C            mov	al,$C[bp]
19995 4CF4           30E4                       xor	ah,ah
19996 4CF6           3B46         F0            cmp	ax,0+..FFFC[bp]
19997 4CF9           8D66         F2            lea	sp,2+..FFFC[bp]
19998 4CFC           75           67            jne 	.FD
19999                       00004CFE            .FF:
20000                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20001 4CFE           8B46         F8            mov	ax,-8[bp]
20002                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20003                                           ! Debug: expression subtree swapping
20004 4D01           48                         dec	ax
20005 4D02           50                         push	ax
20006 4D03           8A46         0E            mov	al,$E[bp]
20007 4D06           30E4                       xor	ah,ah
20008 4D08           3B46         F0            cmp	ax,0+..FFFC[bp]
20009 4D0B           8D66         F2            lea	sp,2+..FFFC[bp]
20010 4D0E           75           55            jne 	.FD
20011                       00004D10            .FE:
20012                                           ! 2331         {
20013                                           ! 2332          outw(0x3ce, 0x0205);
20014                                           ! Debug: list int = const $205 (used reg = )
20015 4D10           B8                   0205  mov	ax,#$205
20016 4D13           50                         push	ax
20017                                           ! Debug: list int = const $3CE (used reg = )
20018 4D14           B8                   03CE  mov	ax,#$3CE
20019 4D17           50                         push	ax
20020                                           ! Debug: func () void = outw+0 (used reg = )
20021 4D18           E8         31C0            call	_outw
20022 4D1B           83C4                   04  add	sp,*4
20023                                           !BCC_EOS
20024                                           ! 2333          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20025                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20026 4D1E           8B46         F6            mov	ax,-$A[bp]
20027 4D21           8B4E         F8            mov	cx,-8[bp]
20028 4D24           F7E9                       imul	cx
20029                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20030 4D26           89C3                       mov	bx,ax
20031 4D28           8A46         FD            mov	al,-3[bp]
20032 4D2B           30E4                       xor	ah,ah
20033 4D2D           93                         xchg	ax,bx
20034 4D2E           89D9                       mov	cx,bx
20035 4D30           F7E9                       imul	cx
20036                                           ! Debug: list unsigned int = ax+0 (used reg = )
20037 4D32           50                         push	ax
20038                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20039 4D33           8A46         06            mov	al,6[bp]
20040 4D36           30E4                       xor	ah,ah
20041 4D38           50                         push	ax
20042                                           ! Debug: list int = const 0 (used reg = )
20043 4D39           31C0                       xor	ax,ax
20044 4D3B           50                         push	ax
20045                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
20046 4D3C           8A46         FE            mov	al,-2[bp]
20047 4D3F           30E4                       xor	ah,ah
20048 4D41           B1                     03  mov	cl,*3
20049 4D43           D3E0                       shl	ax,cl
20050 4D45           89C3                       mov	bx,ax
20051 4D47           81C3                 0225  add	bx,#_vga_modes
20052                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20053 4D4B           FF77         04            push	4[bx]
20054                                           ! Debug: func () void = memsetb+0 (used reg = )
20055 4D4E           E8         3064            call	_memsetb
20056 4D51           83C4                   08  add	sp,*8
20057                                           !BCC_EOS
20058                                           ! 2334          outw(0x3ce, 0x0005);
20059                                           ! Debug: list int = const 5 (used reg = )
20060 4D54           B8                   0005  mov	ax,*5
20061 4D57           50                         push	ax
20062                                           ! Debug: list int = const $3CE (used reg = )
20063 4D58           B8                   03CE  mov	ax,#$3CE
20064 4D5B           50                         push	ax
20065                                           ! Debug: func () void = outw+0 (used reg = )
20066 4D5C           E8         317C            call	_outw
20067 4D5F           83C4                   04  add	sp,*4
20068                                           !BCC_EOS
20069                                           ! 2335         }
20070                                           ! 2336        else
20071                                           ! 2337         {
20072 4D62           E9         0121            br 	.103
20073                       00004D65            .FD:
20074                                           ! 2338          if(dir==1)
20075                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20076 4D65           8A46         12            mov	al,$12[bp]
20077 4D68           3C                     01  cmp	al,*1
20078 4D6A         0F85         008A            bne 	.104
20079                       00004D6E            .105:
20080                                           ! 2339           {for(i=rul;i<=rlr;i++)
20081                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20082 4D6E           8A46         08            mov	al,8[bp]
20083 4D71           30E4                       xor	ah,ah
20084 4D73           8946         F4            mov	-$C[bp],ax
20085                                           !BCC_EOS
20086                                           !BCC_EOS
20087                                           ! 2340             {
20088 4D76           EB           73            jmp .108
20089                       00004D78            .109:
20090                                           ! 2341              if((i+nblines>rlr)||(nblines==0))
20091                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20092 4D78           8B46         F4            mov	ax,-$C[bp]
20093 4D7B           0246         04            add	al,4[bp]
20094 4D7E           80D4                   00  adc	ah,*0
20095                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20096 4D81           50                         push	ax
20097 4D82           8A46         0C            mov	al,$C[bp]
20098 4D85           30E4                       xor	ah,ah
20099 4D87           3B46         F0            cmp	ax,0+..FFFC[bp]
20100 4D8A           8D66         F2            lea	sp,2+..FFFC[bp]
20101 4D8D           72           07            jb  	.10B
20102                       00004D8F            .10C:
20103                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20104 4D8F           8A46         04            mov	al,4[bp]
20105 4D92           84C0                       test	al,al
20106 4D94           75           26            jne 	.10A
20107                       00004D96            .10B:
20108                                           ! 2342               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20109                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20110 4D96           8A46         06            mov	al,6[bp]
20111 4D99           30E4                       xor	ah,ah
20112 4D9B           50                         push	ax
20113                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20114 4D9C           8A46         FD            mov	al,-3[bp]
20115 4D9F           30E4                       xor	ah,ah
20116 4DA1           50                         push	ax
20117                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20118 4DA2           FF76         F8            push	-8[bp]
20119                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20120 4DA5           8A46         FB            mov	al,-5[bp]
20121 4DA8           30E4                       xor	ah,ah
20122 4DAA           50                         push	ax
20123                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20124 4DAB           FF76         F4            push	-$C[bp]
20125                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20126 4DAE           8A46         0A            mov	al,$A[bp]
20127 4DB1           30E4                       xor	ah,ah
20128 4DB3           50                         push	ax
20129                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20130 4DB4           E8         F977            call	_vgamem_fill_pl4
20131 4DB7           83C4                   0C  add	sp,*$C
20132                                           !BCC_EOS
20133                                           ! 2343              else
20134                                           ! 2344               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20135 4DBA           EB           28            jmp .10D
20136                       00004DBC            .10A:
20137                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20138 4DBC           8A46         FD            mov	al,-3[bp]
20139 4DBF           30E4                       xor	ah,ah
20140 4DC1           50                         push	ax
20141                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20142 4DC2           FF76         F8            push	-8[bp]
20143                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20144 4DC5           8A46         FB            mov	al,-5[bp]
20145 4DC8           30E4                       xor	ah,ah
20146 4DCA           50                         push	ax
20147                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20148 4DCB           FF76         F4            push	-$C[bp]
20149                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20150 4DCE           8B46         F4            mov	ax,-$C[bp]
20151 4DD1           0246         04            add	al,4[bp]
20152 4DD4           80D4                   00  adc	ah,*0
20153                                           ! Debug: list unsigned int = ax+0 (used reg = )
20154 4DD7           50                         push	ax
20155                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20156 4DD8           8A46         0A            mov	al,$A[bp]
20157 4DDB           30E4                       xor	ah,ah
20158 4DDD           50                         push	ax
20159                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20160 4DDE           E8         F88B            call	_vgamem_copy_pl4
20161 4DE1           83C4                   0C  add	sp,*$C
20162                                           !BCC_EOS
20163                                           ! 2345             }
20164                       00004DE4            .10D:
20165                                           ! 2346           }
20166                       00004DE4            .107:
20167                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20168 4DE4           8B46         F4            mov	ax,-$C[bp]
20169 4DE7           40                         inc	ax
20170 4DE8           8946         F4            mov	-$C[bp],ax
20171                       00004DEB            .108:
20172                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20173 4DEB           8A46         0C            mov	al,$C[bp]
20174 4DEE           30E4                       xor	ah,ah
20175 4DF0           3B46         F4            cmp	ax,-$C[bp]
20176 4DF3           73           83            jae	.109
20177                       00004DF5            .10E:
20178                       00004DF5            .106:
20179                                           ! 2347          else
20180                                           ! 2348           {for(i=rlr;i>=rul;i--)
20181 4DF5           E9         008E            br 	.10F
20182                       00004DF8            .104:
20183                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20184 4DF8           8A46         0C            mov	al,$C[bp]
20185 4DFB           30E4                       xor	ah,ah
20186 4DFD           8946         F4            mov	-$C[bp],ax
20187                                           !BCC_EOS
20188                                           !BCC_EOS
20189                                           ! 2349             {
20190 4E00           EB           78            jmp .112
20191                       00004E02            .113:
20192                                           ! 2350              if((i<rul+nblines)||(nblines==0))
20193                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20194 4E02           8A46         08            mov	al,8[bp]
20195 4E05           30E4                       xor	ah,ah
20196 4E07           0246         04            add	al,4[bp]
20197 4E0A           80D4                   00  adc	ah,*0
20198                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20199 4E0D           3B46         F4            cmp	ax,-$C[bp]
20200 4E10           77           07            ja  	.115
20201                       00004E12            .116:
20202                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20203 4E12           8A46         04            mov	al,4[bp]
20204 4E15           84C0                       test	al,al
20205 4E17           75           26            jne 	.114
20206                       00004E19            .115:
20207                                           ! 2351               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20208                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20209 4E19           8A46         06            mov	al,6[bp]
20210 4E1C           30E4                       xor	ah,ah
20211 4E1E           50                         push	ax
20212                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20213 4E1F           8A46         FD            mov	al,-3[bp]
20214 4E22           30E4                       xor	ah,ah
20215 4E24           50                         push	ax
20216                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20217 4E25           FF76         F8            push	-8[bp]
20218                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20219 4E28           8A46         FB            mov	al,-5[bp]
20220 4E2B           30E4                       xor	ah,ah
20221 4E2D           50                         push	ax
20222                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20223 4E2E           FF76         F4            push	-$C[bp]
20224                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20225 4E31           8A46         0A            mov	al,$A[bp]
20226 4E34           30E4                       xor	ah,ah
20227 4E36           50                         push	ax
20228                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20229 4E37           E8         F8F4            call	_vgamem_fill_pl4
20230 4E3A           83C4                   0C  add	sp,*$C
20231                                           !BCC_EOS
20232                                           ! 2352              else
20233                                           ! 2353               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
20234 4E3D           EB           28            jmp .117
20235                       00004E3F            .114:
20236                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20237 4E3F           8A46         FD            mov	al,-3[bp]
20238 4E42           30E4                       xor	ah,ah
20239 4E44           50                         push	ax
20240                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20241 4E45           FF76         F8            push	-8[bp]
20242                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20243 4E48           8A46         FB            mov	al,-5[bp]
20244 4E4B           30E4                       xor	ah,ah
20245 4E4D           50                         push	ax
20246                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20247 4E4E           8B46         F4            mov	ax,-$C[bp]
20248 4E51           2A46         04            sub	al,4[bp]
20249 4E54           80DC                   00  sbb	ah,*0
20250                                           ! Debug: list unsigned int = ax+0 (used reg = )
20251 4E57           50                         push	ax
20252                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20253 4E58           FF76         F4            push	-$C[bp]
20254                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20255 4E5B           8A46         0A            mov	al,$A[bp]
20256 4E5E           30E4                       xor	ah,ah
20257 4E60           50                         push	ax
20258                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20259 4E61           E8         F808            call	_vgamem_copy_pl4
20260 4E64           83C4                   0C  add	sp,*$C
20261                                           !BCC_EOS
20262                                           ! 2354              if (i>rlr) break;
20263                       00004E67            .117:
20264                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20265 4E67           8A46         0C            mov	al,$C[bp]
20266 4E6A           30E4                       xor	ah,ah
20267 4E6C           3B46         F4            cmp	ax,-$C[bp]
20268 4E6F           73           02            jae 	.118
20269                       00004E71            .119:
20270 4E71           EB           13            jmp .110
20271                                           !BCC_EOS
20272                                           ! 2355             }
20273                       00004E73            .118:
20274                                           ! 2356           }
20275                       00004E73            .111:
20276                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20277 4E73           8B46         F4            mov	ax,-$C[bp]
20278 4E76           48                         dec	ax
20279 4E77           8946         F4            mov	-$C[bp],ax
20280                       00004E7A            .112:
20281                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20282 4E7A           8A46         08            mov	al,8[bp]
20283 4E7D           30E4                       xor	ah,ah
20284 4E7F           3B46         F4            cmp	ax,-$C[bp]
20285 4E82         0F86         FF7C            blos	.113
20286                       00004E86            .11A:
20287                       00004E86            .110:
20288                                           ! 2357         }
20289                       00004E86            .10F:
20290                                           ! 2358        break;
20291                       00004E86            .103:
20292 4E86           E9         01ED            br 	.F8
20293                                           !BCC_EOS
20294                                           ! 2359      case 0x02:
20295                                           ! 2360        bpp=vga_modes[lin
20296                       00004E89            .11B:
20297                                           ! 2360 e].pixbits;
20298                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$12] struct  = vga_modes+0 (used reg = )
20299 4E89           8A46         FE            mov	al,-2[bp]
20300 4E8C           30E4                       xor	ah,ah
20301 4E8E           B1                     03  mov	cl,*3
20302 4E90           D3E0                       shl	ax,cl
20303 4E92           89C3                       mov	bx,ax
20304 4E94           81C3                 0225  add	bx,#_vga_modes
20305                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20306 4E98           8A47         03            mov	al,3[bx]
20307 4E9B           8846         FC            mov	-4[bp],al
20308                                           !BCC_EOS
20309                                           ! 2361        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20310                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20311 4E9E           8A46         04            mov	al,4[bp]
20312 4EA1           84C0                       test	al,al
20313 4EA3           75           77            jne 	.11C
20314                       00004EA5            .121:
20315                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20316 4EA5           8A46         08            mov	al,8[bp]
20317 4EA8           84C0                       test	al,al
20318 4EAA           75           70            jne 	.11C
20319                       00004EAC            .120:
20320                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20321 4EAC           8A46         0A            mov	al,$A[bp]
20322 4EAF           84C0                       test	al,al
20323 4EB1           75           69            jne 	.11C
20324                       00004EB3            .11F:
20325                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20326 4EB3           8B46         F6            mov	ax,-$A[bp]
20327                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20328                                           ! Debug: expression subtree swapping
20329 4EB6           48                         dec	ax
20330 4EB7           50                         push	ax
20331 4EB8           8A46         0C            mov	al,$C[bp]
20332 4EBB           30E4                       xor	ah,ah
20333 4EBD           3B46         F0            cmp	ax,0+..FFFC[bp]
20334 4EC0           8D66         F2            lea	sp,2+..FFFC[bp]
20335 4EC3           75           57            jne 	.11C
20336                       00004EC5            .11E:
20337                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20338 4EC5           8B46         F8            mov	ax,-8[bp]
20339                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20340                                           ! Debug: expression subtree swapping
20341 4EC8           48                         dec	ax
20342 4EC9           50                         push	ax
20343 4ECA           8A46         0E            mov	al,$E[bp]
20344 4ECD           30E4                       xor	ah,ah
20345 4ECF           3B46         F0            cmp	ax,0+..FFFC[bp]
20346 4ED2           8D66         F2            lea	sp,2+..FFFC[bp]
20347 4ED5           75           45            jne 	.11C
20348                       00004ED7            .11D:
20349                                           ! 2362         {
20350                                           ! 2363          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20351                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20352 4ED7           8B46         F6            mov	ax,-$A[bp]
20353 4EDA           8B4E         F8            mov	cx,-8[bp]
20354 4EDD           F7E9                       imul	cx
20355                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20356 4EDF           89C3                       mov	bx,ax
20357 4EE1           8A46         FD            mov	al,-3[bp]
20358 4EE4           30E4                       xor	ah,ah
20359 4EE6           93                         xchg	ax,bx
20360 4EE7           89D9                       mov	cx,bx
20361 4EE9           F7E9                       imul	cx
20362                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20363 4EEB           89C3                       mov	bx,ax
20364 4EED           8A46         FC            mov	al,-4[bp]
20365 4EF0           30E4                       xor	ah,ah
20366 4EF2           93                         xchg	ax,bx
20367 4EF3           89D9                       mov	cx,bx
20368 4EF5           F7E9                       imul	cx
20369                                           ! Debug: list unsigned int = ax+0 (used reg = )
20370 4EF7           50                         push	ax
20371                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20372 4EF8           8A46         06            mov	al,6[bp]
20373 4EFB           30E4                       xor	ah,ah
20374 4EFD           50                         push	ax
20375                                           ! Debug: list int = const 0 (used reg = )
20376 4EFE           31C0                       xor	ax,ax
20377 4F00           50                         push	ax
20378                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$12] struct  = vga_modes+0 (used reg = )
20379 4F01           8A46         FE            mov	al,-2[bp]
20380 4F04           30E4                       xor	ah,ah
20381 4F06           B1                     03  mov	cl,*3
20382 4F08           D3E0                       shl	ax,cl
20383 4F0A           89C3                       mov	bx,ax
20384 4F0C           81C3                 0225  add	bx,#_vga_modes
20385                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20386 4F10           FF77         04            push	4[bx]
20387                                           ! Debug: func () void = memsetb+0 (used reg = )
20388 4F13           E8         2E9F            call	_memsetb
20389 4F16           83C4                   08  add	sp,*8
20390                                           !BCC_EOS
20391                                           ! 2364         }
20392                                           ! 2365        else
20393                                           ! 2366         {
20394 4F19           E9         0144            br 	.122
20395                       00004F1C            .11C:
20396                                           ! 2367          if(bpp==2)
20397                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20398 4F1C           8A46         FC            mov	al,-4[bp]
20399 4F1F           3C                     02  cmp	al,*2
20400 4F21           75           1C            jne 	.123
20401                       00004F23            .124:
20402                                           ! 2368           {
20403                                           ! 2369            cul<<=1;
20404                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20405 4F23           8A46         0A            mov	al,$A[bp]
20406 4F26           30E4                       xor	ah,ah
20407 4F28           D1E0                       shl	ax,*1
20408 4F2A           8846         0A            mov	$A[bp],al
20409                                           !BCC_EOS
20410                                           ! 2370            cols<<=1;
20411                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20412 4F2D           8A46         FB            mov	al,-5[bp]
20413 4F30           30E4                       xor	ah,ah
20414 4F32           D1E0                       shl	ax,*1
20415 4F34           8846         FB            mov	-5[bp],al
20416                                           !BCC_EOS
20417                                           ! 2371            nbcols<<=1;
20418                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20419 4F37           8B46         F8            mov	ax,-8[bp]
20420 4F3A           D1E0                       shl	ax,*1
20421 4F3C           8946         F8            mov	-8[bp],ax
20422                                           !BCC_EOS
20423                                           ! 2372           }
20424                                           ! 2373          if(dir==1)
20425                       00004F3F            .123:
20426                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20427 4F3F           8A46         12            mov	al,$12[bp]
20428 4F42           3C                     01  cmp	al,*1
20429 4F44         0F85         008A            bne 	.125
20430                       00004F48            .126:
20431                                           ! 2374           {for(i=rul;i<=rlr;i++)
20432                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20433 4F48           8A46         08            mov	al,8[bp]
20434 4F4B           30E4                       xor	ah,ah
20435 4F4D           8946         F4            mov	-$C[bp],ax
20436                                           !BCC_EOS
20437                                           !BCC_EOS
20438                                           ! 2375             {
20439 4F50           EB           73            jmp .129
20440                       00004F52            .12A:
20441                                           ! 2376              if((i+nblines>rlr)||(nblines==0))
20442                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20443 4F52           8B46         F4            mov	ax,-$C[bp]
20444 4F55           0246         04            add	al,4[bp]
20445 4F58           80D4                   00  adc	ah,*0
20446                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20447 4F5B           50                         push	ax
20448 4F5C           8A46         0C            mov	al,$C[bp]
20449 4F5F           30E4                       xor	ah,ah
20450 4F61           3B46         F0            cmp	ax,0+..FFFC[bp]
20451 4F64           8D66         F2            lea	sp,2+..FFFC[bp]
20452 4F67           72           07            jb  	.12C
20453                       00004F69            .12D:
20454                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20455 4F69           8A46         04            mov	al,4[bp]
20456 4F6C           84C0                       test	al,al
20457 4F6E           75           26            jne 	.12B
20458                       00004F70            .12C:
20459                                           ! 2377               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20460                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20461 4F70           8A46         06            mov	al,6[bp]
20462 4F73           30E4                       xor	ah,ah
20463 4F75           50                         push	ax
20464                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20465 4F76           8A46         FD            mov	al,-3[bp]
20466 4F79           30E4                       xor	ah,ah
20467 4F7B           50                         push	ax
20468                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20469 4F7C           FF76         F8            push	-8[bp]
20470                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20471 4F7F           8A46         FB            mov	al,-5[bp]
20472 4F82           30E4                       xor	ah,ah
20473 4F84           50                         push	ax
20474                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20475 4F85           FF76         F4            push	-$C[bp]
20476                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20477 4F88           8A46         0A            mov	al,$A[bp]
20478 4F8B           30E4                       xor	ah,ah
20479 4F8D           50                         push	ax
20480                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20481 4F8E           E8         F93A            call	_vgamem_fill_cga
20482 4F91           83C4                   0C  add	sp,*$C
20483                                           !BCC_EOS
20484                                           ! 2378              else
20485                                           ! 2379               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20486 4F94           EB           28            jmp .12E
20487                       00004F96            .12B:
20488                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20489 4F96           8A46         FD            mov	al,-3[bp]
20490 4F99           30E4                       xor	ah,ah
20491 4F9B           50                         push	ax
20492                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20493 4F9C           FF76         F8            push	-8[bp]
20494                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20495 4F9F           8A46         FB            mov	al,-5[bp]
20496 4FA2           30E4                       xor	ah,ah
20497 4FA4           50                         push	ax
20498                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20499 4FA5           FF76         F4            push	-$C[bp]
20500                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20501 4FA8           8B46         F4            mov	ax,-$C[bp]
20502 4FAB           0246         04            add	al,4[bp]
20503 4FAE           80D4                   00  adc	ah,*0
20504                                           ! Debug: list unsigned int = ax+0 (used reg = )
20505 4FB1           50                         push	ax
20506                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20507 4FB2           8A46         0A            mov	al,$A[bp]
20508 4FB5           30E4                       xor	ah,ah
20509 4FB7           50                         push	ax
20510                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20511 4FB8           E8         F7FE            call	_vgamem_copy_cga
20512 4FBB           83C4                   0C  add	sp,*$C
20513                                           !BCC_EOS
20514                                           ! 2380             }
20515                       00004FBE            .12E:
20516                                           ! 2381           }
20517                       00004FBE            .128:
20518                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20519 4FBE           8B46         F4            mov	ax,-$C[bp]
20520 4FC1           40                         inc	ax
20521 4FC2           8946         F4            mov	-$C[bp],ax
20522                       00004FC5            .129:
20523                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20524 4FC5           8A46         0C            mov	al,$C[bp]
20525 4FC8           30E4                       xor	ah,ah
20526 4FCA           3B46         F4            cmp	ax,-$C[bp]
20527 4FCD           73           83            jae	.12A
20528                       00004FCF            .12F:
20529                       00004FCF            .127:
20530                                           ! 2382          else
20531                                           ! 2383           {for(i=rlr;i>=rul;i--)
20532 4FCF           E9         008E            br 	.130
20533                       00004FD2            .125:
20534                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20535 4FD2           8A46         0C            mov	al,$C[bp]
20536 4FD5           30E4                       xor	ah,ah
20537 4FD7           8946         F4            mov	-$C[bp],ax
20538                                           !BCC_EOS
20539                                           !BCC_EOS
20540                                           ! 2384             {
20541 4FDA           EB           78            jmp .133
20542                       00004FDC            .134:
20543                                           ! 2385              if((i<rul+nblines)||(nblines==0))
20544                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20545 4FDC           8A46         08            mov	al,8[bp]
20546 4FDF           30E4                       xor	ah,ah
20547 4FE1           0246         04            add	al,4[bp]
20548 4FE4           80D4                   00  adc	ah,*0
20549                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20550 4FE7           3B46         F4            cmp	ax,-$C[bp]
20551 4FEA           77           07            ja  	.136
20552                       00004FEC            .137:
20553                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20554 4FEC           8A46         04            mov	al,4[bp]
20555 4FEF           84C0                       test	al,al
20556 4FF1           75           26            jne 	.135
20557                       00004FF3            .136:
20558                                           ! 2386               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20559                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20560 4FF3           8A46         06            mov	al,6[bp]
20561 4FF6           30E4                       xor	ah,ah
20562 4FF8           50                         push	ax
20563                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20564 4FF9           8A46         FD            mov	al,-3[bp]
20565 4FFC           30E4                       xor	ah,ah
20566 4FFE           50                         push	ax
20567                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20568 4FFF           FF76         F8            push	-8[bp]
20569                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20570 5002           8A46         FB            mov	al,-5[bp]
20571 5005           30E4                       xor	ah,ah
20572 5007           50                         push	ax
20573                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20574 5008           FF76         F4            push	-$C[bp]
20575                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20576 500B           8A46         0A            mov	al,$A[bp]
20577 500E           30E4                       xor	ah,ah
20578 5010           50                         push	ax
20579                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20580 5011           E8         F8B7            call	_vgamem_fill_cga
20581 5014           83C4                   0C  add	sp,*$C
20582                                           !BCC_EOS
20583                                           ! 2387              else
20584                                           ! 2388               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20585 5017           EB           28            jmp .138
20586                       00005019            .135:
20587                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20588 5019           8A46         FD            mov	al,-3[bp]
20589 501C           30E4                       xor	ah,ah
20590 501E           50                         push	ax
20591                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20592 501F           FF76         F8            push	-8[bp]
20593                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20594 5022           8A46         FB            mov	al,-5[bp]
20595 5025           30E4                       xor	ah,ah
20596 5027           50                         push	ax
20597                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20598 5028           8B46         F4            mov	ax,-$C[bp]
20599 502B           2A46         04            sub	al,4[bp]
20600 502E           80DC                   00  sbb	ah,*0
20601                                           ! Debug: list unsigned int = ax+0 (used reg = )
20602 5031           50                         push	ax
20603                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20604 5032           FF76         F4            push	-$C[bp]
20605                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20606 5035           8A46         0A            mov	al,$A[bp]
20607 5038           30E4                       xor	ah,ah
20608 503A           50                         push	ax
20609                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20610 503B           E8         F77B            call	_vgamem_copy_cga
20611 503E           83C4                   0C  add	sp,*$C
20612                                           !BCC_EOS
20613                                           ! 2389              if (i>rlr) break;
20614                       00005041            .138:
20615                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20616 5041           8A46         0C            mov	al,$C[bp]
20617 5044           30E4                       xor	ah,ah
20618 5046           3B46         F4            cmp	ax,-$C[bp]
20619 5049           73           02            jae 	.139
20620                       0000504B            .13A:
20621 504B           EB           13            jmp .131
20622                                           !BCC_EOS
20623                                           ! 2390             }
20624                       0000504D            .139:
20625                                           ! 2391           }
20626                       0000504D            .132:
20627                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20628 504D           8B46         F4            mov	ax,-$C[bp]
20629 5050           48                         dec	ax
20630 5051           8946         F4            mov	-$C[bp],ax
20631                       00005054            .133:
20632                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20633 5054           8A46         08            mov	al,8[bp]
20634 5057           30E4                       xor	ah,ah
20635 5059           3B46         F4            cmp	ax,-$C[bp]
20636 505C         0F86         FF7C            blos	.134
20637                       00005060            .13B:
20638                       00005060            .131:
20639                                           ! 2392         }
20640                       00005060            .130:
20641                                           ! 2393        break;
20642                       00005060            .122:
20643 5060           EB           14            jmp .F8
20644                                           !BCC_EOS
20645                                           ! 2394     }
20646                                           ! 2395   }
20647 5062           EB           12            jmp .F8
20648                       00005064            .FA:
20649 5064           2C                     02  sub	al,*2
20650 5066         0F84         FE1F            beq 	.11B
20651 506A           2C                     01  sub	al,*1
20652 506C         0F84         FC63            beq 	.FC
20653 5070           2C                     01  sub	al,*1
20654 5072         0F84         FC5D            beq 	.FB
20655                       00005076            .F8:
20656                       FFFFFFF0            ..FFFC	=	-$10
20657                                           ! 2396 }
20658                       00005076            .F7:
20659 5076           89EC                       mov	sp,bp
20660 5078           5D                         pop	bp
20661 5079           C3                         ret
20662                                           ! 2397 static void biosfn_read_char_attr (page,car)
20663                                           ! Register BX used in function biosfn_scroll
20664                                           ! 2398 Bit8u page;Bit16u *car;
20665                       0000507A            _biosfn_read_char_attr:
20666                                           !BCC_EOS
20667                                           !BCC_EOS
20668                                           ! 2399 {Bit16u ss=get_SS();
20669 507A           55                         push	bp
20670 507B           89E5                       mov	bp,sp
20671 507D           4C                         dec	sp
20672 507E           4C                         dec	sp
20673                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20674 507F           E8         2E69            call	_get_SS
20675                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20676 5082           8946         FE            mov	-2[bp],ax
20677                                           !BCC_EOS
20678                                           ! 2400  Bit8u xcurs,ycurs,mode,line;
20679                                           !BCC_EOS
20680                                           ! 2401  Bit16u nbcols,nbrows,address;
20681                                           !BCC_EOS
20682                                           ! 2402  Bit16u cursor,dummy;
20683                                           !BCC_EOS
20684                                           ! 2403  mode=read_byte(0x40,0x49);
20685 5085           83C4                   F2  add	sp,*-$E
20686                                           ! Debug: list int = const $49 (used reg = )
20687 5088           B8                   0049  mov	ax,*$49
20688 508B           50                         push	ax
20689                                           ! Debug: list int = const $40 (used reg = )
20690 508C           B8                   0040  mov	ax,*$40
20691 508F           50                         push	ax
20692                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20693 5090           E8         2DCC            call	_read_byte
20694 5093           83C4                   04  add	sp,*4
20695                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20696 5096           8846         FB            mov	-5[bp],al
20697                                           !BCC_EOS
20698                                           ! 2404  line=find_vga_entry(mode);
20699                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20700 5099           8A46         FB            mov	al,-5[bp]
20701 509C           30E4                       xor	ah,ah
20702 509E           50                         push	ax
20703                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20704 509F           E8         2CD1            call	_find_vga_entry
20705 50A2           44                         inc	sp
20706 50A3           44                         inc	sp
20707                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20708 50A4           8846         FA            mov	-6[bp],al
20709                                           !BCC_EOS
20710                                           ! 2405  if(line==0xFF)return;
20711                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20712 50A7           8A46         FA            mov	al,-6[bp]
20713 50AA           3C                     FF  cmp	al,#$FF
20714 50AC           75           04            jne 	.13C
20715                       000050AE            .13D:
20716 50AE           89EC                       mov	sp,bp
20717 50B0           5D                         pop	bp
20718 50B1           C3                         ret
20719                                           !BCC_EOS
20720                                           ! 2406  biosfn_get_cursor_pos(page,&dummy,&cursor);
20721                       000050B2            .13C:
20722                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20723 50B2           8D5E         F2            lea	bx,-$E[bp]
20724 50B5           53                         push	bx
20725                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20726 50B6           8D5E         F0            lea	bx,-$10[bp]
20727 50B9           53                         push	bx
20728                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20729 50BA           8A46         04            mov	al,4[bp]
20730 50BD           30E4                       xor	ah,ah
20731 50BF           50                         push	ax
20732                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20733 50C0           E8         F3C3            call	_biosfn_get_cursor_pos
20734 50C3           83C4                   06  add	sp,*6
20735                                           !BCC_EOS
20736                                           ! 2407  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20737                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20738 50C6           8A46         F2            mov	al,-$E[bp]
20739                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20740 50C9           8846         FD            mov	-3[bp],al
20741                                           !BCC_EOS
20742                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20743 50CC           8B46         F2            mov	ax,-$E[bp]
20744 50CF           30C0                       xor	al,al
20745                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20746 50D1           88E0                       mov	al,ah
20747 50D3           30E4                       xor	ah,ah
20748                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20749 50D5           8846         FC            mov	-4[bp],al
20750                                           !BCC_EOS
20751                                           ! 2408  nbrows=read_byte(0x40,0x84)+1;
20752                                           ! Debug: list int = const $84 (used reg = )
20753 50D8           B8                   0084  mov	ax,#$84
20754 50DB           50                         push	ax
20755                                           ! Debug: list int = const $40 (used reg = )
20756 50DC           B8                   0040  mov	ax,*$40
20757 50DF           50                         push	ax
20758                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20759 50E0           E8         2D7C            call	_read_byte
20760 50E3           83C4                   04  add	sp,*4
20761                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20762 50E6           30E4                       xor	ah,ah
20763                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20764 50E8           40                         inc	ax
20765 50E9           8946         F6            mov	-$A[bp],ax
20766                                           !BCC_EOS
20767                                           ! 2409  nbcols=read_word(0x40,0x4A);
20768                                           ! Debug: list int = const $4A (used reg = )
20769 50EC           B8                   004A  mov	ax,*$4A
20770 50EF           50                         push	ax
20771                                           ! Debug: list int = const $40 (used reg = )
20772 50F0           B8                   0040  mov	ax,*$40
20773 50F3           50                         push	ax
20774                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20775 50F4           E8         2D7B            call	_read_word
20776 50F7           83C4                   04  add	sp,*4
20777                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20778 50FA           8946         F8            mov	-8[bp],ax
20779                                           !BCC_EOS
20780                                           ! 2410  if(vga_modes[line].class==0x00)
20781                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$12] struct  = vga_modes+0 (used reg = )
20782 50FD           8A46         FA            mov	al,-6[bp]
20783 5100           30E4                       xor	ah,ah
20784 5102           B1                     03  mov	cl,*3
20785 5104           D3E0                       shl	ax,cl
20786 5106           89C3                       mov	bx,ax
20787 5108           81C3                 0225  add	bx,#_vga_modes
20788                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20789 510C           8A47         01            mov	al,1[bx]
20790 510F           84C0                       test	al,al
20791 5111           75           5E            jne 	.13E
20792                       00005113            .13F:
20793                                           ! 2411   {
20794                                           ! 2412    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20795                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20796 5113           8A46         FC            mov	al,-4[bp]
20797 5116           30E4                       xor	ah,ah
20798 5118           8B4E         F8            mov	cx,-8[bp]
20799 511B           F7E9                       imul	cx
20800                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20801                                           ! Debug: expression subtree swapping
20802 511D           0246         FD            add	al,-3[bp]
20803 5120           80D4                   00  adc	ah,*0
20804                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20805 5123           D1E0                       shl	ax,*1
20806 5125           50                         push	ax
20807                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20808 5126           8B46         F8            mov	ax,-8[bp]
20809 5129           8B4E         F6            mov	cx,-$A[bp]
20810 512C           F7E9                       imul	cx
20811                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20812 512E           D1E0                       shl	ax,*1
20813                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20814 5130           0C                     FF  or	al,#$FF
20815                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20816                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20817 5132           89C3                       mov	bx,ax
20818 5134           8A46         04            mov	al,4[bp]
20819 5137           30E4                       xor	ah,ah
20820 5139           93                         xchg	ax,bx
20821 513A           40                         inc	ax
20822 513B           89D9                       mov	cx,bx
20823 513D           F7E9                       imul	cx
20824                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20825 513F           0346         EE            add	ax,-$12[bp]
20826 5142           44                         inc	sp
20827 5143           44                         inc	sp
20828                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20829 5144           8946         F4            mov	-$C[bp],ax
20830                                           !BCC_EOS
20831                                           ! 2413    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20832                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20833 5147           FF76         F4            push	-$C[bp]
20834                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$12] struct  = vga_modes+0 (used reg = )
20835 514A           8A46         FA            mov	al,-6[bp]
20836 514D           30E4                       xor	ah,ah
20837 514F           B1                     03  mov	cl,*3
20838 5151           D3E0                       shl	ax,cl
20839 5153           89C3                       mov	bx,ax
20840 5155           81C3                 0225  add	bx,#_vga_modes
20841                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20842 5159           FF77         04            push	4[bx]
20843                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20844 515C           E8         2D13            call	_read_word
20845 515F           83C4                   04  add	sp,*4
20846                                           ! Debug: list unsigned short = ax+0 (used reg = )
20847 5162           50                         push	ax
20848                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20849 5163           FF76         06            push	6[bp]
20850                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20851 5166           FF76         FE            push	-2[bp]
20852                                           ! Debug: func () void = write_word+0 (used reg = )
20853 5169           E8         2D31            call	_write_word
20854 516C           83C4                   06  add	sp,*6
20855                                           !BCC_EOS
20856                                           ! 2414   }
20857                                           ! 2415  else
20858                                           ! 2416   {
20859 516F           EB           00            jmp .140
20860                       00005171            .13E:
20861                                           ! 2417   }
20862                                           ! 2418 }
20863                       00005171            .140:
20864 5171           89EC                       mov	sp,bp
20865 5173           5D                         pop	bp
20866 5174           C3                         ret
20867                                           ! 2419 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20868                                           ! Register BX used in function biosfn_read_char_attr
20869                                           ! 2420 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20870                       00005175            _write_gfx_char_pl4:
20871                                           !BCC_EOS
20872                                           !BCC_EOS
20873                                           !BCC_EOS
20874                                           !BCC_EOS
20875                                           !BCC_EOS
20876                                           !BCC_EOS
20877                                           ! 2421 {
20878                                           ! 2422  Bit8u i,j,mask;
20879                                           !BCC_EOS
20880                                           ! 2423  Bit8u *fdata;
20881                                           !BCC_EOS
20882                                           ! 2424  Bit16u addr,dest,src;
20883                                           !BCC_EOS
20884                                           ! 2425  switch(cheight)
20885 5175           55                         push	bp
20886 5176           89E5                       mov	bp,sp
20887 5178           83C4                   F4  add	sp,*-$C
20888 517B           8A46         0E            mov	al,$E[bp]
20889                                           ! 2426   {case 14:
20890 517E           EB           18            jmp .143
20891                                           ! 2427     fdata = &vgafont14;
20892                       00005180            .144:
20893                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20894 5180           BB                   179B  mov	bx,#_vgafont14
20895 5183           895E         FA            mov	-6[bp],bx
20896                                           !BCC_EOS
20897                                           ! 2428     break;
20898 5186           EB           1A            jmp .141
20899                                           !BCC_EOS
20900                                           ! 2429    case 16:
20901                                           ! 2430     fdata = &vgafont16;
20902                       00005188            .145:
20903                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20904 5188           BB                   259B  mov	bx,#_vgafont16
20905 518B           895E         FA            mov	-6[bp],bx
20906                                           !BCC_EOS
20907                                           ! 2431     break;
20908 518E           EB           12            jmp .141
20909                                           !BCC_EOS
20910                                           ! 2432    default:
20911                                           ! 2433     fdata = &vgafont8;
20912                       00005190            .146:
20913                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20914 5190           BB                   0F9B  mov	bx,#_vgafont8
20915 5193           895E         FA            mov	-6[bp],bx
20916                                           !BCC_EOS
20917                                           ! 2434   }
20918                                           ! 2435  addr=xcurs+ycurs*cheight*nbcols;
20919 5196           EB           0A            jmp .141
20920                       00005198            .143:
20921 5198           2C                     0E  sub	al,*$E
20922 519A           74           E4            je 	.144
20923 519C           2C                     02  sub	al,*2
20924 519E           74           E8            je 	.145
20925 51A0           EB           EE            jmp	.146
20926                       000051A2            .141:
20927                       FFFFFFF2            ..FFFB	=	-$E
20928                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20929 51A2           8A46         0E            mov	al,$E[bp]
20930 51A5           30E4                       xor	ah,ah
20931 51A7           89C3                       mov	bx,ax
20932 51A9           8A46         0A            mov	al,$A[bp]
20933 51AC           30E4                       xor	ah,ah
20934 51AE           89D9                       mov	cx,bx
20935 51B0           F7E9                       imul	cx
20936                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20937 51B2           89C3                       mov	bx,ax
20938 51B4           8A46         0C            mov	al,$C[bp]
20939 51B7           30E4                       xor	ah,ah
20940 51B9           93                         xchg	ax,bx
20941 51BA           89D9                       mov	cx,bx
20942 51BC           F7E9                       imul	cx
20943                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20944                                           ! Debug: expression subtree swapping
20945 51BE           0246         08            add	al,8[bp]
20946 51C1           80D4                   00  adc	ah,*0
20947                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20948 51C4           8946         F8            mov	-8[bp],ax
20949                                           !BCC_EOS
20950                                           ! 2436  src = car * cheight;
20951                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20952 51C7           8A46         0E            mov	al,$E[bp]
20953 51CA           30E4                       xor	ah,ah
20954 51CC           89C3                       mov	bx,ax
20955 51CE           8A46         04            mov	al,4[bp]
20956 51D1           30E4                       xor	ah,ah
20957 51D3           89D9                       mov	cx,bx
20958 51D5           F7E9                       imul	cx
20959                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20960 51D7           8946         F4            mov	-$C[bp],ax
20961                                           !BCC_EOS
20962                                           ! 2437  outw(0x3c4, 0x0f02);
20963                                           ! Debug: list int = const $F02 (used reg = )
20964 51DA           B8                   0F02  mov	ax,#$F02
20965 51DD           50                         push	ax
20966                                           ! Debug: list int = const $3C4 (used reg = )
20967 51DE           B8                   03C4  mov	ax,#$3C4
20968 51E1           50                         push	ax
20969                                           ! Debug: func () void = outw+0 (used reg = )
20970 51E2           E8         2CF6            call	_outw
20971 51E5           83C4                   04  add	sp,*4
20972                                           !BCC_EOS
20973                                           ! 2438  outw(0x3ce, 0x0205);
20974                                           ! Debug: list int = const $205 (used reg = )
20975 51E8           B8                   0205  mov	ax,#$205
20976 51EB           50                         push	ax
20977                                           ! Debug: list int = const $3CE (used reg = )
20978 51EC           B8                   03CE  mov	ax,#$3CE
20979 51EF           50                         push	ax
20980                                           ! Debug: func () void = outw+0 (used reg = )
20981 51F0           E8         2CE8            call	_outw
20982 51F3           83C4                   04  add	sp,*4
20983                                           !BCC_EOS
20984                                           ! 2439  if(attr&0x80)
20985                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20986 51F6           8A46         06            mov	al,6[bp]
20987 51F9           24                     80  and	al,#$80
20988 51FB           84C0                       test	al,al
20989 51FD           74           10            je  	.147
20990                       000051FF            .148:
20991                                           ! 2440   {
20992                                           ! 2441    outw(0x3ce, 0x1803);
20993                                           ! Debug: list int = const $1803 (used reg = )
20994 51FF           B8                   1803  mov	ax,#$1803
20995 5202           50                         push	ax
20996                                           ! Debug: list int = const $3CE (used reg = )
20997 5203           B8                   03CE  mov	ax,#$3CE
20998 5206           50                         push	ax
20999                                           ! Debug: func () void = outw+0 (used reg = )
21000 5207           E8         2CD1            call	_outw
21001 520A           83C4                   04  add	sp,*4
21002                                           !BCC_EOS
21003                                           ! 2442   }
21004                                           ! 2443  else
21005                                           ! 2444   
21006                                           ! 2444 {
21007 520D           EB           0E            jmp .149
21008                       0000520F            .147:
21009                                           ! 2445    outw(0x3ce, 0x0003);
21010                                           ! Debug: list int = const 3 (used reg = )
21011 520F           B8                   0003  mov	ax,*3
21012 5212           50                         push	ax
21013                                           ! Debug: list int = const $3CE (used reg = )
21014 5213           B8                   03CE  mov	ax,#$3CE
21015 5216           50                         push	ax
21016                                           ! Debug: func () void = outw+0 (used reg = )
21017 5217           E8         2CC1            call	_outw
21018 521A           83C4                   04  add	sp,*4
21019                                           !BCC_EOS
21020                                           ! 2446   }
21021                                           ! 2447  for(i=0;i<cheight;i++)
21022                       0000521D            .149:
21023                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21024 521D           30C0                       xor	al,al
21025 521F           8846         FF            mov	-1[bp],al
21026                                           !BCC_EOS
21027                                           !BCC_EOS
21028                                           ! 2448   {
21029 5222           E9         00A6            br 	.14C
21030                       00005225            .14D:
21031                                           ! 2449    dest=addr+i*nbcols;
21032                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21033 5225           8A46         0C            mov	al,$C[bp]
21034 5228           30E4                       xor	ah,ah
21035 522A           89C3                       mov	bx,ax
21036 522C           8A46         FF            mov	al,-1[bp]
21037 522F           30E4                       xor	ah,ah
21038 5231           89D9                       mov	cx,bx
21039 5233           F7E9                       imul	cx
21040                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21041                                           ! Debug: expression subtree swapping
21042 5235           0346         F8            add	ax,-8[bp]
21043                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21044 5238           8946         F6            mov	-$A[bp],ax
21045                                           !BCC_EOS
21046                                           ! 2450    for(j=0;j<8;j++)
21047                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21048 523B           30C0                       xor	al,al
21049 523D           8846         FE            mov	-2[bp],al
21050                                           !BCC_EOS
21051                                           !BCC_EOS
21052                                           ! 2451     {
21053 5240           EB           79            jmp .150
21054                       00005242            .151:
21055                                           ! 2452      mask=0x80>>j;
21056                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21057 5242           8A46         FE            mov	al,-2[bp]
21058 5245           30E4                       xor	ah,ah
21059 5247           89C3                       mov	bx,ax
21060 5249           B8                   0080  mov	ax,#$80
21061 524C           89D9                       mov	cx,bx
21062 524E           D3F8                       sar	ax,cl
21063                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21064 5250           8846         FD            mov	-3[bp],al
21065                                           !BCC_EOS
21066                                           ! 2453      outw(0x3ce, (mask << 8) | 0x08);
21067                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21068 5253           8A46         FD            mov	al,-3[bp]
21069 5256           30E4                       xor	ah,ah
21070 5258           88C4                       mov	ah,al
21071 525A           30C0                       xor	al,al
21072                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21073 525C           0C                     08  or	al,*8
21074                                           ! Debug: list unsigned int = ax+0 (used reg = )
21075 525E           50                         push	ax
21076                                           ! Debug: list int = const $3CE (used reg = )
21077 525F           B8                   03CE  mov	ax,#$3CE
21078 5262           50                         push	ax
21079                                           ! Debug: func () void = outw+0 (used reg = )
21080 5263           E8         2C75            call	_outw
21081 5266           83C4                   04  add	sp,*4
21082                                           !BCC_EOS
21083                                           ! 2454      read_byte(0xa000,dest);
21084                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21085 5269           FF76         F6            push	-$A[bp]
21086                                           ! Debug: list unsigned int = const $A000 (used reg = )
21087 526C           B8                   A000  mov	ax,#$A000
21088 526F           50                         push	ax
21089                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21090 5270           E8         2BEC            call	_read_byte
21091 5273           83C4                   04  add	sp,*4
21092                                           !BCC_EOS
21093                                           ! 2455      if(fdata[src+i]&mask)
21094                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21095 5276           8B46         F4            mov	ax,-$C[bp]
21096 5279           0246         FF            add	al,-1[bp]
21097 527C           80D4                   00  adc	ah,*0
21098                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21099 527F           0346         FA            add	ax,-6[bp]
21100 5282           89C3                       mov	bx,ax
21101                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21102 5284           8A07                       mov	al,[bx]
21103 5286           2246         FD            and	al,-3[bp]
21104 5289           84C0                       test	al,al
21105 528B           74           17            je  	.152
21106                       0000528D            .153:
21107                                           ! 2456       {
21108                                           ! 2457        write_byte(0xa000,dest,attr&0x0f);
21109                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21110 528D           8A46         06            mov	al,6[bp]
21111 5290           24                     0F  and	al,*$F
21112                                           ! Debug: list unsigned char = al+0 (used reg = )
21113 5292           30E4                       xor	ah,ah
21114 5294           50                         push	ax
21115                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21116 5295           FF76         F6            push	-$A[bp]
21117                                           ! Debug: list unsigned int = const $A000 (used reg = )
21118 5298           B8                   A000  mov	ax,#$A000
21119 529B           50                         push	ax
21120                                           ! Debug: func () void = write_byte+0 (used reg = )
21121 529C           E8         2BE6            call	_write_byte
21122 529F           83C4                   06  add	sp,*6
21123                                           !BCC_EOS
21124                                           ! 2458       }
21125                                           ! 2459      else
21126                                           ! 2460       {
21127 52A2           EB           10            jmp .154
21128                       000052A4            .152:
21129                                           ! 2461        write_byte(0xa000,dest,0x00);
21130                                           ! Debug: list int = const 0 (used reg = )
21131 52A4           31C0                       xor	ax,ax
21132 52A6           50                         push	ax
21133                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21134 52A7           FF76         F6            push	-$A[bp]
21135                                           ! Debug: list unsigned int = const $A000 (used reg = )
21136 52AA           B8                   A000  mov	ax,#$A000
21137 52AD           50                         push	ax
21138                                           ! Debug: func () void = write_byte+0 (used reg = )
21139 52AE           E8         2BD4            call	_write_byte
21140 52B1           83C4                   06  add	sp,*6
21141                                           !BCC_EOS
21142                                           ! 2462       }
21143                                           ! 2463     }
21144                       000052B4            .154:
21145                                           ! 2464   }
21146                       000052B4            .14F:
21147                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21148 52B4           8A46         FE            mov	al,-2[bp]
21149 52B7           40                         inc	ax
21150 52B8           8846         FE            mov	-2[bp],al
21151                       000052BB            .150:
21152                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21153 52BB           8A46         FE            mov	al,-2[bp]
21154 52BE           3C                     08  cmp	al,*8
21155 52C0         0F82         FF7E            blo 	.151
21156                       000052C4            .155:
21157                       000052C4            .14E:
21158                                           ! 2465 #asm
21159                       000052C4            .14B:
21160                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21161 52C4           8A46         FF            mov	al,-1[bp]
21162 52C7           40                         inc	ax
21163 52C8           8846         FF            mov	-1[bp],al
21164                       000052CB            .14C:
21165                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21166 52CB           8A46         FF            mov	al,-1[bp]
21167 52CE           3A46         0E            cmp	al,$E[bp]
21168 52D1         0F82         FF50            blo 	.14D
21169                       000052D5            .156:
21170                       000052D5            .14A:
21171                                           !BCC_EOS
21172                                           !BCC_ASM
21173                       0000000A            _write_gfx_char_pl4.j	set	$A
21174                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21175                       00000006            _write_gfx_char_pl4.fdata	set	6
21176                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21177                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21178                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21179                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21180                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21181                       0000000B            _write_gfx_char_pl4.i	set	$B
21182                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21183                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21184                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21185                       00000009            _write_gfx_char_pl4.mask	set	9
21186                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21187                       00000002            _write_gfx_char_pl4.dest	set	2
21188                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21189                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21190                       00000008            .write_gfx_char_pl4.xcurs	set	8
21191                       00000000            _write_gfx_char_pl4.src	set	0
21192                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21193                       00000012            _write_gfx_char_pl4.attr	set	$12
21194                       00000006            .write_gfx_char_pl4.attr	set	6
21195                       00000010            _write_gfx_char_pl4.car	set	$10
21196                       00000004            .write_gfx_char_pl4.car	set	4
21197                       00000004            _write_gfx_char_pl4.addr	set	4
21198                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21199 52D5           BA                   03CE    mov dx, # 0x3ce
21200 52D8           B8                   FF08    mov ax, #0xff08
21201 52DB           EF                           out dx, ax
21202 52DC           B8                   0005    mov ax, #0x0005
21203 52DF           EF                           out dx, ax
21204 52E0           B8                   0003    mov ax, #0x0003
21205 52E3           EF                           out dx, ax
21206                                           ! 2473 endasm
21207                                           !BCC_ENDASM
21208                                           !BCC_EOS
21209                                           ! 2474 }
21210 52E4           89EC                       mov	sp,bp
21211 52E6           5D                         pop	bp
21212 52E7           C3                         ret
21213                                           ! 2475 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21214                                           ! Register BX used in function write_gfx_char_pl4
21215                                           ! 2476 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21216                       000052E8            _write_gfx_char_cga:
21217                                           !BCC_EOS
21218                                           !BCC_EOS
21219                                           !BCC_EOS
21220                                           !BCC_EOS
21221                                           !BCC_EOS
21222                                           !BCC_EOS
21223                                           ! 2477 {
21224                                           ! 2478  Bit8u i,j,mask,data;
21225                                           !BCC_EOS
21226                                           ! 2479  Bit8u *fdata;
21227                                           !BCC_EOS
21228                                           ! 2480  Bit16u addr,dest,src;
21229                                           !BCC_EOS
21230                                           ! 2481  fdata = &vgafont8;
21231 52E8           55                         push	bp
21232 52E9           89E5                       mov	bp,sp
21233 52EB           83C4                   F4  add	sp,*-$C
21234                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21235 52EE           BB                   0F9B  mov	bx,#_vgafont8
21236 52F1           895E         FA            mov	-6[bp],bx
21237                                           !BCC_EOS
21238                                           ! 2482  addr=(xcurs*bpp)+ycurs*320;
21239                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21240 52F4           8A46         0A            mov	al,$A[bp]
21241 52F7           30E4                       xor	ah,ah
21242 52F9           B9                   0140  mov	cx,#$140
21243 52FC           F7E9                       imul	cx
21244 52FE           50                         push	ax
21245                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21246 52FF           8A46         0E            mov	al,$E[bp]
21247 5302           30E4                       xor	ah,ah
21248 5304           89C3                       mov	bx,ax
21249 5306           8A46         08            mov	al,8[bp]
21250 5309           30E4                       xor	ah,ah
21251 530B           89D9                       mov	cx,bx
21252 530D           F7E9                       imul	cx
21253                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21254 530F           0346         F2            add	ax,-$E[bp]
21255 5312           44                         inc	sp
21256 5313           44                         inc	sp
21257                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21258 5314           8946         F8            mov	-8[bp],ax
21259                                           !BCC_EOS
21260                                           ! 2483  src = car * 8;
21261                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21262 5317           8A46         04            mov	al,4[bp]
21263 531A           30E4                       xor	ah,ah
21264 531C           B1                     03  mov	cl,*3
21265 531E           D3E0                       shl	ax,cl
21266                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21267 5320           8946         F4            mov	-$C[bp],ax
21268                                           !BCC_EOS
21269                                           ! 2484  for(i=0;i<8;i++)
21270                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21271 5323           30C0                       xor	al,al
21272 5325           8846         FF            mov	-1[bp],al
21273                                           !BCC_EOS
21274                                           !BCC_EOS
21275                                           ! 2485   {
21276 5328           E9         01B3            br 	.159
21277                       0000532B            .15A:
21278                                           ! 2486    dest=addr+(i>>1)*80;
21279                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21280 532B           8A46         FF            mov	al,-1[bp]
21281 532E           30E4                       xor	ah,ah
21282 5330           D1E8                       shr	ax,*1
21283                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21284 5332           B9                   0050  mov	cx,*$50
21285 5335           F7E9                       imul	cx
21286                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21287                                           ! Debug: expression subtree swapping
21288 5337           0346         F8            add	ax,-8[bp]
21289                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21290 533A           8946         F6            mov	-$A[bp],ax
21291                                           !BCC_EOS
21292                                           ! 2487    if (i & 1) dest += 0x2000;
21293                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21294 533D           8A46         FF            mov	al,-1[bp]
21295 5340           24                     01  and	al,*1
21296 5342           84C0                       test	al,al
21297 5344           74           09            je  	.15B
21298                       00005346            .15C:
21299                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21300 5346           8B46         F6            mov	ax,-$A[bp]
21301 5349           05                   2000  add	ax,#$2000
21302 534C           8946         F6            mov	-$A[bp],ax
21303                                           !BCC_EOS
21304                                           ! 2488    mask = 0x80;
21305                       0000534F            .15B:
21306                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21307 534F           B0                     80  mov	al,#$80
21308 5351           8846         FD            mov	-3[bp],al
21309                                           !BCC_EOS
21310                                           ! 2489    if (bpp == 1)
21311                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21312 5354           8A46         0E            mov	al,$E[bp]
21313 5357           3C                     01  cmp	al,*1
21314 5359         0F85         00B3            bne 	.15D
21315                       0000535D            .15E:
21316                                           ! 2490     {
21317                                           ! 2491      if (attr & 0x80)
21318                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21319 535D           8A46         06            mov	al,6[bp]
21320 5360           24                     80  and	al,#$80
21321 5362           84C0                       test	al,al
21322 5364           74           12            je  	.15F
21323                       00005366            .160:
21324                                           ! 2492       {
21325                                           ! 2493        data = read_byte(0xb800,dest);
21326                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21327 5366           FF76         F6            push	-$A[bp]
21328                                           ! Debug: list unsigned int = const $B800 (used reg = )
21329 5369           B8                   B800  mov	ax,#$B800
21330 536C           50                         push	ax
21331                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21332 536D           E8         2AEF            call	_read_byte
21333 5370           83C4                   04  add	sp,*4
21334                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21335 5373           8846         FC            mov	-4[bp],al
21336                                           !BCC_EOS
21337                                           ! 2494       }
21338                                           ! 2495      else
21339                                           ! 2496       {
21340 5376           EB           05            jmp .161
21341                       00005378            .15F:
21342                                           ! 2497        data = 0x00;
21343                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21344 5378           30C0                       xor	al,al
21345 537A           8846         FC            mov	-4[bp],al
21346                                           !BCC_EOS
21347                                           ! 2498       }
21348                                           ! 2499      for(j=0;j<8;j++)
21349                       0000537D            .161:
21350                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21351 537D           30C0                       xor	al,al
21352 537F           8846         FE            mov	-2[bp],al
21353                                           !BCC_EOS
21354                                           !BCC_EOS
21355                                           ! 2500       {
21356 5382           EB           6F            jmp .164
21357                       00005384            .165:
21358                                           ! 2501        if (fdata[src+i] & mask)
21359                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21360 5384           8B46         F4            mov	ax,-$C[bp]
21361 5387           0246         FF            add	al,-1[bp]
21362 538A           80D4                   00  adc	ah,*0
21363                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21364 538D           0346         FA            add	ax,-6[bp]
21365 5390           89C3                       mov	bx,ax
21366                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21367 5392           8A07                       mov	al,[bx]
21368 5394           2246         FD            and	al,-3[bp]
21369 5397           84C0                       test	al,al
21370 5399           74           47            je  	.166
21371                       0000539B            .167:
21372                                           ! 2502         {
21373                                           ! 2503          if (attr & 0x80)
21374                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21375 539B           8A46         06            mov	al,6[bp]
21376 539E           24                     80  and	al,#$80
21377 53A0           84C0                       test	al,al
21378 53A2           74           20            je  	.168
21379                       000053A4            .169:
21380                                           ! 2504           {
21381                                           ! 2505            data ^= (attr & 0x01) << (7-j);
21382                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21383 53A4           B8                   0007  mov	ax,*7
21384 53A7           2A46         FE            sub	al,-2[bp]
21385 53AA           80DC                   00  sbb	ah,*0
21386 53AD           50                         push	ax
21387                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21388 53AE           8A46         06            mov	al,6[bp]
21389 53B1           24                     01  and	al,*1
21390                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21391 53B3           30E4                       xor	ah,ah
21392 53B5           8B4E         F2            mov	cx,-$E[bp]
21393 53B8           D3E0                       shl	ax,cl
21394 53BA           44                         inc	sp
21395 53BB           44                         inc	sp
21396                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21397 53BC           3246         FC            xor	al,-4[bp]
21398 53BF           8846         FC            mov	-4[bp],al
21399                                           !BCC_EOS
21400                                           ! 2506           }
21401                                           ! 2507          else
21402                                           ! 2508           {
21403 53C2           EB           1E            jmp .16A
21404                       000053C4            .168:
21405                                           ! 2509            data |= (attr & 0x01) << (7-j);
21406                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21407 53C4           B8                   0007  mov	ax,*7
21408 53C7           2A46         FE            sub	al,-2[bp]
21409 53CA           80DC                   00  sbb	ah,*0
21410 53CD           50                         push	ax
21411                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21412 53CE           8A46         06            mov	al,6[bp]
21413 53D1           24                     01  and	al,*1
21414                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21415 53D3           30E4                       xor	ah,ah
21416 53D5           8B4E         F2            mov	cx,-$E[bp]
21417 53D8           D3E0                       shl	ax,cl
21418 53DA           44                         inc	sp
21419 53DB           44                         inc	sp
21420                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21421 53DC           0A46         FC            or	al,-4[bp]
21422 53DF           8846         FC            mov	-4[bp],al
21423                                           !BCC_EOS
21424                                           ! 2510           }
21425                                           ! 2511         }
21426                       000053E2            .16A:
21427                                           ! 2512        mask >>= 1;
21428                       000053E2            .166:
21429                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21430 53E2           8A46         FD            mov	al,-3[bp]
21431 53E5           30E4                       xor	ah,ah
21432 53E7           D1E8                       shr	ax,*1
21433 53E9           8846         FD            mov	-3[bp],al
21434                                           !BCC_EOS
21435                                           ! 2513       }
21436                                           ! 2514      write_byte(0xb800,dest,data);
21437                       000053EC            .163:
21438                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21439 53EC           8A46         FE            mov	al,-2[bp]
21440 53EF           40                         inc	ax
21441 53F0           8846         FE            mov	-2[bp],al
21442                       000053F3            .164:
21443                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21444 53F3           8A46         FE            mov	al,-2[bp]
21445 53F6           3C                     08  cmp	al,*8
21446 53F8           72           8A            jb 	.165
21447                       000053FA            .16B:
21448                       000053FA            .162:
21449                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21450 53FA           8A46         FC            mov	al,-4[bp]
21451 53FD           30E4                       xor	ah,ah
21452 53FF           50                         push	ax
21453                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21454 5400           FF76         F6            push	-$A[bp]
21455                                           ! Debug: list unsigned int = const $B800 (used reg = )
21456 5403           B8                   B800  mov	ax,#$B800
21457 5406           50                         push	ax
21458                                           ! Debug: func () void = write_byte+0 (used reg = )
21459 5407           E8         2A7B            call	_write_byte
21460 540A           83C4                   06  add	sp,*6
21461                                           !BCC_EOS
21462                                           ! 2515     }
21463                                           ! 2516    else
21464                                           ! 2517     {
21465 540D           E9         00C7            br 	.16C
21466                       00005410            .15D:
21467                                           ! 2518      while (mask > 0)
21468                                           ! 2519       {
21469 5410           E9         00BB            br 	.16E
21470                       00005413            .16F:
21471                                           ! 2520        if (attr & 0x80)
21472                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21473 5413           8A46         06            mov	al,6[bp]
21474 5416           24                     80  and	al,#$80
21475 5418           84C0                       test	al,al
21476 541A           74           12            je  	.170
21477                       0000541C            .171:
21478                                           ! 2521         {
21479                                           ! 2522          data = read_byte(0xb800,dest);
21480                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21481 541C           FF76         F6            push	-$A[bp]
21482                                           ! Debug: list unsigned int = const $B800 (used reg = )
21483 541F           B8                   B800  mov	ax,#$B800
21484 5422           50                         push	ax
21485                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21486 5423           E8         2A39            call	_read_byte
21487 5426           83C4                   04  add	sp,*4
21488                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21489 5429           8846         FC            mov	-4[bp],al
21490                                           !BCC_EOS
21491                                           ! 2523         }
21492                                           ! 2524        else
21493                                           ! 2525         {
21494 542C           EB           05            jmp .172
21495                       0000542E            .170:
21496                                           ! 2526          data = 0x00;
21497                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21498 542E           30C0                       xor	al,al
21499 5430           8846         FC            mov	-4[bp],al
21500                                           !BCC_EOS
21501                                           ! 2527         }
21502                                           ! 2528        for(j=0;j<4;j++)
21503                       00005433            .172:
21504                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21505 5433           30C0                       xor	al,al
21506 5435           8846         FE            mov	-2[bp],al
21507                                           !BCC_EOS
21508                                           !BCC_EOS
21509                                           ! 2529         {
21510 5438           EB           73            jmp .175
21511                       0000543A            .176:
21512                                           ! 2530          if (fdata[src+i] & mask)
21513                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21514 543A           8B46         F4            mov	ax,-$C[bp]
21515 543D           0246         FF            add	al,-1[bp]
21516 5440           80D4                   00  adc	ah,*0
21517                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21518 5443           0346         FA            add	ax,-6[bp]
21519 5446           89C3                       mov	bx,ax
21520                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21521 5448           8A07                       mov	al,[bx]
21522 544A           2246         FD            and	al,-3[bp]
21523 544D           84C0                       test	al,al
21524 544F           74           4B            je  	.177
21525                       00005451            .178:
21526                                           ! 2531           {
21527                                           ! 2532            if (attr & 0x80)
21528                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21529 5451           8A46         06            mov	al,6[bp]
21530 5454           24                     80  and	al,#$80
21531 5456           84C0                       test	al,al
21532 5458           74           22            je  	.179
21533                       0000545A            .17A:
21534                                           ! 2533             {
21535                                           ! 2534              data ^= (attr & 0x03) << ((3-j)*2);
21536                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21537 545A           B8                   0003  mov	ax,*3
21538 545D           2A46         FE            sub	al,-2[bp]
21539 5460           80DC                   00  sbb	ah,*0
21540                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21541 5463           D1E0                       shl	ax,*1
21542 5465           50                         push	ax
21543                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21544 5466           8A46         06            mov	al,6[bp]
21545 5469           24                     03  and	al,*3
21546                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21547 546B           30E4                       xor	ah,ah
21548 546D           8B4E         F2            mov	cx,-$E[bp]
21549 5470           D3E0                       shl	ax,cl
21550 5472           44                         inc	sp
21551 5473           44                         inc	sp
21552                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21553 5474           3246         FC            xor	al,-4[bp]
21554 5477           8846         FC            mov	-4[bp],al
21555                                           !BCC_EOS
21556                                           ! 2535             }
21557                                           ! 2536            else
21558                                           ! 2537             {
21559 547A           EB           20            jmp .17B
21560                       0000547C            .179:
21561                                           ! 2538              data |= (attr & 0x03) << ((3-j)*2);
21562                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21563 547C           B8                   0003  mov	ax,*3
21564 547F           2A46         FE            sub	al,-2[bp]
21565 5482           80DC                   00  sbb	ah,*0
21566                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21567 5485           D1E0                       shl	ax,*1
21568 5487           50                         push	ax
21569                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21570 5488           8A46         06            mov	al,6[bp]
21571 548B           24                     03  and	al,*3
21572                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21573 548D           30E4                       xor	ah,ah
21574 548F           8B4E         F2            mov	cx,-$E[bp]
21575 5492           D3E0                       shl	ax,cl
21576 5494           44                         inc	sp
21577 5495           44                         inc	sp
21578                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21579 5496           0A46         FC            or	al,-4[bp]
21580 5499           8846         FC            mov	-4[bp],al
21581                                           !BCC_EOS
21582                                           ! 2539             }
21583                                           ! 2540           }
21584                       0000549C            .17B:
21585                                           ! 2541          mask >>= 1;
21586                       0000549C            .177:
21587                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21588 549C           8A46         FD            mov	al,-3[bp]
21589 549F           30E4                       xor	ah,ah
21590 54A1           D1E8                       shr	ax,*1
21591 54A3           8846         FD            mov	-3[bp],al
21592                                           !BCC_EOS
21593                                           ! 2542         }
21594                                           ! 2543        write_byte(0xb800,dest,data);
21595                       000054A6            .174:
21596                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21597 54A6           8A46         FE            mov	al,-2[bp]
21598 54A9           40                         inc	ax
21599 54AA           8846         FE            mov	-2[bp],al
21600                       000054AD            .175:
21601                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21602 54AD           8A46         FE            mov	al,-2[bp]
21603 54B0           3C                     04  cmp	al,*4
21604 54B2           72           86            jb 	.176
21605                       000054B4            .17C:
21606                       000054B4            .173:
21607                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21608 54B4           8A46         FC            mov	al,-4[bp]
21609 54B7           30E4                       xor	ah,ah
21610 54B9           50                         push	ax
21611                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21612 54BA           FF76         F6            push	-$A[bp]
21613                                           ! Debug: list unsigned int = const $B800 (used reg = )
21614 54BD           B8                   B800  mov	ax,#$B800
21615 54C0           50                         push	ax
21616                                           ! Debug: func () void = write_byte+0 (used reg = )
21617 54C1           E8         29C1            call	_write_byte
21618 54C4           83C4                   06  add	sp,*6
21619                                           !BCC_EOS
21620                                           ! 2544        dest += 1;
21621                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21622 54C7           8B46         F6            mov	ax,-$A[bp]
21623 54CA           40                         inc	ax
21624 54CB           8946         F6            mov	-$A[bp],ax
21625                                           !BCC_EOS
21626                                           ! 2545       }
21627                                           ! 2546     }
21628                       000054CE            .16E:
21629                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21630 54CE           8A46         FD            mov	al,-3[bp]
21631 54D1           84C0                       test	al,al
21632 54D3         0F85         FF3C            bne 	.16F
21633                       000054D7            .17D:
21634                       000054D7            .16D:
21635                                           ! 2547   }
21636                       000054D7            .16C:
21637                                           ! 2548 }
21638                       000054D7            .158:
21639                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21640 54D7           8A46         FF            mov	al,-1[bp]
21641 54DA           40                         inc	ax
21642 54DB           8846         FF            mov	-1[bp],al
21643                       000054DE            .159:
21644                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21645 54DE           8A46         FF            mov	al,-1[bp]
21646 54E1           3C                     08  cmp	al,*8
21647 54E3         0F82         FE44            blo 	.15A
21648                       000054E7            .17E:
21649                       000054E7            .157:
21650 54E7           89EC                       mov	sp,bp
21651 54E9           5D                         pop	bp
21652 54EA           C3                         ret
21653                                           ! 2549 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21654                                           ! Register BX used in function write_gfx_char_cga
21655                                           ! 2550 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21656                       000054EB            _write_gfx_char_lin:
21657                                           !BCC_EOS
21658                                           !BCC_EOS
21659                                           !BCC_EOS
21660                                           !BCC_EOS
21661                                           !BCC_EOS
21662                                           ! 2551 {
21663                                           ! 2552  Bit8u i,j,mask,data;
21664                                           !BCC_EOS
21665                                           ! 2553  Bit8u *fdata;
21666                                           !BCC_EOS
21667                                           ! 2554  Bit16u addr,d
21668                                           ! 2554 est,src;
21669                                           !BCC_EOS
21670                                           ! 2555  fdata = &vgafont8;
21671 54EB           55                         push	bp
21672 54EC           89E5                       mov	bp,sp
21673 54EE           83C4                   F4  add	sp,*-$C
21674                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21675 54F1           BB                   0F9B  mov	bx,#_vgafont8
21676 54F4           895E         FA            mov	-6[bp],bx
21677                                           !BCC_EOS
21678                                           ! 2556  addr=xcurs*8+ycurs*nbcols*64;
21679                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21680 54F7           8A46         0C            mov	al,$C[bp]
21681 54FA           30E4                       xor	ah,ah
21682 54FC           89C3                       mov	bx,ax
21683 54FE           8A46         0A            mov	al,$A[bp]
21684 5501           30E4                       xor	ah,ah
21685 5503           89D9                       mov	cx,bx
21686 5505           F7E9                       imul	cx
21687                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21688 5507           B1                     06  mov	cl,*6
21689 5509           D3E0                       shl	ax,cl
21690 550B           50                         push	ax
21691                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21692 550C           8A46         08            mov	al,8[bp]
21693 550F           30E4                       xor	ah,ah
21694 5511           B1                     03  mov	cl,*3
21695 5513           D3E0                       shl	ax,cl
21696                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21697 5515           0346         F2            add	ax,-$E[bp]
21698 5518           44                         inc	sp
21699 5519           44                         inc	sp
21700                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21701 551A           8946         F8            mov	-8[bp],ax
21702                                           !BCC_EOS
21703                                           ! 2557  src = car * 8;
21704                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21705 551D           8A46         04            mov	al,4[bp]
21706 5520           30E4                       xor	ah,ah
21707 5522           B1                     03  mov	cl,*3
21708 5524           D3E0                       shl	ax,cl
21709                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21710 5526           8946         F4            mov	-$C[bp],ax
21711                                           !BCC_EOS
21712                                           ! 2558  for(i=0;i<8;i++)
21713                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21714 5529           30C0                       xor	al,al
21715 552B           8846         FF            mov	-1[bp],al
21716                                           !BCC_EOS
21717                                           !BCC_EOS
21718                                           ! 2559   {
21719 552E           E9         0081            br 	.181
21720                       00005531            .182:
21721                                           ! 2560    dest=addr+i*nbcols*8;
21722                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21723 5531           8A46         0C            mov	al,$C[bp]
21724 5534           30E4                       xor	ah,ah
21725 5536           89C3                       mov	bx,ax
21726 5538           8A46         FF            mov	al,-1[bp]
21727 553B           30E4                       xor	ah,ah
21728 553D           89D9                       mov	cx,bx
21729 553F           F7E9                       imul	cx
21730                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21731 5541           B1                     03  mov	cl,*3
21732 5543           D3E0                       shl	ax,cl
21733                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21734                                           ! Debug: expression subtree swapping
21735 5545           0346         F8            add	ax,-8[bp]
21736                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21737 5548           8946         F6            mov	-$A[bp],ax
21738                                           !BCC_EOS
21739                                           ! 2561    mask = 0x80;
21740                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21741 554B           B0                     80  mov	al,#$80
21742 554D           8846         FD            mov	-3[bp],al
21743                                           !BCC_EOS
21744                                           ! 2562    for(j=0;j<8;j++)
21745                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21746 5550           30C0                       xor	al,al
21747 5552           8846         FE            mov	-2[bp],al
21748                                           !BCC_EOS
21749                                           !BCC_EOS
21750                                           ! 2563     {
21751 5555           EB           4D            jmp .185
21752                       00005557            .186:
21753                                           ! 2564      data = 0x00;
21754                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21755 5557           30C0                       xor	al,al
21756 5559           8846         FC            mov	-4[bp],al
21757                                           !BCC_EOS
21758                                           ! 2565      if (fdata[src+i] & mask)
21759                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21760 555C           8B46         F4            mov	ax,-$C[bp]
21761 555F           0246         FF            add	al,-1[bp]
21762 5562           80D4                   00  adc	ah,*0
21763                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21764 5565           0346         FA            add	ax,-6[bp]
21765 5568           89C3                       mov	bx,ax
21766                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21767 556A           8A07                       mov	al,[bx]
21768 556C           2246         FD            and	al,-3[bp]
21769 556F           84C0                       test	al,al
21770 5571           74           06            je  	.187
21771                       00005573            .188:
21772                                           ! 2566       {
21773                                           ! 2567        data = attr;
21774                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21775 5573           8A46         06            mov	al,6[bp]
21776 5576           8846         FC            mov	-4[bp],al
21777                                           !BCC_EOS
21778                                           ! 2568       }
21779                                           ! 2569      write_byte(0xa000,dest+j,data);
21780                       00005579            .187:
21781                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21782 5579           8A46         FC            mov	al,-4[bp]
21783 557C           30E4                       xor	ah,ah
21784 557E           50                         push	ax
21785                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21786 557F           8B46         F6            mov	ax,-$A[bp]
21787 5582           0246         FE            add	al,-2[bp]
21788 5585           80D4                   00  adc	ah,*0
21789                                           ! Debug: list unsigned int = ax+0 (used reg = )
21790 5588           50                         push	ax
21791                                           ! Debug: list unsigned int = const $A000 (used reg = )
21792 5589           B8                   A000  mov	ax,#$A000
21793 558C           50                         push	ax
21794                                           ! Debug: func () void = write_byte+0 (used reg = )
21795 558D           E8         28F5            call	_write_byte
21796 5590           83C4                   06  add	sp,*6
21797                                           !BCC_EOS
21798                                           ! 2570      mask >>= 1;
21799                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21800 5593           8A46         FD            mov	al,-3[bp]
21801 5596           30E4                       xor	ah,ah
21802 5598           D1E8                       shr	ax,*1
21803 559A           8846         FD            mov	-3[bp],al
21804                                           !BCC_EOS
21805                                           ! 2571     }
21806                                           ! 2572   }
21807                       0000559D            .184:
21808                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21809 559D           8A46         FE            mov	al,-2[bp]
21810 55A0           40                         inc	ax
21811 55A1           8846         FE            mov	-2[bp],al
21812                       000055A4            .185:
21813                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21814 55A4           8A46         FE            mov	al,-2[bp]
21815 55A7           3C                     08  cmp	al,*8
21816 55A9           72           AC            jb 	.186
21817                       000055AB            .189:
21818                       000055AB            .183:
21819                                           ! 2573 }
21820                       000055AB            .180:
21821                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21822 55AB           8A46         FF            mov	al,-1[bp]
21823 55AE           40                         inc	ax
21824 55AF           8846         FF            mov	-1[bp],al
21825                       000055B2            .181:
21826                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21827 55B2           8A46         FF            mov	al,-1[bp]
21828 55B5           3C                     08  cmp	al,*8
21829 55B7         0F82         FF76            blo 	.182
21830                       000055BB            .18A:
21831                       000055BB            .17F:
21832 55BB           89EC                       mov	sp,bp
21833 55BD           5D                         pop	bp
21834 55BE           C3                         ret
21835                                           ! 2574 static void biosfn_write_char_attr (car,page,attr,count)
21836                                           ! Register BX used in function write_gfx_char_lin
21837                                           ! 2575 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21838                       000055BF            _biosfn_write_char_attr:
21839                                           !BCC_EOS
21840                                           !BCC_EOS
21841                                           !BCC_EOS
21842                                           !BCC_EOS
21843                                           ! 2576 {
21844                                           ! 2577  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21845                                           !BCC_EOS
21846                                           ! 2578  Bit16u nbcols,nbrows,address;
21847                                           !BCC_EOS
21848                                           ! 2579  Bit16u cursor,dummy;
21849                                           !BCC_EOS
21850                                           ! 2580  mode=read_byte(0x40,0x49);
21851 55BF           55                         push	bp
21852 55C0           89E5                       mov	bp,sp
21853 55C2           83C4                   F0  add	sp,*-$10
21854                                           ! Debug: list int = const $49 (used reg = )
21855 55C5           B8                   0049  mov	ax,*$49
21856 55C8           50                         push	ax
21857                                           ! Debug: list int = const $40 (used reg = )
21858 55C9           B8                   0040  mov	ax,*$40
21859 55CC           50                         push	ax
21860                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21861 55CD           E8         288F            call	_read_byte
21862 55D0           83C4                   04  add	sp,*4
21863                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21864 55D3           8846         FC            mov	-4[bp],al
21865                                           !BCC_EOS
21866                                           ! 2581  line=find_vga_entry(mode);
21867                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21868 55D6           8A46         FC            mov	al,-4[bp]
21869 55D9           30E4                       xor	ah,ah
21870 55DB           50                         push	ax
21871                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21872 55DC           E8         2794            call	_find_vga_entry
21873 55DF           44                         inc	sp
21874 55E0           44                         inc	sp
21875                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21876 55E1           8846         FB            mov	-5[bp],al
21877                                           !BCC_EOS
21878                                           ! 2582  if(line==0xFF)return;
21879                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21880 55E4           8A46         FB            mov	al,-5[bp]
21881 55E7           3C                     FF  cmp	al,#$FF
21882 55E9           75           04            jne 	.18B
21883                       000055EB            .18C:
21884 55EB           89EC                       mov	sp,bp
21885 55ED           5D                         pop	bp
21886 55EE           C3                         ret
21887                                           !BCC_EOS
21888                                           ! 2583  biosfn_get_cursor_pos(page,&dummy,&cursor);
21889                       000055EF            .18B:
21890                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21891 55EF           8D5E         F2            lea	bx,-$E[bp]
21892 55F2           53                         push	bx
21893                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21894 55F3           8D5E         F0            lea	bx,-$10[bp]
21895 55F6           53                         push	bx
21896                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21897 55F7           8A46         06            mov	al,6[bp]
21898 55FA           30E4                       xor	ah,ah
21899 55FC           50                         push	ax
21900                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21901 55FD           E8         EE86            call	_biosfn_get_cursor_pos
21902 5600           83C4                   06  add	sp,*6
21903                                           !BCC_EOS
21904                                           ! 2584  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21905                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21906 5603           8A46         F2            mov	al,-$E[bp]
21907                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21908 5606           8846         FE            mov	-2[bp],al
21909                                           !BCC_EOS
21910                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21911 5609           8B46         F2            mov	ax,-$E[bp]
21912 560C           30C0                       xor	al,al
21913                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21914 560E           88E0                       mov	al,ah
21915 5610           30E4                       xor	ah,ah
21916                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21917 5612           8846         FD            mov	-3[bp],al
21918                                           !BCC_EOS
21919                                           ! 2585  nbrows=read_byte(0x40,0x84)+1;
21920                                           ! Debug: list int = const $84 (used reg = )
21921 5615           B8                   0084  mov	ax,#$84
21922 5618           50                         push	ax
21923                                           ! Debug: list int = const $40 (used reg = )
21924 5619           B8                   0040  mov	ax,*$40
21925 561C           50                         push	ax
21926                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21927 561D           E8         283F            call	_read_byte
21928 5620           83C4                   04  add	sp,*4
21929                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21930 5623           30E4                       xor	ah,ah
21931                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21932 5625           40                         inc	ax
21933 5626           8946         F6            mov	-$A[bp],ax
21934                                           !BCC_EOS
21935                                           ! 2586  nbcols=read_word(0x40,0x4A);
21936                                           ! Debug: list int = const $4A (used reg = )
21937 5629           B8                   004A  mov	ax,*$4A
21938 562C           50                         push	ax
21939                                           ! Debug: list int = const $40 (used reg = )
21940 562D           B8                   0040  mov	ax,*$40
21941 5630           50                         push	ax
21942                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21943 5631           E8         283E            call	_read_word
21944 5634           83C4                   04  add	sp,*4
21945                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21946 5637           8946         F8            mov	-8[bp],ax
21947                                           !BCC_EOS
21948                                           ! 2587  if(vga_modes[line].class==0x00)
21949                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
21950 563A           8A46         FB            mov	al,-5[bp]
21951 563D           30E4                       xor	ah,ah
21952 563F           B1                     03  mov	cl,*3
21953 5641           D3E0                       shl	ax,cl
21954 5643           89C3                       mov	bx,ax
21955 5645           81C3                 0225  add	bx,#_vga_modes
21956                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21957 5649           8A47         01            mov	al,1[bx]
21958 564C           84C0                       test	al,al
21959 564E           75           6A            jne 	.18D
21960                       00005650            .18E:
21961                                           ! 2588   {
21962                                           ! 2589    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21963                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21964 5650           8A46         FD            mov	al,-3[bp]
21965 5653           30E4                       xor	ah,ah
21966 5655           8B4E         F8            mov	cx,-8[bp]
21967 5658           F7E9                       imul	cx
21968                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21969                                           ! Debug: expression subtree swapping
21970 565A           0246         FE            add	al,-2[bp]
21971 565D           80D4                   00  adc	ah,*0
21972                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21973 5660           D1E0                       shl	ax,*1
21974 5662           50                         push	ax
21975                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21976 5663           8B46         F8            mov	ax,-8[bp]
21977 5666           8B4E         F6            mov	cx,-$A[bp]
21978 5669           F7E9                       imul	cx
21979                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21980 566B           D1E0                       shl	ax,*1
21981                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21982 566D           0C                     FF  or	al,#$FF
21983                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21984                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21985 566F           89C3                       mov	bx,ax
21986 5671           8A46         06            mov	al,6[bp]
21987 5674           30E4                       xor	ah,ah
21988 5676           93                         xchg	ax,bx
21989 5677           40                         inc	ax
21990 5678           89D9                       mov	cx,bx
21991 567A           F7E9                       imul	cx
21992                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21993 567C           0346         EE            add	ax,-$12[bp]
21994 567F           44                         inc	sp
21995 5680           44                         inc	sp
21996                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21997 5681           8946         F4            mov	-$C[bp],ax
21998                                           !BCC_EOS
21999                                           ! 2590    dummy=((Bit16u)attr<<8)+car;
22000                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22001 5684           8A46         08            mov	al,8[bp]
22002 5687           30E4                       xor	ah,ah
22003                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22004 5689           88C4                       mov	ah,al
22005 568B           30C0                       xor	al,al
22006                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22007 568D           0246         04            add	al,4[bp]
22008 5690           80D4                   00  adc	ah,*0
22009                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22010 5693           8946         F0            mov	-$10[bp],ax
22011                                           !BCC_EOS
22012                                           ! 2591    memsetw(vga_modes[line].sstart,address,dummy,count);
22013                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22014 5696           FF76         0A            push	$A[bp]
22015                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22016 5699           FF76         F0            push	-$10[bp]
22017                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22018 569C           FF76         F4            push	-$C[bp]
22019                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$12] struct  = vga_modes+0 (used reg = )
22020 569F           8A46         FB            mov	al,-5[bp]
22021 56A2           30E4                       xor	ah,ah
22022 56A4           B1                     03  mov	cl,*3
22023 56A6           D3E0                       shl	ax,cl
22024 56A8           89C3                       mov	bx,ax
22025 56AA           81C3                 0225  add	bx,#_vga_modes
22026                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22027 56AE           FF77         04            push	4[bx]
22028                                           ! Debug: func () void = memsetw+0 (used reg = )
22029 56B1           E8         2726            call	_memsetw
22030 56B4           83C4                   08  add	sp,*8
22031                                           !BCC_EOS
22032                                           ! 2592   }
22033                                           ! 2593  else
22034                                           ! 2594   {
22035 56B7           E9         00E7            br 	.18F
22036                       000056BA            .18D:
22037                                           ! 2595    cheight=read_byte(0x40,0x85);
22038                                           ! Debug: list int = const $85 (used reg = )
22039 56BA           B8                   0085  mov	ax,#$85
22040 56BD           50                         push	ax
22041                                           ! Debug: list int = const $40 (used reg = )
22042 56BE           B8                   0040  mov	ax,*$40
22043 56C1           50                         push	ax
22044                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22045 56C2           E8         279A            call	_read_byte
22046 56C5           83C4                   04  add	sp,*4
22047                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
22048 56C8           8846         FF            mov	-1[bp],al
22049                                           !BCC_EOS
22050                                           ! 2596    bpp=vga_modes[line].pixbits;
22051                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22052 56CB           8A46         FB            mov	al,-5[bp]
22053 56CE           30E4                       xor	ah,ah
22054 56D0           B1                     03  mov	cl,*3
22055 56D2           D3E0                       shl	ax,cl
22056 56D4           89C3                       mov	bx,ax
22057 56D6           81C3                 0225  add	bx,#_vga_modes
22058                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22059 56DA           8A47         03            mov	al,3[bx]
22060 56DD           8846         FA            mov	-6[bp],al
22061                                           !BCC_EOS
22062                                           ! 2597    while((count-->0) && (xcurs<nbcols))
22063                                           ! 2598     {
22064 56E0           E9         00A6            br 	.191
22065                       000056E3            .192:
22066                                           ! 2599      switch(vga_modes[line].memmodel)
22067                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22068 56E3           8A46         FB            mov	al,-5[bp]
22069 56E6           30E4                       xor	ah,ah
22070 56E8           B1                     03  mov	cl,*3
22071 56EA           D3E0                       shl	ax,cl
22072 56EC           89C3                       mov	bx,ax
22073 56EE           81C3                 0225  add	bx,#_vga_modes
22074 56F2           8A47         02            mov	al,2[bx]
22075                                           ! 2600       {
22076 56F5           EB           77            jmp .195
22077                                           ! 2601        case 0x04:
22078                                           ! 2602        case 0x03:
22079                       000056F7            .196:
22080                                           ! 2603          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22081                       000056F7            .197:
22082                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22083 56F7           8A46         FF            mov	al,-1[bp]
22084 56FA           30E4                       xor	ah,ah
22085 56FC           50                         push	ax
22086                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22087 56FD           FF76         F8            push	-8[bp]
22088                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22089 5700           8A46         FD            mov	al,-3[bp]
22090 5703           30E4                       xor	ah,ah
22091 5705           50                         push	ax
22092                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22093 5706           8A46         FE            mov	al,-2[bp]
22094 5709           30E4                       xor	ah,ah
22095 570B           50                         push	ax
22096                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22097 570C           8A46         08            mov	al,8[bp]
22098 570F           30E4                       xor	ah,ah
22099 5711           50                         push	ax
22100                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22101 5712           8A46         04            mov	al,4[bp]
22102 5715           30E4                       xor	ah,ah
22103 5717           50                         push	ax
22104                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22105 5718           E8         FA5A            call	_write_gfx_char_pl4
22106 571B           83C4                   0C  add	sp,*$C
22107                                           !BCC_EOS
22108                                           ! 2604          break;
22109 571E           EB           62            jmp .193
22110                                           !BCC_EOS
22111                                           ! 2605        case 0x02:
22112                                           ! 2606          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22113                       00005720            .198:
22114                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22115 5720           8A46         FA            mov	al,-6[bp]
22116 5723           30E4                       xor	ah,ah
22117 5725           50                         push	ax
22118                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22119 5726           FF76         F8            push	-8[bp]
22120                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22121 5729           8A46         FD            mov	al,-3[bp]
22122 572C           30E4                       xor	ah,ah
22123 572E           50                         push	ax
22124                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22125 572F           8A46         FE            mov	al,-2[bp]
22126 5732           30E4                       xor	ah,ah
22127 5734           50                         push	ax
22128                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22129 5735           8A46         08            mov	al,8[bp]
22130 5738           30E4                       xor	ah,ah
22131 573A           50                         push	ax
22132                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22133 573B           8A46         04            mov	al,4[bp]
22134 573E           30E4                       xor	ah,ah
22135 5740           50                         push	ax
22136                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22137 5741           E8         FBA4            call	_write_gfx_char_cga
22138 5744           83C4                   0C  add	sp,*$C
22139                                           !BCC_EOS
22140                                           ! 2607          break;
22141 5747           EB           39            jmp .193
22142                                           !BCC_EOS
22143                                           ! 2608        case 0x05:
22144                                           ! 2609          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22145                       00005749            .199:
22146                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22147 5749           FF76         F8            push	-8[bp]
22148                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22149 574C           8A46         FD            mov	al,-3[bp]
22150 574F           30E4                       xor	ah,ah
22151 5751           50                         push	ax
22152                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22153 5752           8A46         FE            mov	al,-2[bp]
22154 5755           30E4                       xor	ah,ah
22155 5757           50                         push	ax
22156                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22157 5758           8A46         08            mov	al,8[bp]
22158 575B           30E4                       xor	ah,ah
22159 575D           50                         push	ax
22160                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22161 575E           8A46         04            mov	al,4[bp]
22162 5761           30E4                       xor	ah,ah
22163 5763           50                         push	ax
22164                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22165 5764           E8         FD84            call	_write_gfx_char_lin
22166 5767           83C4                   0A  add	sp,*$A
22167                                           !BCC_EOS
22168                                           ! 2610          break;
22169 576A           EB           16            jmp .193
22170                                           !BCC_EOS
22171                                           ! 2611       }
22172                                           ! 2612      xcurs++;
22173 576C           EB           14            jmp .193
22174                       0000576E            .195:
22175 576E           2C                     02  sub	al,*2
22176 5770           74           AE            je 	.198
22177 5772           2C                     01  sub	al,*1
22178 5774         0F84         FF7F            beq 	.197
22179 5778           2C                     01  sub	al,*1
22180 577A         0F84         FF79            beq 	.196
22181 577E           2C                     01  sub	al,*1
22182 5780           74           C7            je 	.199
22183                       00005782            .193:
22184                       FFFFFFEE            ..FFFA	=	-$12
22185                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22186 5782           8A46         FE            mov	al,-2[bp]
22187 5785           40                         inc	ax
22188 5786           8846         FE            mov	-2[bp],al
22189                                           !BCC_EOS
22190                                           ! 2613     }
22191                                           ! 2614   }
22192                       00005789            .191:
22193                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22194 5789           8B46         0A            mov	ax,$A[bp]
22195 578C           48                         dec	ax
22196 578D           8946         0A            mov	$A[bp],ax
22197                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22198 5790           3D                   FFFF  cmp	ax,*-1
22199 5793           74           0C            je  	.19A
22200                       00005795            .19B:
22201                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22202 5795           8A46         FE            mov	al,-2[bp]
22203 5798           30E4                       xor	ah,ah
22204 579A           3B46         F8            cmp	ax,-8[bp]
22205 579D         0F82         FF42            blo 	.192
22206                       000057A1            .19A:
22207                       000057A1            .190:
22208                                           ! 2615 }
22209                       000057A1            .18F:
22210 57A1           89EC                       mov	sp,bp
22211 57A3           5D                         pop	bp
22212 57A4           C3                         ret
22213                                           ! 2616 static void biosfn_write_char_only (car,page,attr,count)
22214                                           ! Register BX used in function biosfn_write_char_attr
22215                                           ! 2617 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22216                       000057A5            _biosfn_write_char_only:
22217                                           !BCC_EOS
22218                                           !BCC_EOS
22219                                           !BCC_EOS
22220                                           !BCC_EOS
22221                                           ! 2618 {
22222                                           ! 2619  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22223                                           !BCC_EOS
22224                                           ! 2620  Bit16u nbcols,nbrows,address;
22225                                           !BCC_EOS
22226                                           ! 2621  Bit16u cursor,dummy;
22227                                           !BCC_EOS
22228                                           ! 2622  mode=read_byte(0x40,0x49);
22229 57A5           55                         push	bp
22230 57A6           89E5                       mov	bp,sp
22231 57A8           83C4                   F0  add	sp,*-$10
22232                                           ! Debug: list int = const $49 (used reg = )
22233 57AB           B8                   0049  mov	ax,*$49
22234 57AE           50                         push	ax
22235                                           ! Debug: list int = const $40 (used reg = )
22236 57AF           B8                   0040  mov	ax,*$40
22237 57B2           50                         push	ax
22238                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22239 57B3           E8         26A9            call	_read_byte
22240 57B6           83C4                   04  add	sp,*4
22241                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22242 57B9           8846         FC            mov	-4[bp],al
22243                                           !BCC_EOS
22244                                           ! 2623  line=find_vga_entry(mode);
22245                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22246 57BC           8A46         FC            mov	al,-4[bp]
22247 57BF           30E4                       xor	ah,ah
22248 57C1           50                         push	ax
22249                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22250 57C2           E8         25AE            call	_find_vga_entry
22251 57C5           44                         inc	sp
22252 57C6           44                         inc	sp
22253                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22254 57C7           8846         FB            mov	-5[bp],al
22255                                           !BCC_EOS
22256                                           ! 2624  if(line==0xFF)return;
22257                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22258 57CA           8A46         FB            mov	al,-5[bp]
22259 57CD           3C                     FF  cmp	al,#$FF
22260 57CF           75           04            jne 	.19C
22261                       000057D1            .19D:
22262 57D1           89EC                       mov	sp,bp
22263 57D3           5D                         pop	bp
22264 57D4           C3                         ret
22265                                           !BCC_EOS
22266                                           ! 2625  biosfn_get_cursor_pos(page,&dummy,&cursor);
22267                       000057D5            .19C:
22268                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22269 57D5           8D5E         F2            lea	bx,-$E[bp]
22270 57D8           53                         push	bx
22271                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22272 57D9           8D5E         F0            lea	bx,-$10[bp]
22273 57DC           53                         push	bx
22274                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22275 57DD           8A46         06            mov	al,6[bp]
22276 57E0           30E4                       xor	ah,ah
22277 57E2           50                         push	ax
22278                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22279 57E3           E8         ECA0            call	_biosfn_get_cursor_pos
22280 57E6           83C4                   06  add	sp,*6
22281                                           !BCC_EOS
22282                                           ! 2626  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22283                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22284 57E9           8A46         F2            mov	al,-$E[bp]
22285                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22286 57EC           8846         FE            mov	-2[bp],al
22287                                           !BCC_EOS
22288                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22289 57EF           8B46         F2            mov	ax,-$E[bp]
22290 57F2           30C0                       xor	al,al
22291                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22292 57F4           88E0                       mov	al,ah
22293 57F6           30E4                       xor	ah,ah
22294                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22295 57F8           8846         FD            mov	-3[bp],al
22296                                           !BCC_EOS
22297                                           ! 2627  nbrows=read_byte(0x40,0x84)+1;
22298                                           ! Debug: list int = const $84 (used reg = )
22299 57FB           B8                   0084  mov	ax,#$84
22300 57FE           50                         push	ax
22301                                           ! Debug: list int = const $40 (used reg = )
22302 57FF           B8                   0040  mov	ax,*$40
22303 5802           50                         push	ax
22304                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22305 5803           E8         2659            call	_read_byte
22306 5806           83C4                   04  add	sp,*4
22307                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22308 5809           30E4                       xor	ah,ah
22309                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22310 580B           40                         inc	ax
22311 580C           8946         F6            mov	-$A[bp],ax
22312                                           !BCC_EOS
22313                                           ! 2628  nbcols=read_word(0x40,0x4A);
22314                                           ! Debug: list int = const $4A (used reg = )
22315 580F           B8                   004A  mov	ax,*$4A
22316 5812           50                         push	ax
22317                                           ! Debug: list int = const $40 (used reg = )
22318 5813           B8                   0040  mov	ax,*$40
22319 5816           50                         push	ax
22320                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22321 5817           E8         2658            call	_read_word
22322 581A           83C4                   04  add	sp,*4
22323                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22324 581D           8946         F8            mov	-8[bp],ax
22325                                           !BCC_EOS
22326                                           ! 2629  if(vga_modes[line].class==0x00)
22327                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22328 5820           8A46         FB            mov	al,-5[bp]
22329 5823           30E4                       xor	ah,ah
22330 5825           B1                     03  mov	cl,*3
22331 5827           D3E0                       shl	ax,cl
22332 5829           89C3                       mov	bx,ax
22333 582B           81C3                 0225  add	bx,#_vga_modes
22334                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22335 582F           8A47         01            mov	al,1[bx]
22336 5832           84C0                       test	al,al
22337 5834           75           6E            jne 	.19E
22338                       00005836            .19F:
22339                                           ! 2630   {
22340                                           ! 2631    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22341                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22342 5836           8A46         FD            mov	al,-3[bp]
22343 5839           30E4                       xor	ah,ah
22344 583B           8B4E         F8            mov	cx,-8[bp]
22345 583E           F7E9                       imul	cx
22346                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22347                                           ! Debug: expression subtree swapping
22348 5840           0246         FE            add	al,-2[bp]
22349 5843           80D4                   00  adc	ah,*0
22350                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22351 5846           D1E0                       shl	ax,*1
22352 5848           50                         push	ax
22353                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22354 5849           8B46         F8            mov	ax,-8[bp]
22355 584C           8B4E         F6            mov	cx,-$A[bp]
22356 584F           F7E9                       imul	cx
22357                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22358 5851           D1E0                       shl	ax,*1
22359                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22360 5853           0C                     FF  or	al,#$FF
22361                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22362                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22363 5855           89C3                       mov	bx,ax
22364 5857           8A46         06            mov	al,6[bp]
22365 585A           30E4                       xor	ah,ah
22366 585C           93                         xchg	ax,bx
22367 585D           40                         inc	ax
22368 585E           89D9                       mov	cx,bx
22369 5860           F7E9                       imul	cx
22370                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22371 5862           0346         EE            add	ax,-$12[bp]
22372 5865           44                         inc	sp
22373 5866           44                         inc	sp
22374                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22375 5867           8946         F4            mov	-$C[bp],ax
22376                                           !BCC_EOS
22377                                           ! 2632    while(count-->0)
22378                                           ! 2633     {write_byte(vga_modes[li
22379 586A           EB           29            jmp .1A1
22380                       0000586C            .1A2:
22381                                           ! 2633 ne].sstart,address,car);
22382                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22383 586C           8A46         04            mov	al,4[bp]
22384 586F           30E4                       xor	ah,ah
22385 5871           50                         push	ax
22386                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22387 5872           FF76         F4            push	-$C[bp]
22388                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
22389 5875           8A46         FB            mov	al,-5[bp]
22390 5878           30E4                       xor	ah,ah
22391 587A           B1                     03  mov	cl,*3
22392 587C           D3E0                       shl	ax,cl
22393 587E           89C3                       mov	bx,ax
22394 5880           81C3                 0225  add	bx,#_vga_modes
22395                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22396 5884           FF77         04            push	4[bx]
22397                                           ! Debug: func () void = write_byte+0 (used reg = )
22398 5887           E8         25FB            call	_write_byte
22399 588A           83C4                   06  add	sp,*6
22400                                           !BCC_EOS
22401                                           ! 2634      address+=2;
22402                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22403 588D           8B46         F4            mov	ax,-$C[bp]
22404 5890           40                         inc	ax
22405 5891           40                         inc	ax
22406 5892           8946         F4            mov	-$C[bp],ax
22407                                           !BCC_EOS
22408                                           ! 2635     }
22409                                           ! 2636   }
22410                       00005895            .1A1:
22411                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22412 5895           8B46         0A            mov	ax,$A[bp]
22413 5898           48                         dec	ax
22414 5899           8946         0A            mov	$A[bp],ax
22415                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22416 589C           3D                   FFFF  cmp	ax,*-1
22417 589F           75           CB            jne	.1A2
22418                       000058A1            .1A3:
22419                       000058A1            .1A0:
22420                                           ! 2637  else
22421                                           ! 2638   {
22422 58A1           E9         00E7            br 	.1A4
22423                       000058A4            .19E:
22424                                           ! 2639    cheight=read_byte(0x40,0x85);
22425                                           ! Debug: list int = const $85 (used reg = )
22426 58A4           B8                   0085  mov	ax,#$85
22427 58A7           50                         push	ax
22428                                           ! Debug: list int = const $40 (used reg = )
22429 58A8           B8                   0040  mov	ax,*$40
22430 58AB           50                         push	ax
22431                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22432 58AC           E8         25B0            call	_read_byte
22433 58AF           83C4                   04  add	sp,*4
22434                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
22435 58B2           8846         FF            mov	-1[bp],al
22436                                           !BCC_EOS
22437                                           ! 2640    bpp=vga_modes[line].pixbits;
22438                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22439 58B5           8A46         FB            mov	al,-5[bp]
22440 58B8           30E4                       xor	ah,ah
22441 58BA           B1                     03  mov	cl,*3
22442 58BC           D3E0                       shl	ax,cl
22443 58BE           89C3                       mov	bx,ax
22444 58C0           81C3                 0225  add	bx,#_vga_modes
22445                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22446 58C4           8A47         03            mov	al,3[bx]
22447 58C7           8846         FA            mov	-6[bp],al
22448                                           !BCC_EOS
22449                                           ! 2641    while((count-->0) && (xcurs<nbcols))
22450                                           ! 2642     {
22451 58CA           E9         00A6            br 	.1A6
22452                       000058CD            .1A7:
22453                                           ! 2643      switch(vga_modes[line].memmodel)
22454                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
22455 58CD           8A46         FB            mov	al,-5[bp]
22456 58D0           30E4                       xor	ah,ah
22457 58D2           B1                     03  mov	cl,*3
22458 58D4           D3E0                       shl	ax,cl
22459 58D6           89C3                       mov	bx,ax
22460 58D8           81C3                 0225  add	bx,#_vga_modes
22461 58DC           8A47         02            mov	al,2[bx]
22462                                           ! 2644       {
22463 58DF           EB           77            jmp .1AA
22464                                           ! 2645        case 0x04:
22465                                           ! 2646        case 0x03:
22466                       000058E1            .1AB:
22467                                           ! 2647          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22468                       000058E1            .1AC:
22469                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22470 58E1           8A46         FF            mov	al,-1[bp]
22471 58E4           30E4                       xor	ah,ah
22472 58E6           50                         push	ax
22473                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22474 58E7           FF76         F8            push	-8[bp]
22475                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22476 58EA           8A46         FD            mov	al,-3[bp]
22477 58ED           30E4                       xor	ah,ah
22478 58EF           50                         push	ax
22479                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22480 58F0           8A46         FE            mov	al,-2[bp]
22481 58F3           30E4                       xor	ah,ah
22482 58F5           50                         push	ax
22483                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22484 58F6           8A46         08            mov	al,8[bp]
22485 58F9           30E4                       xor	ah,ah
22486 58FB           50                         push	ax
22487                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22488 58FC           8A46         04            mov	al,4[bp]
22489 58FF           30E4                       xor	ah,ah
22490 5901           50                         push	ax
22491                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22492 5902           E8         F870            call	_write_gfx_char_pl4
22493 5905           83C4                   0C  add	sp,*$C
22494                                           !BCC_EOS
22495                                           ! 2648          break;
22496 5908           EB           62            jmp .1A8
22497                                           !BCC_EOS
22498                                           ! 2649        case 0x02:
22499                                           ! 2650          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22500                       0000590A            .1AD:
22501                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22502 590A           8A46         FA            mov	al,-6[bp]
22503 590D           30E4                       xor	ah,ah
22504 590F           50                         push	ax
22505                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22506 5910           FF76         F8            push	-8[bp]
22507                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22508 5913           8A46         FD            mov	al,-3[bp]
22509 5916           30E4                       xor	ah,ah
22510 5918           50                         push	ax
22511                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22512 5919           8A46         FE            mov	al,-2[bp]
22513 591C           30E4                       xor	ah,ah
22514 591E           50                         push	ax
22515                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22516 591F           8A46         08            mov	al,8[bp]
22517 5922           30E4                       xor	ah,ah
22518 5924           50                         push	ax
22519                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22520 5925           8A46         04            mov	al,4[bp]
22521 5928           30E4                       xor	ah,ah
22522 592A           50                         push	ax
22523                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22524 592B           E8         F9BA            call	_write_gfx_char_cga
22525 592E           83C4                   0C  add	sp,*$C
22526                                           !BCC_EOS
22527                                           ! 2651          break;
22528 5931           EB           39            jmp .1A8
22529                                           !BCC_EOS
22530                                           ! 2652        case 0x05:
22531                                           ! 2653          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22532                       00005933            .1AE:
22533                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22534 5933           FF76         F8            push	-8[bp]
22535                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22536 5936           8A46         FD            mov	al,-3[bp]
22537 5939           30E4                       xor	ah,ah
22538 593B           50                         push	ax
22539                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22540 593C           8A46         FE            mov	al,-2[bp]
22541 593F           30E4                       xor	ah,ah
22542 5941           50                         push	ax
22543                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22544 5942           8A46         08            mov	al,8[bp]
22545 5945           30E4                       xor	ah,ah
22546 5947           50                         push	ax
22547                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22548 5948           8A46         04            mov	al,4[bp]
22549 594B           30E4                       xor	ah,ah
22550 594D           50                         push	ax
22551                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22552 594E           E8         FB9A            call	_write_gfx_char_lin
22553 5951           83C4                   0A  add	sp,*$A
22554                                           !BCC_EOS
22555                                           ! 2654          break;
22556 5954           EB           16            jmp .1A8
22557                                           !BCC_EOS
22558                                           ! 2655       }
22559                                           ! 2656      xcurs++;
22560 5956           EB           14            jmp .1A8
22561                       00005958            .1AA:
22562 5958           2C                     02  sub	al,*2
22563 595A           74           AE            je 	.1AD
22564 595C           2C                     01  sub	al,*1
22565 595E         0F84         FF7F            beq 	.1AC
22566 5962           2C                     01  sub	al,*1
22567 5964         0F84         FF79            beq 	.1AB
22568 5968           2C                     01  sub	al,*1
22569 596A           74           C7            je 	.1AE
22570                       0000596C            .1A8:
22571                       FFFFFFEE            ..FFF9	=	-$12
22572                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22573 596C           8A46         FE            mov	al,-2[bp]
22574 596F           40                         inc	ax
22575 5970           8846         FE            mov	-2[bp],al
22576                                           !BCC_EOS
22577                                           ! 2657     }
22578                                           ! 2658   }
22579                       00005973            .1A6:
22580                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22581 5973           8B46         0A            mov	ax,$A[bp]
22582 5976           48                         dec	ax
22583 5977           8946         0A            mov	$A[bp],ax
22584                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22585 597A           3D                   FFFF  cmp	ax,*-1
22586 597D           74           0C            je  	.1AF
22587                       0000597F            .1B0:
22588                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22589 597F           8A46         FE            mov	al,-2[bp]
22590 5982           30E4                       xor	ah,ah
22591 5984           3B46         F8            cmp	ax,-8[bp]
22592 5987         0F82         FF42            blo 	.1A7
22593                       0000598B            .1AF:
22594                       0000598B            .1A5:
22595                                           ! 2659 }
22596                       0000598B            .1A4:
22597 598B           89EC                       mov	sp,bp
22598 598D           5D                         pop	bp
22599 598E           C3                         ret
22600                                           ! 2660 #asm
22601                                           !BCC_ASM
22602                       00000008            _biosfn_write_char_only.count	set	8
22603                       00000006            _biosfn_write_char_only.attr	set	6
22604                       00000004            _biosfn_write_char_only.page	set	4
22605                       00000002            _biosfn_write_char_only.car	set	2
22606                       0000598F            biosfn_group_0B:
22607 598F           80FF                   00    cmp bh, #0x00
22608 5992           74           06              je biosfn_set_border_color
22609 5994           80FF                   01    cmp bh, #0x01
22610 5997           74           40              je biosfn_set_palette
22611 5999           C3                           ret
22612                       0000599A            biosfn_set_border_color:
22613 599A           50                           push ax
22614 599B           53                           push bx
22615 599C           51                           push cx
22616 599D           52                           push dx
22617 599E           BA                   03DA    mov dx, # 0x3da
22618 59A1           EC                           in al, dx
22619 59A2           BA                   03C0    mov dx, # 0x3c0
22620 59A5           B0                     00    mov al, #0x00
22621 59A7           EE                           out dx, al
22622 59A8           88D8                         mov al, bl
22623 59AA           24                     0F    and al, #0x0f
22624 59AC           A8                     08    test al, #0x08
22625 59AE           74           02              jz set_low_border
22626 59B0           04                     08    add al, #0x08
22627                       000059B2            set_low_border:
22628 59B2           EE                           out dx, al
22629 59B3           B1                     01    mov cl, #0x01
22630 59B5           80E3                   10    and bl, #0x10
22631                       000059B8            set_intensity_loop:
22632 59B8           BA                   03C0    mov dx, # 0x3c0
22633 59BB           88C8                         mov al, cl
22634 59BD           EE                           out dx, al
22635 59BE           BA                   03C1    mov dx, # 0x3c1
22636 59C1           EC                           in al, dx
22637 59C2           24                     EF    and al, #0xef
22638 59C4           08D8                         or al, bl
22639 59C6           BA                   03C0    mov dx, # 0x3c0
22640 59C9           EE                           out dx, al
22641 59CA           FEC1                         inc cl
22642 59CC           80F9                   04    cmp cl, #0x04
22643 59CF           75           E7              jne set_intensity_loop
22644 59D1           B0                     20    mov al, #0x20
22645 59D3           EE                           out dx, al
22646 59D4           5A                           pop dx
22647 59D5           59                           pop cx
22648 59D6           5B                           pop bx
22649 59D7           58                           pop ax
22650 59D8           C3                           ret
22651                       000059D9            biosfn_set_palette:
22652 59D9           50                           push ax
22653 59DA           53                           push bx
22654 59DB           51                           push cx
22655 59DC           52                           push dx
22656 59DD           BA                   03DA    mov dx, # 0x3da
22657 59E0           EC                           in al, dx
22658 59E1           B1                     01    mov cl, #0x01
22659 59E3           80E3                   01    and bl, #0x01
22660                       000059E6            set_cga_palette_loop:
22661 59E6           BA                   03C0    mov dx, # 0x3c0
22662 59E9           88C8                         mov al, cl
22663 59EB           EE                           out dx, al
22664 59EC           BA                   03C1    mov dx, # 0x3c1
22665 59EF           EC                           in al, dx
22666 59F0           24                     FE    and al, #0xfe
22667 59F2           08D8                         or al, bl
22668 59F4           BA                   03C0    mov dx, # 0x3c0
22669 59F7           EE                           out dx, al
22670 59F8           FEC1                         inc cl
22671 59FA           80F9                   04    cmp cl, #0x04
22672 59FD           75           E7              jne set_cga_palette_loop
22673 59FF           B0                     20    mov al, #0x20
22674 5A01           EE                           out dx, al
22675 5A02           5A                           pop dx
22676 5A03           59                           pop cx
22677 5A04           5B                           pop bx
22678 5A05           58                           pop ax
22679 5A06           C3                           ret
22680                                           ! 2735 endasm
22681                                           !BCC_ENDASM
22682                                           ! 2736 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22683                                           ! Register BX used in function biosfn_write_char_only
22684                       00005A07            _biosfn_write_pixel:
22685                                           !BCC_EOS
22686                                           !BCC_EOS
22687                                           !BCC_EOS
22688                                           !BCC_EOS
22689                                           ! 2737 {
22690                                           ! 2738  Bit8u mode,line,mask,attr,data;
22691                                           !BCC_EOS
22692                                           ! 2739  Bit16u addr;
22693                                           !BCC_EOS
22694                                           ! 2740  mode=read_byte(0x40,0x49);
22695 5A07           55                         push	bp
22696 5A08           89E5                       mov	bp,sp
22697 5A0A           83C4                   F8  add	sp,*-8
22698                                           ! Debug: list int = const $49 (used reg = )
22699 5A0D           B8                   0049  mov	ax,*$49
22700 5A10           50                         push	ax
22701                                           ! Debug: list int = const $40 (used reg = )
22702 5A11           B8                   0040  mov	ax,*$40
22703 5A14           50                         push	ax
22704                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22705 5A15           E8         2447            call	_read_byte
22706 5A18           83C4                   04  add	sp,*4
22707                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22708 5A1B           8846         FF            mov	-1[bp],al
22709                                           !BCC_EOS
22710                                           ! 2741  line=find_vga_entry(mode);
22711                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22712 5A1E           8A46         FF            mov	al,-1[bp]
22713 5A21           30E4                       xor	ah,ah
22714 5A23           50                         push	ax
22715                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22716 5A24           E8         234C            call	_find_vga_entry
22717 5A27           44                         inc	sp
22718 5A28           44                         inc	sp
22719                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22720 5A29           8846         FE            mov	-2[bp],al
22721                                           !BCC_EOS
22722                                           ! 2742  if(line==0xFF)return;
22723                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22724 5A2C           8A46         FE            mov	al,-2[bp]
22725 5A2F           3C                     FF  cmp	al,#$FF
22726 5A31           75           04            jne 	.1B1
22727                       00005A33            .1B2:
22728 5A33           89EC                       mov	sp,bp
22729 5A35           5D                         pop	bp
22730 5A36           C3                         ret
22731                                           !BCC_EOS
22732                                           ! 2743  if(vga_modes[line].class==0x00)return;
22733                       00005A37            .1B1:
22734                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22735 5A37           8A46         FE            mov	al,-2[bp]
22736 5A3A           30E4                       xor	ah,ah
22737 5A3C           B1                     03  mov	cl,*3
22738 5A3E           D3E0                       shl	ax,cl
22739 5A40           89C3                       mov	bx,ax
22740 5A42           81C3                 0225  add	bx,#_vga_modes
22741                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22742 5A46           8A47         01            mov	al,1[bx]
22743 5A49           84C0                       test	al,al
22744 5A4B           75           04            jne 	.1B3
22745                       00005A4D            .1B4:
22746 5A4D           89EC                       mov	sp,bp
22747 5A4F           5D                         pop	bp
22748 5A50           C3                         ret
22749                                           !BCC_EOS
22750                                           ! 2744  switch(vga_modes[line].memmodel)
22751                       00005A51            .1B3:
22752                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22753 5A51           8A46         FE            mov	al,-2[bp]
22754 5A54           30E4                       xor	ah,ah
22755 5A56           B1                     03  mov	cl,*3
22756 5A58           D3E0                       shl	ax,cl
22757 5A5A           89C3                       mov	bx,ax
22758 5A5C           81C3                 0225  add	bx,#_vga_modes
22759 5A60           8A47         02            mov	al,2[bx]
22760                                           ! 2745   {
22761 5A63           E9         0223            br 	.1B7
22762                                           ! 2746    case 0x04:
22763                                           ! 2747    case 0x03:
22764                       00005A66            .1B8:
22765                                           ! 2748      addr = CX/8+DX*read_word(0x40,0x4A);
22766                       00005A66            .1B9:
22767                                           ! Debug: list int = const $4A (used reg = )
22768 5A66           B8                   004A  mov	ax,*$4A
22769 5A69           50                         push	ax
22770                                           ! Debug: list int = const $40 (used reg = )
22771 5A6A           B8                   0040  mov	ax,*$40
22772 5A6D           50                         push	ax
22773                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22774 5A6E           E8         2401            call	_read_word
22775 5A71           83C4                   04  add	sp,*4
22776                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22777                                           ! Debug: expression subtree swapping
22778 5A74           8B4E         0A            mov	cx,$A[bp]
22779 5A77           F7E9                       imul	cx
22780 5A79           50                         push	ax
22781                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22782 5A7A           8B46         08            mov	ax,8[bp]
22783 5A7D           B1                     03  mov	cl,*3
22784 5A7F           D3E8                       shr	ax,cl
22785                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22786 5A81           0346         F6            add	ax,0+..FFF8[bp]
22787 5A84           44                         inc	sp
22788 5A85           44                         inc	sp
22789                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22790 5A86           8946         F8            mov	-8[bp],ax
22791                                           !BCC_EOS
22792                                           ! 2749      mask = 0x80 >> (CX & 0x07);
22793                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22794 5A89           8A46         08            mov	al,8[bp]
22795 5A8C           24                     07  and	al,*7
22796                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22797 5A8E           30E4                       xor	ah,ah
22798 5A90           89C3                       mov	bx,ax
22799 5A92           B8                   0080  mov	ax,#$80
22800 5A95           89D9                       mov	cx,bx
22801 5A97           D3F8                       sar	ax,cl
22802                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22803 5A99           8846         FD            mov	-3[bp],al
22804                                           !BCC_EOS
22805                                           ! 2750      outw(0x3ce,
22806                                           ! 2750  (mask << 8) | 0x08);
22807                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22808 5A9C           8A46         FD            mov	al,-3[bp]
22809 5A9F           30E4                       xor	ah,ah
22810 5AA1           88C4                       mov	ah,al
22811 5AA3           30C0                       xor	al,al
22812                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22813 5AA5           0C                     08  or	al,*8
22814                                           ! Debug: list unsigned int = ax+0 (used reg = )
22815 5AA7           50                         push	ax
22816                                           ! Debug: list int = const $3CE (used reg = )
22817 5AA8           B8                   03CE  mov	ax,#$3CE
22818 5AAB           50                         push	ax
22819                                           ! Debug: func () void = outw+0 (used reg = )
22820 5AAC           E8         242C            call	_outw
22821 5AAF           83C4                   04  add	sp,*4
22822                                           !BCC_EOS
22823                                           ! 2751      outw(0x3ce, 0x0205);
22824                                           ! Debug: list int = const $205 (used reg = )
22825 5AB2           B8                   0205  mov	ax,#$205
22826 5AB5           50                         push	ax
22827                                           ! Debug: list int = const $3CE (used reg = )
22828 5AB6           B8                   03CE  mov	ax,#$3CE
22829 5AB9           50                         push	ax
22830                                           ! Debug: func () void = outw+0 (used reg = )
22831 5ABA           E8         241E            call	_outw
22832 5ABD           83C4                   04  add	sp,*4
22833                                           !BCC_EOS
22834                                           ! 2752      data = read_byte(0xa000,addr);
22835                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22836 5AC0           FF76         F8            push	-8[bp]
22837                                           ! Debug: list unsigned int = const $A000 (used reg = )
22838 5AC3           B8                   A000  mov	ax,#$A000
22839 5AC6           50                         push	ax
22840                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22841 5AC7           E8         2395            call	_read_byte
22842 5ACA           83C4                   04  add	sp,*4
22843                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22844 5ACD           8846         FB            mov	-5[bp],al
22845                                           !BCC_EOS
22846                                           ! 2753      if (AL & 0x80)
22847                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22848 5AD0           8A46         06            mov	al,6[bp]
22849 5AD3           24                     80  and	al,#$80
22850 5AD5           84C0                       test	al,al
22851 5AD7           74           0E            je  	.1BA
22852                       00005AD9            .1BB:
22853                                           ! 2754       {
22854                                           ! 2755        outw(0x3ce, 0x1803);
22855                                           ! Debug: list int = const $1803 (used reg = )
22856 5AD9           B8                   1803  mov	ax,#$1803
22857 5ADC           50                         push	ax
22858                                           ! Debug: list int = const $3CE (used reg = )
22859 5ADD           B8                   03CE  mov	ax,#$3CE
22860 5AE0           50                         push	ax
22861                                           ! Debug: func () void = outw+0 (used reg = )
22862 5AE1           E8         23F7            call	_outw
22863 5AE4           83C4                   04  add	sp,*4
22864                                           !BCC_EOS
22865                                           ! 2756       }
22866                                           ! 2757      write_byte(0xa000,addr,AL);
22867                       00005AE7            .1BA:
22868                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22869 5AE7           8A46         06            mov	al,6[bp]
22870 5AEA           30E4                       xor	ah,ah
22871 5AEC           50                         push	ax
22872                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22873 5AED           FF76         F8            push	-8[bp]
22874                                           ! Debug: list unsigned int = const $A000 (used reg = )
22875 5AF0           B8                   A000  mov	ax,#$A000
22876 5AF3           50                         push	ax
22877                                           ! Debug: func () void = write_byte+0 (used reg = )
22878 5AF4           E8         238E            call	_write_byte
22879 5AF7           83C4                   06  add	sp,*6
22880                                           !BCC_EOS
22881                                           ! 2758 #asm
22882                                           !BCC_EOS
22883                                           !BCC_ASM
22884                       0000000C            _biosfn_write_pixel.BH	set	$C
22885                       00000004            .biosfn_write_pixel.BH	set	4
22886                       00000010            _biosfn_write_pixel.CX	set	$10
22887                       00000008            .biosfn_write_pixel.CX	set	8
22888                       00000006            _biosfn_write_pixel.line	set	6
22889                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22890                       0000000E            _biosfn_write_pixel.AL	set	$E
22891                       00000006            .biosfn_write_pixel.AL	set	6
22892                       00000003            _biosfn_write_pixel.data	set	3
22893                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22894                       00000012            _biosfn_write_pixel.DX	set	$12
22895                       0000000A            .biosfn_write_pixel.DX	set	$A
22896                       00000005            _biosfn_write_pixel.mask	set	5
22897                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22898                       00000004            _biosfn_write_pixel.attr	set	4
22899                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22900                       00000007            _biosfn_write_pixel.mode	set	7
22901                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22902                       00000000            _biosfn_write_pixel.addr	set	0
22903                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22904 5AFA           BA                   03CE       mov dx, # 0x3ce
22905 5AFD           B8                   FF08       mov ax, #0xff08
22906 5B00           EF                              out dx, ax
22907 5B01           B8                   0005       mov ax, #0x0005
22908 5B04           EF                              out dx, ax
22909 5B05           B8                   0003       mov ax, #0x0003
22910 5B08           EF                              out dx, ax
22911                                           ! 2766 endasm
22912                                           !BCC_ENDASM
22913                                           !BCC_EOS
22914                                           ! 2767      break;
22915 5B09           E9         0193            br 	.1B5
22916                                           !BCC_EOS
22917                                           ! 2768    case 0x02:
22918                                           ! 2769      if(vga_modes[line].pixbits==2)
22919                       00005B0C            .1BC:
22920                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
22921 5B0C           8A46         FE            mov	al,-2[bp]
22922 5B0F           30E4                       xor	ah,ah
22923 5B11           B1                     03  mov	cl,*3
22924 5B13           D3E0                       shl	ax,cl
22925 5B15           89C3                       mov	bx,ax
22926 5B17           81C3                 0225  add	bx,#_vga_modes
22927                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22928 5B1B           8A47         03            mov	al,3[bx]
22929 5B1E           3C                     02  cmp	al,*2
22930 5B20           75           1C            jne 	.1BD
22931                       00005B22            .1BE:
22932                                           ! 2770       {
22933                                           ! 2771        addr=(CX>>2)+(DX>>1)*80;
22934                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22935 5B22           8B46         0A            mov	ax,$A[bp]
22936 5B25           D1E8                       shr	ax,*1
22937                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22938 5B27           B9                   0050  mov	cx,*$50
22939 5B2A           F7E9                       imul	cx
22940 5B2C           50                         push	ax
22941                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22942 5B2D           8B46         08            mov	ax,8[bp]
22943 5B30           D1E8                       shr	ax,*1
22944 5B32           D1E8                       shr	ax,*1
22945                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22946 5B34           0346         F6            add	ax,0+..FFF8[bp]
22947 5B37           44                         inc	sp
22948 5B38           44                         inc	sp
22949                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22950 5B39           8946         F8            mov	-8[bp],ax
22951                                           !BCC_EOS
22952                                           ! 2772       }
22953                                           ! 2773      else
22954                                           ! 2774       {
22955 5B3C           EB           1A            jmp .1BF
22956                       00005B3E            .1BD:
22957                                           ! 2775        addr=(CX>>3)+(DX>>1)*80;
22958                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22959 5B3E           8B46         0A            mov	ax,$A[bp]
22960 5B41           D1E8                       shr	ax,*1
22961                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22962 5B43           B9                   0050  mov	cx,*$50
22963 5B46           F7E9                       imul	cx
22964 5B48           50                         push	ax
22965                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22966 5B49           8B46         08            mov	ax,8[bp]
22967 5B4C           B1                     03  mov	cl,*3
22968 5B4E           D3E8                       shr	ax,cl
22969                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22970 5B50           0346         F6            add	ax,0+..FFF8[bp]
22971 5B53           44                         inc	sp
22972 5B54           44                         inc	sp
22973                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22974 5B55           8946         F8            mov	-8[bp],ax
22975                                           !BCC_EOS
22976                                           ! 2776       }
22977                                           ! 2777      if (DX & 1) addr += 0x2000;
22978                       00005B58            .1BF:
22979                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22980 5B58           8A46         0A            mov	al,$A[bp]
22981 5B5B           24                     01  and	al,*1
22982 5B5D           84C0                       test	al,al
22983 5B5F           74           09            je  	.1C0
22984                       00005B61            .1C1:
22985                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22986 5B61           8B46         F8            mov	ax,-8[bp]
22987 5B64           05                   2000  add	ax,#$2000
22988 5B67           8946         F8            mov	-8[bp],ax
22989                                           !BCC_EOS
22990                                           ! 2778      data = read_byte(0xb800,addr);
22991                       00005B6A            .1C0:
22992                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22993 5B6A           FF76         F8            push	-8[bp]
22994                                           ! Debug: list unsigned int = const $B800 (used reg = )
22995 5B6D           B8                   B800  mov	ax,#$B800
22996 5B70           50                         push	ax
22997                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22998 5B71           E8         22EB            call	_read_byte
22999 5B74           83C4                   04  add	sp,*4
23000                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23001 5B77           8846         FB            mov	-5[bp],al
23002                                           !BCC_EOS
23003                                           ! 2779      if(vga_modes[line].pixbits==2)
23004                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$12] struct  = vga_modes+0 (used reg = )
23005 5B7A           8A46         FE            mov	al,-2[bp]
23006 5B7D           30E4                       xor	ah,ah
23007 5B7F           B1                     03  mov	cl,*3
23008 5B81           D3E0                       shl	ax,cl
23009 5B83           89C3                       mov	bx,ax
23010 5B85           81C3                 0225  add	bx,#_vga_modes
23011                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23012 5B89           8A47         03            mov	al,3[bx]
23013 5B8C           3C                     02  cmp	al,*2
23014 5B8E           75           46            jne 	.1C2
23015                       00005B90            .1C3:
23016                                           ! 2780       {
23017                                           ! 2781        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23018                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23019 5B90           8A46         08            mov	al,8[bp]
23020 5B93           24                     03  and	al,*3
23021                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23022 5B95           50                         push	ax
23023 5B96           B8                   0003  mov	ax,*3
23024 5B99           2A46         F6            sub	al,0+..FFF8[bp]
23025 5B9C           80DC                   00  sbb	ah,*0
23026 5B9F           44                         inc	sp
23027 5BA0           44                         inc	sp
23028                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23029 5BA1           D1E0                       shl	ax,*1
23030 5BA3           50                         push	ax
23031                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23032 5BA4           8A46         06            mov	al,6[bp]
23033 5BA7           24                     03  and	al,*3
23034                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23035 5BA9           30E4                       xor	ah,ah
23036 5BAB           8B4E         F6            mov	cx,0+..FFF8[bp]
23037 5BAE           D3E0                       shl	ax,cl
23038 5BB0           44                         inc	sp
23039 5BB1           44                         inc	sp
23040                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23041 5BB2           8846         FC            mov	-4[bp],al
23042                                           !BCC_EOS
23043                                           ! 2782        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23044                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23045 5BB5           8A46         08            mov	al,8[bp]
23046 5BB8           24                     03  and	al,*3
23047                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23048 5BBA           50                         push	ax
23049 5BBB           B8                   0003  mov	ax,*3
23050 5BBE           2A46         F6            sub	al,0+..FFF8[bp]
23051 5BC1           80DC                   00  sbb	ah,*0
23052 5BC4           44                         inc	sp
23053 5BC5           44                         inc	sp
23054                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23055 5BC6           D1E0                       shl	ax,*1
23056                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23057 5BC8           89C3                       mov	bx,ax
23058 5BCA           B8                   0003  mov	ax,*3
23059 5BCD           89D9                       mov	cx,bx
23060 5BCF           D3E0                       shl	ax,cl
23061                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23062 5BD1           8846         FD            mov	-3[bp],al
23063                                           !BCC_EOS
23064                                           ! 2783       }
23065                                           ! 2784      else
23066                                           ! 2785       {
23067 5BD4           EB           40            jmp .1C4
23068                       00005BD6            .1C2:
23069                                           ! 2786        attr = (AL & 0x01) << (7 - (CX & 0x07));
23070                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23071 5BD6           8A46         08            mov	al,8[bp]
23072 5BD9           24                     07  and	al,*7
23073                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23074 5BDB           50                         push	ax
23075 5BDC           B8                   0007  mov	ax,*7
23076 5BDF           2A46         F6            sub	al,0+..FFF8[bp]
23077 5BE2           80DC                   00  sbb	ah,*0
23078 5BE5           44                         inc	sp
23079 5BE6           44                         inc	sp
23080 5BE7           50                         push	ax
23081                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23082 5BE8           8A46         06            mov	al,6[bp]
23083 5BEB           24                     01  and	al,*1
23084                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23085 5BED           30E4                       xor	ah,ah
23086 5BEF           8B4E         F6            mov	cx,0+..FFF8[bp]
23087 5BF2           D3E0                       shl	ax,cl
23088 5BF4           44                         inc	sp
23089 5BF5           44                         inc	sp
23090                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23091 5BF6           8846         FC            mov	-4[bp],al
23092                                           !BCC_EOS
23093                                           ! 2787        mask = 0x01 << (7 - (CX & 0x07));
23094                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23095 5BF9           8A46         08            mov	al,8[bp]
23096 5BFC           24                     07  and	al,*7
23097                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23098 5BFE           50                         push	ax
23099 5BFF           B8                   0007  mov	ax,*7
23100 5C02           2A46         F6            sub	al,0+..FFF8[bp]
23101 5C05           80DC                   00  sbb	ah,*0
23102 5C08           44                         inc	sp
23103 5C09           44                         inc	sp
23104                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23105 5C0A           89C3                       mov	bx,ax
23106 5C0C           B8                   0001  mov	ax,*1
23107 5C0F           89D9                       mov	cx,bx
23108 5C11           D3E0                       shl	ax,cl
23109                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23110 5C13           8846         FD            mov	-3[bp],al
23111                                           !BCC_EOS
23112                                           ! 2788       }
23113                                           ! 2789      if (AL & 0x80)
23114                       00005C16            .1C4:
23115                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23116 5C16           8A46         06            mov	al,6[bp]
23117 5C19           24                     80  and	al,#$80
23118 5C1B           84C0                       test	al,al
23119 5C1D           74           0B            je  	.1C5
23120                       00005C1F            .1C6:
23121                                           ! 2790       {
23122                                           ! 2791        data ^= attr;
23123                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23124 5C1F           8A46         FB            mov	al,-5[bp]
23125 5C22           3246         FC            xor	al,-4[bp]
23126 5C25           8846         FB            mov	-5[bp],al
23127                                           !BCC_EOS
23128                                           ! 2792       }
23129                                           ! 2793      else
23130                                           ! 2794       {
23131 5C28           EB           16            jmp .1C7
23132                       00005C2A            .1C5:
23133                                           ! 2795        data &= ~mask;
23134                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23135 5C2A           8A46         FD            mov	al,-3[bp]
23136 5C2D           30E4                       xor	ah,ah
23137 5C2F           F7D0                       not	ax
23138                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23139 5C31           2246         FB            and	al,-5[bp]
23140 5C34           8846         FB            mov	-5[bp],al
23141                                           !BCC_EOS
23142                                           ! 2796        data |= attr;
23143                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23144 5C37           8A46         FB            mov	al,-5[bp]
23145 5C3A           0A46         FC            or	al,-4[bp]
23146 5C3D           8846         FB            mov	-5[bp],al
23147                                           !BCC_EOS
23148                                           ! 2797       }
23149                                           ! 2798      write_byte(0xb800,addr,data);
23150                       00005C40            .1C7:
23151                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23152 5C40           8A46         FB            mov	al,-5[bp]
23153 5C43           30E4                       xor	ah,ah
23154 5C45           50                         push	ax
23155                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23156 5C46           FF76         F8            push	-8[bp]
23157                                           ! Debug: list unsigned int = const $B800 (used reg = )
23158 5C49           B8                   B800  mov	ax,#$B800
23159 5C4C           50                         push	ax
23160                                           ! Debug: func () void = write_byte+0 (used reg = )
23161 5C4D           E8         2235            call	_write_byte
23162 5C50           83C4                   06  add	sp,*6
23163                                           !BCC_EOS
23164                                           ! 2799      break;
23165 5C53           EB           4A            jmp .1B5
23166                                           !BCC_EOS
23167                                           ! 2800    case 0x05:
23168                                           ! 2801      addr=CX+DX*(read_word(0x40,0x4A)*8);
23169                       00005C55            .1C8:
23170                                           ! Debug: list int = const $4A (used reg = )
23171 5C55           B8                   004A  mov	ax,*$4A
23172 5C58           50                         push	ax
23173                                           ! Debug: list int = const $40 (used reg = )
23174 5C59           B8                   0040  mov	ax,*$40
23175 5C5C           50                         push	ax
23176                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23177 5C5D           E8         2212            call	_read_word
23178 5C60           83C4                   04  add	sp,*4
23179                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23180 5C63           B1                     03  mov	cl,*3
23181 5C65           D3E0                       shl	ax,cl
23182                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23183                                           ! Debug: expression subtree swapping
23184 5C67           8B4E         0A            mov	cx,$A[bp]
23185 5C6A           F7E9                       imul	cx
23186                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23187                                           ! Debug: expression subtree swapping
23188 5C6C           0346         08            add	ax,8[bp]
23189                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23190 5C6F           8946         F8            mov	-8[bp],ax
23191                                           !BCC_EOS
23192                                           ! 2802      write_byte(0xa000,addr,AL);
23193                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23194 5C72           8A46         06            mov	al,6[bp]
23195 5C75           30E4                       xor	ah,ah
23196 5C77           50                         push	ax
23197                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23198 5C78           FF76         F8            push	-8[bp]
23199                                           ! Debug: list unsigned int = const $A000 (used reg = )
23200 5C7B           B8                   A000  mov	ax,#$A000
23201 5C7E           50                         push	ax
23202                                           ! Debug: func () void = write_byte+0 (used reg = )
23203 5C7F           E8         2203            call	_write_byte
23204 5C82           83C4                   06  add	sp,*6
23205                                           !BCC_EOS
23206                                           ! 2803      break;
23207 5C85           EB           18            jmp .1B5
23208                                           !BCC_EOS
23209                                           ! 2804   }
23210                                           ! 2805 }
23211 5C87           EB           16            jmp .1B5
23212                       00005C89            .1B7:
23213 5C89           2C                     02  sub	al,*2
23214 5C8B         0F84         FE7D            beq 	.1BC
23215 5C8F           2C                     01  sub	al,*1
23216 5C91         0F84         FDD1            beq 	.1B9
23217 5C95           2C                     01  sub	al,*1
23218 5C97         0F84         FDCB            beq 	.1B8
23219 5C9B           2C                     01  sub	al,*1
23220 5C9D           74           B6            je 	.1C8
23221                       00005C9F            .1B5:
23222                       FFFFFFF6            ..FFF8	=	-$A
23223 5C9F           89EC                       mov	sp,bp
23224 5CA1           5D                         pop	bp
23225 5CA2           C3                         ret
23226                                           ! 2806 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23227                                           ! Register BX used in function biosfn_write_pixel
23228                       00005CA3            _biosfn_read_pixel:
23229                                           !BCC_EOS
23230                                           !BCC_EOS
23231                                           !BCC_EOS
23232                                           !BCC_EOS
23233                                           ! 2807 {
23234                                           ! 2808  Bit8u mode,line,mask,attr,data,i;
23235                                           !BCC_EOS
23236                                           ! 2809  Bit16u addr;
23237                                           !BCC_EOS
23238                                           ! 2810  Bit16u ss=get_SS();
23239 5CA3           55                         push	bp
23240 5CA4           89E5                       mov	bp,sp
23241 5CA6           83C4                   F6  add	sp,*-$A
23242                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23243 5CA9           E8         223F            call	_get_SS
23244                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23245 5CAC           8946         F6            mov	-$A[bp],ax
23246                                           !BCC_EOS
23247                                           ! 2811  mode=read_byte(0x40,0x49);
23248                                           ! Debug: list int = const $49 (used reg = )
23249 5CAF           B8                   0049  mov	ax,*$49
23250 5CB2           50                         push	ax
23251                                           ! Debug: list int = const $40 (used reg = )
23252 5CB3           B8                   0040  mov	ax,*$40
23253 5CB6           50                         push	ax
23254                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23255 5CB7           E8         21A5            call	_read_byte
23256 5CBA           83C4                   04  add	sp,*4
23257                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23258 5CBD           8846         FF            mov	-1[bp],al
23259                                           !BCC_EOS
23260                                           ! 2812  line=find_vga_entry(mode);
23261                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23262 5CC0           8A46         FF            mov	al,-1[bp]
23263 5CC3           30E4                       xor	ah,ah
23264 5CC5           50                         push	ax
23265                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23266 5CC6           E8         20AA            call	_find_vga_entry
23267 5CC9           44                         inc	sp
23268 5CCA           44                         inc	sp
23269                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23270 5CCB           8846         FE            mov	-2[bp],al
23271                                           !BCC_EOS
23272                                           ! 2813  if(line==0xFF)return;
23273                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23274 5CCE           8A46         FE            mov	al,-2[bp]
23275 5CD1           3C                     FF  cmp	al,#$FF
23276 5CD3           75           04            jne 	.1C9
23277                       00005CD5            .1CA:
23278 5CD5           89EC                       mov	sp,bp
23279 5CD7           5D                         pop	bp
23280 5CD8           C3                         ret
23281                                           !BCC_EOS
23282                                           ! 2814  if(vga_modes[line].class==0x00)return;
23283                       00005CD9            .1C9:
23284                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
23285 5CD9           8A46         FE            mov	al,-2[bp]
23286 5CDC           30E4                       xor	ah,ah
23287 5CDE           B1                     03  mov	cl,*3
23288 5CE0           D3E0                       shl	ax,cl
23289 5CE2           89C3                       mov	bx,ax
23290 5CE4           81C3                 0225  add	bx,#_vga_modes
23291                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23292 5CE8           8A47         01            mov	al,1[bx]
23293 5CEB           84C0                       test	al,al
23294 5CED           75           04            jne 	.1CB
23295                       00005CEF            .1CC:
23296 5CEF           89EC                       mov	sp,bp
23297 5CF1           5D                         pop	bp
23298 5CF2           C3                         ret
23299                                           !BCC_EOS
23300                                           ! 2815  switch(vga_modes[line].memmodel)
23301                       00005CF3            .1CB:
23302                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
23303 5CF3           8A46         FE            mov	al,-2[bp]
23304 5CF6           30E4                       xor	ah,ah
23305 5CF8           B1                     03  mov	cl,*3
23306 5CFA           D3E0                       shl	ax,cl
23307 5CFC           89C3                       mov	bx,ax
23308 5CFE           81C3                 0225  add	bx,#_vga_modes
23309 5D02           8A47         02            mov	al,2[bx]
23310                                           ! 2816   {
23311 5D05           E9         0167            br 	.1CF
23312                                           ! 2817    case 0x04:
23313                                           ! 2818    case 0x03:
23314                       00005D08            .1D0:
23315                                           ! 2819      addr = CX/8+DX*read_word(0x40,0x4A);
23316                       00005D08            .1D1:
23317                                           ! Debug: list int = const $4A (used reg = )
23318 5D08           B8                   004A  mov	ax,*$4A
23319 5D0B           50                         push	ax
23320                                           ! Debug: list int = const $40 (used reg = )
23321 5D0C           B8                   0040  mov	ax,*$40
23322 5D0F           50                         push	ax
23323                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23324 5D10           E8         215F            call	_read_word
23325 5D13           83C4                   04  add	sp,*4
23326                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23327                                           ! Debug: expression subtree swapping
23328 5D16           8B4E         08            mov	cx,8[bp]
23329 5D19           F7E9                       imul	cx
23330 5D1B           50                         push	ax
23331                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23332 5D1C           8B46         06            mov	ax,6[bp]
23333 5D1F           B1                     03  mov	cl,*3
23334 5D21           D3E8                       shr	ax,cl
23335                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23336 5D23           0346         F4            add	ax,0+..FFF7[bp]
23337 5D26           44                         inc	sp
23338 5D27           44                         inc	sp
23339                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23340 5D28           8946         F8            mov	-8[bp],ax
23341                                           !BCC_EOS
23342                                           ! 2820      mask = 0x80 >> (CX & 0x07);
23343                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23344 5D2B           8A46         06            mov	al,6[bp]
23345 5D2E           24                     07  and	al,*7
23346                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23347 5D30           30E4                       xor	ah,ah
23348 5D32           89C3                       mov	bx,ax
23349 5D34           B8                   0080  mov	ax,#$80
23350 5D37           89D9                       mov	cx,bx
23351 5D39           D3F8                       sar	ax,cl
23352                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23353 5D3B           8846         FD            mov	-3[bp],al
23354                                           !BCC_EOS
23355                                           ! 2821      attr = 0x00;
23356                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23357 5D3E           30C0                       xor	al,al
23358 5D40           8846         FC            mov	-4[bp],al
23359                                           !BCC_EOS
23360                                           ! 2822      for(i=0;i<4;i++)
23361                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23362 5D43           30C0                       xor	al,al
23363 5D45           8846         FA            mov	-6[bp],al
23364                                           !BCC_EOS
23365                                           !BCC_EOS
23366                                           ! 2823       {
23367 5D48           EB           4B            jmp .1D4
23368                       00005D4A            .1D5:
23369                                           ! 2824        outw(0x3ce, (i << 8) | 0x04);
23370                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23371 5D4A           8A46         FA            mov	al,-6[bp]
23372 5D4D           30E4                       xor	ah,ah
23373 5D4F           88C4                       mov	ah,al
23374 5D51           30C0                       xor	al,al
23375                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23376 5D53           0C                     04  or	al,*4
23377                                           ! Debug: list unsigned int = ax+0 (used reg = )
23378 5D55           50                         push	ax
23379                                           ! Debug: list int = const $3CE (used reg = )
23380 5D56           B8                   03CE  mov	ax,#$3CE
23381 5D59           50                         push	ax
23382                                           ! Debug: func () void = outw+0 (used reg = )
23383 5D5A           E8         217E            call	_outw
23384 5D5D           83C4                   04  add	sp,*4
23385                                           !BCC_EOS
23386                                           ! 2825        data = read_byte(0xa000,addr) & mask;
23387                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23388 5D60           FF76         F8            push	-8[bp]
23389                                           ! Debug: list unsigned int = const $A000 (used reg = )
23390 5D63           B8                   A000  mov	ax,#$A000
23391 5D66           50                         push	ax
23392                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23393 5D67           E8         20F5            call	_read_byte
23394 5D6A           83C4                   04  add	sp,*4
23395                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23396 5D6D           2246         FD            and	al,-3[bp]
23397                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23398 5D70           8846         FB            mov	-5[bp],al
23399                                           !BCC_EOS
23400                                           ! 2826        if (data > 0) attr |= (0x01 << i);
23401                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23402 5D73           8A46         FB            mov	al,-5[bp]
23403 5D76           84C0                       test	al,al
23404 5D78           74           14            je  	.1D6
23405                       00005D7A            .1D7:
23406                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23407 5D7A           8A46         FA            mov	al,-6[bp]
23408 5D7D           30E4                       xor	ah,ah
23409 5D7F           89C3                       mov	bx,ax
23410 5D81           B8                   0001  mov	ax,*1
23411 5D84           89D9                       mov	cx,bx
23412 5D86           D3E0                       shl	ax,cl
23413                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23414 5D88           0A46         FC            or	al,-4[bp]
23415 5D8B           8846         FC            mov	-4[bp],al
23416                                           !BCC_EOS
23417                                           ! 2827       }
23418                       00005D8E            .1D6:
23419                                           ! 2828      break;
23420                       00005D8E            .1D3:
23421                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23422 5D8E           8A46         FA            mov	al,-6[bp]
23423 5D91           40                         inc	ax
23424 5D92           8846         FA            mov	-6[bp],al
23425                       00005D95            .1D4:
23426                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23427 5D95           8A46         FA            mov	al,-6[bp]
23428 5D98           3C                     04  cmp	al,*4
23429 5D9A           72           AE            jb 	.1D5
23430                       00005D9C            .1D8:
23431                       00005D9C            .1D2:
23432 5D9C           E9         00E8            br 	.1CD
23433                                           !BCC_EOS
23434                                           ! 2829    case 0x02:
23435                                           ! 2830      addr=(CX>>2)+(DX>>1)*80;
23436                       00005D9F            .1D9:
23437                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23438 5D9F           8B46         08            mov	ax,8[bp]
23439 5DA2           D1E8                       shr	ax,*1
23440                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23441 5DA4           B9                   0050  mov	cx,*$50
23442 5DA7           F7E9                       imul	cx
23443 5DA9           50                         push	ax
23444                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23445 5DAA           8B46         06            mov	ax,6[bp]
23446 5DAD           D1E8                       shr	ax,*1
23447 5DAF           D1E8                       shr	ax,*1
23448                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23449 5DB1           0346         F4            add	ax,0+..FFF7[bp]
23450 5DB4           44                         inc	sp
23451 5DB5           44                         inc	sp
23452                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23453 5DB6           8946         F8            mov	-8[bp],ax
23454                                           !BCC_EOS
23455                                           ! 2831      if (DX & 1) addr += 0x2000;
23456                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23457 5DB9           8A46         08            mov	al,8[bp]
23458 5DBC           24                     01  and	al,*1
23459 5DBE           84C0                       test	al,al
23460 5DC0           74           09            je  	.1DA
23461                       00005DC2            .1DB:
23462                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23463 5DC2           8B46         F8            mov	ax,-8[bp]
23464 5DC5           05                   2000  add	ax,#$2000
23465 5DC8           8946         F8            mov	-8[bp],ax
23466                                           !BCC_EOS
23467                                           ! 2832      data = read_byte(0xb800,addr);
23468                       00005DCB            .1DA:
23469                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23470 5DCB           FF76         F8            push	-8[bp]
23471                                           ! Debug: list unsigned int = const $B800 (used reg = )
23472 5DCE           B8                   B800  mov	ax,#$B800
23473 5DD1           50                         push	ax
23474                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23475 5DD2           E8         208A            call	_read_byte
23476 5DD5           83C4                   04  add	sp,*4
23477                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23478 5DD8           8846         FB            mov	-5[bp],al
23479                                           !BCC_EOS
23480                                           ! 2833      if(vga_modes[line].pixbits==2)
23481                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$12] struct  = vga_modes+0 (used reg = )
23482 5DDB           8A46         FE            mov	al,-2[bp]
23483 5DDE           30E4                       xor	ah,ah
23484 5DE0           B1                     03  mov	cl,*3
23485 5DE2           D3E0                       shl	ax,cl
23486 5DE4           89C3                       mov	bx,ax
23487 5DE6           81C3                 0225  add	bx,#_vga_modes
23488                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23489 5DEA           8A47         03            mov	al,3[bx]
23490 5DED           3C                     02  cmp	al,*2
23491 5DEF           75           25            jne 	.1DC
23492                       00005DF1            .1DD:
23493                                           ! 2834       {
23494                                           ! 2835        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23495                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23496 5DF1           8A46         06            mov	al,6[bp]
23497 5DF4           24                     03  and	al,*3
23498                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23499 5DF6           50                         push	ax
23500 5DF7           B8                   0003  mov	ax,*3
23501 5DFA           2A46         F4            sub	al,0+..FFF7[bp]
23502 5DFD           80DC                   00  sbb	ah,*0
23503 5E00           44                         inc	sp
23504 5E01           44                         inc	sp
23505                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23506 5E02           D1E0                       shl	ax,*1
23507                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23508 5E04           89C3                       mov	bx,ax
23509 5E06           8A46         FB            mov	al,-5[bp]
23510 5E09           30E4                       xor	ah,ah
23511 5E0B           89D9                       mov	cx,bx
23512 5E0D           D3E8                       shr	ax,cl
23513                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23514 5E0F           24                     03  and	al,*3
23515                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23516 5E11           8846         FC            mov	-4[bp],al
23517                                           !BCC_EOS
23518                                           ! 2836       }
23519                                           ! 2837      else
23520                                           ! 2838       {
23521 5E14           EB           21            jmp .1DE
23522                       00005E16            .1DC:
23523                                           ! 2839        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23524                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23525 5E16           8A46         06            mov	al,6[bp]
23526 5E19           24                     07  and	al,*7
23527                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23528 5E1B           50                         push	ax
23529 5E1C           B8                   0007  mov	ax,*7
23530 5E1F           2A46         F4            sub	al,0+..FFF7[bp]
23531 5E22           80DC                   00  sbb	ah,*0
23532 5E25           44                         inc	sp
23533 5E26           44                         inc	sp
23534                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23535 5E27           89C3                       mov	bx,ax
23536 5E29           8A46         FB            mov	al,-5[bp]
23537 5E2C           30E4                       xor	ah,ah
23538 5E2E           89D9                       mov	cx,bx
23539 5E30           D3E8                       shr	ax,cl
23540                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23541 5E32           24                     01  and	al,*1
23542                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23543 5E34           8846         FC            mov	-4[bp],al
23544                                           !BCC_EOS
23545                                           ! 2840       }
23546                                           ! 2841      break;
23547                       00005E37            .1DE:
23548 5E37           EB           4E            jmp .1CD
23549                                           !BCC_EOS
23550                                           ! 2842    case 0x05:
23551                                           ! 2843      
23552                                           ! 2843 addr=CX+DX*(read_word(0x40,0x4A)*8);
23553                       00005E39            .1DF:
23554                                           ! Debug: list int = const $4A (used reg = )
23555 5E39           B8                   004A  mov	ax,*$4A
23556 5E3C           50                         push	ax
23557                                           ! Debug: list int = const $40 (used reg = )
23558 5E3D           B8                   0040  mov	ax,*$40
23559 5E40           50                         push	ax
23560                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23561 5E41           E8         202E            call	_read_word
23562 5E44           83C4                   04  add	sp,*4
23563                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23564 5E47           B1                     03  mov	cl,*3
23565 5E49           D3E0                       shl	ax,cl
23566                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23567                                           ! Debug: expression subtree swapping
23568 5E4B           8B4E         08            mov	cx,8[bp]
23569 5E4E           F7E9                       imul	cx
23570                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23571                                           ! Debug: expression subtree swapping
23572 5E50           0346         06            add	ax,6[bp]
23573                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23574 5E53           8946         F8            mov	-8[bp],ax
23575                                           !BCC_EOS
23576                                           ! 2844      attr=read_byte(0xa000,addr);
23577                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23578 5E56           FF76         F8            push	-8[bp]
23579                                           ! Debug: list unsigned int = const $A000 (used reg = )
23580 5E59           B8                   A000  mov	ax,#$A000
23581 5E5C           50                         push	ax
23582                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23583 5E5D           E8         1FFF            call	_read_byte
23584 5E60           83C4                   04  add	sp,*4
23585                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23586 5E63           8846         FC            mov	-4[bp],al
23587                                           !BCC_EOS
23588                                           ! 2845      break;
23589 5E66           EB           1F            jmp .1CD
23590                                           !BCC_EOS
23591                                           ! 2846    default:
23592                                           ! 2847      attr = 0;
23593                       00005E68            .1E0:
23594                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23595 5E68           30C0                       xor	al,al
23596 5E6A           8846         FC            mov	-4[bp],al
23597                                           !BCC_EOS
23598                                           ! 2848   }
23599                                           ! 2849  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23600 5E6D           EB           18            jmp .1CD
23601                       00005E6F            .1CF:
23602 5E6F           2C                     02  sub	al,*2
23603 5E71         0F84         FF2A            beq 	.1D9
23604 5E75           2C                     01  sub	al,*1
23605 5E77         0F84         FE8D            beq 	.1D1
23606 5E7B           2C                     01  sub	al,*1
23607 5E7D         0F84         FE87            beq 	.1D0
23608 5E81           2C                     01  sub	al,*1
23609 5E83           74           B4            je 	.1DF
23610 5E85           EB           E1            jmp	.1E0
23611                       00005E87            .1CD:
23612                       FFFFFFF4            ..FFF7	=	-$C
23613                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23614 5E87           FF76         0A            push	$A[bp]
23615                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23616 5E8A           FF76         F6            push	-$A[bp]
23617                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23618 5E8D           E8         1FE2            call	_read_word
23619 5E90           83C4                   04  add	sp,*4
23620                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23621 5E93           30C0                       xor	al,al
23622                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23623 5E95           0A46         FC            or	al,-4[bp]
23624                                           ! Debug: list unsigned int = ax+0 (used reg = )
23625 5E98           50                         push	ax
23626                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23627 5E99           FF76         0A            push	$A[bp]
23628                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23629 5E9C           FF76         F6            push	-$A[bp]
23630                                           ! Debug: func () void = write_word+0 (used reg = )
23631 5E9F           E8         1FFB            call	_write_word
23632 5EA2           83C4                   06  add	sp,*6
23633                                           !BCC_EOS
23634                                           ! 2850 }
23635 5EA5           89EC                       mov	sp,bp
23636 5EA7           5D                         pop	bp
23637 5EA8           C3                         ret
23638                                           ! 2851 static void biosfn_write_teletype (car, page, attr, flag)
23639                                           ! Register BX used in function biosfn_read_pixel
23640                                           ! 2852 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23641                       00005EA9            _biosfn_write_teletype:
23642                                           !BCC_EOS
23643                                           !BCC_EOS
23644                                           !BCC_EOS
23645                                           !BCC_EOS
23646                                           ! 2853 {
23647                                           ! 2854  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23648                                           !BCC_EOS
23649                                           ! 2855  Bit16u nbcols,nbrows,address;
23650                                           !BCC_EOS
23651                                           ! 2856  Bit16u cursor,dummy;
23652                                           !BCC_EOS
23653                                           ! 2857  if(page==0xff)
23654 5EA9           55                         push	bp
23655 5EAA           89E5                       mov	bp,sp
23656 5EAC           83C4                   F0  add	sp,*-$10
23657                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23658 5EAF           8A46         06            mov	al,6[bp]
23659 5EB2           3C                     FF  cmp	al,#$FF
23660 5EB4           75           11            jne 	.1E1
23661                       00005EB6            .1E2:
23662                                           ! 2858   page=read_byte(0x40,0x62);
23663                                           ! Debug: list int = const $62 (used reg = )
23664 5EB6           B8                   0062  mov	ax,*$62
23665 5EB9           50                         push	ax
23666                                           ! Debug: list int = const $40 (used reg = )
23667 5EBA           B8                   0040  mov	ax,*$40
23668 5EBD           50                         push	ax
23669                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23670 5EBE           E8         1F9E            call	_read_byte
23671 5EC1           83C4                   04  add	sp,*4
23672                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23673 5EC4           8846         06            mov	6[bp],al
23674                                           !BCC_EOS
23675                                           ! 2859  mode=read_byte(0x40,0x49);
23676                       00005EC7            .1E1:
23677                                           ! Debug: list int = const $49 (used reg = )
23678 5EC7           B8                   0049  mov	ax,*$49
23679 5ECA           50                         push	ax
23680                                           ! Debug: list int = const $40 (used reg = )
23681 5ECB           B8                   0040  mov	ax,*$40
23682 5ECE           50                         push	ax
23683                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23684 5ECF           E8         1F8D            call	_read_byte
23685 5ED2           83C4                   04  add	sp,*4
23686                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23687 5ED5           8846         FC            mov	-4[bp],al
23688                                           !BCC_EOS
23689                                           ! 2860  line=find_vga_entry(mode);
23690                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23691 5ED8           8A46         FC            mov	al,-4[bp]
23692 5EDB           30E4                       xor	ah,ah
23693 5EDD           50                         push	ax
23694                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23695 5EDE           E8         1E92            call	_find_vga_entry
23696 5EE1           44                         inc	sp
23697 5EE2           44                         inc	sp
23698                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23699 5EE3           8846         FB            mov	-5[bp],al
23700                                           !BCC_EOS
23701                                           ! 2861  if(line==0xFF)return;
23702                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23703 5EE6           8A46         FB            mov	al,-5[bp]
23704 5EE9           3C                     FF  cmp	al,#$FF
23705 5EEB           75           04            jne 	.1E3
23706                       00005EED            .1E4:
23707 5EED           89EC                       mov	sp,bp
23708 5EEF           5D                         pop	bp
23709 5EF0           C3                         ret
23710                                           !BCC_EOS
23711                                           ! 2862  biosfn_get_cursor_pos(page,&dummy,&cursor);
23712                       00005EF1            .1E3:
23713                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23714 5EF1           8D5E         F2            lea	bx,-$E[bp]
23715 5EF4           53                         push	bx
23716                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23717 5EF5           8D5E         F0            lea	bx,-$10[bp]
23718 5EF8           53                         push	bx
23719                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23720 5EF9           8A46         06            mov	al,6[bp]
23721 5EFC           30E4                       xor	ah,ah
23722 5EFE           50                         push	ax
23723                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23724 5EFF           E8         E584            call	_biosfn_get_cursor_pos
23725 5F02           83C4                   06  add	sp,*6
23726                                           !BCC_EOS
23727                                           ! 2863  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23728                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23729 5F05           8A46         F2            mov	al,-$E[bp]
23730                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23731 5F08           8846         FE            mov	-2[bp],al
23732                                           !BCC_EOS
23733                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23734 5F0B           8B46         F2            mov	ax,-$E[bp]
23735 5F0E           30C0                       xor	al,al
23736                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23737 5F10           88E0                       mov	al,ah
23738 5F12           30E4                       xor	ah,ah
23739                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23740 5F14           8846         FD            mov	-3[bp],al
23741                                           !BCC_EOS
23742                                           ! 2864  nbrows=read_byte(0x40,0x84)+1;
23743                                           ! Debug: list int = const $84 (used reg = )
23744 5F17           B8                   0084  mov	ax,#$84
23745 5F1A           50                         push	ax
23746                                           ! Debug: list int = const $40 (used reg = )
23747 5F1B           B8                   0040  mov	ax,*$40
23748 5F1E           50                         push	ax
23749                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23750 5F1F           E8         1F3D            call	_read_byte
23751 5F22           83C4                   04  add	sp,*4
23752                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23753 5F25           30E4                       xor	ah,ah
23754                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23755 5F27           40                         inc	ax
23756 5F28           8946         F6            mov	-$A[bp],ax
23757                                           !BCC_EOS
23758                                           ! 2865  nbcols=read_word(0x40,0x4A);
23759                                           ! Debug: list int = const $4A (used reg = )
23760 5F2B           B8                   004A  mov	ax,*$4A
23761 5F2E           50                         push	ax
23762                                           ! Debug: list int = const $40 (used reg = )
23763 5F2F           B8                   0040  mov	ax,*$40
23764 5F32           50                         push	ax
23765                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23766 5F33           E8         1F3C            call	_read_word
23767 5F36           83C4                   04  add	sp,*4
23768                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23769 5F39           8946         F8            mov	-8[bp],ax
23770                                           !BCC_EOS
23771                                           ! 2866  switch(car)
23772 5F3C           8A46         04            mov	al,4[bp]
23773                                           ! 2867   {
23774 5F3F           E9         01DE            br 	.1E7
23775                                           ! 2868    case 7:
23776                                           ! 2869     break;
23777                       00005F42            .1E8:
23778 5F42           E9         01FC            br 	.1E5
23779                                           !BCC_EOS
23780                                           ! 2870    case 8:
23781                                           ! 2871     if(xcurs>0)xcurs--;
23782                       00005F45            .1E9:
23783                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23784 5F45           8A46         FE            mov	al,-2[bp]
23785 5F48           84C0                       test	al,al
23786 5F4A           74           07            je  	.1EA
23787                       00005F4C            .1EB:
23788                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23789 5F4C           8A46         FE            mov	al,-2[bp]
23790 5F4F           48                         dec	ax
23791 5F50           8846         FE            mov	-2[bp],al
23792                                           !BCC_EOS
23793                                           ! 2872     break;
23794                       00005F53            .1EA:
23795 5F53           E9         01EB            br 	.1E5
23796                                           !BCC_EOS
23797                                           ! 2873    case '\r':
23798                                           ! 2874     xcurs=0;
23799                       00005F56            .1EC:
23800                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23801 5F56           30C0                       xor	al,al
23802 5F58           8846         FE            mov	-2[bp],al
23803                                           !BCC_EOS
23804                                           ! 2875     break;
23805 5F5B           E9         01E3            br 	.1E5
23806                                           !BCC_EOS
23807                                           ! 2876    case '\n':
23808                                           ! 2877     ycurs++;
23809                       00005F5E            .1ED:
23810                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23811 5F5E           8A46         FD            mov	al,-3[bp]
23812 5F61           40                         inc	ax
23813 5F62           8846         FD            mov	-3[bp],al
23814                                           !BCC_EOS
23815                                           ! 2878     break;
23816 5F65           E9         01D9            br 	.1E5
23817                                           !BCC_EOS
23818                                           ! 2879    case '\t':
23819                                           ! 2880     do
23820                       00005F68            .1EE:
23821                                           ! 2881      {
23822                       00005F68            .1F1:
23823                                           ! 2882       biosfn_write_teletype(' ',page,attr,flag);
23824                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23825 5F68           8A46         0A            mov	al,$A[bp]
23826 5F6B           30E4                       xor	ah,ah
23827 5F6D           50                         push	ax
23828                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23829 5F6E           8A46         08            mov	al,8[bp]
23830 5F71           30E4                       xor	ah,ah
23831 5F73           50                         push	ax
23832                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23833 5F74           8A46         06            mov	al,6[bp]
23834 5F77           30E4                       xor	ah,ah
23835 5F79           50                         push	ax
23836                                           ! Debug: list int = const $20 (used reg = )
23837 5F7A           B8                   0020  mov	ax,*$20
23838 5F7D           50                         push	ax
23839                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23840 5F7E           E8         FF28            call	_biosfn_write_teletype
23841 5F81           83C4                   08  add	sp,*8
23842                                           !BCC_EOS
23843                                           ! 2883       biosfn_get_cursor_pos(page,&dummy,&cursor);
23844                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23845 5F84           8D5E         F2            lea	bx,-$E[bp]
23846 5F87           53                         push	bx
23847                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23848 5F88           8D5E         F0            lea	bx,-$10[bp]
23849 5F8B           53                         push	bx
23850                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23851 5F8C           8A46         06            mov	al,6[bp]
23852 5F8F           30E4                       xor	ah,ah
23853 5F91           50                         push	ax
23854                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23855 5F92           E8         E4F1            call	_biosfn_get_cursor_pos
23856 5F95           83C4                   06  add	sp,*6
23857                                           !BCC_EOS
23858                                           ! 2884       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23859                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23860 5F98           8A46         F2            mov	al,-$E[bp]
23861                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23862 5F9B           8846         FE            mov	-2[bp],al
23863                                           !BCC_EOS
23864                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23865 5F9E           8B46         F2            mov	ax,-$E[bp]
23866 5FA1           30C0                       xor	al,al
23867                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23868 5FA3           88E0                       mov	al,ah
23869 5FA5           30E4                       xor	ah,ah
23870                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23871 5FA7           8846         FD            mov	-3[bp],al
23872                                           !BCC_EOS
23873                                           ! 2885      }while(xcurs%8==0);
23874                       00005FAA            .1F0:
23875                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23876 5FAA           8A46         FE            mov	al,-2[bp]
23877 5FAD           30E4                       xor	ah,ah
23878 5FAF           24                     07  and	al,*7
23879                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23880 5FB1           84C0                       test	al,al
23881 5FB3           74           B3            je 	.1F1
23882                       00005FB5            .1F2:
23883                                           !BCC_EOS
23884                                           ! 2886     break;
23885                       00005FB5            .1EF:
23886 5FB5           E9         0189            br 	.1E5
23887                                           !BCC_EOS
23888                                           ! 2887    default:
23889                                           ! 2888     if(vga_modes[line].class==0x00)
23890                       00005FB8            .1F3:
23891                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
23892 5FB8           8A46         FB            mov	al,-5[bp]
23893 5FBB           30E4                       xor	ah,ah
23894 5FBD           B1                     03  mov	cl,*3
23895 5FBF           D3E0                       shl	ax,cl
23896 5FC1           89C3                       mov	bx,ax
23897 5FC3           81C3                 0225  add	bx,#_vga_modes
23898                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23899 5FC7           8A47         01            mov	al,1[bx]
23900 5FCA           84C0                       test	al,al
23901 5FCC         0F85         0082            bne 	.1F4
23902                       00005FD0            .1F5:
23903                                           ! 2889      {
23904                                           ! 2890       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23905                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23906 5FD0           8A46         FD            mov	al,-3[bp]
23907 5FD3           30E4                       xor	ah,ah
23908 5FD5           8B4E         F8            mov	cx,-8[bp]
23909 5FD8           F7E9                       imul	cx
23910                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23911                                           ! Debug: expression subtree swapping
23912 5FDA           0246         FE            add	al,-2[bp]
23913 5FDD           80D4                   00  adc	ah,*0
23914                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23915 5FE0           D1E0                       shl	ax,*1
23916 5FE2           50                         push	ax
23917                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23918 5FE3           8B46         F8            mov	ax,-8[bp]
23919 5FE6           8B4E         F6            mov	cx,-$A[bp]
23920 5FE9           F7E9                       imul	cx
23921                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23922 5FEB           D1E0                       shl	ax,*1
23923                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23924 5FED           0C                     FF  or	al,#$FF
23925                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23926                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23927 5FEF           89C3                       mov	bx,ax
23928 5FF1           8A46         06            mov	al,6[bp]
23929 5FF4           30E4                       xor	ah,ah
23930 5FF6           93                         xchg	ax,bx
23931 5FF7           40                         inc	ax
23932 5FF8           89D9                       mov	cx,bx
23933 5FFA           F7E9                       imul	cx
23934                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23935 5FFC           0346         EE            add	ax,0+..FFF6[bp]
23936 5FFF           44                         inc	sp
23937 6000           44                         inc	sp
23938                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23939 6001           8946         F4            mov	-$C[bp],ax
23940                                           !BCC_EOS
23941                                           ! 2891       write_byte(vga_modes[line].sstart,address,car);
23942                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23943 6004           8A46         04            mov	al,4[bp]
23944 6007           30E4                       xor	ah,ah
23945 6009           50                         push	ax
23946                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23947 600A           FF76         F4            push	-$C[bp]
23948                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
23949 600D           8A46         FB            mov	al,-5[bp]
23950 6010           30E4                       xor	ah,ah
23951 6012           B1                     03  mov	cl,*3
23952 6014           D3E0                       shl	ax,cl
23953 6016           89C3                       mov	bx,ax
23954 6018           81C3                 0225  add	bx,#_vga_modes
23955                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23956 601C           FF77         04            push	4[bx]
23957                                           ! Debug: func () void = write_byte+0 (used reg = )
23958 601F           E8         1E63            call	_write_byte
23959 6022           83C4                   06  add	sp,*6
23960                                           !BCC_EOS
23961                                           ! 2892       if(flag==3)
23962                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23963 6025           8A46         0A            mov	al,$A[bp]
23964 6028           3C                     03  cmp	al,*3
23965 602A           75           23            jne 	.1F6
23966                       0000602C            .1F7:
23967                                           ! 2893        write_byte(vga_modes[line].sstart,address+1,attr);
23968                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23969 602C           8A46         08            mov	al,8[bp]
23970 602F           30E4                       xor	ah,ah
23971 6031           50                         push	ax
23972                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23973 6032           8B46         F4            mov	ax,-$C[bp]
23974                                           ! Debug: list unsigned int = ax+1 (used reg = )
23975 6035           40                         inc	ax
23976 6036           50                         push	ax
23977                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$12] struct  = vga_modes+0 (used reg = )
23978 6037           8A46         FB            mov	al,-5[bp]
23979 603A           30E4                       xor	ah,ah
23980 603C           B1                     03  mov	cl,*3
23981 603E           D3E0                       shl	ax,cl
23982 6040           89C3                       mov	bx,ax
23983 6042           81C3                 0225  add	bx,#_vga_modes
23984                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23985 6046           FF77         04            push	4[bx]
23986                                           ! Debug: func () void = write_byte+0 (used reg = )
23987 6049           E8         1E39            call	_write_byte
23988 604C           83C4                   06  add	sp,*6
23989                                           !BCC_EOS
23990                                           ! 2894      }
23991                       0000604F            .1F6:
23992                                           ! 2895     else
23993                                           ! 2896      {
23994 604F           E9         00C5            br 	.1F8
23995                       00006052            .1F4:
23996                                           ! 2897       cheight=read_byte(0x40,0x85);
23997                                           ! Debug: list int = const $85 (used reg = )
23998 6052           B8                   0085  mov	ax,#$85
23999 6055           50                         push	ax
24000                                           ! Debug: list int = const $40 (used reg = )
24001 6056           B8                   0040  mov	ax,*$40
24002 6059           50                         push	ax
24003                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24004 605A           E8         1E02            call	_read_byte
24005 605D           83C4                   04  add	sp,*4
24006                                           ! Debug: eq unsigned char = al+0 to unsigned char cheight = [S+$12-3] (used reg = )
24007 6060           8846         FF            mov	-1[bp],al
24008                                           !BCC_EOS
24009                                           ! 2898       bpp=vga_modes[line].pixbits;
24010                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
24011 6063           8A46         FB            mov	al,-5[bp]
24012 6066           30E4                       xor	ah,ah
24013 6068           B1                     03  mov	cl,*3
24014 606A           D3E0                       shl	ax,cl
24015 606C           89C3                       mov	bx,ax
24016 606E           81C3                 0225  add	bx,#_vga_modes
24017                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24018 6072           8A47         03            mov	al,3[bx]
24019 6075           8846         FA            mov	-6[bp],al
24020                                           !BCC_EOS
24021                                           ! 2899       switch(vga_modes[line].memmodel)
24022                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
24023 6078           8A46         FB            mov	al,-5[bp]
24024 607B           30E4                       xor	ah,ah
24025 607D           B1                     03  mov	cl,*3
24026 607F           D3E0                       shl	ax,cl
24027 6081           89C3                       mov	bx,ax
24028 6083           81C3                 0225  add	bx,#_vga_modes
24029 6087           8A47         02            mov	al,2[bx]
24030                                           ! 2900        {
24031 608A           EB           77            jmp .1FB
24032                                           ! 2901         case 0x04:
24033                                           ! 2902         case 0x03:
24034                       0000608C            .1FC:
24035                                           ! 2903           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24036                       0000608C            .1FD:
24037                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24038 608C           8A46         FF            mov	al,-1[bp]
24039 608F           30E4                       xor	ah,ah
24040 6091           50                         push	ax
24041                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24042 6092           FF76         F8            push	-8[bp]
24043                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24044 6095           8A46         FD            mov	al,-3[bp]
24045 6098           30E4                       xor	ah,ah
24046 609A           50                         push	ax
24047                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24048 609B           8A46         FE            mov	al,-2[bp]
24049 609E           30E4                       xor	ah,ah
24050 60A0           50                         push	ax
24051                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24052 60A1           8A46         08            mov	al,8[bp]
24053 60A4           30E4                       xor	ah,ah
24054 60A6           50                         push	ax
24055                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24056 60A7           8A46         04            mov	al,4[bp]
24057 60AA           30E4                       xor	ah,ah
24058 60AC           50                         push	ax
24059                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24060 60AD           E8         F0C5            call	_write_gfx_char_pl4
24061 60B0           83C4                   0C  add	sp,*$C
24062                                           !BCC_EOS
24063                                           ! 2904           break;
24064 60B3           EB           62            jmp .1F9
24065                                           !BCC_EOS
24066                                           ! 2905         case 0x02:
24067                                           ! 2906           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24068                       000060B5            .1FE:
24069                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24070 60B5           8A46         FA            mov	al,-6[bp]
24071 60B8           30E4                       xor	ah,ah
24072 60BA           50                         push	ax
24073                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24074 60BB           FF76         F8            push	-8[bp]
24075                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24076 60BE           8A46         FD            mov	al,-3[bp]
24077 60C1           30E4                       xor	ah,ah
24078 60C3           50                         push	ax
24079                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24080 60C4           8A46         FE            mov	al,-2[bp]
24081 60C7           30E4                       xor	ah,ah
24082 60C9           50                         push	ax
24083                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24084 60CA           8A46         08            mov	al,8[bp]
24085 60CD           30E4                       xor	ah,ah
24086 60CF           50                         push	ax
24087                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24088 60D0           8A46         04            mov	al,4[bp]
24089 60D3           30E4                       xor	ah,ah
24090 60D5           50                         push	ax
24091                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24092 60D6           E8         F20F            call	_write_gfx_char_cga
24093 60D9           83C4                   0C  add	sp,*$C
24094                                           !BCC_EOS
24095                                           ! 2907           break;
24096 60DC           EB           39            jmp .1F9
24097                                           !BCC_EOS
24098                                           ! 2908         case 0x05:
24099                                           ! 2909           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24100                       000060DE            .1FF:
24101                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24102 60DE           FF76         F8            push	-8[bp]
24103                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24104 60E1           8A46         FD            mov	al,-3[bp]
24105 60E4           30E4                       xor	ah,ah
24106 60E6           50                         push	ax
24107                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24108 60E7           8A46         FE            mov	al,-2[bp]
24109 60EA           30E4                       xor	ah,ah
24110 60EC           50                         push	ax
24111                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24112 60ED           8A46         08            mov	al,8[bp]
24113 60F0           30E4                       xor	ah,ah
24114 60F2           50                         push	ax
24115                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24116 60F3           8A46         04            mov	al,4[bp]
24117 60F6           30E4                       xor	ah,ah
24118 60F8           50                         push	ax
24119                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24120 60F9           E8         F3EF            call	_write_gfx_char_lin
24121 60FC           83C4                   0A  add	sp,*$A
24122                                           !BCC_EOS
24123                                           ! 2910           break;
24124 60FF           EB           16            jmp .1F9
24125                                           !BCC_EOS
24126                                           ! 2911        }
24127                                           ! 2912      }
24128 6101           EB           14            jmp .1F9
24129                       00006103            .1FB:
24130 6103           2C                     02  sub	al,*2
24131 6105           74           AE            je 	.1FE
24132 6107           2C                     01  sub	al,*1
24133 6109         0F84         FF7F            beq 	.1FD
24134 610D           2C                     01  sub	al,*1
24135 610F         0F84         FF79            beq 	.1FC
24136 6113           2C                     01  sub	al,*1
24137 6115           74           C7            je 	.1FF
24138                       00006117            .1F9:
24139                                           ! 2913     xcurs++;
24140                       00006117            .1F8:
24141                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24142 6117           8A46         FE            mov	al,-2[bp]
24143 611A           40                         inc	ax
24144 611B           8846         FE            mov	-2[bp],al
24145                                           !BCC_EOS
24146                                           ! 2914   }
24147                                           ! 2915  if(xcurs==nbcols)
24148 611E           EB           21            jmp .1E5
24149                       00006120            .1E7:
24150 6120           2C                     07  sub	al,*7
24151 6122         0F84         FE1C            beq 	.1E8
24152 6126           2C                     01  sub	al,*1
24153 6128         0F84         FE19            beq 	.1E9
24154 612C           2C                     01  sub	al,*1
24155 612E         0F84         FE36            beq 	.1EE
24156 6132           2C                     01  sub	al,*1
24157 6134         0F84         FE26            beq 	.1ED
24158 6138           2C                     03  sub	al,*3
24159 613A         0F84         FE18            beq 	.1EC
24160 613E           E9         FE77            br 	.1F3
24161                       00006141            .1E5:
24162                       FFFFFFEE            ..FFF6	=	-$12
24163                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24164 6141           8A46         FE            mov	al,-2[bp]
24165 6144           30E4                       xor	ah,ah
24166 6146           3B46         F8            cmp	ax,-8[bp]
24167 6149           75           0C            jne 	.200
24168                       0000614B            .201:
24169                                           ! 2916   {xcurs=0;
24170                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24171 614B           30C0                       xor	al,al
24172 614D           8846         FE            mov	-2[bp],al
24173                                           !BCC_EOS
24174                                           ! 2917    ycurs++;
24175                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24176 6150           8A46         FD            mov	al,-3[bp]
24177 6153           40                         inc	ax
24178 6154           8846         FD            mov	-3[bp],al
24179                                           !BCC_EOS
24180                                           ! 2918   }
24181                                           ! 2919  if(ycurs==nbrows)
24182                       00006157            .200:
24183                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24184 6157           8A46         FD            mov	al,-3[bp]
24185 615A           30E4                       xor	ah,ah
24186 615C           3B46         F6            cmp	ax,-$A[bp]
24187 615F         0F85         00C9            bne 	.202
24188                       00006163            .203:
24189                                           ! 2920   {
24190                                           ! 2921    if(vga_modes[line].class==0x00)
24191                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$12] struct  = vga_modes+0 (used reg = )
24192 6163           8A46         FB            mov	al,-5[bp]
24193 6166           30E4                       xor	ah,ah
24194 6168           B1                     03  mov	cl,*3
24195 616A           D3E0                       shl	ax,cl
24196 616C           89C3                       mov	bx,ax
24197 616E           81C3                 0225  add	bx,#_vga_modes
24198                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24199 6172           8A47         01            mov	al,1[bx]
24200 6175           84C0                       test	al,al
24201 6177         0F85         0081            bne 	.204
24202                       0000617B            .205:
24203                                           ! 2922     {
24204                                           ! 2923      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24205                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24206 617B           8A46         FD            mov	al,-3[bp]
24207 617E           30E4                       xor	ah,ah
24208                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24209 6180           48                         dec	ax
24210 6181           8B4E         F8            mov	cx,-8[bp]
24211 6184           F7E9                       imul	cx
24212                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24213                                           ! Debug: expression subtree swapping
24214 6186           0246         FE            add	al,-2[bp]
24215 6189           80D4                   00  adc	ah,*0
24216                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24217 618C           D1E0                       shl	ax,*1
24218 618E           50                         push	ax
24219                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24220 618F           8B46         F8            mov	ax,-8[bp]
24221 6192           8B4E         F6            mov	cx,-$A[bp]
24222 6195           F7E9                       imul	cx
24223                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24224 6197           D1E0                       shl	ax,*1
24225                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24226 6199           0C                     FF  or	al,#$FF
24227                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24228                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24229 619B           89C3                       mov	bx,ax
24230 619D           8A46         06            mov	al,6[bp]
24231 61A0           30E4                       xor	ah,ah
24232 61A2           93                         xchg	ax,bx
24233 61A3           40                         inc	ax
24234 61A4           89D9                       mov	cx,bx
24235 61A6           F7E9                       imul	cx
24236                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24237 61A8           0346         EE            add	ax,-$12[bp]
24238 61AB           44                         inc	sp
24239 61AC           44                         inc	sp
24240                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24241 61AD           8946         F4            mov	-$C[bp],ax
24242                                           !BCC_EOS
24243                                           ! 2924      attr=read_byte(vga_modes[line].sstart,address+1);
24244                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24245 61B0           8B46         F4            mov	ax,-$C[bp]
24246                                           ! Debug: list unsigned int = ax+1 (used reg = )
24247 61B3           40                         inc	ax
24248 61B4           50                         push	ax
24249                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$12] struct  = vga_modes+0 (used reg = )
24250 61B5           8A46         FB            mov	al,-5[bp]
24251 61B8           30E4                       xor	ah,ah
24252 61BA           B1                     03  mov	cl,*3
24253 61BC           D3E0                       shl	ax,cl
24254 61BE           89C3                       mov	bx,ax
24255 61C0           81C3                 0225  add	bx,#_vga_modes
24256                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24257 61C4           FF77         04            push	4[bx]
24258                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24259 61C7           E8         1C95            call	_read_byte
24260 61CA           83C4                   04  add	sp,*4
24261                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24262 61CD           8846         08            mov	8[bp],al
24263                                           !BCC_EOS
24264                                           ! 2925      biosfn_scroll(0x01,att
24265                                           ! 2925 r,0,0,nbrows-1,nbcols-1,page,1);
24266                                           ! Debug: list int = const 1 (used reg = )
24267 61D0           B8                   0001  mov	ax,*1
24268 61D3           50                         push	ax
24269                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24270 61D4           8A46         06            mov	al,6[bp]
24271 61D7           30E4                       xor	ah,ah
24272 61D9           50                         push	ax
24273                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24274 61DA           8B46         F8            mov	ax,-8[bp]
24275                                           ! Debug: list unsigned int = ax-1 (used reg = )
24276 61DD           48                         dec	ax
24277 61DE           50                         push	ax
24278                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24279 61DF           8B46         F6            mov	ax,-$A[bp]
24280                                           ! Debug: list unsigned int = ax-1 (used reg = )
24281 61E2           48                         dec	ax
24282 61E3           50                         push	ax
24283                                           ! Debug: list int = const 0 (used reg = )
24284 61E4           31C0                       xor	ax,ax
24285 61E6           50                         push	ax
24286                                           ! Debug: list int = const 0 (used reg = )
24287 61E7           31C0                       xor	ax,ax
24288 61E9           50                         push	ax
24289                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24290 61EA           8A46         08            mov	al,8[bp]
24291 61ED           30E4                       xor	ah,ah
24292 61EF           50                         push	ax
24293                                           ! Debug: list int = const 1 (used reg = )
24294 61F0           B8                   0001  mov	ax,*1
24295 61F3           50                         push	ax
24296                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24297 61F4           E8         E789            call	_biosfn_scroll
24298 61F7           83C4                   10  add	sp,*$10
24299                                           !BCC_EOS
24300                                           ! 2926     }
24301                                           ! 2927    else
24302                                           ! 2928     {
24303 61FA           EB           27            jmp .206
24304                       000061FC            .204:
24305                                           ! 2929      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24306                                           ! Debug: list int = const 1 (used reg = )
24307 61FC           B8                   0001  mov	ax,*1
24308 61FF           50                         push	ax
24309                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24310 6200           8A46         06            mov	al,6[bp]
24311 6203           30E4                       xor	ah,ah
24312 6205           50                         push	ax
24313                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24314 6206           8B46         F8            mov	ax,-8[bp]
24315                                           ! Debug: list unsigned int = ax-1 (used reg = )
24316 6209           48                         dec	ax
24317 620A           50                         push	ax
24318                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24319 620B           8B46         F6            mov	ax,-$A[bp]
24320                                           ! Debug: list unsigned int = ax-1 (used reg = )
24321 620E           48                         dec	ax
24322 620F           50                         push	ax
24323                                           ! Debug: list int = const 0 (used reg = )
24324 6210           31C0                       xor	ax,ax
24325 6212           50                         push	ax
24326                                           ! Debug: list int = const 0 (used reg = )
24327 6213           31C0                       xor	ax,ax
24328 6215           50                         push	ax
24329                                           ! Debug: list int = const 0 (used reg = )
24330 6216           31C0                       xor	ax,ax
24331 6218           50                         push	ax
24332                                           ! Debug: list int = const 1 (used reg = )
24333 6219           B8                   0001  mov	ax,*1
24334 621C           50                         push	ax
24335                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24336 621D           E8         E760            call	_biosfn_scroll
24337 6220           83C4                   10  add	sp,*$10
24338                                           !BCC_EOS
24339                                           ! 2930     }
24340                                           ! 2931    ycurs-=1;
24341                       00006223            .206:
24342                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24343 6223           8A46         FD            mov	al,-3[bp]
24344 6226           30E4                       xor	ah,ah
24345 6228           48                         dec	ax
24346 6229           8846         FD            mov	-3[bp],al
24347                                           !BCC_EOS
24348                                           ! 2932   }
24349                                           ! 2933  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24350                       0000622C            .202:
24351                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24352 622C           8A46         FD            mov	al,-3[bp]
24353 622F           30E4                       xor	ah,ah
24354 6231           8946         F2            mov	-$E[bp],ax
24355                                           !BCC_EOS
24356                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24357 6234           8B46         F2            mov	ax,-$E[bp]
24358 6237           88C4                       mov	ah,al
24359 6239           30C0                       xor	al,al
24360 623B           8946         F2            mov	-$E[bp],ax
24361                                           !BCC_EOS
24362                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24363 623E           8B46         F2            mov	ax,-$E[bp]
24364 6241           0246         FE            add	al,-2[bp]
24365 6244           80D4                   00  adc	ah,*0
24366 6247           8946         F2            mov	-$E[bp],ax
24367                                           !BCC_EOS
24368                                           ! 2934  biosfn_set_cursor_pos(page,cursor);
24369                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24370 624A           FF76         F2            push	-$E[bp]
24371                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24372 624D           8A46         06            mov	al,6[bp]
24373 6250           30E4                       xor	ah,ah
24374 6252           50                         push	ax
24375                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24376 6253           E8         E130            call	_biosfn_set_cursor_pos
24377 6256           83C4                   04  add	sp,*4
24378                                           !BCC_EOS
24379                                           ! 2935 }
24380 6259           89EC                       mov	sp,bp
24381 625B           5D                         pop	bp
24382 625C           C3                         ret
24383                                           ! 2936 #asm
24384                                           !BCC_ASM
24385                       00000008            _biosfn_write_teletype.flag	set	8
24386                       00000006            _biosfn_write_teletype.attr	set	6
24387                       00000004            _biosfn_write_teletype.page	set	4
24388                       00000002            _biosfn_write_teletype.car	set	2
24389                       0000625D            biosfn_get_video_mode:
24390 625D           1E                           push ds
24391 625E           B8                   0040    mov ax, # 0x40
24392 6261           8ED8                         mov ds, ax
24393 6263           53                           push bx
24394 6264           BB                   0062    mov bx, # 0x62
24395 6267           8A07                         mov al, [bx]
24396 6269           5B                           pop bx
24397 626A           88C7                         mov bh, al
24398 626C           53                           push bx
24399 626D           BB                   0087    mov bx, # 0x87
24400 6270           8A27                         mov ah, [bx]
24401 6272           80E4                   80    and ah, #0x80
24402 6275           BB                   0049    mov bx, # 0x49
24403 6278           8A07                         mov al, [bx]
24404 627A           08E0                         or al, ah
24405 627C           BB                   004A    mov bx, # 0x4A
24406 627F           8A27                         mov ah, [bx]
24407 6281           5B                           pop bx
24408 6282           1F                           pop ds
24409 6283           C3                           ret
24410                                           ! 2958 endasm
24411                                           !BCC_ENDASM
24412                                           ! 2959 #asm
24413                                           !BCC_ASM
24414                       00000008            _biosfn_write_teletype.flag	set	8
24415                       00000006            _biosfn_write_teletype.attr	set	6
24416                       00000004            _biosfn_write_teletype.page	set	4
24417                       00000002            _biosfn_write_teletype.car	set	2
24418                       00006284            biosfn_group_10:
24419 6284           3C                     00    cmp al, #0x00
24420 6286           75           02              jne int10_test_1001
24421 6288           EB           61              jmp biosfn_set_single_palette_reg
24422                       0000628A            int10_test_1001:
24423 628A           3C                     01    cmp al, #0x01
24424 628C           75           02              jne int10_test_1002
24425 628E           EB           75              jmp biosfn_set_overscan_border_color
24426                       00006290            int10_test_1002:
24427 6290           3C                     02    cmp al, #0x02
24428 6292           75           02              jne int10_test_1003
24429 6294           EB           77              jmp biosfn_set_all_palette_reg
24430                       00006296            int10_test_1003:
24431 6296           3C                     03    cmp al, #0x03
24432 6298           75           03              jne int10_test_1007
24433 629A           E9         009D              jmp biosfn_toggle_intensity
24434                       0000629D            int10_test_1007:
24435 629D           3C                     07    cmp al, #0x07
24436 629F           75           03              jne int10_test_1008
24437 62A1           E9         00BC              jmp biosfn_get_single_palette_reg
24438                       000062A4            int10_test_1008:
24439 62A4           3C                     08    cmp al, #0x08
24440 62A6           75           03              jne int10_test_1009
24441 62A8           E9         00D9              jmp biosfn_read_overscan_border_color
24442                       000062AB            int10_test_1009:
24443 62AB           3C                     09    cmp al, #0x09
24444 62AD           75           03              jne int10_test_1010
24445 62AF           E9         00E0              jmp biosfn_get_all_palette_reg
24446                       000062B2            int10_test_1010:
24447 62B2           3C                     10    cmp al, #0x10
24448 62B4           75           03              jne int10_test_1012
24449 62B6           E9         011A              jmp biosfn_set_single_dac_reg
24450                       000062B9            int10_test_1012:
24451 62B9           3C                     12    cmp al, #0x12
24452 62BB           75           03              jne int10_test_1013
24453 62BD           E9         012C              jmp biosfn_set_all_dac_reg
24454                       000062C0            int10_test_1013:
24455 62C0           3C                     13    cmp al, #0x13
24456 62C2           75           03              jne int10_test_1015
24457 62C4           E9         014D              jmp biosfn_select_video_dac_color_page
24458                       000062C7            int10_test_1015:
24459 62C7           3C                     15    cmp al, #0x15
24460 62C9           75           03              jne int10_test_1017
24461 62CB           E9         0189              jmp biosfn_read_single_dac_reg
24462                       000062CE            int10_test_1017:
24463 62CE           3C                     17    cmp al, #0x17
24464 62D0           75           03              jne int10_test_1018
24465 62D2           E9         019D              jmp biosfn_read_all_dac_reg
24466                       000062D5            int10_test_1018:
24467 62D5           3C                     18    cmp al, #0x18
24468 62D7           75           03              jne int10_test_1019
24469 62D9           E9         01BE              jmp biosfn_set_pel_mask
24470                       000062DC            int10_test_1019:
24471 62DC           3C                     19    cmp al, #0x19
24472 62DE           75           03              jne int10_test_101A
24473 62E0           E9         01C2              jmp biosfn_read_pel_mask
24474                       000062E3            int10_test_101A:
24475 62E3           3C                     1A    cmp al, #0x1a
24476 62E5           75           03              jne int10_group_10_unknown
24477 62E7           E9         01C6              jmp biosfn_read_video_dac_state
24478                       000062EA            int10_group_10_unknown:
24479 62EA           C3                           ret
24480                       000062EB            biosfn_set_single_palette_reg:
24481 62EB           80FB                   14    cmp bl, #0x14
24482 62EE           77           14              ja no_actl_reg1
24483 62F0           50                           push ax
24484 62F1           52                           push dx
24485 62F2           BA                   03DA    mov dx, # 0x3da
24486 62F5           EC                           in al, dx
24487 62F6           BA                   03C0    mov dx, # 0x3c0
24488 62F9           88D8                         mov al, bl
24489 62FB           EE                           out dx, al
24490 62FC           88F8                         mov al, bh
24491 62FE           EE                           out dx, al
24492 62FF           B0                     20    mov al, #0x20
24493 6301           EE                           out dx, al
24494 6302           5A                           pop dx
24495 6303           58                           pop ax
24496                       00006304            no_actl_reg1:
24497 6304           C3                           ret
24498                                           ! 3040 endasm
24499                                           !BCC_ENDASM
24500                                           ! 3041 #asm
24501                                           !BCC_ASM
24502                       00000008            _biosfn_write_teletype.flag	set	8
24503                       00000006            _biosfn_write_teletype.attr	set	6
24504                       00000004            _biosfn_write_teletype.page	set	4
24505                       00000002            _biosfn_write_teletype.car	set	2
24506                       00006305            biosfn_set_overscan_border_color:
24507 6305           53                           push bx
24508 6306           B3                     11    mov bl, #0x11
24509 6308           E8         FFE0              call biosfn_set_single_palette_reg
24510 630B           5B                           pop bx
24511 630C           C3                           ret
24512                                           ! 3048 endasm
24513                                           !BCC_ENDASM
24514                                           ! 3049 #asm
24515                                           !BCC_ASM
24516                       00000008            _biosfn_write_teletype.flag	set	8
24517                       00000006            _biosfn_write_teletype.attr	set	6
24518                       00000004            _biosfn_write_teletype.page	set	4
24519                       00000002            _biosfn_write_teletype.car	set	2
24520                       0000630D            biosfn_set_all_palette_reg:
24521 630D           50                           push ax
24522 630E           53                           push bx
24523 630F           51                           push cx
24524 6310           52                           push dx
24525 6311           89D3                         mov bx, dx
24526 6313           BA                   03DA    mov dx, # 0x3da
24527 6316           EC                           in al, dx
24528 6317           B1                     00    mov cl, #0x00
24529 6319           BA                   03C0    mov dx, # 0x3c0
24530                       0000631C            set_palette_loop:
24531 631C           88C8                         mov al, cl
24532 631E           EE                           out dx, al
24533 631F           26                           seg es
24534 6320           8A07                         mov al, [bx]
24535 6322           EE                           out dx, al
24536 6323           43                           inc bx
24537 6324           FEC1                         inc cl
24538 6326           80F9                   10    cmp cl, #0x10
24539 6329           75           F1              jne set_palette_loop
24540 632B           B0                     11    mov al, #0x11
24541 632D           EE                           out dx, al
24542 632E           26                           seg es
24543 632F           8A07                         mov al, [bx]
24544 6331           EE                           out dx, al
24545 6332           B0                     20    mov al, #0x20
24546 6334           EE                           out dx, al
24547 6335           5A                           pop dx
24548 6336           59                           pop cx
24549 6337           5B                           pop bx
24550 6338           58                           pop ax
24551 6339           C3                           ret
24552                                           ! 3082 endasm
24553                                           !BCC_ENDASM
24554                                           ! 3083 #asm
24555                                           !BCC_ASM
24556                       00000008            _biosfn_write_teletype.flag	set	8
24557                       00000006            _biosfn_write_teletype.attr	set	6
24558                       00000004            _biosfn_write_teletype.page	set	4
24559                       00000002            _biosfn_write_teletype.car	set	2
24560                       0000633A            biosfn_toggle_intensity:
24561 633A           50                           push ax
24562 633B           53                           push bx
24563 633C           52                           push dx
24564 633D           BA                   03DA    mov dx, # 0x3da
24565 6340           EC                           in al, dx
24566 6341           BA                   03C0    mov dx, # 0x3c0
24567 6344           B0                     10    mov al, #0x10
24568 6346           EE                           out dx, al
24569 6347           BA                   03C1    mov dx, # 0x3c1
24570 634A           EC                           in al, dx
24571 634B           24                     F7    and al, #0xf7
24572 634D           80E3                   01    and bl, #0x01
24573 6350           C0E3                   03    shl bl, 3
24574 6353           08D8                         or al, bl
24575 6355           BA                   03C0    mov dx, # 0x3c0
24576 6358           EE                           out dx, al
24577 6359           B0                     20    mov al, #0x20
24578 635B           EE                           out dx, al
24579 635C           5A                           pop dx
24580 635D           5B                           pop bx
24581 635E           58                           pop ax
24582 635F           C3                           ret
24583                                           ! 3107 endasm
24584                                           !BCC_ENDASM
24585                                           ! 3108 #asm
24586                                           !BCC_ASM
24587                       00000008            _biosfn_write_teletype.flag	set	8
24588                       00000006            _biosfn_write_teletype.attr	set	6
24589                       00000004            _biosfn_write_teletype.page	set	4
24590                       00000002            _biosfn_write_teletype.car	set	2
24591                       00006360            biosfn_get_single_palette_reg:
24592 6360           80FB                   14    cmp bl, #0x14
24593 6363           77           1E              ja no_actl_reg2
24594 6365           50                           push ax
24595 6366           52                           push dx
24596 6367           BA                   03DA    mov dx, # 0x3da
24597 636A           EC                           in al, dx
24598 636B           BA                   03C0    mov dx, # 0x3c0
24599 636E           88D8                         mov al, bl
24600 6370           EE                           out dx, al
24601 6371           BA                   03C1    mov dx, # 0x3c1
24602 6374           EC                           in al, dx
24603 6375           88C7                         mov bh, al
24604 6377           BA                   03DA    mov dx, # 0x3da
24605 637A           EC                           in al, dx
24606 637B           BA                   03C0    mov dx, # 0x3c0
24607 637E           B0                     20    mov al, #0x20
24608 6380           EE                           out dx, al
24609 6381           5A                           pop dx
24610 6382           58                           pop ax
24611                       00006383            no_actl_reg2:
24612 6383           C3                           ret
24613                                           ! 3131 endasm
24614                                           !BCC_ENDASM
24615                                           ! 3132 #asm
24616                                           !BCC_ASM
24617                       00000008            _biosfn_write_teletype.flag	set	8
24618                       00000006            _biosfn_write_teletype.attr	set	6
24619                       00000004            _biosfn_write_teletype.page	set	4
24620                       00000002            _biosfn_write_teletype.car	set	2
24621                       00006384            biosfn_read_overscan_border_color:
24622 6384           50                           push ax
24623 6385           53                           push bx
24624 6386           B3                     11    mov bl, #0x11
24625 6388           E8         FFD5              call biosfn_get_single_palette_reg
24626 638B           88F8                         mov al, bh
24627 638D           5B                           pop bx
24628 638E           88C7                         mov bh, al
24629 6390           58                           pop ax
24630 6391           C3                           ret
24631                                           ! 3143 endasm
24632                                           !BCC_ENDASM
24633                                           ! 3144 #asm
24634                                           !BCC_ASM
24635                       00000008            _biosfn_write_teletype.flag	set	8
24636                       00000006            _biosfn_write_teletype.attr	set	6
24637                       00000004            _biosfn_write_teletype.page	set	4
24638                       00000002            _biosfn_write_teletype.car	set	2
24639                       00006392            biosfn_get_all_palette_reg:
24640 6392           50                           push ax
24641 6393           53                           push bx
24642 6394           51                           push cx
24643 6395           52                           push dx
24644 6396           89D3                         mov bx, dx
24645 6398           B1                     00    mov cl, #0x00
24646                       0000639A            get_palette_loop:
24647 639A           BA                   03DA    mov dx, # 0x3da
24648 639D           EC                           in al, dx
24649 639E           BA                   03C0    mov dx, # 0x3c0
24650 63A1           88C8                         mov al, cl
24651 63A3           EE                           out dx, al
24652 63A4           BA                   03C1    mov dx, # 0x3c1
24653 63A7           EC                           in al, dx
24654 63A8           26                           seg es
24655 63A9           8807                         mov [bx], al
24656 63AB           43                           inc bx
24657 63AC           FEC1                         inc cl
24658 63AE           80F9                   10    cmp cl, #0x10
24659 63B1           75           E7              jne get_palette_loop
24660 63B3           BA                   03DA    mov dx, # 0x3da
24661 63B6           EC                           in al, dx
24662 63B7           BA                   03C0    mov dx, # 0x3c0
24663 63BA           B0                     11    mov al, #0x11
24664 63BC           EE                           out dx, al
24665 63BD           BA                   03C1    mov dx, # 0x3c1
24666 63C0           EC                           in al, dx
24667 63C1           26                           seg es
24668 63C2           8807                         mov [bx], al
24669 63C4           BA                   03DA    mov dx, # 0x3da
24670 63C7           EC                           in al, dx
24671 63C8           BA                   03C0    mov dx, # 0x3c0
24672 63CB           B0                     20    mov al, #0x20
24673 63CD           EE                           out dx, al
24674 63CE           5A                           pop dx
24675 63CF           59                           pop cx
24676 63D0           5B                           pop bx
24677 63D1           58                           pop ax
24678 63D2           C3                           ret
24679                                           ! 3185 endasm
24680                                           !BCC_ENDASM
24681                                           ! 3186 #asm
24682                                           !BCC_ASM
24683                       00000008            _biosfn_write_teletype.flag	set	8
24684                       00000006            _biosfn_write_teletype.attr	set	6
24685                       00000004            _biosfn_write_teletype.page	set	4
24686                       00000002            _biosfn_write_teletype.car	set	2
24687                       000063D3            biosfn_set_single_dac_reg:
24688 63D3           50                           push ax
24689 63D4           52                           push dx
24690 63D5           BA                   03C8    mov dx, # 0x3c8
24691 63D8           88D8                         mov al, bl
24692 63DA           EE                           out dx, al
24693 63DB           BA                   03C9    mov dx, # 0x3c9
24694 63DE           58                           pop ax
24695 63DF           50                           push ax
24696 63E0           88E0                         mov al, ah
24697 63E2           EE                           out dx, al
24698 63E3           88E8                         mov al, ch
24699 63E5           EE                           out dx, al
24700 63E6           88C8                         mov al, cl
24701 63E8           EE                           out dx, al
24702 63E9           5A                           pop dx
24703 63EA           58                           pop ax
24704 63EB           C3                           ret
24705                                           ! 3205 endasm
24706                                           !BCC_ENDASM
24707                                           ! 3206 #asm
24708                                           !BCC_ASM
24709                       00000008            _biosfn_write_teletype.flag	set	8
24710                       00000006            _biosfn_write_teletype.attr	set	6
24711                       00000004            _biosfn_write_teletype.page	set	4
24712                       00000002            _biosfn_write_teletype.car	set	2
24713                       000063EC            biosfn_set_all_dac_reg:
24714 63EC           50                           push ax
24715 63ED           53                           push bx
24716 63EE           51                           push cx
24717 63EF           52                           push dx
24718 63F0           BA                   03C8    mov dx, # 0x3c8
24719 63F3           88D8                         mov al, bl
24720 63F5           EE                           out dx, al
24721 63F6           5A                           pop dx
24722 63F7           52                           push dx
24723 63F8           89D3                         mov bx, dx
24724 63FA           BA                   03C9    mov dx, # 0x3c9
24725                       000063FD            set_dac_loop:
24726 63FD           26                           seg es
24727 63FE           8A07                         mov al, [bx]
24728 6400           EE                           out dx, al
24729 6401           43                           inc bx
24730 6402           26                           seg es
24731 6403           8A07                         mov al, [bx]
24732 6405           EE                           out dx, al
24733 6406           43                           inc bx
24734 6407           26                           seg es
24735 6408           8A07                         mov al, [bx]
24736 640A           EE                           out dx, al
24737 640B           43                           inc bx
24738 640C           49                           dec cx
24739 640D           75           EE              jnz set_dac_loop
24740 640F           5A                           pop dx
24741 6410           59                           pop cx
24742 6411           5B                           pop bx
24743 6412           58                           pop ax
24744 6413           C3                           ret
24745                                           ! 3239 endasm
24746                                           !BCC_ENDASM
24747                                           ! 3240 #asm
24748                                           !BCC_ASM
24749                       00000008            _biosfn_write_teletype.flag	set	8
24750                       00000006            _biosfn_write_teletype.attr	set	6
24751                       00000004            _biosfn_write_teletype.page	set	4
24752                       00000002            _biosfn_write_teletype.car	set	2
24753                       00006414            biosfn_select_video_dac_color_page:
24754 6414           50                           push ax
24755 6415           53                           push bx
24756 6416           52                           push dx
24757 6417           BA                   03DA    mov dx, # 0x3da
24758 641A           EC                           in al, dx
24759 641B           BA                   03C0    mov dx, # 0x3c0
24760 641E           B0                     10    mov al, #0x10
24761 6420           EE                           out dx, al
24762 6421           BA                   03C1    mov dx, # 0x3c1
24763 6424           EC                           in al, dx
24764 6425           80E3                   01    and bl, #0x01
24765 6428           75           0D              jnz set_dac_page
24766 642A           24                     7F    and al, #0x7f
24767 642C           C0E7                   07    shl bh, 7
24768 642F           08F8                         or al, bh
24769 6431           BA                   03C0    mov dx, # 0x3c0
24770 6434           EE                           out dx, al
24771 6435           EB           19              jmp set_actl_normal
24772                       00006437            set_dac_page:
24773 6437           50                           push ax
24774 6438           BA                   03DA    mov dx, # 0x3da
24775 643B           EC                           in al, dx
24776 643C           BA                   03C0    mov dx, # 0x3c0
24777 643F           B0                     14    mov al, #0x14
24778 6441           EE                           out dx, al
24779 6442           58                           pop ax
24780 6443           24                     80    and al, #0x80
24781 6445           75           03              jnz set_dac_16_page
24782 6447           C0E7                   02    shl bh, 2
24783                       0000644A            set_dac_16_page:
24784 644A           80E7                   0F    and bh, #0x0f
24785 644D           88F8                         mov al, bh
24786 644F           EE                           out dx, al
24787                       00006450            set_actl_normal:
24788 6450           B0                     20    mov al, #0x20
24789 6452           EE                           out dx, al
24790 6453           5A                           pop dx
24791 6454           5B                           pop bx
24792 6455           58                           pop ax
24793 6456           C3                           ret
24794                                           ! 3282 endasm
24795                                           !BCC_ENDASM
24796                                           ! 3283 #asm
24797                                           !BCC_ASM
24798                       00000008            _biosfn_write_teletype.flag	set	8
24799                       00000006            _biosfn_write_teletype.attr	set	6
24800                       00000004            _biosfn_write_teletype.page	set	4
24801                       00000002            _biosfn_write_teletype.car	set	2
24802                       00006457            biosfn_read_single_dac_reg:
24803 6457           50                           push ax
24804 6458           52                           push dx
24805 6459           BA                   03C7    mov dx, # 0x3c7
24806 645C           88D8                         mov al, bl
24807 645E           EE                           out dx, al
24808 645F           58                           pop ax
24809 6460           88C4                         mov ah, al
24810 6462           BA                   03C9    mov dx, # 0x3c9
24811 6465           EC                           in al, dx
24812 6466           86E0                         xchg al, ah
24813 6468           50                           push ax
24814 6469           EC                           in al, dx
24815 646A           88C5                         mov ch, al
24816 646C           EC                           in al, dx
24817 646D           88C1                         mov cl, al
24818 646F           5A                           pop dx
24819 6470           58                           pop ax
24820 6471           C3                           ret
24821                                           ! 3303 endasm
24822                                           !BCC_ENDASM
24823                                           ! 3304 #asm
24824                                           !BCC_ASM
24825                       00000008            _biosfn_write_teletype.flag	set	8
24826                       00000006            _biosfn_write_teletype.attr	set	6
24827                       00000004            _biosfn_write_teletype.page	set	4
24828                       00000002            _biosfn_write_teletype.car	set	2
24829                       00006472            biosfn_read_all_dac_reg:
24830 6472           50                           push ax
24831 6473           53                           push bx
24832 6474           51                           push cx
24833 6475           52                           push dx
24834 6476           BA                   03C7    mov dx, # 0x3c7
24835 6479           88D8                         mov al, bl
24836 647B           EE                           out dx, al
24837 647C           5A                           pop dx
24838 647D           52                           push dx
24839 647E           89D3                         mov bx, dx
24840 6480           BA                   03C9    mov dx, # 0x3c9
24841                       00006483            read_dac_loop:
24842 6483           EC                           in al, dx
24843 6484           26                           seg es
24844 6485           8807                         mov [bx], al
24845 6487           43                           inc bx
24846 6488           EC                           in al, dx
24847 6489           26                           seg es
24848 648A           8807                         mov [bx], al
24849 648C           43                           inc bx
24850 648D           EC                           in al, dx
24851 648E           26                           seg es
24852 648F           8807                         mov [bx], al
24853 6491           43                           inc bx
24854 6492           49                           dec cx
24855 6493           75           EE              jnz read_dac_loop
24856 6495           5A                           pop dx
24857 6496           59                           pop cx
24858 6497           5B                           pop bx
24859 6498           58                           pop ax
24860 6499           C3                           ret
24861                                           ! 3337 endasm
24862                                           !BCC_ENDASM
24863                                           ! 3338 #asm
24864                                           !BCC_ASM
24865                       00000008            _biosfn_write_teletype.flag	set	8
24866                       00000006            _biosfn_write_teletype.attr	set	6
24867                       00000004            _biosfn_write_teletype.page	set	4
24868                       00000002            _biosfn_write_teletype.car	set	2
24869                       0000649A            biosfn_set_pel_mask:
24870 649A           50                           push ax
24871 649B           52                           push dx
24872 649C           BA                   03C6    mov dx, # 0x3c6
24873 649F           88D8                         mov al, bl
24874 64A1           EE                           out dx, al
24875 64A2           5A                           pop dx
24876 64A3           58                           pop ax
24877 64A4           C3                           ret
24878                                           ! 3348 endasm
24879                                           !BCC_ENDASM
24880                                           ! 3349 #asm
24881                                           !BCC_ASM
24882                       00000008            _biosfn_write_teletype.flag	set	8
24883                       00000006            _biosfn_write_teletype.attr	set	6
24884                       00000004            _biosfn_write_teletype.page	set	4
24885                       00000002            _biosfn_write_teletype.car	set	2
24886                       000064A5            biosfn_read_pel_mask:
24887 64A5           50                           push ax
24888 64A6           52                           push dx
24889 64A7           BA                   03C6    mov dx, # 0x3c6
24890 64AA           EC                           in al, dx
24891 64AB           88C3                         mov bl, al
24892 64AD           5A                           pop dx
24893 64AE           58                           pop ax
24894 64AF           C3                           ret
24895                                           ! 3359 endasm
24896                                           !BCC_ENDASM
24897                                           ! 3360 #asm
24898                                           !BCC_ASM
24899                       00000008            _biosfn_write_teletype.flag	set	8
24900                       00000006            _biosfn_write_teletype.attr	set	6
24901                       00000004            _biosfn_write_teletype.page	set	4
24902                       00000002            _biosfn_write_teletype.car	set	2
24903                       000064B0            biosfn_read_video_dac_state:
24904 64B0           50                           push ax
24905 64B1           52                           push dx
24906 64B2           BA                   03DA    mov dx, # 0x3da
24907 64B5           EC                           in al, dx
24908 64B6           BA                   03C0    mov dx, # 0x3c0
24909 64B9           B0                     10    mov al, #0x10
24910 64BB           EE                           out dx, al
24911 64BC           BA                   03C1    mov dx, # 0x3c1
24912 64BF           EC                           in al, dx
24913 64C0           88C3                         mov bl, al
24914 64C2           C0EB                   07    shr bl, 7
24915 64C5           BA                   03DA    mov dx, # 0x3da
24916 64C8           EC                           in al, dx
24917 64C9           BA                   03C0    mov dx, # 0x3c0
24918 64CC           B0                     14    mov al, #0x14
24919 64CE           EE                           out dx, al
24920 64CF           BA                   03C1    mov dx, # 0x3c1
24921 64D2           EC                           in al, dx
24922 64D3           88C7                         mov bh, al
24923 64D5           80E7                   0F    and bh, #0x0f
24924 64D8           F6C3                   01    test bl, #0x01
24925 64DB           75           03              jnz get_dac_16_page
24926 64DD           C0EF                   02    shr bh, 2
24927                       000064E0            get_dac_16_page:
24928 64E0           BA                   03DA    mov dx, # 0x3da
24929 64E3           EC                           in al, dx
24930 64E4           BA                   03C0    mov dx, # 0x3c0
24931 64E7           B0                     20    mov al, #0x20
24932 64E9           EE                           out dx, al
24933 64EA           5A                           pop dx
24934 64EB           58                           pop ax
24935 64EC           C3                           ret
24936                                           ! 3394 endasm
24937                                           !BCC_ENDASM
24938                                           ! 3395 static void biosfn_perform_gray_scale_summing (start,count)
24939                                           ! Register BX used in function biosfn_write_teletype
24940                                           ! 3396 Bit16u start;Bit16u count;
24941                       000064ED            _biosfn_perform_gray_scale_summing:
24942                                           !BCC_EOS
24943                                           !BCC_EOS
24944                                           ! 3397 {Bit8u r,g,b;
24945                                           !BCC_EOS
24946                                           ! 3398  Bit16u i;
24947                                           !BCC_EOS
24948                                           ! 3399  Bit16u index;
24949                                           !BCC_EOS
24950                                           ! 3400  inb(0x3da);
24951 64ED           55                         push	bp
24952 64EE           89E5                       mov	bp,sp
24953 64F0           83C4                   F8  add	sp,*-8
24954                                           ! Debug: list int = const $3DA (used reg = )
24955 64F3           B8                   03DA  mov	ax,#$3DA
24956 64F6           50                         push	ax
24957                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24958 64F7           E8         19BB            call	_inb
24959 64FA           44                         inc	sp
24960 64FB           44                         inc	sp
24961                                           !BCC_EOS
24962                                           ! 3401  outb(0x3c0,0x00);
24963                                           ! Debug: list int = const 0 (used reg = )
24964 64FC           31C0                       xor	ax,ax
24965 64FE           50                         push	ax
24966                                           ! Debug: list int = const $3C0 (used reg = )
24967 64FF           B8                   03C0  mov	ax,#$3C0
24968 6502           50                         push	ax
24969                                           ! Debug: func () void = outb+0 (used reg = )
24970 6503           E8         19C5            call	_outb
24971 6506           83C4                   04  add	sp,*4
24972                                           !BCC_EOS
24973                                           ! 3402  for( index = 0; index < count; index++ )
24974                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24975 6509           31C0                       xor	ax,ax
24976 650B           8946         F8            mov	-8[bp],ax
24977                                           !BCC_EOS
24978                                           !BCC_EOS
24979                                           ! 3403   {
24980 650E           E9         00BE            br 	.209
24981                       00006511            .20A:
24982                                           ! 3404    outb(0x3c7,start);
24983                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24984 6511           FF76         04            push	4[bp]
24985                                           ! Debug: list int = const $3C7 (used reg = )
24986 6514           B8                   03C7  mov	ax,#$3C7
24987 6517           50                         push	ax
24988                                           ! Debug: func () void = outb+0 (used reg = )
24989 6518           E8         19B0            call	_outb
24990 651B           83C4                   04  add	sp,*4
24991                                           !BCC_EOS
24992                                           ! 3405    r=inb( 0x3c9 );
24993                                           ! Debug: list int = const $3C9 (used reg = )
24994 651E           B8                   03C9  mov	ax,#$3C9
24995 6521           50                         push	ax
24996                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24997 6522           E8         1990            call	_inb
24998 6525           44                         inc	sp
24999 6526           44                         inc	sp
25000                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25001 6527           8846         FF            mov	-1[bp],al
25002                                           !BCC_EOS
25003                                           ! 3406    g=inb( 0x3c9 );
25004                                           ! Debug: list int = const $3C9 (used reg = )
25005 652A           B8                   03C9  mov	ax,#$3C9
25006 652D           50                         push	ax
25007                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25008 652E           E8         1984            call	_inb
25009 6531           44                         inc	sp
25010 6532           44                         inc	sp
25011                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25012 6533           8846         FE            mov	-2[bp],al
25013                                           !BCC_EOS
25014                                           ! 3407    b=inb( 0x3c9 );
25015                                           ! Debug: list int = const $3C9 (used reg = )
25016 6536           B8                   03C9  mov	ax,#$3C9
25017 6539           50                         push	ax
25018                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25019 653A           E8         1978            call	_inb
25020 653D           44                         inc	sp
25021 653E           44                         inc	sp
25022                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25023 653F           8846         FD            mov	-3[bp],al
25024                                           !BCC_EOS
25025                                           ! 3408    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25026                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25027                                           ! Debug: expression subtree swapping
25028 6542           8A46         FD            mov	al,-3[bp]
25029 6545           30E4                       xor	ah,ah
25030 6547           B9                   001C  mov	cx,*$1C
25031 654A           F7E9                       imul	cx
25032 654C           50                         push	ax
25033                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25034                                           ! Debug: expression subtree swapping
25035 654D           8A46         FE            mov	al,-2[bp]
25036 6550           30E4                       xor	ah,ah
25037 6552           B9                   0097  mov	cx,#$97
25038 6555           F7E9                       imul	cx
25039 6557           50                         push	ax
25040                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25041                                           ! Debug: expression subtree swapping
25042 6558           8A46         FF            mov	al,-1[bp]
25043 655B           30E4                       xor	ah,ah
25044 655D           B9                   004D  mov	cx,*$4D
25045 6560           F7E9                       imul	cx
25046                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25047 6562           0346         F4            add	ax,-$C[bp]
25048 6565           44                         inc	sp
25049 6566           44                         inc	sp
25050                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25051 6567           0346         F6            add	ax,-$A[bp]
25052 656A           44                         inc	sp
25053 656B           44                         inc	sp
25054                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25055                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25056 656C           05                   0080  add	ax,#$80
25057 656F           88E0                       mov	al,ah
25058 6571           30E4                       xor	ah,ah
25059                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25060 6573           8946         FA            mov	-6[bp],ax
25061                                           !BCC_EOS
25062                                           ! 3409    if(i>0x3f)i=0x3f;
25063                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25064 6576           8B46         FA            mov	ax,-6[bp]
25065 6579           3D                   003F  cmp	ax,*$3F
25066 657C           76           06            jbe 	.20B
25067                       0000657E            .20C:
25068                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25069 657E           B8                   003F  mov	ax,*$3F
25070 6581           8946         FA            mov	-6[bp],ax
25071                                           !BCC_EOS
25072                                           ! 3410    outb(0x3c8,start);
25073                       00006584            .20B:
25074                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25075 6584           FF76         04            push	4[bp]
25076                                           ! Debug: list int = const $3C8 (used reg = )
25077 6587           B8                   03C8  mov	ax,#$3C8
25078 658A           50                         push	ax
25079                                           ! Debug: func () void = outb+0 (used reg = )
25080 658B           E8         193D            call	_outb
25081 658E           83C4                   04  add	sp,*4
25082                                           !BCC_EOS
25083                                           ! 3411    outb( 0x3c9, i&0xff );
25084                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25085 6591           8A46         FA            mov	al,-6[bp]
25086                                           ! Debug: list unsigned char = al+0 (used reg = )
25087 6594           30E4                       xor	ah,ah
25088 6596           50                         push	ax
25089                                           ! Debug: list int = const $3C9 (used reg = )
25090 6597           B8                   03C9  mov	ax,#$3C9
25091 659A           50                         push	ax
25092                                           ! Debug: func () void = outb+0 (used reg = )
25093 659B           E8         192D            call	_outb
25094 659E           83C4                   04  add	sp,*4
25095                                           !BCC_EOS
25096                                           ! 3412    outb( 0x3c9, i&0xff );
25097                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25098 65A1           8A46         FA            mov	al,-6[bp]
25099                                           ! Debug: list unsigned char = al+0 (used reg = )
25100 65A4           30E4                       xor	ah,ah
25101 65A6           50                         push	ax
25102                                           ! Debug: list int = const $3C9 (used reg = )
25103 65A7           B8                   03C9  mov	ax,#$3C9
25104 65AA           50                         push	ax
25105                                           ! Debug: func () void = outb+0 (used reg = )
25106 65AB           E8         191D            call	_outb
25107 65AE           83C4                   04  add	sp,*4
25108                                           !BCC_EOS
25109                                           ! 3413    outb( 0x3c9, i&0xff );
25110                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25111 65B1           8A46         FA            mov	al,-6[bp]
25112                                           ! Debug: list unsigned char = al+0 (used reg = )
25113 65B4           30E4                       xor	ah,ah
25114 65B6           50                         push	ax
25115                                           ! Debug: list int = const $3C9 (used reg = )
25116 65B7           B8                   03C9  mov	ax,#$3C9
25117 65BA           50                         push	ax
25118                                           ! Debug: func () void = outb+0 (used reg = )
25119 65BB           E8         190D            call	_outb
25120 65BE           83C4                   04  add	sp,*4
25121                                           !BCC_EOS
25122                                           ! 3414    start++;
25123                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25124 65C1           8B46         04            mov	ax,4[bp]
25125 65C4           40                         inc	ax
25126 65C5           8946         04            mov	4[bp],ax
25127                                           !BCC_EOS
25128                                           ! 3415   }
25129                                           ! 3416  inb(0x3da);
25130                       000065C8            .208:
25131                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25132 65C8           8B46         F8            mov	ax,-8[bp]
25133 65CB           40                         inc	ax
25134 65CC           8946         F8            mov	-8[bp],ax
25135                       000065CF            .209:
25136                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25137 65CF           8B46         F8            mov	ax,-8[bp]
25138 65D2           3B46         06            cmp	ax,6[bp]
25139 65D5         0F82         FF38            blo 	.20A
25140                       000065D9            .20D:
25141                       000065D9            .207:
25142                                           ! Debug: list int = const $3DA (used reg = )
25143 65D9           B8                   03DA  mov	ax,#$3DA
25144 65DC           50                         push	ax
25145                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25146 65DD           E8         18D5            call	_inb
25147 65E0           44                         inc	sp
25148 65E1           44                         inc	sp
25149                                           !BCC_EOS
25150                                           ! 3417  outb(0x3c0,0x20);
25151                                           ! Debug: list int = const $20 (used reg = )
25152 65E2           B8                   0020  mov	ax,*$20
25153 65E5           50                         push	ax
25154                                           ! Debug: list int = const $3C0 (used reg = )
25155 65E6           B8                   03C0  mov	ax,#$3C0
25156 65E9           50                         push	ax
25157                                           ! Debug: func () void = outb+0 (used reg = )
25158 65EA           E8         18DE            call	_outb
25159 65ED           83C4                   04  add	sp,*4
25160                                           !BCC_EOS
25161                                           ! 3418 }
25162 65F0           89EC                       mov	sp,bp
25163 65F2           5D                         pop	bp
25164 65F3           C3                         ret
25165                                           ! 3419 static void get_font_access()
25166                                           ! 3420 {
25167                       000065F4            _get_font_access:
25168                                           ! 3421 #asm
25169                                           !BCC_ASM
25170 65F4           BA                   03C4   mov dx, # 0x3c4
25171 65F7           B8                   0100   mov ax, #0x0100
25172 65FA           EF                          out dx, ax
25173 65FB           B8                   0402   mov ax, #0x0402
25174 65FE           EF                          out dx, ax
25175 65FF           B8                   0704   mov ax, #0x0704
25176 6602           EF                          out dx, ax
25177 6603           B8                   0300   mov ax, #0x0300
25178 6606           EF                          out dx, ax
25179 6607           BA                   03CE   mov dx, # 0x3ce
25180 660A           B8                   0204   mov ax, #0x0204
25181 660D           EF                          out dx, ax
25182 660E           B8                   0005   mov ax, #0x0005
25183 6611           EF                          out dx, ax
25184 6612           B8                   0406   mov ax, #0x0406
25185 6615           EF                          out dx, ax
25186                                           ! 3438 endasm
25187                                           !BCC_ENDASM
25188                                           ! 3439 }
25189 6616           C3                         ret
25190                                           ! 3440 static void release_font_access()
25191                                           ! 3441 {
25192                       00006617            _release_font_access:
25193                                           ! 3442 #asm
25194                                           !BCC_ASM
25195 6617           BA                   03C4   mov dx, # 0x3c4
25196 661A           B8                   0100   mov ax, #0x0100
25197 661D           EF                          out dx, ax
25198 661E           B8                   0302   mov ax, #0x0302
25199 6621           EF                          out dx, ax
25200 6622           B8                   0304   mov ax, #0x0304
25201 6625           EF                          out dx, ax
25202 6626           B8                   0300   mov ax, #0x0300
25203 6629           EF                          out dx, ax
25204 662A           BA                   03CC   mov dx, # 0x3cc
25205 662D           EC                          in al, dx
25206 662E           24                     01   and al, #0x01
25207 6630           C0E0                   02   shl al, 2
25208 6633           0C                     0A   or al, #0x0a
25209 6635           88C4                        mov ah, al
25210 6637           B0                     06   mov al, #0x06
25211 6639           BA                   03CE   mov dx, # 0x3ce
25212 663C           EF                          out dx, ax
25213 663D           B8                   0004   mov ax, #0x0004
25214 6640           EF                          out dx, ax
25215 6641           B8                   1005   mov ax, #0x1005
25216 6644           EF                          out dx, ax
25217                                           ! 3465 endasm
25218                                           !BCC_ENDASM
25219                                           ! 3466 }
25220 6645           C3                         ret
25221                                           ! 3467 #asm
25222                                           !BCC_ASM
25223                       00006646            idiv_u:
25224 6646           31D2                         xor dx,dx
25225 6648           F7F3                         div bx
25226 664A           C3                           ret
25227                                           ! 3472 endasm
25228                                           !BCC_ENDASM
25229                                           ! 3473 static void set_scan_lines(lines) Bit8u lines;
25230                       0000664B            _set_scan_lines:
25231                                           !BCC_EOS
25232                                           ! 3474 {
25233                                           ! 3475  Bit16u crtc_addr,cols,page,vde;
25234                                           !BCC_EOS
25235                                           ! 3476  Bit8u crtc_r9,ovl,rows;
25236                                           !BCC_EOS
25237                                           ! 3477  crtc_addr = read_word(0x40,0x63);
25238 664B           55                         push	bp
25239 664C           89E5                       mov	bp,sp
25240 664E           83C4                   F4  add	sp,*-$C
25241                                           ! Debug: list int = const $63 (used reg = )
25242 6651           B8                   0063  mov	ax,*$63
25243 6654           50                         push	ax
25244                                           ! Debug: list int = const $40 (used reg = )
25245 6655           B8                   0040  mov	ax,*$40
25246 6658           50                         push	ax
25247                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25248 6659           E8         1816            call	_read_word
25249 665C           83C4                   04  add	sp,*4
25250                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25251 665F           8946         FE            mov	-2[bp],ax
25252                                           !BCC_EOS
25253                                           ! 3478  outb(crtc_addr, 0x09);
25254                                           ! Debug: list int = const 9 (used reg = )
25255 6662           B8                   0009  mov	ax,*9
25256 6665           50                         push	ax
25257                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25258 6666           FF76         FE            push	-2[bp]
25259                                           ! Debug: func () void = outb+0 (used reg = )
25260 6669           E8         185F            call	_outb
25261 666C           83C4                   04  add	sp,*4
25262                                           !BCC_EOS
25263                                           ! 3479  crtc_r9 = inb(crtc_addr+1);
25264                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25265 666F           8B46         FE            mov	ax,-2[bp]
25266                                           ! Debug: list unsigned int = ax+1 (used reg = )
25267 6672           40                         inc	ax
25268 6673           50                         push	ax
25269                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25270 6674           E8         183E            call	_inb
25271 6677           44                         inc	sp
25272 6678           44                         inc	sp
25273                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25274 6679           8846         F7            mov	-9[bp],al
25275                                           !BCC_EOS
25276                                           ! 3480  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25277                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25278 667C           8A46         04            mov	al,4[bp]
25279 667F           30E4                       xor	ah,ah
25280 6681           48                         dec	ax
25281 6682           50                         push	ax
25282                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25283 6683           8A46         F7            mov	al,-9[bp]
25284 6686           24                     E0  and	al,#$E0
25285                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25286 6688           30E4                       xor	ah,ah
25287 668A           0B46         F2            or	ax,-$E[bp]
25288 668D           44                         inc	sp
25289 668E           44                         inc	sp
25290                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25291 668F           8846         F7            mov	-9[bp],al
25292                                           !BCC_EOS
25293                                           ! 3481  outb(crtc_addr+1, crtc_r9)
25294                                           ! 3481 ;
25295                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25296 6692           8A46         F7            mov	al,-9[bp]
25297 6695           30E4                       xor	ah,ah
25298 6697           50                         push	ax
25299                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25300 6698           8B46         FE            mov	ax,-2[bp]
25301                                           ! Debug: list unsigned int = ax+1 (used reg = )
25302 669B           40                         inc	ax
25303 669C           50                         push	ax
25304                                           ! Debug: func () void = outb+0 (used reg = )
25305 669D           E8         182B            call	_outb
25306 66A0           83C4                   04  add	sp,*4
25307                                           !BCC_EOS
25308                                           ! 3482  if(lines==8)
25309                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25310 66A3           8A46         04            mov	al,4[bp]
25311 66A6           3C                     08  cmp	al,*8
25312 66A8           75           10            jne 	.20E
25313                       000066AA            .20F:
25314                                           ! 3483   {
25315                                           ! 3484    biosfn_set_cursor_shape(0x06,0x07);
25316                                           ! Debug: list int = const 7 (used reg = )
25317 66AA           B8                   0007  mov	ax,*7
25318 66AD           50                         push	ax
25319                                           ! Debug: list int = const 6 (used reg = )
25320 66AE           B8                   0006  mov	ax,*6
25321 66B1           50                         push	ax
25322                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25323 66B2           E8         DBB6            call	_biosfn_set_cursor_shape
25324 66B5           83C4                   04  add	sp,*4
25325                                           !BCC_EOS
25326                                           ! 3485   }
25327                                           ! 3486  else
25328                                           ! 3487   {
25329 66B8           EB           18            jmp .210
25330                       000066BA            .20E:
25331                                           ! 3488    biosfn_set_cursor_shape(lines-4,lines-3);
25332                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25333 66BA           8A46         04            mov	al,4[bp]
25334 66BD           30E4                       xor	ah,ah
25335                                           ! Debug: list unsigned int = ax-3 (used reg = )
25336 66BF           05                   FFFD  add	ax,*-3
25337 66C2           50                         push	ax
25338                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25339 66C3           8A46         04            mov	al,4[bp]
25340 66C6           30E4                       xor	ah,ah
25341                                           ! Debug: list unsigned int = ax-4 (used reg = )
25342 66C8           05                   FFFC  add	ax,*-4
25343 66CB           50                         push	ax
25344                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25345 66CC           E8         DB9C            call	_biosfn_set_cursor_shape
25346 66CF           83C4                   04  add	sp,*4
25347                                           !BCC_EOS
25348                                           ! 3489   }
25349                                           ! 3490  write_word(0x40,0x85, lines);
25350                       000066D2            .210:
25351                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25352 66D2           8A46         04            mov	al,4[bp]
25353 66D5           30E4                       xor	ah,ah
25354 66D7           50                         push	ax
25355                                           ! Debug: list int = const $85 (used reg = )
25356 66D8           B8                   0085  mov	ax,#$85
25357 66DB           50                         push	ax
25358                                           ! Debug: list int = const $40 (used reg = )
25359 66DC           B8                   0040  mov	ax,*$40
25360 66DF           50                         push	ax
25361                                           ! Debug: func () void = write_word+0 (used reg = )
25362 66E0           E8         17BA            call	_write_word
25363 66E3           83C4                   06  add	sp,*6
25364                                           !BCC_EOS
25365                                           ! 3491  outb(crtc_addr, 0x12);
25366                                           ! Debug: list int = const $12 (used reg = )
25367 66E6           B8                   0012  mov	ax,*$12
25368 66E9           50                         push	ax
25369                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25370 66EA           FF76         FE            push	-2[bp]
25371                                           ! Debug: func () void = outb+0 (used reg = )
25372 66ED           E8         17DB            call	_outb
25373 66F0           83C4                   04  add	sp,*4
25374                                           !BCC_EOS
25375                                           ! 3492  vde = inb(crtc_addr+1);
25376                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25377 66F3           8B46         FE            mov	ax,-2[bp]
25378                                           ! Debug: list unsigned int = ax+1 (used reg = )
25379 66F6           40                         inc	ax
25380 66F7           50                         push	ax
25381                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25382 66F8           E8         17BA            call	_inb
25383 66FB           44                         inc	sp
25384 66FC           44                         inc	sp
25385                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25386 66FD           30E4                       xor	ah,ah
25387 66FF           8946         F8            mov	-8[bp],ax
25388                                           !BCC_EOS
25389                                           ! 3493  outb(crtc_addr, 0x07);
25390                                           ! Debug: list int = const 7 (used reg = )
25391 6702           B8                   0007  mov	ax,*7
25392 6705           50                         push	ax
25393                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25394 6706           FF76         FE            push	-2[bp]
25395                                           ! Debug: func () void = outb+0 (used reg = )
25396 6709           E8         17BF            call	_outb
25397 670C           83C4                   04  add	sp,*4
25398                                           !BCC_EOS
25399                                           ! 3494  ovl = inb(crtc_addr+1);
25400                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25401 670F           8B46         FE            mov	ax,-2[bp]
25402                                           ! Debug: list unsigned int = ax+1 (used reg = )
25403 6712           40                         inc	ax
25404 6713           50                         push	ax
25405                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25406 6714           E8         179E            call	_inb
25407 6717           44                         inc	sp
25408 6718           44                         inc	sp
25409                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25410 6719           8846         F6            mov	-$A[bp],al
25411                                           !BCC_EOS
25412                                           ! 3495  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25413                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25414 671C           8A46         F6            mov	al,-$A[bp]
25415 671F           24                     40  and	al,*$40
25416                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25417 6721           30E4                       xor	ah,ah
25418 6723           B1                     03  mov	cl,*3
25419 6725           D3E0                       shl	ax,cl
25420 6727           50                         push	ax
25421                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25422 6728           8A46         F6            mov	al,-$A[bp]
25423 672B           24                     02  and	al,*2
25424                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25425 672D           30E4                       xor	ah,ah
25426 672F           B1                     07  mov	cl,*7
25427 6731           D3E0                       shl	ax,cl
25428                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25429 6733           0346         F2            add	ax,-$E[bp]
25430 6736           44                         inc	sp
25431 6737           44                         inc	sp
25432                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25433                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25434 6738           40                         inc	ax
25435 6739           0346         F8            add	ax,-8[bp]
25436 673C           8946         F8            mov	-8[bp],ax
25437                                           !BCC_EOS
25438                                           ! 3496  rows = vde / lines;
25439                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25440 673F           8A46         04            mov	al,4[bp]
25441 6742           30E4                       xor	ah,ah
25442 6744           89C3                       mov	bx,ax
25443 6746           8B46         F8            mov	ax,-8[bp]
25444 6749           E8         FEFA            call	idiv_u
25445                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25446 674C           8846         F5            mov	-$B[bp],al
25447                                           !BCC_EOS
25448                                           ! 3497  write_byte(0x40,0x84, rows-1);
25449                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25450 674F           8A46         F5            mov	al,-$B[bp]
25451 6752           30E4                       xor	ah,ah
25452                                           ! Debug: list unsigned int = ax-1 (used reg = )
25453 6754           48                         dec	ax
25454 6755           50                         push	ax
25455                                           ! Debug: list int = const $84 (used reg = )
25456 6756           B8                   0084  mov	ax,#$84
25457 6759           50                         push	ax
25458                                           ! Debug: list int = const $40 (used reg = )
25459 675A           B8                   0040  mov	ax,*$40
25460 675D           50                         push	ax
25461                                           ! Debug: func () void = write_byte+0 (used reg = )
25462 675E           E8         1724            call	_write_byte
25463 6761           83C4                   06  add	sp,*6
25464                                           !BCC_EOS
25465                                           ! 3498  cols = read_word(0x40,0x4A);
25466                                           ! Debug: list int = const $4A (used reg = )
25467 6764           B8                   004A  mov	ax,*$4A
25468 6767           50                         push	ax
25469                                           ! Debug: list int = const $40 (used reg = )
25470 6768           B8                   0040  mov	ax,*$40
25471 676B           50                         push	ax
25472                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25473 676C           E8         1703            call	_read_word
25474 676F           83C4                   04  add	sp,*4
25475                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25476 6772           8946         FC            mov	-4[bp],ax
25477                                           !BCC_EOS
25478                                           ! 3499  write_word(0x40,0x4C, rows * cols * 2);
25479                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25480 6775           8A46         F5            mov	al,-$B[bp]
25481 6778           30E4                       xor	ah,ah
25482 677A           8B4E         FC            mov	cx,-4[bp]
25483 677D           F7E9                       imul	cx
25484                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25485 677F           D1E0                       shl	ax,*1
25486                                           ! Debug: list unsigned int = ax+0 (used reg = )
25487 6781           50                         push	ax
25488                                           ! Debug: list int = const $4C (used reg = )
25489 6782           B8                   004C  mov	ax,*$4C
25490 6785           50                         push	ax
25491                                           ! Debug: list int = const $40 (used reg = )
25492 6786           B8                   0040  mov	ax,*$40
25493 6789           50                         push	ax
25494                                           ! Debug: func () void = write_word+0 (used reg = )
25495 678A           E8         1710            call	_write_word
25496 678D           83C4                   06  add	sp,*6
25497                                           !BCC_EOS
25498                                           ! 3500 }
25499 6790           89EC                       mov	sp,bp
25500 6792           5D                         pop	bp
25501 6793           C3                         ret
25502                                           ! 3501 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25503                                           ! Register BX used in function set_scan_lines
25504                       00006794            _biosfn_load_text_user_pat:
25505                                           !BCC_EOS
25506                                           !BCC_EOS
25507                                           !BCC_EOS
25508                                           !BCC_EOS
25509                                           !BCC_EOS
25510                                           !BCC_EOS
25511                                           !BCC_EOS
25512                                           ! 3502 {
25513                                           ! 3503  Bit16u blockaddr,dest,i,src;
25514                                           !BCC_EOS
25515                                           ! 3504  get_font_access();
25516 6794           55                         push	bp
25517 6795           89E5                       mov	bp,sp
25518 6797           83C4                   F8  add	sp,*-8
25519                                           ! Debug: func () void = get_font_access+0 (used reg = )
25520 679A           E8         FE57            call	_get_font_access
25521                                           !BCC_EOS
25522                                           ! 3505  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25523                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25524 679D           8A46         0E            mov	al,$E[bp]
25525 67A0           24                     04  and	al,*4
25526                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25527 67A2           30E4                       xor	ah,ah
25528 67A4           88C4                       mov	ah,al
25529 67A6           30C0                       xor	al,al
25530 67A8           B1                     03  mov	cl,*3
25531 67AA           D3E0                       shl	ax,cl
25532 67AC           50                         push	ax
25533                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25534 67AD           8A46         0E            mov	al,$E[bp]
25535 67B0           24                     03  and	al,*3
25536                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25537 67B2           30E4                       xor	ah,ah
25538 67B4           88C4                       mov	ah,al
25539 67B6           30C0                       xor	al,al
25540 67B8           B1                     06  mov	cl,*6
25541 67BA           D3E0                       shl	ax,cl
25542                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25543 67BC           0346         F6            add	ax,-$A[bp]
25544 67BF           44                         inc	sp
25545 67C0           44                         inc	sp
25546                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25547 67C1           8946         FE            mov	-2[bp],ax
25548                                           !BCC_EOS
25549                                           ! 3506  for(i=0;i<CX;i++)
25550                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25551 67C4           31C0                       xor	ax,ax
25552 67C6           8946         FA            mov	-6[bp],ax
25553                                           !BCC_EOS
25554                                           !BCC_EOS
25555                                           ! 3507   {
25556 67C9           EB           44            jmp .213
25557                       000067CB            .214:
25558                                           ! 3508    src = BP + i * BH;
25559                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25560 67CB           8A46         10            mov	al,$10[bp]
25561 67CE           30E4                       xor	ah,ah
25562 67D0           89C3                       mov	bx,ax
25563 67D2           8B46         FA            mov	ax,-6[bp]
25564 67D5           89D9                       mov	cx,bx
25565 67D7           F7E9                       imul	cx
25566                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25567                                           ! Debug: expression subtree swapping
25568 67D9           0346         08            add	ax,8[bp]
25569                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25570 67DC           8946         F8            mov	-8[bp],ax
25571                                           !BCC_EOS
25572                                           ! 3509    dest = blockaddr + (DX + i) * 32;
25573                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25574 67DF           8B46         0C            mov	ax,$C[bp]
25575 67E2           0346         FA            add	ax,-6[bp]
25576                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25577 67E5           B1                     05  mov	cl,*5
25578 67E7           D3E0                       shl	ax,cl
25579                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25580                                           ! Debug: expression subtree swapping
25581 67E9           0346         FE            add	ax,-2[bp]
25582                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25583 67EC           8946         FC            mov	-4[bp],ax
25584                                           !BCC_EOS
25585                                           ! 3510    memcpyb(0xA000, dest, ES, src, BH);
25586                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25587 67EF           8A46         10            mov	al,$10[bp]
25588 67F2           30E4                       xor	ah,ah
25589 67F4           50                         push	ax
25590                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25591 67F5           FF76         F8            push	-8[bp]
25592                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25593 67F8           FF76         06            push	6[bp]
25594                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25595 67FB           FF76         FC            push	-4[bp]
25596                                           ! Debug: list unsigned int = const $A000 (used reg = )
25597 67FE           B8                   A000  mov	ax,#$A000
25598 6801           50                         push	ax
25599                                           ! Debug: func () void = memcpyb+0 (used reg = )
25600 6802           E8         15FA            call	_memcpyb
25601 6805           83C4                   0A  add	sp,*$A
25602                                           !BCC_EOS
25603                                           ! 3511   }
25604                                           ! 3512  release_font_access();
25605                       00006808            .212:
25606                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25607 6808           8B46         FA            mov	ax,-6[bp]
25608 680B           40                         inc	ax
25609 680C           8946         FA            mov	-6[bp],ax
25610                       0000680F            .213:
25611                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25612 680F           8B46         FA            mov	ax,-6[bp]
25613 6812           3B46         0A            cmp	ax,$A[bp]
25614 6815           72           B4            jb 	.214
25615                       00006817            .215:
25616                       00006817            .211:
25617                                           ! Debug: func () void = release_font_access+0 (used reg = )
25618 6817           E8         FDFD            call	_release_font_access
25619                                           !BCC_EOS
25620                                           ! 3513  if(AL>=0x10)
25621                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25622 681A           8A46         04            mov	al,4[bp]
25623 681D           3C                     10  cmp	al,*$10
25624 681F           72           0B            jb  	.216
25625                       00006821            .217:
25626                                           ! 3514   {
25627                                           ! 3515    set_scan_lines(BH);
25628                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25629 6821           8A46         10            mov	al,$10[bp]
25630 6824           30E4                       xor	ah,ah
25631 6826           50                         push	ax
25632                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25633 6827           E8         FE21            call	_set_scan_lines
25634 682A           44                         inc	sp
25635 682B           44                         inc	sp
25636                                           !BCC_EOS
25637                                           ! 3516   }
25638                                           ! 3517 }
25639                       0000682C            .216:
25640 682C           89EC                       mov	sp,bp
25641 682E           5D                         pop	bp
25642 682F           C3                         ret
25643                                           ! 3518 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25644                                           ! Register BX used in function biosfn_load_text_user_pat
25645                       00006830            _biosfn_load_text_8_14_pat:
25646                                           !BCC_EOS
25647                                           !BCC_EOS
25648                                           ! 3519 {
25649                                           ! 3520  Bit16u blockaddr,dest,i,src;
25650                                           !BCC_EOS
25651                                           ! 3521  get_font_access();
25652 6830           55                         push	bp
25653 6831           89E5                       mov	bp,sp
25654 6833           83C4                   F8  add	sp,*-8
25655                                           ! Debug: func () void = get_font_access+0 (used reg = )
25656 6836           E8         FDBB            call	_get_font_access
25657                                           !BCC_EOS
25658                                           ! 3522  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25659                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25660 6839           8A46         06            mov	al,6[bp]
25661 683C           24                     04  and	al,*4
25662                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25663 683E           30E4                       xor	ah,ah
25664 6840           88C4                       mov	ah,al
25665 6842           30C0                       xor	al,al
25666 6844           B1                     03  mov	cl,*3
25667 6846           D3E0                       shl	ax,cl
25668 6848           50                         push	ax
25669                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25670 6849           8A46         06            mov	al,6[bp]
25671 684C           24                     03  and	al,*3
25672                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25673 684E           30E4                       xor	ah,ah
25674 6850           88C4                       mov	ah,al
25675 6852           30C0                       xor	al,al
25676 6854           B1                     06  mov	cl,*6
25677 6856           D3E0                       shl	ax,cl
25678                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25679 6858           0346         F6            add	ax,-$A[bp]
25680 685B           44                         inc	sp
25681 685C           44                         inc	sp
25682                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25683 685D           8946         FE            mov	-2[bp],ax
25684                                           !BCC_EOS
25685                                           ! 3523  for(i=0;i<0x100;i++)
25686                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25687 6860           31C0                       xor	ax,ax
25688 6862           8946         FA            mov	-6[bp],ax
25689                                           !BCC_EOS
25690                                           !BCC_EOS
25691                                           ! 3524   {
25692 6865           EB           41            jmp .21A
25693                       00006867            .21B:
25694                                           ! 3525    src = i * 14;
25695                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25696 6867           8B46         FA            mov	ax,-6[bp]
25697 686A           89C2                       mov	dx,ax
25698 686C           B1                     03  mov	cl,*3
25699 686E           D3E0                       shl	ax,cl
25700 6870           29D0                       sub	ax,dx
25701 6872           D1E0                       shl	ax,*1
25702                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25703 6874           8946         F8            mov	-8[bp],ax
25704                                           !BCC_EOS
25705                                           ! 3526    dest = blockaddr + i * 32;
25706                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25707 6877           8B46         FA            mov	ax,-6[bp]
25708 687A           B1                     05  mov	cl,*5
25709 687C           D3E0                       shl	ax,cl
25710                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25711                                           ! Debug: expression subtree swapping
25712 687E           0346         FE            add	ax,-2[bp]
25713                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25714 6881           8946         FC            mov	-4[bp],ax
25715                                           !BCC_EOS
25716                                           ! 3527    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25717                                           ! Debug: list int = const $E (used reg = )
25718 6884           B8                   000E  mov	ax,*$E
25719 6887           50                         push	ax
25720                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25721 6888           8B5E         F8            mov	bx,-8[bp]
25722                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25723                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25724 688B           81C3                 179B  add	bx,#_vgafont14
25725 688F           53                         push	bx
25726                                           ! Debug: list unsigned int = const $C000 (used reg = )
25727 6890           B8                   C000  mov	ax,#$C000
25728 6893           50                         push	ax
25729                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25730 6894           FF76         FC            push	-4[bp]
25731                                           ! Debug: list unsigned int = const $A000 (used reg = )
25732 6897           B8                   A000  mov	ax,#$A000
25733 689A           50                         push	ax
25734                                           ! Debug: func () void = memcpyb+0 (used reg = )
25735 689B           E8         1561            call	_memcpyb
25736 689E           83C4                   0A  add	sp,*$A
25737                                           !BCC_EOS
25738                                           ! 3528   }
25739                                           ! 3529  release_font_access();
25740                       000068A1            .219:
25741                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25742 68A1           8B46         FA            mov	ax,-6[bp]
25743 68A4           40                         inc	ax
25744 68A5           8946         FA            mov	-6[bp],ax
25745                       000068A8            .21A:
25746                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25747 68A8           8B46         FA            mov	ax,-6[bp]
25748 68AB           3D                   0100  cmp	ax,#$100
25749 68AE           72           B7            jb 	.21B
25750                       000068B0            .21C:
25751                       000068B0            .218:
25752                                           ! Debug: func () void = release_font_access+0 (used reg = )
25753 68B0           E8         FD64            call	_release_font_access
25754                                           !BCC_EOS
25755                                           ! 3530  if(AL>=0x10)
25756                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25757 68B3           8A46         04            mov	al,4[bp]
25758 68B6           3C                     10  cmp	al,*$10
25759 68B8           72           09            jb  	.21D
25760                       000068BA            .21E:
25761                                           ! 3531   {
25762                                           ! 3532    set_scan_lines(14);
25763                                           ! Debug: list int = const $E (used reg = )
25764 68BA           B8                   000E  mov	ax,*$E
25765 68BD           50                         push	ax
25766                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25767 68BE           E8         FD8A            call	_set_scan_lines
25768 68C1           44                         inc	sp
25769 68C2           44                         inc	sp
25770                                           !BCC_EOS
25771                                           ! 3533   }
25772                                           ! 3534 }
25773                       000068C3            .21D:
25774 68C3           89EC                       mov	sp,bp
25775 68C5           5D                         pop	bp
25776 68C6           C3                         ret
25777                                           ! 3535 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25778                                           ! Register BX used in function biosfn_load_text_8_14_pat
25779                       000068C7            _biosfn_load_text_8_8_pat:
25780                                           !BCC_EOS
25781                                           !BCC_EOS
25782                                           ! 3536 {
25783                                           ! 3537  Bit16u blockaddr,dest,i,src;
25784                                           !BCC_EOS
25785                                           ! 3538  get_font_access();
25786 68C7           55                         push	bp
25787 68C8           89E5                       mov	bp,sp
25788 68CA           83C4                   F8  add	sp,*-8
25789                                           ! Debug: func () void = get_font_access+0 (used reg = )
25790 68CD           E8         FD24            call	_get_font_access
25791                                           !BCC_EOS
25792                                           ! 3539  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25793                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25794 68D0           8A46         06            mov	al,6[bp]
25795 68D3           24                     04  and	al,*4
25796                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25797 68D5           30E4                       xor	ah,ah
25798 68D7           88C4                       mov	ah,al
25799 68D9           30C0                       xor	al,al
25800 68DB           B1                     03  mov	cl,*3
25801 68DD           D3E0                       shl	ax,cl
25802 68DF           50                         push	ax
25803                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25804 68E0           8A46         06            mov	al,6[bp]
25805 68E3           24                     03  and	al,*3
25806                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25807 68E5           30E4                       xor	ah,ah
25808 68E7           88C4                       mov	ah,al
25809 68E9           30C0                       xor	al,al
25810 68EB           B1                     06  mov	cl,*6
25811 68ED           D3E0                       shl	ax,cl
25812                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25813 68EF           0346         F6            add	ax,-$A[bp]
25814 68F2           44                         inc	sp
25815 68F3           44                         inc	sp
25816                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25817 68F4           8946         FE            mov	-2[bp],ax
25818                                           !BCC_EOS
25819                                           ! 3540  for(i=0;i<0x100;i++)
25820                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25821 68F7           31C0                       xor	ax,ax
25822 68F9           8946         FA            mov	-6[bp],ax
25823                                           !BCC_EOS
25824                                           !BCC_EOS
25825                                           ! 3541   {
25826 68FC           EB           3B            jmp .221
25827                       000068FE            .222:
25828                                           ! 3542    src = i * 8;
25829                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25830 68FE           8B46         FA            mov	ax,-6[bp]
25831 6901           B1                     03  mov	cl,*3
25832 6903           D3E0                       shl	ax,cl
25833                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25834 6905           8946         F8            mov	-8[bp],ax
25835                                           !BCC_EOS
25836                                           ! 3543    dest = blockaddr + i * 32;
25837                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25838 6908           8B46         FA            mov	ax,-6[bp]
25839 690B           B1                     05  mov	cl,*5
25840 690D           D3E0                       shl	ax,cl
25841                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25842                                           ! Debug: expression subtree swapping
25843 690F           0346         FE            add	ax,-2[bp]
25844                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25845 6912           8946         FC            mov	-4[bp],ax
25846                                           !BCC_EOS
25847                                           ! 3544    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25848                                           ! Debug: list int = const 8 (used reg = )
25849 6915           B8                   0008  mov	ax,*8
25850 6918           50                         push	ax
25851                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25852 6919           8B5E         F8            mov	bx,-8[bp]
25853                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25854                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25855 691C           81C3                 0F9B  add	bx,#_vgafont8
25856 6920           53                         push	bx
25857                                           ! Debug: list unsigned int = const $C000 (used reg = )
25858 6921           B8                   C000  mov	ax,#$C000
25859 6924           50                         push	ax
25860                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25861 6925           FF76         FC            push	-4[bp]
25862                                           ! Debug: list unsigned int = const $A000 (used reg = )
25863 6928           B8                   A000  mov	ax,#$A000
25864 692B           50                         push	ax
25865                                           ! Debug: func () void = memcpyb+0 (used reg = )
25866 692C           E8         14D0            call	_memcpyb
25867 692F           83C4                   0A  add	sp,*$A
25868                                           !BCC_EOS
25869                                           ! 3545   }
25870                                           ! 3546  release_font_access();
25871                       00006932            .220:
25872                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25873 6932           8B46         FA            mov	ax,-6[bp]
25874 6935           40                         inc	ax
25875 6936           8946         FA            mov	-6[bp],ax
25876                       00006939            .221:
25877                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25878 6939           8B46         FA            mov	ax,-6[bp]
25879 693C           3D                   0100  cmp	ax,#$100
25880 693F           72           BD            jb 	.222
25881                       00006941            .223:
25882                       00006941            .21F:
25883                                           ! Debug: func () void = release_font_access+0 (used reg = )
25884 6941           E8         FCD3            call	_release_font_access
25885                                           !BCC_EOS
25886                                           ! 3547  if(AL>=0x10)
25887                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25888 6944           8A46         04            mov	al,4[bp]
25889 6947           3C                     10  cmp	al,*$10
25890 6949           72           09            jb  	.224
25891                       0000694B            .225:
25892                                           ! 3548   {
25893                                           ! 3549    set_scan_lines(8);
25894                                           ! Debug: list int = const 8 (used reg = )
25895 694B           B8                   0008  mov	ax,*8
25896 694E           50                         push	ax
25897                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25898 694F           E8         FCF9            call	_set_scan_lines
25899 6952           44                         inc	sp
25900 6953           44                         inc	sp
25901                                           !BCC_EOS
25902                                           ! 3550   }
25903                                           ! 3551 }
25904                       00006954            .224:
25905 6954           89EC                       mov	sp,bp
25906 6956           5D                         pop	bp
25907 6957           C3                         ret
25908                                           ! 3552 #asm
25909                                           !BCC_ASM
25910                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25911                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25912                       00006958            biosfn_set_text_block_specifier:
25913 6958           50                           push ax
25914 6959           52                           push dx
25915 695A           BA                   03C4    mov dx, # 0x3c4
25916 695D           88DC                         mov ah, bl
25917 695F           B0                     03    mov al, #0x03
25918 6961           EF                           out dx, ax
25919 6962           5A                           pop dx
25920 6963           58                           pop ax
25921 6964           C3                           ret
25922                                           ! 3563 endasm
25923                                           !BCC_ENDASM
25924                                           ! 3564 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25925                                           ! Register BX used in function biosfn_load_text_8_8_pat
25926                       00006965            _biosfn_load_text_8_16_pat:
25927                                           !BCC_EOS
25928                                           !BCC_EOS
25929                                           ! 3565 {
25930                                           ! 3566  Bit16u blockaddr,dest,i,src;
25931                                           !BCC_EOS
25932                                           ! 3567  get_font_access();
25933 6965           55                         push	bp
25934 6966           89E5                       mov	bp,sp
25935 6968           83C4                   F8  add	sp,*-8
25936                                           ! Debug: func () void = get_font_access+0 (used reg = )
25937 696B           E8         FC86            call	_get_font_access
25938                                           !BCC_EOS
25939                                           ! 3568  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25940                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25941 696E           8A46         06            mov	al,6[bp]
25942 6971           24                     04  and	al,*4
25943                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25944 6973           30E4                       xor	ah,ah
25945 6975           88C4                       mov	ah,al
25946 6977           30C0                       xor	al,al
25947 6979           B1                     03  mov	cl,*3
25948 697B           D3E0                       shl	ax,cl
25949 697D           50                         push	ax
25950                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25951 697E           8A46         06            mov	al,6[bp]
25952 6981           24                     03  and	al,*3
25953                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25954 6983           30E4                       xor	ah,ah
25955 6985           88C4                       mov	ah,al
25956 6987           30C0                       xor	al,al
25957 6989           B1                     06  mov	cl,*6
25958 698B           D3E0                       shl	ax,cl
25959                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25960 698D           0346         F6            add	ax,-$A[bp]
25961 6990           44                         inc	sp
25962 6991           44                         inc	sp
25963                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25964 6992           8946         FE            mov	-2[bp],ax
25965                                           !BCC_EOS
25966                                           ! 3569  for(i=0;i<0x100;i++)
25967                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25968 6995           31C0                       xor	ax,ax
25969 6997           8946         FA            mov	-6[bp],ax
25970                                           !BCC_EOS
25971                                           !BCC_EOS
25972                                           ! 3570   {
25973 699A           EB           3B            jmp .228
25974                       0000699C            .229:
25975                                           ! 3571    src = i * 16;
25976                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25977 699C           8B46         FA            mov	ax,-6[bp]
25978 699F           B1                     04  mov	cl,*4
25979 69A1           D3E0                       shl	ax,cl
25980                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25981 69A3           8946         F8            mov	-8[bp],ax
25982                                           !BCC_EOS
25983                                           ! 3572    dest = blockaddr + i * 32;
25984                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25985 69A6           8B46         FA            mov	ax,-6[bp]
25986 69A9           B1                     05  mov	cl,*5
25987 69AB           D3E0                       shl	ax,cl
25988                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25989                                           ! Debug: expression subtree swapping
25990 69AD           0346         FE            add	ax,-2[bp]
25991                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25992 69B0           8946         FC            mov	-4[bp],ax
25993                                           !BCC_EOS
25994                                           ! 3573    memcpyb(0xA000, dest, 0xC000, vgafont16
25995                                           ! 3573 +src, 16);
25996                                           ! Debug: list int = const $10 (used reg = )
25997 69B3           B8                   0010  mov	ax,*$10
25998 69B6           50                         push	ax
25999                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26000 69B7           8B5E         F8            mov	bx,-8[bp]
26001                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26002                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26003 69BA           81C3                 259B  add	bx,#_vgafont16
26004 69BE           53                         push	bx
26005                                           ! Debug: list unsigned int = const $C000 (used reg = )
26006 69BF           B8                   C000  mov	ax,#$C000
26007 69C2           50                         push	ax
26008                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26009 69C3           FF76         FC            push	-4[bp]
26010                                           ! Debug: list unsigned int = const $A000 (used reg = )
26011 69C6           B8                   A000  mov	ax,#$A000
26012 69C9           50                         push	ax
26013                                           ! Debug: func () void = memcpyb+0 (used reg = )
26014 69CA           E8         1432            call	_memcpyb
26015 69CD           83C4                   0A  add	sp,*$A
26016                                           !BCC_EOS
26017                                           ! 3574   }
26018                                           ! 3575  release_font_access();
26019                       000069D0            .227:
26020                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26021 69D0           8B46         FA            mov	ax,-6[bp]
26022 69D3           40                         inc	ax
26023 69D4           8946         FA            mov	-6[bp],ax
26024                       000069D7            .228:
26025                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26026 69D7           8B46         FA            mov	ax,-6[bp]
26027 69DA           3D                   0100  cmp	ax,#$100
26028 69DD           72           BD            jb 	.229
26029                       000069DF            .22A:
26030                       000069DF            .226:
26031                                           ! Debug: func () void = release_font_access+0 (used reg = )
26032 69DF           E8         FC35            call	_release_font_access
26033                                           !BCC_EOS
26034                                           ! 3576  if(AL>=0x10)
26035                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26036 69E2           8A46         04            mov	al,4[bp]
26037 69E5           3C                     10  cmp	al,*$10
26038 69E7           72           09            jb  	.22B
26039                       000069E9            .22C:
26040                                           ! 3577   {
26041                                           ! 3578    set_scan_lines(16);
26042                                           ! Debug: list int = const $10 (used reg = )
26043 69E9           B8                   0010  mov	ax,*$10
26044 69EC           50                         push	ax
26045                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26046 69ED           E8         FC5B            call	_set_scan_lines
26047 69F0           44                         inc	sp
26048 69F1           44                         inc	sp
26049                                           !BCC_EOS
26050                                           ! 3579   }
26051                                           ! 3580 }
26052                       000069F2            .22B:
26053 69F2           89EC                       mov	sp,bp
26054 69F4           5D                         pop	bp
26055 69F5           C3                         ret
26056                                           ! 3581 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26057                                           ! Register BX used in function biosfn_load_text_8_16_pat
26058                       000069F6            _biosfn_load_gfx_8_8_chars:
26059                                           !BCC_EOS
26060                                           !BCC_EOS
26061                                           ! 3582 {
26062                                           ! 3583     write_word(0x0, 0x1F*4, BP);
26063 69F6           55                         push	bp
26064 69F7           89E5                       mov	bp,sp
26065                                           ! Debug: list unsigned short BP = [S+2+4] (used reg = )
26066 69F9           FF76         06            push	6[bp]
26067                                           ! Debug: list int = const $7C (used reg = )
26068 69FC           B8                   007C  mov	ax,*$7C
26069 69FF           50                         push	ax
26070                                           ! Debug: list int = const 0 (used reg = )
26071 6A00           31C0                       xor	ax,ax
26072 6A02           50                         push	ax
26073                                           ! Debug: func () void = write_word+0 (used reg = )
26074 6A03           E8         1497            call	_write_word
26075 6A06           89EC                       mov	sp,bp
26076                                           !BCC_EOS
26077                                           ! 3584     write_word(0x0, 0x1F*4+2, ES);
26078                                           ! Debug: list unsigned short ES = [S+2+2] (used reg = )
26079 6A08           FF76         04            push	4[bp]
26080                                           ! Debug: list int = const $7E (used reg = )
26081 6A0B           B8                   007E  mov	ax,*$7E
26082 6A0E           50                         push	ax
26083                                           ! Debug: list int = const 0 (used reg = )
26084 6A0F           31C0                       xor	ax,ax
26085 6A11           50                         push	ax
26086                                           ! Debug: func () void = write_word+0 (used reg = )
26087 6A12           E8         1488            call	_write_word
26088 6A15           89EC                       mov	sp,bp
26089                                           !BCC_EOS
26090                                           ! 3585     write_byte(0x40, 0x85, 8);
26091                                           ! Debug: list int = const 8 (used reg = )
26092 6A17           B8                   0008  mov	ax,*8
26093 6A1A           50                         push	ax
26094                                           ! Debug: list int = const $85 (used reg = )
26095 6A1B           B8                   0085  mov	ax,#$85
26096 6A1E           50                         push	ax
26097                                           ! Debug: list int = const $40 (used reg = )
26098 6A1F           B8                   0040  mov	ax,*$40
26099 6A22           50                         push	ax
26100                                           ! Debug: func () void = write_byte+0 (used reg = )
26101 6A23           E8         145F            call	_write_byte
26102 6A26           89EC                       mov	sp,bp
26103                                           !BCC_EOS
26104                                           ! 3586 }
26105 6A28           5D                         pop	bp
26106 6A29           C3                         ret
26107                                           ! 3587 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26108                       00006A2A            _biosfn_load_gfx_user_chars:
26109                                           !BCC_EOS
26110                                           !BCC_EOS
26111                                           !BCC_EOS
26112                                           !BCC_EOS
26113                                           !BCC_EOS
26114                                           ! 3588 {
26115                                           ! 3589     Bit8u mode; Bit8u line;
26116                                           !BCC_EOS
26117                                           !BCC_EOS
26118                                           ! 3590     write_word(0x0, 0x43*4, BP);
26119 6A2A           55                         push	bp
26120 6A2B           89E5                       mov	bp,sp
26121 6A2D           4C                         dec	sp
26122 6A2E           4C                         dec	sp
26123                                           ! Debug: list unsigned short BP = [S+4+4] (used reg = )
26124 6A2F           FF76         06            push	6[bp]
26125                                           ! Debug: list int = const $10C (used reg = )
26126 6A32           B8                   010C  mov	ax,#$10C
26127 6A35           50                         push	ax
26128                                           ! Debug: list int = const 0 (used reg = )
26129 6A36           31C0                       xor	ax,ax
26130 6A38           50                         push	ax
26131                                           ! Debug: func () void = write_word+0 (used reg = )
26132 6A39           E8         1461            call	_write_word
26133 6A3C           83C4                   06  add	sp,*6
26134                                           !BCC_EOS
26135                                           ! 3591     write_word(0x0, 0x43*4+2, ES);
26136                                           ! Debug: list unsigned short ES = [S+4+2] (used reg = )
26137 6A3F           FF76         04            push	4[bp]
26138                                           ! Debug: list int = const $10E (used reg = )
26139 6A42           B8                   010E  mov	ax,#$10E
26140 6A45           50                         push	ax
26141                                           ! Debug: list int = const 0 (used reg = )
26142 6A46           31C0                       xor	ax,ax
26143 6A48           50                         push	ax
26144                                           ! Debug: func () void = write_word+0 (used reg = )
26145 6A49           E8         1451            call	_write_word
26146 6A4C           83C4                   06  add	sp,*6
26147                                           !BCC_EOS
26148                                           ! 3592     switch (BL) {
26149 6A4F           8A46         0A            mov	al,$A[bp]
26150 6A52           EB           55            jmp .22F
26151                                           ! 3593     case 0:
26152                                           ! 3594  write_byte(0x40,0x84, DL-1);
26153                       00006A54            .230:
26154                                           ! Debug: sub int = const 1 to unsigned char DL = [S+4+$A] (used reg = )
26155 6A54           8A46         0C            mov	al,$C[bp]
26156 6A57           30E4                       xor	ah,ah
26157                                           ! Debug: list unsigned int = ax-1 (used reg = )
26158 6A59           48                         dec	ax
26159 6A5A           50                         push	ax
26160                                           ! Debug: list int = const $84 (used reg = )
26161 6A5B           B8                   0084  mov	ax,#$84
26162 6A5E           50                         push	ax
26163                                           ! Debug: list int = const $40 (used reg = )
26164 6A5F           B8                   0040  mov	ax,*$40
26165 6A62           50                         push	ax
26166                                           ! Debug: func () void = write_byte+0 (used reg = )
26167 6A63           E8         141F            call	_write_byte
26168 6A66           83C4                   06  add	sp,*6
26169                                           !BCC_EOS
26170                                           ! 3595  break;
26171 6A69           EB           50            jmp .22D
26172                                           !BCC_EOS
26173                                           ! 3596     case 1:
26174                                           ! 3597  write_byte(0x40,0x84, 13);
26175                       00006A6B            .231:
26176                                           ! Debug: list int = const $D (used reg = )
26177 6A6B           B8                   000D  mov	ax,*$D
26178 6A6E           50                         push	ax
26179                                           ! Debug: list int = const $84 (used reg = )
26180 6A6F           B8                   0084  mov	ax,#$84
26181 6A72           50                         push	ax
26182                                           ! Debug: list int = const $40 (used reg = )
26183 6A73           B8                   0040  mov	ax,*$40
26184 6A76           50                         push	ax
26185                                           ! Debug: func () void = write_byte+0 (used reg = )
26186 6A77           E8         140B            call	_write_byte
26187 6A7A           83C4                   06  add	sp,*6
26188                                           !BCC_EOS
26189                                           ! 3598  break;
26190 6A7D           EB           3C            jmp .22D
26191                                           !BCC_EOS
26192                                           ! 3599     case 3:
26193                                           ! 3600  write_byte(0x40,0x84, 42);
26194                       00006A7F            .232:
26195                                           ! Debug: list int = const $2A (used reg = )
26196 6A7F           B8                   002A  mov	ax,*$2A
26197 6A82           50                         push	ax
26198                                           ! Debug: list int = const $84 (used reg = )
26199 6A83           B8                   0084  mov	ax,#$84
26200 6A86           50                         push	ax
26201                                           ! Debug: list int = const $40 (used reg = )
26202 6A87           B8                   0040  mov	ax,*$40
26203 6A8A           50                         push	ax
26204                                           ! Debug: func () void = write_byte+0 (used reg = )
26205 6A8B           E8         13F7            call	_write_byte
26206 6A8E           83C4                   06  add	sp,*6
26207                                           !BCC_EOS
26208                                           ! 3601  break;
26209 6A91           EB           28            jmp .22D
26210                                           !BCC_EOS
26211                                           ! 3602     case 2:
26212                                           ! 3603     default:
26213                       00006A93            .233:
26214                                           ! 3604  write_byte(0x40,0x84, 24);
26215                       00006A93            .234:
26216                                           ! Debug: list int = const $18 (used reg = )
26217 6A93           B8                   0018  mov	ax,*$18
26218 6A96           50                         push	ax
26219                                           ! Debug: list int = const $84 (used reg = )
26220 6A97           B8                   0084  mov	ax,#$84
26221 6A9A           50                         push	ax
26222                                           ! Debug: list int = const $40 (used reg = )
26223 6A9B           B8                   0040  mov	ax,*$40
26224 6A9E           50                         push	ax
26225                                           ! Debug: func () void = write_byte+0 (used reg = )
26226 6A9F           E8         13E3            call	_write_byte
26227 6AA2           83C4                   06  add	sp,*6
26228                                           !BCC_EOS
26229                                           ! 3605  break;
26230 6AA5           EB           14            jmp .22D
26231                                           !BCC_EOS
26232                                           ! 3606     }
26233                                           ! 3607     write_byte(0x40, 0x85, CX);
26234 6AA7           EB           12            jmp .22D
26235                       00006AA9            .22F:
26236 6AA9           2C                     00  sub	al,*0
26237 6AAB           74           A7            je 	.230
26238 6AAD           2C                     01  sub	al,*1
26239 6AAF           74           BA            je 	.231
26240 6AB1           2C                     01  sub	al,*1
26241 6AB3           74           DE            je 	.233
26242 6AB5           2C                     01  sub	al,*1
26243 6AB7           74           C6            je 	.232
26244 6AB9           EB           D8            jmp	.234
26245                       00006ABB            .22D:
26246                       FFFFFFFC            ..FFF5	=	-4
26247                                           ! Debug: list unsigned short CX = [S+4+6] (used reg = )
26248 6ABB           FF76         08            push	8[bp]
26249                                           ! Debug: list int = const $85 (used reg = )
26250 6ABE           B8                   0085  mov	ax,#$85
26251 6AC1           50                         push	ax
26252                                           ! Debug: list int = const $40 (used reg = )
26253 6AC2           B8                   0040  mov	ax,*$40
26254 6AC5           50                         push	ax
26255                                           ! Debug: func () void = write_byte+0 (used reg = )
26256 6AC6           E8         13BC            call	_write_byte
26257 6AC9           83C4                   06  add	sp,*6
26258                                           !BCC_EOS
26259                                           ! 3608 }
26260 6ACC           89EC                       mov	sp,bp
26261 6ACE           5D                         pop	bp
26262 6ACF           C3                         ret
26263                                           ! 3609 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26264                       00006AD0            _biosfn_load_gfx_8_14_chars:
26265                                           !BCC_EOS
26266                                           ! 3610 {
26267                                           ! 3611     write_word(0x0, 0x43*4, &vgafont14);
26268 6AD0           55                         push	bp
26269 6AD1           89E5                       mov	bp,sp
26270                                           ! Debug: list * [$E00] unsigned char = vgafont14+0 (used reg = )
26271 6AD3           BB                   179B  mov	bx,#_vgafont14
26272 6AD6           53                         push	bx
26273                                           ! Debug: list int = const $10C (used reg = )
26274 6AD7           B8                   010C  mov	ax,#$10C
26275 6ADA           50                         push	ax
26276                                           ! Debug: list int = const 0 (used reg = )
26277 6ADB           31C0                       xor	ax,ax
26278 6ADD           50                         push	ax
26279                                           ! Debug: func () void = write_word+0 (used reg = )
26280 6ADE           E8         13BC            call	_write_word
26281 6AE1           89EC                       mov	sp,bp
26282                                           !BCC_EOS
26283                                           ! 3612     write_word(0x0, 0x43*4+2, 0xC000);
26284                                           ! Debug: list unsigned int = const $C000 (used reg = )
26285 6AE3           B8                   C000  mov	ax,#$C000
26286 6AE6           50                         push	ax
26287                                           ! Debug: list int = const $10E (used reg = )
26288 6AE7           B8                   010E  mov	ax,#$10E
26289 6AEA           50                         push	ax
26290                                           ! Debug: list int = const 0 (used reg = )
26291 6AEB           31C0                       xor	ax,ax
26292 6AED           50                         push	ax
26293                                           ! Debug: func () void = write_word+0 (used reg = )
26294 6AEE           E8         13AC            call	_write_word
26295 6AF1           89EC                       mov	sp,bp
26296                                           !BCC_EOS
26297                                           ! 3613     switch (BL) {
26298 6AF3           8A46         04            mov	al,4[bp]
26299 6AF6           EB           3F            jmp .237
26300                                           ! 3614     case 1:
26301                                           ! 3615  write_byte(0x40,0x84, 13);
26302                       00006AF8            .238:
26303                                           ! Debug: list int = const $D (used reg = )
26304 6AF8           B8                   000D  mov	ax,*$D
26305 6AFB           50                         push	ax
26306                                           ! Debug: list int = const $84 (used reg = )
26307 6AFC           B8                   0084  mov	ax,#$84
26308 6AFF           50                         push	ax
26309                                           ! Debug: list int = const $40 (used reg = )
26310 6B00           B8                   0040  mov	ax,*$40
26311 6B03           50                         push	ax
26312                                           ! Debug: func () void = write_byte+0 (used reg = )
26313 6B04           E8         137E            call	_write_byte
26314 6B07           83C4                   06  add	sp,*6
26315                                           !BCC_EOS
26316                                           ! 3616  break;
26317 6B0A           EB           39            jmp .235
26318                                           !BCC_EOS
26319                                           ! 3617     case 3:
26320                                           ! 3618  write_byte(0x40,0x84, 42);
26321                       00006B0C            .239:
26322                                           ! Debug: list int = const $2A (used reg = )
26323 6B0C           B8                   002A  mov	ax,*$2A
26324 6B0F           50                         push	ax
26325                                           ! Debug: list int = const $84 (used reg = )
26326 6B10           B8                   0084  mov	ax,#$84
26327 6B13           50                         push	ax
26328                                           ! Debug: list int = const $40 (used reg = )
26329 6B14           B8                   0040  mov	ax,*$40
26330 6B17           50                         push	ax
26331                                           ! Debug: func () void = write_byte+0 (used reg = )
26332 6B18           E8         136A            call	_write_byte
26333 6B1B           83C4                   06  add	sp,*6
26334                                           !BCC_EOS
26335                                           ! 3619  break;
26336 6B1E           EB           25            jmp .235
26337                                           !BCC_EOS
26338                                           ! 3620     case 2:
26339                                           ! 3621     default:
26340                       00006B20            .23A:
26341                                           ! 3622  write_byte(0x40,0x84, 24);
26342                       00006B20            .23B:
26343                                           ! Debug: list int = const $18 (used reg = )
26344 6B20           B8                   0018  mov	ax,*$18
26345 6B23           50                         push	ax
26346                                           ! Debug: list int = const $84 (used reg = )
26347 6B24           B8                   0084  mov	ax,#$84
26348 6B27           50                         push	ax
26349                                           ! Debug: list int = const $40 (used reg = )
26350 6B28           B8                   0040  mov	ax,*$40
26351 6B2B           50                         push	ax
26352                                           ! Debug: func () void = write_byte+0 (used reg = )
26353 6B2C           E8         1356            call	_write_byte
26354 6B2F           83C4                   06  add	sp,*6
26355                                           !BCC_EOS
26356                                           ! 3623  break;
26357 6B32           EB           11            jmp .235
26358                                           !BCC_EOS
26359                                           ! 3624     }
26360                                           ! 3625     write_byte(0x40, 0x85, 14);
26361 6B34           E9         000E            br 	.235
26362                       00006B37            .237:
26363 6B37           2C                     01  sub	al,*1
26364 6B39           74           BD            je 	.238
26365 6B3B           2C                     01  sub	al,*1
26366 6B3D           74           E1            je 	.23A
26367 6B3F           2C                     01  sub	al,*1
26368 6B41           74           C9            je 	.239
26369 6B43           EB           DB            jmp	.23B
26370                       00006B45            .235:
26371                       FFFFFFFE            ..FFF4	=	-2
26372                                           ! Debug: list int = const $E (used reg = )
26373 6B45           B8                   000E  mov	ax,*$E
26374 6B48           50                         push	ax
26375                                           ! Debug: list int = const $85 (used reg = )
26376 6B49           B8                   0085  mov	ax,#$85
26377 6B4C           50                         push	ax
26378                                           ! Debug: list int = const $40 (used reg = )
26379 6B4D           B8                   0040  mov	ax,*$40
26380 6B50           50                         push	ax
26381                                           ! Debug: func () void = write_byte+0 (used reg = )
26382 6B51           E8         1331            call	_write_byte
26383 6B54           89EC                       mov	sp,bp
26384                                           !BCC_EOS
26385                                           ! 3626 }
26386 6B56           5D                         pop	bp
26387 6B57           C3                         ret
26388                                           ! 3627 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26389                                           ! Register BX used in function biosfn_load_gfx_8_14_chars
26390                       00006B58            _biosfn_load_gfx_8_8_dd_chars:
26391                                           !BCC_EOS
26392                                           ! 3628 {
26393                                           ! 3629     write_word(0x0, 0x43*4, &vgafont8);
26394 6B58           55                         push	bp
26395 6B59           89E5                       mov	bp,sp
26396                                           ! Debug: list * [$800] unsigned char = vgafont8+0 (used reg = )
26397 6B5B           BB                   0F9B  mov	bx,#_vgafont8
26398 6B5E           53                         push	bx
26399                                           ! Debug: list int = const $10C (used reg = )
26400 6B5F           B8                   010C  mov	ax,#$10C
26401 6B62           50                         push	ax
26402                                           ! Debug: list int = const 0 (used reg = )
26403 6B63           31C0                       xor	ax,ax
26404 6B65           50                         push	ax
26405                                           ! Debug: func () void = write_word+0 (used reg = )
26406 6B66           E8         1334            call	_write_word
26407 6B69           89EC                       mov	sp,bp
26408                                           !BCC_EOS
26409                                           ! 3630     write_word(0x0, 0x43*4+2, 0xC000);
26410                                           ! Debug: list unsigned int = const $C000 (used reg = )
26411 6B6B           B8                   C000  mov	ax,#$C000
26412 6B6E           50                         push	ax
26413                                           ! Debug: list int = const $10E (used reg = )
26414 6B6F           B8                   010E  mov	ax,#$10E
26415 6B72           50                         push	ax
26416                                           ! Debug: list int = const 0 (used reg = )
26417 6B73           31C0                       xor	ax,ax
26418 6B75           50                         push	ax
26419                                           ! Debug: func () void = write_word+0 (used reg = )
26420 6B76           E8         1324            call	_write_word
26421 6B79           89EC                       mov	sp,bp
26422                                           !BCC_EOS
26423                                           ! 3631     switch (BL) {
26424 6B7B           8A46         04            mov	al,4[bp]
26425 6B7E           EB           3E            jmp .23E
26426                                           ! 3632     case 1:
26427                                           ! 3633  write_byte(0x40,0x84, 13);
26428                       00006B80            .23F:
26429                                           ! Debug: list int = const $D (used reg = )
26430 6B80           B8                   000D  mov	ax,*$D
26431 6B83           50                         push	ax
26432                                           ! Debug: list int = const $84 (used reg = )
26433 6B84           B8                   0084  mov	ax,#$84
26434 6B87           50                         push	ax
26435                                           ! Debug: list int = const $40 (used reg = )
26436 6B88           B8                   0040  mov	ax,*$40
26437 6B8B           50                         push	ax
26438                                           ! Debug: func () void = write_byte+0 (used reg = )
26439 6B8C           E8         12F6            call	_write_byte
26440 6B8F           83C4                   06  add	sp,*6
26441                                           !BCC_EOS
26442                                           ! 3634  break;
26443 6B92           EB           38            jmp .23C
26444                                           !BCC_EOS
26445                                           ! 3635     case 3:
26446                                           ! 3636  write_byte(0x40,0x84, 42);
26447                       00006B94            .240:
26448                                           ! Debug: list int = const $2A (used reg = )
26449 6B94           B8                   002A  mov	ax,*$2A
26450 6B97           50                         push	ax
26451                                           ! Debug: list int = const $84 (used reg = )
26452 6B98           B8                   0084  mov	ax,#$84
26453 6B9B           50                         push	ax
26454                                           ! Debug: list int = const $40 (used reg = )
26455 6B9C           B8                   0040  mov	ax,*$40
26456 6B9F           50                         push	ax
26457                                           ! Debug: func () void = write_byte+0 (used reg = )
26458 6BA0           E8         12E2            call	_write_byte
26459 6BA3           83C4                   06  add	sp,*6
26460                                           !BCC_EOS
26461                                           ! 3637  break;
26462 6BA6           EB           24            jmp .23C
26463                                           !BCC_EOS
26464                                           ! 3638     case 2:
26465                                           ! 3639     default:
26466                       00006BA8            .241:
26467                                           ! 3640  write_byte(0x40,0x84, 24);
26468                       00006BA8            .242:
26469                                           ! Debug: list int = const $18 (used reg = )
26470 6BA8           B8                   0018  mov	ax,*$18
26471 6BAB           50                         push	ax
26472                                           ! Debug: list int = const $84 (used reg = )
26473 6BAC           B8                   0084  mov	ax,#$84
26474 6BAF           50                         push	ax
26475                                           ! Debug: list int = const $40 (used reg = )
26476 6BB0           B8                   0040  mov	ax,*$40
26477 6BB3           50                         push	ax
26478                                           ! Debug: func () void = write_byte+0 (used reg = )
26479 6BB4           E8         12CE            call	_write_byte
26480 6BB7           83C4                   06  add	sp,*6
26481                                           !BCC_EOS
26482                                           ! 3641  break;
26483 6BBA           EB           10            jmp .23C
26484                                           !BCC_EOS
26485                                           ! 3642     }
26486                                           ! 3643     write_byte(0x40, 0x85, 8);
26487 6BBC           EB           0E            jmp .23C
26488                       00006BBE            .23E:
26489 6BBE           2C                     01  sub	al,*1
26490 6BC0           74           BE            je 	.23F
26491 6BC2           2C                     01  sub	al,*1
26492 6BC4           74           E2            je 	.241
26493 6BC6           2C                     01  sub	al,*1
26494 6BC8           74           CA            je 	.240
26495 6BCA           EB           DC            jmp	.242
26496                       00006BCC            .23C:
26497                       FFFFFFFE            ..FFF3	=	-2
26498                                           ! Debug: list int = const 8 (used reg = )
26499 6BCC           B8                   0008  mov	ax,*8
26500 6BCF           50                         push	ax
26501                                           ! Debug: list int = const $85 (used reg = )
26502 6BD0           B8                   0085  mov	ax,#$85
26503 6BD3           50                         push	ax
26504                                           ! Debug: list int = const $40 (used reg = )
26505 6BD4           B8                   0040  mov	ax,*$40
26506 6BD7           50                         push	ax
26507                                           ! Debug: func () void = write_byte+0 (used reg = )
26508 6BD8           E8         12AA            call	_write_byte
26509 6BDB           89EC                       mov	sp,bp
26510                                           !BCC_EOS
26511                                           ! 3644 }
26512 6BDD           5D                         pop	bp
26513 6BDE           C3                         ret
26514                                           ! 3645 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26515                                           ! Register BX used in function biosfn_load_gfx_8_8_dd_chars
26516                       00006BDF            _biosfn_load_gfx_8_16_chars:
26517                                           !BCC_EOS
26518                                           ! 3646 {
26519                                           ! 3647     write_word(0x0, 0x43*4, &vgafont16);
26520 6BDF           55                         push	bp
26521 6BE0           89E5                       mov	bp,sp
26522                                           ! Debug: list * [$1000] unsigned char = vgafont16+0 (used reg = )
26523 6BE2           BB                   259B  mov	bx,#_vgafont16
26524 6BE5           53                         push	bx
26525                                           ! Debug: list int = const $10C (used reg = )
26526 6BE6           B8                   010C  mov	ax,#$10C
26527 6BE9           50                         push	ax
26528                                           ! Debug: list int = const 0 (used reg = )
26529 6BEA           31C0                       xor	ax,ax
26530 6BEC           50                         push	ax
26531                                           ! Debug: func () void = write_word+0 (used reg = )
26532 6BED           E8         12AD            call	_write_word
26533 6BF0           89EC                       mov	sp,bp
26534                                           !BCC_EOS
26535                                           ! 3648     write_word(0x0, 0x43*4+2, 0xC000);
26536                                           ! Debug: list unsigned int = const $C000 (used reg = )
26537 6BF2           B8                   C000  mov	ax,#$C000
26538 6BF5           50                         push	ax
26539                                           ! Debug: list int = const $10E (used reg = )
26540 6BF6           B8                   010E  mov	ax,#$10E
26541 6BF9           50                         push	ax
26542                                           ! Debug: list int = const 0 (used reg = )
26543 6BFA           31C0                       xor	ax,ax
26544 6BFC           50                         push	ax
26545                                           ! Debug: func () void = write_word+0 (used reg = )
26546 6BFD           E8         129D            call	_write_word
26547 6C00           89EC                       mov	sp,bp
26548                                           !BCC_EOS
26549                                           ! 3649     switch (BL) {
26550 6C02           8A46         04            mov	al,4[bp]
26551 6C05           EB           3E            jmp .245
26552                                           ! 3650     case 1:
26553                                           ! 3651  write_byte(0x40,0x84, 13);
26554                       00006C07            .246:
26555                                           ! Debug: list int = const $D (used reg = )
26556 6C07           B8                   000D  mov	ax,*$D
26557 6C0A           50                         push	ax
26558                                           ! Debug: list int = const $84 (used reg = )
26559 6C0B           B8                   0084  mov	ax,#$84
26560 6C0E           50                         push	ax
26561                                           ! Debug: list int = const $40 (used reg = )
26562 6C0F           B8                   0040  mov	ax,*$40
26563 6C12           50                         push	ax
26564                                           ! Debug: func () void = write_byte+0 (used reg = )
26565 6C13           E8         126F            call	_write_byte
26566 6C16           83C4                   06  add	sp,*6
26567                                           !BCC_EOS
26568                                           ! 3652  break;
26569 6C19           EB           38            jmp .243
26570                                           !BCC_EOS
26571                                           ! 3653     case 3:
26572                                           ! 3654  write_byte(0x40,0x84, 42);
26573                       00006C1B            .247:
26574                                           ! Debug: list int = const $2A (used reg = )
26575 6C1B           B8                   002A  mov	ax,*$2A
26576 6C1E           50                         push	ax
26577                                           ! Debug: list int = const $84 (used reg = )
26578 6C1F           B8                   0084  mov	ax,#$84
26579 6C22           50                         push	ax
26580                                           ! Debug: list int = const $40 (used reg = )
26581 6C23           B8                   0040  mov	ax,*$40
26582 6C26           50                         push	ax
26583                                           ! Debug: func () void = write_byte+0 (used reg = )
26584 6C27           E8         125B            call	_write_byte
26585 6C2A           83C4                   06  add	sp,*6
26586                                           !BCC_EOS
26587                                           ! 3655  break;
26588 6C2D           EB           24            jmp .243
26589                                           !BCC_EOS
26590                                           ! 3656     case 2:
26591                                           ! 3657     default:
26592                       00006C2F            .248:
26593                                           ! 3658  write_byte(0x40,0x84, 24);
26594                       00006C2F            .249:
26595                                           ! Debug: list int = const $18 (used reg = )
26596 6C2F           B8                   0018  mov	ax,*$18
26597 6C32           50                         push	ax
26598                                           ! Debug: list int = const $84 (used reg = )
26599 6C33           B8                   0084  mov	ax,#$84
26600 6C36           50                         push	ax
26601                                           ! Debug: list int = const $40 (used reg = )
26602 6C37           B8                   0040  mov	ax,*$40
26603 6C3A           50                         push	ax
26604                                           ! Debug: func () void = write_byte+0 (used reg = )
26605 6C3B           E8         1247            call	_write_byte
26606 6C3E           83C4                   06  add	sp,*6
26607                                           !BCC_EOS
26608                                           ! 3659  break;
26609 6C41           EB           10            jmp .243
26610                                           !BCC_EOS
26611                                           ! 3660     }
26612                                           ! 3661     write_byte(0x40, 0x85, 16);
26613 6C43           EB           0E            jmp .243
26614                       00006C45            .245:
26615 6C45           2C                     01  sub	al,*1
26616 6C47           74           BE            je 	.246
26617 6C49           2C                     01  sub	al,*1
26618 6C4B           74           E2            je 	.248
26619 6C4D           2C                     01  sub	al,*1
26620 6C4F           74           CA            je 	.247
26621 6C51           EB           DC            jmp	.249
26622                       00006C53            .243:
26623                       FFFFFFFE            ..FFF2	=	-2
26624                                           ! Debug: list int = const $10 (used reg = )
26625 6C53           B8                   0010  mov	ax,*$10
26626 6C56           50                         push	ax
26627                                           ! Debug: list int = const $85 (used reg = )
26628 6C57           B8                   0085  mov	ax,#$85
26629 6C5A           50                         push	ax
26630                                           ! Debug: list int = const $40 (used reg = )
26631 6C5B           B8                   0040  mov	ax,*$40
26632 6C5E           50                         push	ax
26633                                           ! Debug: func () void = write_byte+0 (used reg = )
26634 6C5F           E8         1223            call	_write_byte
26635 6C62           89EC                       mov	sp,bp
26636                                           !BCC_EOS
26637                                           ! 3662 }
26638 6C64           5D                         pop	bp
26639 6C65           C3                         ret
26640                                           ! 3663 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26641                                           ! Register BX used in function biosfn_load_gfx_8_16_chars
26642                                           ! 3664 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26643                       00006C66            _biosfn_get_font_info:
26644                                           !BCC_EOS
26645                                           !BCC_EOS
26646                                           !BCC_EOS
26647                                           !BCC_EOS
26648                                           !BCC_EOS
26649                                           ! 3665 {Bit16u ss=get_SS();
26650 6C66           55                         push	bp
26651 6C67           89E5                       mov	bp,sp
26652 6C69           4C                         dec	sp
26653 6C6A           4C                         dec	sp
26654                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26655 6C6B           E8         127D            call	_get_SS
26656                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26657 6C6E           8946         FE            mov	-2[bp],ax
26658                                           !BCC_EOS
26659                                           ! 3666  switch(BH)
26660 6C71           8A46         04            mov	al,4[bp]
26661                                           ! 3667   {case 0x00:
26662 6C74           E9         0143            br 	.24C
26663                                           ! 3668     write_word(ss,ES,read_word(0x00,0x1f*4));
26664                       00006C77            .24D:
26665                                           ! Debug: list int = const $7C (used reg = )
26666 6C77           B8                   007C  mov	ax,*$7C
26667 6C7A           50                         push	ax
26668                                           ! Debug: list int = const 0 (used reg = )
26669 6C7B           31C0                       xor	ax,ax
26670 6C7D           50                         push	ax
26671                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26672 6C7E           E8         11F1            call	_read_word
26673 6C81           83C4                   04  add	sp,*4
26674                                           ! Debug: list unsigned short = ax+0 (used reg = )
26675 6C84           50                         push	ax
26676                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26677 6C85           FF76         06            push	6[bp]
26678                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26679 6C88           FF76         FE            push	-2[bp]
26680                                           ! Debug: func () void = write_word+0 (used reg = )
26681 6C8B           E8         120F            call	_write_word
26682 6C8E           83C4                   06  add	sp,*6
26683                                           !BCC_EOS
26684                                           ! 3669     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26685                                           ! Debug: list int = const $7E (used reg = )
26686 6C91           B8                   007E  mov	ax,*$7E
26687 6C94           50                         push	ax
26688                                           ! Debug: list int = const 0 (used reg = )
26689 6C95           31C0                       xor	ax,ax
26690 6C97           50                         push	ax
26691                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26692 6C98           E8         11D7            call	_read_word
26693 6C9B           83C4                   04  add	sp,*4
26694                                           ! Debug: list unsigned short = ax+0 (used reg = )
26695 6C9E           50                         push	ax
26696                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26697 6C9F           FF76         08            push	8[bp]
26698                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26699 6CA2           FF76         FE            push	-2[bp]
26700                                           ! Debug: func () void = write_word+0 (used reg = )
26701 6CA5           E8         11F5            call	_write_word
26702 6CA8           83C4                   06  add	sp,*6
26703                                           !BCC_EOS
26704                                           ! 3670     break;
26705 6CAB           E9         0131            br 	.24A
26706                                           !BCC_EOS
26707                                           ! 3671    case 0x01:
26708                                           ! 3671 
26709                                           ! 3672     write_word(ss,ES,read_word(0x00,0x43*4));
26710                       00006CAE            .24E:
26711                                           ! Debug: list int = const $10C (used reg = )
26712 6CAE           B8                   010C  mov	ax,#$10C
26713 6CB1           50                         push	ax
26714                                           ! Debug: list int = const 0 (used reg = )
26715 6CB2           31C0                       xor	ax,ax
26716 6CB4           50                         push	ax
26717                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26718 6CB5           E8         11BA            call	_read_word
26719 6CB8           83C4                   04  add	sp,*4
26720                                           ! Debug: list unsigned short = ax+0 (used reg = )
26721 6CBB           50                         push	ax
26722                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26723 6CBC           FF76         06            push	6[bp]
26724                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26725 6CBF           FF76         FE            push	-2[bp]
26726                                           ! Debug: func () void = write_word+0 (used reg = )
26727 6CC2           E8         11D8            call	_write_word
26728 6CC5           83C4                   06  add	sp,*6
26729                                           !BCC_EOS
26730                                           ! 3673     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26731                                           ! Debug: list int = const $10E (used reg = )
26732 6CC8           B8                   010E  mov	ax,#$10E
26733 6CCB           50                         push	ax
26734                                           ! Debug: list int = const 0 (used reg = )
26735 6CCC           31C0                       xor	ax,ax
26736 6CCE           50                         push	ax
26737                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26738 6CCF           E8         11A0            call	_read_word
26739 6CD2           83C4                   04  add	sp,*4
26740                                           ! Debug: list unsigned short = ax+0 (used reg = )
26741 6CD5           50                         push	ax
26742                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26743 6CD6           FF76         08            push	8[bp]
26744                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26745 6CD9           FF76         FE            push	-2[bp]
26746                                           ! Debug: func () void = write_word+0 (used reg = )
26747 6CDC           E8         11BE            call	_write_word
26748 6CDF           83C4                   06  add	sp,*6
26749                                           !BCC_EOS
26750                                           ! 3674     break;
26751 6CE2           E9         00FA            br 	.24A
26752                                           !BCC_EOS
26753                                           ! 3675    case 0x02:
26754                                           ! 3676     write_word(ss,ES,0xC000);
26755                       00006CE5            .24F:
26756                                           ! Debug: list unsigned int = const $C000 (used reg = )
26757 6CE5           B8                   C000  mov	ax,#$C000
26758 6CE8           50                         push	ax
26759                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26760 6CE9           FF76         06            push	6[bp]
26761                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26762 6CEC           FF76         FE            push	-2[bp]
26763                                           ! Debug: func () void = write_word+0 (used reg = )
26764 6CEF           E8         11AB            call	_write_word
26765 6CF2           83C4                   06  add	sp,*6
26766                                           !BCC_EOS
26767                                           ! 3677     write_word(ss,BP,vgafont14);
26768                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26769 6CF5           BB                   179B  mov	bx,#_vgafont14
26770 6CF8           53                         push	bx
26771                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26772 6CF9           FF76         08            push	8[bp]
26773                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26774 6CFC           FF76         FE            push	-2[bp]
26775                                           ! Debug: func () void = write_word+0 (used reg = )
26776 6CFF           E8         119B            call	_write_word
26777 6D02           83C4                   06  add	sp,*6
26778                                           !BCC_EOS
26779                                           ! 3678     break;
26780 6D05           E9         00D7            br 	.24A
26781                                           !BCC_EOS
26782                                           ! 3679    case 0x03:
26783                                           ! 3680     write_word(ss,ES,0xC000);
26784                       00006D08            .250:
26785                                           ! Debug: list unsigned int = const $C000 (used reg = )
26786 6D08           B8                   C000  mov	ax,#$C000
26787 6D0B           50                         push	ax
26788                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26789 6D0C           FF76         06            push	6[bp]
26790                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26791 6D0F           FF76         FE            push	-2[bp]
26792                                           ! Debug: func () void = write_word+0 (used reg = )
26793 6D12           E8         1188            call	_write_word
26794 6D15           83C4                   06  add	sp,*6
26795                                           !BCC_EOS
26796                                           ! 3681     write_word(ss,BP,vgafont8);
26797                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26798 6D18           BB                   0F9B  mov	bx,#_vgafont8
26799 6D1B           53                         push	bx
26800                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26801 6D1C           FF76         08            push	8[bp]
26802                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26803 6D1F           FF76         FE            push	-2[bp]
26804                                           ! Debug: func () void = write_word+0 (used reg = )
26805 6D22           E8         1178            call	_write_word
26806 6D25           83C4                   06  add	sp,*6
26807                                           !BCC_EOS
26808                                           ! 3682     break;
26809 6D28           E9         00B4            br 	.24A
26810                                           !BCC_EOS
26811                                           ! 3683    case 0x04:
26812                                           ! 3684     write_word(ss,ES,0xC000);
26813                       00006D2B            .251:
26814                                           ! Debug: list unsigned int = const $C000 (used reg = )
26815 6D2B           B8                   C000  mov	ax,#$C000
26816 6D2E           50                         push	ax
26817                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26818 6D2F           FF76         06            push	6[bp]
26819                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26820 6D32           FF76         FE            push	-2[bp]
26821                                           ! Debug: func () void = write_word+0 (used reg = )
26822 6D35           E8         1165            call	_write_word
26823 6D38           83C4                   06  add	sp,*6
26824                                           !BCC_EOS
26825                                           ! 3685     write_word(ss,BP,vgafont8+128*8);
26826                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26827 6D3B           BB                   139B  mov	bx,#_vgafont8+$400
26828 6D3E           53                         push	bx
26829                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26830 6D3F           FF76         08            push	8[bp]
26831                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26832 6D42           FF76         FE            push	-2[bp]
26833                                           ! Debug: func () void = write_word+0 (used reg = )
26834 6D45           E8         1155            call	_write_word
26835 6D48           83C4                   06  add	sp,*6
26836                                           !BCC_EOS
26837                                           ! 3686     break;
26838 6D4B           E9         0091            br 	.24A
26839                                           !BCC_EOS
26840                                           ! 3687    case 0x05:
26841                                           ! 3688     write_word(ss,ES,0xC000);
26842                       00006D4E            .252:
26843                                           ! Debug: list unsigned int = const $C000 (used reg = )
26844 6D4E           B8                   C000  mov	ax,#$C000
26845 6D51           50                         push	ax
26846                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26847 6D52           FF76         06            push	6[bp]
26848                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26849 6D55           FF76         FE            push	-2[bp]
26850                                           ! Debug: func () void = write_word+0 (used reg = )
26851 6D58           E8         1142            call	_write_word
26852 6D5B           83C4                   06  add	sp,*6
26853                                           !BCC_EOS
26854                                           ! 3689     write_word(ss,BP,vgafont14alt);
26855                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26856 6D5E           BB                   359B  mov	bx,#_vgafont14alt
26857 6D61           53                         push	bx
26858                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26859 6D62           FF76         08            push	8[bp]
26860                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26861 6D65           FF76         FE            push	-2[bp]
26862                                           ! Debug: func () void = write_word+0 (used reg = )
26863 6D68           E8         1132            call	_write_word
26864 6D6B           83C4                   06  add	sp,*6
26865                                           !BCC_EOS
26866                                           ! 3690     break;
26867 6D6E           EB           6F            jmp .24A
26868                                           !BCC_EOS
26869                                           ! 3691    case 0x06:
26870                                           ! 3692     write_word(ss,ES,0xC000);
26871                       00006D70            .253:
26872                                           ! Debug: list unsigned int = const $C000 (used reg = )
26873 6D70           B8                   C000  mov	ax,#$C000
26874 6D73           50                         push	ax
26875                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26876 6D74           FF76         06            push	6[bp]
26877                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26878 6D77           FF76         FE            push	-2[bp]
26879                                           ! Debug: func () void = write_word+0 (used reg = )
26880 6D7A           E8         1120            call	_write_word
26881 6D7D           83C4                   06  add	sp,*6
26882                                           !BCC_EOS
26883                                           ! 3693     write_word(ss,BP,vgafont16);
26884                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26885 6D80           BB                   259B  mov	bx,#_vgafont16
26886 6D83           53                         push	bx
26887                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26888 6D84           FF76         08            push	8[bp]
26889                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26890 6D87           FF76         FE            push	-2[bp]
26891                                           ! Debug: func () void = write_word+0 (used reg = )
26892 6D8A           E8         1110            call	_write_word
26893 6D8D           83C4                   06  add	sp,*6
26894                                           !BCC_EOS
26895                                           ! 3694     break;
26896 6D90           EB           4D            jmp .24A
26897                                           !BCC_EOS
26898                                           ! 3695    case 0x07:
26899                                           ! 3696     write_word(ss,ES,0xC000);
26900                       00006D92            .254:
26901                                           ! Debug: list unsigned int = const $C000 (used reg = )
26902 6D92           B8                   C000  mov	ax,#$C000
26903 6D95           50                         push	ax
26904                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26905 6D96           FF76         06            push	6[bp]
26906                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26907 6D99           FF76         FE            push	-2[bp]
26908                                           ! Debug: func () void = write_word+0 (used reg = )
26909 6D9C           E8         10FE            call	_write_word
26910 6D9F           83C4                   06  add	sp,*6
26911                                           !BCC_EOS
26912                                           ! 3697     write_word(ss,BP,vgafont16alt);
26913                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26914 6DA2           BB                   359C  mov	bx,#_vgafont16alt
26915 6DA5           53                         push	bx
26916                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26917 6DA6           FF76         08            push	8[bp]
26918                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26919 6DA9           FF76         FE            push	-2[bp]
26920                                           ! Debug: func () void = write_word+0 (used reg = )
26921 6DAC           E8         10EE            call	_write_word
26922 6DAF           83C4                   06  add	sp,*6
26923                                           !BCC_EOS
26924                                           ! 3698     break;
26925 6DB2           EB           2B            jmp .24A
26926                                           !BCC_EOS
26927                                           ! 3699    default:
26928                                           ! 3700     return;
26929                       00006DB4            .255:
26930 6DB4           89EC                       mov	sp,bp
26931 6DB6           5D                         pop	bp
26932 6DB7           C3                         ret
26933                                           !BCC_EOS
26934                                           ! 3701   }
26935                                           ! 3702  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26936 6DB8           EB           25            jmp .24A
26937                       00006DBA            .24C:
26938 6DBA           2C                     00  sub	al,*0
26939 6DBC           72           F6            jb 	.255
26940 6DBE           3C                     07  cmp	al,*7
26941 6DC0           77           1B            ja  	.256
26942 6DC2           30E4                       xor	ah,ah
26943 6DC4           D1E0                       shl	ax,*1
26944 6DC6           89C3                       mov	bx,ax
26945 6DC8           2E                         seg	cs
26946 6DC9           FFA7       6DCD            br	.257[bx]
26947                       00006DCD            .257:
26948 6DCD                      6C77            .word	.24D
26949 6DCF                      6CAE            .word	.24E
26950 6DD1                      6CE5            .word	.24F
26951 6DD3                      6D08            .word	.250
26952 6DD5                      6D2B            .word	.251
26953 6DD7                      6D4E            .word	.252
26954 6DD9                      6D70            .word	.253
26955 6DDB                      6D92            .word	.254
26956                       00006DDD            .256:
26957 6DDD           EB           D5            jmp	.255
26958                       00006DDF            .24A:
26959                       FFFFFFFC            ..FFF1	=	-4
26960                                           ! Debug: list int = const $85 (used reg = )
26961 6DDF           B8                   0085  mov	ax,#$85
26962 6DE2           50                         push	ax
26963                                           ! Debug: list int = const $40 (used reg = )
26964 6DE3           B8                   0040  mov	ax,*$40
26965 6DE6           50                         push	ax
26966                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26967 6DE7           E8         1075            call	_read_byte
26968 6DEA           83C4                   04  add	sp,*4
26969                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26970 6DED           30E4                       xor	ah,ah
26971                                           ! Debug: list unsigned short = ax+0 (used reg = )
26972 6DEF           50                         push	ax
26973                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26974 6DF0           FF76         0A            push	$A[bp]
26975                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26976 6DF3           FF76         FE            push	-2[bp]
26977                                           ! Debug: func () void = write_word+0 (used reg = )
26978 6DF6           E8         10A4            call	_write_word
26979 6DF9           83C4                   06  add	sp,*6
26980                                           !BCC_EOS
26981                                           ! 3703  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26982                                           ! Debug: list int = const $84 (used reg = )
26983 6DFC           B8                   0084  mov	ax,#$84
26984 6DFF           50                         push	ax
26985                                           ! Debug: list int = const $40 (used reg = )
26986 6E00           B8                   0040  mov	ax,*$40
26987 6E03           50                         push	ax
26988                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26989 6E04           E8         1058            call	_read_byte
26990 6E07           83C4                   04  add	sp,*4
26991                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26992 6E0A           30E4                       xor	ah,ah
26993                                           ! Debug: list unsigned short = ax+0 (used reg = )
26994 6E0C           50                         push	ax
26995                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26996 6E0D           FF76         0C            push	$C[bp]
26997                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26998 6E10           FF76         FE            push	-2[bp]
26999                                           ! Debug: func () void = write_word+0 (used reg = )
27000 6E13           E8         1087            call	_write_word
27001 6E16           83C4                   06  add	sp,*6
27002                                           !BCC_EOS
27003                                           ! 3704 }
27004 6E19           89EC                       mov	sp,bp
27005 6E1B           5D                         pop	bp
27006 6E1C           C3                         ret
27007                                           ! 3705 #asm
27008                                           !BCC_ASM
27009                       00000006            _biosfn_get_font_info.BP	set	6
27010                       00000002            _biosfn_get_font_info.BH	set	2
27011                       00000008            _biosfn_get_font_info.CX	set	8
27012                       0000000A            _biosfn_get_font_info.DX	set	$A
27013                       00000004            _biosfn_get_font_info.ES	set	4
27014                       00006E1D            biosfn_get_ega_info:
27015 6E1D           1E                           push ds
27016 6E1E           50                           push ax
27017 6E1F           B8                   0040    mov ax, # 0x40
27018 6E22           8ED8                         mov ds, ax
27019 6E24           30ED                         xor ch, ch
27020 6E26           BB                   0088    mov bx, # 0x88
27021 6E29           8A0F                         mov cl, [bx]
27022 6E2B           80E1                   0F    and cl, #0x0f
27023 6E2E           BB                   0063    mov bx, # 0x63
27024 6E31           8B07                         mov ax, [bx]
27025 6E33           BB                   0003    mov bx, #0x0003
27026 6E36           3D                   03B4    cmp ax, # 0x3b4
27027 6E39           75           02              jne mode_ega_color
27028 6E3B           B7                     01    mov bh, #0x01
27029                       00006E3D            mode_ega_color:
27030 6E3D           58                           pop ax
27031 6E3E           1F                           pop ds
27032 6E3F           C3                           ret
27033                                           ! 3725 endasm
27034                                           !BCC_ENDASM
27035                                           ! 3726 static void biosfn_alternate_prtsc()
27036                                           ! Register BX used in function biosfn_get_font_info
27037                                           ! 3727 {
27038                       00006E40            _biosfn_alternate_prtsc:
27039                                           ! 3728 }
27040 6E40           C3                         ret
27041                                           ! 3729 #asm
27042                                           !BCC_ASM
27043                       00006E41            biosfn_select_vert_res:
27044                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
27045 6E41           1E                           push ds
27046 6E42           53                           push bx
27047 6E43           52                           push dx
27048 6E44           88C2                         mov dl, al
27049 6E46           B8                   0040    mov ax, # 0x40
27050 6E49           8ED8                         mov ds, ax
27051 6E4B           BB                   0089    mov bx, # 0x89
27052 6E4E           8A07                         mov al, [bx]
27053 6E50           BB                   0088    mov bx, # 0x88
27054 6E53           8A27                         mov ah, [bx]
27055 6E55           80FA                   01    cmp dl, #0x01
27056 6E58           74           15              je vert_res_350
27057 6E5A           72           1D              jb vert_res_200
27058 6E5C           80FA                   02    cmp dl, #0x02
27059 6E5F           74           02              je vert_res_400
27060 6E61           EB           2A              jmp set_retcode
27061                       00006E63            vert_res_400:
27062                                             ; reset modeset ctl bit 7 and set bit 4
27063                                             ; set switches bit 3-0 to 0x09
27064 6E63           24                     7F    and al, #0x7f
27065 6E65           0C                     10    or al, #0x10
27066 6E67           80E4                   F0    and ah, #0xf0
27067 6E6A           80CC                   09    or ah, #0x09
27068 6E6D           75           14              jnz set_vert_res
27069                       00006E6F            vert_res_350:
27070                                             ; reset modeset ctl bit 7 and bit 4
27071                                             ; set switches bit 3-0 to 0x09
27072 6E6F           24                     6F    and al, #0x6f
27073 6E71           80E4                   F0    and ah, #0xf0
27074 6E74           80CC                   09    or ah, #0x09
27075 6E77           75           0A              jnz set_vert_res
27076                       00006E79            vert_res_200:
27077                                             ; set modeset ctl bit 7 and reset bit 4
27078                                             ; set switches bit 3-0 to 0x08
27079 6E79           24                     EF    and al, #0xef
27080 6E7B           0C                     80    or al, #0x80
27081 6E7D           80E4                   F0    and ah, #0xf0
27082 6E80           80CC                   08    or ah, #0x08
27083                       00006E83            set_vert_res:
27084 6E83           BB                   0089    mov bx, # 0x89
27085 6E86           8807                         mov [bx], al
27086 6E88           BB                   0088    mov bx, # 0x88
27087 6E8B           8827                         mov [bx], ah
27088                       00006E8D            set_retcode:
27089 6E8D           B8                   1212    mov ax, #0x1212
27090 6E90           5A                           pop dx
27091 6E91           5B                           pop bx
27092 6E92           1F                           pop ds
27093 6E93           C3                           ret
27094                       00006E94            biosfn_enable_default_palette_loading:
27095 6E94           1E                           push ds
27096 6E95           53                           push bx
27097 6E96           52                           push dx
27098 6E97           88C2                         mov dl, al
27099 6E99           80E2                   01    and dl, #0x01
27100 6E9C           C0E2                   03    shl dl, 3
27101 6E9F           B8                   0040    mov ax, # 0x40
27102 6EA2           8ED8                         mov ds, ax
27103 6EA4           BB                   0089    mov bx, # 0x89
27104 6EA7           8A07                         mov al, [bx]
27105 6EA9           24                     F7    and al, #0xf7
27106 6EAB           08D0                         or al, dl
27107 6EAD           8807                         mov [bx], al
27108 6EAF           B8                   1212    mov ax, #0x1212
27109 6EB2           5A                           pop dx
27110 6EB3           5B                           pop bx
27111 6EB4           1F                           pop ds
27112 6EB5           C3                           ret
27113                       00006EB6            biosfn_enable_video_addressing:
27114 6EB6           53                           push bx
27115 6EB7           52                           push dx
27116 6EB8           88C3                         mov bl, al
27117 6EBA           80E3                   01    and bl, #0x01
27118 6EBD           80F3                   01    xor bl, #0x01
27119 6EC0           D0E3                         shl bl, 1
27120 6EC2           BA                   03CC    mov dx, # 0x3cc
27121 6EC5           EC                           in al, dx
27122 6EC6           24                     FD    and al, #0xfd
27123 6EC8           08D8                         or al, bl
27124 6ECA           BA                   03C2    mov dx, # 0x3c2
27125 6ECD           EE                           out dx, al
27126 6ECE           B8                   1212    mov ax, #0x1212
27127 6ED1           5A                           pop dx
27128 6ED2           5B                           pop bx
27129 6ED3           C3                           ret
27130                       00006ED4            biosfn_enable_grayscale_summing:
27131 6ED4           1E                           push ds
27132 6ED5           53                           push bx
27133 6ED6           52                           push dx
27134 6ED7           88C2                         mov dl, al
27135 6ED9           80E2                   01    and dl, #0x01
27136 6EDC           80F2                   01    xor dl, #0x01
27137 6EDF           D0E2                         shl dl, 1
27138 6EE1           B8                   0040    mov ax, # 0x40
27139 6EE4           8ED8                         mov ds, ax
27140 6EE6           BB                   0089    mov bx, # 0x89
27141 6EE9           8A07                         mov al, [bx]
27142 6EEB           24                     FD    and al, #0xfd
27143 6EED           08D0                         or al, dl
27144 6EEF           8807                         mov [bx], al
27145 6EF1           B8                   1212    mov ax, #0x1212
27146 6EF4           5A                           pop dx
27147 6EF5           5B                           pop bx
27148 6EF6           1F                           pop ds
27149 6EF7           C3                           ret
27150                       00006EF8            biosfn_enable_cursor_emulation:
27151 6EF8           1E                           push ds
27152 6EF9           53                           push bx
27153 6EFA           52                           push dx
27154 6EFB           88C2                         mov dl, al
27155 6EFD           80E2                   01    and dl, #0x01
27156 6F00           80F2                   01    xor dl, #0x01
27157 6F03           B8                   0040    mov ax, # 0x40
27158 6F06           8ED8                         mov ds, ax
27159 6F08           BB                   0089    mov bx, # 0x89
27160 6F0B           8A07                         mov al, [bx]
27161 6F0D           24                     FE    and al, #0xfe
27162 6F0F           08D0                         or al, dl
27163 6F11           8807                         mov [bx], al
27164 6F13           B8                   1212    mov ax, #0x1212
27165 6F16           5A                           pop dx
27166 6F17           5B                           pop bx
27167 6F18           1F                           pop ds
27168 6F19           C3                           ret
27169                                           ! 3856 endasm
27170                                           !BCC_ENDASM
27171                                           ! 3857 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
27172                       00006F1A            _biosfn_switch_video_interface:
27173                                           !BCC_EOS
27174                                           !BCC_EOS
27175                                           !BCC_EOS
27176                                           ! 3858 {
27177                                           ! 3859 }
27178 6F1A           C3                         ret
27179                                           ! 3860 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
27180                       00006F1B            _biosfn_enable_video_refresh_control:
27181                                           !BCC_EOS
27182                                           ! 3861 {
27183                                           ! 3862 }
27184 6F1B           C3                         ret
27185                                           ! 3863 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
27186                                           ! 3864 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
27187                       00006F1C            _biosfn_write_string:
27188                                           !BCC_EOS
27189                                           !BCC_EOS
27190                                           !BCC_EOS
27191                                           !BCC_EOS
27192                                           !BCC_EOS
27193                                           !BCC_EOS
27194                                           !BCC_EOS
27195                                           !BCC_EOS
27196                                           ! 3865 {
27197                                           ! 3866  Bit16u newcurs,oldcurs,dummy;
27198                                           !BCC_EOS
27199                                           ! 3867  Bit8u car,carattr;
27200                                           !BCC_EOS
27201                                           ! 3868  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
27202 6F1C           55                         push	bp
27203 6F1D           89E5                       mov	bp,sp
27204 6F1F           83C4                   F8  add	sp,*-8
27205                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
27206 6F22           8D5E         FC            lea	bx,-4[bp]
27207 6F25           53                         push	bx
27208                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
27209 6F26           8D5E         FA            lea	bx,-6[bp]
27210 6F29           53                         push	bx
27211                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
27212 6F2A           8A46         06            mov	al,6[bp]
27213 6F2D           30E4                       xor	ah,ah
27214 6F2F           50                         push	ax
27215                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
27216 6F30           E8         D553            call	_biosfn_get_cursor_pos
27217 6F33           83C4                   06  add	sp,*6
27218                                           !BCC_EOS
27219                                           ! 3869  if(row==0xff)
27220                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
27221 6F36           8A46         0C            mov	al,$C[bp]
27222 6F39           3C                     FF  cmp	al,#$FF
27223 6F3B           75           12            jne 	.258
27224                       00006F3D            .259:
27225                                           ! 3870   {col=oldcurs&0x00ff;
27226                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
27227 6F3D           8A46         FC            mov	al,-4[bp]
27228                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
27229 6F40           8846         0E            mov	$E[bp],al
27230                                           !BCC_EOS
27231                                           ! 3871    row=(oldcurs&0xff00)>>8;
27232                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
27233 6F43           8B46         FC            mov	ax,-4[bp]
27234 6F46           30C0                       xor	al,al
27235                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
27236 6F48           88E0                       mov	al,ah
27237 6F4A           30E4                       xor	ah,ah
27238                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
27239 6F4C           8846         0C            mov	$C[bp],al
27240                                           !BCC_EOS
27241                                           ! 3872   }
27242                                           ! 3873  newcurs=row; newcurs<<=8; newcurs+=col;
27243                       00006F4F            .258:
27244                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
27245 6F4F           8A46         0C            mov	al,$C[bp]
27246 6F52           30E4                       xor	ah,ah
27247 6F54           8946         FE            mov	-2[bp],ax
27248                                           !BCC_EOS
27249                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
27250 6F57           8B46         FE            mov	ax,-2[bp]
27251 6F5A           88C4                       mov	ah,al
27252 6F5C           30C0                       xor	al,al
27253 6F5E           8946         FE            mov	-2[bp],ax
27254                                           !BCC_EOS
27255                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
27256 6F61           8B46         FE            mov	ax,-2[bp]
27257 6F64           0246         0E            add	al,$E[bp]
27258 6F67           80D4                   00  adc	ah,*0
27259 6F6A           8946         FE            mov	-2[bp],ax
27260                                           !BCC_EOS
27261                                           ! 3874  biosfn_set_cursor_pos(page,newcurs);
27262                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
27263 6F6D           FF76         FE            push	-2[bp]
27264                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27265 6F70           8A46         06            mov	al,6[bp]
27266 6F73           30E4                       xor	ah,ah
27267 6F75           50                         push	ax
27268                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27269 6F76           E8         D40D            call	_biosfn_set_cursor_pos
27270 6F79           83C4                   04  add	sp,*4
27271                                           !BCC_EOS
27272                                           ! 3875  while(count--!=0)
27273                                           ! 3876   {
27274 6F7C           EB           4F            jmp .25B
27275                       00006F7E            .25C:
27276                                           ! 3877    car=read_byte(seg,offset++);
27277                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
27278 6F7E           8B46         12            mov	ax,$12[bp]
27279 6F81           40                         inc	ax
27280 6F82           8946         12            mov	$12[bp],ax
27281                                           ! Debug: list unsigned short = ax-1 (used reg = )
27282 6F85           48                         dec	ax
27283 6F86           50                         push	ax
27284                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
27285 6F87           FF76         10            push	$10[bp]
27286                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27287 6F8A           E8         0ED2            call	_read_byte
27288 6F8D           83C4                   04  add	sp,*4
27289                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
27290 6F90           8846         F9            mov	-7[bp],al
27291                                           !BCC_EOS
27292                                           ! 3878    if((flag&0x02)!=0)
27293                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
27294 6F93           8A46         04            mov	al,4[bp]
27295 6F96           24                     02  and	al,*2
27296                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
27297 6F98           84C0                       test	al,al
27298 6F9A           74           15            je  	.25D
27299                       00006F9C            .25E:
27300                                           ! 3879     attr=read_byte(seg,offset++);
27301                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
27302 6F9C           8B46         12            mov	ax,$12[bp]
27303 6F9F           40                         inc	ax
27304 6FA0           8946         12            mov	$12[bp],ax
27305                                           ! Debug: list unsigned short = ax-1 (used reg = )
27306 6FA3           48                         dec	ax
27307 6FA4           50                         push	ax
27308                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
27309 6FA5           FF76         10            push	$10[bp]
27310                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27311 6FA8           E8         0EB4            call	_read_byte
27312 6FAB           83C4                   04  add	sp,*4
27313                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
27314 6FAE           8846         08            mov	8[bp],al
27315                                           !BCC_EOS
27316                                           ! 3880    biosfn_write_teletype(car,page,attr,3);
27317                       00006FB1            .25D:
27318                                           ! Debug: list int = const 3 (used reg = )
27319 6FB1           B8                   0003  mov	ax,*3
27320 6FB4           50                         push	ax
27321                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
27322 6FB5           8A46         08            mov	al,8[bp]
27323 6FB8           30E4                       xor	ah,ah
27324 6FBA           50                         push	ax
27325                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
27326 6FBB           8A46         06            mov	al,6[bp]
27327 6FBE           30E4                       xor	ah,ah
27328 6FC0           50                         push	ax
27329                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
27330 6FC1           8A46         F9            mov	al,-7[bp]
27331 6FC4           30E4                       xor	ah,ah
27332 6FC6           50                         push	ax
27333                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
27334 6FC7           E8         EEDF            call	_biosfn_write_teletype
27335 6FCA           83C4                   08  add	sp,*8
27336                                           !BCC_EOS
27337                                           ! 3881   }
27338                                           ! 3882  if((flag&0x01)==0)
27339                       00006FCD            .25B:
27340                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
27341 6FCD           8B46         0A            mov	ax,$A[bp]
27342 6FD0           48                         dec	ax
27343 6FD1           8946         0A            mov	$A[bp],ax
27344                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
27345 6FD4           3D                   FFFF  cmp	ax,*-1
27346 6FD7           75           A5            jne	.25C
27347                       00006FD9            .25F:
27348                       00006FD9            .25A:
27349                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
27350 6FD9           8A46         04            mov	al,4[bp]
27351 6FDC           24                     01  and	al,*1
27352                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
27353 6FDE           84C0                       test	al,al
27354 6FE0           75           0F            jne 	.260
27355                       00006FE2            .261:
27356                                           ! 3883   biosfn_set_cursor_pos(page,oldcurs);
27357                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
27358 6FE2           FF76         FC            push	-4[bp]
27359                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27360 6FE5           8A46         06            mov	al,6[bp]
27361 6FE8           30E4                       xor	ah,ah
27362 6FEA           50                         push	ax
27363                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27364 6FEB           E8         D398            call	_biosfn_set_cursor_pos
27365 6FEE           83C4                   04  add	sp,*4
27366                                           !BCC_EOS
27367                                           ! 3884 }
27368                       00006FF1            .260:
27369 6FF1           89EC                       mov	sp,bp
27370 6FF3           5D                         pop	bp
27371 6FF4           C3                         ret
27372                                           ! 3885 #asm
27373                                           !BCC_ASM
27374                       00000008            _biosfn_write_string.count	set	8
27375                       0000000E            _biosfn_write_string.seg	set	$E
27376                       0000000C            _biosfn_write_string.col	set	$C
27377                       00000002            _biosfn_write_string.flag	set	2
27378                       00000006            _biosfn_write_string.attr	set	6
27379                       00000004            _biosfn_write_string.page	set	4
27380                       0000000A            _biosfn_write_string.row	set	$A
27381                       00000010            _biosfn_write_string.offset	set	$10
27382                       00006FF5            biosfn_group_1A:
27383 6FF5           3C                     00    cmp al, #0x00
27384 6FF7           74           05              je biosfn_read_display_code
27385 6FF9           3C                     01    cmp al, #0x01
27386 6FFB           74           16              je biosfn_set_display_code
27387 6FFD           C3                           ret
27388                       00006FFE            biosfn_read_display_code:
27389 6FFE           1E                           push ds
27390 6FFF           50                           push ax
27391 7000           B8                   0040    mov ax, # 0x40
27392 7003           8ED8                         mov ds, ax
27393 7005           BB                   008A    mov bx, # 0x8A
27394 7008           8A07                         mov al, [bx]
27395 700A           88C3                         mov bl, al
27396 700C           30FF                         xor bh, bh
27397 700E           58                           pop ax
27398 700F           88E0                         mov al, ah
27399 7011           1F                           pop ds
27400 7012           C3                           ret
27401                       00007013            biosfn_set_display_code:
27402 7013           1E                           push ds
27403 7014           50                           push ax
27404 7015           53                           push bx
27405 7016           B8                   0040    mov ax, # 0x40
27406 7019           8ED8                         mov ds, ax
27407 701B           89D8                         mov ax, bx
27408 701D           BB                   008A    mov bx, # 0x8A
27409 7020           8807                         mov [bx], al
27410 7022           5B                           pop bx
27411 7023           58                           pop ax
27412 7024           88E0                         mov al, ah
27413 7026           1F                           pop ds
27414 7027           C3                           ret
27415                                           ! 3919 endasm
27416                                           !BCC_ENDASM
27417                                           ! 3920 static void biosfn_read_state_info (BX,ES,DI)
27418                                           ! Register BX used in function biosfn_write_string
27419                                           ! 3921 Bit16u BX;Bit16u ES;Bit16u DI;
27420                       00007028            _biosfn_read_state_info:
27421                                           !BCC_EOS
27422                                           !BCC_EOS
27423                                           !BCC_EOS
27424                                           ! 3922 {
27425                                           ! 3923  write_word(ES,DI+0x00,&static_functionality);
27426 7028           55                         push	bp
27427 7029           89E5                       mov	bp,sp
27428                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27429 702B           BB                   0F8B  mov	bx,#_static_functionality
27430 702E           53                         push	bx
27431                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27432 702F           8B46         08            mov	ax,8[bp]
27433                                           ! Debug: list unsigned int = ax+0 (used reg = )
27434 7032           50                         push	ax
27435                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27436 7033           FF76         06            push	6[bp]
27437                                           ! Debug: func () void = write_word+0 (used reg = )
27438 7036           E8         0E64            call	_write_word
27439 7039           89EC                       mov	sp,bp
27440                                           !BCC_EOS
27441                                           ! 3924  write_word(ES,DI+0x02,0xC000);
27442                                           ! Debug: list unsigned int = const $C000 (used reg = )
27443 703B           B8                   C000  mov	ax,#$C000
27444 703E           50                         push	ax
27445                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27446 703F           8B46         08            mov	ax,8[bp]
27447                                           ! Debug: list unsigned int = ax+2 (used reg = )
27448 7042           40                         inc	ax
27449 7043           40                         inc	ax
27450 7044           50                         push	ax
27451                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27452 7045           FF76         06            push	6[bp]
27453                                           ! Debug: func () void = write_word+0 (used reg = )
27454 7048           E8         0E52            call	_write_word
27455 704B           89EC                       mov	sp,bp
27456                                           !BCC_EOS
27457                                           ! 3925  memcpyb(ES,DI+0x04,0x40,0x49,30);
27458                                           ! Debug: list int = const $1E (used reg = )
27459 704D           B8                   001E  mov	ax,*$1E
27460 7050           50                         push	ax
27461                                           ! Debug: list int = const $49 (used reg = )
27462 7051           B8                   0049  mov	ax,*$49
27463 7054           50                         push	ax
27464                                           ! Debug: list int = const $40 (used reg = )
27465 7055           B8                   0040  mov	ax,*$40
27466 7058           50                         push	ax
27467                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27468 7059           8B46         08            mov	ax,8[bp]
27469                                           ! Debug: list unsigned int = ax+4 (used reg = )
27470 705C           05                   0004  add	ax,*4
27471 705F           50                         push	ax
27472                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27473 7060           FF76         06            push	6[bp]
27474                                           ! Debug: func () void = memcpyb+0 (used reg = )
27475 7063           E8         0D99            call	_memcpyb
27476 7066           89EC                       mov	sp,bp
27477                                           !BCC_EOS
27478                                           ! 3926  memcpyb(ES,DI+0x22,0x40,0x84,3);
27479                                           ! Debug: list int = const 3 (used reg = )
27480 7068           B8                   0003  mov	ax,*3
27481 706B           50                         push	ax
27482                                           ! Debug: list int = const $84 (used reg = )
27483 706C           B8                   0084  mov	ax,#$84
27484 706F           50                         push	ax
27485                                           ! Debug: list int = const $40 (used reg = )
27486 7070           B8                   0040  mov	ax,*$40
27487 7073           50                         push	ax
27488                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27489 7074           8B46         08            mov	ax,8[bp]
27490                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27491 7077           05                   0022  add	ax,*$22
27492 707A           50                         push	ax
27493                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27494 707B           FF76         06            push	6[bp]
27495                                           ! Debug: func () void = memcpyb+0 (used reg = )
27496 707E           E8         0D7E            call	_memcpyb
27497 7081           89EC                       mov	sp,bp
27498                                           !BCC_EOS
27499                                           ! 3927  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27500                                           ! Debug: list int = const $8A (used reg = )
27501 7083           B8                   008A  mov	ax,#$8A
27502 7086           50                         push	ax
27503                                           ! Debug: list int = const $40 (used reg = )
27504 7087           B8                   0040  mov	ax,*$40
27505 708A           50                         push	ax
27506                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27507 708B           E8         0DD1            call	_read_byte
27508 708E           89EC                       mov	sp,bp
27509                                           ! Debug: list unsigned char = al+0 (used reg = )
27510 7090           30E4                       xor	ah,ah
27511 7092           50                         push	ax
27512                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27513 7093           8B46         08            mov	ax,8[bp]
27514                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27515 7096           05                   0025  add	ax,*$25
27516 7099           50                         push	ax
27517                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27518 709A           FF76         06            push	6[bp]
27519                                           ! Debug: func () void = write_byte+0 (used reg = )
27520 709D           E8         0DE5            call	_write_byte
27521 70A0           89EC                       mov	sp,bp
27522                                           !BCC_EOS
27523                                           ! 3928  write_byte(ES,DI+0x26,0);
27524                                           ! Debug: list int = const 0 (used reg = )
27525 70A2           31C0                       xor	ax,ax
27526 70A4           50                         push	ax
27527                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27528 70A5           8B46         08            mov	ax,8[bp]
27529                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27530 70A8           05                   0026  add	ax,*$26
27531 70AB           50                         push	ax
27532                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27533 70AC           FF76         06            push	6[bp]
27534                                           ! Debug: func () void = write_byte+0 (used reg = )
27535 70AF           E8         0DD3            call	_write_byte
27536 70B2           89EC                       mov	sp,bp
27537                                           !BCC_EOS
27538                                           ! 3929  write_byte(ES,DI+0x27,16);
27539                                           ! Debug: list int = const $10 (used reg = )
27540 70B4           B8                   0010  mov	ax,*$10
27541 70B7           50                         push	ax
27542                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27543 70B8           8B46         08            mov	ax,8[bp]
27544                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27545 70BB           05                   0027  add	ax,*$27
27546 70BE           50                         push	ax
27547                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27548 70BF           FF76         06            push	6[bp]
27549                                           ! Debug: func () void = write_byte+0 (used reg = )
27550 70C2           E8         0DC0            call	_write_byte
27551 70C5           89EC                       mov	sp,bp
27552                                           !BCC_EOS
27553                                           ! 3930  write_byte(ES,DI+0x28,0);
27554                                           ! Debug: list int = const 0 (used reg = )
27555 70C7           31C0                       xor	ax,ax
27556 70C9           50                         push	ax
27557                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27558 70CA           8B46         08            mov	ax,8[bp]
27559                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27560 70CD           05                   0028  add	ax,*$28
27561 70D0           50                         push	ax
27562                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27563 70D1           FF76         06            push	6[bp]
27564                                           ! Debug: func () void = write_byte+0 (used reg = )
27565 70D4           E8         0DAE            call	_write_byte
27566 70D7           89EC                       mov	sp,bp
27567                                           !BCC_EOS
27568                                           ! 3931  write_byte(ES,DI+0x29,8);
27569                                           ! Debug: list int = const 8 (used reg = )
27570 70D9           B8                   0008  mov	ax,*8
27571 70DC           50                         push	ax
27572                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27573 70DD           8B46         08            mov	ax,8[bp]
27574                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27575 70E0           05                   0029  add	ax,*$29
27576 70E3           50                         push	ax
27577                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27578 70E4           FF76         06            push	6[bp]
27579                                           ! Debug: func () void = write_byte+0 (used reg = )
27580 70E7           E8         0D9B            call	_write_byte
27581 70EA           89EC                       mov	sp,bp
27582                                           !BCC_EOS
27583                                           ! 3932  write_byte(ES,DI+0x2a,2);
27584                                           ! Debug: list int = const 2 (used reg = )
27585 70EC           B8                   0002  mov	ax,*2
27586 70EF           50                         push	ax
27587                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27588 70F0           8B46         08            mov	ax,8[bp]
27589                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27590 70F3           05                   002A  add	ax,*$2A
27591 70F6           50                         push	ax
27592                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27593 70F7           FF76         06            push	6[bp]
27594                                           ! Debug: func () void = write_byte+0 (used reg = )
27595 70FA           E8         0D88            call	_write_byte
27596 70FD           89EC                       mov	sp,bp
27597                                           !BCC_EOS
27598                                           ! 3933  write_byte(ES,DI+0x2b,0);
27599                                           ! Debug: list int = const 0 (used reg = )
27600 70FF           31C0                       xor	ax,ax
27601 7101           50                         push	ax
27602                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27603 7102           8B46         08            mov	ax,8[bp]
27604                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27605 7105           05                   002B  add	ax,*$2B
27606 7108           50                         push	ax
27607                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27608 7109           FF76         06            push	6[bp]
27609                                           ! Debug: func () void = write_byte+0 (used reg = )
27610 710C           E8         0D76            call	_write_byte
27611 710F           89EC                       mov	sp,bp
27612                                           !BCC_EOS
27613                                           ! 3934  write_byte(ES,DI+0x2c,0);
27614                                           ! Debug: list int = const 0 (used reg = )
27615 7111           31C0                       xor	ax,ax
27616 7113           50                         push	ax
27617                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27618 7114           8B46         08            mov	ax,8[bp]
27619                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27620 7117           05                   002C  add	ax,*$2C
27621 711A           50                         push	ax
27622                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27623 711B           FF76         06            push	6[bp]
27624                                           ! Debug: func () void = write_byte+0 (used reg = )
27625 711E           E8         0D64            call	_write_byte
27626 7121           89EC                       mov	sp,bp
27627                                           !BCC_EOS
27628                                           ! 3935  write_byte(ES,DI+0x31,3);
27629                                           ! Debug: list int = const 3 (used reg = )
27630 7123           B8                   0003  mov	ax,*3
27631 7126           50                         push	ax
27632                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27633 7127           8B46         08            mov	ax,8[bp]
27634                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27635 712A           05                   0031  add	ax,*$31
27636 712D           50                         push	ax
27637                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27638 712E           FF76         06            push	6[bp]
27639                                           ! Debug: func () void = write_byte+0 (used reg = )
27640 7131           E8         0D51            call	_write_byte
27641 7134           89EC                       mov	sp,bp
27642                                           !BCC_EOS
27643                                           ! 3936  write_byte(ES,DI+0x32,0);
27644                                           ! Debug: list int = const 0 (used reg = )
27645 7136           31C0                       xor	ax,ax
27646 7138           50                         push	ax
27647                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27648 7139           8B46         08            mov	ax,8[bp]
27649                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27650 713C           05                   0032  add	ax,*$32
27651 713F           50                         push	ax
27652                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27653 7140           FF76         06            push	6[bp]
27654                                           ! Debug: func () void = write_byte+0 (used reg = )
27655 7143           E8         0D3F            call	_write_byte
27656 7146           89EC                       mov	sp,bp
27657                                           !BCC_EOS
27658                                           ! 3937  memsetb(ES,DI+0x33,0,13);
27659                                           ! Debug: list int = const $D (used reg = )
27660 7148           B8                   000D  mov	ax,*$D
27661 714B           50                         push	ax
27662                                           ! Debug: list int = const 0 (used reg = )
27663 714C           31C0                       xor	ax,ax
27664 714E           50                         push	ax
27665                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27666 714F           8B46         08            mov	ax,8[bp]
27667                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27668 7152           05                   0033  add	ax,*$33
27669 7155           50                         push	ax
27670                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27671 7156           FF76         06            push	6[bp]
27672                                           ! Debug: func () void = memsetb+0 (used reg = )
27673 7159           E8         0C59            call	_memsetb
27674 715C           89EC                       mov	sp,bp
27675                                           !BCC_EOS
27676                                           ! 3938 }
27677 715E           5D                         pop	bp
27678 715F           C3                         ret
27679                                           ! 3939 static Bit16u biosfn_read_video_state_size2 (CX)
27680                                           ! Register BX used in function biosfn_read_state_info
27681                                           ! 3940      Bit16u CX;
27682                       00007160            _biosfn_read_video_state_size2:
27683                                           !BCC_EOS
27684                                           ! 3941 {
27685                                           ! 3942     Bit16u size;
27686                                           !BCC_EOS
27687                                           ! 3943     size = 0;
27688 7160           55                         push	bp
27689 7161           89E5                       mov	bp,sp
27690 7163           4C                         dec	sp
27691 7164           4C                         dec	sp
27692                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27693 7165           31C0                       xor	ax,ax
27694 7167           8946         FE            mov	-2[bp],ax
27695                                           !BCC_EOS
27696                                           ! 3944     if (CX & 1) {
27697                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27698 716A           8A46         04            mov	al,4[bp]
27699 716D           24                     01  and	al,*1
27700 716F           84C0                       test	al,al
27701 7171           74           09            je  	.262
27702                       00007173            .263:
27703                                           ! 3945         size += 0x46;
27704                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27705 7173           8B46         FE            mov	ax,-2[bp]
27706 7176           05                   0046  add	ax,*$46
27707 7179           8946         FE            mov	-2[bp],ax
27708                                           !BCC_EOS
27709                                           ! 3946     }
27710                                           ! 3947     if (CX & 2) {
27711                       0000717C            .262:
27712                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27713 717C           8A46         04            mov	al,4[bp]
27714 717F           24                     02  and	al,*2
27715 7181           84C0                       test	al,al
27716 7183           74           09            je  	.264
27717                       00007185            .265:
27718                                           ! 3948         size += (5 + 8 + 5) * 2 + 6;
27719                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27720 7185           8B46         FE            mov	ax,-2[bp]
27721 7188           05                   002A  add	ax,*$2A
27722 718B           8946         FE            mov	-2[bp],ax
27723                                           !BCC_EOS
27724                                           ! 3949     }
27725                                           ! 3950     if (CX & 4) {
27726                       0000718E            .264:
27727                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27728 718E           8A46         04            mov	al,4[bp]
27729 7191           24                     04  and	al,*4
27730 7193           84C0                       test	al,al
27731 7195           74           09            je  	.266
27732                       00007197            .267:
27733                                           ! 3951         size += 3 + 256 * 3 + 1;
27734                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27735 7197           8B46         FE            mov	ax,-2[bp]
27736 719A           05                   0304  add	ax,#$304
27737 719D           8946         FE            mov	-2[bp],ax
27738                                           !BCC_EOS
27739                                           ! 3952 }
27740                                           ! 3953     return size;
27741                       000071A0            .266:
27742 71A0           8B46         FE            mov	ax,-2[bp]
27743 71A3           89EC                       mov	sp,bp
27744 71A5           5D                         pop	bp
27745 71A6           C3                         ret
27746                                           !BCC_EOS
27747                                           ! 3954 }
27748                                           ! 3955 static void biosfn_read_video_state_size (CX, BX)
27749                                           ! 3956      Bit16u CX; Bit16u *BX;
27750                       000071A7            _biosfn_read_video_state_size:
27751                                           !BCC_EOS
27752                                           !BCC_EOS
27753                                           ! 3957 {
27754                                           ! 3958     Bit16u ss=get_SS();
27755 71A7           55                         push	bp
27756 71A8           89E5                       mov	bp,sp
27757 71AA           4C                         dec	sp
27758 71AB           4C                         dec	sp
27759                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27760 71AC           E8         0D3C            call	_get_SS
27761                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27762 71AF           8946         FE            mov	-2[bp],ax
27763                                           !BCC_EOS
27764                                           ! 3959     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27765                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27766 71B2           FF76         04            push	4[bp]
27767                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27768 71B5           E8         FFA8            call	_biosfn_read_video_state_size2
27769 71B8           44                         inc	sp
27770 71B9           44                         inc	sp
27771                                           ! Debug: list unsigned short = ax+0 (used reg = )
27772 71BA           50                         push	ax
27773                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27774 71BB           FF76         06            push	6[bp]
27775                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27776 71BE           FF76         FE            push	-2[bp]
27777                                           ! Debug: func () void = write_word+0 (used reg = )
27778 71C1           E8         0CD9            call	_write_word
27779 71C4           83C4                   06  add	sp,*6
27780                                           !BCC_EOS
27781                                           ! 3960 }
27782 71C7           89EC                       mov	sp,bp
27783 71C9           5D                         pop	bp
27784 71CA           C3                         ret
27785                                           ! 3961 static Bit16u biosfn_save_video_state (CX,ES,BX)
27786                                           ! 3962      Bit16u CX;Bit16u ES;Bit16u BX;
27787                       000071CB            _biosfn_save_video_state:
27788                                           !BCC_EOS
27789                                           !BCC_EOS
27790                                           !BCC_EOS
27791                                           ! 3963 {
27792                                           ! 3964     Bit16u i, v, crtc_addr, ar_index;
27793                                           !BCC_EOS
27794                                           ! 3965     crtc_addr = read_word(0x40, 0x63);
27795 71CB           55                         push	bp
27796 71CC           89E5                       mov	bp,sp
27797 71CE           83C4                   F8  add	sp,*-8
27798                                           ! Debug: list int = const $63 (used reg = )
27799 71D1           B8                   0063  mov	ax,*$63
27800 71D4           50                         push	ax
27801                                           ! Debug: list int = const $40 (used reg = )
27802 71D5           B8                   0040  mov	ax,*$40
27803 71D8           50                         push	ax
27804                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27805 71D9           E8         0C96            call	_read_word
27806 71DC           83C4                   04  add	sp,*4
27807                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27808 71DF           8946         FA            mov	-6[bp],ax
27809                                           !BCC_EOS
27810                                           ! 3966     if (CX & 1) {
27811                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27812 71E2           8A46         04            mov	al,4[bp]
27813 71E5           24                     01  and	al,*1
27814 71E7           84C0                       test	al,al
27815 71E9         0F84         0266            beq 	.268
27816                       000071ED            .269:
27817                                           ! 3967         write_byte(ES, BX, inb(0x3c4)); BX++;
27818                                           ! Debug: list int = const $3C4 (used reg = )
27819 71ED           B8                   03C4  mov	ax,#$3C4
27820 71F0           50                         push	ax
27821                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27822 71F1           E8         0CC1            call	_inb
27823 71F4           44                         inc	sp
27824 71F5           44                         inc	sp
27825                                           ! Debug: list unsigned char = al+0 (used reg = )
27826 71F6           30E4                       xor	ah,ah
27827 71F8           50                         push	ax
27828                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27829 71F9           FF76         08            push	8[bp]
27830                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27831 71FC           FF76         06            push	6[bp]
27832                                           ! Debug: func () void = write_byte+0 (used reg = )
27833 71FF           E8         0C83            call	_write_byte
27834 7202           83C4                   06  add	sp,*6
27835                                           !BCC_EOS
27836                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27837 7205           8B46         08            mov	ax,8[bp]
27838 7208           40                         inc	ax
27839 7209           8946         08            mov	8[bp],ax
27840                                           !BCC_EOS
27841                                           ! 3968         write_byte(ES, BX, inb(crtc_addr)); BX++;
27842                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27843 720C           FF76         FA            push	-6[bp]
27844                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27845 720F           E8         0CA3            call	_inb
27846 7212           44                         inc	sp
27847 7213           44                         inc	sp
27848                                           ! Debug: list unsigned char = al+0 (used reg = )
27849 7214           30E4                       xor	ah,ah
27850 7216           50                         push	ax
27851                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27852 7217           FF76         08            push	8[bp]
27853                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27854 721A           FF76         06            push	6[bp]
27855                                           ! Debug: func () void = write_byte+0 (used reg = )
27856 721D           E8         0C65            call	_write_byte
27857 7220           83C4                   06  add	sp,*6
27858                                           !BCC_EOS
27859                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27860 7223           8B46         08            mov	ax,8[bp]
27861 7226           40                         inc	ax
27862 7227           8946         08            mov	8[bp],ax
27863                                           !BCC_EOS
27864                                           ! 3969         write_byte(ES, BX, inb(0x3ce)); BX++;
27865                                           ! Debug: list int = const $3CE (used reg = )
27866 722A           B8                   03CE  mov	ax,#$3CE
27867 722D           50                         push	ax
27868                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27869 722E           E8         0C84            call	_inb
27870 7231           44                         inc	sp
27871 7232           44                         inc	sp
27872                                           ! Debug: list unsigned char = al+0 (used reg = )
27873 7233           30E4                       xor	ah,ah
27874 7235           50                         push	ax
27875                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27876 7236           FF76         08            push	8[bp]
27877                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27878 7239           FF76         06            push	6[bp]
27879                                           ! Debug: func () void = write_byte+0 (used reg = )
27880 723C           E8         0C46            call	_write_byte
27881 723F           83C4                   06  add	sp,*6
27882                                           !BCC_EOS
27883                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27884 7242           8B46         08            mov	ax,8[bp]
27885 7245           40                         inc	ax
27886 7246           8946         08            mov	8[bp],ax
27887                                           !BCC_EOS
27888                                           ! 3970         inb(0x3da);
27889                                           ! Debug: list int = const $3DA (used reg = )
27890 7249           B8                   03DA  mov	ax,#$3DA
27891 724C           50                         push	ax
27892                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27893 724D           E8         0C65            call	_inb
27894 7250           44                         inc	sp
27895 7251           44                         inc	sp
27896                                           !BCC_EOS
27897                                           ! 3971         ar_index = inb(0x3c0);
27898                                           ! Debug: list int = const $3C0 (used reg = )
27899 7252           B8                   03C0  mov	ax,#$3C0
27900 7255           50                         push	ax
27901                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27902 7256           E8         0C5C            call	_inb
27903 7259           44                         inc	sp
27904 725A           44                         inc	sp
27905                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27906 725B           30E4                       xor	ah,ah
27907 725D           8946         F8            mov	-8[bp],ax
27908                                           !BCC_EOS
27909                                           ! 3972         write_byte(ES, BX, ar_index); BX++;
27910                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27911 7260           FF76         F8            push	-8[bp]
27912                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27913 7263           FF76         08            push	8[bp]
27914                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27915 7266           FF76         06            push	6[bp]
27916                                           ! Debug: func () void = write_byte+0 (used reg = )
27917 7269           E8         0C19            call	_write_byte
27918 726C           83C4                   06  add	sp,*6
27919                                           !BCC_EOS
27920                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27921 726F           8B46         08            mov	ax,8[bp]
27922 7272           40                         inc	ax
27923 7273           8946         08            mov	8[bp],ax
27924                                           !BCC_EOS
27925                                           ! 3973         write_byte(ES, BX, inb(0x3ca)); BX++;
27926                                           ! Debug: list int = const $3CA (used reg = )
27927 7276           B8                   03CA  mov	ax,#$3CA
27928 7279           50                         push	ax
27929                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27930 727A           E8         0C38            call	_inb
27931 727D           44                         inc	sp
27932 727E           44                         inc	sp
27933                                           ! Debug: list unsigned char = al+0 (used reg = )
27934 727F           30E4                       xor	ah,ah
27935 7281           50                         push	ax
27936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27937 7282           FF76         08            push	8[bp]
27938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27939 7285           FF76         06            push	6[bp]
27940                                           ! Debug: func () void = write_byte+0 (used reg = )
27941 7288           E8         0BFA            call	_write_byte
27942 728B           83C4                   06  add	sp,*6
27943                                           !BCC_EOS
27944                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27945 728E           8B46         08            mov	ax,8[bp]
27946 7291           40                         inc	ax
27947 7292           8946         08            mov	8[bp],ax
27948                                           !BCC_EOS
27949                                           ! 3974         for(i=1;i<=4;i++){
27950                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27951 7295           B8                   0001  mov	ax,*1
27952 7298           8946         FE            mov	-2[bp],ax
27953                                           !BCC_EOS
27954                                           !BCC_EOS
27955 729B           EB           33            jmp .26C
27956                       0000729D            .26D:
27957                                           ! 3975             outb(0x3c4, i);
27958                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27959 729D           FF76         FE            push	-2[bp]
27960                                           ! Debug: list int = const $3C4 (used reg = )
27961 72A0           B8                   03C4  mov	ax,#$3C4
27962 72A3           50                         push	ax
27963                                           ! Debug: func () void = outb+0 (used reg = )
27964 72A4           E8         0C24            call	_outb
27965 72A7           83C4                   04  add	sp,*4
27966                                           !BCC_EOS
27967                                           ! 3976             write_byte(ES, BX, inb(0x3c5)); BX++;
27968                                           ! Debug: list int = const $3C5 (used reg = )
27969 72AA           B8                   03C5  mov	ax,#$3C5
27970 72AD           50                         push	ax
27971                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27972 72AE           E8         0C04            call	_inb
27973 72B1           44                         inc	sp
27974 72B2           44                         inc	sp
27975                                           ! Debug: list unsigned char = al+0 (used reg = )
27976 72B3           30E4                       xor	ah,ah
27977 72B5           50                         push	ax
27978                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27979 72B6           FF76         08            push	8[bp]
27980                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27981 72B9           FF76         06            push	6[bp]
27982                                           ! Debug: func () void = write_byte+0 (used reg = )
27983 72BC           E8         0BC6            call	_write_byte
27984 72BF           83C4                   06  add	sp,*6
27985                                           !BCC_EOS
27986                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27987 72C2           8B46         08            mov	ax,8[bp]
27988 72C5           40                         inc	ax
27989 72C6           8946         08            mov	8[bp],ax
27990                                           !BCC_EOS
27991                                           ! 3977         }
27992                                           ! 3978         outb(0x3c4, 0);
27993                       000072C9            .26B:
27994                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27995 72C9           8B46         FE            mov	ax,-2[bp]
27996 72CC           40                         inc	ax
27997 72CD           8946         FE            mov	-2[bp],ax
27998                       000072D0            .26C:
27999                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
28000 72D0           8B46         FE            mov	ax,-2[bp]
28001 72D3           3D                   0004  cmp	ax,*4
28002 72D6           76           C5            jbe	.26D
28003                       000072D8            .26E:
28004                       000072D8            .26A:
28005                                           ! Debug: list int = const 0 (used reg = )
28006 72D8           31C0                       xor	ax,ax
28007 72DA           50                         push	ax
28008                                           ! Debug: list int = const $3C4 (used reg = )
28009 72DB           B8                   03C4  mov	ax,#$3C4
28010 72DE           50                         push	ax
28011                                           ! Debug: func () void = outb+0 (used reg = )
28012 72DF           E8         0BE9            call	_outb
28013 72E2           83C4                   04  add	sp,*4
28014                                           !BCC_EOS
28015                                           ! 3979         write_byte(ES, BX, inb(0x3c5)); BX++;
28016                                           ! Debug: list int = const $3C5 (used reg = )
28017 72E5           B8                   03C5  mov	ax,#$3C5
28018 72E8           50                         push	ax
28019                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28020 72E9           E8         0BC9            call	_inb
28021 72EC           44                         inc	sp
28022 72ED           44                         inc	sp
28023                                           ! Debug: list unsigned char = al+0 (used reg = )
28024 72EE           30E4                       xor	ah,ah
28025 72F0           50                         push	ax
28026                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28027 72F1           FF76         08            push	8[bp]
28028                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28029 72F4           FF76         06            push	6[bp]
28030                                           ! Debug: func () void = write_byte+0 (used reg = )
28031 72F7           E8         0B8B            call	_write_byte
28032 72FA           83C4                   06  add	sp,*6
28033                                           !BCC_EOS
28034                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28035 72FD           8B46         08            mov	ax,8[bp]
28036 7300           40                         inc	ax
28037 7301           8946         08            mov	8[bp],ax
28038                                           !BCC_EOS
28039                                           ! 3980         for(i=0;i<=0x18;i++) {
28040                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28041 7304           31C0                       xor	ax,ax
28042 7306           8946         FE            mov	-2[bp],ax
28043                                           !BCC_EOS
28044                                           !BCC_EOS
28045 7309           EB           33            jmp .271
28046                       0000730B            .272:
28047                                           ! 3981             outb(crtc_addr,i);
28048                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
28049 730B           FF76         FE            push	-2[bp]
28050                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
28051 730E           FF76         FA            push	-6[bp]
28052                                           ! Debug: func () void = outb+0 (used reg = )
28053 7311           E8         0BB7            call	_outb
28054 7314           83C4                   04  add	sp,*4
28055                                           !BCC_EOS
28056                                           ! 3982             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
28057                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
28058 7317           8B46         FA            mov	ax,-6[bp]
28059                                           ! Debug: list unsigned int = ax+1 (used reg = )
28060 731A           40                         inc	ax
28061 731B           50                         push	ax
28062                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28063 731C           E8         0B96            call	_inb
28064 731F           44                         inc	sp
28065 7320           44                         inc	sp
28066                                           ! Debug: list unsigned char = al+0 (used reg = )
28067 7321           30E4                       xor	ah,ah
28068 7323           50                         push	ax
28069                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28070 7324           FF76         08            push	8[bp]
28071                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28072 7327           FF76         06            push	6[bp]
28073                                           ! Debug: func () void = write_byte+0 (used reg = )
28074 732A           E8         0B58            call	_write_byte
28075 732D           83C4                   06  add	sp,*6
28076                                           !BCC_EOS
28077                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28078 7330           8B46         08            mov	ax,8[bp]
28079 7333           40                         inc	ax
28080 7334           8946         08            mov	8[bp],ax
28081                                           !BCC_EOS
28082                                           ! 3983         }
28083                                           ! 3984         for(i=0;i<=0x13;i+
28084                       00007337            .270:
28085                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28086 7337           8B46         FE            mov	ax,-2[bp]
28087 733A           40                         inc	ax
28088 733B           8946         FE            mov	-2[bp],ax
28089                       0000733E            .271:
28090                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
28091 733E           8B46         FE            mov	ax,-2[bp]
28092 7341           3D                   0018  cmp	ax,*$18
28093 7344           76           C5            jbe	.272
28094                       00007346            .273:
28095                       00007346            .26F:
28096                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28097 7346           31C0                       xor	ax,ax
28098 7348           8946         FE            mov	-2[bp],ax
28099                                           !BCC_EOS
28100                                           !BCC_EOS
28101                                           ! 3984 +) {
28102 734B           EB           44            jmp .276
28103                       0000734D            .277:
28104                                           ! 3985             inb(0x3da);
28105                                           ! Debug: list int = const $3DA (used reg = )
28106 734D           B8                   03DA  mov	ax,#$3DA
28107 7350           50                         push	ax
28108                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28109 7351           E8         0B61            call	_inb
28110 7354           44                         inc	sp
28111 7355           44                         inc	sp
28112                                           !BCC_EOS
28113                                           ! 3986             outb(0x3c0, i | (ar_index & 0x20));
28114                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
28115 7356           8A46         F8            mov	al,-8[bp]
28116 7359           24                     20  and	al,*$20
28117                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
28118                                           ! Debug: expression subtree swapping
28119 735B           30E4                       xor	ah,ah
28120 735D           0B46         FE            or	ax,-2[bp]
28121                                           ! Debug: list unsigned int = ax+0 (used reg = )
28122 7360           50                         push	ax
28123                                           ! Debug: list int = const $3C0 (used reg = )
28124 7361           B8                   03C0  mov	ax,#$3C0
28125 7364           50                         push	ax
28126                                           ! Debug: func () void = outb+0 (used reg = )
28127 7365           E8         0B63            call	_outb
28128 7368           83C4                   04  add	sp,*4
28129                                           !BCC_EOS
28130                                           ! 3987             write_byte(ES, BX, inb(0x3c1)); BX++;
28131                                           ! Debug: list int = const $3C1 (used reg = )
28132 736B           B8                   03C1  mov	ax,#$3C1
28133 736E           50                         push	ax
28134                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28135 736F           E8         0B43            call	_inb
28136 7372           44                         inc	sp
28137 7373           44                         inc	sp
28138                                           ! Debug: list unsigned char = al+0 (used reg = )
28139 7374           30E4                       xor	ah,ah
28140 7376           50                         push	ax
28141                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28142 7377           FF76         08            push	8[bp]
28143                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28144 737A           FF76         06            push	6[bp]
28145                                           ! Debug: func () void = write_byte+0 (used reg = )
28146 737D           E8         0B05            call	_write_byte
28147 7380           83C4                   06  add	sp,*6
28148                                           !BCC_EOS
28149                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28150 7383           8B46         08            mov	ax,8[bp]
28151 7386           40                         inc	ax
28152 7387           8946         08            mov	8[bp],ax
28153                                           !BCC_EOS
28154                                           ! 3988         }
28155                                           ! 3989         inb(0x3da);
28156                       0000738A            .275:
28157                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28158 738A           8B46         FE            mov	ax,-2[bp]
28159 738D           40                         inc	ax
28160 738E           8946         FE            mov	-2[bp],ax
28161                       00007391            .276:
28162                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
28163 7391           8B46         FE            mov	ax,-2[bp]
28164 7394           3D                   0013  cmp	ax,*$13
28165 7397           76           B4            jbe	.277
28166                       00007399            .278:
28167                       00007399            .274:
28168                                           ! Debug: list int = const $3DA (used reg = )
28169 7399           B8                   03DA  mov	ax,#$3DA
28170 739C           50                         push	ax
28171                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28172 739D           E8         0B15            call	_inb
28173 73A0           44                         inc	sp
28174 73A1           44                         inc	sp
28175                                           !BCC_EOS
28176                                           ! 3990         for(i=0;i<=8;i++) {
28177                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28178 73A2           31C0                       xor	ax,ax
28179 73A4           8946         FE            mov	-2[bp],ax
28180                                           !BCC_EOS
28181                                           !BCC_EOS
28182 73A7           EB           33            jmp .27B
28183                       000073A9            .27C:
28184                                           ! 3991             outb(0x3ce,i);
28185                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
28186 73A9           FF76         FE            push	-2[bp]
28187                                           ! Debug: list int = const $3CE (used reg = )
28188 73AC           B8                   03CE  mov	ax,#$3CE
28189 73AF           50                         push	ax
28190                                           ! Debug: func () void = outb+0 (used reg = )
28191 73B0           E8         0B18            call	_outb
28192 73B3           83C4                   04  add	sp,*4
28193                                           !BCC_EOS
28194                                           ! 3992             write_byte(ES, BX, inb(0x3cf)); BX++;
28195                                           ! Debug: list int = const $3CF (used reg = )
28196 73B6           B8                   03CF  mov	ax,#$3CF
28197 73B9           50                         push	ax
28198                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28199 73BA           E8         0AF8            call	_inb
28200 73BD           44                         inc	sp
28201 73BE           44                         inc	sp
28202                                           ! Debug: list unsigned char = al+0 (used reg = )
28203 73BF           30E4                       xor	ah,ah
28204 73C1           50                         push	ax
28205                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28206 73C2           FF76         08            push	8[bp]
28207                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28208 73C5           FF76         06            push	6[bp]
28209                                           ! Debug: func () void = write_byte+0 (used reg = )
28210 73C8           E8         0ABA            call	_write_byte
28211 73CB           83C4                   06  add	sp,*6
28212                                           !BCC_EOS
28213                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28214 73CE           8B46         08            mov	ax,8[bp]
28215 73D1           40                         inc	ax
28216 73D2           8946         08            mov	8[bp],ax
28217                                           !BCC_EOS
28218                                           ! 3993         }
28219                                           ! 3994         write_word(ES, BX, crtc_addr); BX+= 2;
28220                       000073D5            .27A:
28221                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28222 73D5           8B46         FE            mov	ax,-2[bp]
28223 73D8           40                         inc	ax
28224 73D9           8946         FE            mov	-2[bp],ax
28225                       000073DC            .27B:
28226                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28227 73DC           8B46         FE            mov	ax,-2[bp]
28228 73DF           3D                   0008  cmp	ax,*8
28229 73E2           76           C5            jbe	.27C
28230                       000073E4            .27D:
28231                       000073E4            .279:
28232                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
28233 73E4           FF76         FA            push	-6[bp]
28234                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28235 73E7           FF76         08            push	8[bp]
28236                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28237 73EA           FF76         06            push	6[bp]
28238                                           ! Debug: func () void = write_word+0 (used reg = )
28239 73ED           E8         0AAD            call	_write_word
28240 73F0           83C4                   06  add	sp,*6
28241                                           !BCC_EOS
28242                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28243 73F3           8B46         08            mov	ax,8[bp]
28244 73F6           40                         inc	ax
28245 73F7           40                         inc	ax
28246 73F8           8946         08            mov	8[bp],ax
28247                                           !BCC_EOS
28248                                           ! 3995         write_byte(ES, BX, 0); BX++;
28249                                           ! Debug: list int = const 0 (used reg = )
28250 73FB           31C0                       xor	ax,ax
28251 73FD           50                         push	ax
28252                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28253 73FE           FF76         08            push	8[bp]
28254                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28255 7401           FF76         06            push	6[bp]
28256                                           ! Debug: func () void = write_byte+0 (used reg = )
28257 7404           E8         0A7E            call	_write_byte
28258 7407           83C4                   06  add	sp,*6
28259                                           !BCC_EOS
28260                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28261 740A           8B46         08            mov	ax,8[bp]
28262 740D           40                         inc	ax
28263 740E           8946         08            mov	8[bp],ax
28264                                           !BCC_EOS
28265                                           ! 3996         write_byte(ES, BX, 0); BX++;
28266                                           ! Debug: list int = const 0 (used reg = )
28267 7411           31C0                       xor	ax,ax
28268 7413           50                         push	ax
28269                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28270 7414           FF76         08            push	8[bp]
28271                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28272 7417           FF76         06            push	6[bp]
28273                                           ! Debug: func () void = write_byte+0 (used reg = )
28274 741A           E8         0A68            call	_write_byte
28275 741D           83C4                   06  add	sp,*6
28276                                           !BCC_EOS
28277                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28278 7420           8B46         08            mov	ax,8[bp]
28279 7423           40                         inc	ax
28280 7424           8946         08            mov	8[bp],ax
28281                                           !BCC_EOS
28282                                           ! 3997         write_byte(ES, BX, 0); BX++;
28283                                           ! Debug: list int = const 0 (used reg = )
28284 7427           31C0                       xor	ax,ax
28285 7429           50                         push	ax
28286                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28287 742A           FF76         08            push	8[bp]
28288                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28289 742D           FF76         06            push	6[bp]
28290                                           ! Debug: func () void = write_byte+0 (used reg = )
28291 7430           E8         0A52            call	_write_byte
28292 7433           83C4                   06  add	sp,*6
28293                                           !BCC_EOS
28294                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28295 7436           8B46         08            mov	ax,8[bp]
28296 7439           40                         inc	ax
28297 743A           8946         08            mov	8[bp],ax
28298                                           !BCC_EOS
28299                                           ! 3998         write_byte(ES, BX, 0); BX++;
28300                                           ! Debug: list int = const 0 (used reg = )
28301 743D           31C0                       xor	ax,ax
28302 743F           50                         push	ax
28303                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28304 7440           FF76         08            push	8[bp]
28305                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28306 7443           FF76         06            push	6[bp]
28307                                           ! Debug: func () void = write_byte+0 (used reg = )
28308 7446           E8         0A3C            call	_write_byte
28309 7449           83C4                   06  add	sp,*6
28310                                           !BCC_EOS
28311                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28312 744C           8B46         08            mov	ax,8[bp]
28313 744F           40                         inc	ax
28314 7450           8946         08            mov	8[bp],ax
28315                                           !BCC_EOS
28316                                           ! 3999     }
28317                                           ! 4000     if (CX & 2) {
28318                       00007453            .268:
28319                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
28320 7453           8A46         04            mov	al,4[bp]
28321 7456           24                     02  and	al,*2
28322 7458           84C0                       test	al,al
28323 745A         0F84         0270            beq 	.27E
28324                       0000745E            .27F:
28325                                           ! 4001         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
28326                                           ! Debug: list int = const $49 (used reg = )
28327 745E           B8                   0049  mov	ax,*$49
28328 7461           50                         push	ax
28329                                           ! Debug: list int = const $40 (used reg = )
28330 7462           B8                   0040  mov	ax,*$40
28331 7465           50                         push	ax
28332                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28333 7466           E8         09F6            call	_read_byte
28334 7469           83C4                   04  add	sp,*4
28335                                           ! Debug: list unsigned char = al+0 (used reg = )
28336 746C           30E4                       xor	ah,ah
28337 746E           50                         push	ax
28338                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28339 746F           FF76         08            push	8[bp]
28340                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28341 7472           FF76         06            push	6[bp]
28342                                           ! Debug: func () void = write_byte+0 (used reg = )
28343 7475           E8         0A0D            call	_write_byte
28344 7478           83C4                   06  add	sp,*6
28345                                           !BCC_EOS
28346                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28347 747B           8B46         08            mov	ax,8[bp]
28348 747E           40                         inc	ax
28349 747F           8946         08            mov	8[bp],ax
28350                                           !BCC_EOS
28351                                           ! 4002         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
28352                                           ! Debug: list int = const $4A (used reg = )
28353 7482           B8                   004A  mov	ax,*$4A
28354 7485           50                         push	ax
28355                                           ! Debug: list int = const $40 (used reg = )
28356 7486           B8                   0040  mov	ax,*$40
28357 7489           50                         push	ax
28358                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28359 748A           E8         09E5            call	_read_word
28360 748D           83C4                   04  add	sp,*4
28361                                           ! Debug: list unsigned short = ax+0 (used reg = )
28362 7490           50                         push	ax
28363                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28364 7491           FF76         08            push	8[bp]
28365                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28366 7494           FF76         06            push	6[bp]
28367                                           ! Debug: func () void = write_word+0 (used reg = )
28368 7497           E8         0A03            call	_write_word
28369 749A           83C4                   06  add	sp,*6
28370                                           !BCC_EOS
28371                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28372 749D           8B46         08            mov	ax,8[bp]
28373 74A0           40                         inc	ax
28374 74A1           40                         inc	ax
28375 74A2           8946         08            mov	8[bp],ax
28376                                           !BCC_EOS
28377                                           ! 4003         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
28378                                           ! Debug: list int = const $4C (used reg = )
28379 74A5           B8                   004C  mov	ax,*$4C
28380 74A8           50                         push	ax
28381                                           ! Debug: list int = const $40 (used reg = )
28382 74A9           B8                   0040  mov	ax,*$40
28383 74AC           50                         push	ax
28384                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28385 74AD           E8         09C2            call	_read_word
28386 74B0           83C4                   04  add	sp,*4
28387                                           ! Debug: list unsigned short = ax+0 (used reg = )
28388 74B3           50                         push	ax
28389                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28390 74B4           FF76         08            push	8[bp]
28391                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28392 74B7           FF76         06            push	6[bp]
28393                                           ! Debug: func () void = write_word+0 (used reg = )
28394 74BA           E8         09E0            call	_write_word
28395 74BD           83C4                   06  add	sp,*6
28396                                           !BCC_EOS
28397                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28398 74C0           8B46         08            mov	ax,8[bp]
28399 74C3           40                         inc	ax
28400 74C4           40                         inc	ax
28401 74C5           8946         08            mov	8[bp],ax
28402                                           !BCC_EOS
28403                                           ! 4004         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28404                                           ! Debug: list int = const $63 (used reg = )
28405 74C8           B8                   0063  mov	ax,*$63
28406 74CB           50                         push	ax
28407                                           ! Debug: list int = const $40 (used reg = )
28408 74CC           B8                   0040  mov	ax,*$40
28409 74CF           50                         push	ax
28410                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28411 74D0           E8         099F            call	_read_word
28412 74D3           83C4                   04  add	sp,*4
28413                                           ! Debug: list unsigned short = ax+0 (used reg = )
28414 74D6           50                         push	ax
28415                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28416 74D7           FF76         08            push	8[bp]
28417                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28418 74DA           FF76         06            push	6[bp]
28419                                           ! Debug: func () void = write_word+0 (used reg = )
28420 74DD           E8         09BD            call	_write_word
28421 74E0           83C4                   06  add	sp,*6
28422                                           !BCC_EOS
28423                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28424 74E3           8B46         08            mov	ax,8[bp]
28425 74E6           40                         inc	ax
28426 74E7           40                         inc	ax
28427 74E8           8946         08            mov	8[bp],ax
28428                                           !BCC_EOS
28429                                           ! 4005         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28430                                           ! Debug: list int = const $84 (used reg = )
28431 74EB           B8                   0084  mov	ax,#$84
28432 74EE           50                         push	ax
28433                                           ! Debug: list int = const $40 (used reg = )
28434 74EF           B8                   0040  mov	ax,*$40
28435 74F2           50                         push	ax
28436                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28437 74F3           E8         0969            call	_read_byte
28438 74F6           83C4                   04  add	sp,*4
28439                                           ! Debug: list unsigned char = al+0 (used reg = )
28440 74F9           30E4                       xor	ah,ah
28441 74FB           50                         push	ax
28442                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28443 74FC           FF76         08            push	8[bp]
28444                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28445 74FF           FF76         06            push	6[bp]
28446                                           ! Debug: func () void = write_byte+0 (used reg = )
28447 7502           E8         0980            call	_write_byte
28448 7505           83C4                   06  add	sp,*6
28449                                           !BCC_EOS
28450                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28451 7508           8B46         08            mov	ax,8[bp]
28452 750B           40                         inc	ax
28453 750C           8946         08            mov	8[bp],ax
28454                                           !BCC_EOS
28455                                           ! 4006         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28456                                           ! Debug: list int = const $85 (used reg = )
28457 750F           B8                   0085  mov	ax,#$85
28458 7512           50                         push	ax
28459                                           ! Debug: list int = const $40 (used reg = )
28460 7513           B8                   0040  mov	ax,*$40
28461 7516           50                         push	ax
28462                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28463 7517           E8         0958            call	_read_word
28464 751A           83C4                   04  add	sp,*4
28465                                           ! Debug: list unsigned short = ax+0 (used reg = )
28466 751D           50                         push	ax
28467                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28468 751E           FF76         08            push	8[bp]
28469                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28470 7521           FF76         06            push	6[bp]
28471                                           ! Debug: func () void = write_word+0 (used reg = )
28472 7524           E8         0976            call	_write_word
28473 7527           83C4                   06  add	sp,*6
28474                                           !BCC_EOS
28475                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28476 752A           8B46         08            mov	ax,8[bp]
28477 752D           40                         inc	ax
28478 752E           40                         inc	ax
28479 752F           8946         08            mov	8[bp],ax
28480                                           !BCC_EOS
28481                                           ! 4007         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28482                                           ! Debug: list int = const $87 (used reg = )
28483 7532           B8                   0087  mov	ax,#$87
28484 7535           50                         push	ax
28485                                           ! Debug: list int = const $40 (used reg = )
28486 7536           B8                   0040  mov	ax,*$40
28487 7539           50                         push	ax
28488                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28489 753A           E8         0922            call	_read_byte
28490 753D           83C4                   04  add	sp,*4
28491                                           ! Debug: list unsigned char = al+0 (used reg = )
28492 7540           30E4                       xor	ah,ah
28493 7542           50                         push	ax
28494                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28495 7543           FF76         08            push	8[bp]
28496                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28497 7546           FF76         06            push	6[bp]
28498                                           ! Debug: func () void = write_byte+0 (used reg = )
28499 7549           E8         0939            call	_write_byte
28500 754C           83C4                   06  add	sp,*6
28501                                           !BCC_EOS
28502                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28503 754F           8B46         08            mov	ax,8[bp]
28504 7552           40                         inc	ax
28505 7553           8946         08            mov	8[bp],ax
28506                                           !BCC_EOS
28507                                           ! 4008         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28508                                           ! Debug: list int = const $88 (used reg = )
28509 7556           B8                   0088  mov	ax,#$88
28510 7559           50                         push	ax
28511                                           ! Debug: list int = const $40 (used reg = )
28512 755A           B8                   0040  mov	ax,*$40
28513 755D           50                         push	ax
28514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28515 755E           E8         08FE            call	_read_byte
28516 7561           83C4                   04  add	sp,*4
28517                                           ! Debug: list unsigned char = al+0 (used reg = )
28518 7564           30E4                       xor	ah,ah
28519 7566           50                         push	ax
28520                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28521 7567           FF76         08            push	8[bp]
28522                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28523 756A           FF76         06            push	6[bp]
28524                                           ! Debug: func () void = write_byte+0 (used reg = )
28525 756D           E8         0915            call	_write_byte
28526 7570           83C4                   06  add	sp,*6
28527                                           !BCC_EOS
28528                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28529 7573           8B46         08            mov	ax,8[bp]
28530 7576           40                         inc	ax
28531 7577           8946         08            mov	8[bp],ax
28532                                           !BCC_EOS
28533                                           ! 4009         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28534                                           ! Debug: list int = const $89 (used reg = )
28535 757A           B8                   0089  mov	ax,#$89
28536 757D           50                         push	ax
28537                                           ! Debug: list int = const $40 (used reg = )
28538 757E           B8                   0040  mov	ax,*$40
28539 7581           50                         push	ax
28540                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28541 7582           E8         08DA            call	_read_byte
28542 7585           83C4                   04  add	sp,*4
28543                                           ! Debug: list unsigned char = al+0 (used reg = )
28544 7588           30E4                       xor	ah,ah
28545 758A           50                         push	ax
28546                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28547 758B           FF76         08            push	8[bp]
28548                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28549 758E           FF76         06            push	6[bp]
28550                                           ! Debug: func () void = write_byte+0 (used reg = )
28551 7591           E8         08F1            call	_write_byte
28552 7594           83C4                   06  add	sp,*6
28553                                           !BCC_EOS
28554                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28555 7597           8B46         08            mov	ax,8[bp]
28556 759A           40                         inc	ax
28557 759B           8946         08            mov	8[bp],ax
28558                                           !BCC_EOS
28559                                           ! 4010         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28560                                           ! Debug: list int = const $60 (used reg = )
28561 759E           B8                   0060  mov	ax,*$60
28562 75A1           50                         push	ax
28563                                           ! Debug: list int = const $40 (used reg = )
28564 75A2           B8                   0040  mov	ax,*$40
28565 75A5           50                         push	ax
28566                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28567 75A6           E8         08C9            call	_read_word
28568 75A9           83C4                   04  add	sp,*4
28569                                           ! Debug: list unsigned short = ax+0 (used reg = )
28570 75AC           50                         push	ax
28571                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28572 75AD           FF76         08            push	8[bp]
28573                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28574 75B0           FF76         06            push	6[bp]
28575                                           ! Debug: func () void = write_word+0 (used reg = )
28576 75B3           E8         08E7            call	_write_word
28577 75B6           83C4                   06  add	sp,*6
28578                                           !BCC_EOS
28579                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28580 75B9           8B46         08            mov	ax,8[bp]
28581 75BC           40                         inc	ax
28582 75BD           40                         inc	ax
28583 75BE           8946         08            mov	8[bp],ax
28584                                           !BCC_EOS
28585                                           ! 4011         for(i=0;i<8;i++) {
28586                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28587 75C1           31C0                       xor	ax,ax
28588 75C3           8946         FE            mov	-2[bp],ax
28589                                           !BCC_EOS
28590                                           !BCC_EOS
28591 75C6           EB           2F            jmp .282
28592                       000075C8            .283:
28593                                           ! 4012             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28594                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28595                                           ! Debug: expression subtree swapping
28596 75C8           8B46         FE            mov	ax,-2[bp]
28597 75CB           D1E0                       shl	ax,*1
28598                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28599                                           ! Debug: expression subtree swapping
28600                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28601 75CD           05                   0050  add	ax,*$50
28602 75D0           50                         push	ax
28603                                           ! Debug: list int = const $40 (used reg = )
28604 75D1           B8                   0040  mov	ax,*$40
28605 75D4           50                         push	ax
28606                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28607 75D5           E8         089A            call	_read_word
28608 75D8           83C4                   04  add	sp,*4
28609                                           ! Debug: list unsigned short = ax+0 (used reg = )
28610 75DB           50                         push	ax
28611                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28612 75DC           FF76         08            push	8[bp]
28613                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28614 75DF           FF76         06            push	6[bp]
28615                                           ! Debug: func () void = write_word+0 (used reg = )
28616 75E2           E8         08B8            call	_write_word
28617 75E5           83C4                   06  add	sp,*6
28618                                           !BCC_EOS
28619                                           ! 4013             BX += 2;
28620                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28621 75E8           8B46         08            mov	ax,8[bp]
28622 75EB           40                         inc	ax
28623 75EC           40                         inc	ax
28624 75ED           8946         08            mov	8[bp],ax
28625                                           !BCC_EOS
28626                                           ! 4014         }
28627                                           ! 4015         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28628                       000075F0            .281:
28629                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28630 75F0           8B46         FE            mov	ax,-2[bp]
28631 75F3           40                         inc	ax
28632 75F4           8946         FE            mov	-2[bp],ax
28633                       000075F7            .282:
28634                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28635 75F7           8B46         FE            mov	ax,-2[bp]
28636 75FA           3D                   0008  cmp	ax,*8
28637 75FD           72           C9            jb 	.283
28638                       000075FF            .284:
28639                       000075FF            .280:
28640                                           ! Debug: list int = const $4E (used reg = )
28641 75FF           B8                   004E  mov	ax,*$4E
28642 7602           50                         push	ax
28643                                           ! Debug: list int = const $40 (used reg = )
28644 7603           B8                   0040  mov	ax,*$40
28645 7606           50                         push	ax
28646                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28647 7607           E8         0868            call	_read_word
28648 760A           83C4                   04  add	sp,*4
28649                                           ! Debug: list unsigned short = ax+0 (used reg = )
28650 760D           50                         push	ax
28651                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28652 760E           FF76         08            push	8[bp]
28653                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28654 7611           FF76         06            push	6[bp]
28655                                           ! Debug: func () void = write_word+0 (used reg = )
28656 7614           E8         0886            call	_write_word
28657 7617           83C4                   06  add	sp,*6
28658                                           !BCC_EOS
28659                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28660 761A           8B46         08            mov	ax,8[bp]
28661 761D           40                         inc	ax
28662 761E           40                         inc	ax
28663 761F           8946         08            mov	8[bp],ax
28664                                           !BCC_EOS
28665                                           ! 4016         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28666                                           ! Debug: list int = const $62 (used reg = )
28667 7622           B8                   0062  mov	ax,*$62
28668 7625           50                         push	ax
28669                                           ! Debug: list int = const $40 (used reg = )
28670 7626           B8                   0040  mov	ax,*$40
28671 7629           50                         push	ax
28672                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28673 762A           E8         0832            call	_read_byte
28674 762D           83C4                   04  add	sp,*4
28675                                           ! Debug: list unsigned char = al+0 (used reg = )
28676 7630           30E4                       xor	ah,ah
28677 7632           50                         push	ax
28678                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28679 7633           FF76         08            push	8[bp]
28680                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28681 7636           FF76         06            push	6[bp]
28682                                           ! Debug: func () void = write_byte+0 (used reg = )
28683 7639           E8         0849            call	_write_byte
28684 763C           83C4                   06  add	sp,*6
28685                                           !BCC_EOS
28686                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28687 763F           8B46         08            mov	ax,8[bp]
28688 7642           40                         inc	ax
28689 7643           8946         08            mov	8[bp],ax
28690                                           !BCC_EOS
28691                                           ! 4017         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28692                                           ! Debug: list int = const $7C (used reg = )
28693 7646           B8                   007C  mov	ax,*$7C
28694 7649           50                         push	ax
28695                                           ! Debug: list int = const 0 (used reg = )
28696 764A           31C0                       xor	ax,ax
28697 764C           50                         push	ax
28698                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28699 764D           E8         0822            call	_read_word
28700 7650           83C4                   04  add	sp,*4
28701                                           ! Debug: list unsigned short = ax+0 (used reg = )
28702 7653           50                         push	ax
28703                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28704 7654           FF76         08            push	8[bp]
28705                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28706 7657           FF76         06            push	6[bp]
28707                                           ! Debug: func () void = write_word+0 (used reg = )
28708 765A           E8         0840            call	_write_word
28709 765D           83C4                   06  add	sp,*6
28710                                           !BCC_EOS
28711                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28712 7660           8B46         08            mov	ax,8[bp]
28713 7663           40                         inc	ax
28714 7664           40                         inc	ax
28715 7665           8946         08            mov	8[bp],ax
28716                                           !BCC_EOS
28717                                           ! 4018         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28718                                           ! Debug: list int = const $7E (used reg = )
28719 7668           B8                   007E  mov	ax,*$7E
28720 766B           50                         push	ax
28721                                           ! Debug: list int = const 0 (used reg = )
28722 766C           31C0                       xor	ax,ax
28723 766E           50                         push	ax
28724                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28725 766F           E8         0800            call	_read_word
28726 7672           83C4                   04  add	sp,*4
28727                                           ! Debug: list unsigned short = ax+0 (used reg = )
28728 7675           50                         push	ax
28729                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28730 7676           FF76         08            push	8[bp]
28731                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28732 7679           FF76         06            push	6[bp]
28733                                           ! Debug: func () void = write_word+0 (used reg = )
28734 767C           E8         081E            call	_write_word
28735 767F           83C4                   06  add	sp,*6
28736                                           !BCC_EOS
28737                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28738 7682           8B46         08            mov	ax,8[bp]
28739 7685           40                         inc	ax
28740 7686           40                         inc	ax
28741 7687           8946         08            mov	8[bp],ax
28742                                           !BCC_EOS
28743                                           ! 4019         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28744                                           ! Debug: list int = const $10C (used reg = )
28745 768A           B8                   010C  mov	ax,#$10C
28746 768D           50                         push	ax
28747                                           ! Debug: list int = const 0 (used reg = )
28748 768E           31C0                       xor	ax,ax
28749 7690           50                         push	ax
28750                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28751 7691           E8         07DE            call	_read_word
28752 7694           83C4                   04  add	sp,*4
28753                                           ! Debug: list unsigned short = ax+0 (used reg = )
28754 7697           50                         push	ax
28755                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28756 7698           FF76         08            push	8[bp]
28757                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28758 769B           FF76         06            push	6[bp]
28759                                           ! Debug: func () void = write_word+0 (used reg = )
28760 769E           E8         07FC            call	_write_word
28761 76A1           83C4                   06  add	sp,*6
28762                                           !BCC_EOS
28763                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28764 76A4           8B46         08            mov	ax,8[bp]
28765 76A7           40                         inc	ax
28766 76A8           40                         inc	ax
28767 76A9           8946         08            mov	8[bp],ax
28768                                           !BCC_EOS
28769                                           ! 4020         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28770                                           ! Debug: list int = const $10E (used reg = )
28771 76AC           B8                   010E  mov	ax,#$10E
28772 76AF           50                         push	ax
28773                                           ! Debug: list int = const 0 (used reg = )
28774 76B0           31C0                       xor	ax,ax
28775 76B2           50                         push	ax
28776                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28777 76B3           E8         07BC            call	_read_word
28778 76B6           83C4                   04  add	sp,*4
28779                                           ! Debug: list unsigned short = ax+0 (used reg = )
28780 76B9           50                         push	ax
28781                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28782 76BA           FF76         08            push	8[bp]
28783                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28784 76BD           FF76         06            push	6[bp]
28785                                           ! Debug: func () void = write_word+0 (used reg = )
28786 76C0           E8         07DA            call	_write_word
28787 76C3           83C4                   06  add	sp,*6
28788                                           !BCC_EOS
28789                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28790 76C6           8B46         08            mov	ax,8[bp]
28791 76C9           40                         inc	ax
28792 76CA           40                         inc	ax
28793 76CB           8946         08            mov	8[bp],ax
28794                                           !BCC_EOS
28795                                           ! 4021     }
28796                                           ! 4022     if (CX & 4) {
28797                       000076CE            .27E:
28798                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28799 76CE           8A46         04            mov	al,4[bp]
28800 76D1           24                     04  and	al,*4
28801 76D3           84C0                       test	al,al
28802 76D5         0F84         00B5            beq 	.285
28803                       000076D9            .286:
28804                                           ! 4023         write_byte(ES, BX, inb(0x3c7)); BX++;
28805                                           ! Debug: list int = const $3C7 (used reg = )
28806 76D9           B8                   03C7  mov	ax,#$3C7
28807 76DC           50                         push	ax
28808                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28809 76DD           E8         07D5            call	_inb
28810 76E0           44                         inc	sp
28811 76E1           44                         inc	sp
28812                                           ! Debug: list unsigned char = al+0 (used reg = )
28813 76E2           30E4                       xor	ah,ah
28814 76E4           50                         push	ax
28815                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28816 76E5           FF76         08            push	8[bp]
28817                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28818 76E8           FF76         06            push	6[bp]
28819                                           ! Debug: func () void = write_byte+0 (used reg = )
28820 76EB           E8         0797            call	_write_byte
28821 76EE           83C4                   06  add	sp,*6
28822                                           !BCC_EOS
28823                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28824 76F1           8B46         08            mov	ax,8[bp]
28825 76F4           40                         inc	ax
28826 76F5           8946         08            mov	8[bp],ax
28827                                           !BCC_EOS
28828                                           ! 4024         write_byte(ES, BX, inb(0x3c8)); BX++;
28829                                           ! Debug: list int = const $3C8 (used reg = )
28830 76F8           B8                   03C8  mov	ax,#$3C8
28831 76FB           50                         push	ax
28832                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28833 76FC           E8         07B6            call	_inb
28834 76FF           44                         inc	sp
28835 7700           44                         inc	sp
28836                                           ! Debug: list unsigned char = al+0 (used reg = )
28837 7701           30E4                       xor	ah,ah
28838 7703           50                         push	ax
28839                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28840 7704           FF76         08            push	8[bp]
28841                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28842 7707           FF76         06            push	6[bp]
28843                                           ! Debug: func () void = write_byte+0 (used reg = )
28844 770A           E8         0778            call	_write_byte
28845 770D           83C4                   06  add	sp,*6
28846                                           !BCC_EOS
28847                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28848 7710           8B46         08            mov	ax,8[bp]
28849 7713           40                         inc	ax
28850 7714           8946         08            mov	8[bp],ax
28851                                           !BCC_EOS
28852                                           ! 4025         write_byte(ES, BX, inb(0x3c6)); BX++;
28853                                           ! Debug: list int = const $3C6 (used reg = )
28854 7717           B8                   03C6  mov	ax,#$3C6
28855 771A           50                         push	ax
28856                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28857 771B           E8         0797            call	_inb
28858 771E           44                         inc	sp
28859 771F           44                         inc	sp
28860                                           ! Debug: list unsigned char = al+0 (used reg = )
28861 7720           30E4                       xor	ah,ah
28862 7722           50                         push	ax
28863                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28864 7723           FF76         08            push	8[bp]
28865                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28866 7726           FF76         06            push	6[bp]
28867                                           ! Debug: func () void = write_byte+0 (used reg = )
28868 7729           E8         0759            call	_write_byte
28869 772C           83C4                   06  add	sp,*6
28870                                           !BCC_EOS
28871                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28872 772F           8B46         08            mov	ax,8[bp]
28873 7732           40                         inc	ax
28874 7733           8946         08            mov	8[bp],ax
28875                                           !BCC_EOS
28876                                           ! 4026         outb(0x3c8,0x00);
28877                                           ! Debug: list int = const 0 (used reg = )
28878 7736           31C0                       xor	ax,ax
28879 7738           50                         push	ax
28880                                           ! Debug: list int = const $3C8 (used reg = )
28881 7739           B8                   03C8  mov	ax,#$3C8
28882 773C           50                         push	ax
28883                                           ! Debug: func () void = outb+0 (used reg = )
28884 773D           E8         078B            call	_outb
28885 7740           83C4                   04  add	sp,*4
28886                                           !BCC_EOS
28887                                           ! 4027         for(i=0;i<256*3;i++) {
28888                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28889 7743           31C0                       xor	ax,ax
28890 7745           8946         FE            mov	-2[bp],ax
28891                                           !BCC_EOS
28892                                           !BCC_EOS
28893 7748           EB           26            jmp .289
28894                       0000774A            .28A:
28895                                           ! 4028             write_byte(ES, BX, inb(0x3c9)); BX++;
28896                                           ! Debug: list int = const $3C9 (used reg = )
28897 774A           B8                   03C9  mov	ax,#$3C9
28898 774D           50                         push	ax
28899                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28900 774E           E8         0764            call	_inb
28901 7751           44                         inc	sp
28902 7752           44                         inc	sp
28903                                           ! Debug: list unsigned char = al+0 (used reg = )
28904 7753           30E4                       xor	ah,ah
28905 7755           50                         push	ax
28906                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28907 7756           FF76         08            push	8[bp]
28908                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28909 7759           FF76         06            push	6[bp]
28910                                           ! Debug: func () void = write_byte+0 (used reg = )
28911 775C           E8         0726            call	_write_byte
28912 775F           83C4                   06  add	sp,*6
28913                                           !BCC_EOS
28914                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28915 7762           8B46         08            mov	ax,8[bp]
28916 7765           40                         inc	ax
28917 7766           8946         08            mov	8[bp],ax
28918                                           !BCC_EOS
28919                                           ! 4029         }
28920                                           ! 4030         write_byte(ES, BX, 0); BX++;
28921                       00007769            .288:
28922                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28923 7769           8B46         FE            mov	ax,-2[bp]
28924 776C           40                         inc	ax
28925 776D           8946         FE            mov	-2[bp],ax
28926                       00007770            .289:
28927                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28928 7770           8B46         FE            mov	ax,-2[bp]
28929 7773           3D                   0300  cmp	ax,#$300
28930 7776           72           D2            jb 	.28A
28931                       00007778            .28B:
28932                       00007778            .287:
28933                                           ! Debug: list int = const 0 (used reg = )
28934 7778           31C0                       xor	ax,ax
28935 777A           50                         push	ax
28936                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28937 777B           FF76         08            push	8[bp]
28938                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28939 777E           FF76         06            push	6[bp]
28940                                           ! Debug: func () void = write_byte+0 (used reg = )
28941 7781           E8         0701            call	_write_byte
28942 7784           83C4                   06  add	sp,*6
28943                                           !BCC_EOS
28944                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28945 7787           8B46         08            mov	ax,8[bp]
28946 778A           40                         inc	ax
28947 778B           8946         08            mov	8[bp],ax
28948                                           !BCC_EOS
28949                                           ! 4031     }
28950                                           ! 4032     return BX;
28951                       0000778E            .285:
28952 778E           8B46         08            mov	ax,8[bp]
28953 7791           89EC                       mov	sp,bp
28954 7793           5D                         pop	bp
28955 7794           C3                         ret
28956                                           !BCC_EOS
28957                                           ! 4033 }
28958                                           ! 4034 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28959                                           ! 4035      Bit16u CX;Bit16u ES;Bit16u BX;
28960                       00007795            _biosfn_restore_video_state:
28961                                           !BCC_EOS
28962                                           !BCC_EOS
28963                                           !BCC_EOS
28964                                           ! 4036 {
28965                                           ! 4037     Bit16u i, crtc_addr, v, addr1, ar_index;
28966                                           !BCC_EOS
28967                                           ! 4038     if (CX & 1) {
28968 7795           55                         push	bp
28969 7796           89E5                       mov	bp,sp
28970 7798           83C4                   F6  add	sp,*-$A
28971                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28972 779B           8A46         04            mov	al,4[bp]
28973 779E           24                     01  and	al,*1
28974 77A0           84C0                       test	al,al
28975 77A2         0F84         02AA            beq 	.28C
28976                       000077A6            .28D:
28977                                           ! 4039      
28978                                           ! 4039    inb(0x3da);
28979                                           ! Debug: list int = const $3DA (used reg = )
28980 77A6           B8                   03DA  mov	ax,#$3DA
28981 77A9           50                         push	ax
28982                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28983 77AA           E8         0708            call	_inb
28984 77AD           44                         inc	sp
28985 77AE           44                         inc	sp
28986                                           !BCC_EOS
28987                                           ! 4040         crtc_addr = read_word(ES, BX + 0x40);
28988                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28989 77AF           8B46         08            mov	ax,8[bp]
28990                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28991 77B2           05                   0040  add	ax,*$40
28992 77B5           50                         push	ax
28993                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28994 77B6           FF76         06            push	6[bp]
28995                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28996 77B9           E8         06B6            call	_read_word
28997 77BC           83C4                   04  add	sp,*4
28998                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28999 77BF           8946         FC            mov	-4[bp],ax
29000                                           !BCC_EOS
29001                                           ! 4041         addr1 = BX;
29002                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
29003 77C2           8B46         08            mov	ax,8[bp]
29004 77C5           8946         F8            mov	-8[bp],ax
29005                                           !BCC_EOS
29006                                           ! 4042         BX += 5;
29007                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
29008 77C8           8B46         08            mov	ax,8[bp]
29009 77CB           05                   0005  add	ax,*5
29010 77CE           8946         08            mov	8[bp],ax
29011                                           !BCC_EOS
29012                                           ! 4043         for(i=1;i<=4;i++){
29013                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
29014 77D1           B8                   0001  mov	ax,*1
29015 77D4           8946         FE            mov	-2[bp],ax
29016                                           !BCC_EOS
29017                                           !BCC_EOS
29018 77D7           EB           34            jmp .290
29019                       000077D9            .291:
29020                                           ! 4044             outb(0x3c4, i);
29021                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29022 77D9           FF76         FE            push	-2[bp]
29023                                           ! Debug: list int = const $3C4 (used reg = )
29024 77DC           B8                   03C4  mov	ax,#$3C4
29025 77DF           50                         push	ax
29026                                           ! Debug: func () void = outb+0 (used reg = )
29027 77E0           E8         06E8            call	_outb
29028 77E3           83C4                   04  add	sp,*4
29029                                           !BCC_EOS
29030                                           ! 4045             outb(0x3c5, read_byte(ES, BX)); BX++;
29031                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29032 77E6           FF76         08            push	8[bp]
29033                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29034 77E9           FF76         06            push	6[bp]
29035                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29036 77EC           E8         0670            call	_read_byte
29037 77EF           83C4                   04  add	sp,*4
29038                                           ! Debug: list unsigned char = al+0 (used reg = )
29039 77F2           30E4                       xor	ah,ah
29040 77F4           50                         push	ax
29041                                           ! Debug: list int = const $3C5 (used reg = )
29042 77F5           B8                   03C5  mov	ax,#$3C5
29043 77F8           50                         push	ax
29044                                           ! Debug: func () void = outb+0 (used reg = )
29045 77F9           E8         06CF            call	_outb
29046 77FC           83C4                   04  add	sp,*4
29047                                           !BCC_EOS
29048                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29049 77FF           8B46         08            mov	ax,8[bp]
29050 7802           40                         inc	ax
29051 7803           8946         08            mov	8[bp],ax
29052                                           !BCC_EOS
29053                                           ! 4046         }
29054                                           ! 4047         outb(0x3c4, 0);
29055                       00007806            .28F:
29056                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29057 7806           8B46         FE            mov	ax,-2[bp]
29058 7809           40                         inc	ax
29059 780A           8946         FE            mov	-2[bp],ax
29060                       0000780D            .290:
29061                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
29062 780D           8B46         FE            mov	ax,-2[bp]
29063 7810           3D                   0004  cmp	ax,*4
29064 7813           76           C4            jbe	.291
29065                       00007815            .292:
29066                       00007815            .28E:
29067                                           ! Debug: list int = const 0 (used reg = )
29068 7815           31C0                       xor	ax,ax
29069 7817           50                         push	ax
29070                                           ! Debug: list int = const $3C4 (used reg = )
29071 7818           B8                   03C4  mov	ax,#$3C4
29072 781B           50                         push	ax
29073                                           ! Debug: func () void = outb+0 (used reg = )
29074 781C           E8         06AC            call	_outb
29075 781F           83C4                   04  add	sp,*4
29076                                           !BCC_EOS
29077                                           ! 4048         outb(0x3c5, read_byte(ES, BX)); BX++;
29078                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29079 7822           FF76         08            push	8[bp]
29080                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29081 7825           FF76         06            push	6[bp]
29082                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29083 7828           E8         0634            call	_read_byte
29084 782B           83C4                   04  add	sp,*4
29085                                           ! Debug: list unsigned char = al+0 (used reg = )
29086 782E           30E4                       xor	ah,ah
29087 7830           50                         push	ax
29088                                           ! Debug: list int = const $3C5 (used reg = )
29089 7831           B8                   03C5  mov	ax,#$3C5
29090 7834           50                         push	ax
29091                                           ! Debug: func () void = outb+0 (used reg = )
29092 7835           E8         0693            call	_outb
29093 7838           83C4                   04  add	sp,*4
29094                                           !BCC_EOS
29095                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29096 783B           8B46         08            mov	ax,8[bp]
29097 783E           40                         inc	ax
29098 783F           8946         08            mov	8[bp],ax
29099                                           !BCC_EOS
29100                                           ! 4049         outw(crtc_addr,0x0011);
29101                                           ! Debug: list int = const $11 (used reg = )
29102 7842           B8                   0011  mov	ax,*$11
29103 7845           50                         push	ax
29104                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29105 7846           FF76         FC            push	-4[bp]
29106                                           ! Debug: func () void = outw+0 (used reg = )
29107 7849           E8         068F            call	_outw
29108 784C           83C4                   04  add	sp,*4
29109                                           !BCC_EOS
29110                                           ! 4050         for(i=0;i<=0x18;i++) {
29111                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29112 784F           31C0                       xor	ax,ax
29113 7851           8946         FE            mov	-2[bp],ax
29114                                           !BCC_EOS
29115                                           !BCC_EOS
29116 7854           EB           3C            jmp .295
29117                       00007856            .296:
29118                                           ! 4051             if (i != 0x11) {
29119                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
29120 7856           8B46         FE            mov	ax,-2[bp]
29121 7859           3D                   0011  cmp	ax,*$11
29122 785C           74           26            je  	.297
29123                       0000785E            .298:
29124                                           ! 4052                 outb(crtc_addr,i);
29125                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29126 785E           FF76         FE            push	-2[bp]
29127                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29128 7861           FF76         FC            push	-4[bp]
29129                                           ! Debug: func () void = outb+0 (used reg = )
29130 7864           E8         0664            call	_outb
29131 7867           83C4                   04  add	sp,*4
29132                                           !BCC_EOS
29133                                           ! 4053                 outb(crtc_addr+1, read_byte(ES, BX));
29134                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29135 786A           FF76         08            push	8[bp]
29136                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29137 786D           FF76         06            push	6[bp]
29138                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29139 7870           E8         05EC            call	_read_byte
29140 7873           83C4                   04  add	sp,*4
29141                                           ! Debug: list unsigned char = al+0 (used reg = )
29142 7876           30E4                       xor	ah,ah
29143 7878           50                         push	ax
29144                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29145 7879           8B46         FC            mov	ax,-4[bp]
29146                                           ! Debug: list unsigned int = ax+1 (used reg = )
29147 787C           40                         inc	ax
29148 787D           50                         push	ax
29149                                           ! Debug: func () void = outb+0 (used reg = )
29150 787E           E8         064A            call	_outb
29151 7881           83C4                   04  add	sp,*4
29152                                           !BCC_EOS
29153                                           ! 4054             }
29154                                           ! 4055             BX++;
29155                       00007884            .297:
29156                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29157 7884           8B46         08            mov	ax,8[bp]
29158 7887           40                         inc	ax
29159 7888           8946         08            mov	8[bp],ax
29160                                           !BCC_EOS
29161                                           ! 4056         }
29162                                           ! 4057         v = inb(0x3cc) & ~0x01;
29163                       0000788B            .294:
29164                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29165 788B           8B46         FE            mov	ax,-2[bp]
29166 788E           40                         inc	ax
29167 788F           8946         FE            mov	-2[bp],ax
29168                       00007892            .295:
29169                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
29170 7892           8B46         FE            mov	ax,-2[bp]
29171 7895           3D                   0018  cmp	ax,*$18
29172 7898           76           BC            jbe	.296
29173                       0000789A            .299:
29174                       0000789A            .293:
29175                                           ! Debug: list int = const $3CC (used reg = )
29176 789A           B8                   03CC  mov	ax,#$3CC
29177 789D           50                         push	ax
29178                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29179 789E           E8         0614            call	_inb
29180 78A1           44                         inc	sp
29181 78A2           44                         inc	sp
29182                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
29183 78A3           24                     FE  and	al,#$FE
29184                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29185 78A5           30E4                       xor	ah,ah
29186 78A7           8946         FA            mov	-6[bp],ax
29187                                           !BCC_EOS
29188                                           ! 4058         if (crtc_addr = 0x3d4)
29189                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
29190 78AA           B8                   03D4  mov	ax,#$3D4
29191 78AD           8946         FC            mov	-4[bp],ax
29192 78B0           85C0                       test	ax,ax
29193 78B2           74           08            je  	.29A
29194                       000078B4            .29B:
29195                                           ! 4059             v |= 0x01;
29196                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
29197 78B4           8B46         FA            mov	ax,-6[bp]
29198 78B7           0C                     01  or	al,*1
29199 78B9           8946         FA            mov	-6[bp],ax
29200                                           !BCC_EOS
29201                                           ! 4060         outb(0x3c2, v);
29202                       000078BC            .29A:
29203                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29204 78BC           FF76         FA            push	-6[bp]
29205                                           ! Debug: list int = const $3C2 (used reg = )
29206 78BF           B8                   03C2  mov	ax,#$3C2
29207 78C2           50                         push	ax
29208                                           ! Debug: func () void = outb+0 (used reg = )
29209 78C3           E8         0605            call	_outb
29210 78C6           83C4                   04  add	sp,*4
29211                                           !BCC_EOS
29212                                           ! 4061         outb(crtc_addr, 0x11);
29213                                           ! Debug: list int = const $11 (used reg = )
29214 78C9           B8                   0011  mov	ax,*$11
29215 78CC           50                         push	ax
29216                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29217 78CD           FF76         FC            push	-4[bp]
29218                                           ! Debug: func () void = outb+0 (used reg = )
29219 78D0           E8         05F8            call	_outb
29220 78D3           83C4                   04  add	sp,*4
29221                                           !BCC_EOS
29222                                           ! 4062         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
29223                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
29224 78D6           8B46         08            mov	ax,8[bp]
29225                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
29226                                           ! Debug: list unsigned int = ax-7 (used reg = )
29227 78D9           05                   FFF9  add	ax,*-7
29228 78DC           50                         push	ax
29229                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29230 78DD           FF76         06            push	6[bp]
29231                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29232 78E0           E8         057C            call	_read_byte
29233 78E3           83C4                   04  add	sp,*4
29234                                           ! Debug: list unsigned char = al+0 (used reg = )
29235 78E6           30E4                       xor	ah,ah
29236 78E8           50                         push	ax
29237                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29238 78E9           8B46         FC            mov	ax,-4[bp]
29239                                           ! Debug: list unsigned int = ax+1 (used reg = )
29240 78EC           40                         inc	ax
29241 78ED           50                         push	ax
29242                                           ! Debug: func () void = outb+0 (used reg = )
29243 78EE           E8         05DA            call	_outb
29244 78F1           83C4                   04  add	sp,*4
29245                                           !BCC_EOS
29246                                           ! 4063         ar_index = read_byte(ES, addr1 + 0x03);
29247                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
29248 78F4           8B46         F8            mov	ax,-8[bp]
29249                                           ! Debug: list unsigned int = ax+3 (used reg = )
29250 78F7           05                   0003  add	ax,*3
29251 78FA           50                         push	ax
29252                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29253 78FB           FF76         06            push	6[bp]
29254                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29255 78FE           E8         055E            call	_read_byte
29256 7901           83C4                   04  add	sp,*4
29257                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
29258 7904           30E4                       xor	ah,ah
29259 7906           8946         F6            mov	-$A[bp],ax
29260                                           !BCC_EOS
29261                                           ! 4064         inb(0x3da);
29262                                           ! Debug: list int = const $3DA (used reg = )
29263 7909           B8                   03DA  mov	ax,#$3DA
29264 790C           50                         push	ax
29265                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29266 790D           E8         05A5            call	_inb
29267 7910           44                         inc	sp
29268 7911           44                         inc	sp
29269                                           !BCC_EOS
29270                                           ! 4065         for(i=0;i<=0x13;i++) {
29271                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29272 7912           31C0                       xor	ax,ax
29273 7914           8946         FE            mov	-2[bp],ax
29274                                           !BCC_EOS
29275                                           !BCC_EOS
29276 7917           EB           3C            jmp .29E
29277                       00007919            .29F:
29278                                           ! 4066             outb(0x3c0, i | (ar_index & 0x20));
29279                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
29280 7919           8A46         F6            mov	al,-$A[bp]
29281 791C           24                     20  and	al,*$20
29282                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
29283                                           ! Debug: expression subtree swapping
29284 791E           30E4                       xor	ah,ah
29285 7920           0B46         FE            or	ax,-2[bp]
29286                                           ! Debug: list unsigned int = ax+0 (used reg = )
29287 7923           50                         push	ax
29288                                           ! Debug: list int = const $3C0 (used reg = )
29289 7924           B8                   03C0  mov	ax,#$3C0
29290 7927           50                         push	ax
29291                                           ! Debug: func () void = outb+0 (used reg = )
29292 7928           E8         05A0            call	_outb
29293 792B           83C4                   04  add	sp,*4
29294                                           !BCC_EOS
29295                                           ! 4067             outb(0x3c0, read_byte(ES, BX)); BX++;
29296                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29297 792E           FF76         08            push	8[bp]
29298                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29299 7931           FF76         06            push	6[bp]
29300                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29301 7934           E8         0528            call	_read_byte
29302 7937           83C4                   04  add	sp,*4
29303                                           ! Debug: list unsigned char = al+0 (used reg = )
29304 793A           30E4                       xor	ah,ah
29305 793C           50                         push	ax
29306                                           ! Debug: list int = const $3C0 (used reg = )
29307 793D           B8                   03C0  mov	ax,#$3C0
29308 7940           50                         push	ax
29309                                           ! Debug: func () void = outb+0 (used reg = )
29310 7941           E8         0587            call	_outb
29311 7944           83C4                   04  add	sp,*4
29312                                           !BCC_EOS
29313                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29314 7947           8B46         08            mov	ax,8[bp]
29315 794A           40                         inc	ax
29316 794B           8946         08            mov	8[bp],ax
29317                                           !BCC_EOS
29318                                           ! 4068         }
29319                                           ! 4069         outb(0x3c0, ar_index);
29320                       0000794E            .29D:
29321                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29322 794E           8B46         FE            mov	ax,-2[bp]
29323 7951           40                         inc	ax
29324 7952           8946         FE            mov	-2[bp],ax
29325                       00007955            .29E:
29326                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
29327 7955           8B46         FE            mov	ax,-2[bp]
29328 7958           3D                   0013  cmp	ax,*$13
29329 795B           76           BC            jbe	.29F
29330                       0000795D            .2A0:
29331                       0000795D            .29C:
29332                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
29333 795D           FF76         F6            push	-$A[bp]
29334                                           ! Debug: list int = const $3C0 (used reg = )
29335 7960           B8                   03C0  mov	ax,#$3C0
29336 7963           50                         push	ax
29337                                           ! Debug: func () void = outb+0 (used reg = )
29338 7964           E8         0564            call	_outb
29339 7967           83C4                   04  add	sp,*4
29340                                           !BCC_EOS
29341                                           ! 4070         inb(0x3da);
29342                                           ! Debug: list int = const $3DA (used reg = )
29343 796A           B8                   03DA  mov	ax,#$3DA
29344 796D           50                         push	ax
29345                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29346 796E           E8         0544            call	_inb
29347 7971           44                         inc	sp
29348 7972           44                         inc	sp
29349                                           !BCC_EOS
29350                                           ! 4071         for(i=0;i<=8;i++) {
29351                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29352 7973           31C0                       xor	ax,ax
29353 7975           8946         FE            mov	-2[bp],ax
29354                                           !BCC_EOS
29355                                           !BCC_EOS
29356 7978           EB           34            jmp .2A3
29357                       0000797A            .2A4:
29358                                           ! 4072             outb(0x3ce,i);
29359                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29360 797A           FF76         FE            push	-2[bp]
29361                                           ! Debug: list int = const $3CE (used reg = )
29362 797D           B8                   03CE  mov	ax,#$3CE
29363 7980           50                         push	ax
29364                                           ! Debug: func () void = outb+0 (used reg = )
29365 7981           E8         0547            call	_outb
29366 7984           83C4                   04  add	sp,*4
29367                                           !BCC_EOS
29368                                           ! 4073             outb(0x3cf, read_byte(ES, BX)); BX++;
29369                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29370 7987           FF76         08            push	8[bp]
29371                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29372 798A           FF76         06            push	6[bp]
29373                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29374 798D           E8         04CF            call	_read_byte
29375 7990           83C4                   04  add	sp,*4
29376                                           ! Debug: list unsigned char = al+0 (used reg = )
29377 7993           30E4                       xor	ah,ah
29378 7995           50                         push	ax
29379                                           ! Debug: list int = const $3CF (used reg = )
29380 7996           B8                   03CF  mov	ax,#$3CF
29381 7999           50                         push	ax
29382                                           ! Debug: func () void = outb+0 (used reg = )
29383 799A           E8         052E            call	_outb
29384 799D           83C4                   04  add	sp,*4
29385                                           !BCC_EOS
29386                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29387 79A0           8B46         08            mov	ax,8[bp]
29388 79A3           40                         inc	ax
29389 79A4           8946         08            mov	8[bp],ax
29390                                           !BCC_EOS
29391                                           ! 4074         }
29392                                           ! 4075         BX += 2;
29393                       000079A7            .2A2:
29394                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29395 79A7           8B46         FE            mov	ax,-2[bp]
29396 79AA           40                         inc	ax
29397 79AB           8946         FE            mov	-2[bp],ax
29398                       000079AE            .2A3:
29399                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29400 79AE           8B46         FE            mov	ax,-2[bp]
29401 79B1           3D                   0008  cmp	ax,*8
29402 79B4           76           C4            jbe	.2A4
29403                       000079B6            .2A5:
29404                       000079B6            .2A1:
29405                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29406 79B6           8B46         08            mov	ax,8[bp]
29407 79B9           40                         inc	ax
29408 79BA           40                         inc	ax
29409 79BB           8946         08            mov	8[bp],ax
29410                                           !BCC_EOS
29411                                           ! 4076         BX += 4;
29412                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29413 79BE           8B46         08            mov	ax,8[bp]
29414 79C1           05                   0004  add	ax,*4
29415 79C4           8946         08            mov	8[bp],ax
29416                                           !BCC_EOS
29417                                           ! 4077         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29418                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29419 79C7           FF76         F8            push	-8[bp]
29420                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29421 79CA           FF76         06            push	6[bp]
29422                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29423 79CD           E8         048F            call	_read_byte
29424 79D0           83C4                   04  add	sp,*4
29425                                           ! Debug: list unsigned char = al+0 (used reg = )
29426 79D3           30E4                       xor	ah,ah
29427 79D5           50                         push	ax
29428                                           ! Debug: list int = const $3C4 (used reg = )
29429 79D6           B8                   03C4  mov	ax,#$3C4
29430 79D9           50                         push	ax
29431                                           ! Debug: func () void = outb+0 (used reg = )
29432 79DA           E8         04EE            call	_outb
29433 79DD           83C4                   04  add	sp,*4
29434                                           !BCC_EOS
29435                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29436 79E0           8B46         F8            mov	ax,-8[bp]
29437 79E3           40                         inc	ax
29438 79E4           8946         F8            mov	-8[bp],ax
29439                                           !BCC_EOS
29440                                           ! 4078         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29441                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29442 79E7           FF76         F8            push	-8[bp]
29443                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29444 79EA           FF76         06            push	6[bp]
29445                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29446 79ED           E8         046F            call	_read_byte
29447 79F0           83C4                   04  add	sp,*4
29448                                           ! Debug: list unsigned char = al+0 (used reg = )
29449 79F3           30E4                       xor	ah,ah
29450 79F5           50                         push	ax
29451                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29452 79F6           FF76         FC            push	-4[bp]
29453                                           ! Debug: func () void = outb+0 (used reg = )
29454 79F9           E8         04CF            call	_outb
29455 79FC           83C4                   04  add	sp,*4
29456                                           !BCC_EOS
29457                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29458 79FF           8B46         F8            mov	ax,-8[bp]
29459 7A02           40                         inc	ax
29460 7A03           8946         F8            mov	-8[bp],ax
29461                                           !BCC_EOS
29462                                           ! 4079         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29463                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29464 7A06           FF76         F8            push	-8[bp]
29465                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29466 7A09           FF76         06            push	6[bp]
29467                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29468 7A0C           E8         0450            call	_read_byte
29469 7A0F           83C4                   04  add	sp,*4
29470                                           ! Debug: list unsigned char = al+0 (used reg = )
29471 7A12           30E4                       xor	ah,ah
29472 7A14           50                         push	ax
29473                                           ! Debug: list int = const $3CE (used reg = )
29474 7A15           B8                   03CE  mov	ax,#$3CE
29475 7A18           50                         push	ax
29476                                           ! Debug: func () void = outb+0 (used reg = )
29477 7A19           E8         04AF            call	_outb
29478 7A1C           83C4                   04  add	sp,*4
29479                                           !BCC_EOS
29480                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29481 7A1F           8B46         F8            mov	ax,-8[bp]
29482 7A22           40                         inc	ax
29483 7A23           8946         F8            mov	-8[bp],ax
29484                                           !BCC_EOS
29485                                           ! 4080         addr1++;
29486                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29487 7A26           8B46         F8            mov	ax,-8[bp]
29488 7A29           40                         inc	ax
29489 7A2A           8946         F8            mov	-8[bp],ax
29490                                           !BCC_EOS
29491                                           ! 4081         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29492                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29493 7A2D           FF76         F8            push	-8[bp]
29494                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29495 7A30           FF76         06            push	6[bp]
29496                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29497 7A33           E8         0429            call	_read_byte
29498 7A36           83C4                   04  add	sp,*4
29499                                           ! Debug: list unsigned char = al+0 (used reg = )
29500 7A39           30E4                       xor	ah,ah
29501 7A3B           50                         push	ax
29502                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29503 7A3C           8B46         FC            mov	ax,-4[bp]
29504                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29505                                           ! Debug: list unsigned int = ax+6 (used reg = )
29506 7A3F           05                   0006  add	ax,*6
29507 7A42           50                         push	ax
29508                                           ! Debug: func () void = outb+0 (used reg = )
29509 7A43           E8         0485            call	_outb
29510 7A46           83C4                   04  add	sp,*4
29511                                           !BCC_EOS
29512                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29513 7A49           8B46         F8            mov	ax,-8[bp]
29514 7A4C           40                         inc	ax
29515 7A4D           8946         F8            mov	-8[bp],ax
29516                                           !BCC_EOS
29517                                           ! 4082     }
29518                                           ! 4083     if (CX & 2) {
29519                       00007A50            .28C:
29520                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29521 7A50           8A46         04            mov	al,4[bp]
29522 7A53           24                     02  and	al,*2
29523 7A55           84C0                       test	al,al
29524 7A57         0F84         0270            beq 	.2A6
29525                       00007A5B            .2A7:
29526                                           ! 4084         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29527                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29528 7A5B           FF76         08            push	8[bp]
29529                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29530 7A5E           FF76         06            push	6[bp]
29531                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29532 7A61           E8         03FB            call	_read_byte
29533 7A64           83C4                   04  add	sp,*4
29534                                           ! Debug: list unsigned char = al+0 (used reg = )
29535 7A67           30E4                       xor	ah,ah
29536 7A69           50                         push	ax
29537                                           ! Debug: list int = const $49 (used reg = )
29538 7A6A           B8                   0049  mov	ax,*$49
29539 7A6D           50                         push	ax
29540                                           ! Debug: list int = const $40 (used reg = )
29541 7A6E           B8                   0040  mov	ax,*$40
29542 7A71           50                         push	ax
29543                                           ! Debug: func () void = write_byte+0 (used reg = )
29544 7A72           E8         0410            call	_write_byte
29545 7A75           83C4                   06  add	sp,*6
29546                                           !BCC_EOS
29547                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29548 7A78           8B46         08            mov	ax,8[bp]
29549 7A7B           40                         inc	ax
29550 7A7C           8946         08            mov	8[bp],ax
29551                                           !BCC_EOS
29552                                           ! 4085         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29553                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29554 7A7F           FF76         08            push	8[bp]
29555                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29556 7A82           FF76         06            push	6[bp]
29557                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29558 7A85           E8         03EA            call	_read_word
29559 7A88           83C4                   04  add	sp,*4
29560                                           ! Debug: list unsigned short = ax+0 (used reg = )
29561 7A8B           50                         push	ax
29562                                           ! Debug: list int = const $4A (used reg = )
29563 7A8C           B8                   004A  mov	ax,*$4A
29564 7A8F           50                         push	ax
29565                                           ! Debug: list int = const $40 (used reg = )
29566 7A90           B8                   0040  mov	ax,*$40
29567 7A93           50                         push	ax
29568                                           ! Debug: func () void = write_word+0 (used reg = )
29569 7A94           E8         0406            call	_write_word
29570 7A97           83C4                   06  add	sp,*6
29571                                           !BCC_EOS
29572                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29573 7A9A           8B46         08            mov	ax,8[bp]
29574 7A9D           40                         inc	ax
29575 7A9E           40                         inc	ax
29576 7A9F           8946         08            mov	8[bp],ax
29577                                           !BCC_EOS
29578                                           ! 4086         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29579                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29580 7AA2           FF76         08            push	8[bp]
29581                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29582 7AA5           FF76         06            push	6[bp]
29583                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29584 7AA8           E8         03C7            call	_read_word
29585 7AAB           83C4                   04  add	sp,*4
29586                                           ! Debug: list unsigned short = ax+0 (used reg = )
29587 7AAE           50                         push	ax
29588                                           ! Debug: list int = const $4C (used reg = )
29589 7AAF           B8                   004C  mov	ax,*$4C
29590 7AB2           50                         push	ax
29591                                           ! Debug: list int = const $40 (used reg = )
29592 7AB3           B8                   0040  mov	ax,*$40
29593 7AB6           50                         push	ax
29594                                           ! Debug: func () void = write_word+0 (used reg = )
29595 7AB7           E8         03E3            call	_write_word
29596 7ABA           83C4                   06  add	sp,*6
29597                                           !BCC_EOS
29598                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29599 7ABD           8B46         08            mov	ax,8[bp]
29600 7AC0           40                         inc	ax
29601 7AC1           40                         inc	ax
29602 7AC2           8946         08            mov	8[bp],ax
29603                                           !BCC_EOS
29604                                           ! 4087         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29605                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29606 7AC5           FF76         08            push	8[bp]
29607                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29608 7AC8           FF76         06            push	6[bp]
29609                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29610 7ACB           E8         03A4            call	_read_word
29611 7ACE           83C4                   04  add	sp,*4
29612                                           ! Debug: list unsigned short = ax+0 (used reg = )
29613 7AD1           50                         push	ax
29614                                           ! Debug: list int = const $63 (used reg = )
29615 7AD2           B8                   0063  mov	ax,*$63
29616 7AD5           50                         push	ax
29617                                           ! Debug: list int = const $40 (used reg = )
29618 7AD6           B8                   0040  mov	ax,*$40
29619 7AD9           50                         push	ax
29620                                           ! Debug: func () void = write_word+0 (used reg = )
29621 7ADA           E8         03C0            call	_write_word
29622 7ADD           83C4                   06  add	sp,*6
29623                                           !BCC_EOS
29624                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29625 7AE0           8B46         08            mov	ax,8[bp]
29626 7AE3           40                         inc	ax
29627 7AE4           40                         inc	ax
29628 7AE5           8946         08            mov	8[bp],ax
29629                                           !BCC_EOS
29630                                           ! 4088         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29631                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29632 7AE8           FF76         08            push	8[bp]
29633                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29634 7AEB           FF76         06            push	6[bp]
29635                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29636 7AEE           E8         036E            call	_read_byte
29637 7AF1           83C4                   04  add	sp,*4
29638                                           ! Debug: list unsigned char = al+0 (used reg = )
29639 7AF4           30E4                       xor	ah,ah
29640 7AF6           50                         push	ax
29641                                           ! Debug: list int = const $84 (used reg = )
29642 7AF7           B8                   0084  mov	ax,#$84
29643 7AFA           50                         push	ax
29644                                           ! Debug: list int = const $40 (used reg = )
29645 7AFB           B8                   0040  mov	ax,*$40
29646 7AFE           50                         push	ax
29647                                           ! Debug: func () void = write_byte+0 (used reg = )
29648 7AFF           E8         0383            call	_write_byte
29649 7B02           83C4                   06  add	sp,*6
29650                                           !BCC_EOS
29651                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29652 7B05           8B46         08            mov	ax,8[bp]
29653 7B08           40                         inc	ax
29654 7B09           8946         08            mov	8[bp],ax
29655                                           !BCC_EOS
29656                                           ! 4089         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29657                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29658 7B0C           FF76         08            push	8[bp]
29659                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29660 7B0F           FF76         06            push	6[bp]
29661                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29662 7B12           E8         035D            call	_read_word
29663 7B15           83C4                   04  add	sp,*4
29664                                           ! Debug: list unsigned short = ax+0 (used reg = )
29665 7B18           50                         push	ax
29666                                           ! Debug: list int = const $85 (used reg = )
29667 7B19           B8                   0085  mov	ax,#$85
29668 7B1C           50                         push	ax
29669                                           ! Debug: list int = const $40 (used reg = )
29670 7B1D           B8                   0040  mov	ax,*$40
29671 7B20           50                         push	ax
29672                                           ! Debug: func () void = write_word+0 (used reg = )
29673 7B21           E8         0379            call	_write_word
29674 7B24           83C4                   06  add	sp,*6
29675                                           !BCC_EOS
29676                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29677 7B27           8B46         08            mov	ax,8[bp]
29678 7B2A           40                         inc	ax
29679 7B2B           40                         inc	ax
29680 7B2C           8946         08            mov	8[bp],ax
29681                                           !BCC_EOS
29682                                           ! 4090         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29683                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29684 7B2F           FF76         08            push	8[bp]
29685                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29686 7B32           FF76         06            push	6[bp]
29687                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29688 7B35           E8         0327            call	_read_byte
29689 7B38           83C4                   04  add	sp,*4
29690                                           ! Debug: list unsigned char = al+0 (used reg = )
29691 7B3B           30E4                       xor	ah,ah
29692 7B3D           50                         push	ax
29693                                           ! Debug: list int = const $87 (used reg = )
29694 7B3E           B8                   0087  mov	ax,#$87
29695 7B41           50                         push	ax
29696                                           ! Debug: list int = const $40 (used reg = )
29697 7B42           B8                   0040  mov	ax,*$40
29698 7B45           50                         push	ax
29699                                           ! Debug: func () void = write_byte+0 (used reg = )
29700 7B46           E8         033C            call	_write_byte
29701 7B49           83C4                   06  add	sp,*6
29702                                           !BCC_EOS
29703                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29704 7B4C           8B46         08            mov	ax,8[bp]
29705 7B4F           40                         inc	ax
29706 7B50           8946         08            mov	8[bp],ax
29707                                           !BCC_EOS
29708                                           ! 4091         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29709                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29710 7B53           FF76         08            push	8[bp]
29711                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29712 7B56           FF76         06            push	6[bp]
29713                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29714 7B59           E8         0303            call	_read_byte
29715 7B5C           83C4                   04  add	sp,*4
29716                                           ! Debug: list unsigned char = al+0 (used reg = )
29717 7B5F           30E4                       xor	ah,ah
29718 7B61           50                         push	ax
29719                                           ! Debug: list int = const $88 (used reg = )
29720 7B62           B8                   0088  mov	ax,#$88
29721 7B65           50                         push	ax
29722                                           ! Debug: list int = const $40 (used reg = )
29723 7B66           B8                   0040  mov	ax,*$40
29724 7B69           50                         push	ax
29725                                           ! Debug: func () void = write_byte+0 (used reg = )
29726 7B6A           E8         0318            call	_write_byte
29727 7B6D           83C4                   06  add	sp,*6
29728                                           !BCC_EOS
29729                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29730 7B70           8B46         08            mov	ax,8[bp]
29731 7B73           40                         inc	ax
29732 7B74           8946         08            mov	8[bp],ax
29733                                           !BCC_EOS
29734                                           ! 4092         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29735                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29736 7B77           FF76         08            push	8[bp]
29737                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29738 7B7A           FF76         06            push	6[bp]
29739                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29740 7B7D           E8         02DF            call	_read_byte
29741 7B80           83C4                   04  add	sp,*4
29742                                           ! Debug: list unsigned char = al+0 (used reg = )
29743 7B83           30E4                       xor	ah,ah
29744 7B85           50                         push	ax
29745                                           ! Debug: list int = const $89 (used reg = )
29746 7B86           B8                   0089  mov	ax,#$89
29747 7B89           50                         push	ax
29748                                           ! Debug: list int = const $40 (used reg = )
29749 7B8A           B8                   0040  mov	ax,*$40
29750 7B8D           50                         push	ax
29751                                           ! Debug: func () void = write_byte+0 (used reg = )
29752 7B8E           E8         02F4            call	_write_byte
29753 7B91           83C4                   06  add	sp,*6
29754                                           !BCC_EOS
29755                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29756 7B94           8B46         08            mov	ax,8[bp]
29757 7B97           40                         inc	ax
29758 7B98           8946         08            mov	8[bp],ax
29759                                           !BCC_EOS
29760                                           ! 4093         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29761                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29762 7B9B           FF76         08            push	8[bp]
29763                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29764 7B9E           FF76         06            push	6[bp]
29765                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29766 7BA1           E8         02CE            call	_read_word
29767 7BA4           83C4                   04  add	sp,*4
29768                                           ! Debug: list unsigned short = ax+0 (used reg = )
29769 7BA7           50                         push	ax
29770                                           ! Debug: list int = const $60 (used reg = )
29771 7BA8           B8                   0060  mov	ax,*$60
29772 7BAB           50                         push	ax
29773                                           ! Debug: list int = const $40 (used reg = )
29774 7BAC           B8                   0040  mov	ax,*$40
29775 7BAF           50                         push	ax
29776                                           ! Debug: func () void = write_word+0 (used reg = )
29777 7BB0           E8         02EA            call	_write_word
29778 7BB3           83C4                   06  add	sp,*6
29779                                           !BCC_EOS
29780                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29781 7BB6           8B46         08            mov	ax,8[bp]
29782 7BB9           40                         inc	ax
29783 7BBA           40                         inc	ax
29784 7BBB           8946         08            mov	8[bp],ax
29785                                           !BCC_EOS
29786                                           ! 4094         for(i=0;i<8;i++) {
29787                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29788 7BBE           31C0                       xor	ax,ax
29789 7BC0           8946         FE            mov	-2[bp],ax
29790                                           !BCC_EOS
29791                                           !BCC_EOS
29792 7BC3           EB           2F            jmp .2AA
29793                       00007BC5            .2AB:
29794                                           ! 4095             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29795                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29796 7BC5           FF76         08            push	8[bp]
29797                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29798 7BC8           FF76         06            push	6[bp]
29799                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29800 7BCB           E8         02A4            call	_read_word
29801 7BCE           83C4                   04  add	sp,*4
29802                                           ! Debug: list unsigned short = ax+0 (used reg = )
29803 7BD1           50                         push	ax
29804                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29805                                           ! Debug: expression subtree swapping
29806 7BD2           8B46         FE            mov	ax,-2[bp]
29807 7BD5           D1E0                       shl	ax,*1
29808                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29809                                           ! Debug: expression subtree swapping
29810                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29811 7BD7           05                   0050  add	ax,*$50
29812 7BDA           50                         push	ax
29813                                           ! Debug: list int = const $40 (used reg = )
29814 7BDB           B8                   0040  mov	ax,*$40
29815 7BDE           50                         push	ax
29816                                           ! Debug: func () void = write_word+0 (used reg = )
29817 7BDF           E8         02BB            call	_write_word
29818 7BE2           83C4                   06  add	sp,*6
29819                                           !BCC_EOS
29820                                           ! 4096    
29821                                           ! 4096          BX += 2;
29822                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29823 7BE5           8B46         08            mov	ax,8[bp]
29824 7BE8           40                         inc	ax
29825 7BE9           40                         inc	ax
29826 7BEA           8946         08            mov	8[bp],ax
29827                                           !BCC_EOS
29828                                           ! 4097         }
29829                                           ! 4098         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29830                       00007BED            .2A9:
29831                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29832 7BED           8B46         FE            mov	ax,-2[bp]
29833 7BF0           40                         inc	ax
29834 7BF1           8946         FE            mov	-2[bp],ax
29835                       00007BF4            .2AA:
29836                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29837 7BF4           8B46         FE            mov	ax,-2[bp]
29838 7BF7           3D                   0008  cmp	ax,*8
29839 7BFA           72           C9            jb 	.2AB
29840                       00007BFC            .2AC:
29841                       00007BFC            .2A8:
29842                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29843 7BFC           FF76         08            push	8[bp]
29844                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29845 7BFF           FF76         06            push	6[bp]
29846                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29847 7C02           E8         026D            call	_read_word
29848 7C05           83C4                   04  add	sp,*4
29849                                           ! Debug: list unsigned short = ax+0 (used reg = )
29850 7C08           50                         push	ax
29851                                           ! Debug: list int = const $4E (used reg = )
29852 7C09           B8                   004E  mov	ax,*$4E
29853 7C0C           50                         push	ax
29854                                           ! Debug: list int = const $40 (used reg = )
29855 7C0D           B8                   0040  mov	ax,*$40
29856 7C10           50                         push	ax
29857                                           ! Debug: func () void = write_word+0 (used reg = )
29858 7C11           E8         0289            call	_write_word
29859 7C14           83C4                   06  add	sp,*6
29860                                           !BCC_EOS
29861                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29862 7C17           8B46         08            mov	ax,8[bp]
29863 7C1A           40                         inc	ax
29864 7C1B           40                         inc	ax
29865 7C1C           8946         08            mov	8[bp],ax
29866                                           !BCC_EOS
29867                                           ! 4099         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29868                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29869 7C1F           FF76         08            push	8[bp]
29870                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29871 7C22           FF76         06            push	6[bp]
29872                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29873 7C25           E8         0237            call	_read_byte
29874 7C28           83C4                   04  add	sp,*4
29875                                           ! Debug: list unsigned char = al+0 (used reg = )
29876 7C2B           30E4                       xor	ah,ah
29877 7C2D           50                         push	ax
29878                                           ! Debug: list int = const $62 (used reg = )
29879 7C2E           B8                   0062  mov	ax,*$62
29880 7C31           50                         push	ax
29881                                           ! Debug: list int = const $40 (used reg = )
29882 7C32           B8                   0040  mov	ax,*$40
29883 7C35           50                         push	ax
29884                                           ! Debug: func () void = write_byte+0 (used reg = )
29885 7C36           E8         024C            call	_write_byte
29886 7C39           83C4                   06  add	sp,*6
29887                                           !BCC_EOS
29888                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29889 7C3C           8B46         08            mov	ax,8[bp]
29890 7C3F           40                         inc	ax
29891 7C40           8946         08            mov	8[bp],ax
29892                                           !BCC_EOS
29893                                           ! 4100         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29894                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29895 7C43           FF76         08            push	8[bp]
29896                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29897 7C46           FF76         06            push	6[bp]
29898                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29899 7C49           E8         0226            call	_read_word
29900 7C4C           83C4                   04  add	sp,*4
29901                                           ! Debug: list unsigned short = ax+0 (used reg = )
29902 7C4F           50                         push	ax
29903                                           ! Debug: list int = const $7C (used reg = )
29904 7C50           B8                   007C  mov	ax,*$7C
29905 7C53           50                         push	ax
29906                                           ! Debug: list int = const 0 (used reg = )
29907 7C54           31C0                       xor	ax,ax
29908 7C56           50                         push	ax
29909                                           ! Debug: func () void = write_word+0 (used reg = )
29910 7C57           E8         0243            call	_write_word
29911 7C5A           83C4                   06  add	sp,*6
29912                                           !BCC_EOS
29913                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29914 7C5D           8B46         08            mov	ax,8[bp]
29915 7C60           40                         inc	ax
29916 7C61           40                         inc	ax
29917 7C62           8946         08            mov	8[bp],ax
29918                                           !BCC_EOS
29919                                           ! 4101         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29920                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29921 7C65           FF76         08            push	8[bp]
29922                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29923 7C68           FF76         06            push	6[bp]
29924                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29925 7C6B           E8         0204            call	_read_word
29926 7C6E           83C4                   04  add	sp,*4
29927                                           ! Debug: list unsigned short = ax+0 (used reg = )
29928 7C71           50                         push	ax
29929                                           ! Debug: list int = const $7E (used reg = )
29930 7C72           B8                   007E  mov	ax,*$7E
29931 7C75           50                         push	ax
29932                                           ! Debug: list int = const 0 (used reg = )
29933 7C76           31C0                       xor	ax,ax
29934 7C78           50                         push	ax
29935                                           ! Debug: func () void = write_word+0 (used reg = )
29936 7C79           E8         0221            call	_write_word
29937 7C7C           83C4                   06  add	sp,*6
29938                                           !BCC_EOS
29939                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29940 7C7F           8B46         08            mov	ax,8[bp]
29941 7C82           40                         inc	ax
29942 7C83           40                         inc	ax
29943 7C84           8946         08            mov	8[bp],ax
29944                                           !BCC_EOS
29945                                           ! 4102         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29946                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29947 7C87           FF76         08            push	8[bp]
29948                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29949 7C8A           FF76         06            push	6[bp]
29950                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29951 7C8D           E8         01E2            call	_read_word
29952 7C90           83C4                   04  add	sp,*4
29953                                           ! Debug: list unsigned short = ax+0 (used reg = )
29954 7C93           50                         push	ax
29955                                           ! Debug: list int = const $10C (used reg = )
29956 7C94           B8                   010C  mov	ax,#$10C
29957 7C97           50                         push	ax
29958                                           ! Debug: list int = const 0 (used reg = )
29959 7C98           31C0                       xor	ax,ax
29960 7C9A           50                         push	ax
29961                                           ! Debug: func () void = write_word+0 (used reg = )
29962 7C9B           E8         01FF            call	_write_word
29963 7C9E           83C4                   06  add	sp,*6
29964                                           !BCC_EOS
29965                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29966 7CA1           8B46         08            mov	ax,8[bp]
29967 7CA4           40                         inc	ax
29968 7CA5           40                         inc	ax
29969 7CA6           8946         08            mov	8[bp],ax
29970                                           !BCC_EOS
29971                                           ! 4103         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29972                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29973 7CA9           FF76         08            push	8[bp]
29974                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29975 7CAC           FF76         06            push	6[bp]
29976                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29977 7CAF           E8         01C0            call	_read_word
29978 7CB2           83C4                   04  add	sp,*4
29979                                           ! Debug: list unsigned short = ax+0 (used reg = )
29980 7CB5           50                         push	ax
29981                                           ! Debug: list int = const $10E (used reg = )
29982 7CB6           B8                   010E  mov	ax,#$10E
29983 7CB9           50                         push	ax
29984                                           ! Debug: list int = const 0 (used reg = )
29985 7CBA           31C0                       xor	ax,ax
29986 7CBC           50                         push	ax
29987                                           ! Debug: func () void = write_word+0 (used reg = )
29988 7CBD           E8         01DD            call	_write_word
29989 7CC0           83C4                   06  add	sp,*6
29990                                           !BCC_EOS
29991                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29992 7CC3           8B46         08            mov	ax,8[bp]
29993 7CC6           40                         inc	ax
29994 7CC7           40                         inc	ax
29995 7CC8           8946         08            mov	8[bp],ax
29996                                           !BCC_EOS
29997                                           ! 4104     }
29998                                           ! 4105     if (CX & 4) {
29999                       00007CCB            .2A6:
30000                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
30001 7CCB           8A46         04            mov	al,4[bp]
30002 7CCE           24                     04  and	al,*4
30003 7CD0           84C0                       test	al,al
30004 7CD2         0F84         0096            beq 	.2AD
30005                       00007CD6            .2AE:
30006                                           ! 4106         BX++;
30007                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30008 7CD6           8B46         08            mov	ax,8[bp]
30009 7CD9           40                         inc	ax
30010 7CDA           8946         08            mov	8[bp],ax
30011                                           !BCC_EOS
30012                                           ! 4107         v = read_byte(ES, BX); BX++;
30013                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30014 7CDD           FF76         08            push	8[bp]
30015                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30016 7CE0           FF76         06            push	6[bp]
30017                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30018 7CE3           E8         0179            call	_read_byte
30019 7CE6           83C4                   04  add	sp,*4
30020                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
30021 7CE9           30E4                       xor	ah,ah
30022 7CEB           8946         FA            mov	-6[bp],ax
30023                                           !BCC_EOS
30024                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30025 7CEE           8B46         08            mov	ax,8[bp]
30026 7CF1           40                         inc	ax
30027 7CF2           8946         08            mov	8[bp],ax
30028                                           !BCC_EOS
30029                                           ! 4108         outb(0x3c6, read_byte(ES, BX)); BX++;
30030                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30031 7CF5           FF76         08            push	8[bp]
30032                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30033 7CF8           FF76         06            push	6[bp]
30034                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30035 7CFB           E8         0161            call	_read_byte
30036 7CFE           83C4                   04  add	sp,*4
30037                                           ! Debug: list unsigned char = al+0 (used reg = )
30038 7D01           30E4                       xor	ah,ah
30039 7D03           50                         push	ax
30040                                           ! Debug: list int = const $3C6 (used reg = )
30041 7D04           B8                   03C6  mov	ax,#$3C6
30042 7D07           50                         push	ax
30043                                           ! Debug: func () void = outb+0 (used reg = )
30044 7D08           E8         01C0            call	_outb
30045 7D0B           83C4                   04  add	sp,*4
30046                                           !BCC_EOS
30047                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30048 7D0E           8B46         08            mov	ax,8[bp]
30049 7D11           40                         inc	ax
30050 7D12           8946         08            mov	8[bp],ax
30051                                           !BCC_EOS
30052                                           ! 4109         outb(0x3c8,0x00);
30053                                           ! Debug: list int = const 0 (used reg = )
30054 7D15           31C0                       xor	ax,ax
30055 7D17           50                         push	ax
30056                                           ! Debug: list int = const $3C8 (used reg = )
30057 7D18           B8                   03C8  mov	ax,#$3C8
30058 7D1B           50                         push	ax
30059                                           ! Debug: func () void = outb+0 (used reg = )
30060 7D1C           E8         01AC            call	_outb
30061 7D1F           83C4                   04  add	sp,*4
30062                                           !BCC_EOS
30063                                           ! 4110         for(i=0;i<256*3;i++) {
30064                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
30065 7D22           31C0                       xor	ax,ax
30066 7D24           8946         FE            mov	-2[bp],ax
30067                                           !BCC_EOS
30068                                           !BCC_EOS
30069 7D27           EB           27            jmp .2B1
30070                       00007D29            .2B2:
30071                                           ! 4111             outb(0x3c9, read_byte(ES, BX)); BX++;
30072                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
30073 7D29           FF76         08            push	8[bp]
30074                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
30075 7D2C           FF76         06            push	6[bp]
30076                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30077 7D2F           E8         012D            call	_read_byte
30078 7D32           83C4                   04  add	sp,*4
30079                                           ! Debug: list unsigned char = al+0 (used reg = )
30080 7D35           30E4                       xor	ah,ah
30081 7D37           50                         push	ax
30082                                           ! Debug: list int = const $3C9 (used reg = )
30083 7D38           B8                   03C9  mov	ax,#$3C9
30084 7D3B           50                         push	ax
30085                                           ! Debug: func () void = outb+0 (used reg = )
30086 7D3C           E8         018C            call	_outb
30087 7D3F           83C4                   04  add	sp,*4
30088                                           !BCC_EOS
30089                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30090 7D42           8B46         08            mov	ax,8[bp]
30091 7D45           40                         inc	ax
30092 7D46           8946         08            mov	8[bp],ax
30093                                           !BCC_EOS
30094                                           ! 4112         }
30095                                           ! 4113         BX++;
30096                       00007D49            .2B0:
30097                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
30098 7D49           8B46         FE            mov	ax,-2[bp]
30099 7D4C           40                         inc	ax
30100 7D4D           8946         FE            mov	-2[bp],ax
30101                       00007D50            .2B1:
30102                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
30103 7D50           8B46         FE            mov	ax,-2[bp]
30104 7D53           3D                   0300  cmp	ax,#$300
30105 7D56           72           D1            jb 	.2B2
30106                       00007D58            .2B3:
30107                       00007D58            .2AF:
30108                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
30109 7D58           8B46         08            mov	ax,8[bp]
30110 7D5B           40                         inc	ax
30111 7D5C           8946         08            mov	8[bp],ax
30112                                           !BCC_EOS
30113                                           ! 4114         outb(0x3c8, v);
30114                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
30115 7D5F           FF76         FA            push	-6[bp]
30116                                           ! Debug: list int = const $3C8 (used reg = )
30117 7D62           B8                   03C8  mov	ax,#$3C8
30118 7D65           50                         push	ax
30119                                           ! Debug: func () void = outb+0 (used reg = )
30120 7D66           E8         0162            call	_outb
30121 7D69           83C4                   04  add	sp,*4
30122                                           !BCC_EOS
30123                                           ! 4115     }
30124                                           ! 4116     return BX;
30125                       00007D6C            .2AD:
30126 7D6C           8B46         08            mov	ax,8[bp]
30127 7D6F           89EC                       mov	sp,bp
30128 7D71           5D                         pop	bp
30129 7D72           C3                         ret
30130                                           !BCC_EOS
30131                                           ! 4117 }
30132                                           ! 4118 static Bit8u find_vga_entry(mode)
30133                                           ! 4119 Bit8u mode;
30134                       00007D73            _find_vga_entry:
30135                                           !BCC_EOS
30136                                           ! 4120 {
30137                                           ! 4121  Bit8u i,line=0xFF;
30138 7D73           55                         push	bp
30139 7D74           89E5                       mov	bp,sp
30140 7D76           4C                         dec	sp
30141 7D77           4C                         dec	sp
30142                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
30143 7D78           B0                     FF  mov	al,#$FF
30144 7D7A           8846         FE            mov	-2[bp],al
30145                                           !BCC_EOS
30146                                           ! 4122  for(i=0;i<=17;i++)
30147                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
30148 7D7D           30C0                       xor	al,al
30149 7D7F           8846         FF            mov	-1[bp],al
30150                                           !BCC_EOS
30151                                           !BCC_EOS
30152                                           ! 4123   if(vga_modes[i].svgamode==mode)
30153 7D82           EB           23            jmp .2B6
30154                       00007D84            .2B7:
30155                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$12] struct  = vga_modes+0 (used reg = )
30156 7D84           8A46         FF            mov	al,-1[bp]
30157 7D87           30E4                       xor	ah,ah
30158 7D89           B1                     03  mov	cl,*3
30159 7D8B           D3E0                       shl	ax,cl
30160 7D8D           89C3                       mov	bx,ax
30161                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
30162 7D8F           8A87       0225            mov	al,_vga_modes[bx]
30163 7D93           3A46         04            cmp	al,4[bp]
30164 7D96           75           08            jne 	.2B8
30165                       00007D98            .2B9:
30166                                           ! 4124    {line=i;
30167                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
30168 7D98           8A46         FF            mov	al,-1[bp]
30169 7D9B           8846         FE            mov	-2[bp],al
30170                                           !BCC_EOS
30171                                           ! 4125     break;
30172 7D9E           EB           0E            jmp .2B4
30173                                           !BCC_EOS
30174                                           ! 4126    }
30175                                           ! 4127  return line;
30176                       00007DA0            .2B8:
30177                       00007DA0            .2B5:
30178                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
30179 7DA0           8A46         FF            mov	al,-1[bp]
30180 7DA3           40                         inc	ax
30181 7DA4           8846         FF            mov	-1[bp],al
30182                       00007DA7            .2B6:
30183                                           ! Debug: le int = const $11 to unsigned char i = [S+4-3] (used reg = )
30184 7DA7           8A46         FF            mov	al,-1[bp]
30185 7DAA           3C                     11  cmp	al,*$11
30186 7DAC           76           D6            jbe	.2B7
30187                       00007DAE            .2BA:
30188                       00007DAE            .2B4:
30189 7DAE           8A46         FE            mov	al,-2[bp]
30190 7DB1           89EC                       mov	sp,bp
30191 7DB3           5D                         pop	bp
30192 7DB4           C3                         ret
30193                                           !BCC_EOS
30194                                           ! 4128 }
30195                                           ! 4129 static void memsetb(seg,offset,value,count)
30196                                           ! Register BX used in function find_vga_entry
30197                                           ! 4130   Bit16u seg;
30198                       00007DB5            _memsetb:
30199                                           !BCC_EOS
30200                                           ! 4131   Bit16u offset;
30201                                           !BCC_EOS
30202                                           ! 4132   Bit16u value;
30203                                           !BCC_EOS
30204                                           ! 4133   Bit16u count;
30205                                           !BCC_EOS
30206                                           ! 4134 {
30207                                           ! 4135 #asm
30208                                           !BCC_ASM
30209                       00000008            _memsetb.count	set	8
30210                       00000002            _memsetb.seg	set	2
30211                       00000006            _memsetb.value	set	6
30212                       00000004            _memsetb.offset	set	4
30213 7DB5           55                           push bp
30214 7DB6           89E5                         mov bp, sp
30215 7DB8           50                             push ax
30216 7DB9           51                             push cx
30217 7DBA           06                             push es
30218 7DBB           57                             push di
30219 7DBC           8B4E         0A                mov cx, 10[bp] ; count
30220 7DBF           83F9                   00      cmp cx, #0x00
30221 7DC2           74           10                je memsetb_end
30222 7DC4           8B46         04                mov ax, 4[bp] ; segment
30223 7DC7           8EC0                           mov es, ax
30224 7DC9           8B46         06                mov ax, 6[bp] ; offset
30225 7DCC           89C7                           mov di, ax
30226 7DCE           8A46         08                mov al, 8[bp] ; value
30227 7DD1           FC                             cld
30228 7DD2           F3                             rep
30229 7DD3           AA                              stosb
30230                       00007DD4            memsetb_end:
30231 7DD4           5F                             pop di
30232 7DD5           07                             pop es
30233 7DD6           59                             pop cx
30234 7DD7           58                             pop ax
30235 7DD8           5D                           pop bp
30236                                           ! 4159 endasm
30237                                           !BCC_ENDASM
30238                                           ! 4160 }
30239 7DD9           C3                         ret
30240                                           ! 4161 static void memsetw(seg,offset,value,count)
30241                                           ! 4162   Bit16u seg;
30242                       00007DDA            _memsetw:
30243                                           !BCC_EOS
30244                                           ! 4163   Bit16u offset;
30245                                           !BCC_EOS
30246                                           ! 4164   Bit16u value;
30247                                           !BCC_EOS
30248                                           ! 4165   Bit16u count;
30249                                           !BCC_EOS
30250                                           ! 4166 {
30251                                           ! 4167 #asm
30252                                           !BCC_ASM
30253                       00000008            _memsetw.count	set	8
30254                       00000002            _memsetw.seg	set	2
30255                       00000006            _memsetw.value	set	6
30256                       00000004            _memsetw.offset	set	4
30257 7DDA           55                           push bp
30258 7DDB           89E5                         mov bp, sp
30259 7DDD           50                             push ax
30260 7DDE           51                             push cx
30261 7DDF           06                             push es
30262 7DE0           57                             push di
30263 7DE1           8B4E         0A                mov cx, 10[bp] ; count
30264 7DE4           83F9                   00      cmp cx, #0x00
30265 7DE7           74           10                je memsetw_end
30266 7DE9           8B46         04                mov ax, 4[bp] ; segment
30267 7DEC           8EC0                           mov es, ax
30268 7DEE           8B46         06                mov ax, 6[bp] ; offset
30269 7DF1           89C7                           mov di, ax
30270 7DF3           8B46         08                mov ax, 8[bp] ; value
30271 7DF6           FC                             cld
30272 7DF7           F3                             rep
30273 7DF8           AB                              stosw
30274                       00007DF9            memsetw_end:
30275 7DF9           5F                             pop di
30276 7DFA           07                             pop es
30277 7DFB           59                             pop cx
30278 7DFC           58                             pop ax
30279 7DFD           5D                           pop bp
30280                                           ! 4191 endasm
30281                                           !BCC_ENDASM
30282                                           ! 4192 }
30283 7DFE           C3                         ret
30284                                           ! 4193 static void memcpyb(dseg,doffset,sseg,soffset,count)
30285                                           ! 4194   Bit16u dseg;
30286                       00007DFF            _memcpyb:
30287                                           !BCC_EOS
30288                                           ! 4195   Bit16u doffset;
30289                                           !BCC_EOS
30290                                           ! 4196   Bit16u sseg;
30291                                           !BCC_EOS
30292                                           ! 4197   Bit16u soffset;
30293                                           !BCC_EOS
30294                                           ! 4198   Bit16u count;
30295                                           !BCC_EOS
30296                                           ! 4199 {
30297                                           ! 4200 #asm
30298                                           !BCC_ASM
30299                       0000000A            _memcpyb.count	set	$A
30300                       00000006            _memcpyb.sseg	set	6
30301                       00000008            _memcpyb.soffset	set	8
30302                       00000002            _memcpyb.dseg	set	2
30303                       00000004            _memcpyb.doffset	set	4
30304 7DFF           55                           push bp
30305 7E00           89E5                         mov bp, sp
30306 7E02           50                             push ax
30307 7E03           51                             push cx
30308 7E04           06                             push es
30309 7E05           57                             push di
30310 7E06           1E                             push ds
30311 7E07           56                             push si
30312 7E08           8B4E         0C                mov cx, 12[bp] ; count
30313 7E0B           83F9                   00      cmp cx, #0x0000
30314 7E0E           74           17                je memcpyb_end
30315 7E10           8B46         04                mov ax, 4[bp] ; dsegment
30316 7E13           8EC0                           mov es, ax
30317 7E15           8B46         06                mov ax, 6[bp] ; doffset
30318 7E18           89C7                           mov di, ax
30319 7E1A           8B46         08                mov ax, 8[bp] ; ssegment
30320 7E1D           8ED8                           mov ds, ax
30321 7E1F           8B46         0A                mov ax, 10[bp] ; soffset
30322 7E22           89C6                           mov si, ax
30323 7E24           FC                             cld
30324 7E25           F3                             rep
30325 7E26           A4                              movsb
30326                       00007E27            memcpyb_end:
30327 7E27           5E                             pop si
30328 7E28           1F                             pop ds
30329 7E29           5F                             pop di
30330 7E2A           07                             pop es
30331 7E2B           59                             pop cx
30332 7E2C           58                             pop ax
30333 7E2D           5D                           pop bp
30334                                           ! 4231 endasm
30335                                           !BCC_ENDASM
30336                                           ! 4232 }
30337 7E2E           C3                         ret
30338                                           ! 4233 static void memcpyw(dseg,doffset,sseg,soffset,count)
30339                                           ! 4234   Bit16u dseg;
30340                       00007E2F            _memcpyw:
30341                                           !BCC_EOS
30342                                           ! 4235   Bit16u doffset;
30343                                           !BCC_EOS
30344                                           ! 4236   Bit16u sseg;
30345                                           !BCC_EOS
30346                                           ! 4237   Bit16u soffset;
30347                                           !BCC_EOS
30348                                           ! 4238   Bit16u count;
30349                                           !BCC_EOS
30350                                           ! 4239 {
30351                                           ! 4240 #asm
30352                                           !BCC_ASM
30353                       0000000A            _memcpyw.count	set	$A
30354                       00000006            _memcpyw.sseg	set	6
30355                       00000008            _memcpyw.soffset	set	8
30356                       00000002            _memcpyw.dseg	set	2
30357                       00000004            _memcpyw.doffset	set	4
30358 7E2F           55                           push bp
30359 7E30           89E5                         mov bp, sp
30360 7E32           50                             push ax
30361 7E33           51                             push cx
30362 7E34           06                             push es
30363 7E35           57                             push di
30364 7E36           1E                             push ds
30365 7E37           56                             push si
30366 7E38           8B4E         0C                mov cx, 12[bp] ; count
30367 7E3B           83F9                   00      cmp cx, #0x0000
30368 7E3E           74           17                je memcpyw_end
30369 7E40           8B46         04                mov ax, 4[bp] ; dsegment
30370 7E43           8EC0                           mov es, ax
30371 7E45           8B46         06                mov ax, 6[bp] ; doffset
30372 7E48           89C7                           mov di, ax
30373 7E4A           8B46         08                mov ax, 8[bp] ; ssegment
30374 7E4D           8ED8                           mov ds, ax
30375 7E4F           8B46         0A                mov ax, 10[bp] ; soffset
30376 7E52           89C6                           mov si, ax
30377 7E54           FC                             cld
30378 7E55           F3                             rep
30379 7E56           A5                              movsw
30380                       00007E57            memcpyw_end:
30381 7E57           5E                             pop si
30382 7E58           1F                             pop ds
30383 7E59           5F                             pop di
30384 7E5A           07                             pop es
30385 7E5B           59                             pop cx
30386 7E5C           58                             pop ax
30387 7E5D           5D                           pop bp
30388                                           ! 4271 endasm
30389                                           !BCC_ENDASM
30390                                           ! 4272 }
30391 7E5E           C3                         ret
30392                                           ! 4273 static Bit8u
30393                                           ! 4274 read_byte(seg, offset)
30394                                           ! 4275   Bit16u seg;
30395                       00007E5F            _read_byte:
30396                                           !BCC_EOS
30397                                           ! 4276   Bit16u offset;
30398                                           !BCC_EOS
30399                                           ! 4277 {
30400                                           ! 4278 #asm
30401                                           !BCC_ASM
30402                       00000002            _read_byte.seg	set	2
30403                       00000004            _read_byte.offset	set	4
30404 7E5F           55                           push bp
30405 7E60           89E5                         mov bp, sp
30406 7E62           53                             push bx
30407 7E63           1E                             push ds
30408 7E64           8B46         04                mov ax, 4[bp] ; segment
30409 7E67           8ED8                           mov ds, ax
30410 7E69           8B5E         06                mov bx, 6[bp] ; offset
30411 7E6C           8A07                           mov al, [bx]
30412                                               ;; al = return value (byte)
30413 7E6E           1F                             pop ds
30414 7E6F           5B                             pop bx
30415 7E70           5D                           pop bp
30416                                           ! 4291 endasm
30417                                           !BCC_ENDASM
30418                                           ! 4292 }
30419 7E71           C3                         ret
30420                                           ! 4293 static Bit16u
30421                                           ! 4294 read_word(seg, offset)
30422                                           ! 4295   Bit16u seg;
30423                       00007E72            _read_word:
30424                                           !BCC_EOS
30425                                           ! 4296   Bit16u offset;
30426                                           !BCC_EOS
30427                                           ! 4297 {
30428                                           ! 4298 #asm
30429                                           !BCC_ASM
30430                       00000002            _read_word.seg	set	2
30431                       00000004            _read_word.offset	set	4
30432 7E72           55                           push bp
30433 7E73           89E5                         mov bp, sp
30434 7E75           53                             push bx
30435 7E76           1E                             push ds
30436 7E77           8B46         04                mov ax, 4[bp] ; segment
30437 7E7A           8ED8                           mov ds, ax
30438 7E7C           8B5E         06                mov bx, 6[bp] ; offset
30439 7E7F           8B07                           mov ax, [bx]
30440                                               ;; ax = return value (word)
30441 7E81           1F                             pop ds
30442 7E82           5B                             pop bx
30443 7E83           5D                           pop bp
30444                                           ! 4311 endasm
30445                                           !BCC_ENDASM
30446                                           ! 4312 }
30447 7E84           C3                         ret
30448                                           ! 4313 static void
30449                                           ! 4314 write_byte(seg, offset, data)
30450                                           ! 4315   Bit16u seg;
30451                       00007E85            _write_byte:
30452                                           !BCC_EOS
30453                                           ! 4316   Bit16u offset;
30454                                           !BCC_EOS
30455                                           ! 4317   Bit8u data;
30456                                           !BCC_EOS
30457                                           ! 4318 {
30458                                           ! 4319 #asm
30459                                           !BCC_ASM
30460                       00000002            _write_byte.seg	set	2
30461                       00000006            _write_byte.data	set	6
30462                       00000004            _write_byte.offset	set	4
30463 7E85           55                           push bp
30464 7E86           89E5                         mov bp, sp
30465 7E88           50                             push ax
30466 7E89           53                             push bx
30467 7E8A           1E                             push ds
30468 7E8B           8B46         04                mov ax, 4[bp] ; segment
30469 7E8E           8ED8                           mov ds, ax
30470 7E90           8B5E         06                mov bx, 6[bp] ; offset
30471 7E93           8A46         08                mov al, 8[bp] ; data byte
30472 7E96           8807                           mov [bx], al ; write data byte
30473 7E98           1F                             pop ds
30474 7E99           5B                             pop bx
30475 7E9A           58                             pop ax
30476 7E9B           5D                           pop bp
30477                                           ! 4334 endasm
30478                                           !BCC_ENDASM
30479                                           ! 4335 }
30480 7E9C           C3                         ret
30481                                           ! 4336 static void
30482                                           ! 4337 write_word(seg, offset, data)
30483                                           ! 4338   Bit16u seg;
30484                       00007E9D            _write_word:
30485                                           !BCC_EOS
30486                                           ! 4339   Bit16u offset;
30487                                           !BCC_EOS
30488                                           ! 4340   Bit16u data;
30489                                           !BCC_EOS
30490                                           ! 4341 {
30491                                           ! 4342 #asm
30492                                           !BCC_ASM
30493                       00000002            _write_word.seg	set	2
30494                       00000006            _write_word.data	set	6
30495                       00000004            _write_word.offset	set	4
30496 7E9D           55                           push bp
30497 7E9E           89E5                         mov bp, sp
30498 7EA0           50                             push ax
30499 7EA1           53                             push bx
30500 7EA2           1E                             push ds
30501 7EA3           8B46         04                mov ax, 4[bp] ; segment
30502 7EA6           8ED8                           mov ds, ax
30503 7EA8           8B5E         06                mov bx, 6[bp] ; offset
30504 7EAB           8B46         08                mov ax, 8[bp] ; data word
30505 7EAE           8907                           mov [bx], ax ; write data word
30506 7EB0           1F                             pop ds
30507 7EB1           5B                             pop bx
30508 7EB2           58                             pop ax
30509 7EB3           5D                           pop bp
30510                                           ! 4357 endasm
30511                                           !BCC_ENDASM
30512                                           ! 4358 }
30513 7EB4           C3                         ret
30514                                           ! 4359  Bit8u
30515                                           ! 4360 inb(port)
30516                                           ! 4361   Bit16u port;
30517                                           export	_inb
30518                       00007EB5            _inb:
30519                                           !BCC_EOS
30520                                           ! 4362 {
30521                                           ! 4363 #asm
30522                                           !BCC_ASM
30523                       00000002            _inb.port	set	2
30524 7EB5           55                           push bp
30525 7EB6           89E5                         mov bp, sp
30526 7EB8           52                             push dx
30527 7EB9           8B56         04                mov dx, 4[bp]
30528 7EBC           EC                             in al, dx
30529 7EBD           5A                             pop dx
30530 7EBE           5D                           pop bp
30531                                           ! 4371 endasm
30532                                           !BCC_ENDASM
30533                                           ! 4372 }
30534 7EBF           C3                         ret
30535                                           ! 4373   Bit16u
30536                                           ! 4374 inw(port)
30537                                           ! 4375   Bit16u port;
30538                                           export	_inw
30539                       00007EC0            _inw:
30540                                           !BCC_EOS
30541                                           ! 4376 {
30542                                           ! 4377 #asm
30543                                           !BCC_ASM
30544                       00000002            _inw.port	set	2
30545 7EC0           55                           push bp
30546 7EC1           89E5                         mov bp, sp
30547 7EC3           52                             push dx
30548 7EC4           8B56         04                mov dx, 4[bp]
30549 7EC7           ED                             in ax, dx
30550 7EC8           5A                             pop dx
30551 7EC9           5D                           pop bp
30552                                           ! 4385 endasm
30553                                           !BCC_ENDASM
30554                                           ! 4386 }
30555 7ECA           C3                         ret
30556                                           ! 4387   void
30557                                           ! 4388 outb(port, val)
30558                                           ! 4389   Bit16u port;
30559                                           export	_outb
30560                       00007ECB            _outb:
30561                                           !BCC_EOS
30562                                           ! 4390   Bit8u val;
30563                                           !BCC_EOS
30564                                           ! 4391 {
30565                                           ! 4392 #asm
30566                                           !BCC_ASM
30567                       00000004            _outb.val	set	4
30568                       00000002            _outb.port	set	2
30569 7ECB           55                           push bp
30570 7ECC           89E5                         mov bp, sp
30571 7ECE           50                             push ax
30572 7ECF           52                             push dx
30573 7ED0           8B56         04                mov dx, 4[bp]
30574 7ED3           8A46         06                mov al, 6[bp]
30575 7ED6           EE                             out dx, al
30576 7ED7           5A                             pop dx
30577 7ED8           58                             pop ax
30578 7ED9           5D                           pop bp
30579                                           ! 4403 endasm
30580                                           !BCC_ENDASM
30581                                           ! 4404 }
30582 7EDA           C3                         ret
30583                                           ! 4405   void
30584                                           ! 4406 outw(port, val)
30585                                           ! 4407   Bit16u port;
30586                                           export	_outw
30587                       00007EDB            _outw:
30588                                           !BCC_EOS
30589                                           ! 4408   Bit16u val;
30590                                           !BCC_EOS
30591                                           ! 4409 {
30592                                           ! 4410 #asm
30593                                           !BCC_ASM
30594                       00000004            _outw.val	set	4
30595                       00000002            _outw.port	set	2
30596 7EDB           55                           push bp
30597 7EDC           89E5                         mov bp, sp
30598 7EDE           50                             push ax
30599 7EDF           52                             push dx
30600 7EE0           8B56         04                mov dx, 4[bp]
30601 7EE3           8B46         06                mov ax, 6[bp]
30602 7EE6           EF                             out dx, ax
30603 7EE7           5A                             pop dx
30604 7EE8           58                             pop ax
30605 7EE9           5D                           pop bp
30606                                           ! 4421 endasm
30607                                           !BCC_ENDASM
30608                                           ! 4422 }
30609 7EEA           C3                         ret
30610                                           ! 4423 Bit16u get_SS()
30611                                           ! 4424 {
30612                                           export	_get_SS
30613                       00007EEB            _get_SS:
30614                                           ! 4425 #asm
30615                                           !BCC_ASM
30616 7EEB           8CD0                         mov ax, ss
30617                                           ! 4427 endasm
30618                                           !BCC_ENDASM
30619                                           ! 4428 }
30620 7EED           C3                         ret
30621                                           ! 4429 void printf(s)
30622                                           ! 4430   Bit8u *s;
30623                                           export	_printf
30624                       00007EEE            _printf:
30625                                           !BCC_EOS
30626                                           ! 4431 {
30627                                           ! 4432   Bit8u c, format_char;
30628                                           !BCC_EOS
30629                                           ! 4433   Boolean in_format;
30630                                           !BCC_EOS
30631                                           ! 4434   unsigned format_width, i;
30632                                           !BCC_EOS
30633                                           ! 4435   Bit16u *arg_ptr;
30634                                           !BCC_EOS
30635                                           ! 4436   Bit16u arg_seg, arg, digit, nibble, shift_count;
30636                                           !BCC_EOS
30637                                           ! 4437   arg_ptr = &s;
30638 7EEE           55                         push	bp
30639 7EEF           89E5                       mov	bp,sp
30640 7EF1           83C4                   EC  add	sp,*-$14
30641                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30642 7EF4           8D5E         04            lea	bx,4[bp]
30643 7EF7           895E         F6            mov	-$A[bp],bx
30644                                           !BCC_EOS
30645                                           ! 4438   arg_seg = get_SS();
30646                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30647 7EFA           E8         FFEE            call	_get_SS
30648                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30649 7EFD           8946         F4            mov	-$C[bp],ax
30650                                           !BCC_EOS
30651                                           ! 4439   in_format = 0;
30652                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30653 7F00           31C0                       xor	ax,ax
30654 7F02           8946         FC            mov	-4[bp],ax
30655                                           !BCC_EOS
30656                                           ! 4440   format_width = 0;
30657                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30658 7F05           31C0                       xor	ax,ax
30659 7F07           8946         FA            mov	-6[bp],ax
30660                                           !BCC_EOS
30661                                           ! 4441   while (c = read_byte(0xc000, s)) {
30662 7F0A           E9         0104            br 	.2BC
30663                       00007F0D            .2BD:
30664                                           ! 4442     if ( c == '%' ) {
30665                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30666 7F0D           8A46         FF            mov	al,-1[bp]
30667 7F10           3C                     25  cmp	al,*$25
30668 7F12           75           0E            jne 	.2BE
30669                       00007F14            .2BF:
30670                                           ! 4443       in_format = 1;
30671                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30672 7F14           B8                   0001  mov	ax,*1
30673 7F17           8946         FC            mov	-4[bp],ax
30674                                           !BCC_EOS
30675                                           ! 4444       format_width = 0;
30676                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30677 7F1A           31C0                       xor	ax,ax
30678 7F1C           8946         FA            mov	-6[bp],ax
30679                                           !BCC_EOS
30680                                           ! 4445       }
30681                                           ! 4446     else if (in_format) {
30682 7F1F           E9         00E8            br 	.2C0
30683                       00007F22            .2BE:
30684 7F22           8B46         FC            mov	ax,-4[bp]
30685 7F25           85C0                       test	ax,ax
30686 7F27         0F84         00CF            beq 	.2C1
30687                       00007F2B            .2C2:
30688                                           ! 4447       if ( (c>='0') && (c<='9') ) {
30689                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30690 7F2B           8A46         FF            mov	al,-1[bp]
30691 7F2E           3C                     30  cmp	al,*$30
30692 7F30           72           28            jb  	.2C3
30693                       00007F32            .2C5:
30694                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30695 7F32           8A46         FF            mov	al,-1[bp]
30696 7F35           3C                     39  cmp	al,*$39
30697 7F37           77           21            ja  	.2C3
30698                       00007F39            .2C4:
30699                                           ! 4448         format_width = (format_width * 10) + (c - '0');
30700                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30701 7F39           8A46         FF            mov	al,-1[bp]
30702 7F3C           30E4                       xor	ah,ah
30703 7F3E           05                   FFD0  add	ax,*-$30
30704 7F41           50                         push	ax
30705                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30706 7F42           8B46         FA            mov	ax,-6[bp]
30707 7F45           89C2                       mov	dx,ax
30708 7F47           D1E0                       shl	ax,*1
30709 7F49           D1E0                       shl	ax,*1
30710 7F4B           01D0                       add	ax,dx
30711 7F4D           D1E0                       shl	ax,*1
30712                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30713 7F4F           0346         EA            add	ax,-$16[bp]
30714 7F52           44                         inc	sp
30715 7F53           44                         inc	sp
30716                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30717 7F54           8946         FA            mov	-6[bp],ax
30718                                           !BCC_EOS
30719                                           ! 4449         }
30720                                           ! 4450       else if (c == 'x') {
30721 7F57           E9         009E            br 	.2C6
30722                       00007F5A            .2C3:
30723                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30724 7F5A           8A46         FF            mov	al,-1[bp]
30725 7F5D           3C                     78  cmp	al,*$78
30726 7F5F         0F85         0095            bne 	.2C7
30727                       00007F63            .2C8:
30728                                           ! 4451         arg_ptr++;
30729                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30730 7F63           8B5E         F6            mov	bx,-$A[bp]
30731 7F66           43                         inc	bx
30732 7F67           43                         inc	bx
30733 7F68           895E         F6            mov	-$A[bp],bx
30734                                           !BCC_EOS
30735                                           ! 4452         arg = read_word(arg_seg, arg_ptr);
30736                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30737 7F6B           FF76         F6            push	-$A[bp]
30738                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30739 7F6E           FF76         F4            push	-$C[bp]
30740                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30741 7F71           E8         FEFE            call	_read_word
30742 7F74           83C4                   04  add	sp,*4
30743                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30744 7F77           8946         F2            mov	-$E[bp],ax
30745                                           !BCC_EOS
30746                                           ! 4453         if (format_width == 0)
30747                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30748 7F7A           8B46         FA            mov	ax,-6[bp]
30749 7F7D           85C0                       test	ax,ax
30750 7F7F           75           06            jne 	.2C9
30751                       00007F81            .2CA:
30752                                           ! 4454           format_width = 4;
30753                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30754 7F81           B8                   0004  mov	ax,*4
30755 7F84           8946         FA            mov	-6[bp],ax
30756                                           !BCC_EOS
30757                                           ! 4455         i = 0;
30758                       00007F87            .2C9:
30759                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30760 7F87           31C0                       xor	ax,ax
30761 7F89           8946         F8            mov	-8[bp],ax
30762                                           !BCC_EOS
30763                                           ! 4456         digit = format_width - 1;
30764                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30765 7F8C           8B46         FA            mov	ax,-6[bp]
30766                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30767 7F8F           48                         dec	ax
30768 7F90           8946         F0            mov	-$10[bp],ax
30769                                           !BCC_EOS
30770                                           ! 4457         for (i=0; i<format_width; i++) {
30771                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30772 7F93           31C0                       xor	ax,ax
30773 7F95           8946         F8            mov	-8[bp],ax
30774                                           !BCC_EOS
30775                                           !BCC_EOS
30776 7F98           EB           51            jmp .2CD
30777                       00007F9A            .2CE:
30778                                           ! 4458           nibble = (arg >> (4 * digit)) & 0x000f;
30779                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30780                                           ! Debug: expression subtree swapping
30781 7F9A           8B46         F0            mov	ax,-$10[bp]
30782 7F9D           D1E0                       shl	ax,*1
30783 7F9F           D1E0                       shl	ax,*1
30784                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30785 7FA1           89C3                       mov	bx,ax
30786 7FA3           8B46         F2            mov	ax,-$E[bp]
30787 7FA6           89D9                       mov	cx,bx
30788 7FA8           D3E8                       shr	ax,cl
30789                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30790 7FAA           24                     0F  and	al,*$F
30791                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30792 7FAC           30E4                       xor	ah,ah
30793 7FAE           8946         EE            mov	-$12[bp],ax
30794                                           !BCC_EOS
30795                                           ! 4459           if (nibble <= 9)
30796                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30797 7FB1           8B46         EE            mov	ax,-$12[bp]
30798 7FB4           3D                   0009  cmp	ax,*9
30799 7FB7           77           13            ja  	.2CF
30800                       00007FB9            .2D0:
30801                                           ! 4460             outb(0x0500, nibble + '0');
30802                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30803 7FB9           8B46         EE            mov	ax,-$12[bp]
30804                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30805 7FBC           05                   0030  add	ax,*$30
30806 7FBF           50                         push	ax
30807                                           ! Debug: list int = const $500 (used reg = )
30808 7FC0           B8                   0500  mov	ax,#$500
30809 7FC3           50                         push	ax
30810                                           ! Debug: func () void = outb+0 (used reg = )
30811 7FC4           E8         FF04            call	_outb
30812 7FC7           83C4                   04  add	sp,*4
30813                                           !BCC_EOS
30814                                           ! 4461           else
30815                                           ! 4462             outb(0x0500, (nibble - 10) + 'A');
30816 7FCA           EB           11            jmp .2D1
30817                       00007FCC            .2CF:
30818                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30819 7FCC           8B46         EE            mov	ax,-$12[bp]
30820                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30821                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30822 7FCF           05                   0037  add	ax,*$37
30823 7FD2           50                         push	ax
30824                                           ! Debug: list int = const $500 (used reg = )
30825 7FD3           B8                   0500  mov	ax,#$500
30826 7FD6           50                         push	ax
30827                                           ! Debug: func () void = outb+0 (used reg = )
30828 7FD7           E8         FEF1            call	_outb
30829 7FDA           83C4                   04  add	sp,*4
30830                                           !BCC_EOS
30831                                           ! 4463           digit--;
30832                       00007FDD            .2D1:
30833                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30834 7FDD           8B46         F0            mov	ax,-$10[bp]
30835 7FE0           48                         dec	ax
30836 7FE1           8946         F0            mov	-$10[bp],ax
30837                                           !BCC_EOS
30838                                           ! 4464           }
30839                                           ! 4465         in_format = 0;
30840                       00007FE4            .2CC:
30841                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30842 7FE4           8B46         F8            mov	ax,-8[bp]
30843 7FE7           40                         inc	ax
30844 7FE8           8946         F8            mov	-8[bp],ax
30845                       00007FEB            .2CD:
30846                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30847 7FEB           8B46         F8            mov	ax,-8[bp]
30848 7FEE           3B46         FA            cmp	ax,-6[bp]
30849 7FF1           72           A7            jb 	.2CE
30850                       00007FF3            .2D2:
30851                       00007FF3            .2CB:
30852                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30853 7FF3           31C0                       xor	ax,ax
30854 7FF5           8946         FC            mov	-4[bp],ax
30855                                           !BCC_EOS
30856                                           ! 4466         }
30857                                           ! 4467       }
30858                       00007FF8            .2C7:
30859                       00007FF8            .2C6:
30860                                           ! 4468     else {
30861 7FF8           EB           10            jmp .2D3
30862                       00007FFA            .2C1:
30863                                           ! 4469       outb(0x0500, c);
30864                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30865 7FFA           8A46         FF            mov	al,-1[bp]
30866 7FFD           30E4                       xor	ah,ah
30867 7FFF           50                         push	ax
30868                                           ! Debug: list int = const $500 (used reg = )
30869 8000           B8                   0500  mov	ax,#$500
30870 8003           50                         push	ax
30871                                           ! Debug: func () void = outb+0 (used reg = )
30872 8004           E8         FEC4            call	_outb
30873 8007           83C4                   04  add	sp,*4
30874                                           !BCC_EOS
30875                                           ! 4470       }
30876                                           ! 4471     s ++;
30877                       0000800A            .2D3:
30878                       0000800A            .2C0:
30879                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30880 800A           8B5E         04            mov	bx,4[bp]
30881 800D           43                         inc	bx
30882 800E           895E         04            mov	4[bp],bx
30883                                           !BCC_EOS
30884                                           ! 4472     }
30885                                           ! 4473 }
30886                       00008011            .2BC:
30887                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30888 8011           FF76         04            push	4[bp]
30889                                           ! Debug: list unsigned int = const $C000 (used reg = )
30890 8014           B8                   C000  mov	ax,#$C000
30891 8017           50                         push	ax
30892                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30893 8018           E8         FE44            call	_read_byte
30894 801B           83C4                   04  add	sp,*4
30895                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30896 801E           8846         FF            mov	-1[bp],al
30897 8021           84C0                       test	al,al
30898 8023         0F85         FEE6            bne 	.2BD
30899                       00008027            .2D4:
30900                       00008027            .2BB:
30901 8027           89EC                       mov	sp,bp
30902 8029           5D                         pop	bp
30903 802A           C3                         ret
30904                                           ! 4474 #asm
30905                                           !BCC_ASM
30906                       00000002            _printf.s	set	2
30907                                             ; get LFB address from PCI
30908                                             ; in - ax: PCI device vendor
30909                                             ; out - ax: LFB address (high 16 bit)
30910                                             ;; NOTE - may be called in protected mode
30911                       0000802B            _pci_get_lfb_addr:
30912 802B           53                           push bx
30913 802C           51                           push cx
30914 802D           52                           push dx
30915 802E     66    50                           push eax
30916 8030           89C3                           mov bx, ax
30917 8032           31C9                           xor cx, cx
30918 8034           B2                     00      mov dl, #0x00
30919 8036           E8         003D                call pci_read_reg
30920 8039           3D                   FFFF      cmp ax, #0xffff
30921 803C           74           12                jz pci_get_lfb_addr_fail
30922                       0000803E             pci_get_lfb_addr_next_dev:
30923 803E           B2                     00      mov dl, #0x00
30924 8040           E8         0033                call pci_read_reg
30925 8043           39D8                           cmp ax, bx ;; check vendor
30926 8045           74           0D                jz pci_get_lfb_addr_found
30927 8047           83C1                   08      add cx, #0x8
30928 804A           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30929 804E           72           EE                jb pci_get_lfb_addr_next_dev
30930                       00008050             pci_get_lfb_addr_fail:
30931 8050           31D2                           xor dx, dx ;; no LFB
30932 8052           EB           1A                jmp pci_get_lfb_addr_return
30933                       00008054             pci_get_lfb_addr_found:
30934 8054           B2                     10      mov dl, #0x10 ;; I/O space #0
30935 8056           E8         001D                call pci_read_reg
30936 8059           A9                   FFF1      test ax, #0xfff1
30937 805C           74           0A                jz pci_get_lfb_addr_success
30938 805E           B2                     14      mov dl, #0x14 ;; I/O space #1
30939 8060           E8         0013                call pci_read_reg
30940 8063           A9                   FFF1      test ax, #0xfff1
30941 8066           75           E8                jnz pci_get_lfb_addr_fail
30942                       00008068             pci_get_lfb_addr_success:
30943 8068     66    C1E8                   10      shr eax, #16
30944 806C           89C2                           mov dx, ax ;; LFB address
30945                       0000806E             pci_get_lfb_addr_return:
30946 806E     66    58                           pop eax
30947 8070           89D0                         mov ax, dx
30948 8072           5A                           pop dx
30949 8073           59                           pop cx
30950 8074           5B                           pop bx
30951 8075           C3                           ret
30952                                             ; read PCI register
30953                                             ; in - cx: device/function
30954                                             ; in - dl: register
30955                                             ; out - eax: value
30956                       00008076            pci_read_reg:
30957 8076     66    B8               00800000    mov eax, #0x00800000
30958 807C           89C8                         mov ax, cx
30959 807E     66    C1E0                   08    shl eax, #8
30960 8082           88D0                         mov al, dl
30961 8084           BA                   0CF8    mov dx, #0xcf8
30962 8087     66    EF                           out dx, eax
30963 8089           80C2                   04    add dl, #4
30964 808C     66    ED                           in eax, dx
30965 808E           C3                           ret
30966                                           ! 4534 endasm
30967                                           !BCC_ENDASM
30968                                           ! 4535 static ModeInfoListItem mode_info_list[]=
30969                                           ! Register BX used in function printf
30970                                           ! 4536 {
30971                                           
30972                       0000808F            _mode_info_list:
30973                                           ! 4537 { 0x0100,
30974 808F                      0100            .word	$100
30975                                           ! 4538 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30976 8091                      009B            .word	$9B
30977                                           ! 4539                           0x01 | 0x02 | 0x04,
30978 8093                        07            .byte	7
30979                                           ! 4540                           0,
30980 8094                        00            .byte	0
30981                                           ! 4541                           64,
30982 8095                      0040            .word	$40
30983                                           ! 4542                    64,
30984 8097                      0040            .word	$40
30985                                           ! 4543                        0xA000,
30986 8099                      A000            .word	$A000
30987                                           ! 4544                        0x0000,
30988 809B                      0000            .word	0
30989                                           ! 4545                       0,
30990 809D                      0000            .word	0
30991 809F                      0000            .word	0
30992                                           ! 4546                             640,
30993 80A1                      0280            .word	$280
30994                                           ! 4547                        640,
30995 80A3                      0280            .word	$280
30996                                           ! 4548                        400,
30997 80A5                      0190            .word	$190
30998                                           ! 4549                      8,
30999 80A7                        08            .byte	8
31000                                           ! 4550                      16,
31001 80A8                        10            .byte	$10
31002                                           ! 4551                           1,
31003 80A9                        01            .byte	1
31004                                           ! 4552                         8,
31005 80AA                        08            .byte	8
31006                                           ! 4553                          4,
31007 80AB                        04            .byte	4
31008                                           ! 4554                        0x04,
31009 80AC                        04            .byte	4
31010                                           ! 4555                     0,
31011 80AD                        00            .byte	0
31012                                           ! 4556                               64,
31013 80AE                        40            .byte	$40
31014                                           ! 4557                          0,
31015 80AF                        00            .byte	0
31016                                           ! 4558                        0,
31017 80B0                        00            .byte	0
31018                                           ! 4559                             0,
31019 80B1                        00            .byte	0
31020                                           ! 4560                          0,
31021 80B2                        00            .byte	0
31022                                           ! 4561                               0,
31023 80B3                        00            .byte	0
31024                                           ! 4562                         0,
31025 80B4                        00            .byte	0
31026                                           ! 4563                              0,
31027 80B5                        00            .byte	0
31028                                           ! 4564                         0,
31029 80B6                        00            .byte	0
31030                                           ! 4565                              0,
31031 80B7                        00            .byte	0
31032                                           ! 4566                                0,
31033 80B8                        00            .byte	0
31034                                           ! 4567               
31035                                           ! 4567          0xE0000000,
31036 80B9                      0000            .word	0
31037 80BB                      E000            .word	$E000
31038                                           ! 4568                               0,
31039 80BD                      0000            .word	0
31040 80BF                      0000            .word	0
31041                                           ! 4569                             0,
31042 80C1                      0000            .word	0
31043                                           ! 4570                                640,
31044 80C3                      0280            .word	$280
31045                                           ! 4571                             0,
31046 80C5                        00            .byte	0
31047                                           ! 4572                             0,
31048 80C6                        00            .byte	0
31049                                           ! 4573                           0,
31050 80C7                        00            .byte	0
31051                                           ! 4574                                0,
31052 80C8                        00            .byte	0
31053                                           ! 4575                             0,
31054 80C9                        00            .byte	0
31055                                           ! 4576                                  0,
31056 80CA                        00            .byte	0
31057                                           ! 4577                            0,
31058 80CB                        00            .byte	0
31059                                           ! 4578                                 0,
31060 80CC                        00            .byte	0
31061                                           ! 4579                            0,
31062 80CD                        00            .byte	0
31063                                           ! 4580                                 0,
31064 80CE                        00            .byte	0
31065                                           ! 4581                          0,
31066 80CF                      0000            .word	0
31067 80D1                      0000            .word	0
31068                                           ! 4582 } },
31069                                           ! 4583 { 0x0101,
31070 80D3                      0101            .word	$101
31071                                           ! 4584 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31072 80D5                      009B            .word	$9B
31073                                           ! 4585                           0x01 | 0x02 | 0x04,
31074 80D7                        07            .byte	7
31075                                           ! 4586                           0,
31076 80D8                        00            .byte	0
31077                                           ! 4587                           64,
31078 80D9                      0040            .word	$40
31079                                           ! 4588                    64,
31080 80DB                      0040            .word	$40
31081                                           ! 4589                        0xA000,
31082 80DD                      A000            .word	$A000
31083                                           ! 4590                        0x0000,
31084 80DF                      0000            .word	0
31085                                           ! 4591                       0,
31086 80E1                      0000            .word	0
31087 80E3                      0000            .word	0
31088                                           ! 4592                             640,
31089 80E5                      0280            .word	$280
31090                                           ! 4593                        640,
31091 80E7                      0280            .word	$280
31092                                           ! 4594                        480,
31093 80E9                      01E0            .word	$1E0
31094                                           ! 4595                      8,
31095 80EB                        08            .byte	8
31096                                           ! 4596                      16,
31097 80EC                        10            .byte	$10
31098                                           ! 4597                           1,
31099 80ED                        01            .byte	1
31100                                           ! 4598                         8,
31101 80EE                        08            .byte	8
31102                                           ! 4599                          5,
31103 80EF                        05            .byte	5
31104                                           ! 4600                        0x04,
31105 80F0                        04            .byte	4
31106                                           ! 4601                     0,
31107 80F1                        00            .byte	0
31108                                           ! 4602                               53,
31109 80F2                        35            .byte	$35
31110                                           ! 4603                          0,
31111 80F3                        00            .byte	0
31112                                           ! 4604                        0,
31113 80F4                        00            .byte	0
31114                                           ! 4605                             0,
31115 80F5                        00            .byte	0
31116                                           ! 4606                          0,
31117 80F6                        00            .byte	0
31118                                           ! 4607                               0,
31119 80F7                        00            .byte	0
31120                                           ! 4608                         0,
31121 80F8                        00            .byte	0
31122                                           ! 4609                              0,
31123 80F9                        00            .byte	0
31124                                           ! 4610                         0,
31125 80FA                        00            .byte	0
31126                                           ! 4611                              0,
31127 80FB                        00            .byte	0
31128                                           ! 4612                                0,
31129 80FC                        00            .byte	0
31130                                           ! 4613                        0xE0000000,
31131 80FD                      0000            .word	0
31132 80FF                      E000            .word	$E000
31133                                           ! 4614                               0,
31134 8101                      0000            .word	0
31135 8103                      0000            .word	0
31136                                           ! 4615                             0,
31137 8105                      0000            .word	0
31138                                           ! 4616                                640,
31139 8107                      0280            .word	$280
31140                                           ! 4617                             0,
31141 8109                        00            .byte	0
31142                                           ! 4618                             0,
31143 810A                        00            .byte	0
31144                                           ! 4619                           0,
31145 810B                        00            .byte	0
31146                                           ! 4620                                0,
31147 810C                        00            .byte	0
31148                                           ! 4621                             0,
31149 810D                        00            .byte	0
31150                                           ! 4622                                  0,
31151 810E                        00            .byte	0
31152                                           ! 4623                            0,
31153 810F                        00            .byte	0
31154                                           ! 4624                                 0,
31155 8110                        00            .byte	0
31156                                           ! 4625                            0,
31157 8111                        00            .byte	0
31158                                           ! 4626                                 0,
31159 8112                        00            .byte	0
31160                                           ! 4627                          0,
31161 8113                      0000            .word	0
31162 8115                      0000            .word	0
31163                                           ! 4628 } },
31164                                           ! 4629 { 0x0102,
31165 8117                      0102            .word	$102
31166                                           ! 4630 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31167 8119                      001F            .word	$1F
31168                                           ! 4631                           0x01 | 0x02 | 0x04,
31169 811B                        07            .byte	7
31170                                           ! 4632                           0,
31171 811C                        00            .byte	0
31172                                           ! 4633                           64,
31173 811D                      0040            .word	$40
31174                                           ! 4634                    64,
31175 811F                      0040            .word	$40
31176                                           ! 4635                      
31177                                           ! 4635   0xA000,
31178 8121                      A000            .word	$A000
31179                                           ! 4636                        0x0000,
31180 8123                      0000            .word	0
31181                                           ! 4637                       0,
31182 8125                      0000            .word	0
31183 8127                      0000            .word	0
31184                                           ! 4638                             100,
31185 8129                      0064            .word	$64
31186                                           ! 4639                        800,
31187 812B                      0320            .word	$320
31188                                           ! 4640                        600,
31189 812D                      0258            .word	$258
31190                                           ! 4641                      8,
31191 812F                        08            .byte	8
31192                                           ! 4642                      16,
31193 8130                        10            .byte	$10
31194                                           ! 4643                           4,
31195 8131                        04            .byte	4
31196                                           ! 4644                         4,
31197 8132                        04            .byte	4
31198                                           ! 4645                          1,
31199 8133                        01            .byte	1
31200                                           ! 4646                        0x03,
31201 8134                        03            .byte	3
31202                                           ! 4647                     0,
31203 8135                        00            .byte	0
31204                                           ! 4648                               68,
31205 8136                        44            .byte	$44
31206                                           ! 4649                          0,
31207 8137                        00            .byte	0
31208                                           ! 4650                        0,
31209 8138                        00            .byte	0
31210                                           ! 4651                             0,
31211 8139                        00            .byte	0
31212                                           ! 4652                          0,
31213 813A                        00            .byte	0
31214                                           ! 4653                               0,
31215 813B                        00            .byte	0
31216                                           ! 4654                         0,
31217 813C                        00            .byte	0
31218                                           ! 4655                              0,
31219 813D                        00            .byte	0
31220                                           ! 4656                         0,
31221 813E                        00            .byte	0
31222                                           ! 4657                              0,
31223 813F                        00            .byte	0
31224                                           ! 4658                                0,
31225 8140                        00            .byte	0
31226                                           ! 4659                        0,
31227 8141                      0000            .word	0
31228 8143                      0000            .word	0
31229                                           ! 4660                               0,
31230 8145                      0000            .word	0
31231 8147                      0000            .word	0
31232                                           ! 4661                             0,
31233 8149                      0000            .word	0
31234                                           ! 4662                                100,
31235 814B                      0064            .word	$64
31236                                           ! 4663                             0,
31237 814D                        00            .byte	0
31238                                           ! 4664                             0,
31239 814E                        00            .byte	0
31240                                           ! 4665                           0,
31241 814F                        00            .byte	0
31242                                           ! 4666                                0,
31243 8150                        00            .byte	0
31244                                           ! 4667                             0,
31245 8151                        00            .byte	0
31246                                           ! 4668                                  0,
31247 8152                        00            .byte	0
31248                                           ! 4669                            0,
31249 8153                        00            .byte	0
31250                                           ! 4670                                 0,
31251 8154                        00            .byte	0
31252                                           ! 4671                            0,
31253 8155                        00            .byte	0
31254                                           ! 4672                                 0,
31255 8156                        00            .byte	0
31256                                           ! 4673                          0,
31257 8157                      0000            .word	0
31258 8159                      0000            .word	0
31259                                           ! 4674 } },
31260                                           ! 4675 { 0x0103,
31261 815B                      0103            .word	$103
31262                                           ! 4676 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31263 815D                      009B            .word	$9B
31264                                           ! 4677                           0x01 | 0x02 | 0x04,
31265 815F                        07            .byte	7
31266                                           ! 4678                           0,
31267 8160                        00            .byte	0
31268                                           ! 4679                           64,
31269 8161                      0040            .word	$40
31270                                           ! 4680                    64,
31271 8163                      0040            .word	$40
31272                                           ! 4681                        0xA000,
31273 8165                      A000            .word	$A000
31274                                           ! 4682                        0x0000,
31275 8167                      0000            .word	0
31276                                           ! 4683                       0,
31277 8169                      0000            .word	0
31278 816B                      0000            .word	0
31279                                           ! 4684                             800,
31280 816D                      0320            .word	$320
31281                                           ! 4685                        800,
31282 816F                      0320            .word	$320
31283                                           ! 4686                        600,
31284 8171                      0258            .word	$258
31285                                           ! 4687                      8,
31286 8173                        08            .byte	8
31287                                           ! 4688                      16,
31288 8174                        10            .byte	$10
31289                                           ! 4689                           1,
31290 8175                        01            .byte	1
31291                                           ! 4690                         8,
31292 8176                        08            .byte	8
31293                                           ! 4691                          8,
31294 8177                        08            .byte	8
31295                                           ! 4692                        0x04,
31296 8178                        04            .byte	4
31297                                           ! 4693                     0,
31298 8179                        00            .byte	0
31299                                           ! 4694                               33,
31300 817A                        21            .byte	$21
31301                                           ! 4695                          0,
31302 817B                        00            .byte	0
31303                                           ! 4696                        0,
31304 817C                        00            .byte	0
31305                                           ! 4697                             0,
31306 817D                        00            .byte	0
31307                                           ! 4698                          0,
31308 817E                        00            .byte	0
31309                                           ! 4699                               0,
31310 817F                        00            .byte	0
31311                                           ! 4700                         0,
31312 8180                        00            .byte	0
31313                                           ! 4701                              0,
31314 8181                        00            .byte	0
31315                                           ! 4702                         0,
31316 8182                        00            .byte	0
31317                                           ! 4703                              0,
31318 8183                        00            .byte	0
31319                                           ! 4704                                0,
31320 8184                        00            .byte	0
31321                                           ! 4705                   
31322                                           ! 4705      0xE0000000,
31323 8185                      0000            .word	0
31324 8187                      E000            .word	$E000
31325                                           ! 4706                               0,
31326 8189                      0000            .word	0
31327 818B                      0000            .word	0
31328                                           ! 4707                             0,
31329 818D                      0000            .word	0
31330                                           ! 4708                                800,
31331 818F                      0320            .word	$320
31332                                           ! 4709                             0,
31333 8191                        00            .byte	0
31334                                           ! 4710                             0,
31335 8192                        00            .byte	0
31336                                           ! 4711                           0,
31337 8193                        00            .byte	0
31338                                           ! 4712                                0,
31339 8194                        00            .byte	0
31340                                           ! 4713                             0,
31341 8195                        00            .byte	0
31342                                           ! 4714                                  0,
31343 8196                        00            .byte	0
31344                                           ! 4715                            0,
31345 8197                        00            .byte	0
31346                                           ! 4716                                 0,
31347 8198                        00            .byte	0
31348                                           ! 4717                            0,
31349 8199                        00            .byte	0
31350                                           ! 4718                                 0,
31351 819A                        00            .byte	0
31352                                           ! 4719                          0,
31353 819B                      0000            .word	0
31354 819D                      0000            .word	0
31355                                           ! 4720 } },
31356                                           ! 4721 { 0x0104,
31357 819F                      0104            .word	$104
31358                                           ! 4722 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31359 81A1                      001F            .word	$1F
31360                                           ! 4723                           0x01 | 0x02 | 0x04,
31361 81A3                        07            .byte	7
31362                                           ! 4724                           0,
31363 81A4                        00            .byte	0
31364                                           ! 4725                           64,
31365 81A5                      0040            .word	$40
31366                                           ! 4726                    64,
31367 81A7                      0040            .word	$40
31368                                           ! 4727                        0xA000,
31369 81A9                      A000            .word	$A000
31370                                           ! 4728                        0x0000,
31371 81AB                      0000            .word	0
31372                                           ! 4729                       0,
31373 81AD                      0000            .word	0
31374 81AF                      0000            .word	0
31375                                           ! 4730                             128,
31376 81B1                      0080            .word	$80
31377                                           ! 4731                        1024,
31378 81B3                      0400            .word	$400
31379                                           ! 4732                        768,
31380 81B5                      0300            .word	$300
31381                                           ! 4733                      8,
31382 81B7                        08            .byte	8
31383                                           ! 4734                      16,
31384 81B8                        10            .byte	$10
31385                                           ! 4735                           4,
31386 81B9                        04            .byte	4
31387                                           ! 4736                         4,
31388 81BA                        04            .byte	4
31389                                           ! 4737                          2,
31390 81BB                        02            .byte	2
31391                                           ! 4738                        0x03,
31392 81BC                        03            .byte	3
31393                                           ! 4739                     0,
31394 81BD                        00            .byte	0
31395                                           ! 4740                               41,
31396 81BE                        29            .byte	$29
31397                                           ! 4741                          0,
31398 81BF                        00            .byte	0
31399                                           ! 4742                        0,
31400 81C0                        00            .byte	0
31401                                           ! 4743                             0,
31402 81C1                        00            .byte	0
31403                                           ! 4744                          0,
31404 81C2                        00            .byte	0
31405                                           ! 4745                               0,
31406 81C3                        00            .byte	0
31407                                           ! 4746                         0,
31408 81C4                        00            .byte	0
31409                                           ! 4747                              0,
31410 81C5                        00            .byte	0
31411                                           ! 4748                         0,
31412 81C6                        00            .byte	0
31413                                           ! 4749                              0,
31414 81C7                        00            .byte	0
31415                                           ! 4750                                0,
31416 81C8                        00            .byte	0
31417                                           ! 4751                        0,
31418 81C9                      0000            .word	0
31419 81CB                      0000            .word	0
31420                                           ! 4752                               0,
31421 81CD                      0000            .word	0
31422 81CF                      0000            .word	0
31423                                           ! 4753                             0,
31424 81D1                      0000            .word	0
31425                                           ! 4754                                128,
31426 81D3                      0080            .word	$80
31427                                           ! 4755                             0,
31428 81D5                        00            .byte	0
31429                                           ! 4756                             0,
31430 81D6                        00            .byte	0
31431                                           ! 4757                           0,
31432 81D7                        00            .byte	0
31433                                           ! 4758                                0,
31434 81D8                        00            .byte	0
31435                                           ! 4759                             0,
31436 81D9                        00            .byte	0
31437                                           ! 4760                                  0,
31438 81DA                        00            .byte	0
31439                                           ! 4761                            0,
31440 81DB                        00            .byte	0
31441                                           ! 4762                                 0,
31442 81DC                        00            .byte	0
31443                                           ! 4763                            0,
31444 81DD                        00            .byte	0
31445                                           ! 4764                                 0,
31446 81DE                        00            .byte	0
31447                                           ! 4765                          0,
31448 81DF                      0000            .word	0
31449 81E1                      0000            .word	0
31450                                           ! 4766 } },
31451                                           ! 4767 { 0x0105,
31452 81E3                      0105            .word	$105
31453                                           ! 4768 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31454 81E5                      009B            .word	$9B
31455                                           ! 4769                           0x01 | 0x02 | 0x04,
31456 81E7                        07            .byte	7
31457                                           ! 4770                           0,
31458 81E8                        00            .byte	0
31459                                           ! 4771                           64,
31460 81E9                      0040            .word	$40
31461                                           ! 4772                    64,
31462 81EB                      0040            .word	$40
31463                                           ! 4773                        0xA000,
31464 81ED                      A000            .word	$A000
31465                                           ! 4774   
31466                                           ! 4774                      0x0000,
31467 81EF                      0000            .word	0
31468                                           ! 4775                       0,
31469 81F1                      0000            .word	0
31470 81F3                      0000            .word	0
31471                                           ! 4776                             1024,
31472 81F5                      0400            .word	$400
31473                                           ! 4777                        1024,
31474 81F7                      0400            .word	$400
31475                                           ! 4778                        768,
31476 81F9                      0300            .word	$300
31477                                           ! 4779                      8,
31478 81FB                        08            .byte	8
31479                                           ! 4780                      16,
31480 81FC                        10            .byte	$10
31481                                           ! 4781                           1,
31482 81FD                        01            .byte	1
31483                                           ! 4782                         8,
31484 81FE                        08            .byte	8
31485                                           ! 4783                          12,
31486 81FF                        0C            .byte	$C
31487                                           ! 4784                        0x04,
31488 8200                        04            .byte	4
31489                                           ! 4785                     0,
31490 8201                        00            .byte	0
31491                                           ! 4786                               20,
31492 8202                        14            .byte	$14
31493                                           ! 4787                          0,
31494 8203                        00            .byte	0
31495                                           ! 4788                        0,
31496 8204                        00            .byte	0
31497                                           ! 4789                             0,
31498 8205                        00            .byte	0
31499                                           ! 4790                          0,
31500 8206                        00            .byte	0
31501                                           ! 4791                               0,
31502 8207                        00            .byte	0
31503                                           ! 4792                         0,
31504 8208                        00            .byte	0
31505                                           ! 4793                              0,
31506 8209                        00            .byte	0
31507                                           ! 4794                         0,
31508 820A                        00            .byte	0
31509                                           ! 4795                              0,
31510 820B                        00            .byte	0
31511                                           ! 4796                                0,
31512 820C                        00            .byte	0
31513                                           ! 4797                        0xE0000000,
31514 820D                      0000            .word	0
31515 820F                      E000            .word	$E000
31516                                           ! 4798                               0,
31517 8211                      0000            .word	0
31518 8213                      0000            .word	0
31519                                           ! 4799                             0,
31520 8215                      0000            .word	0
31521                                           ! 4800                                1024,
31522 8217                      0400            .word	$400
31523                                           ! 4801                             0,
31524 8219                        00            .byte	0
31525                                           ! 4802                             0,
31526 821A                        00            .byte	0
31527                                           ! 4803                           0,
31528 821B                        00            .byte	0
31529                                           ! 4804                                0,
31530 821C                        00            .byte	0
31531                                           ! 4805                             0,
31532 821D                        00            .byte	0
31533                                           ! 4806                                  0,
31534 821E                        00            .byte	0
31535                                           ! 4807                            0,
31536 821F                        00            .byte	0
31537                                           ! 4808                                 0,
31538 8220                        00            .byte	0
31539                                           ! 4809                            0,
31540 8221                        00            .byte	0
31541                                           ! 4810                                 0,
31542 8222                        00            .byte	0
31543                                           ! 4811                          0,
31544 8223                      0000            .word	0
31545 8225                      0000            .word	0
31546                                           ! 4812 } },
31547                                           ! 4813 { 0x0106,
31548 8227                      0106            .word	$106
31549                                           ! 4814 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31550 8229                      001F            .word	$1F
31551                                           ! 4815                           0x01 | 0x02 | 0x04,
31552 822B                        07            .byte	7
31553                                           ! 4816                           0,
31554 822C                        00            .byte	0
31555                                           ! 4817                           64,
31556 822D                      0040            .word	$40
31557                                           ! 4818                    64,
31558 822F                      0040            .word	$40
31559                                           ! 4819                        0xA000,
31560 8231                      A000            .word	$A000
31561                                           ! 4820                        0x0000,
31562 8233                      0000            .word	0
31563                                           ! 4821                       0,
31564 8235                      0000            .word	0
31565 8237                      0000            .word	0
31566                                           ! 4822                             160,
31567 8239                      00A0            .word	$A0
31568                                           ! 4823                        1280,
31569 823B                      0500            .word	$500
31570                                           ! 4824                        1024,
31571 823D                      0400            .word	$400
31572                                           ! 4825                      8,
31573 823F                        08            .byte	8
31574                                           ! 4826                      16,
31575 8240                        10            .byte	$10
31576                                           ! 4827                           4,
31577 8241                        04            .byte	4
31578                                           ! 4828                         4,
31579 8242                        04            .byte	4
31580                                           ! 4829                          3,
31581 8243                        03            .byte	3
31582                                           ! 4830                        0x03,
31583 8244                        03            .byte	3
31584                                           ! 4831                     0,
31585 8245                        00            .byte	0
31586                                           ! 4832                               24,
31587 8246                        18            .byte	$18
31588                                           ! 4833                          0,
31589 8247                        00            .byte	0
31590                                           ! 4834                        0,
31591 8248                        00            .byte	0
31592                                           ! 4835                             0,
31593 8249                        00            .byte	0
31594                                           ! 4836                          0,
31595 824A                        00            .byte	0
31596                                           ! 4837                               0,
31597 824B                        00            .byte	0
31598                                           ! 4838                         0,
31599 824C                        00            .byte	0
31600                                           ! 4839                              0,
31601 824D                        00            .byte	0
31602                                           ! 4840                         0,
31603 824E                        00            .byte	0
31604                                           ! 4841                              0,
31605 824F                        00            .byte	0
31606                                           ! 4842                                0,
31607 8250                        00            .byte	0
31608                                           ! 4843                
31609                                           ! 4843         0,
31610 8251                      0000            .word	0
31611 8253                      0000            .word	0
31612                                           ! 4844                               0,
31613 8255                      0000            .word	0
31614 8257                      0000            .word	0
31615                                           ! 4845                             0,
31616 8259                      0000            .word	0
31617                                           ! 4846                                160,
31618 825B                      00A0            .word	$A0
31619                                           ! 4847                             0,
31620 825D                        00            .byte	0
31621                                           ! 4848                             0,
31622 825E                        00            .byte	0
31623                                           ! 4849                           0,
31624 825F                        00            .byte	0
31625                                           ! 4850                                0,
31626 8260                        00            .byte	0
31627                                           ! 4851                             0,
31628 8261                        00            .byte	0
31629                                           ! 4852                                  0,
31630 8262                        00            .byte	0
31631                                           ! 4853                            0,
31632 8263                        00            .byte	0
31633                                           ! 4854                                 0,
31634 8264                        00            .byte	0
31635                                           ! 4855                            0,
31636 8265                        00            .byte	0
31637                                           ! 4856                                 0,
31638 8266                        00            .byte	0
31639                                           ! 4857                          0,
31640 8267                      0000            .word	0
31641 8269                      0000            .word	0
31642                                           ! 4858 } },
31643                                           ! 4859 { 0x0107,
31644 826B                      0107            .word	$107
31645                                           ! 4860 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31646 826D                      009B            .word	$9B
31647                                           ! 4861                           0x01 | 0x02 | 0x04,
31648 826F                        07            .byte	7
31649                                           ! 4862                           0,
31650 8270                        00            .byte	0
31651                                           ! 4863                           64,
31652 8271                      0040            .word	$40
31653                                           ! 4864                    64,
31654 8273                      0040            .word	$40
31655                                           ! 4865                        0xA000,
31656 8275                      A000            .word	$A000
31657                                           ! 4866                        0x0000,
31658 8277                      0000            .word	0
31659                                           ! 4867                       0,
31660 8279                      0000            .word	0
31661 827B                      0000            .word	0
31662                                           ! 4868                             1280,
31663 827D                      0500            .word	$500
31664                                           ! 4869                        1280,
31665 827F                      0500            .word	$500
31666                                           ! 4870                        1024,
31667 8281                      0400            .word	$400
31668                                           ! 4871                      8,
31669 8283                        08            .byte	8
31670                                           ! 4872                      16,
31671 8284                        10            .byte	$10
31672                                           ! 4873                           1,
31673 8285                        01            .byte	1
31674                                           ! 4874                         8,
31675 8286                        08            .byte	8
31676                                           ! 4875                          20,
31677 8287                        14            .byte	$14
31678                                           ! 4876                        0x04,
31679 8288                        04            .byte	4
31680                                           ! 4877                     0,
31681 8289                        00            .byte	0
31682                                           ! 4878                               11,
31683 828A                        0B            .byte	$B
31684                                           ! 4879                          0,
31685 828B                        00            .byte	0
31686                                           ! 4880                        0,
31687 828C                        00            .byte	0
31688                                           ! 4881                             0,
31689 828D                        00            .byte	0
31690                                           ! 4882                          0,
31691 828E                        00            .byte	0
31692                                           ! 4883                               0,
31693 828F                        00            .byte	0
31694                                           ! 4884                         0,
31695 8290                        00            .byte	0
31696                                           ! 4885                              0,
31697 8291                        00            .byte	0
31698                                           ! 4886                         0,
31699 8292                        00            .byte	0
31700                                           ! 4887                              0,
31701 8293                        00            .byte	0
31702                                           ! 4888                                0,
31703 8294                        00            .byte	0
31704                                           ! 4889                        0xE0000000,
31705 8295                      0000            .word	0
31706 8297                      E000            .word	$E000
31707                                           ! 4890                               0,
31708 8299                      0000            .word	0
31709 829B                      0000            .word	0
31710                                           ! 4891                             0,
31711 829D                      0000            .word	0
31712                                           ! 4892                                1280,
31713 829F                      0500            .word	$500
31714                                           ! 4893                             0,
31715 82A1                        00            .byte	0
31716                                           ! 4894                             0,
31717 82A2                        00            .byte	0
31718                                           ! 4895                           0,
31719 82A3                        00            .byte	0
31720                                           ! 4896                                0,
31721 82A4                        00            .byte	0
31722                                           ! 4897                             0,
31723 82A5                        00            .byte	0
31724                                           ! 4898                                  0,
31725 82A6                        00            .byte	0
31726                                           ! 4899                            0,
31727 82A7                        00            .byte	0
31728                                           ! 4900                                 0,
31729 82A8                        00            .byte	0
31730                                           ! 4901                            0,
31731 82A9                        00            .byte	0
31732                                           ! 4902                                 0,
31733 82AA                        00            .byte	0
31734                                           ! 4903                          0,
31735 82AB                      0000            .word	0
31736 82AD                      0000            .word	0
31737                                           ! 4904 } },
31738                                           ! 4905 { 0x010d,
31739 82AF                      010D            .word	$10D
31740                                           ! 4906 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31741 82B1                      009B            .word	$9B
31742                                           ! 4907                           0x01 | 0x02 | 0x04,
31743 82B3                        07            .byte	7
31744                                           ! 4908                           0,
31745 82B4                        00            .byte	0
31746                                           ! 4909                           64,
31747 82B5                      0040            .word	$40
31748                                           ! 4910                    64,
31749 82B7                      0040            .word	$40
31750                                           ! 4911                        0xA
31751                                           ! 4911 000,
31752 82B9                      A000            .word	$A000
31753                                           ! 4912                        0x0000,
31754 82BB                      0000            .word	0
31755                                           ! 4913                       0,
31756 82BD                      0000            .word	0
31757 82BF                      0000            .word	0
31758                                           ! 4914                             640,
31759 82C1                      0280            .word	$280
31760                                           ! 4915                        320,
31761 82C3                      0140            .word	$140
31762                                           ! 4916                        200,
31763 82C5                      00C8            .word	$C8
31764                                           ! 4917                      8,
31765 82C7                        08            .byte	8
31766                                           ! 4918                      16,
31767 82C8                        10            .byte	$10
31768                                           ! 4919                           1,
31769 82C9                        01            .byte	1
31770                                           ! 4920                         15,
31771 82CA                        0F            .byte	$F
31772                                           ! 4921                          2,
31773 82CB                        02            .byte	2
31774                                           ! 4922                        0x06,
31775 82CC                        06            .byte	6
31776                                           ! 4923                     0,
31777 82CD                        00            .byte	0
31778                                           ! 4924                               130,
31779 82CE                        82            .byte	$82
31780                                           ! 4925                          0,
31781 82CF                        00            .byte	0
31782                                           ! 4926                        5,
31783 82D0                        05            .byte	5
31784                                           ! 4927                             10,
31785 82D1                        0A            .byte	$A
31786                                           ! 4928                          5,
31787 82D2                        05            .byte	5
31788                                           ! 4929                               5,
31789 82D3                        05            .byte	5
31790                                           ! 4930                         5,
31791 82D4                        05            .byte	5
31792                                           ! 4931                              0,
31793 82D5                        00            .byte	0
31794                                           ! 4932                         1,
31795 82D6                        01            .byte	1
31796                                           ! 4933                              15,
31797 82D7                        0F            .byte	$F
31798                                           ! 4934                                0,
31799 82D8                        00            .byte	0
31800                                           ! 4935                        0xE0000000,
31801 82D9                      0000            .word	0
31802 82DB                      E000            .word	$E000
31803                                           ! 4936                               0,
31804 82DD                      0000            .word	0
31805 82DF                      0000            .word	0
31806                                           ! 4937                             0,
31807 82E1                      0000            .word	0
31808                                           ! 4938                                640,
31809 82E3                      0280            .word	$280
31810                                           ! 4939                             0,
31811 82E5                        00            .byte	0
31812                                           ! 4940                             0,
31813 82E6                        00            .byte	0
31814                                           ! 4941                           5,
31815 82E7                        05            .byte	5
31816                                           ! 4942                                10,
31817 82E8                        0A            .byte	$A
31818                                           ! 4943                             5,
31819 82E9                        05            .byte	5
31820                                           ! 4944                                  5,
31821 82EA                        05            .byte	5
31822                                           ! 4945                            5,
31823 82EB                        05            .byte	5
31824                                           ! 4946                                 0,
31825 82EC                        00            .byte	0
31826                                           ! 4947                            1,
31827 82ED                        01            .byte	1
31828                                           ! 4948                                 15,
31829 82EE                        0F            .byte	$F
31830                                           ! 4949                          0,
31831 82EF                      0000            .word	0
31832 82F1                      0000            .word	0
31833                                           ! 4950 } },
31834                                           ! 4951 { 0x010e,
31835 82F3                      010E            .word	$10E
31836                                           ! 4952 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31837 82F5                      009B            .word	$9B
31838                                           ! 4953                           0x01 | 0x02 | 0x04,
31839 82F7                        07            .byte	7
31840                                           ! 4954                           0,
31841 82F8                        00            .byte	0
31842                                           ! 4955                           64,
31843 82F9                      0040            .word	$40
31844                                           ! 4956                    64,
31845 82FB                      0040            .word	$40
31846                                           ! 4957                        0xA000,
31847 82FD                      A000            .word	$A000
31848                                           ! 4958                        0x0000,
31849 82FF                      0000            .word	0
31850                                           ! 4959                       0,
31851 8301                      0000            .word	0
31852 8303                      0000            .word	0
31853                                           ! 4960                             640,
31854 8305                      0280            .word	$280
31855                                           ! 4961                        320,
31856 8307                      0140            .word	$140
31857                                           ! 4962                        200,
31858 8309                      00C8            .word	$C8
31859                                           ! 4963                      8,
31860 830B                        08            .byte	8
31861                                           ! 4964                      16,
31862 830C                        10            .byte	$10
31863                                           ! 4965                           1,
31864 830D                        01            .byte	1
31865                                           ! 4966                         16,
31866 830E                        10            .byte	$10
31867                                           ! 4967                          2,
31868 830F                        02            .byte	2
31869                                           ! 4968                        0x06,
31870 8310                        06            .byte	6
31871                                           ! 4969                     0,
31872 8311                        00            .byte	0
31873                                           ! 4970                               130,
31874 8312                        82            .byte	$82
31875                                           ! 4971                          0,
31876 8313                        00            .byte	0
31877                                           ! 4972                        5,
31878 8314                        05            .byte	5
31879                                           ! 4973                             11,
31880 8315                        0B            .byte	$B
31881                                           ! 4974                          6,
31882 8316                        06            .byte	6
31883                                           ! 4975                               5,
31884 8317                        05            .byte	5
31885                                           ! 4976                         5,
31886 8318                        05            .byte	5
31887                                           ! 4977                              0,
31888 8319                        00            .byte	0
31889                                           ! 4978                         0,
31890 831A                        00            .byte	0
31891                                           ! 4979                              0,
31892 831B                        00            .byte	0
31893                                           ! 4980                                0,
31894 831C                        00            .byte	0
31895                                           ! 4981      
31896                                           ! 4981                   0xE0000000,
31897 831D                      0000            .word	0
31898 831F                      E000            .word	$E000
31899                                           ! 4982                               0,
31900 8321                      0000            .word	0
31901 8323                      0000            .word	0
31902                                           ! 4983                             0,
31903 8325                      0000            .word	0
31904                                           ! 4984                                640,
31905 8327                      0280            .word	$280
31906                                           ! 4985                             0,
31907 8329                        00            .byte	0
31908                                           ! 4986                             0,
31909 832A                        00            .byte	0
31910                                           ! 4987                           5,
31911 832B                        05            .byte	5
31912                                           ! 4988                                11,
31913 832C                        0B            .byte	$B
31914                                           ! 4989                             6,
31915 832D                        06            .byte	6
31916                                           ! 4990                                  5,
31917 832E                        05            .byte	5
31918                                           ! 4991                            5,
31919 832F                        05            .byte	5
31920                                           ! 4992                                 0,
31921 8330                        00            .byte	0
31922                                           ! 4993                            0,
31923 8331                        00            .byte	0
31924                                           ! 4994                                 0,
31925 8332                        00            .byte	0
31926                                           ! 4995                          0,
31927 8333                      0000            .word	0
31928 8335                      0000            .word	0
31929                                           ! 4996 } },
31930                                           ! 4997 { 0x010f,
31931 8337                      010F            .word	$10F
31932                                           ! 4998 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31933 8339                      009B            .word	$9B
31934                                           ! 4999                           0x01 | 0x02 | 0x04,
31935 833B                        07            .byte	7
31936                                           ! 5000                           0,
31937 833C                        00            .byte	0
31938                                           ! 5001                           64,
31939 833D                      0040            .word	$40
31940                                           ! 5002                    64,
31941 833F                      0040            .word	$40
31942                                           ! 5003                        0xA000,
31943 8341                      A000            .word	$A000
31944                                           ! 5004                        0x0000,
31945 8343                      0000            .word	0
31946                                           ! 5005                       0,
31947 8345                      0000            .word	0
31948 8347                      0000            .word	0
31949                                           ! 5006                             960,
31950 8349                      03C0            .word	$3C0
31951                                           ! 5007                        320,
31952 834B                      0140            .word	$140
31953                                           ! 5008                        200,
31954 834D                      00C8            .word	$C8
31955                                           ! 5009                      8,
31956 834F                        08            .byte	8
31957                                           ! 5010                      16,
31958 8350                        10            .byte	$10
31959                                           ! 5011                           1,
31960 8351                        01            .byte	1
31961                                           ! 5012                         24,
31962 8352                        18            .byte	$18
31963                                           ! 5013                          3,
31964 8353                        03            .byte	3
31965                                           ! 5014                        0x06,
31966 8354                        06            .byte	6
31967                                           ! 5015                     0,
31968 8355                        00            .byte	0
31969                                           ! 5016                               86,
31970 8356                        56            .byte	$56
31971                                           ! 5017                          0,
31972 8357                        00            .byte	0
31973                                           ! 5018                        8,
31974 8358                        08            .byte	8
31975                                           ! 5019                             16,
31976 8359                        10            .byte	$10
31977                                           ! 5020                          8,
31978 835A                        08            .byte	8
31979                                           ! 5021                               8,
31980 835B                        08            .byte	8
31981                                           ! 5022                         8,
31982 835C                        08            .byte	8
31983                                           ! 5023                              0,
31984 835D                        00            .byte	0
31985                                           ! 5024                         0,
31986 835E                        00            .byte	0
31987                                           ! 5025                              0,
31988 835F                        00            .byte	0
31989                                           ! 5026                                0,
31990 8360                        00            .byte	0
31991                                           ! 5027                        0xE0000000,
31992 8361                      0000            .word	0
31993 8363                      E000            .word	$E000
31994                                           ! 5028                               0,
31995 8365                      0000            .word	0
31996 8367                      0000            .word	0
31997                                           ! 5029                             0,
31998 8369                      0000            .word	0
31999                                           ! 5030                                960,
32000 836B                      03C0            .word	$3C0
32001                                           ! 5031                             0,
32002 836D                        00            .byte	0
32003                                           ! 5032                             0,
32004 836E                        00            .byte	0
32005                                           ! 5033                           8,
32006 836F                        08            .byte	8
32007                                           ! 5034                                16,
32008 8370                        10            .byte	$10
32009                                           ! 5035                             8,
32010 8371                        08            .byte	8
32011                                           ! 5036                                  8,
32012 8372                        08            .byte	8
32013                                           ! 5037                            8,
32014 8373                        08            .byte	8
32015                                           ! 5038                                 0,
32016 8374                        00            .byte	0
32017                                           ! 5039                            0,
32018 8375                        00            .byte	0
32019                                           ! 5040                                 0,
32020 8376                        00            .byte	0
32021                                           ! 5041                          0,
32022 8377                      0000            .word	0
32023 8379                      0000            .word	0
32024                                           ! 5042 } },
32025                                           ! 5043 { 0x0110,
32026 837B                      0110            .word	$110
32027                                           ! 5044 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32028 837D                      009B            .word	$9B
32029                                           ! 5045                           0x01 | 0x02 | 0x04,
32030 837F                        07            .byte	7
32031                                           ! 5046                           0,
32032 8380                        00            .byte	0
32033                                           ! 5047                           64,
32034 8381                      0040            .word	$40
32035                                           ! 5048                    64,
32036 8383                      0040            .word	$40
32037                                           ! 5049         
32038                                           ! 5049                0xA000,
32039 8385                      A000            .word	$A000
32040                                           ! 5050                        0x0000,
32041 8387                      0000            .word	0
32042                                           ! 5051                       0,
32043 8389                      0000            .word	0
32044 838B                      0000            .word	0
32045                                           ! 5052                             1280,
32046 838D                      0500            .word	$500
32047                                           ! 5053                        640,
32048 838F                      0280            .word	$280
32049                                           ! 5054                        480,
32050 8391                      01E0            .word	$1E0
32051                                           ! 5055                      8,
32052 8393                        08            .byte	8
32053                                           ! 5056                      16,
32054 8394                        10            .byte	$10
32055                                           ! 5057                           1,
32056 8395                        01            .byte	1
32057                                           ! 5058                         15,
32058 8396                        0F            .byte	$F
32059                                           ! 5059                          10,
32060 8397                        0A            .byte	$A
32061                                           ! 5060                        0x06,
32062 8398                        06            .byte	6
32063                                           ! 5061                     0,
32064 8399                        00            .byte	0
32065                                           ! 5062                               26,
32066 839A                        1A            .byte	$1A
32067                                           ! 5063                          0,
32068 839B                        00            .byte	0
32069                                           ! 5064                        5,
32070 839C                        05            .byte	5
32071                                           ! 5065                             10,
32072 839D                        0A            .byte	$A
32073                                           ! 5066                          5,
32074 839E                        05            .byte	5
32075                                           ! 5067                               5,
32076 839F                        05            .byte	5
32077                                           ! 5068                         5,
32078 83A0                        05            .byte	5
32079                                           ! 5069                              0,
32080 83A1                        00            .byte	0
32081                                           ! 5070                         1,
32082 83A2                        01            .byte	1
32083                                           ! 5071                              15,
32084 83A3                        0F            .byte	$F
32085                                           ! 5072                                0,
32086 83A4                        00            .byte	0
32087                                           ! 5073                        0xE0000000,
32088 83A5                      0000            .word	0
32089 83A7                      E000            .word	$E000
32090                                           ! 5074                               0,
32091 83A9                      0000            .word	0
32092 83AB                      0000            .word	0
32093                                           ! 5075                             0,
32094 83AD                      0000            .word	0
32095                                           ! 5076                                1280,
32096 83AF                      0500            .word	$500
32097                                           ! 5077                             0,
32098 83B1                        00            .byte	0
32099                                           ! 5078                             0,
32100 83B2                        00            .byte	0
32101                                           ! 5079                           5,
32102 83B3                        05            .byte	5
32103                                           ! 5080                                10,
32104 83B4                        0A            .byte	$A
32105                                           ! 5081                             5,
32106 83B5                        05            .byte	5
32107                                           ! 5082                                  5,
32108 83B6                        05            .byte	5
32109                                           ! 5083                            5,
32110 83B7                        05            .byte	5
32111                                           ! 5084                                 0,
32112 83B8                        00            .byte	0
32113                                           ! 5085                            1,
32114 83B9                        01            .byte	1
32115                                           ! 5086                                 15,
32116 83BA                        0F            .byte	$F
32117                                           ! 5087                          0,
32118 83BB                      0000            .word	0
32119 83BD                      0000            .word	0
32120                                           ! 5088 } },
32121                                           ! 5089 { 0x0111,
32122 83BF                      0111            .word	$111
32123                                           ! 5090 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32124 83C1                      009B            .word	$9B
32125                                           ! 5091                           0x01 | 0x02 | 0x04,
32126 83C3                        07            .byte	7
32127                                           ! 5092                           0,
32128 83C4                        00            .byte	0
32129                                           ! 5093                           64,
32130 83C5                      0040            .word	$40
32131                                           ! 5094                    64,
32132 83C7                      0040            .word	$40
32133                                           ! 5095                        0xA000,
32134 83C9                      A000            .word	$A000
32135                                           ! 5096                        0x0000,
32136 83CB                      0000            .word	0
32137                                           ! 5097                       0,
32138 83CD                      0000            .word	0
32139 83CF                      0000            .word	0
32140                                           ! 5098                             1280,
32141 83D1                      0500            .word	$500
32142                                           ! 5099                        640,
32143 83D3                      0280            .word	$280
32144                                           ! 5100                        480,
32145 83D5                      01E0            .word	$1E0
32146                                           ! 5101                      8,
32147 83D7                        08            .byte	8
32148                                           ! 5102                      16,
32149 83D8                        10            .byte	$10
32150                                           ! 5103                           1,
32151 83D9                        01            .byte	1
32152                                           ! 5104                         16,
32153 83DA                        10            .byte	$10
32154                                           ! 5105                          10,
32155 83DB                        0A            .byte	$A
32156                                           ! 5106                        0x06,
32157 83DC                        06            .byte	6
32158                                           ! 5107                     0,
32159 83DD                        00            .byte	0
32160                                           ! 5108                               26,
32161 83DE                        1A            .byte	$1A
32162                                           ! 5109                          0,
32163 83DF                        00            .byte	0
32164                                           ! 5110                        5,
32165 83E0                        05            .byte	5
32166                                           ! 5111                             11,
32167 83E1                        0B            .byte	$B
32168                                           ! 5112                          6,
32169 83E2                        06            .byte	6
32170                                           ! 5113                               5,
32171 83E3                        05            .byte	5
32172                                           ! 5114                         5,
32173 83E4                        05            .byte	5
32174                                           ! 5115                              0,
32175 83E5                        00            .byte	0
32176                                           ! 5116                         0,
32177 83E6                        00            .byte	0
32178                                           ! 5117                              0,
32179 83E7                        00            .byte	0
32180                                           ! 5118                   
32181                                           ! 5118              0,
32182 83E8                        00            .byte	0
32183                                           ! 5119                        0xE0000000,
32184 83E9                      0000            .word	0
32185 83EB                      E000            .word	$E000
32186                                           ! 5120                               0,
32187 83ED                      0000            .word	0
32188 83EF                      0000            .word	0
32189                                           ! 5121                             0,
32190 83F1                      0000            .word	0
32191                                           ! 5122                                1280,
32192 83F3                      0500            .word	$500
32193                                           ! 5123                             0,
32194 83F5                        00            .byte	0
32195                                           ! 5124                             0,
32196 83F6                        00            .byte	0
32197                                           ! 5125                           5,
32198 83F7                        05            .byte	5
32199                                           ! 5126                                11,
32200 83F8                        0B            .byte	$B
32201                                           ! 5127                             6,
32202 83F9                        06            .byte	6
32203                                           ! 5128                                  5,
32204 83FA                        05            .byte	5
32205                                           ! 5129                            5,
32206 83FB                        05            .byte	5
32207                                           ! 5130                                 0,
32208 83FC                        00            .byte	0
32209                                           ! 5131                            0,
32210 83FD                        00            .byte	0
32211                                           ! 5132                                 0,
32212 83FE                        00            .byte	0
32213                                           ! 5133                          0,
32214 83FF                      0000            .word	0
32215 8401                      0000            .word	0
32216                                           ! 5134 } },
32217                                           ! 5135 { 0x0112,
32218 8403                      0112            .word	$112
32219                                           ! 5136 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32220 8405                      009B            .word	$9B
32221                                           ! 5137                           0x01 | 0x02 | 0x04,
32222 8407                        07            .byte	7
32223                                           ! 5138                           0,
32224 8408                        00            .byte	0
32225                                           ! 5139                           64,
32226 8409                      0040            .word	$40
32227                                           ! 5140                    64,
32228 840B                      0040            .word	$40
32229                                           ! 5141                        0xA000,
32230 840D                      A000            .word	$A000
32231                                           ! 5142                        0x0000,
32232 840F                      0000            .word	0
32233                                           ! 5143                       0,
32234 8411                      0000            .word	0
32235 8413                      0000            .word	0
32236                                           ! 5144                             1920,
32237 8415                      0780            .word	$780
32238                                           ! 5145                        640,
32239 8417                      0280            .word	$280
32240                                           ! 5146                        480,
32241 8419                      01E0            .word	$1E0
32242                                           ! 5147                      8,
32243 841B                        08            .byte	8
32244                                           ! 5148                      16,
32245 841C                        10            .byte	$10
32246                                           ! 5149                           1,
32247 841D                        01            .byte	1
32248                                           ! 5150                         24,
32249 841E                        18            .byte	$18
32250                                           ! 5151                          15,
32251 841F                        0F            .byte	$F
32252                                           ! 5152                        0x06,
32253 8420                        06            .byte	6
32254                                           ! 5153                     0,
32255 8421                        00            .byte	0
32256                                           ! 5154                               17,
32257 8422                        11            .byte	$11
32258                                           ! 5155                          0,
32259 8423                        00            .byte	0
32260                                           ! 5156                        8,
32261 8424                        08            .byte	8
32262                                           ! 5157                             16,
32263 8425                        10            .byte	$10
32264                                           ! 5158                          8,
32265 8426                        08            .byte	8
32266                                           ! 5159                               8,
32267 8427                        08            .byte	8
32268                                           ! 5160                         8,
32269 8428                        08            .byte	8
32270                                           ! 5161                              0,
32271 8429                        00            .byte	0
32272                                           ! 5162                         0,
32273 842A                        00            .byte	0
32274                                           ! 5163                              0,
32275 842B                        00            .byte	0
32276                                           ! 5164                                0,
32277 842C                        00            .byte	0
32278                                           ! 5165                        0xE0000000,
32279 842D                      0000            .word	0
32280 842F                      E000            .word	$E000
32281                                           ! 5166                               0,
32282 8431                      0000            .word	0
32283 8433                      0000            .word	0
32284                                           ! 5167                             0,
32285 8435                      0000            .word	0
32286                                           ! 5168                                1920,
32287 8437                      0780            .word	$780
32288                                           ! 5169                             0,
32289 8439                        00            .byte	0
32290                                           ! 5170                             0,
32291 843A                        00            .byte	0
32292                                           ! 5171                           8,
32293 843B                        08            .byte	8
32294                                           ! 5172                                16,
32295 843C                        10            .byte	$10
32296                                           ! 5173                             8,
32297 843D                        08            .byte	8
32298                                           ! 5174                                  8,
32299 843E                        08            .byte	8
32300                                           ! 5175                            8,
32301 843F                        08            .byte	8
32302                                           ! 5176                                 0,
32303 8440                        00            .byte	0
32304                                           ! 5177                            0,
32305 8441                        00            .byte	0
32306                                           ! 5178                                 0,
32307 8442                        00            .byte	0
32308                                           ! 5179                          0,
32309 8443                      0000            .word	0
32310 8445                      0000            .word	0
32311                                           ! 5180 } },
32312                                           ! 5181 { 0x0113,
32313 8447                      0113            .word	$113
32314                                           ! 5182 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32315 8449                      009B            .word	$9B
32316                                           ! 5183                           0x01 | 0x02 | 0x04,
32317 844B                        07            .byte	7
32318                                           ! 5184                           0,
32319 844C                        00            .byte	0
32320                                           ! 5185                           64,
32321 844D                      0040            .word	$40
32322                                           ! 5186       
32323                                           ! 5186              64,
32324 844F                      0040            .word	$40
32325                                           ! 5187                        0xA000,
32326 8451                      A000            .word	$A000
32327                                           ! 5188                        0x0000,
32328 8453                      0000            .word	0
32329                                           ! 5189                       0,
32330 8455                      0000            .word	0
32331 8457                      0000            .word	0
32332                                           ! 5190                             1600,
32333 8459                      0640            .word	$640
32334                                           ! 5191                        800,
32335 845B                      0320            .word	$320
32336                                           ! 5192                        600,
32337 845D                      0258            .word	$258
32338                                           ! 5193                      8,
32339 845F                        08            .byte	8
32340                                           ! 5194                      16,
32341 8460                        10            .byte	$10
32342                                           ! 5195                           1,
32343 8461                        01            .byte	1
32344                                           ! 5196                         15,
32345 8462                        0F            .byte	$F
32346                                           ! 5197                          15,
32347 8463                        0F            .byte	$F
32348                                           ! 5198                        0x06,
32349 8464                        06            .byte	6
32350                                           ! 5199                     0,
32351 8465                        00            .byte	0
32352                                           ! 5200                               16,
32353 8466                        10            .byte	$10
32354                                           ! 5201                          0,
32355 8467                        00            .byte	0
32356                                           ! 5202                        5,
32357 8468                        05            .byte	5
32358                                           ! 5203                             10,
32359 8469                        0A            .byte	$A
32360                                           ! 5204                          5,
32361 846A                        05            .byte	5
32362                                           ! 5205                               5,
32363 846B                        05            .byte	5
32364                                           ! 5206                         5,
32365 846C                        05            .byte	5
32366                                           ! 5207                              0,
32367 846D                        00            .byte	0
32368                                           ! 5208                         1,
32369 846E                        01            .byte	1
32370                                           ! 5209                              15,
32371 846F                        0F            .byte	$F
32372                                           ! 5210                                0,
32373 8470                        00            .byte	0
32374                                           ! 5211                        0xE0000000,
32375 8471                      0000            .word	0
32376 8473                      E000            .word	$E000
32377                                           ! 5212                               0,
32378 8475                      0000            .word	0
32379 8477                      0000            .word	0
32380                                           ! 5213                             0,
32381 8479                      0000            .word	0
32382                                           ! 5214                                1600,
32383 847B                      0640            .word	$640
32384                                           ! 5215                             0,
32385 847D                        00            .byte	0
32386                                           ! 5216                             0,
32387 847E                        00            .byte	0
32388                                           ! 5217                           5,
32389 847F                        05            .byte	5
32390                                           ! 5218                                10,
32391 8480                        0A            .byte	$A
32392                                           ! 5219                             5,
32393 8481                        05            .byte	5
32394                                           ! 5220                                  5,
32395 8482                        05            .byte	5
32396                                           ! 5221                            5,
32397 8483                        05            .byte	5
32398                                           ! 5222                                 0,
32399 8484                        00            .byte	0
32400                                           ! 5223                            1,
32401 8485                        01            .byte	1
32402                                           ! 5224                                 15,
32403 8486                        0F            .byte	$F
32404                                           ! 5225                          0,
32405 8487                      0000            .word	0
32406 8489                      0000            .word	0
32407                                           ! 5226 } },
32408                                           ! 5227 { 0x0114,
32409 848B                      0114            .word	$114
32410                                           ! 5228 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32411 848D                      009B            .word	$9B
32412                                           ! 5229                           0x01 | 0x02 | 0x04,
32413 848F                        07            .byte	7
32414                                           ! 5230                           0,
32415 8490                        00            .byte	0
32416                                           ! 5231                           64,
32417 8491                      0040            .word	$40
32418                                           ! 5232                    64,
32419 8493                      0040            .word	$40
32420                                           ! 5233                        0xA000,
32421 8495                      A000            .word	$A000
32422                                           ! 5234                        0x0000,
32423 8497                      0000            .word	0
32424                                           ! 5235                       0,
32425 8499                      0000            .word	0
32426 849B                      0000            .word	0
32427                                           ! 5236                             1600,
32428 849D                      0640            .word	$640
32429                                           ! 5237                        800,
32430 849F                      0320            .word	$320
32431                                           ! 5238                        600,
32432 84A1                      0258            .word	$258
32433                                           ! 5239                      8,
32434 84A3                        08            .byte	8
32435                                           ! 5240                      16,
32436 84A4                        10            .byte	$10
32437                                           ! 5241                           1,
32438 84A5                        01            .byte	1
32439                                           ! 5242                         16,
32440 84A6                        10            .byte	$10
32441                                           ! 5243                          15,
32442 84A7                        0F            .byte	$F
32443                                           ! 5244                        0x06,
32444 84A8                        06            .byte	6
32445                                           ! 5245                     0,
32446 84A9                        00            .byte	0
32447                                           ! 5246                               16,
32448 84AA                        10            .byte	$10
32449                                           ! 5247                          0,
32450 84AB                        00            .byte	0
32451                                           ! 5248                        5,
32452 84AC                        05            .byte	5
32453                                           ! 5249                             11,
32454 84AD                        0B            .byte	$B
32455                                           ! 5250                          6,
32456 84AE                        06            .byte	6
32457                                           ! 5251                               5,
32458 84AF                        05            .byte	5
32459                                           ! 5252                         5,
32460 84B0                        05            .byte	5
32461                                           ! 5253                              0,
32462 84B1                        00            .byte	0
32463                                           ! 5254                         0,
32464 84B2                        00            .byte	0
32465                                           ! 5255                          
32466                                           ! 5255     0,
32467 84B3                        00            .byte	0
32468                                           ! 5256                                0,
32469 84B4                        00            .byte	0
32470                                           ! 5257                        0xE0000000,
32471 84B5                      0000            .word	0
32472 84B7                      E000            .word	$E000
32473                                           ! 5258                               0,
32474 84B9                      0000            .word	0
32475 84BB                      0000            .word	0
32476                                           ! 5259                             0,
32477 84BD                      0000            .word	0
32478                                           ! 5260                                1600,
32479 84BF                      0640            .word	$640
32480                                           ! 5261                             0,
32481 84C1                        00            .byte	0
32482                                           ! 5262                             0,
32483 84C2                        00            .byte	0
32484                                           ! 5263                           5,
32485 84C3                        05            .byte	5
32486                                           ! 5264                                11,
32487 84C4                        0B            .byte	$B
32488                                           ! 5265                             6,
32489 84C5                        06            .byte	6
32490                                           ! 5266                                  5,
32491 84C6                        05            .byte	5
32492                                           ! 5267                            5,
32493 84C7                        05            .byte	5
32494                                           ! 5268                                 0,
32495 84C8                        00            .byte	0
32496                                           ! 5269                            0,
32497 84C9                        00            .byte	0
32498                                           ! 5270                                 0,
32499 84CA                        00            .byte	0
32500                                           ! 5271                          0,
32501 84CB                      0000            .word	0
32502 84CD                      0000            .word	0
32503                                           ! 5272 } },
32504                                           ! 5273 { 0x0115,
32505 84CF                      0115            .word	$115
32506                                           ! 5274 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32507 84D1                      009B            .word	$9B
32508                                           ! 5275                           0x01 | 0x02 | 0x04,
32509 84D3                        07            .byte	7
32510                                           ! 5276                           0,
32511 84D4                        00            .byte	0
32512                                           ! 5277                           64,
32513 84D5                      0040            .word	$40
32514                                           ! 5278                    64,
32515 84D7                      0040            .word	$40
32516                                           ! 5279                        0xA000,
32517 84D9                      A000            .word	$A000
32518                                           ! 5280                        0x0000,
32519 84DB                      0000            .word	0
32520                                           ! 5281                       0,
32521 84DD                      0000            .word	0
32522 84DF                      0000            .word	0
32523                                           ! 5282                             2400,
32524 84E1                      0960            .word	$960
32525                                           ! 5283                        800,
32526 84E3                      0320            .word	$320
32527                                           ! 5284                        600,
32528 84E5                      0258            .word	$258
32529                                           ! 5285                      8,
32530 84E7                        08            .byte	8
32531                                           ! 5286                      16,
32532 84E8                        10            .byte	$10
32533                                           ! 5287                           1,
32534 84E9                        01            .byte	1
32535                                           ! 5288                         24,
32536 84EA                        18            .byte	$18
32537                                           ! 5289                          22,
32538 84EB                        16            .byte	$16
32539                                           ! 5290                        0x06,
32540 84EC                        06            .byte	6
32541                                           ! 5291                     0,
32542 84ED                        00            .byte	0
32543                                           ! 5292                               10,
32544 84EE                        0A            .byte	$A
32545                                           ! 5293                          0,
32546 84EF                        00            .byte	0
32547                                           ! 5294                        8,
32548 84F0                        08            .byte	8
32549                                           ! 5295                             16,
32550 84F1                        10            .byte	$10
32551                                           ! 5296                          8,
32552 84F2                        08            .byte	8
32553                                           ! 5297                               8,
32554 84F3                        08            .byte	8
32555                                           ! 5298                         8,
32556 84F4                        08            .byte	8
32557                                           ! 5299                              0,
32558 84F5                        00            .byte	0
32559                                           ! 5300                         0,
32560 84F6                        00            .byte	0
32561                                           ! 5301                              0,
32562 84F7                        00            .byte	0
32563                                           ! 5302                                0,
32564 84F8                        00            .byte	0
32565                                           ! 5303                        0xE0000000,
32566 84F9                      0000            .word	0
32567 84FB                      E000            .word	$E000
32568                                           ! 5304                               0,
32569 84FD                      0000            .word	0
32570 84FF                      0000            .word	0
32571                                           ! 5305                             0,
32572 8501                      0000            .word	0
32573                                           ! 5306                                2400,
32574 8503                      0960            .word	$960
32575                                           ! 5307                             0,
32576 8505                        00            .byte	0
32577                                           ! 5308                             0,
32578 8506                        00            .byte	0
32579                                           ! 5309                           8,
32580 8507                        08            .byte	8
32581                                           ! 5310                                16,
32582 8508                        10            .byte	$10
32583                                           ! 5311                             8,
32584 8509                        08            .byte	8
32585                                           ! 5312                                  8,
32586 850A                        08            .byte	8
32587                                           ! 5313                            8,
32588 850B                        08            .byte	8
32589                                           ! 5314                                 0,
32590 850C                        00            .byte	0
32591                                           ! 5315                            0,
32592 850D                        00            .byte	0
32593                                           ! 5316                                 0,
32594 850E                        00            .byte	0
32595                                           ! 5317                          0,
32596 850F                      0000            .word	0
32597 8511                      0000            .word	0
32598                                           ! 5318 } },
32599                                           ! 5319 { 0x0116,
32600 8513                      0116            .word	$116
32601                                           ! 5320 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32602 8515                      009B            .word	$9B
32603                                           ! 5321                           0x01 | 0x02 | 0x04,
32604 8517                        07            .byte	7
32605                                           ! 5322                           0,
32606 8518                        00            .byte	0
32607                                           ! 5323            
32608                                           ! 5323                64,
32609 8519                      0040            .word	$40
32610                                           ! 5324                    64,
32611 851B                      0040            .word	$40
32612                                           ! 5325                        0xA000,
32613 851D                      A000            .word	$A000
32614                                           ! 5326                        0x0000,
32615 851F                      0000            .word	0
32616                                           ! 5327                       0,
32617 8521                      0000            .word	0
32618 8523                      0000            .word	0
32619                                           ! 5328                             2048,
32620 8525                      0800            .word	$800
32621                                           ! 5329                        1024,
32622 8527                      0400            .word	$400
32623                                           ! 5330                        768,
32624 8529                      0300            .word	$300
32625                                           ! 5331                      8,
32626 852B                        08            .byte	8
32627                                           ! 5332                      16,
32628 852C                        10            .byte	$10
32629                                           ! 5333                           1,
32630 852D                        01            .byte	1
32631                                           ! 5334                         15,
32632 852E                        0F            .byte	$F
32633                                           ! 5335                          24,
32634 852F                        18            .byte	$18
32635                                           ! 5336                        0x06,
32636 8530                        06            .byte	6
32637                                           ! 5337                     0,
32638 8531                        00            .byte	0
32639                                           ! 5338                               9,
32640 8532                        09            .byte	9
32641                                           ! 5339                          0,
32642 8533                        00            .byte	0
32643                                           ! 5340                        5,
32644 8534                        05            .byte	5
32645                                           ! 5341                             10,
32646 8535                        0A            .byte	$A
32647                                           ! 5342                          5,
32648 8536                        05            .byte	5
32649                                           ! 5343                               5,
32650 8537                        05            .byte	5
32651                                           ! 5344                         5,
32652 8538                        05            .byte	5
32653                                           ! 5345                              0,
32654 8539                        00            .byte	0
32655                                           ! 5346                         1,
32656 853A                        01            .byte	1
32657                                           ! 5347                              15,
32658 853B                        0F            .byte	$F
32659                                           ! 5348                                0,
32660 853C                        00            .byte	0
32661                                           ! 5349                        0xE0000000,
32662 853D                      0000            .word	0
32663 853F                      E000            .word	$E000
32664                                           ! 5350                               0,
32665 8541                      0000            .word	0
32666 8543                      0000            .word	0
32667                                           ! 5351                             0,
32668 8545                      0000            .word	0
32669                                           ! 5352                                2048,
32670 8547                      0800            .word	$800
32671                                           ! 5353                             0,
32672 8549                        00            .byte	0
32673                                           ! 5354                             0,
32674 854A                        00            .byte	0
32675                                           ! 5355                           5,
32676 854B                        05            .byte	5
32677                                           ! 5356                                10,
32678 854C                        0A            .byte	$A
32679                                           ! 5357                             5,
32680 854D                        05            .byte	5
32681                                           ! 5358                                  5,
32682 854E                        05            .byte	5
32683                                           ! 5359                            5,
32684 854F                        05            .byte	5
32685                                           ! 5360                                 0,
32686 8550                        00            .byte	0
32687                                           ! 5361                            1,
32688 8551                        01            .byte	1
32689                                           ! 5362                                 15,
32690 8552                        0F            .byte	$F
32691                                           ! 5363                          0,
32692 8553                      0000            .word	0
32693 8555                      0000            .word	0
32694                                           ! 5364 } },
32695                                           ! 5365 { 0x0117,
32696 8557                      0117            .word	$117
32697                                           ! 5366 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32698 8559                      009B            .word	$9B
32699                                           ! 5367                           0x01 | 0x02 | 0x04,
32700 855B                        07            .byte	7
32701                                           ! 5368                           0,
32702 855C                        00            .byte	0
32703                                           ! 5369                           64,
32704 855D                      0040            .word	$40
32705                                           ! 5370                    64,
32706 855F                      0040            .word	$40
32707                                           ! 5371                        0xA000,
32708 8561                      A000            .word	$A000
32709                                           ! 5372                        0x0000,
32710 8563                      0000            .word	0
32711                                           ! 5373                       0,
32712 8565                      0000            .word	0
32713 8567                      0000            .word	0
32714                                           ! 5374                             2048,
32715 8569                      0800            .word	$800
32716                                           ! 5375                        1024,
32717 856B                      0400            .word	$400
32718                                           ! 5376                        768,
32719 856D                      0300            .word	$300
32720                                           ! 5377                      8,
32721 856F                        08            .byte	8
32722                                           ! 5378                      16,
32723 8570                        10            .byte	$10
32724                                           ! 5379                           1,
32725 8571                        01            .byte	1
32726                                           ! 5380                         16,
32727 8572                        10            .byte	$10
32728                                           ! 5381                          24,
32729 8573                        18            .byte	$18
32730                                           ! 5382                        0x06,
32731 8574                        06            .byte	6
32732                                           ! 5383                     0,
32733 8575                        00            .byte	0
32734                                           ! 5384                               9,
32735 8576                        09            .byte	9
32736                                           ! 5385                          0,
32737 8577                        00            .byte	0
32738                                           ! 5386                        5,
32739 8578                        05            .byte	5
32740                                           ! 5387                             11,
32741 8579                        0B            .byte	$B
32742                                           ! 5388                          6,
32743 857A                        06            .byte	6
32744                                           ! 5389                               5,
32745 857B                        05            .byte	5
32746                                           ! 5390                         5,
32747 857C                        05            .byte	5
32748                                           ! 5391                              0,
32749 857D                        00            .byte	0
32750                                           ! 5392                         0,
32751 857E                        00            .byte	0
32752                                           ! 5393 
32753                                           ! 5393                              0,
32754 857F                        00            .byte	0
32755                                           ! 5394                                0,
32756 8580                        00            .byte	0
32757                                           ! 5395                        0xE0000000,
32758 8581                      0000            .word	0
32759 8583                      E000            .word	$E000
32760                                           ! 5396                               0,
32761 8585                      0000            .word	0
32762 8587                      0000            .word	0
32763                                           ! 5397                             0,
32764 8589                      0000            .word	0
32765                                           ! 5398                                2048,
32766 858B                      0800            .word	$800
32767                                           ! 5399                             0,
32768 858D                        00            .byte	0
32769                                           ! 5400                             0,
32770 858E                        00            .byte	0
32771                                           ! 5401                           5,
32772 858F                        05            .byte	5
32773                                           ! 5402                                11,
32774 8590                        0B            .byte	$B
32775                                           ! 5403                             6,
32776 8591                        06            .byte	6
32777                                           ! 5404                                  5,
32778 8592                        05            .byte	5
32779                                           ! 5405                            5,
32780 8593                        05            .byte	5
32781                                           ! 5406                                 0,
32782 8594                        00            .byte	0
32783                                           ! 5407                            0,
32784 8595                        00            .byte	0
32785                                           ! 5408                                 0,
32786 8596                        00            .byte	0
32787                                           ! 5409                          0,
32788 8597                      0000            .word	0
32789 8599                      0000            .word	0
32790                                           ! 5410 } },
32791                                           ! 5411 { 0x0118,
32792 859B                      0118            .word	$118
32793                                           ! 5412 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32794 859D                      009B            .word	$9B
32795                                           ! 5413                           0x01 | 0x02 | 0x04,
32796 859F                        07            .byte	7
32797                                           ! 5414                           0,
32798 85A0                        00            .byte	0
32799                                           ! 5415                           64,
32800 85A1                      0040            .word	$40
32801                                           ! 5416                    64,
32802 85A3                      0040            .word	$40
32803                                           ! 5417                        0xA000,
32804 85A5                      A000            .word	$A000
32805                                           ! 5418                        0x0000,
32806 85A7                      0000            .word	0
32807                                           ! 5419                       0,
32808 85A9                      0000            .word	0
32809 85AB                      0000            .word	0
32810                                           ! 5420                             3072,
32811 85AD                      0C00            .word	$C00
32812                                           ! 5421                        1024,
32813 85AF                      0400            .word	$400
32814                                           ! 5422                        768,
32815 85B1                      0300            .word	$300
32816                                           ! 5423                      8,
32817 85B3                        08            .byte	8
32818                                           ! 5424                      16,
32819 85B4                        10            .byte	$10
32820                                           ! 5425                           1,
32821 85B5                        01            .byte	1
32822                                           ! 5426                         24,
32823 85B6                        18            .byte	$18
32824                                           ! 5427                          36,
32825 85B7                        24            .byte	$24
32826                                           ! 5428                        0x06,
32827 85B8                        06            .byte	6
32828                                           ! 5429                     0,
32829 85B9                        00            .byte	0
32830                                           ! 5430                               6,
32831 85BA                        06            .byte	6
32832                                           ! 5431                          0,
32833 85BB                        00            .byte	0
32834                                           ! 5432                        8,
32835 85BC                        08            .byte	8
32836                                           ! 5433                             16,
32837 85BD                        10            .byte	$10
32838                                           ! 5434                          8,
32839 85BE                        08            .byte	8
32840                                           ! 5435                               8,
32841 85BF                        08            .byte	8
32842                                           ! 5436                         8,
32843 85C0                        08            .byte	8
32844                                           ! 5437                              0,
32845 85C1                        00            .byte	0
32846                                           ! 5438                         0,
32847 85C2                        00            .byte	0
32848                                           ! 5439                              0,
32849 85C3                        00            .byte	0
32850                                           ! 5440                                0,
32851 85C4                        00            .byte	0
32852                                           ! 5441                        0xE0000000,
32853 85C5                      0000            .word	0
32854 85C7                      E000            .word	$E000
32855                                           ! 5442                               0,
32856 85C9                      0000            .word	0
32857 85CB                      0000            .word	0
32858                                           ! 5443                             0,
32859 85CD                      0000            .word	0
32860                                           ! 5444                                3072,
32861 85CF                      0C00            .word	$C00
32862                                           ! 5445                             0,
32863 85D1                        00            .byte	0
32864                                           ! 5446                             0,
32865 85D2                        00            .byte	0
32866                                           ! 5447                           8,
32867 85D3                        08            .byte	8
32868                                           ! 5448                                16,
32869 85D4                        10            .byte	$10
32870                                           ! 5449                             8,
32871 85D5                        08            .byte	8
32872                                           ! 5450                                  8,
32873 85D6                        08            .byte	8
32874                                           ! 5451                            8,
32875 85D7                        08            .byte	8
32876                                           ! 5452                                 0,
32877 85D8                        00            .byte	0
32878                                           ! 5453                            0,
32879 85D9                        00            .byte	0
32880                                           ! 5454                                 0,
32881 85DA                        00            .byte	0
32882                                           ! 5455                          0,
32883 85DB                      0000            .word	0
32884 85DD                      0000            .word	0
32885                                           ! 5456 } },
32886                                           ! 5457 { 0x0119,
32887 85DF                      0119            .word	$119
32888                                           ! 5458 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32889 85E1                      009B            .word	$9B
32890                                           ! 5459                           0x01 | 0x02 | 0x04,
32891 85E3                        07            .byte	7
32892                                           ! 5460                
32893                                           ! 5460            0,
32894 85E4                        00            .byte	0
32895                                           ! 5461                           64,
32896 85E5                      0040            .word	$40
32897                                           ! 5462                    64,
32898 85E7                      0040            .word	$40
32899                                           ! 5463                        0xA000,
32900 85E9                      A000            .word	$A000
32901                                           ! 5464                        0x0000,
32902 85EB                      0000            .word	0
32903                                           ! 5465                       0,
32904 85ED                      0000            .word	0
32905 85EF                      0000            .word	0
32906                                           ! 5466                             2560,
32907 85F1                      0A00            .word	$A00
32908                                           ! 5467                        1280,
32909 85F3                      0500            .word	$500
32910                                           ! 5468                        1024,
32911 85F5                      0400            .word	$400
32912                                           ! 5469                      8,
32913 85F7                        08            .byte	8
32914                                           ! 5470                      16,
32915 85F8                        10            .byte	$10
32916                                           ! 5471                           1,
32917 85F9                        01            .byte	1
32918                                           ! 5472                         15,
32919 85FA                        0F            .byte	$F
32920                                           ! 5473                          40,
32921 85FB                        28            .byte	$28
32922                                           ! 5474                        0x06,
32923 85FC                        06            .byte	6
32924                                           ! 5475                     0,
32925 85FD                        00            .byte	0
32926                                           ! 5476                               5,
32927 85FE                        05            .byte	5
32928                                           ! 5477                          0,
32929 85FF                        00            .byte	0
32930                                           ! 5478                        5,
32931 8600                        05            .byte	5
32932                                           ! 5479                             10,
32933 8601                        0A            .byte	$A
32934                                           ! 5480                          5,
32935 8602                        05            .byte	5
32936                                           ! 5481                               5,
32937 8603                        05            .byte	5
32938                                           ! 5482                         5,
32939 8604                        05            .byte	5
32940                                           ! 5483                              0,
32941 8605                        00            .byte	0
32942                                           ! 5484                         1,
32943 8606                        01            .byte	1
32944                                           ! 5485                              15,
32945 8607                        0F            .byte	$F
32946                                           ! 5486                                0,
32947 8608                        00            .byte	0
32948                                           ! 5487                        0xE0000000,
32949 8609                      0000            .word	0
32950 860B                      E000            .word	$E000
32951                                           ! 5488                               0,
32952 860D                      0000            .word	0
32953 860F                      0000            .word	0
32954                                           ! 5489                             0,
32955 8611                      0000            .word	0
32956                                           ! 5490                                2560,
32957 8613                      0A00            .word	$A00
32958                                           ! 5491                             0,
32959 8615                        00            .byte	0
32960                                           ! 5492                             0,
32961 8616                        00            .byte	0
32962                                           ! 5493                           5,
32963 8617                        05            .byte	5
32964                                           ! 5494                                10,
32965 8618                        0A            .byte	$A
32966                                           ! 5495                             5,
32967 8619                        05            .byte	5
32968                                           ! 5496                                  5,
32969 861A                        05            .byte	5
32970                                           ! 5497                            5,
32971 861B                        05            .byte	5
32972                                           ! 5498                                 0,
32973 861C                        00            .byte	0
32974                                           ! 5499                            1,
32975 861D                        01            .byte	1
32976                                           ! 5500                                 15,
32977 861E                        0F            .byte	$F
32978                                           ! 5501                          0,
32979 861F                      0000            .word	0
32980 8621                      0000            .word	0
32981                                           ! 5502 } },
32982                                           ! 5503 { 0x011a,
32983 8623                      011A            .word	$11A
32984                                           ! 5504 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32985 8625                      009B            .word	$9B
32986                                           ! 5505                           0x01 | 0x02 | 0x04,
32987 8627                        07            .byte	7
32988                                           ! 5506                           0,
32989 8628                        00            .byte	0
32990                                           ! 5507                           64,
32991 8629                      0040            .word	$40
32992                                           ! 5508                    64,
32993 862B                      0040            .word	$40
32994                                           ! 5509                        0xA000,
32995 862D                      A000            .word	$A000
32996                                           ! 5510                        0x0000,
32997 862F                      0000            .word	0
32998                                           ! 5511                       0,
32999 8631                      0000            .word	0
33000 8633                      0000            .word	0
33001                                           ! 5512                             2560,
33002 8635                      0A00            .word	$A00
33003                                           ! 5513                        1280,
33004 8637                      0500            .word	$500
33005                                           ! 5514                        1024,
33006 8639                      0400            .word	$400
33007                                           ! 5515                      8,
33008 863B                        08            .byte	8
33009                                           ! 5516                      16,
33010 863C                        10            .byte	$10
33011                                           ! 5517                           1,
33012 863D                        01            .byte	1
33013                                           ! 5518                         16,
33014 863E                        10            .byte	$10
33015                                           ! 5519                          40,
33016 863F                        28            .byte	$28
33017                                           ! 5520                        0x06,
33018 8640                        06            .byte	6
33019                                           ! 5521                     0,
33020 8641                        00            .byte	0
33021                                           ! 5522                               5,
33022 8642                        05            .byte	5
33023                                           ! 5523                          0,
33024 8643                        00            .byte	0
33025                                           ! 5524                        5,
33026 8644                        05            .byte	5
33027                                           ! 5525                             11,
33028 8645                        0B            .byte	$B
33029                                           ! 5526                          6,
33030 8646                        06            .byte	6
33031                                           ! 5527                               5,
33032 8647                        05            .byte	5
33033                                           ! 5528                         5,
33034 8648                        05            .byte	5
33035                                           ! 5529                              0,
33036 8649                        00            .byte	0
33037                                           ! 5530 
33038                                           ! 5530                         0,
33039 864A                        00            .byte	0
33040                                           ! 5531                              0,
33041 864B                        00            .byte	0
33042                                           ! 5532                                0,
33043 864C                        00            .byte	0
33044                                           ! 5533                        0xE0000000,
33045 864D                      0000            .word	0
33046 864F                      E000            .word	$E000
33047                                           ! 5534                               0,
33048 8651                      0000            .word	0
33049 8653                      0000            .word	0
33050                                           ! 5535                             0,
33051 8655                      0000            .word	0
33052                                           ! 5536                                2560,
33053 8657                      0A00            .word	$A00
33054                                           ! 5537                             0,
33055 8659                        00            .byte	0
33056                                           ! 5538                             0,
33057 865A                        00            .byte	0
33058                                           ! 5539                           5,
33059 865B                        05            .byte	5
33060                                           ! 5540                                11,
33061 865C                        0B            .byte	$B
33062                                           ! 5541                             6,
33063 865D                        06            .byte	6
33064                                           ! 5542                                  5,
33065 865E                        05            .byte	5
33066                                           ! 5543                            5,
33067 865F                        05            .byte	5
33068                                           ! 5544                                 0,
33069 8660                        00            .byte	0
33070                                           ! 5545                            0,
33071 8661                        00            .byte	0
33072                                           ! 5546                                 0,
33073 8662                        00            .byte	0
33074                                           ! 5547                          0,
33075 8663                      0000            .word	0
33076 8665                      0000            .word	0
33077                                           ! 5548 } },
33078                                           ! 5549 { 0x011b,
33079 8667                      011B            .word	$11B
33080                                           ! 5550 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33081 8669                      009B            .word	$9B
33082                                           ! 5551                           0x01 | 0x02 | 0x04,
33083 866B                        07            .byte	7
33084                                           ! 5552                           0,
33085 866C                        00            .byte	0
33086                                           ! 5553                           64,
33087 866D                      0040            .word	$40
33088                                           ! 5554                    64,
33089 866F                      0040            .word	$40
33090                                           ! 5555                        0xA000,
33091 8671                      A000            .word	$A000
33092                                           ! 5556                        0x0000,
33093 8673                      0000            .word	0
33094                                           ! 5557                       0,
33095 8675                      0000            .word	0
33096 8677                      0000            .word	0
33097                                           ! 5558                             3840,
33098 8679                      0F00            .word	$F00
33099                                           ! 5559                        1280,
33100 867B                      0500            .word	$500
33101                                           ! 5560                        1024,
33102 867D                      0400            .word	$400
33103                                           ! 5561                      8,
33104 867F                        08            .byte	8
33105                                           ! 5562                      16,
33106 8680                        10            .byte	$10
33107                                           ! 5563                           1,
33108 8681                        01            .byte	1
33109                                           ! 5564                         24,
33110 8682                        18            .byte	$18
33111                                           ! 5565                          60,
33112 8683                        3C            .byte	$3C
33113                                           ! 5566                        0x06,
33114 8684                        06            .byte	6
33115                                           ! 5567                     0,
33116 8685                        00            .byte	0
33117                                           ! 5568                               3,
33118 8686                        03            .byte	3
33119                                           ! 5569                          0,
33120 8687                        00            .byte	0
33121                                           ! 5570                        8,
33122 8688                        08            .byte	8
33123                                           ! 5571                             16,
33124 8689                        10            .byte	$10
33125                                           ! 5572                          8,
33126 868A                        08            .byte	8
33127                                           ! 5573                               8,
33128 868B                        08            .byte	8
33129                                           ! 5574                         8,
33130 868C                        08            .byte	8
33131                                           ! 5575                              0,
33132 868D                        00            .byte	0
33133                                           ! 5576                         0,
33134 868E                        00            .byte	0
33135                                           ! 5577                              0,
33136 868F                        00            .byte	0
33137                                           ! 5578                                0,
33138 8690                        00            .byte	0
33139                                           ! 5579                        0xE0000000,
33140 8691                      0000            .word	0
33141 8693                      E000            .word	$E000
33142                                           ! 5580                               0,
33143 8695                      0000            .word	0
33144 8697                      0000            .word	0
33145                                           ! 5581                             0,
33146 8699                      0000            .word	0
33147                                           ! 5582                                3840,
33148 869B                      0F00            .word	$F00
33149                                           ! 5583                             0,
33150 869D                        00            .byte	0
33151                                           ! 5584                             0,
33152 869E                        00            .byte	0
33153                                           ! 5585                           8,
33154 869F                        08            .byte	8
33155                                           ! 5586                                16,
33156 86A0                        10            .byte	$10
33157                                           ! 5587                             8,
33158 86A1                        08            .byte	8
33159                                           ! 5588                                  8,
33160 86A2                        08            .byte	8
33161                                           ! 5589                            8,
33162 86A3                        08            .byte	8
33163                                           ! 5590                                 0,
33164 86A4                        00            .byte	0
33165                                           ! 5591                            0,
33166 86A5                        00            .byte	0
33167                                           ! 5592                                 0,
33168 86A6                        00            .byte	0
33169                                           ! 5593                          0,
33170 86A7                      0000            .word	0
33171 86A9                      0000            .word	0
33172                                           ! 5594 } },
33173                                           ! 5595 { 0x011c,
33174 86AB                      011C            .word	$11C
33175                                           ! 5596 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33176 86AD                      009B            .word	$9B
33177                                           ! 5597                           0x01 | 
33178                                           ! 5597 0x02 | 0x04,
33179 86AF                        07            .byte	7
33180                                           ! 5598                           0,
33181 86B0                        00            .byte	0
33182                                           ! 5599                           64,
33183 86B1                      0040            .word	$40
33184                                           ! 5600                    64,
33185 86B3                      0040            .word	$40
33186                                           ! 5601                        0xA000,
33187 86B5                      A000            .word	$A000
33188                                           ! 5602                        0x0000,
33189 86B7                      0000            .word	0
33190                                           ! 5603                       0,
33191 86B9                      0000            .word	0
33192 86BB                      0000            .word	0
33193                                           ! 5604                             1600,
33194 86BD                      0640            .word	$640
33195                                           ! 5605                        1600,
33196 86BF                      0640            .word	$640
33197                                           ! 5606                        1200,
33198 86C1                      04B0            .word	$4B0
33199                                           ! 5607                      8,
33200 86C3                        08            .byte	8
33201                                           ! 5608                      16,
33202 86C4                        10            .byte	$10
33203                                           ! 5609                           1,
33204 86C5                        01            .byte	1
33205                                           ! 5610                         8,
33206 86C6                        08            .byte	8
33207                                           ! 5611                          30,
33208 86C7                        1E            .byte	$1E
33209                                           ! 5612                        0x04,
33210 86C8                        04            .byte	4
33211                                           ! 5613                     0,
33212 86C9                        00            .byte	0
33213                                           ! 5614                               7,
33214 86CA                        07            .byte	7
33215                                           ! 5615                          0,
33216 86CB                        00            .byte	0
33217                                           ! 5616                        0,
33218 86CC                        00            .byte	0
33219                                           ! 5617                             0,
33220 86CD                        00            .byte	0
33221                                           ! 5618                          0,
33222 86CE                        00            .byte	0
33223                                           ! 5619                               0,
33224 86CF                        00            .byte	0
33225                                           ! 5620                         0,
33226 86D0                        00            .byte	0
33227                                           ! 5621                              0,
33228 86D1                        00            .byte	0
33229                                           ! 5622                         0,
33230 86D2                        00            .byte	0
33231                                           ! 5623                              0,
33232 86D3                        00            .byte	0
33233                                           ! 5624                                0,
33234 86D4                        00            .byte	0
33235                                           ! 5625                        0xE0000000,
33236 86D5                      0000            .word	0
33237 86D7                      E000            .word	$E000
33238                                           ! 5626                               0,
33239 86D9                      0000            .word	0
33240 86DB                      0000            .word	0
33241                                           ! 5627                             0,
33242 86DD                      0000            .word	0
33243                                           ! 5628                                1600,
33244 86DF                      0640            .word	$640
33245                                           ! 5629                             0,
33246 86E1                        00            .byte	0
33247                                           ! 5630                             0,
33248 86E2                        00            .byte	0
33249                                           ! 5631                           0,
33250 86E3                        00            .byte	0
33251                                           ! 5632                                0,
33252 86E4                        00            .byte	0
33253                                           ! 5633                             0,
33254 86E5                        00            .byte	0
33255                                           ! 5634                                  0,
33256 86E6                        00            .byte	0
33257                                           ! 5635                            0,
33258 86E7                        00            .byte	0
33259                                           ! 5636                                 0,
33260 86E8                        00            .byte	0
33261                                           ! 5637                            0,
33262 86E9                        00            .byte	0
33263                                           ! 5638                                 0,
33264 86EA                        00            .byte	0
33265                                           ! 5639                          0,
33266 86EB                      0000            .word	0
33267 86ED                      0000            .word	0
33268                                           ! 5640 } },
33269                                           ! 5641 { 0x011d,
33270 86EF                      011D            .word	$11D
33271                                           ! 5642 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33272 86F1                      009B            .word	$9B
33273                                           ! 5643                           0x01 | 0x02 | 0x04,
33274 86F3                        07            .byte	7
33275                                           ! 5644                           0,
33276 86F4                        00            .byte	0
33277                                           ! 5645                           64,
33278 86F5                      0040            .word	$40
33279                                           ! 5646                    64,
33280 86F7                      0040            .word	$40
33281                                           ! 5647                        0xA000,
33282 86F9                      A000            .word	$A000
33283                                           ! 5648                        0x0000,
33284 86FB                      0000            .word	0
33285                                           ! 5649                       0,
33286 86FD                      0000            .word	0
33287 86FF                      0000            .word	0
33288                                           ! 5650                             3200,
33289 8701                      0C80            .word	$C80
33290                                           ! 5651                        1600,
33291 8703                      0640            .word	$640
33292                                           ! 5652                        1200,
33293 8705                      04B0            .word	$4B0
33294                                           ! 5653                      8,
33295 8707                        08            .byte	8
33296                                           ! 5654                      16,
33297 8708                        10            .byte	$10
33298                                           ! 5655                           1,
33299 8709                        01            .byte	1
33300                                           ! 5656                         15,
33301 870A                        0F            .byte	$F
33302                                           ! 5657                          59,
33303 870B                        3B            .byte	$3B
33304                                           ! 5658                        0x06,
33305 870C                        06            .byte	6
33306                                           ! 5659                     0,
33307 870D                        00            .byte	0
33308                                           ! 5660                               3,
33309 870E                        03            .byte	3
33310                                           ! 5661                          0,
33311 870F                        00            .byte	0
33312                                           ! 5662                        5,
33313 8710                        05            .byte	5
33314                                           ! 5663                             10,
33315 8711                        0A            .byte	$A
33316                                           ! 5664                          5,
33317 8712                        05            .byte	5
33318                                           ! 5665                               5,
33319 8713                        05            .byte	5
33320                                           ! 5666                         5,
33321 8714                        05            .byte	5
33322                                           ! 5667          
33323                                           ! 5667                     0,
33324 8715                        00            .byte	0
33325                                           ! 5668                         1,
33326 8716                        01            .byte	1
33327                                           ! 5669                              15,
33328 8717                        0F            .byte	$F
33329                                           ! 5670                                0,
33330 8718                        00            .byte	0
33331                                           ! 5671                        0xE0000000,
33332 8719                      0000            .word	0
33333 871B                      E000            .word	$E000
33334                                           ! 5672                               0,
33335 871D                      0000            .word	0
33336 871F                      0000            .word	0
33337                                           ! 5673                             0,
33338 8721                      0000            .word	0
33339                                           ! 5674                                3200,
33340 8723                      0C80            .word	$C80
33341                                           ! 5675                             0,
33342 8725                        00            .byte	0
33343                                           ! 5676                             0,
33344 8726                        00            .byte	0
33345                                           ! 5677                           5,
33346 8727                        05            .byte	5
33347                                           ! 5678                                10,
33348 8728                        0A            .byte	$A
33349                                           ! 5679                             5,
33350 8729                        05            .byte	5
33351                                           ! 5680                                  5,
33352 872A                        05            .byte	5
33353                                           ! 5681                            5,
33354 872B                        05            .byte	5
33355                                           ! 5682                                 0,
33356 872C                        00            .byte	0
33357                                           ! 5683                            1,
33358 872D                        01            .byte	1
33359                                           ! 5684                                 15,
33360 872E                        0F            .byte	$F
33361                                           ! 5685                          0,
33362 872F                      0000            .word	0
33363 8731                      0000            .word	0
33364                                           ! 5686 } },
33365                                           ! 5687 { 0x011e,
33366 8733                      011E            .word	$11E
33367                                           ! 5688 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33368 8735                      009B            .word	$9B
33369                                           ! 5689                           0x01 | 0x02 | 0x04,
33370 8737                        07            .byte	7
33371                                           ! 5690                           0,
33372 8738                        00            .byte	0
33373                                           ! 5691                           64,
33374 8739                      0040            .word	$40
33375                                           ! 5692                    64,
33376 873B                      0040            .word	$40
33377                                           ! 5693                        0xA000,
33378 873D                      A000            .word	$A000
33379                                           ! 5694                        0x0000,
33380 873F                      0000            .word	0
33381                                           ! 5695                       0,
33382 8741                      0000            .word	0
33383 8743                      0000            .word	0
33384                                           ! 5696                             3200,
33385 8745                      0C80            .word	$C80
33386                                           ! 5697                        1600,
33387 8747                      0640            .word	$640
33388                                           ! 5698                        1200,
33389 8749                      04B0            .word	$4B0
33390                                           ! 5699                      8,
33391 874B                        08            .byte	8
33392                                           ! 5700                      16,
33393 874C                        10            .byte	$10
33394                                           ! 5701                           1,
33395 874D                        01            .byte	1
33396                                           ! 5702                         16,
33397 874E                        10            .byte	$10
33398                                           ! 5703                          59,
33399 874F                        3B            .byte	$3B
33400                                           ! 5704                        0x06,
33401 8750                        06            .byte	6
33402                                           ! 5705                     0,
33403 8751                        00            .byte	0
33404                                           ! 5706                               3,
33405 8752                        03            .byte	3
33406                                           ! 5707                          0,
33407 8753                        00            .byte	0
33408                                           ! 5708                        5,
33409 8754                        05            .byte	5
33410                                           ! 5709                             11,
33411 8755                        0B            .byte	$B
33412                                           ! 5710                          6,
33413 8756                        06            .byte	6
33414                                           ! 5711                               5,
33415 8757                        05            .byte	5
33416                                           ! 5712                         5,
33417 8758                        05            .byte	5
33418                                           ! 5713                              0,
33419 8759                        00            .byte	0
33420                                           ! 5714                         0,
33421 875A                        00            .byte	0
33422                                           ! 5715                              0,
33423 875B                        00            .byte	0
33424                                           ! 5716                                0,
33425 875C                        00            .byte	0
33426                                           ! 5717                        0xE0000000,
33427 875D                      0000            .word	0
33428 875F                      E000            .word	$E000
33429                                           ! 5718                               0,
33430 8761                      0000            .word	0
33431 8763                      0000            .word	0
33432                                           ! 5719                             0,
33433 8765                      0000            .word	0
33434                                           ! 5720                                3200,
33435 8767                      0C80            .word	$C80
33436                                           ! 5721                             0,
33437 8769                        00            .byte	0
33438                                           ! 5722                             0,
33439 876A                        00            .byte	0
33440                                           ! 5723                           5,
33441 876B                        05            .byte	5
33442                                           ! 5724                                11,
33443 876C                        0B            .byte	$B
33444                                           ! 5725                             6,
33445 876D                        06            .byte	6
33446                                           ! 5726                                  5,
33447 876E                        05            .byte	5
33448                                           ! 5727                            5,
33449 876F                        05            .byte	5
33450                                           ! 5728                                 0,
33451 8770                        00            .byte	0
33452                                           ! 5729                            0,
33453 8771                        00            .byte	0
33454                                           ! 5730                                 0,
33455 8772                        00            .byte	0
33456                                           ! 5731                          0,
33457 8773                      0000            .word	0
33458 8775                      0000            .word	0
33459                                           ! 5732 } },
33460                                           ! 5733 { 0x011f,
33461 8777                      011F            .word	$11F
33462                                           ! 5734 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33463 8779                      009B            .word	$9B
33464                                           ! 5735         
33465                                           ! 5735                   0x01 | 0x02 | 0x04,
33466 877B                        07            .byte	7
33467                                           ! 5736                           0,
33468 877C                        00            .byte	0
33469                                           ! 5737                           64,
33470 877D                      0040            .word	$40
33471                                           ! 5738                    64,
33472 877F                      0040            .word	$40
33473                                           ! 5739                        0xA000,
33474 8781                      A000            .word	$A000
33475                                           ! 5740                        0x0000,
33476 8783                      0000            .word	0
33477                                           ! 5741                       0,
33478 8785                      0000            .word	0
33479 8787                      0000            .word	0
33480                                           ! 5742                             4800,
33481 8789                      12C0            .word	$12C0
33482                                           ! 5743                        1600,
33483 878B                      0640            .word	$640
33484                                           ! 5744                        1200,
33485 878D                      04B0            .word	$4B0
33486                                           ! 5745                      8,
33487 878F                        08            .byte	8
33488                                           ! 5746                      16,
33489 8790                        10            .byte	$10
33490                                           ! 5747                           1,
33491 8791                        01            .byte	1
33492                                           ! 5748                         24,
33493 8792                        18            .byte	$18
33494                                           ! 5749                          88,
33495 8793                        58            .byte	$58
33496                                           ! 5750                        0x06,
33497 8794                        06            .byte	6
33498                                           ! 5751                     0,
33499 8795                        00            .byte	0
33500                                           ! 5752                               1,
33501 8796                        01            .byte	1
33502                                           ! 5753                          0,
33503 8797                        00            .byte	0
33504                                           ! 5754                        8,
33505 8798                        08            .byte	8
33506                                           ! 5755                             16,
33507 8799                        10            .byte	$10
33508                                           ! 5756                          8,
33509 879A                        08            .byte	8
33510                                           ! 5757                               8,
33511 879B                        08            .byte	8
33512                                           ! 5758                         8,
33513 879C                        08            .byte	8
33514                                           ! 5759                              0,
33515 879D                        00            .byte	0
33516                                           ! 5760                         0,
33517 879E                        00            .byte	0
33518                                           ! 5761                              0,
33519 879F                        00            .byte	0
33520                                           ! 5762                                0,
33521 87A0                        00            .byte	0
33522                                           ! 5763                        0xE0000000,
33523 87A1                      0000            .word	0
33524 87A3                      E000            .word	$E000
33525                                           ! 5764                               0,
33526 87A5                      0000            .word	0
33527 87A7                      0000            .word	0
33528                                           ! 5765                             0,
33529 87A9                      0000            .word	0
33530                                           ! 5766                                4800,
33531 87AB                      12C0            .word	$12C0
33532                                           ! 5767                             0,
33533 87AD                        00            .byte	0
33534                                           ! 5768                             0,
33535 87AE                        00            .byte	0
33536                                           ! 5769                           8,
33537 87AF                        08            .byte	8
33538                                           ! 5770                                16,
33539 87B0                        10            .byte	$10
33540                                           ! 5771                             8,
33541 87B1                        08            .byte	8
33542                                           ! 5772                                  8,
33543 87B2                        08            .byte	8
33544                                           ! 5773                            8,
33545 87B3                        08            .byte	8
33546                                           ! 5774                                 0,
33547 87B4                        00            .byte	0
33548                                           ! 5775                            0,
33549 87B5                        00            .byte	0
33550                                           ! 5776                                 0,
33551 87B6                        00            .byte	0
33552                                           ! 5777                          0,
33553 87B7                      0000            .word	0
33554 87B9                      0000            .word	0
33555                                           ! 5778 } },
33556                                           ! 5779 { 0x0140,
33557 87BB                      0140            .word	$140
33558                                           ! 5780 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33559 87BD                      009B            .word	$9B
33560                                           ! 5781                           0x01 | 0x02 | 0x04,
33561 87BF                        07            .byte	7
33562                                           ! 5782                           0,
33563 87C0                        00            .byte	0
33564                                           ! 5783                           64,
33565 87C1                      0040            .word	$40
33566                                           ! 5784                    64,
33567 87C3                      0040            .word	$40
33568                                           ! 5785                        0xA000,
33569 87C5                      A000            .word	$A000
33570                                           ! 5786                        0x0000,
33571 87C7                      0000            .word	0
33572                                           ! 5787                       0,
33573 87C9                      0000            .word	0
33574 87CB                      0000            .word	0
33575                                           ! 5788                             1280,
33576 87CD                      0500            .word	$500
33577                                           ! 5789                        320,
33578 87CF                      0140            .word	$140
33579                                           ! 5790                        200,
33580 87D1                      00C8            .word	$C8
33581                                           ! 5791                      8,
33582 87D3                        08            .byte	8
33583                                           ! 5792                      16,
33584 87D4                        10            .byte	$10
33585                                           ! 5793                           1,
33586 87D5                        01            .byte	1
33587                                           ! 5794                         32,
33588 87D6                        20            .byte	$20
33589                                           ! 5795                          4,
33590 87D7                        04            .byte	4
33591                                           ! 5796                        0x06,
33592 87D8                        06            .byte	6
33593                                           ! 5797                     0,
33594 87D9                        00            .byte	0
33595                                           ! 5798                               64,
33596 87DA                        40            .byte	$40
33597                                           ! 5799                          0,
33598 87DB                        00            .byte	0
33599                                           ! 5800                        8,
33600 87DC                        08            .byte	8
33601                                           ! 5801                             16,
33602 87DD                        10            .byte	$10
33603                                           ! 5802                          8,
33604 87DE                        08            .byte	8
33605                                           ! 5803                               8,
33606 87DF                        08            .byte	8
33607                                           ! 5804           
33608                                           ! 5804               8,
33609 87E0                        08            .byte	8
33610                                           ! 5805                              0,
33611 87E1                        00            .byte	0
33612                                           ! 5806                         8,
33613 87E2                        08            .byte	8
33614                                           ! 5807                              24,
33615 87E3                        18            .byte	$18
33616                                           ! 5808                                0x02,
33617 87E4                        02            .byte	2
33618                                           ! 5809                        0xE0000000,
33619 87E5                      0000            .word	0
33620 87E7                      E000            .word	$E000
33621                                           ! 5810                               0,
33622 87E9                      0000            .word	0
33623 87EB                      0000            .word	0
33624                                           ! 5811                             0,
33625 87ED                      0000            .word	0
33626                                           ! 5812                                1280,
33627 87EF                      0500            .word	$500
33628                                           ! 5813                             0,
33629 87F1                        00            .byte	0
33630                                           ! 5814                             0,
33631 87F2                        00            .byte	0
33632                                           ! 5815                           8,
33633 87F3                        08            .byte	8
33634                                           ! 5816                                16,
33635 87F4                        10            .byte	$10
33636                                           ! 5817                             8,
33637 87F5                        08            .byte	8
33638                                           ! 5818                                  8,
33639 87F6                        08            .byte	8
33640                                           ! 5819                            8,
33641 87F7                        08            .byte	8
33642                                           ! 5820                                 0,
33643 87F8                        00            .byte	0
33644                                           ! 5821                            8,
33645 87F9                        08            .byte	8
33646                                           ! 5822                                 24,
33647 87FA                        18            .byte	$18
33648                                           ! 5823                          0,
33649 87FB                      0000            .word	0
33650 87FD                      0000            .word	0
33651                                           ! 5824 } },
33652                                           ! 5825 { 0x0141,
33653 87FF                      0141            .word	$141
33654                                           ! 5826 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33655 8801                      009B            .word	$9B
33656                                           ! 5827                           0x01 | 0x02 | 0x04,
33657 8803                        07            .byte	7
33658                                           ! 5828                           0,
33659 8804                        00            .byte	0
33660                                           ! 5829                           64,
33661 8805                      0040            .word	$40
33662                                           ! 5830                    64,
33663 8807                      0040            .word	$40
33664                                           ! 5831                        0xA000,
33665 8809                      A000            .word	$A000
33666                                           ! 5832                        0x0000,
33667 880B                      0000            .word	0
33668                                           ! 5833                       0,
33669 880D                      0000            .word	0
33670 880F                      0000            .word	0
33671                                           ! 5834                             2560,
33672 8811                      0A00            .word	$A00
33673                                           ! 5835                        640,
33674 8813                      0280            .word	$280
33675                                           ! 5836                        400,
33676 8815                      0190            .word	$190
33677                                           ! 5837                      8,
33678 8817                        08            .byte	8
33679                                           ! 5838                      16,
33680 8818                        10            .byte	$10
33681                                           ! 5839                           1,
33682 8819                        01            .byte	1
33683                                           ! 5840                         32,
33684 881A                        20            .byte	$20
33685                                           ! 5841                          16,
33686 881B                        10            .byte	$10
33687                                           ! 5842                        0x06,
33688 881C                        06            .byte	6
33689                                           ! 5843                     0,
33690 881D                        00            .byte	0
33691                                           ! 5844                               15,
33692 881E                        0F            .byte	$F
33693                                           ! 5845                          0,
33694 881F                        00            .byte	0
33695                                           ! 5846                        8,
33696 8820                        08            .byte	8
33697                                           ! 5847                             16,
33698 8821                        10            .byte	$10
33699                                           ! 5848                          8,
33700 8822                        08            .byte	8
33701                                           ! 5849                               8,
33702 8823                        08            .byte	8
33703                                           ! 5850                         8,
33704 8824                        08            .byte	8
33705                                           ! 5851                              0,
33706 8825                        00            .byte	0
33707                                           ! 5852                         8,
33708 8826                        08            .byte	8
33709                                           ! 5853                              24,
33710 8827                        18            .byte	$18
33711                                           ! 5854                                0x02,
33712 8828                        02            .byte	2
33713                                           ! 5855                        0xE0000000,
33714 8829                      0000            .word	0
33715 882B                      E000            .word	$E000
33716                                           ! 5856                               0,
33717 882D                      0000            .word	0
33718 882F                      0000            .word	0
33719                                           ! 5857                             0,
33720 8831                      0000            .word	0
33721                                           ! 5858                                2560,
33722 8833                      0A00            .word	$A00
33723                                           ! 5859                             0,
33724 8835                        00            .byte	0
33725                                           ! 5860                             0,
33726 8836                        00            .byte	0
33727                                           ! 5861                           8,
33728 8837                        08            .byte	8
33729                                           ! 5862                                16,
33730 8838                        10            .byte	$10
33731                                           ! 5863                             8,
33732 8839                        08            .byte	8
33733                                           ! 5864                                  8,
33734 883A                        08            .byte	8
33735                                           ! 5865                            8,
33736 883B                        08            .byte	8
33737                                           ! 5866                                 0,
33738 883C                        00            .byte	0
33739                                           ! 5867                            8,
33740 883D                        08            .byte	8
33741                                           ! 5868                                 24,
33742 883E                        18            .byte	$18
33743                                           ! 5869                          0,
33744 883F                      0000            .word	0
33745 8841                      0000            .word	0
33746                                           ! 5870 } },
33747                                           ! 5871 { 0x0142,
33748 8843                      0142            .word	$142
33749                                           ! 5872 { 0x0001 | 0x0002 | 0
33750                                           ! 5872 x0008 | 0x0080 | 0x0010,
33751 8845                      009B            .word	$9B
33752                                           ! 5873                           0x01 | 0x02 | 0x04,
33753 8847                        07            .byte	7
33754                                           ! 5874                           0,
33755 8848                        00            .byte	0
33756                                           ! 5875                           64,
33757 8849                      0040            .word	$40
33758                                           ! 5876                    64,
33759 884B                      0040            .word	$40
33760                                           ! 5877                        0xA000,
33761 884D                      A000            .word	$A000
33762                                           ! 5878                        0x0000,
33763 884F                      0000            .word	0
33764                                           ! 5879                       0,
33765 8851                      0000            .word	0
33766 8853                      0000            .word	0
33767                                           ! 5880                             2560,
33768 8855                      0A00            .word	$A00
33769                                           ! 5881                        640,
33770 8857                      0280            .word	$280
33771                                           ! 5882                        480,
33772 8859                      01E0            .word	$1E0
33773                                           ! 5883                      8,
33774 885B                        08            .byte	8
33775                                           ! 5884                      16,
33776 885C                        10            .byte	$10
33777                                           ! 5885                           1,
33778 885D                        01            .byte	1
33779                                           ! 5886                         32,
33780 885E                        20            .byte	$20
33781                                           ! 5887                          19,
33782 885F                        13            .byte	$13
33783                                           ! 5888                        0x06,
33784 8860                        06            .byte	6
33785                                           ! 5889                     0,
33786 8861                        00            .byte	0
33787                                           ! 5890                               12,
33788 8862                        0C            .byte	$C
33789                                           ! 5891                          0,
33790 8863                        00            .byte	0
33791                                           ! 5892                        8,
33792 8864                        08            .byte	8
33793                                           ! 5893                             16,
33794 8865                        10            .byte	$10
33795                                           ! 5894                          8,
33796 8866                        08            .byte	8
33797                                           ! 5895                               8,
33798 8867                        08            .byte	8
33799                                           ! 5896                         8,
33800 8868                        08            .byte	8
33801                                           ! 5897                              0,
33802 8869                        00            .byte	0
33803                                           ! 5898                         8,
33804 886A                        08            .byte	8
33805                                           ! 5899                              24,
33806 886B                        18            .byte	$18
33807                                           ! 5900                                0x02,
33808 886C                        02            .byte	2
33809                                           ! 5901                        0xE0000000,
33810 886D                      0000            .word	0
33811 886F                      E000            .word	$E000
33812                                           ! 5902                               0,
33813 8871                      0000            .word	0
33814 8873                      0000            .word	0
33815                                           ! 5903                             0,
33816 8875                      0000            .word	0
33817                                           ! 5904                                2560,
33818 8877                      0A00            .word	$A00
33819                                           ! 5905                             0,
33820 8879                        00            .byte	0
33821                                           ! 5906                             0,
33822 887A                        00            .byte	0
33823                                           ! 5907                           8,
33824 887B                        08            .byte	8
33825                                           ! 5908                                16,
33826 887C                        10            .byte	$10
33827                                           ! 5909                             8,
33828 887D                        08            .byte	8
33829                                           ! 5910                                  8,
33830 887E                        08            .byte	8
33831                                           ! 5911                            8,
33832 887F                        08            .byte	8
33833                                           ! 5912                                 0,
33834 8880                        00            .byte	0
33835                                           ! 5913                            8,
33836 8881                        08            .byte	8
33837                                           ! 5914                                 24,
33838 8882                        18            .byte	$18
33839                                           ! 5915                          0,
33840 8883                      0000            .word	0
33841 8885                      0000            .word	0
33842                                           ! 5916 } },
33843                                           ! 5917 { 0x0143,
33844 8887                      0143            .word	$143
33845                                           ! 5918 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33846 8889                      009B            .word	$9B
33847                                           ! 5919                           0x01 | 0x02 | 0x04,
33848 888B                        07            .byte	7
33849                                           ! 5920                           0,
33850 888C                        00            .byte	0
33851                                           ! 5921                           64,
33852 888D                      0040            .word	$40
33853                                           ! 5922                    64,
33854 888F                      0040            .word	$40
33855                                           ! 5923                        0xA000,
33856 8891                      A000            .word	$A000
33857                                           ! 5924                        0x0000,
33858 8893                      0000            .word	0
33859                                           ! 5925                       0,
33860 8895                      0000            .word	0
33861 8897                      0000            .word	0
33862                                           ! 5926                             3200,
33863 8899                      0C80            .word	$C80
33864                                           ! 5927                        800,
33865 889B                      0320            .word	$320
33866                                           ! 5928                        600,
33867 889D                      0258            .word	$258
33868                                           ! 5929                      8,
33869 889F                        08            .byte	8
33870                                           ! 5930                      16,
33871 88A0                        10            .byte	$10
33872                                           ! 5931                           1,
33873 88A1                        01            .byte	1
33874                                           ! 5932                         32,
33875 88A2                        20            .byte	$20
33876                                           ! 5933                          30,
33877 88A3                        1E            .byte	$1E
33878                                           ! 5934                        0x06,
33879 88A4                        06            .byte	6
33880                                           ! 5935                     0,
33881 88A5                        00            .byte	0
33882                                           ! 5936                               7,
33883 88A6                        07            .byte	7
33884                                           ! 5937                          0,
33885 88A7                        00            .byte	0
33886                                           ! 5938                        8,
33887 88A8                        08            .byte	8
33888                                           ! 5939                             16,
33889 88A9                        10            .byte	$10
33890                                           ! 5940                          8,
33891 88AA                        08            .byte	8
33892                                           ! 5941       
33893                                           ! 5941                         8,
33894 88AB                        08            .byte	8
33895                                           ! 5942                         8,
33896 88AC                        08            .byte	8
33897                                           ! 5943                              0,
33898 88AD                        00            .byte	0
33899                                           ! 5944                         8,
33900 88AE                        08            .byte	8
33901                                           ! 5945                              24,
33902 88AF                        18            .byte	$18
33903                                           ! 5946                                0x02,
33904 88B0                        02            .byte	2
33905                                           ! 5947                        0xE0000000,
33906 88B1                      0000            .word	0
33907 88B3                      E000            .word	$E000
33908                                           ! 5948                               0,
33909 88B5                      0000            .word	0
33910 88B7                      0000            .word	0
33911                                           ! 5949                             0,
33912 88B9                      0000            .word	0
33913                                           ! 5950                                3200,
33914 88BB                      0C80            .word	$C80
33915                                           ! 5951                             0,
33916 88BD                        00            .byte	0
33917                                           ! 5952                             0,
33918 88BE                        00            .byte	0
33919                                           ! 5953                           8,
33920 88BF                        08            .byte	8
33921                                           ! 5954                                16,
33922 88C0                        10            .byte	$10
33923                                           ! 5955                             8,
33924 88C1                        08            .byte	8
33925                                           ! 5956                                  8,
33926 88C2                        08            .byte	8
33927                                           ! 5957                            8,
33928 88C3                        08            .byte	8
33929                                           ! 5958                                 0,
33930 88C4                        00            .byte	0
33931                                           ! 5959                            8,
33932 88C5                        08            .byte	8
33933                                           ! 5960                                 24,
33934 88C6                        18            .byte	$18
33935                                           ! 5961                          0,
33936 88C7                      0000            .word	0
33937 88C9                      0000            .word	0
33938                                           ! 5962 } },
33939                                           ! 5963 { 0x0144,
33940 88CB                      0144            .word	$144
33941                                           ! 5964 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33942 88CD                      009B            .word	$9B
33943                                           ! 5965                           0x01 | 0x02 | 0x04,
33944 88CF                        07            .byte	7
33945                                           ! 5966                           0,
33946 88D0                        00            .byte	0
33947                                           ! 5967                           64,
33948 88D1                      0040            .word	$40
33949                                           ! 5968                    64,
33950 88D3                      0040            .word	$40
33951                                           ! 5969                        0xA000,
33952 88D5                      A000            .word	$A000
33953                                           ! 5970                        0x0000,
33954 88D7                      0000            .word	0
33955                                           ! 5971                       0,
33956 88D9                      0000            .word	0
33957 88DB                      0000            .word	0
33958                                           ! 5972                             4096,
33959 88DD                      1000            .word	$1000
33960                                           ! 5973                        1024,
33961 88DF                      0400            .word	$400
33962                                           ! 5974                        768,
33963 88E1                      0300            .word	$300
33964                                           ! 5975                      8,
33965 88E3                        08            .byte	8
33966                                           ! 5976                      16,
33967 88E4                        10            .byte	$10
33968                                           ! 5977                           1,
33969 88E5                        01            .byte	1
33970                                           ! 5978                         32,
33971 88E6                        20            .byte	$20
33972                                           ! 5979                          48,
33973 88E7                        30            .byte	$30
33974                                           ! 5980                        0x06,
33975 88E8                        06            .byte	6
33976                                           ! 5981                     0,
33977 88E9                        00            .byte	0
33978                                           ! 5982                               4,
33979 88EA                        04            .byte	4
33980                                           ! 5983                          0,
33981 88EB                        00            .byte	0
33982                                           ! 5984                        8,
33983 88EC                        08            .byte	8
33984                                           ! 5985                             16,
33985 88ED                        10            .byte	$10
33986                                           ! 5986                          8,
33987 88EE                        08            .byte	8
33988                                           ! 5987                               8,
33989 88EF                        08            .byte	8
33990                                           ! 5988                         8,
33991 88F0                        08            .byte	8
33992                                           ! 5989                              0,
33993 88F1                        00            .byte	0
33994                                           ! 5990                         8,
33995 88F2                        08            .byte	8
33996                                           ! 5991                              24,
33997 88F3                        18            .byte	$18
33998                                           ! 5992                                0x02,
33999 88F4                        02            .byte	2
34000                                           ! 5993                        0xE0000000,
34001 88F5                      0000            .word	0
34002 88F7                      E000            .word	$E000
34003                                           ! 5994                               0,
34004 88F9                      0000            .word	0
34005 88FB                      0000            .word	0
34006                                           ! 5995                             0,
34007 88FD                      0000            .word	0
34008                                           ! 5996                                4096,
34009 88FF                      1000            .word	$1000
34010                                           ! 5997                             0,
34011 8901                        00            .byte	0
34012                                           ! 5998                             0,
34013 8902                        00            .byte	0
34014                                           ! 5999                           8,
34015 8903                        08            .byte	8
34016                                           ! 6000                                16,
34017 8904                        10            .byte	$10
34018                                           ! 6001                             8,
34019 8905                        08            .byte	8
34020                                           ! 6002                                  8,
34021 8906                        08            .byte	8
34022                                           ! 6003                            8,
34023 8907                        08            .byte	8
34024                                           ! 6004                                 0,
34025 8908                        00            .byte	0
34026                                           ! 6005                            8,
34027 8909                        08            .byte	8
34028                                           ! 6006                                 24,
34029 890A                        18            .byte	$18
34030                                           ! 6007                          0,
34031                                           ! 6007 
34032 890B                      0000            .word	0
34033 890D                      0000            .word	0
34034                                           ! 6008 } },
34035                                           ! 6009 { 0x0145,
34036 890F                      0145            .word	$145
34037                                           ! 6010 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34038 8911                      009B            .word	$9B
34039                                           ! 6011                           0x01 | 0x02 | 0x04,
34040 8913                        07            .byte	7
34041                                           ! 6012                           0,
34042 8914                        00            .byte	0
34043                                           ! 6013                           64,
34044 8915                      0040            .word	$40
34045                                           ! 6014                    64,
34046 8917                      0040            .word	$40
34047                                           ! 6015                        0xA000,
34048 8919                      A000            .word	$A000
34049                                           ! 6016                        0x0000,
34050 891B                      0000            .word	0
34051                                           ! 6017                       0,
34052 891D                      0000            .word	0
34053 891F                      0000            .word	0
34054                                           ! 6018                             5120,
34055 8921                      1400            .word	$1400
34056                                           ! 6019                        1280,
34057 8923                      0500            .word	$500
34058                                           ! 6020                        1024,
34059 8925                      0400            .word	$400
34060                                           ! 6021                      8,
34061 8927                        08            .byte	8
34062                                           ! 6022                      16,
34063 8928                        10            .byte	$10
34064                                           ! 6023                           1,
34065 8929                        01            .byte	1
34066                                           ! 6024                         32,
34067 892A                        20            .byte	$20
34068                                           ! 6025                          80,
34069 892B                        50            .byte	$50
34070                                           ! 6026                        0x06,
34071 892C                        06            .byte	6
34072                                           ! 6027                     0,
34073 892D                        00            .byte	0
34074                                           ! 6028                               2,
34075 892E                        02            .byte	2
34076                                           ! 6029                          0,
34077 892F                        00            .byte	0
34078                                           ! 6030                        8,
34079 8930                        08            .byte	8
34080                                           ! 6031                             16,
34081 8931                        10            .byte	$10
34082                                           ! 6032                          8,
34083 8932                        08            .byte	8
34084                                           ! 6033                               8,
34085 8933                        08            .byte	8
34086                                           ! 6034                         8,
34087 8934                        08            .byte	8
34088                                           ! 6035                              0,
34089 8935                        00            .byte	0
34090                                           ! 6036                         8,
34091 8936                        08            .byte	8
34092                                           ! 6037                              24,
34093 8937                        18            .byte	$18
34094                                           ! 6038                                0x02,
34095 8938                        02            .byte	2
34096                                           ! 6039                        0xE0000000,
34097 8939                      0000            .word	0
34098 893B                      E000            .word	$E000
34099                                           ! 6040                               0,
34100 893D                      0000            .word	0
34101 893F                      0000            .word	0
34102                                           ! 6041                             0,
34103 8941                      0000            .word	0
34104                                           ! 6042                                5120,
34105 8943                      1400            .word	$1400
34106                                           ! 6043                             0,
34107 8945                        00            .byte	0
34108                                           ! 6044                             0,
34109 8946                        00            .byte	0
34110                                           ! 6045                           8,
34111 8947                        08            .byte	8
34112                                           ! 6046                                16,
34113 8948                        10            .byte	$10
34114                                           ! 6047                             8,
34115 8949                        08            .byte	8
34116                                           ! 6048                                  8,
34117 894A                        08            .byte	8
34118                                           ! 6049                            8,
34119 894B                        08            .byte	8
34120                                           ! 6050                                 0,
34121 894C                        00            .byte	0
34122                                           ! 6051                            8,
34123 894D                        08            .byte	8
34124                                           ! 6052                                 24,
34125 894E                        18            .byte	$18
34126                                           ! 6053                          0,
34127 894F                      0000            .word	0
34128 8951                      0000            .word	0
34129                                           ! 6054 } },
34130                                           ! 6055 { 0x0146,
34131 8953                      0146            .word	$146
34132                                           ! 6056 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34133 8955                      009B            .word	$9B
34134                                           ! 6057                           0x01 | 0x02 | 0x04,
34135 8957                        07            .byte	7
34136                                           ! 6058                           0,
34137 8958                        00            .byte	0
34138                                           ! 6059                           64,
34139 8959                      0040            .word	$40
34140                                           ! 6060                    64,
34141 895B                      0040            .word	$40
34142                                           ! 6061                        0xA000,
34143 895D                      A000            .word	$A000
34144                                           ! 6062                        0x0000,
34145 895F                      0000            .word	0
34146                                           ! 6063                       0,
34147 8961                      0000            .word	0
34148 8963                      0000            .word	0
34149                                           ! 6064                             320,
34150 8965                      0140            .word	$140
34151                                           ! 6065                        320,
34152 8967                      0140            .word	$140
34153                                           ! 6066                        200,
34154 8969                      00C8            .word	$C8
34155                                           ! 6067                      8,
34156 896B                        08            .byte	8
34157                                           ! 6068                      16,
34158 896C                        10            .byte	$10
34159                                           ! 6069                           1,
34160 896D                        01            .byte	1
34161                                           ! 6070                         8,
34162 896E                        08            .byte	8
34163                                           ! 6071                          1,
34164 896F                        01            .byte	1
34165                                           ! 6072                        0x04,
34166 8970                        04            .byte	4
34167                                           ! 6073                     0,
34168 8971                        00            .byte	0
34169                                           ! 6074                               261,
34170 8972                        05            .byte	5
34171                                           ! 6075                          0,
34172 8973                        00            .byte	0
34173                                           ! 6076                        0,
34174 8974                        00            .byte	0
34175                                           ! 6077                             0
34176                                           ! 6077 ,
34177 8975                        00            .byte	0
34178                                           ! 6078                          0,
34179 8976                        00            .byte	0
34180                                           ! 6079                               0,
34181 8977                        00            .byte	0
34182                                           ! 6080                         0,
34183 8978                        00            .byte	0
34184                                           ! 6081                              0,
34185 8979                        00            .byte	0
34186                                           ! 6082                         0,
34187 897A                        00            .byte	0
34188                                           ! 6083                              0,
34189 897B                        00            .byte	0
34190                                           ! 6084                                0,
34191 897C                        00            .byte	0
34192                                           ! 6085                        0xE0000000,
34193 897D                      0000            .word	0
34194 897F                      E000            .word	$E000
34195                                           ! 6086                               0,
34196 8981                      0000            .word	0
34197 8983                      0000            .word	0
34198                                           ! 6087                             0,
34199 8985                      0000            .word	0
34200                                           ! 6088                                320,
34201 8987                      0140            .word	$140
34202                                           ! 6089                             0,
34203 8989                        00            .byte	0
34204                                           ! 6090                             0,
34205 898A                        00            .byte	0
34206                                           ! 6091                           0,
34207 898B                        00            .byte	0
34208                                           ! 6092                                0,
34209 898C                        00            .byte	0
34210                                           ! 6093                             0,
34211 898D                        00            .byte	0
34212                                           ! 6094                                  0,
34213 898E                        00            .byte	0
34214                                           ! 6095                            0,
34215 898F                        00            .byte	0
34216                                           ! 6096                                 0,
34217 8990                        00            .byte	0
34218                                           ! 6097                            0,
34219 8991                        00            .byte	0
34220                                           ! 6098                                 0,
34221 8992                        00            .byte	0
34222                                           ! 6099                          0,
34223 8993                      0000            .word	0
34224 8995                      0000            .word	0
34225                                           ! 6100 } },
34226                                           ! 6101 { 0x0147,
34227 8997                      0147            .word	$147
34228                                           ! 6102 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34229 8999                      009B            .word	$9B
34230                                           ! 6103                           0x01 | 0x02 | 0x04,
34231 899B                        07            .byte	7
34232                                           ! 6104                           0,
34233 899C                        00            .byte	0
34234                                           ! 6105                           64,
34235 899D                      0040            .word	$40
34236                                           ! 6106                    64,
34237 899F                      0040            .word	$40
34238                                           ! 6107                        0xA000,
34239 89A1                      A000            .word	$A000
34240                                           ! 6108                        0x0000,
34241 89A3                      0000            .word	0
34242                                           ! 6109                       0,
34243 89A5                      0000            .word	0
34244 89A7                      0000            .word	0
34245                                           ! 6110                             6400,
34246 89A9                      1900            .word	$1900
34247                                           ! 6111                        1600,
34248 89AB                      0640            .word	$640
34249                                           ! 6112                        1200,
34250 89AD                      04B0            .word	$4B0
34251                                           ! 6113                      8,
34252 89AF                        08            .byte	8
34253                                           ! 6114                      16,
34254 89B0                        10            .byte	$10
34255                                           ! 6115                           1,
34256 89B1                        01            .byte	1
34257                                           ! 6116                         32,
34258 89B2                        20            .byte	$20
34259                                           ! 6117                          118,
34260 89B3                        76            .byte	$76
34261                                           ! 6118                        0x06,
34262 89B4                        06            .byte	6
34263                                           ! 6119                     0,
34264 89B5                        00            .byte	0
34265                                           ! 6120                               1,
34266 89B6                        01            .byte	1
34267                                           ! 6121                          0,
34268 89B7                        00            .byte	0
34269                                           ! 6122                        8,
34270 89B8                        08            .byte	8
34271                                           ! 6123                             16,
34272 89B9                        10            .byte	$10
34273                                           ! 6124                          8,
34274 89BA                        08            .byte	8
34275                                           ! 6125                               8,
34276 89BB                        08            .byte	8
34277                                           ! 6126                         8,
34278 89BC                        08            .byte	8
34279                                           ! 6127                              0,
34280 89BD                        00            .byte	0
34281                                           ! 6128                         8,
34282 89BE                        08            .byte	8
34283                                           ! 6129                              24,
34284 89BF                        18            .byte	$18
34285                                           ! 6130                                0x02,
34286 89C0                        02            .byte	2
34287                                           ! 6131                        0xE0000000,
34288 89C1                      0000            .word	0
34289 89C3                      E000            .word	$E000
34290                                           ! 6132                               0,
34291 89C5                      0000            .word	0
34292 89C7                      0000            .word	0
34293                                           ! 6133                             0,
34294 89C9                      0000            .word	0
34295                                           ! 6134                                6400,
34296 89CB                      1900            .word	$1900
34297                                           ! 6135                             0,
34298 89CD                        00            .byte	0
34299                                           ! 6136                             0,
34300 89CE                        00            .byte	0
34301                                           ! 6137                           8,
34302 89CF                        08            .byte	8
34303                                           ! 6138                                16,
34304 89D0                        10            .byte	$10
34305                                           ! 6139                             8,
34306 89D1                        08            .byte	8
34307                                           ! 6140                                  8,
34308 89D2                        08            .byte	8
34309                                           ! 6141                            8,
34310 89D3                        08            .byte	8
34311                                           ! 6142                                 0,
34312 89D4                        00            .byte	0
34313                                           ! 6143                            8,
34314 89D5                        08            .byte	8
34315                                           ! 6144                                 
34316                                           ! 6144 24,
34317 89D6                        18            .byte	$18
34318                                           ! 6145                          0,
34319 89D7                      0000            .word	0
34320 89D9                      0000            .word	0
34321                                           ! 6146 } },
34322                                           ! 6147 { 0x0148,
34323 89DB                      0148            .word	$148
34324                                           ! 6148 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34325 89DD                      009B            .word	$9B
34326                                           ! 6149                           0x01 | 0x02 | 0x04,
34327 89DF                        07            .byte	7
34328                                           ! 6150                           0,
34329 89E0                        00            .byte	0
34330                                           ! 6151                           64,
34331 89E1                      0040            .word	$40
34332                                           ! 6152                    64,
34333 89E3                      0040            .word	$40
34334                                           ! 6153                        0xA000,
34335 89E5                      A000            .word	$A000
34336                                           ! 6154                        0x0000,
34337 89E7                      0000            .word	0
34338                                           ! 6155                       0,
34339 89E9                      0000            .word	0
34340 89EB                      0000            .word	0
34341                                           ! 6156                             1152,
34342 89ED                      0480            .word	$480
34343                                           ! 6157                        1152,
34344 89EF                      0480            .word	$480
34345                                           ! 6158                        864,
34346 89F1                      0360            .word	$360
34347                                           ! 6159                      8,
34348 89F3                        08            .byte	8
34349                                           ! 6160                      16,
34350 89F4                        10            .byte	$10
34351                                           ! 6161                           1,
34352 89F5                        01            .byte	1
34353                                           ! 6162                         8,
34354 89F6                        08            .byte	8
34355                                           ! 6163                          16,
34356 89F7                        10            .byte	$10
34357                                           ! 6164                        0x04,
34358 89F8                        04            .byte	4
34359                                           ! 6165                     0,
34360 89F9                        00            .byte	0
34361                                           ! 6166                               15,
34362 89FA                        0F            .byte	$F
34363                                           ! 6167                          0,
34364 89FB                        00            .byte	0
34365                                           ! 6168                        0,
34366 89FC                        00            .byte	0
34367                                           ! 6169                             0,
34368 89FD                        00            .byte	0
34369                                           ! 6170                          0,
34370 89FE                        00            .byte	0
34371                                           ! 6171                               0,
34372 89FF                        00            .byte	0
34373                                           ! 6172                         0,
34374 8A00                        00            .byte	0
34375                                           ! 6173                              0,
34376 8A01                        00            .byte	0
34377                                           ! 6174                         0,
34378 8A02                        00            .byte	0
34379                                           ! 6175                              0,
34380 8A03                        00            .byte	0
34381                                           ! 6176                                0,
34382 8A04                        00            .byte	0
34383                                           ! 6177                        0xE0000000,
34384 8A05                      0000            .word	0
34385 8A07                      E000            .word	$E000
34386                                           ! 6178                               0,
34387 8A09                      0000            .word	0
34388 8A0B                      0000            .word	0
34389                                           ! 6179                             0,
34390 8A0D                      0000            .word	0
34391                                           ! 6180                                1152,
34392 8A0F                      0480            .word	$480
34393                                           ! 6181                             0,
34394 8A11                        00            .byte	0
34395                                           ! 6182                             0,
34396 8A12                        00            .byte	0
34397                                           ! 6183                           0,
34398 8A13                        00            .byte	0
34399                                           ! 6184                                0,
34400 8A14                        00            .byte	0
34401                                           ! 6185                             0,
34402 8A15                        00            .byte	0
34403                                           ! 6186                                  0,
34404 8A16                        00            .byte	0
34405                                           ! 6187                            0,
34406 8A17                        00            .byte	0
34407                                           ! 6188                                 0,
34408 8A18                        00            .byte	0
34409                                           ! 6189                            0,
34410 8A19                        00            .byte	0
34411                                           ! 6190                                 0,
34412 8A1A                        00            .byte	0
34413                                           ! 6191                          0,
34414 8A1B                      0000            .word	0
34415 8A1D                      0000            .word	0
34416                                           ! 6192 } },
34417                                           ! 6193 { 0x0149,
34418 8A1F                      0149            .word	$149
34419                                           ! 6194 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34420 8A21                      009B            .word	$9B
34421                                           ! 6195                           0x01 | 0x02 | 0x04,
34422 8A23                        07            .byte	7
34423                                           ! 6196                           0,
34424 8A24                        00            .byte	0
34425                                           ! 6197                           64,
34426 8A25                      0040            .word	$40
34427                                           ! 6198                    64,
34428 8A27                      0040            .word	$40
34429                                           ! 6199                        0xA000,
34430 8A29                      A000            .word	$A000
34431                                           ! 6200                        0x0000,
34432 8A2B                      0000            .word	0
34433                                           ! 6201                       0,
34434 8A2D                      0000            .word	0
34435 8A2F                      0000            .word	0
34436                                           ! 6202                             2304,
34437 8A31                      0900            .word	$900
34438                                           ! 6203                        1152,
34439 8A33                      0480            .word	$480
34440                                           ! 6204                        864,
34441 8A35                      0360            .word	$360
34442                                           ! 6205                      8,
34443 8A37                        08            .byte	8
34444                                           ! 6206                      16,
34445 8A38                        10            .byte	$10
34446                                           ! 6207                           1,
34447 8A39                        01            .byte	1
34448                                           ! 6208                         15,
34449 8A3A                        0F            .byte	$F
34450                                           ! 6209                          31,
34451 8A3B                        1F            .byte	$1F
34452                                           ! 6210                        0x06,
34453 8A3C                        06            .byte	6
34454                                           ! 6211                     0,
34455 8A3D                        00            .byte	0
34456                                           ! 6212                               7,
34457 8A3E                        07            .byte	7
34458                                           ! 6213                          0,
34459 8A3F                        00            .byte	0
34460                                           ! 6214                        5,
34461 8A40                        05            .byte	5
34462                                           ! 6215     
34463                                           ! 6215                         10,
34464 8A41                        0A            .byte	$A
34465                                           ! 6216                          5,
34466 8A42                        05            .byte	5
34467                                           ! 6217                               5,
34468 8A43                        05            .byte	5
34469                                           ! 6218                         5,
34470 8A44                        05            .byte	5
34471                                           ! 6219                              0,
34472 8A45                        00            .byte	0
34473                                           ! 6220                         1,
34474 8A46                        01            .byte	1
34475                                           ! 6221                              15,
34476 8A47                        0F            .byte	$F
34477                                           ! 6222                                0,
34478 8A48                        00            .byte	0
34479                                           ! 6223                        0xE0000000,
34480 8A49                      0000            .word	0
34481 8A4B                      E000            .word	$E000
34482                                           ! 6224                               0,
34483 8A4D                      0000            .word	0
34484 8A4F                      0000            .word	0
34485                                           ! 6225                             0,
34486 8A51                      0000            .word	0
34487                                           ! 6226                                2304,
34488 8A53                      0900            .word	$900
34489                                           ! 6227                             0,
34490 8A55                        00            .byte	0
34491                                           ! 6228                             0,
34492 8A56                        00            .byte	0
34493                                           ! 6229                           5,
34494 8A57                        05            .byte	5
34495                                           ! 6230                                10,
34496 8A58                        0A            .byte	$A
34497                                           ! 6231                             5,
34498 8A59                        05            .byte	5
34499                                           ! 6232                                  5,
34500 8A5A                        05            .byte	5
34501                                           ! 6233                            5,
34502 8A5B                        05            .byte	5
34503                                           ! 6234                                 0,
34504 8A5C                        00            .byte	0
34505                                           ! 6235                            1,
34506 8A5D                        01            .byte	1
34507                                           ! 6236                                 15,
34508 8A5E                        0F            .byte	$F
34509                                           ! 6237                          0,
34510 8A5F                      0000            .word	0
34511 8A61                      0000            .word	0
34512                                           ! 6238 } },
34513                                           ! 6239 { 0x014a,
34514 8A63                      014A            .word	$14A
34515                                           ! 6240 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34516 8A65                      009B            .word	$9B
34517                                           ! 6241                           0x01 | 0x02 | 0x04,
34518 8A67                        07            .byte	7
34519                                           ! 6242                           0,
34520 8A68                        00            .byte	0
34521                                           ! 6243                           64,
34522 8A69                      0040            .word	$40
34523                                           ! 6244                    64,
34524 8A6B                      0040            .word	$40
34525                                           ! 6245                        0xA000,
34526 8A6D                      A000            .word	$A000
34527                                           ! 6246                        0x0000,
34528 8A6F                      0000            .word	0
34529                                           ! 6247                       0,
34530 8A71                      0000            .word	0
34531 8A73                      0000            .word	0
34532                                           ! 6248                             2304,
34533 8A75                      0900            .word	$900
34534                                           ! 6249                        1152,
34535 8A77                      0480            .word	$480
34536                                           ! 6250                        864,
34537 8A79                      0360            .word	$360
34538                                           ! 6251                      8,
34539 8A7B                        08            .byte	8
34540                                           ! 6252                      16,
34541 8A7C                        10            .byte	$10
34542                                           ! 6253                           1,
34543 8A7D                        01            .byte	1
34544                                           ! 6254                         16,
34545 8A7E                        10            .byte	$10
34546                                           ! 6255                          31,
34547 8A7F                        1F            .byte	$1F
34548                                           ! 6256                        0x06,
34549 8A80                        06            .byte	6
34550                                           ! 6257                     0,
34551 8A81                        00            .byte	0
34552                                           ! 6258                               7,
34553 8A82                        07            .byte	7
34554                                           ! 6259                          0,
34555 8A83                        00            .byte	0
34556                                           ! 6260                        5,
34557 8A84                        05            .byte	5
34558                                           ! 6261                             11,
34559 8A85                        0B            .byte	$B
34560                                           ! 6262                          6,
34561 8A86                        06            .byte	6
34562                                           ! 6263                               5,
34563 8A87                        05            .byte	5
34564                                           ! 6264                         5,
34565 8A88                        05            .byte	5
34566                                           ! 6265                              0,
34567 8A89                        00            .byte	0
34568                                           ! 6266                         0,
34569 8A8A                        00            .byte	0
34570                                           ! 6267                              0,
34571 8A8B                        00            .byte	0
34572                                           ! 6268                                0,
34573 8A8C                        00            .byte	0
34574                                           ! 6269                        0xE0000000,
34575 8A8D                      0000            .word	0
34576 8A8F                      E000            .word	$E000
34577                                           ! 6270                               0,
34578 8A91                      0000            .word	0
34579 8A93                      0000            .word	0
34580                                           ! 6271                             0,
34581 8A95                      0000            .word	0
34582                                           ! 6272                                2304,
34583 8A97                      0900            .word	$900
34584                                           ! 6273                             0,
34585 8A99                        00            .byte	0
34586                                           ! 6274                             0,
34587 8A9A                        00            .byte	0
34588                                           ! 6275                           5,
34589 8A9B                        05            .byte	5
34590                                           ! 6276                                11,
34591 8A9C                        0B            .byte	$B
34592                                           ! 6277                             6,
34593 8A9D                        06            .byte	6
34594                                           ! 6278                                  5,
34595 8A9E                        05            .byte	5
34596                                           ! 6279                            5,
34597 8A9F                        05            .byte	5
34598                                           ! 6280                                 0,
34599 8AA0                        00            .byte	0
34600                                           ! 6281                            0,
34601 8AA1                        00            .byte	0
34602                                           ! 6282         
34603                                           ! 6282                         0,
34604 8AA2                        00            .byte	0
34605                                           ! 6283                          0,
34606 8AA3                      0000            .word	0
34607 8AA5                      0000            .word	0
34608                                           ! 6284 } },
34609                                           ! 6285 { 0x014b,
34610 8AA7                      014B            .word	$14B
34611                                           ! 6286 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34612 8AA9                      009B            .word	$9B
34613                                           ! 6287                           0x01 | 0x02 | 0x04,
34614 8AAB                        07            .byte	7
34615                                           ! 6288                           0,
34616 8AAC                        00            .byte	0
34617                                           ! 6289                           64,
34618 8AAD                      0040            .word	$40
34619                                           ! 6290                    64,
34620 8AAF                      0040            .word	$40
34621                                           ! 6291                        0xA000,
34622 8AB1                      A000            .word	$A000
34623                                           ! 6292                        0x0000,
34624 8AB3                      0000            .word	0
34625                                           ! 6293                       0,
34626 8AB5                      0000            .word	0
34627 8AB7                      0000            .word	0
34628                                           ! 6294                             3456,
34629 8AB9                      0D80            .word	$D80
34630                                           ! 6295                        1152,
34631 8ABB                      0480            .word	$480
34632                                           ! 6296                        864,
34633 8ABD                      0360            .word	$360
34634                                           ! 6297                      8,
34635 8ABF                        08            .byte	8
34636                                           ! 6298                      16,
34637 8AC0                        10            .byte	$10
34638                                           ! 6299                           1,
34639 8AC1                        01            .byte	1
34640                                           ! 6300                         24,
34641 8AC2                        18            .byte	$18
34642                                           ! 6301                          46,
34643 8AC3                        2E            .byte	$2E
34644                                           ! 6302                        0x06,
34645 8AC4                        06            .byte	6
34646                                           ! 6303                     0,
34647 8AC5                        00            .byte	0
34648                                           ! 6304                               4,
34649 8AC6                        04            .byte	4
34650                                           ! 6305                          0,
34651 8AC7                        00            .byte	0
34652                                           ! 6306                        8,
34653 8AC8                        08            .byte	8
34654                                           ! 6307                             16,
34655 8AC9                        10            .byte	$10
34656                                           ! 6308                          8,
34657 8ACA                        08            .byte	8
34658                                           ! 6309                               8,
34659 8ACB                        08            .byte	8
34660                                           ! 6310                         8,
34661 8ACC                        08            .byte	8
34662                                           ! 6311                              0,
34663 8ACD                        00            .byte	0
34664                                           ! 6312                         0,
34665 8ACE                        00            .byte	0
34666                                           ! 6313                              0,
34667 8ACF                        00            .byte	0
34668                                           ! 6314                                0,
34669 8AD0                        00            .byte	0
34670                                           ! 6315                        0xE0000000,
34671 8AD1                      0000            .word	0
34672 8AD3                      E000            .word	$E000
34673                                           ! 6316                               0,
34674 8AD5                      0000            .word	0
34675 8AD7                      0000            .word	0
34676                                           ! 6317                             0,
34677 8AD9                      0000            .word	0
34678                                           ! 6318                                3456,
34679 8ADB                      0D80            .word	$D80
34680                                           ! 6319                             0,
34681 8ADD                        00            .byte	0
34682                                           ! 6320                             0,
34683 8ADE                        00            .byte	0
34684                                           ! 6321                           8,
34685 8ADF                        08            .byte	8
34686                                           ! 6322                                16,
34687 8AE0                        10            .byte	$10
34688                                           ! 6323                             8,
34689 8AE1                        08            .byte	8
34690                                           ! 6324                                  8,
34691 8AE2                        08            .byte	8
34692                                           ! 6325                            8,
34693 8AE3                        08            .byte	8
34694                                           ! 6326                                 0,
34695 8AE4                        00            .byte	0
34696                                           ! 6327                            0,
34697 8AE5                        00            .byte	0
34698                                           ! 6328                                 0,
34699 8AE6                        00            .byte	0
34700                                           ! 6329                          0,
34701 8AE7                      0000            .word	0
34702 8AE9                      0000            .word	0
34703                                           ! 6330 } },
34704                                           ! 6331 { 0x014c,
34705 8AEB                      014C            .word	$14C
34706                                           ! 6332 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34707 8AED                      009B            .word	$9B
34708                                           ! 6333                           0x01 | 0x02 | 0x04,
34709 8AEF                        07            .byte	7
34710                                           ! 6334                           0,
34711 8AF0                        00            .byte	0
34712                                           ! 6335                           64,
34713 8AF1                      0040            .word	$40
34714                                           ! 6336                    64,
34715 8AF3                      0040            .word	$40
34716                                           ! 6337                        0xA000,
34717 8AF5                      A000            .word	$A000
34718                                           ! 6338                        0x0000,
34719 8AF7                      0000            .word	0
34720                                           ! 6339                       0,
34721 8AF9                      0000            .word	0
34722 8AFB                      0000            .word	0
34723                                           ! 6340                             4608,
34724 8AFD                      1200            .word	$1200
34725                                           ! 6341                        1152,
34726 8AFF                      0480            .word	$480
34727                                           ! 6342                        864,
34728 8B01                      0360            .word	$360
34729                                           ! 6343                      8,
34730 8B03                        08            .byte	8
34731                                           ! 6344                      16,
34732 8B04                        10            .byte	$10
34733                                           ! 6345                           1,
34734 8B05                        01            .byte	1
34735                                           ! 6346                         32,
34736 8B06                        20            .byte	$20
34737                                           ! 6347                          61,
34738 8B07                        3D            .byte	$3D
34739                                           ! 6348                        0x06,
34740 8B08                        06            .byte	6
34741                                           ! 6349                     0,
34742 8B09                        00            .byte	0
34743                                           ! 6350                               3,
34744 8B0A                        03            .byte	3
34745                                           ! 6351                          0,
34746 8B0B                        00            .byte	0
34747                                           ! 6352      
34748                                           ! 6352                   8,
34749 8B0C                        08            .byte	8
34750                                           ! 6353                             16,
34751 8B0D                        10            .byte	$10
34752                                           ! 6354                          8,
34753 8B0E                        08            .byte	8
34754                                           ! 6355                               8,
34755 8B0F                        08            .byte	8
34756                                           ! 6356                         8,
34757 8B10                        08            .byte	8
34758                                           ! 6357                              0,
34759 8B11                        00            .byte	0
34760                                           ! 6358                         8,
34761 8B12                        08            .byte	8
34762                                           ! 6359                              24,
34763 8B13                        18            .byte	$18
34764                                           ! 6360                                0x02,
34765 8B14                        02            .byte	2
34766                                           ! 6361                        0xE0000000,
34767 8B15                      0000            .word	0
34768 8B17                      E000            .word	$E000
34769                                           ! 6362                               0,
34770 8B19                      0000            .word	0
34771 8B1B                      0000            .word	0
34772                                           ! 6363                             0,
34773 8B1D                      0000            .word	0
34774                                           ! 6364                                4608,
34775 8B1F                      1200            .word	$1200
34776                                           ! 6365                             0,
34777 8B21                        00            .byte	0
34778                                           ! 6366                             0,
34779 8B22                        00            .byte	0
34780                                           ! 6367                           8,
34781 8B23                        08            .byte	8
34782                                           ! 6368                                16,
34783 8B24                        10            .byte	$10
34784                                           ! 6369                             8,
34785 8B25                        08            .byte	8
34786                                           ! 6370                                  8,
34787 8B26                        08            .byte	8
34788                                           ! 6371                            8,
34789 8B27                        08            .byte	8
34790                                           ! 6372                                 0,
34791 8B28                        00            .byte	0
34792                                           ! 6373                            8,
34793 8B29                        08            .byte	8
34794                                           ! 6374                                 24,
34795 8B2A                        18            .byte	$18
34796                                           ! 6375                          0,
34797 8B2B                      0000            .word	0
34798 8B2D                      0000            .word	0
34799                                           ! 6376 } },
34800                                           ! 6377 { 0x0175,
34801 8B2F                      0175            .word	$175
34802                                           ! 6378 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34803 8B31                      009B            .word	$9B
34804                                           ! 6379                           0x01 | 0x02 | 0x04,
34805 8B33                        07            .byte	7
34806                                           ! 6380                           0,
34807 8B34                        00            .byte	0
34808                                           ! 6381                           64,
34809 8B35                      0040            .word	$40
34810                                           ! 6382                    64,
34811 8B37                      0040            .word	$40
34812                                           ! 6383                        0xA000,
34813 8B39                      A000            .word	$A000
34814                                           ! 6384                        0x0000,
34815 8B3B                      0000            .word	0
34816                                           ! 6385                       0,
34817 8B3D                      0000            .word	0
34818 8B3F                      0000            .word	0
34819                                           ! 6386                             2560,
34820 8B41                      0A00            .word	$A00
34821                                           ! 6387                        1280,
34822 8B43                      0500            .word	$500
34823                                           ! 6388                        768,
34824 8B45                      0300            .word	$300
34825                                           ! 6389                      8,
34826 8B47                        08            .byte	8
34827                                           ! 6390                      16,
34828 8B48                        10            .byte	$10
34829                                           ! 6391                           1,
34830 8B49                        01            .byte	1
34831                                           ! 6392                         16,
34832 8B4A                        10            .byte	$10
34833                                           ! 6393                          30,
34834 8B4B                        1E            .byte	$1E
34835                                           ! 6394                        0x06,
34836 8B4C                        06            .byte	6
34837                                           ! 6395                     0,
34838 8B4D                        00            .byte	0
34839                                           ! 6396                               7,
34840 8B4E                        07            .byte	7
34841                                           ! 6397                          0,
34842 8B4F                        00            .byte	0
34843                                           ! 6398                        5,
34844 8B50                        05            .byte	5
34845                                           ! 6399                             11,
34846 8B51                        0B            .byte	$B
34847                                           ! 6400                          6,
34848 8B52                        06            .byte	6
34849                                           ! 6401                               5,
34850 8B53                        05            .byte	5
34851                                           ! 6402                         5,
34852 8B54                        05            .byte	5
34853                                           ! 6403                              0,
34854 8B55                        00            .byte	0
34855                                           ! 6404                         0,
34856 8B56                        00            .byte	0
34857                                           ! 6405                              0,
34858 8B57                        00            .byte	0
34859                                           ! 6406                                0,
34860 8B58                        00            .byte	0
34861                                           ! 6407                        0xE0000000,
34862 8B59                      0000            .word	0
34863 8B5B                      E000            .word	$E000
34864                                           ! 6408                               0,
34865 8B5D                      0000            .word	0
34866 8B5F                      0000            .word	0
34867                                           ! 6409                             0,
34868 8B61                      0000            .word	0
34869                                           ! 6410                                2560,
34870 8B63                      0A00            .word	$A00
34871                                           ! 6411                             0,
34872 8B65                        00            .byte	0
34873                                           ! 6412                             0,
34874 8B66                        00            .byte	0
34875                                           ! 6413                           5,
34876 8B67                        05            .byte	5
34877                                           ! 6414                                11,
34878 8B68                        0B            .byte	$B
34879                                           ! 6415                             6,
34880 8B69                        06            .byte	6
34881                                           ! 6416                                  5,
34882 8B6A                        05            .byte	5
34883                                           ! 6417                            5,
34884 8B6B                        05            .byte	5
34885                                           ! 6418                                 0,
34886 8B6C                        00            .byte	0
34887                                           ! 6419           
34888                                           ! 6419                  0,
34889 8B6D                        00            .byte	0
34890                                           ! 6420                                 0,
34891 8B6E                        00            .byte	0
34892                                           ! 6421                          0,
34893 8B6F                      0000            .word	0
34894 8B71                      0000            .word	0
34895                                           ! 6422 } },
34896                                           ! 6423 { 0x0176,
34897 8B73                      0176            .word	$176
34898                                           ! 6424 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34899 8B75                      009B            .word	$9B
34900                                           ! 6425                           0x01 | 0x02 | 0x04,
34901 8B77                        07            .byte	7
34902                                           ! 6426                           0,
34903 8B78                        00            .byte	0
34904                                           ! 6427                           64,
34905 8B79                      0040            .word	$40
34906                                           ! 6428                    64,
34907 8B7B                      0040            .word	$40
34908                                           ! 6429                        0xA000,
34909 8B7D                      A000            .word	$A000
34910                                           ! 6430                        0x0000,
34911 8B7F                      0000            .word	0
34912                                           ! 6431                       0,
34913 8B81                      0000            .word	0
34914 8B83                      0000            .word	0
34915                                           ! 6432                             3840,
34916 8B85                      0F00            .word	$F00
34917                                           ! 6433                        1280,
34918 8B87                      0500            .word	$500
34919                                           ! 6434                        768,
34920 8B89                      0300            .word	$300
34921                                           ! 6435                      8,
34922 8B8B                        08            .byte	8
34923                                           ! 6436                      16,
34924 8B8C                        10            .byte	$10
34925                                           ! 6437                           1,
34926 8B8D                        01            .byte	1
34927                                           ! 6438                         24,
34928 8B8E                        18            .byte	$18
34929                                           ! 6439                          45,
34930 8B8F                        2D            .byte	$2D
34931                                           ! 6440                        0x06,
34932 8B90                        06            .byte	6
34933                                           ! 6441                     0,
34934 8B91                        00            .byte	0
34935                                           ! 6442                               4,
34936 8B92                        04            .byte	4
34937                                           ! 6443                          0,
34938 8B93                        00            .byte	0
34939                                           ! 6444                        8,
34940 8B94                        08            .byte	8
34941                                           ! 6445                             16,
34942 8B95                        10            .byte	$10
34943                                           ! 6446                          8,
34944 8B96                        08            .byte	8
34945                                           ! 6447                               8,
34946 8B97                        08            .byte	8
34947                                           ! 6448                         8,
34948 8B98                        08            .byte	8
34949                                           ! 6449                              0,
34950 8B99                        00            .byte	0
34951                                           ! 6450                         0,
34952 8B9A                        00            .byte	0
34953                                           ! 6451                              0,
34954 8B9B                        00            .byte	0
34955                                           ! 6452                                0,
34956 8B9C                        00            .byte	0
34957                                           ! 6453                        0xE0000000,
34958 8B9D                      0000            .word	0
34959 8B9F                      E000            .word	$E000
34960                                           ! 6454                               0,
34961 8BA1                      0000            .word	0
34962 8BA3                      0000            .word	0
34963                                           ! 6455                             0,
34964 8BA5                      0000            .word	0
34965                                           ! 6456                                3840,
34966 8BA7                      0F00            .word	$F00
34967                                           ! 6457                             0,
34968 8BA9                        00            .byte	0
34969                                           ! 6458                             0,
34970 8BAA                        00            .byte	0
34971                                           ! 6459                           8,
34972 8BAB                        08            .byte	8
34973                                           ! 6460                                16,
34974 8BAC                        10            .byte	$10
34975                                           ! 6461                             8,
34976 8BAD                        08            .byte	8
34977                                           ! 6462                                  8,
34978 8BAE                        08            .byte	8
34979                                           ! 6463                            8,
34980 8BAF                        08            .byte	8
34981                                           ! 6464                                 0,
34982 8BB0                        00            .byte	0
34983                                           ! 6465                            0,
34984 8BB1                        00            .byte	0
34985                                           ! 6466                                 0,
34986 8BB2                        00            .byte	0
34987                                           ! 6467                          0,
34988 8BB3                      0000            .word	0
34989 8BB5                      0000            .word	0
34990                                           ! 6468 } },
34991                                           ! 6469 { 0x0177,
34992 8BB7                      0177            .word	$177
34993                                           ! 6470 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34994 8BB9                      009B            .word	$9B
34995                                           ! 6471                           0x01 | 0x02 | 0x04,
34996 8BBB                        07            .byte	7
34997                                           ! 6472                           0,
34998 8BBC                        00            .byte	0
34999                                           ! 6473                           64,
35000 8BBD                      0040            .word	$40
35001                                           ! 6474                    64,
35002 8BBF                      0040            .word	$40
35003                                           ! 6475                        0xA000,
35004 8BC1                      A000            .word	$A000
35005                                           ! 6476                        0x0000,
35006 8BC3                      0000            .word	0
35007                                           ! 6477                       0,
35008 8BC5                      0000            .word	0
35009 8BC7                      0000            .word	0
35010                                           ! 6478                             5120,
35011 8BC9                      1400            .word	$1400
35012                                           ! 6479                        1280,
35013 8BCB                      0500            .word	$500
35014                                           ! 6480                        768,
35015 8BCD                      0300            .word	$300
35016                                           ! 6481                      8,
35017 8BCF                        08            .byte	8
35018                                           ! 6482                      16,
35019 8BD0                        10            .byte	$10
35020                                           ! 6483                           1,
35021 8BD1                        01            .byte	1
35022                                           ! 6484                         32,
35023 8BD2                        20            .byte	$20
35024                                           ! 6485                          60,
35025 8BD3                        3C            .byte	$3C
35026                                           ! 6486                        0x06,
35027 8BD4                        06            .byte	6
35028                                           ! 6487                     0,
35029 8BD5                        00            .byte	0
35030                                           ! 6488                               3,
35031 8BD6                        03            .byte	3
35032                                           ! 6489      
35033                                           ! 6489                     0,
35034 8BD7                        00            .byte	0
35035                                           ! 6490                        8,
35036 8BD8                        08            .byte	8
35037                                           ! 6491                             16,
35038 8BD9                        10            .byte	$10
35039                                           ! 6492                          8,
35040 8BDA                        08            .byte	8
35041                                           ! 6493                               8,
35042 8BDB                        08            .byte	8
35043                                           ! 6494                         8,
35044 8BDC                        08            .byte	8
35045                                           ! 6495                              0,
35046 8BDD                        00            .byte	0
35047                                           ! 6496                         8,
35048 8BDE                        08            .byte	8
35049                                           ! 6497                              24,
35050 8BDF                        18            .byte	$18
35051                                           ! 6498                                0x02,
35052 8BE0                        02            .byte	2
35053                                           ! 6499                        0xE0000000,
35054 8BE1                      0000            .word	0
35055 8BE3                      E000            .word	$E000
35056                                           ! 6500                               0,
35057 8BE5                      0000            .word	0
35058 8BE7                      0000            .word	0
35059                                           ! 6501                             0,
35060 8BE9                      0000            .word	0
35061                                           ! 6502                                5120,
35062 8BEB                      1400            .word	$1400
35063                                           ! 6503                             0,
35064 8BED                        00            .byte	0
35065                                           ! 6504                             0,
35066 8BEE                        00            .byte	0
35067                                           ! 6505                           8,
35068 8BEF                        08            .byte	8
35069                                           ! 6506                                16,
35070 8BF0                        10            .byte	$10
35071                                           ! 6507                             8,
35072 8BF1                        08            .byte	8
35073                                           ! 6508                                  8,
35074 8BF2                        08            .byte	8
35075                                           ! 6509                            8,
35076 8BF3                        08            .byte	8
35077                                           ! 6510                                 0,
35078 8BF4                        00            .byte	0
35079                                           ! 6511                            8,
35080 8BF5                        08            .byte	8
35081                                           ! 6512                                 24,
35082 8BF6                        18            .byte	$18
35083                                           ! 6513                          0,
35084 8BF7                      0000            .word	0
35085 8BF9                      0000            .word	0
35086                                           ! 6514 } },
35087                                           ! 6515 { 0x0178,
35088 8BFB                      0178            .word	$178
35089                                           ! 6516 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35090 8BFD                      009B            .word	$9B
35091                                           ! 6517                           0x01 | 0x02 | 0x04,
35092 8BFF                        07            .byte	7
35093                                           ! 6518                           0,
35094 8C00                        00            .byte	0
35095                                           ! 6519                           64,
35096 8C01                      0040            .word	$40
35097                                           ! 6520                    64,
35098 8C03                      0040            .word	$40
35099                                           ! 6521                        0xA000,
35100 8C05                      A000            .word	$A000
35101                                           ! 6522                        0x0000,
35102 8C07                      0000            .word	0
35103                                           ! 6523                       0,
35104 8C09                      0000            .word	0
35105 8C0B                      0000            .word	0
35106                                           ! 6524                             2560,
35107 8C0D                      0A00            .word	$A00
35108                                           ! 6525                        1280,
35109 8C0F                      0500            .word	$500
35110                                           ! 6526                        800,
35111 8C11                      0320            .word	$320
35112                                           ! 6527                      8,
35113 8C13                        08            .byte	8
35114                                           ! 6528                      16,
35115 8C14                        10            .byte	$10
35116                                           ! 6529                           1,
35117 8C15                        01            .byte	1
35118                                           ! 6530                         16,
35119 8C16                        10            .byte	$10
35120                                           ! 6531                          32,
35121 8C17                        20            .byte	$20
35122                                           ! 6532                        0x06,
35123 8C18                        06            .byte	6
35124                                           ! 6533                     0,
35125 8C19                        00            .byte	0
35126                                           ! 6534                               7,
35127 8C1A                        07            .byte	7
35128                                           ! 6535                          0,
35129 8C1B                        00            .byte	0
35130                                           ! 6536                        5,
35131 8C1C                        05            .byte	5
35132                                           ! 6537                             11,
35133 8C1D                        0B            .byte	$B
35134                                           ! 6538                          6,
35135 8C1E                        06            .byte	6
35136                                           ! 6539                               5,
35137 8C1F                        05            .byte	5
35138                                           ! 6540                         5,
35139 8C20                        05            .byte	5
35140                                           ! 6541                              0,
35141 8C21                        00            .byte	0
35142                                           ! 6542                         0,
35143 8C22                        00            .byte	0
35144                                           ! 6543                              0,
35145 8C23                        00            .byte	0
35146                                           ! 6544                                0,
35147 8C24                        00            .byte	0
35148                                           ! 6545                        0xE0000000,
35149 8C25                      0000            .word	0
35150 8C27                      E000            .word	$E000
35151                                           ! 6546                               0,
35152 8C29                      0000            .word	0
35153 8C2B                      0000            .word	0
35154                                           ! 6547                             0,
35155 8C2D                      0000            .word	0
35156                                           ! 6548                                2560,
35157 8C2F                      0A00            .word	$A00
35158                                           ! 6549                             0,
35159 8C31                        00            .byte	0
35160                                           ! 6550                             0,
35161 8C32                        00            .byte	0
35162                                           ! 6551                           5,
35163 8C33                        05            .byte	5
35164                                           ! 6552                                11,
35165 8C34                        0B            .byte	$B
35166                                           ! 6553                             6,
35167 8C35                        06            .byte	6
35168                                           ! 6554                                  5,
35169 8C36                        05            .byte	5
35170                                           ! 6555                            5,
35171 8C37                        05            .byte	5
35172                                           ! 6556                  
35173                                           ! 6556                0,
35174 8C38                        00            .byte	0
35175                                           ! 6557                            0,
35176 8C39                        00            .byte	0
35177                                           ! 6558                                 0,
35178 8C3A                        00            .byte	0
35179                                           ! 6559                          0,
35180 8C3B                      0000            .word	0
35181 8C3D                      0000            .word	0
35182                                           ! 6560 } },
35183                                           ! 6561 { 0x0179,
35184 8C3F                      0179            .word	$179
35185                                           ! 6562 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35186 8C41                      009B            .word	$9B
35187                                           ! 6563                           0x01 | 0x02 | 0x04,
35188 8C43                        07            .byte	7
35189                                           ! 6564                           0,
35190 8C44                        00            .byte	0
35191                                           ! 6565                           64,
35192 8C45                      0040            .word	$40
35193                                           ! 6566                    64,
35194 8C47                      0040            .word	$40
35195                                           ! 6567                        0xA000,
35196 8C49                      A000            .word	$A000
35197                                           ! 6568                        0x0000,
35198 8C4B                      0000            .word	0
35199                                           ! 6569                       0,
35200 8C4D                      0000            .word	0
35201 8C4F                      0000            .word	0
35202                                           ! 6570                             3840,
35203 8C51                      0F00            .word	$F00
35204                                           ! 6571                        1280,
35205 8C53                      0500            .word	$500
35206                                           ! 6572                        800,
35207 8C55                      0320            .word	$320
35208                                           ! 6573                      8,
35209 8C57                        08            .byte	8
35210                                           ! 6574                      16,
35211 8C58                        10            .byte	$10
35212                                           ! 6575                           1,
35213 8C59                        01            .byte	1
35214                                           ! 6576                         24,
35215 8C5A                        18            .byte	$18
35216                                           ! 6577                          47,
35217 8C5B                        2F            .byte	$2F
35218                                           ! 6578                        0x06,
35219 8C5C                        06            .byte	6
35220                                           ! 6579                     0,
35221 8C5D                        00            .byte	0
35222                                           ! 6580                               4,
35223 8C5E                        04            .byte	4
35224                                           ! 6581                          0,
35225 8C5F                        00            .byte	0
35226                                           ! 6582                        8,
35227 8C60                        08            .byte	8
35228                                           ! 6583                             16,
35229 8C61                        10            .byte	$10
35230                                           ! 6584                          8,
35231 8C62                        08            .byte	8
35232                                           ! 6585                               8,
35233 8C63                        08            .byte	8
35234                                           ! 6586                         8,
35235 8C64                        08            .byte	8
35236                                           ! 6587                              0,
35237 8C65                        00            .byte	0
35238                                           ! 6588                         0,
35239 8C66                        00            .byte	0
35240                                           ! 6589                              0,
35241 8C67                        00            .byte	0
35242                                           ! 6590                                0,
35243 8C68                        00            .byte	0
35244                                           ! 6591                        0xE0000000,
35245 8C69                      0000            .word	0
35246 8C6B                      E000            .word	$E000
35247                                           ! 6592                               0,
35248 8C6D                      0000            .word	0
35249 8C6F                      0000            .word	0
35250                                           ! 6593                             0,
35251 8C71                      0000            .word	0
35252                                           ! 6594                                3840,
35253 8C73                      0F00            .word	$F00
35254                                           ! 6595                             0,
35255 8C75                        00            .byte	0
35256                                           ! 6596                             0,
35257 8C76                        00            .byte	0
35258                                           ! 6597                           8,
35259 8C77                        08            .byte	8
35260                                           ! 6598                                16,
35261 8C78                        10            .byte	$10
35262                                           ! 6599                             8,
35263 8C79                        08            .byte	8
35264                                           ! 6600                                  8,
35265 8C7A                        08            .byte	8
35266                                           ! 6601                            8,
35267 8C7B                        08            .byte	8
35268                                           ! 6602                                 0,
35269 8C7C                        00            .byte	0
35270                                           ! 6603                            0,
35271 8C7D                        00            .byte	0
35272                                           ! 6604                                 0,
35273 8C7E                        00            .byte	0
35274                                           ! 6605                          0,
35275 8C7F                      0000            .word	0
35276 8C81                      0000            .word	0
35277                                           ! 6606 } },
35278                                           ! 6607 { 0x017a,
35279 8C83                      017A            .word	$17A
35280                                           ! 6608 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35281 8C85                      009B            .word	$9B
35282                                           ! 6609                           0x01 | 0x02 | 0x04,
35283 8C87                        07            .byte	7
35284                                           ! 6610                           0,
35285 8C88                        00            .byte	0
35286                                           ! 6611                           64,
35287 8C89                      0040            .word	$40
35288                                           ! 6612                    64,
35289 8C8B                      0040            .word	$40
35290                                           ! 6613                        0xA000,
35291 8C8D                      A000            .word	$A000
35292                                           ! 6614                        0x0000,
35293 8C8F                      0000            .word	0
35294                                           ! 6615                       0,
35295 8C91                      0000            .word	0
35296 8C93                      0000            .word	0
35297                                           ! 6616                             5120,
35298 8C95                      1400            .word	$1400
35299                                           ! 6617                        1280,
35300 8C97                      0500            .word	$500
35301                                           ! 6618                        800,
35302 8C99                      0320            .word	$320
35303                                           ! 6619                      8,
35304 8C9B                        08            .byte	8
35305                                           ! 6620                      16,
35306 8C9C                        10            .byte	$10
35307                                           ! 6621                           1,
35308 8C9D                        01            .byte	1
35309                                           ! 6622                         32,
35310 8C9E                        20            .byte	$20
35311                                           ! 6623                          63,
35312 8C9F                        3F            .byte	$3F
35313                                           ! 6624                        0x06,
35314 8CA0                        06            .byte	6
35315                                           ! 6625                     0,
35316 8CA1                        00            .byte	0
35317                                           ! 6626           
35318                                           ! 6626                     3,
35319 8CA2                        03            .byte	3
35320                                           ! 6627                          0,
35321 8CA3                        00            .byte	0
35322                                           ! 6628                        8,
35323 8CA4                        08            .byte	8
35324                                           ! 6629                             16,
35325 8CA5                        10            .byte	$10
35326                                           ! 6630                          8,
35327 8CA6                        08            .byte	8
35328                                           ! 6631                               8,
35329 8CA7                        08            .byte	8
35330                                           ! 6632                         8,
35331 8CA8                        08            .byte	8
35332                                           ! 6633                              0,
35333 8CA9                        00            .byte	0
35334                                           ! 6634                         8,
35335 8CAA                        08            .byte	8
35336                                           ! 6635                              24,
35337 8CAB                        18            .byte	$18
35338                                           ! 6636                                0x02,
35339 8CAC                        02            .byte	2
35340                                           ! 6637                        0xE0000000,
35341 8CAD                      0000            .word	0
35342 8CAF                      E000            .word	$E000
35343                                           ! 6638                               0,
35344 8CB1                      0000            .word	0
35345 8CB3                      0000            .word	0
35346                                           ! 6639                             0,
35347 8CB5                      0000            .word	0
35348                                           ! 6640                                5120,
35349 8CB7                      1400            .word	$1400
35350                                           ! 6641                             0,
35351 8CB9                        00            .byte	0
35352                                           ! 6642                             0,
35353 8CBA                        00            .byte	0
35354                                           ! 6643                           8,
35355 8CBB                        08            .byte	8
35356                                           ! 6644                                16,
35357 8CBC                        10            .byte	$10
35358                                           ! 6645                             8,
35359 8CBD                        08            .byte	8
35360                                           ! 6646                                  8,
35361 8CBE                        08            .byte	8
35362                                           ! 6647                            8,
35363 8CBF                        08            .byte	8
35364                                           ! 6648                                 0,
35365 8CC0                        00            .byte	0
35366                                           ! 6649                            8,
35367 8CC1                        08            .byte	8
35368                                           ! 6650                                 24,
35369 8CC2                        18            .byte	$18
35370                                           ! 6651                          0,
35371 8CC3                      0000            .word	0
35372 8CC5                      0000            .word	0
35373                                           ! 6652 } },
35374                                           ! 6653 { 0x017b,
35375 8CC7                      017B            .word	$17B
35376                                           ! 6654 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35377 8CC9                      009B            .word	$9B
35378                                           ! 6655                           0x01 | 0x02 | 0x04,
35379 8CCB                        07            .byte	7
35380                                           ! 6656                           0,
35381 8CCC                        00            .byte	0
35382                                           ! 6657                           64,
35383 8CCD                      0040            .word	$40
35384                                           ! 6658                    64,
35385 8CCF                      0040            .word	$40
35386                                           ! 6659                        0xA000,
35387 8CD1                      A000            .word	$A000
35388                                           ! 6660                        0x0000,
35389 8CD3                      0000            .word	0
35390                                           ! 6661                       0,
35391 8CD5                      0000            .word	0
35392 8CD7                      0000            .word	0
35393                                           ! 6662                             2560,
35394 8CD9                      0A00            .word	$A00
35395                                           ! 6663                        1280,
35396 8CDB                      0500            .word	$500
35397                                           ! 6664                        960,
35398 8CDD                      03C0            .word	$3C0
35399                                           ! 6665                      8,
35400 8CDF                        08            .byte	8
35401                                           ! 6666                      16,
35402 8CE0                        10            .byte	$10
35403                                           ! 6667                           1,
35404 8CE1                        01            .byte	1
35405                                           ! 6668                         16,
35406 8CE2                        10            .byte	$10
35407                                           ! 6669                          38,
35408 8CE3                        26            .byte	$26
35409                                           ! 6670                        0x06,
35410 8CE4                        06            .byte	6
35411                                           ! 6671                     0,
35412 8CE5                        00            .byte	0
35413                                           ! 6672                               5,
35414 8CE6                        05            .byte	5
35415                                           ! 6673                          0,
35416 8CE7                        00            .byte	0
35417                                           ! 6674                        5,
35418 8CE8                        05            .byte	5
35419                                           ! 6675                             11,
35420 8CE9                        0B            .byte	$B
35421                                           ! 6676                          6,
35422 8CEA                        06            .byte	6
35423                                           ! 6677                               5,
35424 8CEB                        05            .byte	5
35425                                           ! 6678                         5,
35426 8CEC                        05            .byte	5
35427                                           ! 6679                              0,
35428 8CED                        00            .byte	0
35429                                           ! 6680                         0,
35430 8CEE                        00            .byte	0
35431                                           ! 6681                              0,
35432 8CEF                        00            .byte	0
35433                                           ! 6682                                0,
35434 8CF0                        00            .byte	0
35435                                           ! 6683                        0xE0000000,
35436 8CF1                      0000            .word	0
35437 8CF3                      E000            .word	$E000
35438                                           ! 6684                               0,
35439 8CF5                      0000            .word	0
35440 8CF7                      0000            .word	0
35441                                           ! 6685                             0,
35442 8CF9                      0000            .word	0
35443                                           ! 6686                                2560,
35444 8CFB                      0A00            .word	$A00
35445                                           ! 6687                             0,
35446 8CFD                        00            .byte	0
35447                                           ! 6688                             0,
35448 8CFE                        00            .byte	0
35449                                           ! 6689                           5,
35450 8CFF                        05            .byte	5
35451                                           ! 6690                                11,
35452 8D00                        0B            .byte	$B
35453                                           ! 6691                             6,
35454 8D01                        06            .byte	6
35455                                           ! 6692                                  5,
35456 8D02                        05            .byte	5
35457                                           ! 6693                    
35458                                           ! 6693         5,
35459 8D03                        05            .byte	5
35460                                           ! 6694                                 0,
35461 8D04                        00            .byte	0
35462                                           ! 6695                            0,
35463 8D05                        00            .byte	0
35464                                           ! 6696                                 0,
35465 8D06                        00            .byte	0
35466                                           ! 6697                          0,
35467 8D07                      0000            .word	0
35468 8D09                      0000            .word	0
35469                                           ! 6698 } },
35470                                           ! 6699 { 0x017c,
35471 8D0B                      017C            .word	$17C
35472                                           ! 6700 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35473 8D0D                      009B            .word	$9B
35474                                           ! 6701                           0x01 | 0x02 | 0x04,
35475 8D0F                        07            .byte	7
35476                                           ! 6702                           0,
35477 8D10                        00            .byte	0
35478                                           ! 6703                           64,
35479 8D11                      0040            .word	$40
35480                                           ! 6704                    64,
35481 8D13                      0040            .word	$40
35482                                           ! 6705                        0xA000,
35483 8D15                      A000            .word	$A000
35484                                           ! 6706                        0x0000,
35485 8D17                      0000            .word	0
35486                                           ! 6707                       0,
35487 8D19                      0000            .word	0
35488 8D1B                      0000            .word	0
35489                                           ! 6708                             3840,
35490 8D1D                      0F00            .word	$F00
35491                                           ! 6709                        1280,
35492 8D1F                      0500            .word	$500
35493                                           ! 6710                        960,
35494 8D21                      03C0            .word	$3C0
35495                                           ! 6711                      8,
35496 8D23                        08            .byte	8
35497                                           ! 6712                      16,
35498 8D24                        10            .byte	$10
35499                                           ! 6713                           1,
35500 8D25                        01            .byte	1
35501                                           ! 6714                         24,
35502 8D26                        18            .byte	$18
35503                                           ! 6715                          57,
35504 8D27                        39            .byte	$39
35505                                           ! 6716                        0x06,
35506 8D28                        06            .byte	6
35507                                           ! 6717                     0,
35508 8D29                        00            .byte	0
35509                                           ! 6718                               3,
35510 8D2A                        03            .byte	3
35511                                           ! 6719                          0,
35512 8D2B                        00            .byte	0
35513                                           ! 6720                        8,
35514 8D2C                        08            .byte	8
35515                                           ! 6721                             16,
35516 8D2D                        10            .byte	$10
35517                                           ! 6722                          8,
35518 8D2E                        08            .byte	8
35519                                           ! 6723                               8,
35520 8D2F                        08            .byte	8
35521                                           ! 6724                         8,
35522 8D30                        08            .byte	8
35523                                           ! 6725                              0,
35524 8D31                        00            .byte	0
35525                                           ! 6726                         0,
35526 8D32                        00            .byte	0
35527                                           ! 6727                              0,
35528 8D33                        00            .byte	0
35529                                           ! 6728                                0,
35530 8D34                        00            .byte	0
35531                                           ! 6729                        0xE0000000,
35532 8D35                      0000            .word	0
35533 8D37                      E000            .word	$E000
35534                                           ! 6730                               0,
35535 8D39                      0000            .word	0
35536 8D3B                      0000            .word	0
35537                                           ! 6731                             0,
35538 8D3D                      0000            .word	0
35539                                           ! 6732                                3840,
35540 8D3F                      0F00            .word	$F00
35541                                           ! 6733                             0,
35542 8D41                        00            .byte	0
35543                                           ! 6734                             0,
35544 8D42                        00            .byte	0
35545                                           ! 6735                           8,
35546 8D43                        08            .byte	8
35547                                           ! 6736                                16,
35548 8D44                        10            .byte	$10
35549                                           ! 6737                             8,
35550 8D45                        08            .byte	8
35551                                           ! 6738                                  8,
35552 8D46                        08            .byte	8
35553                                           ! 6739                            8,
35554 8D47                        08            .byte	8
35555                                           ! 6740                                 0,
35556 8D48                        00            .byte	0
35557                                           ! 6741                            0,
35558 8D49                        00            .byte	0
35559                                           ! 6742                                 0,
35560 8D4A                        00            .byte	0
35561                                           ! 6743                          0,
35562 8D4B                      0000            .word	0
35563 8D4D                      0000            .word	0
35564                                           ! 6744 } },
35565                                           ! 6745 { 0x017d,
35566 8D4F                      017D            .word	$17D
35567                                           ! 6746 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35568 8D51                      009B            .word	$9B
35569                                           ! 6747                           0x01 | 0x02 | 0x04,
35570 8D53                        07            .byte	7
35571                                           ! 6748                           0,
35572 8D54                        00            .byte	0
35573                                           ! 6749                           64,
35574 8D55                      0040            .word	$40
35575                                           ! 6750                    64,
35576 8D57                      0040            .word	$40
35577                                           ! 6751                        0xA000,
35578 8D59                      A000            .word	$A000
35579                                           ! 6752                        0x0000,
35580 8D5B                      0000            .word	0
35581                                           ! 6753                       0,
35582 8D5D                      0000            .word	0
35583 8D5F                      0000            .word	0
35584                                           ! 6754                             5120,
35585 8D61                      1400            .word	$1400
35586                                           ! 6755                        1280,
35587 8D63                      0500            .word	$500
35588                                           ! 6756                        960,
35589 8D65                      03C0            .word	$3C0
35590                                           ! 6757                      8,
35591 8D67                        08            .byte	8
35592                                           ! 6758                      16,
35593 8D68                        10            .byte	$10
35594                                           ! 6759                           1,
35595 8D69                        01            .byte	1
35596                                           ! 6760                         32,
35597 8D6A                        20            .byte	$20
35598                                           ! 6761                          75,
35599 8D6B                        4B            .byte	$4B
35600                                           ! 6762                        0x06,
35601 8D6C                        06            .byte	6
35602                                           ! 6763      
35603                                           ! 6763                0,
35604 8D6D                        00            .byte	0
35605                                           ! 6764                               2,
35606 8D6E                        02            .byte	2
35607                                           ! 6765                          0,
35608 8D6F                        00            .byte	0
35609                                           ! 6766                        8,
35610 8D70                        08            .byte	8
35611                                           ! 6767                             16,
35612 8D71                        10            .byte	$10
35613                                           ! 6768                          8,
35614 8D72                        08            .byte	8
35615                                           ! 6769                               8,
35616 8D73                        08            .byte	8
35617                                           ! 6770                         8,
35618 8D74                        08            .byte	8
35619                                           ! 6771                              0,
35620 8D75                        00            .byte	0
35621                                           ! 6772                         8,
35622 8D76                        08            .byte	8
35623                                           ! 6773                              24,
35624 8D77                        18            .byte	$18
35625                                           ! 6774                                0x02,
35626 8D78                        02            .byte	2
35627                                           ! 6775                        0xE0000000,
35628 8D79                      0000            .word	0
35629 8D7B                      E000            .word	$E000
35630                                           ! 6776                               0,
35631 8D7D                      0000            .word	0
35632 8D7F                      0000            .word	0
35633                                           ! 6777                             0,
35634 8D81                      0000            .word	0
35635                                           ! 6778                                5120,
35636 8D83                      1400            .word	$1400
35637                                           ! 6779                             0,
35638 8D85                        00            .byte	0
35639                                           ! 6780                             0,
35640 8D86                        00            .byte	0
35641                                           ! 6781                           8,
35642 8D87                        08            .byte	8
35643                                           ! 6782                                16,
35644 8D88                        10            .byte	$10
35645                                           ! 6783                             8,
35646 8D89                        08            .byte	8
35647                                           ! 6784                                  8,
35648 8D8A                        08            .byte	8
35649                                           ! 6785                            8,
35650 8D8B                        08            .byte	8
35651                                           ! 6786                                 0,
35652 8D8C                        00            .byte	0
35653                                           ! 6787                            8,
35654 8D8D                        08            .byte	8
35655                                           ! 6788                                 24,
35656 8D8E                        18            .byte	$18
35657                                           ! 6789                          0,
35658 8D8F                      0000            .word	0
35659 8D91                      0000            .word	0
35660                                           ! 6790 } },
35661                                           ! 6791 { 0x017e,
35662 8D93                      017E            .word	$17E
35663                                           ! 6792 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35664 8D95                      009B            .word	$9B
35665                                           ! 6793                           0x01 | 0x02 | 0x04,
35666 8D97                        07            .byte	7
35667                                           ! 6794                           0,
35668 8D98                        00            .byte	0
35669                                           ! 6795                           64,
35670 8D99                      0040            .word	$40
35671                                           ! 6796                    64,
35672 8D9B                      0040            .word	$40
35673                                           ! 6797                        0xA000,
35674 8D9D                      A000            .word	$A000
35675                                           ! 6798                        0x0000,
35676 8D9F                      0000            .word	0
35677                                           ! 6799                       0,
35678 8DA1                      0000            .word	0
35679 8DA3                      0000            .word	0
35680                                           ! 6800                             2880,
35681 8DA5                      0B40            .word	$B40
35682                                           ! 6801                        1440,
35683 8DA7                      05A0            .word	$5A0
35684                                           ! 6802                        900,
35685 8DA9                      0384            .word	$384
35686                                           ! 6803                      8,
35687 8DAB                        08            .byte	8
35688                                           ! 6804                      16,
35689 8DAC                        10            .byte	$10
35690                                           ! 6805                           1,
35691 8DAD                        01            .byte	1
35692                                           ! 6806                         16,
35693 8DAE                        10            .byte	$10
35694                                           ! 6807                          40,
35695 8DAF                        28            .byte	$28
35696                                           ! 6808                        0x06,
35697 8DB0                        06            .byte	6
35698                                           ! 6809                     0,
35699 8DB1                        00            .byte	0
35700                                           ! 6810                               5,
35701 8DB2                        05            .byte	5
35702                                           ! 6811                          0,
35703 8DB3                        00            .byte	0
35704                                           ! 6812                        5,
35705 8DB4                        05            .byte	5
35706                                           ! 6813                             11,
35707 8DB5                        0B            .byte	$B
35708                                           ! 6814                          6,
35709 8DB6                        06            .byte	6
35710                                           ! 6815                               5,
35711 8DB7                        05            .byte	5
35712                                           ! 6816                         5,
35713 8DB8                        05            .byte	5
35714                                           ! 6817                              0,
35715 8DB9                        00            .byte	0
35716                                           ! 6818                         0,
35717 8DBA                        00            .byte	0
35718                                           ! 6819                              0,
35719 8DBB                        00            .byte	0
35720                                           ! 6820                                0,
35721 8DBC                        00            .byte	0
35722                                           ! 6821                        0xE0000000,
35723 8DBD                      0000            .word	0
35724 8DBF                      E000            .word	$E000
35725                                           ! 6822                               0,
35726 8DC1                      0000            .word	0
35727 8DC3                      0000            .word	0
35728                                           ! 6823                             0,
35729 8DC5                      0000            .word	0
35730                                           ! 6824                                2880,
35731 8DC7                      0B40            .word	$B40
35732                                           ! 6825                             0,
35733 8DC9                        00            .byte	0
35734                                           ! 6826                             0,
35735 8DCA                        00            .byte	0
35736                                           ! 6827                           5,
35737 8DCB                        05            .byte	5
35738                                           ! 6828                                11,
35739 8DCC                        0B            .byte	$B
35740                                           ! 6829                             6,
35741 8DCD                        06            .byte	6
35742                                           ! 6830                            
35743                                           ! 6830       5,
35744 8DCE                        05            .byte	5
35745                                           ! 6831                            5,
35746 8DCF                        05            .byte	5
35747                                           ! 6832                                 0,
35748 8DD0                        00            .byte	0
35749                                           ! 6833                            0,
35750 8DD1                        00            .byte	0
35751                                           ! 6834                                 0,
35752 8DD2                        00            .byte	0
35753                                           ! 6835                          0,
35754 8DD3                      0000            .word	0
35755 8DD5                      0000            .word	0
35756                                           ! 6836 } },
35757                                           ! 6837 { 0x017f,
35758 8DD7                      017F            .word	$17F
35759                                           ! 6838 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35760 8DD9                      009B            .word	$9B
35761                                           ! 6839                           0x01 | 0x02 | 0x04,
35762 8DDB                        07            .byte	7
35763                                           ! 6840                           0,
35764 8DDC                        00            .byte	0
35765                                           ! 6841                           64,
35766 8DDD                      0040            .word	$40
35767                                           ! 6842                    64,
35768 8DDF                      0040            .word	$40
35769                                           ! 6843                        0xA000,
35770 8DE1                      A000            .word	$A000
35771                                           ! 6844                        0x0000,
35772 8DE3                      0000            .word	0
35773                                           ! 6845                       0,
35774 8DE5                      0000            .word	0
35775 8DE7                      0000            .word	0
35776                                           ! 6846                             4320,
35777 8DE9                      10E0            .word	$10E0
35778                                           ! 6847                        1440,
35779 8DEB                      05A0            .word	$5A0
35780                                           ! 6848                        900,
35781 8DED                      0384            .word	$384
35782                                           ! 6849                      8,
35783 8DEF                        08            .byte	8
35784                                           ! 6850                      16,
35785 8DF0                        10            .byte	$10
35786                                           ! 6851                           1,
35787 8DF1                        01            .byte	1
35788                                           ! 6852                         24,
35789 8DF2                        18            .byte	$18
35790                                           ! 6853                          60,
35791 8DF3                        3C            .byte	$3C
35792                                           ! 6854                        0x06,
35793 8DF4                        06            .byte	6
35794                                           ! 6855                     0,
35795 8DF5                        00            .byte	0
35796                                           ! 6856                               3,
35797 8DF6                        03            .byte	3
35798                                           ! 6857                          0,
35799 8DF7                        00            .byte	0
35800                                           ! 6858                        8,
35801 8DF8                        08            .byte	8
35802                                           ! 6859                             16,
35803 8DF9                        10            .byte	$10
35804                                           ! 6860                          8,
35805 8DFA                        08            .byte	8
35806                                           ! 6861                               8,
35807 8DFB                        08            .byte	8
35808                                           ! 6862                         8,
35809 8DFC                        08            .byte	8
35810                                           ! 6863                              0,
35811 8DFD                        00            .byte	0
35812                                           ! 6864                         0,
35813 8DFE                        00            .byte	0
35814                                           ! 6865                              0,
35815 8DFF                        00            .byte	0
35816                                           ! 6866                                0,
35817 8E00                        00            .byte	0
35818                                           ! 6867                        0xE0000000,
35819 8E01                      0000            .word	0
35820 8E03                      E000            .word	$E000
35821                                           ! 6868                               0,
35822 8E05                      0000            .word	0
35823 8E07                      0000            .word	0
35824                                           ! 6869                             0,
35825 8E09                      0000            .word	0
35826                                           ! 6870                                4320,
35827 8E0B                      10E0            .word	$10E0
35828                                           ! 6871                             0,
35829 8E0D                        00            .byte	0
35830                                           ! 6872                             0,
35831 8E0E                        00            .byte	0
35832                                           ! 6873                           8,
35833 8E0F                        08            .byte	8
35834                                           ! 6874                                16,
35835 8E10                        10            .byte	$10
35836                                           ! 6875                             8,
35837 8E11                        08            .byte	8
35838                                           ! 6876                                  8,
35839 8E12                        08            .byte	8
35840                                           ! 6877                            8,
35841 8E13                        08            .byte	8
35842                                           ! 6878                                 0,
35843 8E14                        00            .byte	0
35844                                           ! 6879                            0,
35845 8E15                        00            .byte	0
35846                                           ! 6880                                 0,
35847 8E16                        00            .byte	0
35848                                           ! 6881                          0,
35849 8E17                      0000            .word	0
35850 8E19                      0000            .word	0
35851                                           ! 6882 } },
35852                                           ! 6883 { 0x0180,
35853 8E1B                      0180            .word	$180
35854                                           ! 6884 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35855 8E1D                      009B            .word	$9B
35856                                           ! 6885                           0x01 | 0x02 | 0x04,
35857 8E1F                        07            .byte	7
35858                                           ! 6886                           0,
35859 8E20                        00            .byte	0
35860                                           ! 6887                           64,
35861 8E21                      0040            .word	$40
35862                                           ! 6888                    64,
35863 8E23                      0040            .word	$40
35864                                           ! 6889                        0xA000,
35865 8E25                      A000            .word	$A000
35866                                           ! 6890                        0x0000,
35867 8E27                      0000            .word	0
35868                                           ! 6891                       0,
35869 8E29                      0000            .word	0
35870 8E2B                      0000            .word	0
35871                                           ! 6892                             5760,
35872 8E2D                      1680            .word	$1680
35873                                           ! 6893                        1440,
35874 8E2F                      05A0            .word	$5A0
35875                                           ! 6894                        900,
35876 8E31                      0384            .word	$384
35877                                           ! 6895                      8,
35878 8E33                        08            .byte	8
35879                                           ! 6896                      16,
35880 8E34                        10            .byte	$10
35881                                           ! 6897                           1,
35882 8E35                        01            .byte	1
35883                                           ! 6898                         32,
35884 8E36                        20            .byte	$20
35885                                           ! 6899                          80,
35886 8E37                        50            .byte	$50
35887                                           ! 6900       
35888                                           ! 6900                  0x06,
35889 8E38                        06            .byte	6
35890                                           ! 6901                     0,
35891 8E39                        00            .byte	0
35892                                           ! 6902                               2,
35893 8E3A                        02            .byte	2
35894                                           ! 6903                          0,
35895 8E3B                        00            .byte	0
35896                                           ! 6904                        8,
35897 8E3C                        08            .byte	8
35898                                           ! 6905                             16,
35899 8E3D                        10            .byte	$10
35900                                           ! 6906                          8,
35901 8E3E                        08            .byte	8
35902                                           ! 6907                               8,
35903 8E3F                        08            .byte	8
35904                                           ! 6908                         8,
35905 8E40                        08            .byte	8
35906                                           ! 6909                              0,
35907 8E41                        00            .byte	0
35908                                           ! 6910                         8,
35909 8E42                        08            .byte	8
35910                                           ! 6911                              24,
35911 8E43                        18            .byte	$18
35912                                           ! 6912                                0x02,
35913 8E44                        02            .byte	2
35914                                           ! 6913                        0xE0000000,
35915 8E45                      0000            .word	0
35916 8E47                      E000            .word	$E000
35917                                           ! 6914                               0,
35918 8E49                      0000            .word	0
35919 8E4B                      0000            .word	0
35920                                           ! 6915                             0,
35921 8E4D                      0000            .word	0
35922                                           ! 6916                                5760,
35923 8E4F                      1680            .word	$1680
35924                                           ! 6917                             0,
35925 8E51                        00            .byte	0
35926                                           ! 6918                             0,
35927 8E52                        00            .byte	0
35928                                           ! 6919                           8,
35929 8E53                        08            .byte	8
35930                                           ! 6920                                16,
35931 8E54                        10            .byte	$10
35932                                           ! 6921                             8,
35933 8E55                        08            .byte	8
35934                                           ! 6922                                  8,
35935 8E56                        08            .byte	8
35936                                           ! 6923                            8,
35937 8E57                        08            .byte	8
35938                                           ! 6924                                 0,
35939 8E58                        00            .byte	0
35940                                           ! 6925                            8,
35941 8E59                        08            .byte	8
35942                                           ! 6926                                 24,
35943 8E5A                        18            .byte	$18
35944                                           ! 6927                          0,
35945 8E5B                      0000            .word	0
35946 8E5D                      0000            .word	0
35947                                           ! 6928 } },
35948                                           ! 6929 { 0x0181,
35949 8E5F                      0181            .word	$181
35950                                           ! 6930 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35951 8E61                      009B            .word	$9B
35952                                           ! 6931                           0x01 | 0x02 | 0x04,
35953 8E63                        07            .byte	7
35954                                           ! 6932                           0,
35955 8E64                        00            .byte	0
35956                                           ! 6933                           64,
35957 8E65                      0040            .word	$40
35958                                           ! 6934                    64,
35959 8E67                      0040            .word	$40
35960                                           ! 6935                        0xA000,
35961 8E69                      A000            .word	$A000
35962                                           ! 6936                        0x0000,
35963 8E6B                      0000            .word	0
35964                                           ! 6937                       0,
35965 8E6D                      0000            .word	0
35966 8E6F                      0000            .word	0
35967                                           ! 6938                             2800,
35968 8E71                      0AF0            .word	$AF0
35969                                           ! 6939                        1400,
35970 8E73                      0578            .word	$578
35971                                           ! 6940                        1050,
35972 8E75                      041A            .word	$41A
35973                                           ! 6941                      8,
35974 8E77                        08            .byte	8
35975                                           ! 6942                      16,
35976 8E78                        10            .byte	$10
35977                                           ! 6943                           1,
35978 8E79                        01            .byte	1
35979                                           ! 6944                         16,
35980 8E7A                        10            .byte	$10
35981                                           ! 6945                          45,
35982 8E7B                        2D            .byte	$2D
35983                                           ! 6946                        0x06,
35984 8E7C                        06            .byte	6
35985                                           ! 6947                     0,
35986 8E7D                        00            .byte	0
35987                                           ! 6948                               4,
35988 8E7E                        04            .byte	4
35989                                           ! 6949                          0,
35990 8E7F                        00            .byte	0
35991                                           ! 6950                        5,
35992 8E80                        05            .byte	5
35993                                           ! 6951                             11,
35994 8E81                        0B            .byte	$B
35995                                           ! 6952                          6,
35996 8E82                        06            .byte	6
35997                                           ! 6953                               5,
35998 8E83                        05            .byte	5
35999                                           ! 6954                         5,
36000 8E84                        05            .byte	5
36001                                           ! 6955                              0,
36002 8E85                        00            .byte	0
36003                                           ! 6956                         0,
36004 8E86                        00            .byte	0
36005                                           ! 6957                              0,
36006 8E87                        00            .byte	0
36007                                           ! 6958                                0,
36008 8E88                        00            .byte	0
36009                                           ! 6959                        0xE0000000,
36010 8E89                      0000            .word	0
36011 8E8B                      E000            .word	$E000
36012                                           ! 6960                               0,
36013 8E8D                      0000            .word	0
36014 8E8F                      0000            .word	0
36015                                           ! 6961                             0,
36016 8E91                      0000            .word	0
36017                                           ! 6962                                2800,
36018 8E93                      0AF0            .word	$AF0
36019                                           ! 6963                             0,
36020 8E95                        00            .byte	0
36021                                           ! 6964                             0,
36022 8E96                        00            .byte	0
36023                                           ! 6965                           5,
36024 8E97                        05            .byte	5
36025                                           ! 6966                                11,
36026 8E98                        0B            .byte	$B
36027                                           ! 6967                             6
36028                                           ! 6967 ,
36029 8E99                        06            .byte	6
36030                                           ! 6968                                  5,
36031 8E9A                        05            .byte	5
36032                                           ! 6969                            5,
36033 8E9B                        05            .byte	5
36034                                           ! 6970                                 0,
36035 8E9C                        00            .byte	0
36036                                           ! 6971                            0,
36037 8E9D                        00            .byte	0
36038                                           ! 6972                                 0,
36039 8E9E                        00            .byte	0
36040                                           ! 6973                          0,
36041 8E9F                      0000            .word	0
36042 8EA1                      0000            .word	0
36043                                           ! 6974 } },
36044                                           ! 6975 { 0x0182,
36045 8EA3                      0182            .word	$182
36046                                           ! 6976 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36047 8EA5                      009B            .word	$9B
36048                                           ! 6977                           0x01 | 0x02 | 0x04,
36049 8EA7                        07            .byte	7
36050                                           ! 6978                           0,
36051 8EA8                        00            .byte	0
36052                                           ! 6979                           64,
36053 8EA9                      0040            .word	$40
36054                                           ! 6980                    64,
36055 8EAB                      0040            .word	$40
36056                                           ! 6981                        0xA000,
36057 8EAD                      A000            .word	$A000
36058                                           ! 6982                        0x0000,
36059 8EAF                      0000            .word	0
36060                                           ! 6983                       0,
36061 8EB1                      0000            .word	0
36062 8EB3                      0000            .word	0
36063                                           ! 6984                             4200,
36064 8EB5                      1068            .word	$1068
36065                                           ! 6985                        1400,
36066 8EB7                      0578            .word	$578
36067                                           ! 6986                        1050,
36068 8EB9                      041A            .word	$41A
36069                                           ! 6987                      8,
36070 8EBB                        08            .byte	8
36071                                           ! 6988                      16,
36072 8EBC                        10            .byte	$10
36073                                           ! 6989                           1,
36074 8EBD                        01            .byte	1
36075                                           ! 6990                         24,
36076 8EBE                        18            .byte	$18
36077                                           ! 6991                          68,
36078 8EBF                        44            .byte	$44
36079                                           ! 6992                        0x06,
36080 8EC0                        06            .byte	6
36081                                           ! 6993                     0,
36082 8EC1                        00            .byte	0
36083                                           ! 6994                               2,
36084 8EC2                        02            .byte	2
36085                                           ! 6995                          0,
36086 8EC3                        00            .byte	0
36087                                           ! 6996                        8,
36088 8EC4                        08            .byte	8
36089                                           ! 6997                             16,
36090 8EC5                        10            .byte	$10
36091                                           ! 6998                          8,
36092 8EC6                        08            .byte	8
36093                                           ! 6999                               8,
36094 8EC7                        08            .byte	8
36095                                           ! 7000                         8,
36096 8EC8                        08            .byte	8
36097                                           ! 7001                              0,
36098 8EC9                        00            .byte	0
36099                                           ! 7002                         0,
36100 8ECA                        00            .byte	0
36101                                           ! 7003                              0,
36102 8ECB                        00            .byte	0
36103                                           ! 7004                                0,
36104 8ECC                        00            .byte	0
36105                                           ! 7005                        0xE0000000,
36106 8ECD                      0000            .word	0
36107 8ECF                      E000            .word	$E000
36108                                           ! 7006                               0,
36109 8ED1                      0000            .word	0
36110 8ED3                      0000            .word	0
36111                                           ! 7007                             0,
36112 8ED5                      0000            .word	0
36113                                           ! 7008                                4200,
36114 8ED7                      1068            .word	$1068
36115                                           ! 7009                             0,
36116 8ED9                        00            .byte	0
36117                                           ! 7010                             0,
36118 8EDA                        00            .byte	0
36119                                           ! 7011                           8,
36120 8EDB                        08            .byte	8
36121                                           ! 7012                                16,
36122 8EDC                        10            .byte	$10
36123                                           ! 7013                             8,
36124 8EDD                        08            .byte	8
36125                                           ! 7014                                  8,
36126 8EDE                        08            .byte	8
36127                                           ! 7015                            8,
36128 8EDF                        08            .byte	8
36129                                           ! 7016                                 0,
36130 8EE0                        00            .byte	0
36131                                           ! 7017                            0,
36132 8EE1                        00            .byte	0
36133                                           ! 7018                                 0,
36134 8EE2                        00            .byte	0
36135                                           ! 7019                          0,
36136 8EE3                      0000            .word	0
36137 8EE5                      0000            .word	0
36138                                           ! 7020 } },
36139                                           ! 7021 { 0x0183,
36140 8EE7                      0183            .word	$183
36141                                           ! 7022 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36142 8EE9                      009B            .word	$9B
36143                                           ! 7023                           0x01 | 0x02 | 0x04,
36144 8EEB                        07            .byte	7
36145                                           ! 7024                           0,
36146 8EEC                        00            .byte	0
36147                                           ! 7025                           64,
36148 8EED                      0040            .word	$40
36149                                           ! 7026                    64,
36150 8EEF                      0040            .word	$40
36151                                           ! 7027                        0xA000,
36152 8EF1                      A000            .word	$A000
36153                                           ! 7028                        0x0000,
36154 8EF3                      0000            .word	0
36155                                           ! 7029                       0,
36156 8EF5                      0000            .word	0
36157 8EF7                      0000            .word	0
36158                                           ! 7030                             5600,
36159 8EF9                      15E0            .word	$15E0
36160                                           ! 7031                        1400,
36161 8EFB                      0578            .word	$578
36162                                           ! 7032                        1050,
36163 8EFD                      041A            .word	$41A
36164                                           ! 7033                      8,
36165 8EFF                        08            .byte	8
36166                                           ! 7034                      16,
36167 8F00                        10            .byte	$10
36168                                           ! 7035                           1,
36169 8F01                        01            .byte	1
36170                                           ! 7036                         32,
36171 8F02                        20            .byte	$20
36172                                           ! 7037     
36173                                           ! 7037                      90,
36174 8F03                        5A            .byte	$5A
36175                                           ! 7038                        0x06,
36176 8F04                        06            .byte	6
36177                                           ! 7039                     0,
36178 8F05                        00            .byte	0
36179                                           ! 7040                               1,
36180 8F06                        01            .byte	1
36181                                           ! 7041                          0,
36182 8F07                        00            .byte	0
36183                                           ! 7042                        8,
36184 8F08                        08            .byte	8
36185                                           ! 7043                             16,
36186 8F09                        10            .byte	$10
36187                                           ! 7044                          8,
36188 8F0A                        08            .byte	8
36189                                           ! 7045                               8,
36190 8F0B                        08            .byte	8
36191                                           ! 7046                         8,
36192 8F0C                        08            .byte	8
36193                                           ! 7047                              0,
36194 8F0D                        00            .byte	0
36195                                           ! 7048                         8,
36196 8F0E                        08            .byte	8
36197                                           ! 7049                              24,
36198 8F0F                        18            .byte	$18
36199                                           ! 7050                                0x02,
36200 8F10                        02            .byte	2
36201                                           ! 7051                        0xE0000000,
36202 8F11                      0000            .word	0
36203 8F13                      E000            .word	$E000
36204                                           ! 7052                               0,
36205 8F15                      0000            .word	0
36206 8F17                      0000            .word	0
36207                                           ! 7053                             0,
36208 8F19                      0000            .word	0
36209                                           ! 7054                                5600,
36210 8F1B                      15E0            .word	$15E0
36211                                           ! 7055                             0,
36212 8F1D                        00            .byte	0
36213                                           ! 7056                             0,
36214 8F1E                        00            .byte	0
36215                                           ! 7057                           8,
36216 8F1F                        08            .byte	8
36217                                           ! 7058                                16,
36218 8F20                        10            .byte	$10
36219                                           ! 7059                             8,
36220 8F21                        08            .byte	8
36221                                           ! 7060                                  8,
36222 8F22                        08            .byte	8
36223                                           ! 7061                            8,
36224 8F23                        08            .byte	8
36225                                           ! 7062                                 0,
36226 8F24                        00            .byte	0
36227                                           ! 7063                            8,
36228 8F25                        08            .byte	8
36229                                           ! 7064                                 24,
36230 8F26                        18            .byte	$18
36231                                           ! 7065                          0,
36232 8F27                      0000            .word	0
36233 8F29                      0000            .word	0
36234                                           ! 7066 } },
36235                                           ! 7067 { 0x0184,
36236 8F2B                      0184            .word	$184
36237                                           ! 7068 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36238 8F2D                      009B            .word	$9B
36239                                           ! 7069                           0x01 | 0x02 | 0x04,
36240 8F2F                        07            .byte	7
36241                                           ! 7070                           0,
36242 8F30                        00            .byte	0
36243                                           ! 7071                           64,
36244 8F31                      0040            .word	$40
36245                                           ! 7072                    64,
36246 8F33                      0040            .word	$40
36247                                           ! 7073                        0xA000,
36248 8F35                      A000            .word	$A000
36249                                           ! 7074                        0x0000,
36250 8F37                      0000            .word	0
36251                                           ! 7075                       0,
36252 8F39                      0000            .word	0
36253 8F3B                      0000            .word	0
36254                                           ! 7076                             3360,
36255 8F3D                      0D20            .word	$D20
36256                                           ! 7077                        1680,
36257 8F3F                      0690            .word	$690
36258                                           ! 7078                        1050,
36259 8F41                      041A            .word	$41A
36260                                           ! 7079                      8,
36261 8F43                        08            .byte	8
36262                                           ! 7080                      16,
36263 8F44                        10            .byte	$10
36264                                           ! 7081                           1,
36265 8F45                        01            .byte	1
36266                                           ! 7082                         16,
36267 8F46                        10            .byte	$10
36268                                           ! 7083                          54,
36269 8F47                        36            .byte	$36
36270                                           ! 7084                        0x06,
36271 8F48                        06            .byte	6
36272                                           ! 7085                     0,
36273 8F49                        00            .byte	0
36274                                           ! 7086                               3,
36275 8F4A                        03            .byte	3
36276                                           ! 7087                          0,
36277 8F4B                        00            .byte	0
36278                                           ! 7088                        5,
36279 8F4C                        05            .byte	5
36280                                           ! 7089                             11,
36281 8F4D                        0B            .byte	$B
36282                                           ! 7090                          6,
36283 8F4E                        06            .byte	6
36284                                           ! 7091                               5,
36285 8F4F                        05            .byte	5
36286                                           ! 7092                         5,
36287 8F50                        05            .byte	5
36288                                           ! 7093                              0,
36289 8F51                        00            .byte	0
36290                                           ! 7094                         0,
36291 8F52                        00            .byte	0
36292                                           ! 7095                              0,
36293 8F53                        00            .byte	0
36294                                           ! 7096                                0,
36295 8F54                        00            .byte	0
36296                                           ! 7097                        0xE0000000,
36297 8F55                      0000            .word	0
36298 8F57                      E000            .word	$E000
36299                                           ! 7098                               0,
36300 8F59                      0000            .word	0
36301 8F5B                      0000            .word	0
36302                                           ! 7099                             0,
36303 8F5D                      0000            .word	0
36304                                           ! 7100                                3360,
36305 8F5F                      0D20            .word	$D20
36306                                           ! 7101                             0,
36307 8F61                        00            .byte	0
36308                                           ! 7102                             0,
36309 8F62                        00            .byte	0
36310                                           ! 7103                           5,
36311 8F63                        05            .byte	5
36312                                           ! 7104                                11
36313                                           ! 7104 ,
36314 8F64                        0B            .byte	$B
36315                                           ! 7105                             6,
36316 8F65                        06            .byte	6
36317                                           ! 7106                                  5,
36318 8F66                        05            .byte	5
36319                                           ! 7107                            5,
36320 8F67                        05            .byte	5
36321                                           ! 7108                                 0,
36322 8F68                        00            .byte	0
36323                                           ! 7109                            0,
36324 8F69                        00            .byte	0
36325                                           ! 7110                                 0,
36326 8F6A                        00            .byte	0
36327                                           ! 7111                          0,
36328 8F6B                      0000            .word	0
36329 8F6D                      0000            .word	0
36330                                           ! 7112 } },
36331                                           ! 7113 { 0x0185,
36332 8F6F                      0185            .word	$185
36333                                           ! 7114 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36334 8F71                      009B            .word	$9B
36335                                           ! 7115                           0x01 | 0x02 | 0x04,
36336 8F73                        07            .byte	7
36337                                           ! 7116                           0,
36338 8F74                        00            .byte	0
36339                                           ! 7117                           64,
36340 8F75                      0040            .word	$40
36341                                           ! 7118                    64,
36342 8F77                      0040            .word	$40
36343                                           ! 7119                        0xA000,
36344 8F79                      A000            .word	$A000
36345                                           ! 7120                        0x0000,
36346 8F7B                      0000            .word	0
36347                                           ! 7121                       0,
36348 8F7D                      0000            .word	0
36349 8F7F                      0000            .word	0
36350                                           ! 7122                             5040,
36351 8F81                      13B0            .word	$13B0
36352                                           ! 7123                        1680,
36353 8F83                      0690            .word	$690
36354                                           ! 7124                        1050,
36355 8F85                      041A            .word	$41A
36356                                           ! 7125                      8,
36357 8F87                        08            .byte	8
36358                                           ! 7126                      16,
36359 8F88                        10            .byte	$10
36360                                           ! 7127                           1,
36361 8F89                        01            .byte	1
36362                                           ! 7128                         24,
36363 8F8A                        18            .byte	$18
36364                                           ! 7129                          81,
36365 8F8B                        51            .byte	$51
36366                                           ! 7130                        0x06,
36367 8F8C                        06            .byte	6
36368                                           ! 7131                     0,
36369 8F8D                        00            .byte	0
36370                                           ! 7132                               2,
36371 8F8E                        02            .byte	2
36372                                           ! 7133                          0,
36373 8F8F                        00            .byte	0
36374                                           ! 7134                        8,
36375 8F90                        08            .byte	8
36376                                           ! 7135                             16,
36377 8F91                        10            .byte	$10
36378                                           ! 7136                          8,
36379 8F92                        08            .byte	8
36380                                           ! 7137                               8,
36381 8F93                        08            .byte	8
36382                                           ! 7138                         8,
36383 8F94                        08            .byte	8
36384                                           ! 7139                              0,
36385 8F95                        00            .byte	0
36386                                           ! 7140                         0,
36387 8F96                        00            .byte	0
36388                                           ! 7141                              0,
36389 8F97                        00            .byte	0
36390                                           ! 7142                                0,
36391 8F98                        00            .byte	0
36392                                           ! 7143                        0xE0000000,
36393 8F99                      0000            .word	0
36394 8F9B                      E000            .word	$E000
36395                                           ! 7144                               0,
36396 8F9D                      0000            .word	0
36397 8F9F                      0000            .word	0
36398                                           ! 7145                             0,
36399 8FA1                      0000            .word	0
36400                                           ! 7146                                5040,
36401 8FA3                      13B0            .word	$13B0
36402                                           ! 7147                             0,
36403 8FA5                        00            .byte	0
36404                                           ! 7148                             0,
36405 8FA6                        00            .byte	0
36406                                           ! 7149                           8,
36407 8FA7                        08            .byte	8
36408                                           ! 7150                                16,
36409 8FA8                        10            .byte	$10
36410                                           ! 7151                             8,
36411 8FA9                        08            .byte	8
36412                                           ! 7152                                  8,
36413 8FAA                        08            .byte	8
36414                                           ! 7153                            8,
36415 8FAB                        08            .byte	8
36416                                           ! 7154                                 0,
36417 8FAC                        00            .byte	0
36418                                           ! 7155                            0,
36419 8FAD                        00            .byte	0
36420                                           ! 7156                                 0,
36421 8FAE                        00            .byte	0
36422                                           ! 7157                          0,
36423 8FAF                      0000            .word	0
36424 8FB1                      0000            .word	0
36425                                           ! 7158 } },
36426                                           ! 7159 { 0x0186,
36427 8FB3                      0186            .word	$186
36428                                           ! 7160 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36429 8FB5                      009B            .word	$9B
36430                                           ! 7161                           0x01 | 0x02 | 0x04,
36431 8FB7                        07            .byte	7
36432                                           ! 7162                           0,
36433 8FB8                        00            .byte	0
36434                                           ! 7163                           64,
36435 8FB9                      0040            .word	$40
36436                                           ! 7164                    64,
36437 8FBB                      0040            .word	$40
36438                                           ! 7165                        0xA000,
36439 8FBD                      A000            .word	$A000
36440                                           ! 7166                        0x0000,
36441 8FBF                      0000            .word	0
36442                                           ! 7167                       0,
36443 8FC1                      0000            .word	0
36444 8FC3                      0000            .word	0
36445                                           ! 7168                             6720,
36446 8FC5                      1A40            .word	$1A40
36447                                           ! 7169                        1680,
36448 8FC7                      0690            .word	$690
36449                                           ! 7170                        1050,
36450 8FC9                      041A            .word	$41A
36451                                           ! 7171                      8,
36452 8FCB                        08            .byte	8
36453                                           ! 7172                      16,
36454 8FCC                        10            .byte	$10
36455                                           ! 7173                           1,
36456 8FCD                        01            .byte	1
36457                                           ! 7174  
36458                                           ! 7174                        32,
36459 8FCE                        20            .byte	$20
36460                                           ! 7175                          108,
36461 8FCF                        6C            .byte	$6C
36462                                           ! 7176                        0x06,
36463 8FD0                        06            .byte	6
36464                                           ! 7177                     0,
36465 8FD1                        00            .byte	0
36466                                           ! 7178                               1,
36467 8FD2                        01            .byte	1
36468                                           ! 7179                          0,
36469 8FD3                        00            .byte	0
36470                                           ! 7180                        8,
36471 8FD4                        08            .byte	8
36472                                           ! 7181                             16,
36473 8FD5                        10            .byte	$10
36474                                           ! 7182                          8,
36475 8FD6                        08            .byte	8
36476                                           ! 7183                               8,
36477 8FD7                        08            .byte	8
36478                                           ! 7184                         8,
36479 8FD8                        08            .byte	8
36480                                           ! 7185                              0,
36481 8FD9                        00            .byte	0
36482                                           ! 7186                         8,
36483 8FDA                        08            .byte	8
36484                                           ! 7187                              24,
36485 8FDB                        18            .byte	$18
36486                                           ! 7188                                0x02,
36487 8FDC                        02            .byte	2
36488                                           ! 7189                        0xE0000000,
36489 8FDD                      0000            .word	0
36490 8FDF                      E000            .word	$E000
36491                                           ! 7190                               0,
36492 8FE1                      0000            .word	0
36493 8FE3                      0000            .word	0
36494                                           ! 7191                             0,
36495 8FE5                      0000            .word	0
36496                                           ! 7192                                6720,
36497 8FE7                      1A40            .word	$1A40
36498                                           ! 7193                             0,
36499 8FE9                        00            .byte	0
36500                                           ! 7194                             0,
36501 8FEA                        00            .byte	0
36502                                           ! 7195                           8,
36503 8FEB                        08            .byte	8
36504                                           ! 7196                                16,
36505 8FEC                        10            .byte	$10
36506                                           ! 7197                             8,
36507 8FED                        08            .byte	8
36508                                           ! 7198                                  8,
36509 8FEE                        08            .byte	8
36510                                           ! 7199                            8,
36511 8FEF                        08            .byte	8
36512                                           ! 7200                                 0,
36513 8FF0                        00            .byte	0
36514                                           ! 7201                            8,
36515 8FF1                        08            .byte	8
36516                                           ! 7202                                 24,
36517 8FF2                        18            .byte	$18
36518                                           ! 7203                          0,
36519 8FF3                      0000            .word	0
36520 8FF5                      0000            .word	0
36521                                           ! 7204 } },
36522                                           ! 7205 { 0x0187,
36523 8FF7                      0187            .word	$187
36524                                           ! 7206 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36525 8FF9                      009B            .word	$9B
36526                                           ! 7207                           0x01 | 0x02 | 0x04,
36527 8FFB                        07            .byte	7
36528                                           ! 7208                           0,
36529 8FFC                        00            .byte	0
36530                                           ! 7209                           64,
36531 8FFD                      0040            .word	$40
36532                                           ! 7210                    64,
36533 8FFF                      0040            .word	$40
36534                                           ! 7211                        0xA000,
36535 9001                      A000            .word	$A000
36536                                           ! 7212                        0x0000,
36537 9003                      0000            .word	0
36538                                           ! 7213                       0,
36539 9005                      0000            .word	0
36540 9007                      0000            .word	0
36541                                           ! 7214                             3840,
36542 9009                      0F00            .word	$F00
36543                                           ! 7215                        1920,
36544 900B                      0780            .word	$780
36545                                           ! 7216                        1200,
36546 900D                      04B0            .word	$4B0
36547                                           ! 7217                      8,
36548 900F                        08            .byte	8
36549                                           ! 7218                      16,
36550 9010                        10            .byte	$10
36551                                           ! 7219                           1,
36552 9011                        01            .byte	1
36553                                           ! 7220                         16,
36554 9012                        10            .byte	$10
36555                                           ! 7221                          71,
36556 9013                        47            .byte	$47
36557                                           ! 7222                        0x06,
36558 9014                        06            .byte	6
36559                                           ! 7223                     0,
36560 9015                        00            .byte	0
36561                                           ! 7224                               2,
36562 9016                        02            .byte	2
36563                                           ! 7225                          0,
36564 9017                        00            .byte	0
36565                                           ! 7226                        5,
36566 9018                        05            .byte	5
36567                                           ! 7227                             11,
36568 9019                        0B            .byte	$B
36569                                           ! 7228                          6,
36570 901A                        06            .byte	6
36571                                           ! 7229                               5,
36572 901B                        05            .byte	5
36573                                           ! 7230                         5,
36574 901C                        05            .byte	5
36575                                           ! 7231                              0,
36576 901D                        00            .byte	0
36577                                           ! 7232                         0,
36578 901E                        00            .byte	0
36579                                           ! 7233                              0,
36580 901F                        00            .byte	0
36581                                           ! 7234                                0,
36582 9020                        00            .byte	0
36583                                           ! 7235                        0xE0000000,
36584 9021                      0000            .word	0
36585 9023                      E000            .word	$E000
36586                                           ! 7236                               0,
36587 9025                      0000            .word	0
36588 9027                      0000            .word	0
36589                                           ! 7237                             0,
36590 9029                      0000            .word	0
36591                                           ! 7238                                3840,
36592 902B                      0F00            .word	$F00
36593                                           ! 7239                             0,
36594 902D                        00            .byte	0
36595                                           ! 7240                             0,
36596 902E                        00            .byte	0
36597                                           ! 7241                           5,
36598 902F                        05            .byte	5
36599                                           ! 7242  
36600                                           ! 7242                               11,
36601 9030                        0B            .byte	$B
36602                                           ! 7243                             6,
36603 9031                        06            .byte	6
36604                                           ! 7244                                  5,
36605 9032                        05            .byte	5
36606                                           ! 7245                            5,
36607 9033                        05            .byte	5
36608                                           ! 7246                                 0,
36609 9034                        00            .byte	0
36610                                           ! 7247                            0,
36611 9035                        00            .byte	0
36612                                           ! 7248                                 0,
36613 9036                        00            .byte	0
36614                                           ! 7249                          0,
36615 9037                      0000            .word	0
36616 9039                      0000            .word	0
36617                                           ! 7250 } },
36618                                           ! 7251 { 0x0188,
36619 903B                      0188            .word	$188
36620                                           ! 7252 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36621 903D                      009B            .word	$9B
36622                                           ! 7253                           0x01 | 0x02 | 0x04,
36623 903F                        07            .byte	7
36624                                           ! 7254                           0,
36625 9040                        00            .byte	0
36626                                           ! 7255                           64,
36627 9041                      0040            .word	$40
36628                                           ! 7256                    64,
36629 9043                      0040            .word	$40
36630                                           ! 7257                        0xA000,
36631 9045                      A000            .word	$A000
36632                                           ! 7258                        0x0000,
36633 9047                      0000            .word	0
36634                                           ! 7259                       0,
36635 9049                      0000            .word	0
36636 904B                      0000            .word	0
36637                                           ! 7260                             5760,
36638 904D                      1680            .word	$1680
36639                                           ! 7261                        1920,
36640 904F                      0780            .word	$780
36641                                           ! 7262                        1200,
36642 9051                      04B0            .word	$4B0
36643                                           ! 7263                      8,
36644 9053                        08            .byte	8
36645                                           ! 7264                      16,
36646 9054                        10            .byte	$10
36647                                           ! 7265                           1,
36648 9055                        01            .byte	1
36649                                           ! 7266                         24,
36650 9056                        18            .byte	$18
36651                                           ! 7267                          106,
36652 9057                        6A            .byte	$6A
36653                                           ! 7268                        0x06,
36654 9058                        06            .byte	6
36655                                           ! 7269                     0,
36656 9059                        00            .byte	0
36657                                           ! 7270                               1,
36658 905A                        01            .byte	1
36659                                           ! 7271                          0,
36660 905B                        00            .byte	0
36661                                           ! 7272                        8,
36662 905C                        08            .byte	8
36663                                           ! 7273                             16,
36664 905D                        10            .byte	$10
36665                                           ! 7274                          8,
36666 905E                        08            .byte	8
36667                                           ! 7275                               8,
36668 905F                        08            .byte	8
36669                                           ! 7276                         8,
36670 9060                        08            .byte	8
36671                                           ! 7277                              0,
36672 9061                        00            .byte	0
36673                                           ! 7278                         0,
36674 9062                        00            .byte	0
36675                                           ! 7279                              0,
36676 9063                        00            .byte	0
36677                                           ! 7280                                0,
36678 9064                        00            .byte	0
36679                                           ! 7281                        0xE0000000,
36680 9065                      0000            .word	0
36681 9067                      E000            .word	$E000
36682                                           ! 7282                               0,
36683 9069                      0000            .word	0
36684 906B                      0000            .word	0
36685                                           ! 7283                             0,
36686 906D                      0000            .word	0
36687                                           ! 7284                                5760,
36688 906F                      1680            .word	$1680
36689                                           ! 7285                             0,
36690 9071                        00            .byte	0
36691                                           ! 7286                             0,
36692 9072                        00            .byte	0
36693                                           ! 7287                           8,
36694 9073                        08            .byte	8
36695                                           ! 7288                                16,
36696 9074                        10            .byte	$10
36697                                           ! 7289                             8,
36698 9075                        08            .byte	8
36699                                           ! 7290                                  8,
36700 9076                        08            .byte	8
36701                                           ! 7291                            8,
36702 9077                        08            .byte	8
36703                                           ! 7292                                 0,
36704 9078                        00            .byte	0
36705                                           ! 7293                            0,
36706 9079                        00            .byte	0
36707                                           ! 7294                                 0,
36708 907A                        00            .byte	0
36709                                           ! 7295                          0,
36710 907B                      0000            .word	0
36711 907D                      0000            .word	0
36712                                           ! 7296 } },
36713                                           ! 7297 { 0x0189,
36714 907F                      0189            .word	$189
36715                                           ! 7298 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36716 9081                      009B            .word	$9B
36717                                           ! 7299                           0x01 | 0x02 | 0x04,
36718 9083                        07            .byte	7
36719                                           ! 7300                           0,
36720 9084                        00            .byte	0
36721                                           ! 7301                           64,
36722 9085                      0040            .word	$40
36723                                           ! 7302                    64,
36724 9087                      0040            .word	$40
36725                                           ! 7303                        0xA000,
36726 9089                      A000            .word	$A000
36727                                           ! 7304                        0x0000,
36728 908B                      0000            .word	0
36729                                           ! 7305                       0,
36730 908D                      0000            .word	0
36731 908F                      0000            .word	0
36732                                           ! 7306                             7680,
36733 9091                      1E00            .word	$1E00
36734                                           ! 7307                        1920,
36735 9093                      0780            .word	$780
36736                                           ! 7308                        1200,
36737 9095                      04B0            .word	$4B0
36738                                           ! 7309                      8,
36739 9097                        08            .byte	8
36740                                           ! 7310                      1
36741                                           ! 7310 6,
36742 9098                        10            .byte	$10
36743                                           ! 7311                           1,
36744 9099                        01            .byte	1
36745                                           ! 7312                         32,
36746 909A                        20            .byte	$20
36747                                           ! 7313                          141,
36748 909B                        8D            .byte	$8D
36749                                           ! 7314                        0x06,
36750 909C                        06            .byte	6
36751                                           ! 7315                     0,
36752 909D                        00            .byte	0
36753                                           ! 7316                               0,
36754 909E                        00            .byte	0
36755                                           ! 7317                          0,
36756 909F                        00            .byte	0
36757                                           ! 7318                        8,
36758 90A0                        08            .byte	8
36759                                           ! 7319                             16,
36760 90A1                        10            .byte	$10
36761                                           ! 7320                          8,
36762 90A2                        08            .byte	8
36763                                           ! 7321                               8,
36764 90A3                        08            .byte	8
36765                                           ! 7322                         8,
36766 90A4                        08            .byte	8
36767                                           ! 7323                              0,
36768 90A5                        00            .byte	0
36769                                           ! 7324                         8,
36770 90A6                        08            .byte	8
36771                                           ! 7325                              24,
36772 90A7                        18            .byte	$18
36773                                           ! 7326                                0x02,
36774 90A8                        02            .byte	2
36775                                           ! 7327                        0xE0000000,
36776 90A9                      0000            .word	0
36777 90AB                      E000            .word	$E000
36778                                           ! 7328                               0,
36779 90AD                      0000            .word	0
36780 90AF                      0000            .word	0
36781                                           ! 7329                             0,
36782 90B1                      0000            .word	0
36783                                           ! 7330                                7680,
36784 90B3                      1E00            .word	$1E00
36785                                           ! 7331                             0,
36786 90B5                        00            .byte	0
36787                                           ! 7332                             0,
36788 90B6                        00            .byte	0
36789                                           ! 7333                           8,
36790 90B7                        08            .byte	8
36791                                           ! 7334                                16,
36792 90B8                        10            .byte	$10
36793                                           ! 7335                             8,
36794 90B9                        08            .byte	8
36795                                           ! 7336                                  8,
36796 90BA                        08            .byte	8
36797                                           ! 7337                            8,
36798 90BB                        08            .byte	8
36799                                           ! 7338                                 0,
36800 90BC                        00            .byte	0
36801                                           ! 7339                            8,
36802 90BD                        08            .byte	8
36803                                           ! 7340                                 24,
36804 90BE                        18            .byte	$18
36805                                           ! 7341                          0,
36806 90BF                      0000            .word	0
36807 90C1                      0000            .word	0
36808                                           ! 7342 } },
36809                                           ! 7343 { 0x018a,
36810 90C3                      018A            .word	$18A
36811                                           ! 7344 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36812 90C5                      009B            .word	$9B
36813                                           ! 7345                           0x01 | 0x02 | 0x04,
36814 90C7                        07            .byte	7
36815                                           ! 7346                           0,
36816 90C8                        00            .byte	0
36817                                           ! 7347                           64,
36818 90C9                      0040            .word	$40
36819                                           ! 7348                    64,
36820 90CB                      0040            .word	$40
36821                                           ! 7349                        0xA000,
36822 90CD                      A000            .word	$A000
36823                                           ! 7350                        0x0000,
36824 90CF                      0000            .word	0
36825                                           ! 7351                       0,
36826 90D1                      0000            .word	0
36827 90D3                      0000            .word	0
36828                                           ! 7352                             5120,
36829 90D5                      1400            .word	$1400
36830                                           ! 7353                        2560,
36831 90D7                      0A00            .word	$A00
36832                                           ! 7354                        1600,
36833 90D9                      0640            .word	$640
36834                                           ! 7355                      8,
36835 90DB                        08            .byte	8
36836                                           ! 7356                      16,
36837 90DC                        10            .byte	$10
36838                                           ! 7357                           1,
36839 90DD                        01            .byte	1
36840                                           ! 7358                         16,
36841 90DE                        10            .byte	$10
36842                                           ! 7359                          125,
36843 90DF                        7D            .byte	$7D
36844                                           ! 7360                        0x06,
36845 90E0                        06            .byte	6
36846                                           ! 7361                     0,
36847 90E1                        00            .byte	0
36848                                           ! 7362                               1,
36849 90E2                        01            .byte	1
36850                                           ! 7363                          0,
36851 90E3                        00            .byte	0
36852                                           ! 7364                        5,
36853 90E4                        05            .byte	5
36854                                           ! 7365                             11,
36855 90E5                        0B            .byte	$B
36856                                           ! 7366                          6,
36857 90E6                        06            .byte	6
36858                                           ! 7367                               5,
36859 90E7                        05            .byte	5
36860                                           ! 7368                         5,
36861 90E8                        05            .byte	5
36862                                           ! 7369                              0,
36863 90E9                        00            .byte	0
36864                                           ! 7370                         0,
36865 90EA                        00            .byte	0
36866                                           ! 7371                              0,
36867 90EB                        00            .byte	0
36868                                           ! 7372                                0,
36869 90EC                        00            .byte	0
36870                                           ! 7373                        0xE0000000,
36871 90ED                      0000            .word	0
36872 90EF                      E000            .word	$E000
36873                                           ! 7374                               0,
36874 90F1                      0000            .word	0
36875 90F3                      0000            .word	0
36876                                           ! 7375                             0,
36877 90F5                      0000            .word	0
36878                                           ! 7376                                5120,
36879 90F7                      1400            .word	$1400
36880                                           ! 7377                             0,
36881 90F9                        00            .byte	0
36882                                           ! 7378                            
36883                                           ! 7378  0,
36884 90FA                        00            .byte	0
36885                                           ! 7379                           5,
36886 90FB                        05            .byte	5
36887                                           ! 7380                                11,
36888 90FC                        0B            .byte	$B
36889                                           ! 7381                             6,
36890 90FD                        06            .byte	6
36891                                           ! 7382                                  5,
36892 90FE                        05            .byte	5
36893                                           ! 7383                            5,
36894 90FF                        05            .byte	5
36895                                           ! 7384                                 0,
36896 9100                        00            .byte	0
36897                                           ! 7385                            0,
36898 9101                        00            .byte	0
36899                                           ! 7386                                 0,
36900 9102                        00            .byte	0
36901                                           ! 7387                          0,
36902 9103                      0000            .word	0
36903 9105                      0000            .word	0
36904                                           ! 7388 } },
36905                                           ! 7389 { 0x018b,
36906 9107                      018B            .word	$18B
36907                                           ! 7390 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36908 9109                      009B            .word	$9B
36909                                           ! 7391                           0x01 | 0x02 | 0x04,
36910 910B                        07            .byte	7
36911                                           ! 7392                           0,
36912 910C                        00            .byte	0
36913                                           ! 7393                           64,
36914 910D                      0040            .word	$40
36915                                           ! 7394                    64,
36916 910F                      0040            .word	$40
36917                                           ! 7395                        0xA000,
36918 9111                      A000            .word	$A000
36919                                           ! 7396                        0x0000,
36920 9113                      0000            .word	0
36921                                           ! 7397                       0,
36922 9115                      0000            .word	0
36923 9117                      0000            .word	0
36924                                           ! 7398                             7680,
36925 9119                      1E00            .word	$1E00
36926                                           ! 7399                        2560,
36927 911B                      0A00            .word	$A00
36928                                           ! 7400                        1600,
36929 911D                      0640            .word	$640
36930                                           ! 7401                      8,
36931 911F                        08            .byte	8
36932                                           ! 7402                      16,
36933 9120                        10            .byte	$10
36934                                           ! 7403                           1,
36935 9121                        01            .byte	1
36936                                           ! 7404                         24,
36937 9122                        18            .byte	$18
36938                                           ! 7405                          188,
36939 9123                        BC            .byte	$BC
36940                                           ! 7406                        0x06,
36941 9124                        06            .byte	6
36942                                           ! 7407                     0,
36943 9125                        00            .byte	0
36944                                           ! 7408                               0,
36945 9126                        00            .byte	0
36946                                           ! 7409                          0,
36947 9127                        00            .byte	0
36948                                           ! 7410                        8,
36949 9128                        08            .byte	8
36950                                           ! 7411                             16,
36951 9129                        10            .byte	$10
36952                                           ! 7412                          8,
36953 912A                        08            .byte	8
36954                                           ! 7413                               8,
36955 912B                        08            .byte	8
36956                                           ! 7414                         8,
36957 912C                        08            .byte	8
36958                                           ! 7415                              0,
36959 912D                        00            .byte	0
36960                                           ! 7416                         0,
36961 912E                        00            .byte	0
36962                                           ! 7417                              0,
36963 912F                        00            .byte	0
36964                                           ! 7418                                0,
36965 9130                        00            .byte	0
36966                                           ! 7419                        0xE0000000,
36967 9131                      0000            .word	0
36968 9133                      E000            .word	$E000
36969                                           ! 7420                               0,
36970 9135                      0000            .word	0
36971 9137                      0000            .word	0
36972                                           ! 7421                             0,
36973 9139                      0000            .word	0
36974                                           ! 7422                                7680,
36975 913B                      1E00            .word	$1E00
36976                                           ! 7423                             0,
36977 913D                        00            .byte	0
36978                                           ! 7424                             0,
36979 913E                        00            .byte	0
36980                                           ! 7425                           8,
36981 913F                        08            .byte	8
36982                                           ! 7426                                16,
36983 9140                        10            .byte	$10
36984                                           ! 7427                             8,
36985 9141                        08            .byte	8
36986                                           ! 7428                                  8,
36987 9142                        08            .byte	8
36988                                           ! 7429                            8,
36989 9143                        08            .byte	8
36990                                           ! 7430                                 0,
36991 9144                        00            .byte	0
36992                                           ! 7431                            0,
36993 9145                        00            .byte	0
36994                                           ! 7432                                 0,
36995 9146                        00            .byte	0
36996                                           ! 7433                          0,
36997 9147                      0000            .word	0
36998 9149                      0000            .word	0
36999                                           ! 7434 } },
37000                                           ! 7435 { 0x018c,
37001 914B                      018C            .word	$18C
37002                                           ! 7436 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37003 914D                      009B            .word	$9B
37004                                           ! 7437                           0x01 | 0x02 | 0x04,
37005 914F                        07            .byte	7
37006                                           ! 7438                           0,
37007 9150                        00            .byte	0
37008                                           ! 7439                           64,
37009 9151                      0040            .word	$40
37010                                           ! 7440                    64,
37011 9153                      0040            .word	$40
37012                                           ! 7441                        0xA000,
37013 9155                      A000            .word	$A000
37014                                           ! 7442                        0x0000,
37015 9157                      0000            .word	0
37016                                           ! 7443                       0,
37017 9159                      0000            .word	0
37018 915B                      0000            .word	0
37019                                           ! 7444                             10240,
37020 915D                      2800            .word	$2800
37021                                           ! 7445                        2560,
37022 915F                      0A00            .word	$A00
37023                                           ! 7446                        1600,
37024 9161                      0640            .word	$640
37025                                           ! 7447            
37026                                           ! 7447           8,
37027 9163                        08            .byte	8
37028                                           ! 7448                      16,
37029 9164                        10            .byte	$10
37030                                           ! 7449                           1,
37031 9165                        01            .byte	1
37032                                           ! 7450                         32,
37033 9166                        20            .byte	$20
37034                                           ! 7451                          250,
37035 9167                        FA            .byte	$FA
37036                                           ! 7452                        0x06,
37037 9168                        06            .byte	6
37038                                           ! 7453                     0,
37039 9169                        00            .byte	0
37040                                           ! 7454                               0,
37041 916A                        00            .byte	0
37042                                           ! 7455                          0,
37043 916B                        00            .byte	0
37044                                           ! 7456                        8,
37045 916C                        08            .byte	8
37046                                           ! 7457                             16,
37047 916D                        10            .byte	$10
37048                                           ! 7458                          8,
37049 916E                        08            .byte	8
37050                                           ! 7459                               8,
37051 916F                        08            .byte	8
37052                                           ! 7460                         8,
37053 9170                        08            .byte	8
37054                                           ! 7461                              0,
37055 9171                        00            .byte	0
37056                                           ! 7462                         8,
37057 9172                        08            .byte	8
37058                                           ! 7463                              24,
37059 9173                        18            .byte	$18
37060                                           ! 7464                                0x02,
37061 9174                        02            .byte	2
37062                                           ! 7465                        0xE0000000,
37063 9175                      0000            .word	0
37064 9177                      E000            .word	$E000
37065                                           ! 7466                               0,
37066 9179                      0000            .word	0
37067 917B                      0000            .word	0
37068                                           ! 7467                             0,
37069 917D                      0000            .word	0
37070                                           ! 7468                                10240,
37071 917F                      2800            .word	$2800
37072                                           ! 7469                             0,
37073 9181                        00            .byte	0
37074                                           ! 7470                             0,
37075 9182                        00            .byte	0
37076                                           ! 7471                           8,
37077 9183                        08            .byte	8
37078                                           ! 7472                                16,
37079 9184                        10            .byte	$10
37080                                           ! 7473                             8,
37081 9185                        08            .byte	8
37082                                           ! 7474                                  8,
37083 9186                        08            .byte	8
37084                                           ! 7475                            8,
37085 9187                        08            .byte	8
37086                                           ! 7476                                 0,
37087 9188                        00            .byte	0
37088                                           ! 7477                            8,
37089 9189                        08            .byte	8
37090                                           ! 7478                                 24,
37091 918A                        18            .byte	$18
37092                                           ! 7479                          0,
37093 918B                      0000            .word	0
37094 918D                      0000            .word	0
37095                                           ! 7480 } },
37096                                           ! 7481 { 0x018d,
37097 918F                      018D            .word	$18D
37098                                           ! 7482 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37099 9191                      009B            .word	$9B
37100                                           ! 7483                           0x01 | 0x02 | 0x04,
37101 9193                        07            .byte	7
37102                                           ! 7484                           0,
37103 9194                        00            .byte	0
37104                                           ! 7485                           64,
37105 9195                      0040            .word	$40
37106                                           ! 7486                    64,
37107 9197                      0040            .word	$40
37108                                           ! 7487                        0xA000,
37109 9199                      A000            .word	$A000
37110                                           ! 7488                        0x0000,
37111 919B                      0000            .word	0
37112                                           ! 7489                       0,
37113 919D                      0000            .word	0
37114 919F                      0000            .word	0
37115                                           ! 7490                             2560,
37116 91A1                      0A00            .word	$A00
37117                                           ! 7491                        1280,
37118 91A3                      0500            .word	$500
37119                                           ! 7492                        720,
37120 91A5                      02D0            .word	$2D0
37121                                           ! 7493                      8,
37122 91A7                        08            .byte	8
37123                                           ! 7494                      16,
37124 91A8                        10            .byte	$10
37125                                           ! 7495                           1,
37126 91A9                        01            .byte	1
37127                                           ! 7496                         16,
37128 91AA                        10            .byte	$10
37129                                           ! 7497                          29,
37130 91AB                        1D            .byte	$1D
37131                                           ! 7498                        0x06,
37132 91AC                        06            .byte	6
37133                                           ! 7499                     0,
37134 91AD                        00            .byte	0
37135                                           ! 7500                               8,
37136 91AE                        08            .byte	8
37137                                           ! 7501                          0,
37138 91AF                        00            .byte	0
37139                                           ! 7502                        5,
37140 91B0                        05            .byte	5
37141                                           ! 7503                             11,
37142 91B1                        0B            .byte	$B
37143                                           ! 7504                          6,
37144 91B2                        06            .byte	6
37145                                           ! 7505                               5,
37146 91B3                        05            .byte	5
37147                                           ! 7506                         5,
37148 91B4                        05            .byte	5
37149                                           ! 7507                              0,
37150 91B5                        00            .byte	0
37151                                           ! 7508                         0,
37152 91B6                        00            .byte	0
37153                                           ! 7509                              0,
37154 91B7                        00            .byte	0
37155                                           ! 7510                                0,
37156 91B8                        00            .byte	0
37157                                           ! 7511                        0xE0000000,
37158 91B9                      0000            .word	0
37159 91BB                      E000            .word	$E000
37160                                           ! 7512                               0,
37161 91BD                      0000            .word	0
37162 91BF                      0000            .word	0
37163                                           ! 7513                             0,
37164 91C1                      0000            .word	0
37165                                           ! 7514                                2560,
37166 91C3                      0A00            .word	$A00
37167                                           ! 7515                         
37168                                           ! 7515     0,
37169 91C5                        00            .byte	0
37170                                           ! 7516                             0,
37171 91C6                        00            .byte	0
37172                                           ! 7517                           5,
37173 91C7                        05            .byte	5
37174                                           ! 7518                                11,
37175 91C8                        0B            .byte	$B
37176                                           ! 7519                             6,
37177 91C9                        06            .byte	6
37178                                           ! 7520                                  5,
37179 91CA                        05            .byte	5
37180                                           ! 7521                            5,
37181 91CB                        05            .byte	5
37182                                           ! 7522                                 0,
37183 91CC                        00            .byte	0
37184                                           ! 7523                            0,
37185 91CD                        00            .byte	0
37186                                           ! 7524                                 0,
37187 91CE                        00            .byte	0
37188                                           ! 7525                          0,
37189 91CF                      0000            .word	0
37190 91D1                      0000            .word	0
37191                                           ! 7526 } },
37192                                           ! 7527 { 0x018e,
37193 91D3                      018E            .word	$18E
37194                                           ! 7528 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37195 91D5                      009B            .word	$9B
37196                                           ! 7529                           0x01 | 0x02 | 0x04,
37197 91D7                        07            .byte	7
37198                                           ! 7530                           0,
37199 91D8                        00            .byte	0
37200                                           ! 7531                           64,
37201 91D9                      0040            .word	$40
37202                                           ! 7532                    64,
37203 91DB                      0040            .word	$40
37204                                           ! 7533                        0xA000,
37205 91DD                      A000            .word	$A000
37206                                           ! 7534                        0x0000,
37207 91DF                      0000            .word	0
37208                                           ! 7535                       0,
37209 91E1                      0000            .word	0
37210 91E3                      0000            .word	0
37211                                           ! 7536                             3840,
37212 91E5                      0F00            .word	$F00
37213                                           ! 7537                        1280,
37214 91E7                      0500            .word	$500
37215                                           ! 7538                        720,
37216 91E9                      02D0            .word	$2D0
37217                                           ! 7539                      8,
37218 91EB                        08            .byte	8
37219                                           ! 7540                      16,
37220 91EC                        10            .byte	$10
37221                                           ! 7541                           1,
37222 91ED                        01            .byte	1
37223                                           ! 7542                         24,
37224 91EE                        18            .byte	$18
37225                                           ! 7543                          43,
37226 91EF                        2B            .byte	$2B
37227                                           ! 7544                        0x06,
37228 91F0                        06            .byte	6
37229                                           ! 7545                     0,
37230 91F1                        00            .byte	0
37231                                           ! 7546                               5,
37232 91F2                        05            .byte	5
37233                                           ! 7547                          0,
37234 91F3                        00            .byte	0
37235                                           ! 7548                        8,
37236 91F4                        08            .byte	8
37237                                           ! 7549                             16,
37238 91F5                        10            .byte	$10
37239                                           ! 7550                          8,
37240 91F6                        08            .byte	8
37241                                           ! 7551                               8,
37242 91F7                        08            .byte	8
37243                                           ! 7552                         8,
37244 91F8                        08            .byte	8
37245                                           ! 7553                              0,
37246 91F9                        00            .byte	0
37247                                           ! 7554                         0,
37248 91FA                        00            .byte	0
37249                                           ! 7555                              0,
37250 91FB                        00            .byte	0
37251                                           ! 7556                                0,
37252 91FC                        00            .byte	0
37253                                           ! 7557                        0xE0000000,
37254 91FD                      0000            .word	0
37255 91FF                      E000            .word	$E000
37256                                           ! 7558                               0,
37257 9201                      0000            .word	0
37258 9203                      0000            .word	0
37259                                           ! 7559                             0,
37260 9205                      0000            .word	0
37261                                           ! 7560                                3840,
37262 9207                      0F00            .word	$F00
37263                                           ! 7561                             0,
37264 9209                        00            .byte	0
37265                                           ! 7562                             0,
37266 920A                        00            .byte	0
37267                                           ! 7563                           8,
37268 920B                        08            .byte	8
37269                                           ! 7564                                16,
37270 920C                        10            .byte	$10
37271                                           ! 7565                             8,
37272 920D                        08            .byte	8
37273                                           ! 7566                                  8,
37274 920E                        08            .byte	8
37275                                           ! 7567                            8,
37276 920F                        08            .byte	8
37277                                           ! 7568                                 0,
37278 9210                        00            .byte	0
37279                                           ! 7569                            0,
37280 9211                        00            .byte	0
37281                                           ! 7570                                 0,
37282 9212                        00            .byte	0
37283                                           ! 7571                          0,
37284 9213                      0000            .word	0
37285 9215                      0000            .word	0
37286                                           ! 7572 } },
37287                                           ! 7573 { 0x018f,
37288 9217                      018F            .word	$18F
37289                                           ! 7574 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37290 9219                      009B            .word	$9B
37291                                           ! 7575                           0x01 | 0x02 | 0x04,
37292 921B                        07            .byte	7
37293                                           ! 7576                           0,
37294 921C                        00            .byte	0
37295                                           ! 7577                           64,
37296 921D                      0040            .word	$40
37297                                           ! 7578                    64,
37298 921F                      0040            .word	$40
37299                                           ! 7579                        0xA000,
37300 9221                      A000            .word	$A000
37301                                           ! 7580                        0x0000,
37302 9223                      0000            .word	0
37303                                           ! 7581                       0,
37304 9225                      0000            .word	0
37305 9227                      0000            .word	0
37306                                           ! 7582                             5120,
37307 9229                      1400            .word	$1400
37308                                           ! 7583                        1280,
37309 922B                      0500            .word	$500
37310                                           ! 7584          
37311                                           ! 7584               720,
37312 922D                      02D0            .word	$2D0
37313                                           ! 7585                      8,
37314 922F                        08            .byte	8
37315                                           ! 7586                      16,
37316 9230                        10            .byte	$10
37317                                           ! 7587                           1,
37318 9231                        01            .byte	1
37319                                           ! 7588                         32,
37320 9232                        20            .byte	$20
37321                                           ! 7589                          57,
37322 9233                        39            .byte	$39
37323                                           ! 7590                        0x06,
37324 9234                        06            .byte	6
37325                                           ! 7591                     0,
37326 9235                        00            .byte	0
37327                                           ! 7592                               3,
37328 9236                        03            .byte	3
37329                                           ! 7593                          0,
37330 9237                        00            .byte	0
37331                                           ! 7594                        8,
37332 9238                        08            .byte	8
37333                                           ! 7595                             16,
37334 9239                        10            .byte	$10
37335                                           ! 7596                          8,
37336 923A                        08            .byte	8
37337                                           ! 7597                               8,
37338 923B                        08            .byte	8
37339                                           ! 7598                         8,
37340 923C                        08            .byte	8
37341                                           ! 7599                              0,
37342 923D                        00            .byte	0
37343                                           ! 7600                         8,
37344 923E                        08            .byte	8
37345                                           ! 7601                              24,
37346 923F                        18            .byte	$18
37347                                           ! 7602                                0x02,
37348 9240                        02            .byte	2
37349                                           ! 7603                        0xE0000000,
37350 9241                      0000            .word	0
37351 9243                      E000            .word	$E000
37352                                           ! 7604                               0,
37353 9245                      0000            .word	0
37354 9247                      0000            .word	0
37355                                           ! 7605                             0,
37356 9249                      0000            .word	0
37357                                           ! 7606                                5120,
37358 924B                      1400            .word	$1400
37359                                           ! 7607                             0,
37360 924D                        00            .byte	0
37361                                           ! 7608                             0,
37362 924E                        00            .byte	0
37363                                           ! 7609                           8,
37364 924F                        08            .byte	8
37365                                           ! 7610                                16,
37366 9250                        10            .byte	$10
37367                                           ! 7611                             8,
37368 9251                        08            .byte	8
37369                                           ! 7612                                  8,
37370 9252                        08            .byte	8
37371                                           ! 7613                            8,
37372 9253                        08            .byte	8
37373                                           ! 7614                                 0,
37374 9254                        00            .byte	0
37375                                           ! 7615                            8,
37376 9255                        08            .byte	8
37377                                           ! 7616                                 24,
37378 9256                        18            .byte	$18
37379                                           ! 7617                          0,
37380 9257                      0000            .word	0
37381 9259                      0000            .word	0
37382                                           ! 7618 } },
37383                                           ! 7619 { 0x0190,
37384 925B                      0190            .word	$190
37385                                           ! 7620 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37386 925D                      009B            .word	$9B
37387                                           ! 7621                           0x01 | 0x02 | 0x04,
37388 925F                        07            .byte	7
37389                                           ! 7622                           0,
37390 9260                        00            .byte	0
37391                                           ! 7623                           64,
37392 9261                      0040            .word	$40
37393                                           ! 7624                    64,
37394 9263                      0040            .word	$40
37395                                           ! 7625                        0xA000,
37396 9265                      A000            .word	$A000
37397                                           ! 7626                        0x0000,
37398 9267                      0000            .word	0
37399                                           ! 7627                       0,
37400 9269                      0000            .word	0
37401 926B                      0000            .word	0
37402                                           ! 7628                             3840,
37403 926D                      0F00            .word	$F00
37404                                           ! 7629                        1920,
37405 926F                      0780            .word	$780
37406                                           ! 7630                        1080,
37407 9271                      0438            .word	$438
37408                                           ! 7631                      8,
37409 9273                        08            .byte	8
37410                                           ! 7632                      16,
37411 9274                        10            .byte	$10
37412                                           ! 7633                           1,
37413 9275                        01            .byte	1
37414                                           ! 7634                         16,
37415 9276                        10            .byte	$10
37416                                           ! 7635                          64,
37417 9277                        40            .byte	$40
37418                                           ! 7636                        0x06,
37419 9278                        06            .byte	6
37420                                           ! 7637                     0,
37421 9279                        00            .byte	0
37422                                           ! 7638                               3,
37423 927A                        03            .byte	3
37424                                           ! 7639                          0,
37425 927B                        00            .byte	0
37426                                           ! 7640                        5,
37427 927C                        05            .byte	5
37428                                           ! 7641                             11,
37429 927D                        0B            .byte	$B
37430                                           ! 7642                          6,
37431 927E                        06            .byte	6
37432                                           ! 7643                               5,
37433 927F                        05            .byte	5
37434                                           ! 7644                         5,
37435 9280                        05            .byte	5
37436                                           ! 7645                              0,
37437 9281                        00            .byte	0
37438                                           ! 7646                         0,
37439 9282                        00            .byte	0
37440                                           ! 7647                              0,
37441 9283                        00            .byte	0
37442                                           ! 7648                                0,
37443 9284                        00            .byte	0
37444                                           ! 7649                        0xE0000000,
37445 9285                      0000            .word	0
37446 9287                      E000            .word	$E000
37447                                           ! 7650                               0,
37448 9289                      0000            .word	0
37449 928B                      0000            .word	0
37450                                           ! 7651                             0,
37451 928D                      0000            .word	0
37452                                           ! 7652                                3
37453                                           ! 7652 840,
37454 928F                      0F00            .word	$F00
37455                                           ! 7653                             0,
37456 9291                        00            .byte	0
37457                                           ! 7654                             0,
37458 9292                        00            .byte	0
37459                                           ! 7655                           5,
37460 9293                        05            .byte	5
37461                                           ! 7656                                11,
37462 9294                        0B            .byte	$B
37463                                           ! 7657                             6,
37464 9295                        06            .byte	6
37465                                           ! 7658                                  5,
37466 9296                        05            .byte	5
37467                                           ! 7659                            5,
37468 9297                        05            .byte	5
37469                                           ! 7660                                 0,
37470 9298                        00            .byte	0
37471                                           ! 7661                            0,
37472 9299                        00            .byte	0
37473                                           ! 7662                                 0,
37474 929A                        00            .byte	0
37475                                           ! 7663                          0,
37476 929B                      0000            .word	0
37477 929D                      0000            .word	0
37478                                           ! 7664 } },
37479                                           ! 7665 { 0x0191,
37480 929F                      0191            .word	$191
37481                                           ! 7666 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37482 92A1                      009B            .word	$9B
37483                                           ! 7667                           0x01 | 0x02 | 0x04,
37484 92A3                        07            .byte	7
37485                                           ! 7668                           0,
37486 92A4                        00            .byte	0
37487                                           ! 7669                           64,
37488 92A5                      0040            .word	$40
37489                                           ! 7670                    64,
37490 92A7                      0040            .word	$40
37491                                           ! 7671                        0xA000,
37492 92A9                      A000            .word	$A000
37493                                           ! 7672                        0x0000,
37494 92AB                      0000            .word	0
37495                                           ! 7673                       0,
37496 92AD                      0000            .word	0
37497 92AF                      0000            .word	0
37498                                           ! 7674                             5760,
37499 92B1                      1680            .word	$1680
37500                                           ! 7675                        1920,
37501 92B3                      0780            .word	$780
37502                                           ! 7676                        1080,
37503 92B5                      0438            .word	$438
37504                                           ! 7677                      8,
37505 92B7                        08            .byte	8
37506                                           ! 7678                      16,
37507 92B8                        10            .byte	$10
37508                                           ! 7679                           1,
37509 92B9                        01            .byte	1
37510                                           ! 7680                         24,
37511 92BA                        18            .byte	$18
37512                                           ! 7681                          95,
37513 92BB                        5F            .byte	$5F
37514                                           ! 7682                        0x06,
37515 92BC                        06            .byte	6
37516                                           ! 7683                     0,
37517 92BD                        00            .byte	0
37518                                           ! 7684                               1,
37519 92BE                        01            .byte	1
37520                                           ! 7685                          0,
37521 92BF                        00            .byte	0
37522                                           ! 7686                        8,
37523 92C0                        08            .byte	8
37524                                           ! 7687                             16,
37525 92C1                        10            .byte	$10
37526                                           ! 7688                          8,
37527 92C2                        08            .byte	8
37528                                           ! 7689                               8,
37529 92C3                        08            .byte	8
37530                                           ! 7690                         8,
37531 92C4                        08            .byte	8
37532                                           ! 7691                              0,
37533 92C5                        00            .byte	0
37534                                           ! 7692                         0,
37535 92C6                        00            .byte	0
37536                                           ! 7693                              0,
37537 92C7                        00            .byte	0
37538                                           ! 7694                                0,
37539 92C8                        00            .byte	0
37540                                           ! 7695                        0xE0000000,
37541 92C9                      0000            .word	0
37542 92CB                      E000            .word	$E000
37543                                           ! 7696                               0,
37544 92CD                      0000            .word	0
37545 92CF                      0000            .word	0
37546                                           ! 7697                             0,
37547 92D1                      0000            .word	0
37548                                           ! 7698                                5760,
37549 92D3                      1680            .word	$1680
37550                                           ! 7699                             0,
37551 92D5                        00            .byte	0
37552                                           ! 7700                             0,
37553 92D6                        00            .byte	0
37554                                           ! 7701                           8,
37555 92D7                        08            .byte	8
37556                                           ! 7702                                16,
37557 92D8                        10            .byte	$10
37558                                           ! 7703                             8,
37559 92D9                        08            .byte	8
37560                                           ! 7704                                  8,
37561 92DA                        08            .byte	8
37562                                           ! 7705                            8,
37563 92DB                        08            .byte	8
37564                                           ! 7706                                 0,
37565 92DC                        00            .byte	0
37566                                           ! 7707                            0,
37567 92DD                        00            .byte	0
37568                                           ! 7708                                 0,
37569 92DE                        00            .byte	0
37570                                           ! 7709                          0,
37571 92DF                      0000            .word	0
37572 92E1                      0000            .word	0
37573                                           ! 7710 } },
37574                                           ! 7711 { 0x0192,
37575 92E3                      0192            .word	$192
37576                                           ! 7712 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37577 92E5                      009B            .word	$9B
37578                                           ! 7713                           0x01 | 0x02 | 0x04,
37579 92E7                        07            .byte	7
37580                                           ! 7714                           0,
37581 92E8                        00            .byte	0
37582                                           ! 7715                           64,
37583 92E9                      0040            .word	$40
37584                                           ! 7716                    64,
37585 92EB                      0040            .word	$40
37586                                           ! 7717                        0xA000,
37587 92ED                      A000            .word	$A000
37588                                           ! 7718                        0x0000,
37589 92EF                      0000            .word	0
37590                                           ! 7719                       0,
37591 92F1                      0000            .word	0
37592 92F3                      0000            .word	0
37593                                           ! 7720                             7680,
37594 92F5                      1E00            .word	$1E00
37595                                           ! 7721         
37596                                           ! 7721                1920,
37597 92F7                      0780            .word	$780
37598                                           ! 7722                        1080,
37599 92F9                      0438            .word	$438
37600                                           ! 7723                      8,
37601 92FB                        08            .byte	8
37602                                           ! 7724                      16,
37603 92FC                        10            .byte	$10
37604                                           ! 7725                           1,
37605 92FD                        01            .byte	1
37606                                           ! 7726                         32,
37607 92FE                        20            .byte	$20
37608                                           ! 7727                          127,
37609 92FF                        7F            .byte	$7F
37610                                           ! 7728                        0x06,
37611 9300                        06            .byte	6
37612                                           ! 7729                     0,
37613 9301                        00            .byte	0
37614                                           ! 7730                               1,
37615 9302                        01            .byte	1
37616                                           ! 7731                          0,
37617 9303                        00            .byte	0
37618                                           ! 7732                        8,
37619 9304                        08            .byte	8
37620                                           ! 7733                             16,
37621 9305                        10            .byte	$10
37622                                           ! 7734                          8,
37623 9306                        08            .byte	8
37624                                           ! 7735                               8,
37625 9307                        08            .byte	8
37626                                           ! 7736                         8,
37627 9308                        08            .byte	8
37628                                           ! 7737                              0,
37629 9309                        00            .byte	0
37630                                           ! 7738                         8,
37631 930A                        08            .byte	8
37632                                           ! 7739                              24,
37633 930B                        18            .byte	$18
37634                                           ! 7740                                0x02,
37635 930C                        02            .byte	2
37636                                           ! 7741                        0xE0000000,
37637 930D                      0000            .word	0
37638 930F                      E000            .word	$E000
37639                                           ! 7742                               0,
37640 9311                      0000            .word	0
37641 9313                      0000            .word	0
37642                                           ! 7743                             0,
37643 9315                      0000            .word	0
37644                                           ! 7744                                7680,
37645 9317                      1E00            .word	$1E00
37646                                           ! 7745                             0,
37647 9319                        00            .byte	0
37648                                           ! 7746                             0,
37649 931A                        00            .byte	0
37650                                           ! 7747                           8,
37651 931B                        08            .byte	8
37652                                           ! 7748                                16,
37653 931C                        10            .byte	$10
37654                                           ! 7749                             8,
37655 931D                        08            .byte	8
37656                                           ! 7750                                  8,
37657 931E                        08            .byte	8
37658                                           ! 7751                            8,
37659 931F                        08            .byte	8
37660                                           ! 7752                                 0,
37661 9320                        00            .byte	0
37662                                           ! 7753                            8,
37663 9321                        08            .byte	8
37664                                           ! 7754                                 24,
37665 9322                        18            .byte	$18
37666                                           ! 7755                          0,
37667 9323                      0000            .word	0
37668 9325                      0000            .word	0
37669                                           ! 7756 } },
37670                                           ! 7757 { 0x0193,
37671 9327                      0193            .word	$193
37672                                           ! 7758 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37673 9329                      009B            .word	$9B
37674                                           ! 7759                           0x01 | 0x02 | 0x04,
37675 932B                        07            .byte	7
37676                                           ! 7760                           0,
37677 932C                        00            .byte	0
37678                                           ! 7761                           64,
37679 932D                      0040            .word	$40
37680                                           ! 7762                    64,
37681 932F                      0040            .word	$40
37682                                           ! 7763                        0xA000,
37683 9331                      A000            .word	$A000
37684                                           ! 7764                        0x0000,
37685 9333                      0000            .word	0
37686                                           ! 7765                       0,
37687 9335                      0000            .word	0
37688 9337                      0000            .word	0
37689                                           ! 7766                             3200,
37690 9339                      0C80            .word	$C80
37691                                           ! 7767                        1600,
37692 933B                      0640            .word	$640
37693                                           ! 7768                        900,
37694 933D                      0384            .word	$384
37695                                           ! 7769                      8,
37696 933F                        08            .byte	8
37697                                           ! 7770                      16,
37698 9340                        10            .byte	$10
37699                                           ! 7771                           1,
37700 9341                        01            .byte	1
37701                                           ! 7772                         16,
37702 9342                        10            .byte	$10
37703                                           ! 7773                          44,
37704 9343                        2C            .byte	$2C
37705                                           ! 7774                        0x06,
37706 9344                        06            .byte	6
37707                                           ! 7775                     0,
37708 9345                        00            .byte	0
37709                                           ! 7776                               4,
37710 9346                        04            .byte	4
37711                                           ! 7777                          0,
37712 9347                        00            .byte	0
37713                                           ! 7778                        5,
37714 9348                        05            .byte	5
37715                                           ! 7779                             11,
37716 9349                        0B            .byte	$B
37717                                           ! 7780                          6,
37718 934A                        06            .byte	6
37719                                           ! 7781                               5,
37720 934B                        05            .byte	5
37721                                           ! 7782                         5,
37722 934C                        05            .byte	5
37723                                           ! 7783                              0,
37724 934D                        00            .byte	0
37725                                           ! 7784                         0,
37726 934E                        00            .byte	0
37727                                           ! 7785                              0,
37728 934F                        00            .byte	0
37729                                           ! 7786                                0,
37730 9350                        00            .byte	0
37731                                           ! 7787                        0xE0000000,
37732 9351                      0000            .word	0
37733 9353                      E000            .word	$E000
37734                                           ! 7788                               0,
37735 9355                      0000            .word	0
37736 9357                      0000            .word	0
37737                                           ! 7789                             0,
37738 9359                      0000            .word	0
37739                                           ! 7790  
37740                                           ! 7790                               3200,
37741 935B                      0C80            .word	$C80
37742                                           ! 7791                             0,
37743 935D                        00            .byte	0
37744                                           ! 7792                             0,
37745 935E                        00            .byte	0
37746                                           ! 7793                           5,
37747 935F                        05            .byte	5
37748                                           ! 7794                                11,
37749 9360                        0B            .byte	$B
37750                                           ! 7795                             6,
37751 9361                        06            .byte	6
37752                                           ! 7796                                  5,
37753 9362                        05            .byte	5
37754                                           ! 7797                            5,
37755 9363                        05            .byte	5
37756                                           ! 7798                                 0,
37757 9364                        00            .byte	0
37758                                           ! 7799                            0,
37759 9365                        00            .byte	0
37760                                           ! 7800                                 0,
37761 9366                        00            .byte	0
37762                                           ! 7801                          0,
37763 9367                      0000            .word	0
37764 9369                      0000            .word	0
37765                                           ! 7802 } },
37766                                           ! 7803 { 0x0194,
37767 936B                      0194            .word	$194
37768                                           ! 7804 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37769 936D                      009B            .word	$9B
37770                                           ! 7805                           0x01 | 0x02 | 0x04,
37771 936F                        07            .byte	7
37772                                           ! 7806                           0,
37773 9370                        00            .byte	0
37774                                           ! 7807                           64,
37775 9371                      0040            .word	$40
37776                                           ! 7808                    64,
37777 9373                      0040            .word	$40
37778                                           ! 7809                        0xA000,
37779 9375                      A000            .word	$A000
37780                                           ! 7810                        0x0000,
37781 9377                      0000            .word	0
37782                                           ! 7811                       0,
37783 9379                      0000            .word	0
37784 937B                      0000            .word	0
37785                                           ! 7812                             4800,
37786 937D                      12C0            .word	$12C0
37787                                           ! 7813                        1600,
37788 937F                      0640            .word	$640
37789                                           ! 7814                        900,
37790 9381                      0384            .word	$384
37791                                           ! 7815                      8,
37792 9383                        08            .byte	8
37793                                           ! 7816                      16,
37794 9384                        10            .byte	$10
37795                                           ! 7817                           1,
37796 9385                        01            .byte	1
37797                                           ! 7818                         24,
37798 9386                        18            .byte	$18
37799                                           ! 7819                          66,
37800 9387                        42            .byte	$42
37801                                           ! 7820                        0x06,
37802 9388                        06            .byte	6
37803                                           ! 7821                     0,
37804 9389                        00            .byte	0
37805                                           ! 7822                               2,
37806 938A                        02            .byte	2
37807                                           ! 7823                          0,
37808 938B                        00            .byte	0
37809                                           ! 7824                        8,
37810 938C                        08            .byte	8
37811                                           ! 7825                             16,
37812 938D                        10            .byte	$10
37813                                           ! 7826                          8,
37814 938E                        08            .byte	8
37815                                           ! 7827                               8,
37816 938F                        08            .byte	8
37817                                           ! 7828                         8,
37818 9390                        08            .byte	8
37819                                           ! 7829                              0,
37820 9391                        00            .byte	0
37821                                           ! 7830                         0,
37822 9392                        00            .byte	0
37823                                           ! 7831                              0,
37824 9393                        00            .byte	0
37825                                           ! 7832                                0,
37826 9394                        00            .byte	0
37827                                           ! 7833                        0xE0000000,
37828 9395                      0000            .word	0
37829 9397                      E000            .word	$E000
37830                                           ! 7834                               0,
37831 9399                      0000            .word	0
37832 939B                      0000            .word	0
37833                                           ! 7835                             0,
37834 939D                      0000            .word	0
37835                                           ! 7836                                4800,
37836 939F                      12C0            .word	$12C0
37837                                           ! 7837                             0,
37838 93A1                        00            .byte	0
37839                                           ! 7838                             0,
37840 93A2                        00            .byte	0
37841                                           ! 7839                           8,
37842 93A3                        08            .byte	8
37843                                           ! 7840                                16,
37844 93A4                        10            .byte	$10
37845                                           ! 7841                             8,
37846 93A5                        08            .byte	8
37847                                           ! 7842                                  8,
37848 93A6                        08            .byte	8
37849                                           ! 7843                            8,
37850 93A7                        08            .byte	8
37851                                           ! 7844                                 0,
37852 93A8                        00            .byte	0
37853                                           ! 7845                            0,
37854 93A9                        00            .byte	0
37855                                           ! 7846                                 0,
37856 93AA                        00            .byte	0
37857                                           ! 7847                          0,
37858 93AB                      0000            .word	0
37859 93AD                      0000            .word	0
37860                                           ! 7848 } },
37861                                           ! 7849 { 0x0195,
37862 93AF                      0195            .word	$195
37863                                           ! 7850 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
37864 93B1                      009B            .word	$9B
37865                                           ! 7851                           0x01 | 0x02 | 0x04,
37866 93B3                        07            .byte	7
37867                                           ! 7852                           0,
37868 93B4                        00            .byte	0
37869                                           ! 7853                           64,
37870 93B5                      0040            .word	$40
37871                                           ! 7854                    64,
37872 93B7                      0040            .word	$40
37873                                           ! 7855                        0xA000,
37874 93B9                      A000            .word	$A000
37875                                           ! 7856                        0x0000,
37876 93BB                      0000            .word	0
37877                                           ! 7857                       0,
37878 93BD                      0000            .word	0
37879 93BF                      0000            .word	0
37880                                           ! 7858             
37881                                           ! 7858                 6400,
37882 93C1                      1900            .word	$1900
37883                                           ! 7859                        1600,
37884 93C3                      0640            .word	$640
37885                                           ! 7860                        900,
37886 93C5                      0384            .word	$384
37887                                           ! 7861                      8,
37888 93C7                        08            .byte	8
37889                                           ! 7862                      16,
37890 93C8                        10            .byte	$10
37891                                           ! 7863                           1,
37892 93C9                        01            .byte	1
37893                                           ! 7864                         32,
37894 93CA                        20            .byte	$20
37895                                           ! 7865                          88,
37896 93CB                        58            .byte	$58
37897                                           ! 7866                        0x06,
37898 93CC                        06            .byte	6
37899                                           ! 7867                     0,
37900 93CD                        00            .byte	0
37901                                           ! 7868                               1,
37902 93CE                        01            .byte	1
37903                                           ! 7869                          0,
37904 93CF                        00            .byte	0
37905                                           ! 7870                        8,
37906 93D0                        08            .byte	8
37907                                           ! 7871                             16,
37908 93D1                        10            .byte	$10
37909                                           ! 7872                          8,
37910 93D2                        08            .byte	8
37911                                           ! 7873                               8,
37912 93D3                        08            .byte	8
37913                                           ! 7874                         8,
37914 93D4                        08            .byte	8
37915                                           ! 7875                              0,
37916 93D5                        00            .byte	0
37917                                           ! 7876                         8,
37918 93D6                        08            .byte	8
37919                                           ! 7877                              24,
37920 93D7                        18            .byte	$18
37921                                           ! 7878                                0x02,
37922 93D8                        02            .byte	2
37923                                           ! 7879                        0xE0000000,
37924 93D9                      0000            .word	0
37925 93DB                      E000            .word	$E000
37926                                           ! 7880                               0,
37927 93DD                      0000            .word	0
37928 93DF                      0000            .word	0
37929                                           ! 7881                             0,
37930 93E1                      0000            .word	0
37931                                           ! 7882                                6400,
37932 93E3                      1900            .word	$1900
37933                                           ! 7883                             0,
37934 93E5                        00            .byte	0
37935                                           ! 7884                             0,
37936 93E6                        00            .byte	0
37937                                           ! 7885                           8,
37938 93E7                        08            .byte	8
37939                                           ! 7886                                16,
37940 93E8                        10            .byte	$10
37941                                           ! 7887                             8,
37942 93E9                        08            .byte	8
37943                                           ! 7888                                  8,
37944 93EA                        08            .byte	8
37945                                           ! 7889                            8,
37946 93EB                        08            .byte	8
37947                                           ! 7890                                 0,
37948 93EC                        00            .byte	0
37949                                           ! 7891                            8,
37950 93ED                        08            .byte	8
37951                                           ! 7892                                 24,
37952 93EE                        18            .byte	$18
37953                                           ! 7893                          0,
37954 93EF                      0000            .word	0
37955 93F1                      0000            .word	0
37956                                           ! 7894 } },
37957                                           ! 7895 { 0xFFFF,
37958 93F3                      FFFF            .word	$FFFF
37959                                           ! 7896 { 0,
37960 93F5                      0000            .word	0
37961                                           ! 7897 } },
37962 93F7                  00000040            .blkb	$40
37963                                           ! 7898 };
37964                                           !BCC_EOS
37965                                           ! 7899 extern char vbebios_copyright;
37966                                           !BCC_EOS
37967                                           ! 7900 extern char vbebios_vendor_name;
37968                                           !BCC_EOS
37969                                           ! 7901 extern char vbebios_product_name;
37970                                           !BCC_EOS
37971                                           ! 7902 extern char vbebios_product_revision;
37972                                           !BCC_EOS
37973                                           ! 7903 #asm
37974                                           !BCC_ASM
37975                       00009437            _vbebios_copyright:
37976 9437                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
37977 947C                        00            .byte 0x00
37978                       0000947D            _vbebios_vendor_name:
37979 947D                        42            .ascii "Bochs/Plex86 Developers"
37980 9494                        00            .byte 0x00
37981                       00009495            _vbebios_product_name:
37982 9495                        42            .ascii "Bochs/Plex86 VBE Adapter"
37983 94AD                        00            .byte 0x00
37984                       000094AE            _vbebios_product_revision:
37985 94AE                        24            .ascii "$Id: vbe.c,v 1.64 2011/07/19 18:25:05 vruppert Exp $"
37986 94E2                        00            .byte 0x00
37987                       000094E3            _vbebios_info_string:
37988 94E3                        42            .ascii "Bochs VBE Display Adapter enabled"
37989 9504                        0A            .byte 0x0a,0x0d
37990 9506                        0A            .byte 0x0a,0x0d
37991 9508                        00            .byte 0x00
37992                       00009509            _no_vbebios_info_string:
37993 9509                        4E            .ascii "NO Bochs VBE Support available!"
37994 9528                        0A            .byte 0x0a,0x0d
37995 952A                        0A            .byte 0x0a,0x0d
37996 952C                        00            .byte 0x00
37997                       0000952D            msg_vbe_init:
37998 952D                        56            .ascii "VBE Bios $Id: vbe.c,v 1.64 2011/07/19 18:25:05 vruppert Exp $"
37999 956A                        0A            .byte 0x0a,0x0d, 0x00
38000 956D                  00000002              .align 2
38001                       0000956E            vesa_pm_start:
38002 956E                      0014              dw vesa_pm_set_window - vesa_pm_start
38003 9570                      004B              dw vesa_pm_set_display_start - vesa_pm_start
38004 9572                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
38005 9574                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
38006                       00009576            vesa_pm_io_ports_table:
38007 9576                      01CE              dw 0x01CE
38008 9578                      01CF              dw 0x01CE + 1
38009 957A                      01CF              dw 0x01CF
38010 957C                      01D0              dw 0x01CF + 1
38011 957E                      FFFF              dw 0xffff
38012 9580                      FFFF              dw 0xffff
38013                                             USE32
38014                       00009582            vesa_pm_set_window:
38015 9582     66    83FB                   00    cmp bx, #0x00
38016 9586           74           05              je vesa_pm_set_display_window1
38017 9588     66    B8                   0100    mov ax, #0x0100
38018 958C           C3                           ret
38019                       0000958D            vesa_pm_set_display_window1:
38020 958D     66    89D0                         mov ax, dx
38021 9590     66    52                           push dx
38022 9592     66    50                           push ax
38023 9594     66    BA                   01CE    mov dx, # 0x01CE
38024 9598     66    B8                   0005    mov ax, # 0x5
38025 959C     66    EF                           out dx, ax
38026 959E     66    58                           pop ax
38027 95A0     66    BA                   01CF    mov dx, # 0x01CF
38028 95A4     66    EF                           out dx, ax
38029 95A6     66    ED                           in ax, dx
38030 95A8     66    5A                           pop dx
38031 95AA     66    39C2                         cmp dx, ax
38032 95AD           75           05              jne illegal_window
38033 95AF     66    B8                   004F    mov ax, #0x004f
38034 95B3           C3                           ret
38035                       000095B4            illegal_window:
38036 95B4     66    B8                   014F    mov ax, #0x014f
38037 95B8           C3                           ret
38038                       000095B9            vesa_pm_set_display_start:
38039 95B9           80FB                   80    cmp bl, #0x80
38040 95BC           74           0A              je vesa_pm_set_display_start1
38041 95BE           80FB                   00    cmp bl, #0x00
38042 95C1           74           05              je vesa_pm_set_display_start1
38043 95C3     66    B8                   0100    mov ax, #0x0100
38044 95C7           C3                           ret
38045                       000095C8            vesa_pm_set_display_start1:
38046                                           ; convert offset to (X, Y) coordinate
38047                                           ; (would be simpler to change Bochs 1 API...)
38048 95C8           50                           push eax
38049 95C9           51                           push ecx
38050 95CA           52                           push edx
38051 95CB           56                           push esi
38052 95CC           57                           push edi
38053 95CD           C1E2                   10    shl edx, #16
38054 95D0           81E1             0000FFFF    and ecx, #0xffff
38055 95D6           09D1                         or ecx, edx
38056 95D8           C1E1                   02    shl ecx, #2
38057 95DB           89C8                         mov eax, ecx
38058 95DD           50                           push eax
38059 95DE     66    BA                   01CE    mov dx, # 0x01CE
38060 95E2     66    B8                   0006    mov ax, # 0x6
38061 95E6     66    EF                           out dx, ax
38062 95E8     66    BA                   01CF    mov dx, # 0x01CF
38063 95EC     66    ED                           in ax, dx
38064 95EE         0FB7C8                         movzx ecx, ax
38065 95F1     66    BA                   01CE    mov dx, # 0x01CE
38066 95F5     66    B8                   0003    mov ax, # 0x3
38067 95F9     66    EF                           out dx, ax
38068 95FB     66    BA                   01CF    mov dx, # 0x01CF
38069 95FF     66    ED                           in ax, dx
38070 9601         0FB7F0                         movzx esi, ax
38071 9604           58                           pop eax
38072 9605           83FE                   04    cmp esi, #4
38073 9608           74           17              jz bpp4_mode
38074 960A           83C6                   07    add esi, #7
38075 960D           C1EE                   03    shr esi, #3
38076 9610         0FAFCE                         imul ecx, esi
38077 9613           31D2                         xor edx, edx
38078 9615           F7F1                         div ecx
38079 9617           89C7                         mov edi, eax
38080 9619           89D0                         mov eax, edx
38081 961B           31D2                         xor edx, edx
38082 961D           F7F6                         div esi
38083 961F           EB           0C              jmp set_xy_regs
38084                       00009621            bpp4_mode:
38085 9621           D1E9                         shr ecx, #1
38086 9623           31D2                         xor edx, edx
38087 9625           F7F1                         div ecx
38088 9627           89C7                         mov edi, eax
38089 9629           89D0                         mov eax, edx
38090 962B           D1E0                         shl eax, #1
38091                       0000962D            set_xy_regs:
38092 962D     66    52                           push dx
38093 962F     66    50                           push ax
38094 9631     66    BA                   01CE    mov dx, # 0x01CE
38095 9635     66    B8                   0008    mov ax, # 0x8
38096 9639     66    EF                           out dx, ax
38097 963B     66    58                           pop ax
38098 963D     66    BA                   01CF    mov dx, # 0x01CF
38099 9641     66    EF                           out dx, ax
38100 9643     66    5A                           pop dx
38101 9645     66    89F8                         mov ax, di
38102 9648     66    52                           push dx
38103 964A     66    50                           push ax
38104 964C     66    BA                   01CE    mov dx, # 0x01CE
38105 9650     66    B8                   0009    mov ax, # 0x9
38106 9654     66    EF                           out dx, ax
38107 9656     66    58                           pop ax
38108 9658     66    BA                   01CF    mov dx, # 0x01CF
38109 965C     66    EF                           out dx, ax
38110 965E     66    5A                           pop dx
38111 9660           5F                           pop edi
38112 9661           5E                           pop esi
38113 9662           5A                           pop edx
38114 9663           59                           pop ecx
38115 9664           58                           pop eax
38116 9665     66    B8                   004F    mov ax, #0x004f
38117 9669           C3                           ret
38118                       0000966A            vesa_pm_unimplemented:
38119 966A     66    B8                   014F    mov ax, #0x014f
38120 966E           C3                           ret
38121                                             USE16
38122                       0000966F            vesa_pm_end:
38123                                           ; DISPI ioport functions
38124                       0000966F            dispi_get_id:
38125 966F           52                           push dx
38126 9670           BA                   01CE    mov dx, # 0x01CE
38127 9673           B8                   0000    mov ax, # 0x0
38128 9676           EF                           out dx, ax
38129 9677           BA                   01CF    mov dx, # 0x01CF
38130 967A           ED                           in ax, dx
38131 967B           5A                           pop dx
38132 967C           C3                           ret
38133                       0000967D            dispi_set_id:
38134 967D           52                           push dx
38135 967E           50                           push ax
38136 967F           BA                   01CE    mov dx, # 0x01CE
38137 9682           B8                   0000    mov ax, # 0x0
38138 9685           EF                           out dx, ax
38139 9686           58                           pop ax
38140 9687           BA                   01CF    mov dx, # 0x01CF
38141 968A           EF                           out dx, ax
38142 968B           5A                           pop dx
38143 968C           C3                           ret
38144                                           ! 8073 endasm
38145                                           !BCC_ENDASM
38146                                           ! 8074 static void dispi_set_xres(xres)
38147                                           ! 8075   Bit16u xres;
38148                                           
38149                       0000968D            _dispi_set_xres:
38150                                           !BCC_EOS
38151                                           ! 8076 {
38152                                           ! 8077 #asm
38153                                           !BCC_ASM
38154                       00000002            _dispi_set_xres.xres	set	2
38155 968D           55                           push bp
38156 968E           89E5                         mov bp, sp
38157 9690           50                           push ax
38158 9691           52                           push dx
38159 9692           BA                   01CE    mov dx, # 0x01CE
38160 9695           B8                   0001    mov ax, # 0x1
38161 9698           EF                           out dx, ax
38162 9699           BA                   01CF    mov dx, # 0x01CF
38163 969C           8B46         04              mov ax, 4[bp] ; xres
38164 969F           EF                           out dx, ax
38165 96A0           5A                           pop dx
38166 96A1           58                           pop ax
38167 96A2           5D                           pop bp
38168                                           ! 8091 endasm
38169                                           !BCC_ENDASM
38170                                           ! 8092 }
38171 96A3           C3                         ret
38172                                           ! 8093 static void dispi_set_yres(yres)
38173                                           ! 8094   Bit16u yres;
38174                       000096A4            _dispi_set_yres:
38175                                           !BCC_EOS
38176                                           ! 8095 {
38177                                           ! 8096   outw(0x01CE,0x2);
38178 96A4           55                         push	bp
38179 96A5           89E5                       mov	bp,sp
38180                                           ! Debug: list int = const 2 (used reg = )
38181 96A7           B8                   0002  mov	ax,*2
38182 96AA           50                         push	ax
38183                                           ! Debug: list int = const $1CE (used reg = )
38184 96AB           B8                   01CE  mov	ax,#$1CE
38185 96AE           50                         push	ax
38186                                           ! Debug: func () void = outw+0 (used reg = )
38187 96AF           E8         E829            call	_outw
38188 96B2           89EC                       mov	sp,bp
38189                                           !BCC_EOS
38190                                           ! 8097   outw(0x01CF,yres);
38191                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
38192 96B4           FF76         04            push	4[bp]
38193                                           ! Debug: list int = const $1CF (used reg = )
38194 96B7           B8                   01CF  mov	ax,#$1CF
38195 96BA           50                         push	ax
38196                                           ! Debug: func () void = outw+0 (used reg = )
38197 96BB           E8         E81D            call	_outw
38198 96BE           89EC                       mov	sp,bp
38199                                           !BCC_EOS
38200                                           ! 8098 }
38201 96C0           5D                         pop	bp
38202 96C1           C3                         ret
38203                                           ! 8099 static void dispi_set_bpp(bpp)
38204                                           ! 8100   Bit16u bpp;
38205                       000096C2            _dispi_set_bpp:
38206                                           !BCC_EOS
38207                                           ! 8101 {
38208                                           ! 8102   outw(0x01CE,0x3);
38209 96C2           55                         push	bp
38210 96C3           89E5                       mov	bp,sp
38211                                           ! Debug: list int = const 3 (used reg = )
38212 96C5           B8                   0003  mov	ax,*3
38213 96C8           50                         push	ax
38214                                           ! Debug: list int = const $1CE (used reg = )
38215 96C9           B8                   01CE  mov	ax,#$1CE
38216 96CC           50                         push	ax
38217                                           ! Debug: func () void = outw+0 (used reg = )
38218 96CD           E8         E80B            call	_outw
38219 96D0           89EC                       mov	sp,bp
38220                                           !BCC_EOS
38221                                           ! 8103   outw(0x01CF,bpp);
38222                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
38223 96D2           FF76         04            push	4[bp]
38224                                           ! Debug: list int = const $1CF (used reg = )
38225 96D5           B8                   01CF  mov	ax,#$1CF
38226 96D8           50                         push	ax
38227                                           ! Debug: func () void = outw+0 (used reg = )
38228 96D9           E8         E7FF            call	_outw
38229 96DC           89EC                       mov	sp,bp
38230                                           !BCC_EOS
38231                                           ! 8104 }
38232 96DE           5D                         pop	bp
38233 96DF           C3                         ret
38234                                           ! 8105 #asm
38235                                           !BCC_ASM
38236                       00000002            _dispi_set_bpp.bpp	set	2
38237                                           ; AL = bits per pixel / AH = bytes per pixel
38238                       000096E0            dispi_get_bpp:
38239 96E0           52                           push dx
38240 96E1           BA                   01CE    mov dx, # 0x01CE
38241 96E4           B8                   0003    mov ax, # 0x3
38242 96E7           EF                           out dx, ax
38243 96E8           BA                   01CF    mov dx, # 0x01CF
38244 96EB           ED                           in ax, dx
38245 96EC           88C4                         mov ah, al
38246 96EE           C0EC                   03    shr ah, 3
38247 96F1           A8                     07    test al, #0x07
38248 96F3           74           02              jz get_bpp_noinc
38249 96F5           FEC4                         inc ah
38250                       000096F7            get_bpp_noinc:
38251 96F7           5A                           pop dx
38252 96F8           C3                           ret
38253                                           ; get display capabilities
38254                       000096F9            _dispi_get_max_xres:
38255 96F9           52                           push dx
38256 96FA           53                           push bx
38257 96FB           E8         004F              call dispi_get_enable
38258 96FE           89C3                         mov bx, ax
38259 9700           0D                   0002    or ax, # 0x02
38260 9703           E8         0037              call _dispi_set_enable
38261 9706           BA                   01CE    mov dx, # 0x01CE
38262 9709           B8                   0001    mov ax, # 0x1
38263 970C           EF                           out dx, ax
38264 970D           BA                   01CF    mov dx, # 0x01CF
38265 9710           ED                           in ax, dx
38266 9711           50                           push ax
38267 9712           89D8                         mov ax, bx
38268 9714           E8         0026              call _dispi_set_enable
38269 9717           58                           pop ax
38270 9718           5B                           pop bx
38271 9719           5A                           pop dx
38272 971A           C3                           ret
38273                       0000971B            _dispi_get_max_bpp:
38274 971B           52                           push dx
38275 971C           53                           push bx
38276 971D           E8         002D              call dispi_get_enable
38277 9720           89C3                         mov bx, ax
38278 9722           0D                   0002    or ax, # 0x02
38279 9725           E8         0015              call _dispi_set_enable
38280 9728           BA                   01CE    mov dx, # 0x01CE
38281 972B           B8                   0003    mov ax, # 0x3
38282 972E           EF                           out dx, ax
38283 972F           BA                   01CF    mov dx, # 0x01CF
38284 9732           ED                           in ax, dx
38285 9733           50                           push ax
38286 9734           89D8                         mov ax, bx
38287 9736           E8         0004              call _dispi_set_enable
38288 9739           58                           pop ax
38289 973A           5B                           pop bx
38290 973B           5A                           pop dx
38291 973C           C3                           ret
38292                       0000973D            _dispi_set_enable:
38293 973D           52                           push dx
38294 973E           50                           push ax
38295 973F           BA                   01CE    mov dx, # 0x01CE
38296 9742           B8                   0004    mov ax, # 0x4
38297 9745           EF                           out dx, ax
38298 9746           58                           pop ax
38299 9747           BA                   01CF    mov dx, # 0x01CF
38300 974A           EF                           out dx, ax
38301 974B           5A                           pop dx
38302 974C           C3                           ret
38303                       0000974D            dispi_get_enable:
38304 974D           52                           push dx
38305 974E           BA                   01CE    mov dx, # 0x01CE
38306 9751           B8                   0004    mov ax, # 0x4
38307 9754           EF                           out dx, ax
38308 9755           BA                   01CF    mov dx, # 0x01CF
38309 9758           ED                           in ax, dx
38310 9759           5A                           pop dx
38311 975A           C3                           ret
38312                       0000975B            _dispi_set_bank:
38313 975B           52                           push dx
38314 975C           50                           push ax
38315 975D           BA                   01CE    mov dx, # 0x01CE
38316 9760           B8                   0005    mov ax, # 0x5
38317 9763           EF                           out dx, ax
38318 9764           58                           pop ax
38319 9765           BA                   01CF    mov dx, # 0x01CF
38320 9768           EF                           out dx, ax
38321 9769           5A                           pop dx
38322 976A           C3                           ret
38323                       0000976B            dispi_get_bank:
38324 976B           52                           push dx
38325 976C           BA                   01CE    mov dx, # 0x01CE
38326 976F           B8                   0005    mov ax, # 0x5
38327 9772           EF                           out dx, ax
38328 9773           BA                   01CF    mov dx, # 0x01CF
38329 9776           ED                           in ax, dx
38330 9777           5A                           pop dx
38331 9778           C3                           ret
38332                                           ! 8201 endasm
38333                                           !BCC_ENDASM
38334                                           ! 8202 static void dispi_set_bank_farcall()
38335                                           ! 8203 {
38336                       00009779            _dispi_set_bank_farcall:
38337                                           ! 8204 #asm
38338                                           !BCC_ASM
38339 9779           81FB                 0100    cmp bx,#0x0100
38340 977D           74           1E              je dispi_set_bank_farcall_get
38341 977F           09DB                         or bx,bx
38342 9781           75           28              jnz dispi_set_bank_farcall_error
38343 9783           89D0                         mov ax,dx
38344 9785           52                           push dx
38345 9786           50                           push ax
38346 9787           B8                   0005    mov ax,# 0x5
38347 978A           BA                   01CE    mov dx,# 0x01CE
38348 978D           EF                           out dx,ax
38349 978E           58                           pop ax
38350 978F           BA                   01CF    mov dx,# 0x01CF
38351 9792           EF                           out dx,ax
38352 9793           ED                           in ax,dx
38353 9794           5A                           pop dx
38354 9795           39C2                         cmp dx,ax
38355 9797           75           12              jne dispi_set_bank_farcall_error
38356 9799           B8                   004F    mov ax, #0x004f
38357 979C           CB                           retf
38358                       0000979D            dispi_set_bank_farcall_get:
38359 979D           B8                   0005    mov ax,# 0x5
38360 97A0           BA                   01CE    mov dx,# 0x01CE
38361 97A3           EF                           out dx,ax
38362 97A4           BA                   01CF    mov dx,# 0x01CF
38363 97A7           ED                           in ax,dx
38364 97A8           89C2                         mov dx,ax
38365 97AA           CB                           retf
38366                       000097AB            dispi_set_bank_farcall_error:
38367 97AB           B8                   014F    mov ax,#0x014F
38368 97AE           CB                           retf
38369                                           ! 8235 endasm
38370                                           !BCC_ENDASM
38371                                           ! 8236 }
38372 97AF           C3                         ret
38373                                           ! 8237 #asm
38374                                           !BCC_ASM
38375                       000097B0            dispi_set_x_offset:
38376 97B0           52                           push dx
38377 97B1           50                           push ax
38378 97B2           BA                   01CE    mov dx, # 0x01CE
38379 97B5           B8                   0008    mov ax, # 0x8
38380 97B8           EF                           out dx, ax
38381 97B9           58                           pop ax
38382 97BA           BA                   01CF    mov dx, # 0x01CF
38383 97BD           EF                           out dx, ax
38384 97BE           5A                           pop dx
38385 97BF           C3                           ret
38386                       000097C0            dispi_get_x_offset:
38387 97C0           52                           push dx
38388 97C1           BA                   01CE    mov dx, # 0x01CE
38389 97C4           B8                   0008    mov ax, # 0x8
38390 97C7           EF                           out dx, ax
38391 97C8           BA                   01CF    mov dx, # 0x01CF
38392 97CB           ED                           in ax, dx
38393 97CC           5A                           pop dx
38394 97CD           C3                           ret
38395                       000097CE            dispi_set_y_offset:
38396 97CE           52                           push dx
38397 97CF           50                           push ax
38398 97D0           BA                   01CE    mov dx, # 0x01CE
38399 97D3           B8                   0009    mov ax, # 0x9
38400 97D6           EF                           out dx, ax
38401 97D7           58                           pop ax
38402 97D8           BA                   01CF    mov dx, # 0x01CF
38403 97DB           EF                           out dx, ax
38404 97DC           5A                           pop dx
38405 97DD           C3                           ret
38406                       000097DE            dispi_get_y_offset:
38407 97DE           52                           push dx
38408 97DF           BA                   01CE    mov dx, # 0x01CE
38409 97E2           B8                   0009    mov ax, # 0x9
38410 97E5           EF                           out dx, ax
38411 97E6           BA                   01CF    mov dx, # 0x01CF
38412 97E9           ED                           in ax, dx
38413 97EA           5A                           pop dx
38414 97EB           C3                           ret
38415                       000097EC            vga_set_virt_width:
38416 97EC           50                           push ax
38417 97ED           53                           push bx
38418 97EE           52                           push dx
38419 97EF           89C3                         mov bx, ax
38420 97F1           E8         FEEC              call dispi_get_bpp
38421 97F4           3C                     04    cmp al, #0x04
38422 97F6           77           02              ja set_width_svga
38423 97F8           D1EB                         shr bx, #1
38424                       000097FA            set_width_svga:
38425 97FA           C1EB                   03    shr bx, #3
38426 97FD           BA                   03D4    mov dx, # 0x3d4
38427 9800           88DC                         mov ah, bl
38428 9802           B0                     13    mov al, #0x13
38429 9804           EF                           out dx, ax
38430 9805           5A                           pop dx
38431 9806           5B                           pop bx
38432 9807           58                           pop ax
38433 9808           C3                           ret
38434                       00009809            dispi_set_virt_width:
38435 9809           E8         FFE0              call vga_set_virt_width
38436 980C           52                           push dx
38437 980D           50                           push ax
38438 980E           BA                   01CE    mov dx, # 0x01CE
38439 9811           B8                   0006    mov ax, # 0x6
38440 9814           EF                           out dx, ax
38441 9815           58                           pop ax
38442 9816           BA                   01CF    mov dx, # 0x01CF
38443 9819           EF                           out dx, ax
38444 981A           5A                           pop dx
38445 981B           C3                           ret
38446                       0000981C            dispi_get_virt_width:
38447 981C           52                           push dx
38448 981D           BA                   01CE    mov dx, # 0x01CE
38449 9820           B8                   0006    mov ax, # 0x6
38450 9823           EF                           out dx, ax
38451 9824           BA                   01CF    mov dx, # 0x01CF
38452 9827           ED                           in ax, dx
38453 9828           5A                           pop dx
38454 9829           C3                           ret
38455                       0000982A            dispi_get_virt_height:
38456 982A           52                           push dx
38457 982B           BA                   01CE    mov dx, # 0x01CE
38458 982E           B8                   0007    mov ax, # 0x7
38459 9831           EF                           out dx, ax
38460 9832           BA                   01CF    mov dx, # 0x01CF
38461 9835           ED                           in ax, dx
38462 9836           5A                           pop dx
38463 9837           C3                           ret
38464                       00009838            _vga_compat_setup:
38465 9838           50                           push ax
38466 9839           52                           push dx
38467                                             ; set CRT X resolution
38468 983A           BA                   01CE    mov dx, # 0x01CE
38469 983D           B8                   0001    mov ax, # 0x1
38470 9840           EF                           out dx, ax
38471 9841           BA                   01CF    mov dx, # 0x01CF
38472 9844           ED                           in ax, dx
38473 9845           50                           push ax
38474 9846           BA                   03D4    mov dx, # 0x3d4
38475 9849           B8                   0011    mov ax, #0x0011
38476 984C           EF                           out dx, ax
38477 984D           58                           pop ax
38478 984E           50                           push ax
38479 984F           C1E8                   03    shr ax, #3
38480 9852           48                           dec ax
38481 9853           88C4                         mov ah, al
38482 9855           B0                     01    mov al, #0x01
38483 9857           EF                           out dx, ax
38484 9858           58                           pop ax
38485 9859           E8         FF90              call vga_set_virt_width
38486                                             ; set CRT Y resolution
38487 985C           BA                   01CE    mov dx, # 0x01CE
38488 985F           B8                   0002    mov ax, # 0x2
38489 9862           EF                           out dx, ax
38490 9863           BA                   01CF    mov dx, # 0x01CF
38491 9866           ED                           in ax, dx
38492 9867           48                           dec ax
38493 9868           50                           push ax
38494 9869           BA                   03D4    mov dx, # 0x3d4
38495 986C           88C4                         mov ah, al
38496 986E           B0                     12    mov al, #0x12
38497 9870           EF                           out dx, ax
38498 9871           58                           pop ax
38499 9872           B0                     07    mov al, #0x07
38500 9874           EE                           out dx, al
38501 9875           42                           inc dx
38502 9876           EC                           in al, dx
38503 9877           24                     BD    and al, #0xbd
38504 9879           F6C4                   01    test ah, #0x01
38505 987C           74           02              jz bit8_clear
38506 987E           0C                     02    or al, #0x02
38507                       00009880            bit8_clear:
38508 9880           F6C4                   02    test ah, #0x02
38509 9883           74           02              jz bit9_clear
38510 9885           0C                     40    or al, #0x40
38511                       00009887            bit9_clear:
38512 9887           EE                           out dx, al
38513                                             ; other settings
38514 9888           BA                   03D4    mov dx, # 0x3d4
38515 988B           B8                   0009    mov ax, #0x0009
38516 988E           EF                           out dx, ax
38517 988F           B0                     17    mov al, #0x17
38518 9891           EE                           out dx, al
38519 9892           BA                   03D5    mov dx, # 0x3d5
38520 9895           EC                           in al, dx
38521 9896           0C                     03    or al, #0x03
38522 9898           EE                           out dx, al
38523 9899           BA                   03DA    mov dx, # 0x3da
38524 989C           EC                           in al, dx
38525 989D           BA                   03C0    mov dx, # 0x3c0
38526 98A0           B0                     10    mov al, #0x10
38527 98A2           EE                           out dx, al
38528 98A3           BA                   03C1    mov dx, # 0x3c1
38529 98A6           EC                           in al, dx
38530 98A7           0C                     01    or al, #0x01
38531 98A9           BA                   03C0    mov dx, # 0x3c0
38532 98AC           EE                           out dx, al
38533 98AD           B0                     20    mov al, #0x20
38534 98AF           EE                           out dx, al
38535 98B0           BA                   03CE    mov dx, # 0x3ce
38536 98B3           B8                   0506    mov ax, #0x0506
38537 98B6           EF                           out dx, ax
38538 98B7           BA                   03C4    mov dx, # 0x3c4
38539 98BA           B8                   0F02    mov ax, #0x0f02
38540 98BD           EF                           out dx, ax
38541                                             ; settings for >= 8bpp
38542 98BE           BA                   01CE    mov dx, # 0x01CE
38543 98C1           B8                   0003    mov ax, # 0x3
38544 98C4           EF                           out dx, ax
38545 98C5           BA                   01CF    mov dx, # 0x01CF
38546 98C8           ED                           in ax, dx
38547 98C9           3C                     08    cmp al, #0x08
38548 98CB           72           40              jb vga_compat_end
38549 98CD           BA                   03D4    mov dx, # 0x3d4
38550 98D0           B0                     14    mov al, #0x14
38551 98D2           EE                           out dx, al
38552 98D3           BA                   03D5    mov dx, # 0x3d5
38553 98D6           EC                           in al, dx
38554 98D7           0C                     40    or al, #0x40
38555 98D9           EE                           out dx, al
38556 98DA           BA                   03DA    mov dx, # 0x3da
38557 98DD           EC                           in al, dx
38558 98DE           BA                   03C0    mov dx, # 0x3c0
38559 98E1           B0                     10    mov al, #0x10
38560 98E3           EE                           out dx, al
38561 98E4           BA                   03C1    mov dx, # 0x3c1
38562 98E7           EC                           in al, dx
38563 98E8           0C                     40    or al, #0x40
38564 98EA           BA                   03C0    mov dx, # 0x3c0
38565 98ED           EE                           out dx, al
38566 98EE           B0                     20    mov al, #0x20
38567 98F0           EE                           out dx, al
38568 98F1           BA                   03C4    mov dx, # 0x3c4
38569 98F4           B0                     04    mov al, #0x04
38570 98F6           EE                           out dx, al
38571 98F7           BA                   03C5    mov dx, # 0x3c5
38572 98FA           EC                           in al, dx
38573 98FB           0C                     08    or al, #0x08
38574 98FD           EE                           out dx, al
38575 98FE           BA                   03CE    mov dx, # 0x3ce
38576 9901           B0                     05    mov al, #0x05
38577 9903           EE                           out dx, al
38578 9904           BA                   03CF    mov dx, # 0x3cf
38579 9907           EC                           in al, dx
38580 9908           24                     9F    and al, #0x9f
38581 990A           0C                     40    or al, #0x40
38582 990C           EE                           out dx, al
38583                       0000990D            vga_compat_end:
38584 990D           5A                           pop dx
38585 990E           58                           pop ax
38586                                           ! 8449 endasm
38587                                           !BCC_ENDASM
38588                                           ! 8450 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
38589                                           ! 8451   Bit16u mode; Boolean using_lfb;
38590                       0000990F            _mode_info_find_mode:
38591                                           !BCC_EOS
38592                                           !BCC_EOS
38593                                           ! 8452 {
38594                                           ! 8453   ModeInfoListItem *cur_info=&mode_info_list;
38595 990F           55                         push	bp
38596 9910           89E5                       mov	bp,sp
38597 9912           4C                         dec	sp
38598 9913           4C                         dec	sp
38599                                           ! Debug: eq * [$4A] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38600 9914           BB                   808F  mov	bx,#_mode_info_list
38601 9917           895E         FE            mov	-2[bp],bx
38602                                           !BCC_EOS
38603                                           ! 8454   while (cur_info->mode != 0xFFFF)
38604                                           ! 8455   {
38605 991A           EB           43            jmp .2D6
38606                       0000991C            .2D7:
38607                                           ! 8456     if (cur_info->mode == mode)
38608 991C           8B5E         FE            mov	bx,-2[bp]
38609                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
38610 991F           8B1F                       mov	bx,[bx]
38611 9921           3B5E         04            cmp	bx,4[bp]
38612 9924           75           30            jne 	.2D8
38613                       00009926            .2D9:
38614                                           ! 8457     {
38615                                           ! 8458       if (!using_lfb)
38616 9926           8B46         06            mov	ax,6[bp]
38617 9929           85C0                       test	ax,ax
38618 992B           75           09            jne 	.2DA
38619                       0000992D            .2DB:
38620                                           ! 8459       {
38621                                           ! 8460         return cur_info;
38622 992D           8B46         FE            mov	ax,-2[bp]
38623 9930           89EC                       mov	sp,bp
38624 9932           5D                         pop	bp
38625 9933           C3                         ret
38626                                           !BCC_EOS
38627                                           ! 8461       }
38628                                           ! 8462       else if (cur_info->info.ModeAttributes & 0x0080)
38629 9934           EB           1E            jmp .2DC
38630                       00009936            .2DA:
38631 9936           8B5E         FE            mov	bx,-2[bp]
38632                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
38633 9939           8A47         02            mov	al,2[bx]
38634 993C           24                     80  and	al,#$80
38635 993E           84C0                       test	al,al
38636 9940           74           09            je  	.2DD
38637                       00009942            .2DE:
38638                                           ! 8463       {
38639                                           ! 8464         return cur_info;
38640 9942           8B46         FE            mov	ax,-2[bp]
38641 9945           89EC                       mov	sp,bp
38642 9947           5D                         pop	bp
38643 9948           C3                         ret
38644                                           !BCC_EOS
38645                                           ! 8465       }
38646                                           ! 8466       else
38647                                           ! 8467       {
38648 9949           EB           09            jmp .2DF
38649                       0000994B            .2DD:
38650                                           ! 8468         cur_info++;
38651                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38652 994B           8B5E         FE            mov	bx,-2[bp]
38653 994E           83C3                   44  add	bx,*$44
38654 9951           895E         FE            mov	-2[bp],bx
38655                                           !BCC_EOS
38656                                           ! 8469       }
38657                                           ! 8470     }
38658                       00009954            .2DF:
38659                       00009954            .2DC:
38660                                           ! 8471     else
38661                                           ! 8472     {
38662 9954           EB           09            jmp .2E0
38663                       00009956            .2D8:
38664                                           ! 8473       cur_info++;
38665                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
38666 9956           8B5E         FE            mov	bx,-2[bp]
38667 9959           83C3                   44  add	bx,*$44
38668 995C           895E         FE            mov	-2[bp],bx
38669                                           !BCC_EOS
38670                                           ! 8474     }
38671                                           ! 8475   }
38672                       0000995F            .2E0:
38673                                           ! 8476   return 0;
38674                       0000995F            .2D6:
38675 995F           8B5E         FE            mov	bx,-2[bp]
38676                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
38677 9962           8B1F                       mov	bx,[bx]
38678 9964           81FB                 FFFF  cmp	bx,#$FFFF
38679 9968           75           B2            jne	.2D7
38680                       0000996A            .2E1:
38681                       0000996A            .2D5:
38682 996A           31C0                       xor	ax,ax
38683 996C           89EC                       mov	sp,bp
38684 996E           5D                         pop	bp
38685 996F           C3                         ret
38686                                           !BCC_EOS
38687                                           ! 8477 }
38688                                           ! 8478 #asm
38689                                           !BCC_ASM
38690                       00000004            _mode_info_find_mode.using_lfb	set	4
38691                       00000002            _mode_info_find_mode.mode	set	2
38692                                           ; Has 1 display - Returns true if 1 display detected
38693                       00009970            _vbe_has_vbe_display:
38694 9970           1E                           push ds
38695 9971           53                           push bx
38696 9972           B8                   0040    mov ax, # 0x40
38697 9975           8ED8                         mov ds, ax
38698 9977           BB                   00B9    mov bx, # 0xB9
38699 997A           8A07                         mov al, [bx]
38700 997C           24                     01    and al, #0x01
38701 997E           30E4                         xor ah, ah
38702 9980           5B                           pop bx
38703 9981           1F                           pop ds
38704 9982           C3                           ret
38705                                           ; 1 Init - Initialise the Vesa Bios Extension Code
38706                                           ; This function does a sanity check on the host side display code interface.
38707                       00009983            vbe_init:
38708 9983           B8                   B0C0    mov ax, # 0xB0C0
38709 9986           E8         FCF4              call dispi_set_id
38710 9989           E8         FCE3              call dispi_get_id
38711 998C           3D                   B0C0    cmp ax, # 0xB0C0
38712 998F           75           16              jne no_vbe_interface
38713 9991           1E                           push ds
38714 9992           53                           push bx
38715 9993           B8                   0040    mov ax, # 0x40
38716 9996           8ED8                         mov ds, ax
38717 9998           BB                   00B9    mov bx, # 0xB9
38718 999B           B0                     01    mov al, #0x01
38719 999D           8807                         mov [bx], al
38720 999F           5B                           pop bx
38721 99A0           1F                           pop ds
38722 99A1           B8                   B0C5    mov ax, # 0xB0C5
38723 99A4           E8         FCD6              call dispi_set_id
38724                       000099A7            no_vbe_interface:
38725 99A7           BB                   952D    mov bx, #msg_vbe_init
38726 99AA           53                           push bx
38727 99AB           E8         E540              call _printf
38728 99AE           44                           inc sp
38729 99AF           44                           inc sp
38730 99B0           C3                           ret
38731                                           ; 1 Display Info - Display information on screen about the 1
38732                       000099B1            vbe_display_info:
38733 99B1           E8         FFBC              call _vbe_has_vbe_display
38734 99B4           85C0                         test ax, ax
38735 99B6           74           0B              jz no_vbe_flag
38736 99B8           B8                   C000    mov ax, #0xc000
38737 99BB           8ED8                         mov ds, ax
38738 99BD           BE                   94E3    mov si, #_vbebios_info_string
38739 99C0           E9         9CAC              jmp _display_string
38740                       000099C3            no_vbe_flag:
38741 99C3           B8                   C000    mov ax, #0xc000
38742 99C6           8ED8                         mov ds, ax
38743 99C8           BE                   9509    mov si, #_no_vbebios_info_string
38744 99CB           E9         9CA1              jmp _display_string
38745                                           ; helper function for memory size calculation
38746                       000099CE            lmulul:
38747 99CE     66    25               0000FFFF    and eax, #0x0000FFFF
38748 99D4     66    C1E3                   10    shl ebx, #16
38749 99D8     66    09D8                         or eax, ebx
38750 99DB           36                           SEG SS
38751 99DC     66    F725                         mul eax, dword ptr [di]
38752 99DF     66    89C3                         mov ebx, eax
38753 99E2     66    C1EB                   10    shr ebx, #16
38754 99E6           C3                           ret
38755                                           ! 8542 endasm
38756                                           !BCC_ENDASM
38757                                           ! 8543 void vbe_biosfn_return_controller_information(AX, ES, DI)
38758                                           ! Register BX used in function mode_info_find_mode
38759                                           ! 8544 Bit16u *AX;Bit16u ES;Bit16u DI;
38760                                           export	_vbe_biosfn_return_controller_information
38761                       000099E7            _vbe_biosfn_return_controller_information:
38762                                           !BCC_EOS
38763                                           !BCC_EOS
38764                                           !BCC_EOS
38765                                           ! 8545 {
38766                                           ! 8546         Bit16u ss=get_SS();
38767 99E7           55                         push	bp
38768 99E8           89E5                       mov	bp,sp
38769 99EA           4C                         dec	sp
38770 99EB           4C                         dec	sp
38771                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38772 99EC           E8         E4FC            call	_get_SS
38773                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38774 99EF           8946         FE            mov	-2[bp],ax
38775                                           !BCC_EOS
38776                                           ! 8547         VbeInfoBlock vbe_info_block;
38777                                           !BCC_EOS
38778                                           ! 8548         Bit16u status;
38779                                           !BCC_EOS
38780                                           ! 8549         Bit16u result;
38781                                           !BCC_EOS
38782                                           ! 8550         Bit16u vbe2_info;
38783                                           !BCC_EOS
38784                                           ! 8551         Bit16u cur_mode=0;
38785 99F2           81C4                 FDF8  add	sp,#-$208
38786                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
38787 99F6           31C0                       xor	ax,ax
38788 99F8           8986       FDF6            mov	-$20A[bp],ax
38789                                           !BCC_EOS
38790                                           ! 8552         Bit16u cur_ptr=34;
38791 99FC           4C                         dec	sp
38792 99FD           4C                         dec	sp
38793                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
38794 99FE           B8                   0022  mov	ax,*$22
38795 9A01           8986       FDF4            mov	-$20C[bp],ax
38796                                           !BCC_EOS
38797                                           ! 8553         Bit16u size_64k;
38798                                           !BCC_EOS
38799                                           ! 8554         ModeInfoListItem *cur_info=&mode_info_list;
38800 9A05           83C4                   FC  add	sp,*-4
38801                                           ! Debug: eq * [$4A] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
38802 9A08           BB                   808F  mov	bx,#_mode_info_list
38803 9A0B           899E       FDF0            mov	-$210[bp],bx
38804                                           !BCC_EOS
38805                                           ! 8555         status = read_word(ss, AX);
38806                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
38807 9A0F           FF76         04            push	4[bp]
38808                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
38809 9A12           FF76         FE            push	-2[bp]
38810                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38811 9A15           E8         E45A            call	_read_word
38812 9A18           83C4                   04  add	sp,*4
38813                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
38814 9A1B           8986       FDFC            mov	-$204[bp],ax
38815                                           !BCC_EOS
38816                                           ! 8556         vbe2_info = 0;
38817                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38818 9A1F           31C0                       xor	ax,ax
38819 9A21           8986       FDF8            mov	-$208[bp],ax
38820                                           !BCC_EOS
38821                                           ! 8557         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
38822                                           ! Debug: list int = const $200 (used reg = )
38823 9A25           B8                   0200  mov	ax,#$200
38824 9A28           50                         push	ax
38825                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
38826 9A29           FF76         08            push	8[bp]
38827                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
38828 9A2C           FF76         06            push	6[bp]
38829                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
38830 9A2F           8D9E       FDFE            lea	bx,-$202[bp]
38831 9A33           53                         push	bx
38832                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
38833 9A34           FF76         FE            push	-2[bp]
38834                                           ! Debug: func () void = memcpyb+0 (used reg = )
38835 9A37           E8         E3C5            call	_memcpyb
38836 9A3A           83C4                   0A  add	sp,*$A
38837                                           !BCC_EOS
38838                                           ! 8558         if (((vbe_info_block.VbeSignature[0] == 'V') &&
38839                                           ! 8559              (vbe_info_block.VbeSignature[1] == 'B') &&
38840                                           ! 8560              (vbe_info_block.VbeSignature[2] == 'E') &&
38841                                           ! 8561              (vbe_info_block.VbeSignature[3] == '2')) ||
38842                                           ! 8562             ((vbe_info_block.VbeSignature[0] == 'V') &&
38843                                           ! 8563              (vbe_info_block.VbeSignature[1] == 'E') &&
38844                                           ! 8564              (vbe_info_block.VbeSignature[2] == 'S') &&
38845                                           ! 8565              (vbe_info_block.VbeSignature[3] == 'A')) )
38846                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38847 9A3D           8A86       FDFE            mov	al,-$202[bp]
38848 9A41           3C                     56  cmp	al,*$56
38849 9A43           75           18            jne 	.2E4
38850                       00009A45            .2E7:
38851                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38852 9A45           8A86       FDFF            mov	al,-$201[bp]
38853 9A49           3C                     42  cmp	al,*$42
38854 9A4B           75           10            jne 	.2E4
38855                       00009A4D            .2E6:
38856                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38857 9A4D           8A86       FE00            mov	al,-$200[bp]
38858 9A51           3C                     45  cmp	al,*$45
38859 9A53           75           08            jne 	.2E4
38860                       00009A55            .2E5:
38861                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38862 9A55           8A86       FE01            mov	al,-$1FF[bp]
38863 9A59           3C                     32  cmp	al,*$32
38864 9A5B           74           20            je  	.2E3
38865                       00009A5D            .2E4:
38866                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38867 9A5D           8A86       FDFE            mov	al,-$202[bp]
38868 9A61           3C                     56  cmp	al,*$56
38869 9A63           75           1F            jne 	.2E2
38870                       00009A65            .2EA:
38871                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38872 9A65           8A86       FDFF            mov	al,-$201[bp]
38873 9A69           3C                     45  cmp	al,*$45
38874 9A6B           75           17            jne 	.2E2
38875                       00009A6D            .2E9:
38876                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38877 9A6D           8A86       FE00            mov	al,-$200[bp]
38878 9A71           3C                     53  cmp	al,*$53
38879 9A73           75           0F            jne 	.2E2
38880                       00009A75            .2E8:
38881                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38882 9A75           8A86       FE01            mov	al,-$1FF[bp]
38883 9A79           3C                     41  cmp	al,*$41
38884 9A7B           75           07            jne 	.2E2
38885                       00009A7D            .2E3:
38886                                           ! 8566         {
38887                                           ! 8567                 vbe2_info = 1;
38888                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
38889 9A7D           B8                   0001  mov	ax,*1
38890 9A80           8986       FDF8            mov	-$208[bp],ax
38891                                           !BCC_EOS
38892                                           ! 8568         }
38893                                           ! 8569         vbe_info_block.VbeSignature[0] = 'V';
38894                       00009A84            .2E2:
38895                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
38896 9A84           B0                     56  mov	al,*$56
38897 9A86           8886       FDFE            mov	-$202[bp],al
38898                                           !BCC_EOS
38899                                           ! 8570       
38900                                           ! 8570   vbe_info_block.VbeSignature[1] = 'E';
38901                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
38902 9A8A           B0                     45  mov	al,*$45
38903 9A8C           8886       FDFF            mov	-$201[bp],al
38904                                           !BCC_EOS
38905                                           ! 8571         vbe_info_block.VbeSignature[2] = 'S';
38906                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
38907 9A90           B0                     53  mov	al,*$53
38908 9A92           8886       FE00            mov	-$200[bp],al
38909                                           !BCC_EOS
38910                                           ! 8572         vbe_info_block.VbeSignature[3] = 'A';
38911                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
38912 9A96           B0                     41  mov	al,*$41
38913 9A98           8886       FE01            mov	-$1FF[bp],al
38914                                           !BCC_EOS
38915                                           ! 8573         vbe_info_block.VbeVersion = 0x0200;
38916                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
38917 9A9C           B8                   0200  mov	ax,#$200
38918 9A9F           8986       FE02            mov	-$1FE[bp],ax
38919                                           !BCC_EOS
38920                                           ! 8574         vbe_info_block.OemStringPtr_Seg = 0xc000;
38921                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
38922 9AA3           B8                   C000  mov	ax,#$C000
38923 9AA6           8986       FE06            mov	-$1FA[bp],ax
38924                                           !BCC_EOS
38925                                           ! 8575         vbe_info_block.OemStringPtr_Off = &vbebios_copyright;
38926                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
38927 9AAA           BB                   9437  mov	bx,#_vbebios_copyright
38928 9AAD           899E       FE04            mov	-$1FC[bp],bx
38929                                           !BCC_EOS
38930                                           ! 8576         vbe_info_block.Capabilities[0] = 0x0001;
38931                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
38932 9AB1           B0                     01  mov	al,*1
38933 9AB3           8886       FE08            mov	-$1F8[bp],al
38934                                           !BCC_EOS
38935                                           ! 8577         vbe_info_block.Capabilities[1] = 0;
38936                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
38937 9AB7           30C0                       xor	al,al
38938 9AB9           8886       FE09            mov	-$1F7[bp],al
38939                                           !BCC_EOS
38940                                           ! 8578         vbe_info_block.Capabilities[2] = 0;
38941                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
38942 9ABD           30C0                       xor	al,al
38943 9ABF           8886       FE0A            mov	-$1F6[bp],al
38944                                           !BCC_EOS
38945                                           ! 8579         vbe_info_block.Capabilities[3] = 0;
38946                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
38947 9AC3           30C0                       xor	al,al
38948 9AC5           8886       FE0B            mov	-$1F5[bp],al
38949                                           !BCC_EOS
38950                                           ! 8580         vbe_info_block.VideoModePtr_Seg= ES ;
38951                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
38952 9AC9           8B46         06            mov	ax,6[bp]
38953 9ACC           8986       FE0E            mov	-$1F2[bp],ax
38954                                           !BCC_EOS
38955                                           ! 8581         vbe_info_block.VideoModePtr_Off= DI + 34;
38956                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
38957 9AD0           8B46         08            mov	ax,8[bp]
38958                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
38959 9AD3           05                   0022  add	ax,*$22
38960 9AD6           8986       FE0C            mov	-$1F4[bp],ax
38961                                           !BCC_EOS
38962                                           ! 8582         outw(0x01CE, 0xa);
38963                                           ! Debug: list int = const $A (used reg = )
38964 9ADA           B8                   000A  mov	ax,*$A
38965 9ADD           50                         push	ax
38966                                           ! Debug: list int = const $1CE (used reg = )
38967 9ADE           B8                   01CE  mov	ax,#$1CE
38968 9AE1           50                         push	ax
38969                                           ! Debug: func () void = outw+0 (used reg = )
38970 9AE2           E8         E3F6            call	_outw
38971 9AE5           83C4                   04  add	sp,*4
38972                                           !BCC_EOS
38973                                           ! 8583         vbe_info_block.TotalMemory = inw(0x01CF);
38974                                           ! Debug: list int = const $1CF (used reg = )
38975 9AE8           B8                   01CF  mov	ax,#$1CF
38976 9AEB           50                         push	ax
38977                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38978 9AEC           E8         E3D1            call	_inw
38979 9AEF           44                         inc	sp
38980 9AF0           44                         inc	sp
38981                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
38982 9AF1           8986       FE10            mov	-$1F0[bp],ax
38983                                           !BCC_EOS
38984                                           ! 8584         if (vbe2_info)
38985 9AF5           8B86       FDF8            mov	ax,-$208[bp]
38986 9AF9           85C0                       test	ax,ax
38987 9AFB           74           4B            je  	.2EB
38988                       00009AFD            .2EC:
38989                                           ! 8585         {
38990                                           ! 8586                 vbe_info_block.OemSoftwareRev = 0x0002;;
38991                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
38992 9AFD           B8                   0002  mov	ax,*2
38993 9B00           8986       FE12            mov	-$1EE[bp],ax
38994                                           !BCC_EOS
38995                                           !BCC_EOS
38996                                           ! 8587                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
38997                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
38998 9B04           B8                   C000  mov	ax,#$C000
38999 9B07           8986       FE16            mov	-$1EA[bp],ax
39000                                           !BCC_EOS
39001                                           ! 8588                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
39002                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
39003 9B0B           BB                   947D  mov	bx,#_vbebios_vendor_name
39004 9B0E           899E       FE14            mov	-$1EC[bp],bx
39005                                           !BCC_EOS
39006                                           ! 8589                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
39007                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
39008 9B12           B8                   C000  mov	ax,#$C000
39009 9B15           8986       FE1A            mov	-$1E6[bp],ax
39010                                           !BCC_EOS
39011                                           ! 8590                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
39012                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
39013 9B19           BB                   9495  mov	bx,#_vbebios_product_name
39014 9B1C           899E       FE18            mov	-$1E8[bp],bx
39015                                           !BCC_EOS
39016                                           ! 8591                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
39017                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
39018 9B20           B8                   C000  mov	ax,#$C000
39019 9B23           8986       FE1E            mov	-$1E2[bp],ax
39020                                           !BCC_EOS
39021                                           ! 8592                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
39022                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
39023 9B27           BB                   94AE  mov	bx,#_vbebios_product_revision
39024 9B2A           899E       FE1C            mov	-$1E4[bp],bx
39025                                           !BCC_EOS
39026                                           ! 8593                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
39027                                           ! Debug: list int = const $200 (used reg = )
39028 9B2E           B8                   0200  mov	ax,#$200
39029 9B31           50                         push	ax
39030                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39031 9B32           8D9E       FDFE            lea	bx,-$202[bp]
39032 9B36           53                         push	bx
39033                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39034 9B37           FF76         FE            push	-2[bp]
39035                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39036 9B3A           FF76         08            push	8[bp]
39037                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39038 9B3D           FF76         06            push	6[bp]
39039                                           ! Debug: func () void = memcpyb+0 (used reg = )
39040 9B40           E8         E2BC            call	_memcpyb
39041 9B43           83C4                   0A  add	sp,*$A
39042                                           !BCC_EOS
39043                                           ! 8594         }
39044                                           ! 8595         else
39045                                           ! 8596         {
39046 9B46           EB           18            jmp .2ED
39047                       00009B48            .2EB:
39048                                           ! 8597                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
39049                                           ! Debug: list int = const $100 (used reg = )
39050 9B48           B8                   0100  mov	ax,#$100
39051 9B4B           50                         push	ax
39052                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
39053 9B4C           8D9E       FDFE            lea	bx,-$202[bp]
39054 9B50           53                         push	bx
39055                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39056 9B51           FF76         FE            push	-2[bp]
39057                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
39058 9B54           FF76         08            push	8[bp]
39059                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
39060 9B57           FF76         06            push	6[bp]
39061                                           ! Debug: func () void = memcpyb+0 (used reg = )
39062 9B5A           E8         E2A2            call	_memcpyb
39063 9B5D           83C4                   0A  add	sp,*$A
39064                                           !BCC_EOS
39065                                           ! 8598         }
39066                                           ! 8599         do
39067                       00009B60            .2ED:
39068                                           ! 8600         {
39069                       00009B60            .2F0:
39070                                           ! 8601                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
39071 9B60           8B9E       FDF0            mov	bx,-$210[bp]
39072                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
39073 9B64           8A47         1B            mov	al,$1B[bx]
39074 9B67           30E4                       xor	ah,ah
39075 9B69           31DB                       xor	bx,bx
39076 9B6B           53                         push	bx
39077 9B6C           50                         push	ax
39078 9B6D           8B9E       FDF0            mov	bx,-$210[bp]
39079                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39080 9B71           8B47         14            mov	ax,$14[bx]
39081 9B74           31DB                       xor	bx,bx
39082 9B76           53                         push	bx
39083 9B77           50                         push	ax
39084 9B78           8B9E       FDF0            mov	bx,-$210[bp]
39085                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
39086 9B7C           8B47         14            mov	ax,$14[bx]
39087 9B7F           31DB                       xor	bx,bx
39088                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
39089 9B81           8DBE       FDE8            lea	di,-$218[bp]
39090 9B85           E8         FE46            call	lmulul
39091 9B88           83C4                   04  add	sp,*4
39092                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
39093 9B8B           8DBE       FDEC            lea	di,-$214[bp]
39094 9B8F           E8         FE3C            call	lmulul
39095 9B92           83C4                   04  add	sp,*4
39096                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
39097                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
39098 9B95           31C0                       xor	ax,ax
39099                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
39100 9B97           8986       FDF2            mov	-$20E[bp],ax
39101                                           !BCC_EOS
39102                                           ! 8602                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
39103                                           ! 8603                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
39104                                           ! 8604                     (size_64k <= vbe_info_block.TotalMemory)) {
39105                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
39106 9B9B           E8         FB5B            call	_dispi_get_max_xres
39107 9B9E           8B9E       FDF0            mov	bx,-$210[bp]
39108                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
39109 9BA2           3B47         14            cmp	ax,$14[bx]
39110 9BA5           72           4D            jb  	.2F1
39111                       00009BA7            .2F4:
39112                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
39113 9BA7           E8         FB71            call	_dispi_get_max_bpp
39114 9BAA           8B9E       FDF0            mov	bx,-$210[bp]
39115                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
39116 9BAE           50                         push	ax
39117 9BAF           8A47         1B            mov	al,$1B[bx]
39118 9BB2           30E4                       xor	ah,ah
39119 9BB4           3B86       FDEE            cmp	ax,-$212[bp]
39120 9BB8           8DA6       FDF0            lea	sp,-$210[bp]
39121 9BBC           77           36            ja  	.2F1
39122                       00009BBE            .2F3:
39123                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
39124 9BBE           8B86       FDF2            mov	ax,-$20E[bp]
39125 9BC2           3B86       FE10            cmp	ax,-$1F0[bp]
39126 9BC6           77           2C            ja  	.2F1
39127                       00009BC8            .2F2:
39128                                           ! 8605                   write_word(ES, DI + cur_ptr, cur_info->mode);
39129 9BC8           8B9E       FDF0            mov	bx,-$210[bp]
39130                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39131 9BCC           FF37                       push	[bx]
39132                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39133 9BCE           8B46         08            mov	ax,8[bp]
39134 9BD1           0386       FDF4            add	ax,-$20C[bp]
39135                                           ! Debug: list unsigned int = ax+0 (used reg = )
39136 9BD5           50                         push	ax
39137                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39138 9BD6           FF76         06            push	6[bp]
39139                                           ! Debug: func () void = write_word+0 (used reg = )
39140 9BD9           E8         E2C1            call	_write_word
39141 9BDC           83C4                   06  add	sp,*6
39142                                           !BCC_EOS
39143                                           ! 8606                   cur_mode++;
39144                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
39145 9BDF           8B86       FDF6            mov	ax,-$20A[bp]
39146 9BE3           40                         inc	ax
39147 9BE4           8986       FDF6            mov	-$20A[bp],ax
39148                                           !BCC_EOS
39149                                           ! 8607                   cur_ptr+=2;
39150                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
39151 9BE8           8B86       FDF4            mov	ax,-$20C[bp]
39152 9BEC           40                         inc	ax
39153 9BED           40                         inc	ax
39154 9BEE           8986       FDF4            mov	-$20C[bp],ax
39155                                           !BCC_EOS
39156                                           ! 8608                 } else {
39157 9BF2           EB           00            jmp .2F5
39158                       00009BF4            .2F1:
39159                                           ! 8609                 }
39160                                           ! 8610                 cur_info++;
39161                       00009BF4            .2F5:
39162                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
39163 9BF4           8B9E       FDF0            mov	bx,-$210[bp]
39164 9BF8           83C3                   44  add	bx,*$44
39165 9BFB           899E       FDF0            mov	-$210[bp],bx
39166                                           !BCC_EOS
39167                                           ! 8611         } while (cur_info->mode != 0xFFFF);
39168                       00009BFF            .2EF:
39169 9BFF           8B9E       FDF0            mov	bx,-$210[bp]
39170                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
39171 9C03           8B1F                       mov	bx,[bx]
39172 9C05           81FB                 FFFF  cmp	bx,#$FFFF
39173 9C09         0F85         FF53            bne 	.2F0
39174                       00009C0D            .2F6:
39175                                           !BCC_EOS
39176                                           ! 8612         write_word(ES, DI + cur_ptr, cur_info->mode);
39177                       00009C0D            .2EE:
39178 9C0D           8B9E       FDF0            mov	bx,-$210[bp]
39179                                           ! Debug: list unsigned short = [bx+0] (used reg = )
39180 9C11           FF37                       push	[bx]
39181                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
39182 9C13           8B46         08            mov	ax,8[bp]
39183 9C16           0386       FDF4            add	ax,-$20C[bp]
39184                                           ! Debug: list unsigned int = ax+0 (used reg = )
39185 9C1A           50                         push	ax
39186                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
39187 9C1B           FF76         06            push	6[bp]
39188                                           ! Debug: func () void = write_word+0 (used reg = )
39189 9C1E           E8         E27C            call	_write_word
39190 9C21           83C4                   06  add	sp,*6
39191                                           !BCC_EOS
39192                                           ! 8613         result = 0x4f;
39193                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
39194 9C24           B8                   004F  mov	ax,*$4F
39195 9C27           8986       FDFA            mov	-$206[bp],ax
39196                                           !BCC_EOS
39197                                           ! 8614         write_word(ss, 
39198                                           ! 8614 AX, result);
39199                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
39200 9C2B           FFB6       FDFA            push	-$206[bp]
39201                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
39202 9C2F           FF76         04            push	4[bp]
39203                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
39204 9C32           FF76         FE            push	-2[bp]
39205                                           ! Debug: func () void = write_word+0 (used reg = )
39206 9C35           E8         E265            call	_write_word
39207 9C38           83C4                   06  add	sp,*6
39208                                           !BCC_EOS
39209                                           ! 8615 }
39210 9C3B           89EC                       mov	sp,bp
39211 9C3D           5D                         pop	bp
39212 9C3E           C3                         ret
39213                                           ! 8616 void vbe_biosfn_return_mode_information(AX, CX, ES, DI)
39214                                           ! Register BX used in function vbe_biosfn_return_controller_information
39215                                           ! 8617 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
39216                                           export	_vbe_biosfn_return_mode_information
39217                       00009C3F            _vbe_biosfn_return_mode_information:
39218                                           !BCC_EOS
39219                                           !BCC_EOS
39220                                           !BCC_EOS
39221                                           !BCC_EOS
39222                                           ! 8618 {
39223                                           ! 8619         Bit16u result=0x0100;
39224 9C3F           55                         push	bp
39225 9C40           89E5                       mov	bp,sp
39226 9C42           4C                         dec	sp
39227 9C43           4C                         dec	sp
39228                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
39229 9C44           B8                   0100  mov	ax,#$100
39230 9C47           8946         FE            mov	-2[bp],ax
39231                                           !BCC_EOS
39232                                           ! 8620         Bit16u ss=get_SS();
39233 9C4A           4C                         dec	sp
39234 9C4B           4C                         dec	sp
39235                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39236 9C4C           E8         E29C            call	_get_SS
39237                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
39238 9C4F           8946         FC            mov	-4[bp],ax
39239                                           !BCC_EOS
39240                                           ! 8621         ModeInfoBlock info;
39241                                           !BCC_EOS
39242                                           ! 8622         ModeInfoListItem *cur_info;
39243                                           !BCC_EOS
39244                                           ! 8623         Boolean using_lfb;
39245                                           !BCC_EOS
39246                                           ! 8624         Bit16u lfb_addr;
39247                                           !BCC_EOS
39248                                           ! 8625         using_lfb=((CX & 0x4000) == 0x4000);
39249 9C52           81C4                 FEFA  add	sp,#-$106
39250                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
39251 9C56           8B46         06            mov	ax,6[bp]
39252 9C59           25                   4000  and	ax,#$4000
39253                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39254 9C5C           3D                   4000  cmp	ax,#$4000
39255 9C5F           75           04            jne	.2F7
39256 9C61           B0                     01  mov	al,*1
39257 9C63           EB           02            jmp	.2F8
39258                       00009C65            .2F7:
39259 9C65           30C0                       xor	al,al
39260                       00009C67            .2F8:
39261                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
39262 9C67           30E4                       xor	ah,ah
39263 9C69           8986       FEF8            mov	-$108[bp],ax
39264                                           !BCC_EOS
39265                                           ! 8626         CX = (CX & 0x1ff);
39266                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
39267 9C6D           8B46         06            mov	ax,6[bp]
39268 9C70           25                   01FF  and	ax,#$1FF
39269                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
39270 9C73           8946         06            mov	6[bp],ax
39271                                           !BCC_EOS
39272                                           ! 8627         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
39273                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
39274 9C76           8D9E       FEFA            lea	bx,-$106[bp]
39275 9C7A           53                         push	bx
39276                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
39277 9C7B           FFB6       FEF8            push	-$108[bp]
39278                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
39279 9C7F           FF76         06            push	6[bp]
39280                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39281 9C82           E8         FC8A            call	_mode_info_find_mode
39282 9C85           83C4                   06  add	sp,*6
39283                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39284 9C88           8986       FEFA            mov	-$106[bp],ax
39285                                           !BCC_EOS
39286                                           ! 8628         if (cur_info != 0)
39287                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
39288 9C8C           8B86       FEFA            mov	ax,-$106[bp]
39289 9C90           85C0                       test	ax,ax
39290 9C92         0F84         008C            beq 	.2F9
39291                       00009C96            .2FA:
39292                                           ! 8629         {
39293                                           ! 8630                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
39294                                           ! Debug: list int = const $100 (used reg = )
39295 9C96           B8                   0100  mov	ax,#$100
39296 9C99           50                         push	ax
39297                                           ! Debug: list int = const 0 (used reg = )
39298 9C9A           31C0                       xor	ax,ax
39299 9C9C           50                         push	ax
39300                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
39301 9C9D           8D9E       FEFC            lea	bx,-$104[bp]
39302 9CA1           53                         push	bx
39303                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
39304 9CA2           FF76         FC            push	-4[bp]
39305                                           ! Debug: func () void = memsetb+0 (used reg = )
39306 9CA5           E8         E10D            call	_memsetb
39307 9CA8           83C4                   08  add	sp,*8
39308                                           !BCC_EOS
39309                                           ! 8631                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
39310                                           ! Debug: list int = const $42 (used reg = )
39311 9CAB           B8                   0042  mov	ax,*$42
39312 9CAE           50                         push	ax
39313 9CAF           8B9E       FEFA            mov	bx,-$106[bp]
39314                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
39315                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
39316 9CB3           43                         inc	bx
39317 9CB4           43                         inc	bx
39318 9CB5           53                         push	bx
39319                                           ! Debug: list unsigned int = const $C000 (used reg = )
39320 9CB6           B8                   C000  mov	ax,#$C000
39321 9CB9           50                         push	ax
39322                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
39323 9CBA           8D9E       FEFC            lea	bx,-$104[bp]
39324 9CBE           53                         push	bx
39325                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
39326 9CBF           FF76         FC            push	-4[bp]
39327                                           ! Debug: func () void = memcpyb+0 (used reg = )
39328 9CC2           E8         E13A            call	_memcpyb
39329 9CC5           83C4                   0A  add	sp,*$A
39330                                           !BCC_EOS
39331                                           ! 8632                 if (using_lfb) {
39332 9CC8           8B86       FEF8            mov	ax,-$108[bp]
39333 9CCC           85C0                       test	ax,ax
39334 9CCE           74           06            je  	.2FB
39335                       00009CD0            .2FC:
39336                                           ! 8633                   info.NumberOfBanks = 1;
39337                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
39338 9CD0           B0                     01  mov	al,*1
39339 9CD2           8886       FF16            mov	-$EA[bp],al
39340                                           !BCC_EOS
39341                                           ! 8634                 }
39342                                           ! 8635                 lfb_addr = pci_get_lfb_addr(0x1234);
39343                       00009CD6            .2FB:
39344                                           ! Debug: list int = const $1234 (used reg = )
39345 9CD6           B8                   1234  mov	ax,#$1234
39346 9CD9           50                         push	ax
39347                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
39348 9CDA           E8         E34E            call	_pci_get_lfb_addr
39349 9CDD           44                         inc	sp
39350 9CDE           44                         inc	sp
39351                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39352 9CDF           8986       FEF6            mov	-$10A[bp],ax
39353                                           !BCC_EOS
39354                                           ! 8636                 if (lfb_addr > 0) {
39355                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39356 9CE3           8B86       FEF6            mov	ax,-$10A[bp]
39357 9CE7           85C0                       test	ax,ax
39358 9CE9           74           11            je  	.2FD
39359                       00009CEB            .2FE:
39360                                           ! 8637                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
39361                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
39362 9CEB           8B86       FEF6            mov	ax,-$10A[bp]
39363 9CEF           31DB                       xor	bx,bx
39364                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
39365 9CF1           93                         xchg	bx,ax
39366 9CF2           31C0                       xor	ax,ax
39367                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
39368 9CF4           8986       FF24            mov	-$DC[bp],ax
39369 9CF8           899E       FF26            mov	-$DA[bp],bx
39370                                           !BCC_EOS
39371                                           ! 8638                 }
39372                                           ! 8639                 if (info.WinAAttributes & 0x01) {
39373                       00009CFC            .2FD:
39374                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
39375 9CFC           8A86       FEFE            mov	al,-$102[bp]
39376 9D00           24                     01  and	al,*1
39377 9D02           84C0                       test	al,al
39378 9D04           74           14            je  	.2FF
39379                       00009D06            .300:
39380                                           ! 8640                   info.WinFuncPtr = 0xC0000000UL;
39381                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
39382 9D06           31C0                       xor	ax,ax
39383 9D08           BB                   C000  mov	bx,#$C000
39384 9D0B           8986       FF08            mov	-$F8[bp],ax
39385 9D0F           899E       FF0A            mov	-$F6[bp],bx
39386                                           !BCC_EOS
39387                                           ! 8641                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
39388                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
39389                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
39390 9D13           BB                   9779  mov	bx,#_dispi_set_bank_farcall
39391 9D16           899E       FF08            mov	-$F8[bp],bx
39392                                           !BCC_EOS
39393                                           ! 8642                 }
39394                                           ! 8643                 result = 0x4f;
39395                       00009D1A            .2FF:
39396                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39397 9D1A           B8                   004F  mov	ax,*$4F
39398 9D1D           8946         FE            mov	-2[bp],ax
39399                                           !BCC_EOS
39400                                           ! 8644         }
39401                                           ! 8645         else
39402                                           ! 8646         {
39403 9D20           EB           06            jmp .301
39404                       00009D22            .2F9:
39405                                           ! 8647                 result = 0x100;
39406                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
39407 9D22           B8                   0100  mov	ax,#$100
39408 9D25           8946         FE            mov	-2[bp],ax
39409                                           !BCC_EOS
39410                                           ! 8648         }
39411                                           ! 8649         if (result == 0x4f)
39412                       00009D28            .301:
39413                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
39414 9D28           8B46         FE            mov	ax,-2[bp]
39415 9D2B           3D                   004F  cmp	ax,*$4F
39416 9D2E           75           18            jne 	.302
39417                       00009D30            .303:
39418                                           ! 8650         {
39419                                           ! 8651                 memcpyb(ES, DI, ss, &info, sizeof(info));
39420                                           ! Debug: list int = const $100 (used reg = )
39421 9D30           B8                   0100  mov	ax,#$100
39422 9D33           50                         push	ax
39423                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
39424 9D34           8D9E       FEFC            lea	bx,-$104[bp]
39425 9D38           53                         push	bx
39426                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39427 9D39           FF76         FC            push	-4[bp]
39428                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
39429 9D3C           FF76         0A            push	$A[bp]
39430                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
39431 9D3F           FF76         08            push	8[bp]
39432                                           ! Debug: func () void = memcpyb+0 (used reg = )
39433 9D42           E8         E0BA            call	_memcpyb
39434 9D45           83C4                   0A  add	sp,*$A
39435                                           !BCC_EOS
39436                                           ! 8652         }
39437                                           ! 8653         write_word(ss, AX, result);
39438                       00009D48            .302:
39439                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
39440 9D48           FF76         FE            push	-2[bp]
39441                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
39442 9D4B           FF76         04            push	4[bp]
39443                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
39444 9D4E           FF76         FC            push	-4[bp]
39445                                           ! Debug: func () void = write_word+0 (used reg = )
39446 9D51           E8         E149            call	_write_word
39447 9D54           83C4                   06  add	sp,*6
39448                                           !BCC_EOS
39449                                           ! 8654 }
39450 9D57           89EC                       mov	sp,bp
39451 9D59           5D                         pop	bp
39452 9D5A           C3                         ret
39453                                           ! 8655 void vbe_biosfn_set_mode(AX, BX, ES, DI)
39454                                           ! Register BX used in function vbe_biosfn_return_mode_information
39455                                           ! 8656 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
39456                                           export	_vbe_biosfn_set_mode
39457                       00009D5B            _vbe_biosfn_set_mode:
39458                                           !BCC_EOS
39459                                           !BCC_EOS
39460                                           !BCC_EOS
39461                                           !BCC_EOS
39462                                           ! 8657 {
39463                                           ! 8658         Bit16u ss = get_SS();
39464 9D5B           55                         push	bp
39465 9D5C           89E5                       mov	bp,sp
39466 9D5E           4C                         dec	sp
39467 9D5F           4C                         dec	sp
39468                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
39469 9D60           E8         E188            call	_get_SS
39470                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
39471 9D63           8946         FE            mov	-2[bp],ax
39472                                           !BCC_EOS
39473                                           ! 8659         Bit16u result;
39474                                           !BCC_EOS
39475                                           ! 8660         ModeInfoListItem *cur_info;
39476                                           !BCC_EOS
39477                                           ! 8661         Boolean using_lfb;
39478                                           !BCC_EOS
39479                                           ! 8662         Bit8u no_clear;
39480                                           !BCC_EOS
39481                                           ! 8663         Bit8u lfb_flag;
39482                                           !BCC_EOS
39483                                           ! 8664         using_lfb=((BX & 0x4000) == 0x4000);
39484 9D66           83C4                   F8  add	sp,*-8
39485                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
39486 9D69           8B46         06            mov	ax,6[bp]
39487 9D6C           25                   4000  and	ax,#$4000
39488                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
39489 9D6F           3D                   4000  cmp	ax,#$4000
39490 9D72           75           04            jne	.304
39491 9D74           B0                     01  mov	al,*1
39492 9D76           EB           02            jmp	.305
39493                       00009D78            .304:
39494 9D78           30C0                       xor	al,al
39495                       00009D7A            .305:
39496                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
39497 9D7A           30E4                       xor	ah,ah
39498 9D7C           8946         F8            mov	-8[bp],ax
39499                                           !BCC_EOS
39500                                           ! 8665         lfb_flag=using_lfb?0x40:0;
39501 9D7F           8B46         F8            mov	ax,-8[bp]
39502 9D82           85C0                       test	ax,ax
39503 9D84           74           04            je  	.306
39504                       00009D86            .307:
39505 9D86           B0                     40  mov	al,*$40
39506 9D88           EB           02            jmp .308
39507                       00009D8A            .306:
39508 9D8A           30C0                       xor	al,al
39509                       00009D8C            .308:
39510                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
39511 9D8C           8846         F6            mov	-$A[bp],al
39512                                           !BCC_EOS
39513                                           ! 8666         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
39514                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
39515 9D8F           8B46         06            mov	ax,6[bp]
39516 9D92           25                   8000  and	ax,#$8000
39517                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
39518 9D95           3D                   8000  cmp	ax,#$8000
39519 9D98           75           04            jne 	.309
39520                       00009D9A            .30A:
39521 9D9A           B0                     80  mov	al,#$80
39522 9D9C           EB           02            jmp .30B
39523                       00009D9E            .309:
39524 9D9E           30C0                       xor	al,al
39525                       00009DA0            .30B:
39526                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
39527 9DA0           8846         F7            mov	-9[bp],al
39528                                           !BCC_EOS
39529                                           ! 8667         BX = (BX & 0x1ff);
39530                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
39531 9DA3           8B46         06            mov	ax,6[bp]
39532 9DA6           25                   01FF  and	ax,#$1FF
39533                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
39534 9DA9           8946         06            mov	6[bp],ax
39535                                           !BCC_EOS
39536                                           ! 8668         if (BX<0x0100)
39537                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
39538 9DAC           8B46         06            mov	ax,6[bp]
39539 9DAF           3D                   0100  cmp	ax,#$100
39540 9DB2           73           23            jae 	.30C
39541                       00009DB4            .30D:
39542                                           ! 8669         {
39543                                           ! 8670                 Bit8u mode;
39544                                           !BCC_EOS
39545                                           ! 8671                 dispi_set_enable(0x00);
39546 9DB4           4C                         dec	sp
39547 9DB5           4C                         dec	sp
39548                                           ! Debug: list int = const 0 (used reg = )
39549 9DB6           31C0                       xor	ax,ax
39550 9DB8           50                         push	ax
39551                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39552 9DB9           E8         F981            call	_dispi_set_enable
39553 9DBC           44                         inc	sp
39554 9DBD           44                         inc	sp
39555                                           !BCC_EOS
39556                                           ! 8672                 mode=(BX & 0xff);
39557                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
39558 9DBE           8A46         06            mov	al,6[bp]
39559                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
39560 9DC1           8846         F5            mov	-$B[bp],al
39561                                           !BCC_EOS
39562                                           ! 8673                 biosfn_set_video_mode(mode);
39563                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
39564 9DC4           8A46         F5            mov	al,-$B[bp]
39565 9DC7           30E4                       xor	ah,ah
39566 9DC9           50                         push	ax
39567                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39568 9DCA           E8         9EFF            call	_biosfn_set_video_mode
39569 9DCD           44                         inc	sp
39570 9DCE           44                         inc	sp
39571                                           !BCC_EOS
39572                                           ! 8674                 result = 0x4f;
39573                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
39574 9DCF           B8                   004F  mov	ax,*$4F
39575 9DD2           8946         FC            mov	-4[bp],ax
39576                                           !BCC_EOS
39577                                           ! 8675         }
39578 9DD5           44                         inc	sp
39579 9DD6           44                         inc	sp
39580                                           ! 8676         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
39581                       00009DD7            .30C:
39582                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
39583 9DD7           8D5E         FA            lea	bx,-6[bp]
39584 9DDA           53                         push	bx
39585                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
39586 9DDB           FF76         F8            push	-8[bp]
39587                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
39588 9DDE           FF76         06            push	6[bp]
39589                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
39590 9DE1           E8         FB2B            call	_mode_info_find_mode
39591 9DE4           83C4                   06  add	sp,*6
39592                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39593 9DE7           8946         FA            mov	-6[bp],ax
39594                                           !BCC_EOS
39595                                           ! 8677         if (cur_in
39596                                           ! 8677 fo != 0)
39597                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
39598 9DEA           8B46         FA            mov	ax,-6[bp]
39599 9DED           85C0                       test	ax,ax
39600 9DEF         0F84         009C            beq 	.30E
39601                       00009DF3            .30F:
39602                                           ! 8678         {
39603                                           ! 8679                 dispi_set_enable(0x00);
39604                                           ! Debug: list int = const 0 (used reg = )
39605 9DF3           31C0                       xor	ax,ax
39606 9DF5           50                         push	ax
39607                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39608 9DF6           E8         F944            call	_dispi_set_enable
39609 9DF9           44                         inc	sp
39610 9DFA           44                         inc	sp
39611                                           !BCC_EOS
39612                                           ! 8680                 if (cur_info->info.BitsPerPixel == 4)
39613 9DFB           8B5E         FA            mov	bx,-6[bp]
39614                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
39615 9DFE           8A47         1B            mov	al,$1B[bx]
39616 9E01           3C                     04  cmp	al,*4
39617 9E03           75           09            jne 	.310
39618                       00009E05            .311:
39619                                           ! 8681                 {
39620                                           ! 8682                   biosfn_set_video_mode(0x6a);
39621                                           ! Debug: list int = const $6A (used reg = )
39622 9E05           B8                   006A  mov	ax,*$6A
39623 9E08           50                         push	ax
39624                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
39625 9E09           E8         9EC0            call	_biosfn_set_video_mode
39626 9E0C           44                         inc	sp
39627 9E0D           44                         inc	sp
39628                                           !BCC_EOS
39629                                           ! 8683                 }
39630                                           ! 8684                 if (cur_info->info.BitsPerPixel == 8)
39631                       00009E0E            .310:
39632 9E0E           8B5E         FA            mov	bx,-6[bp]
39633                                           ! Debug: logeq int = const 8 to unsigned char = [bx+$1B] (used reg = )
39634 9E11           8A47         1B            mov	al,$1B[bx]
39635 9E14           3C                     08  cmp	al,*8
39636 9E16           75           09            jne 	.312
39637                       00009E18            .313:
39638                                           ! 8685                 {
39639                                           ! 8686                   load_dac_palette(3);
39640                                           ! Debug: list int = const 3 (used reg = )
39641 9E18           B8                   0003  mov	ax,*3
39642 9E1B           50                         push	ax
39643                                           ! Debug: func () void = load_dac_palette+0 (used reg = )
39644 9E1C           E8         9DB1            call	_load_dac_palette
39645 9E1F           44                         inc	sp
39646 9E20           44                         inc	sp
39647                                           !BCC_EOS
39648                                           ! 8687                 }
39649                                           ! 8688                 dispi_set_bpp(cur_info->info.BitsPerPixel);
39650                       00009E21            .312:
39651 9E21           8B5E         FA            mov	bx,-6[bp]
39652                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
39653 9E24           8A47         1B            mov	al,$1B[bx]
39654 9E27           30E4                       xor	ah,ah
39655 9E29           50                         push	ax
39656                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
39657 9E2A           E8         F895            call	_dispi_set_bpp
39658 9E2D           44                         inc	sp
39659 9E2E           44                         inc	sp
39660                                           !BCC_EOS
39661                                           ! 8689                 dispi_set_xres(cur_info->info.XResolution);
39662 9E2F           8B5E         FA            mov	bx,-6[bp]
39663                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
39664 9E32           FF77         14            push	$14[bx]
39665                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
39666 9E35           E8         F855            call	_dispi_set_xres
39667 9E38           44                         inc	sp
39668 9E39           44                         inc	sp
39669                                           !BCC_EOS
39670                                           ! 8690                 dispi_set_yres(cur_info->info.YResolution);
39671 9E3A           8B5E         FA            mov	bx,-6[bp]
39672                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
39673 9E3D           FF77         16            push	$16[bx]
39674                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
39675 9E40           E8         F861            call	_dispi_set_yres
39676 9E43           44                         inc	sp
39677 9E44           44                         inc	sp
39678                                           !BCC_EOS
39679                                           ! 8691                 dispi_set_bank(0);
39680                                           ! Debug: list int = const 0 (used reg = )
39681 9E45           31C0                       xor	ax,ax
39682 9E47           50                         push	ax
39683                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
39684 9E48           E8         F910            call	_dispi_set_bank
39685 9E4B           44                         inc	sp
39686 9E4C           44                         inc	sp
39687                                           !BCC_EOS
39688                                           ! 8692                 dispi_set_enable(0x01 | no_clear | lfb_flag);
39689                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
39690                                           ! Debug: expression subtree swapping
39691 9E4D           8A46         F7            mov	al,-9[bp]
39692 9E50           0C                     01  or	al,*1
39693                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
39694 9E52           0A46         F6            or	al,-$A[bp]
39695                                           ! Debug: list unsigned char = al+0 (used reg = )
39696 9E55           30E4                       xor	ah,ah
39697 9E57           50                         push	ax
39698                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
39699 9E58           E8         F8E2            call	_dispi_set_enable
39700 9E5B           44                         inc	sp
39701 9E5C           44                         inc	sp
39702                                           !BCC_EOS
39703                                           ! 8693                 vga_compat_setup();
39704                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
39705 9E5D           E8         F9D8            call	_vga_compat_setup
39706                                           !BCC_EOS
39707                                           ! 8694                 write_word(0x40,0xBA,BX);
39708                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
39709 9E60           FF76         06            push	6[bp]
39710                                           ! Debug: list int = const $BA (used reg = )
39711 9E63           B8                   00BA  mov	ax,#$BA
39712 9E66           50                         push	ax
39713                                           ! Debug: list int = const $40 (used reg = )
39714 9E67           B8                   0040  mov	ax,*$40
39715 9E6A           50                         push	ax
39716                                           ! Debug: func () void = write_word+0 (used reg = )
39717 9E6B           E8         E02F            call	_write_word
39718 9E6E           83C4                   06  add	sp,*6
39719                                           !BCC_EOS
39720                                           ! 8695                 write_byte(0x40,0x87,(0x60 | no_clear));
39721                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
39722                                           ! Debug: expression subtree swapping
39723 9E71           8A46         F7            mov	al,-9[bp]
39724 9E74           0C                     60  or	al,*$60
39725                                           ! Debug: list unsigned char = al+0 (used reg = )
39726 9E76           30E4                       xor	ah,ah
39727 9E78           50                         push	ax
39728                                           ! Debug: list int = const $87 (used reg = )
39729 9E79           B8                   0087  mov	ax,#$87
39730 9E7C           50                         push	ax
39731                                           ! Debug: list int = const $40 (used reg = )
39732 9E7D           B8                   0040  mov	ax,*$40
39733 9E80           50                         push	ax
39734                                           ! Debug: func () void = write_byte+0 (used reg = )
39735 9E81           E8         E001            call	_write_byte
39736 9E84           83C4                   06  add	sp,*6
39737                                           !BCC_EOS
39738                                           ! 8696                 result = 0x4f;
39739                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39740 9E87           B8                   004F  mov	ax,*$4F
39741 9E8A           8946         FC            mov	-4[bp],ax
39742                                           !BCC_EOS
39743                                           ! 8697         }
39744                                           ! 8698         else
39745                                           ! 8699         {
39746 9E8D           EB           14            jmp .314
39747                       00009E8F            .30E:
39748                                           ! 8700                 result = 0x100;
39749                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
39750 9E8F           B8                   0100  mov	ax,#$100
39751 9E92           8946         FC            mov	-4[bp],ax
39752                                           !BCC_EOS
39753                                           ! 8701                 if (BX == 3)
39754                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
39755 9E95           8B46         06            mov	ax,6[bp]
39756 9E98           3D                   0003  cmp	ax,*3
39757 9E9B           75           06            jne 	.315
39758                       00009E9D            .316:
39759                                           ! 8702                         result = 0x4f;
39760                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
39761 9E9D           B8                   004F  mov	ax,*$4F
39762 9EA0           8946         FC            mov	-4[bp],ax
39763                                           !BCC_EOS
39764                                           ! 8703         }
39765                       00009EA3            .315:
39766                                           ! 8704         write_word(ss, AX, result);
39767                       00009EA3            .314:
39768                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
39769 9EA3           FF76         FC            push	-4[bp]
39770                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
39771 9EA6           FF76         04            push	4[bp]
39772                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
39773 9EA9           FF76         FE            push	-2[bp]
39774                                           ! Debug: func () void = write_word+0 (used reg = )
39775 9EAC           E8         DFEE            call	_write_word
39776 9EAF           83C4                   06  add	sp,*6
39777                                           !BCC_EOS
39778                                           ! 8705 }
39779 9EB2           89EC                       mov	sp,bp
39780 9EB4           5D                         pop	bp
39781 9EB5           C3                         ret
39782                                           ! 8706 #asm
39783                                           !BCC_ASM
39784                       00000008            _vbe_biosfn_set_mode.DI	set	8
39785                       00000006            _vbe_biosfn_set_mode.ES	set	6
39786                       00000002            _vbe_biosfn_set_mode.AX	set	2
39787                       00000004            _vbe_biosfn_set_mode.BX	set	4
39788                       00009EB6            vbe_biosfn_return_current_mode:
39789 9EB6           1E                           push ds
39790 9EB7           B8                   0040    mov ax, # 0x40
39791 9EBA           8ED8                         mov ds, ax
39792 9EBC           E8         F88E              call dispi_get_enable
39793 9EBF           25                   0001    and ax, # 0x01
39794 9EC2           74           09              jz no_vbe_mode
39795 9EC4           BB                   00BA    mov bx, # 0xBA
39796 9EC7           8B07                         mov ax, [bx]
39797 9EC9           89C3                         mov bx, ax
39798 9ECB           75           09              jnz vbe_03_ok
39799                       00009ECD            no_vbe_mode:
39800 9ECD           BB                   0049    mov bx, # 0x49
39801 9ED0           8A07                         mov al, [bx]
39802 9ED2           88C3                         mov bl, al
39803 9ED4           30FF                         xor bh, bh
39804                       00009ED6            vbe_03_ok:
39805 9ED6           B8                   004F    mov ax, #0x004f
39806 9ED9           1F                           pop ds
39807 9EDA           C3                           ret
39808                                           ! 8727 endasm
39809                                           !BCC_ENDASM
39810                                           ! 8728 Bit16u vbe_biosfn_read_video_state_size()
39811                                           ! Register BX used in function vbe_biosfn_set_mode
39812                                           ! 8729 {
39813                                           export	_vbe_biosfn_read_video_state_size
39814                       00009EDB            _vbe_biosfn_read_video_state_size:
39815                                           ! 8730     return 9 * 2;
39816 9EDB           55                         push	bp
39817 9EDC           89E5                       mov	bp,sp
39818 9EDE           B8                   0012  mov	ax,*$12
39819 9EE1           5D                         pop	bp
39820 9EE2           C3                         ret
39821                                           !BCC_EOS
39822                                           ! 8731 }
39823                                           ! 8732 void vbe_biosfn_save_video_state(ES, BX)
39824                                           ! 8733      Bit16u ES; Bit16u BX;
39825                                           export	_vbe_biosfn_save_video_state
39826                       00009EE3            _vbe_biosfn_save_video_state:
39827                                           !BCC_EOS
39828                                           !BCC_EOS
39829                                           ! 8734 {
39830                                           ! 8735     Bit16u enable, i;
39831                                           !BCC_EOS
39832                                           ! 8736     outw(0x01CE,0x4);
39833 9EE3           55                         push	bp
39834 9EE4           89E5                       mov	bp,sp
39835 9EE6           83C4                   FC  add	sp,*-4
39836                                           ! Debug: list int = const 4 (used reg = )
39837 9EE9           B8                   0004  mov	ax,*4
39838 9EEC           50                         push	ax
39839                                           ! Debug: list int = const $1CE (used reg = )
39840 9EED           B8                   01CE  mov	ax,#$1CE
39841 9EF0           50                         push	ax
39842                                           ! Debug: func () void = outw+0 (used reg = )
39843 9EF1           E8         DFE7            call	_outw
39844 9EF4           83C4                   04  add	sp,*4
39845                                           !BCC_EOS
39846                                           ! 8737     enable = inw(0x01CF);
39847                                           ! Debug: list int = const $1CF (used reg = )
39848 9EF7           B8                   01CF  mov	ax,#$1CF
39849 9EFA           50                         push	ax
39850                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39851 9EFB           E8         DFC2            call	_inw
39852 9EFE           44                         inc	sp
39853 9EFF           44                         inc	sp
39854                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39855 9F00           8946         FE            mov	-2[bp],ax
39856                                           !BCC_EOS
39857                                           ! 8738     write_word(ES, BX, enable);
39858                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
39859 9F03           FF76         FE            push	-2[bp]
39860                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39861 9F06           FF76         06            push	6[bp]
39862                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39863 9F09           FF76         04            push	4[bp]
39864                                           ! Debug: func () void = write_word+0 (used reg = )
39865 9F0C           E8         DF8E            call	_write_word
39866 9F0F           83C4                   06  add	sp,*6
39867                                           !BCC_EOS
39868                                           ! 8739     BX += 2;
39869                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39870 9F12           8B46         06            mov	ax,6[bp]
39871 9F15           40                         inc	ax
39872 9F16           40                         inc	ax
39873 9F17           8946         06            mov	6[bp],ax
39874                                           !BCC_EOS
39875                                           ! 8740     if (!(enable & 0x01))
39876                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39877 9F1A           8A46         FE            mov	al,-2[bp]
39878 9F1D           24                     01  and	al,*1
39879 9F1F           84C0                       test	al,al
39880 9F21           75           04            jne 	.317
39881                       00009F23            .318:
39882                                           ! 8741         return;
39883 9F23           89EC                       mov	sp,bp
39884 9F25           5D                         pop	bp
39885 9F26           C3                         ret
39886                                           !BCC_EOS
39887                                           ! 8742     for(i = 0x1; i <= 0x9; i++) {
39888                       00009F27            .317:
39889                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
39890 9F27           B8                   0001  mov	ax,*1
39891 9F2A           8946         FC            mov	-4[bp],ax
39892                                           !BCC_EOS
39893                                           !BCC_EOS
39894 9F2D           EB           3A            jmp .31B
39895                       00009F2F            .31C:
39896                                           ! 8743         if (i != 0x4) {
39897                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
39898 9F2F           8B46         FC            mov	ax,-4[bp]
39899 9F32           3D                   0004  cmp	ax,*4
39900 9F35           74           2B            je  	.31D
39901                       00009F37            .31E:
39902                                           ! 8744             outw(0x01CE, i);
39903                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
39904 9F37           FF76         FC            push	-4[bp]
39905                                           ! Debug: list int = const $1CE (used reg = )
39906 9F3A           B8                   01CE  mov	ax,#$1CE
39907 9F3D           50                         push	ax
39908                                           ! Debug: func () void = outw+0 (used reg = )
39909 9F3E           E8         DF9A            call	_outw
39910 9F41           83C4                   04  add	sp,*4
39911                                           !BCC_EOS
39912                                           ! 8745             write_word(ES, BX, inw(0x01CF));
39913                                           ! Debug: list int = const $1CF (used reg = )
39914 9F44           B8                   01CF  mov	ax,#$1CF
39915 9F47           50                         push	ax
39916                                           ! Debug: func () unsigned short = inw+0 (used reg = )
39917 9F48           E8         DF75            call	_inw
39918 9F4B           44                         inc	sp
39919 9F4C           44                         inc	sp
39920                                           ! Debug: list unsigned short = ax+0 (used reg = )
39921 9F4D           50                         push	ax
39922                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
39923 9F4E           FF76         06            push	6[bp]
39924                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
39925 9F51           FF76         04            push	4[bp]
39926                                           ! Debug: func () void = write_word+0 (used reg = )
39927 9F54           E8         DF46            call	_write_word
39928 9F57           83C4                   06  add	sp,*6
39929                                           !BCC_EOS
39930                                           ! 8746             BX += 2;
39931                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39932 9F5A           8B46         06            mov	ax,6[bp]
39933 9F5D           40                         inc	ax
39934 9F5E           40                         inc	ax
39935 9F5F           8946         06            mov	6[bp],ax
39936                                           !BCC_EOS
39937                                           ! 8747         }
39938                                           ! 8748     }
39939                       00009F62            .31D:
39940                                           ! 8749 }
39941                       00009F62            .31A:
39942                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
39943 9F62           8B46         FC            mov	ax,-4[bp]
39944 9F65           40                         inc	ax
39945 9F66           8946         FC            mov	-4[bp],ax
39946                       00009F69            .31B:
39947                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
39948 9F69           8B46         FC            mov	ax,-4[bp]
39949 9F6C           3D                   0009  cmp	ax,*9
39950 9F6F           76           BE            jbe	.31C
39951                       00009F71            .31F:
39952                       00009F71            .319:
39953 9F71           89EC                       mov	sp,bp
39954 9F73           5D                         pop	bp
39955 9F74           C3                         ret
39956                                           ! 8750 void vbe_biosfn_restore_video_state(ES, BX)
39957                                           ! 8751      Bit16u ES; Bit16u BX;
39958                                           export	_vbe_biosfn_restore_video_state
39959                       00009F75            _vbe_biosfn_restore_video_state:
39960                                           !BCC_EOS
39961                                           !BCC_EOS
39962                                           ! 8752 {
39963                                           ! 8753     Bit16u enable, i;
39964                                           !BCC_EOS
39965                                           ! 8754     enable = read_word(ES, BX);
39966 9F75           55                         push	bp
39967 9F76           89E5                       mov	bp,sp
39968 9F78           83C4                   FC  add	sp,*-4
39969                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
39970 9F7B           FF76         06            push	6[bp]
39971                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
39972 9F7E           FF76         04            push	4[bp]
39973                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39974 9F81           E8         DEEE            call	_read_word
39975 9F84           83C4                   04  add	sp,*4
39976                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
39977 9F87           8946         FE            mov	-2[bp],ax
39978                                           !BCC_EOS
39979                                           ! 8755     BX += 2;
39980                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
39981 9F8A           8B46         06            mov	ax,6[bp]
39982 9F8D           40                         inc	ax
39983 9F8E           40                         inc	ax
39984 9F8F           8946         06            mov	6[bp],ax
39985                                           !BCC_EOS
39986                                           ! 8756     if (!(enable & 0x01)) {
39987                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
39988 9F92           8A46         FE            mov	al,-2[bp]
39989 9F95           24                     01  and	al,*1
39990 9F97           84C0                       test	al,al
39991 9F99           75           1E            jne 	.320
39992                       00009F9B            .321:
39993                                           ! 8757         outw(0x01CE,0x4);
39994                                           ! Debug: list int = const 4 (used reg = )
39995 9F9B           B8                   0004  mov	ax,*4
39996 9F9E           50                         push	ax
39997                                           ! Debug: list int = const $1CE (used reg = )
39998 9F9F           B8                   01CE  mov	ax,#$1CE
39999 9FA2           50                         push	ax
40000                                           ! Debug: func () void = outw+0 (used reg = )
40001 9FA3           E8         DF35            call	_outw
40002 9FA6           83C4                   04  add	sp,*4
40003                                           !BCC_EOS
40004                                           ! 8758         outw(0x01CF, enable);
40005                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40006 9FA9           FF76         FE            push	-2[bp]
40007                                           ! Debug: list int = const $1CF (used reg = )
40008 9FAC           B8                   01CF  mov	ax,#$1CF
40009 9FAF           50                         push	ax
40010                                           ! Debug: func () void = outw+0 (used reg = )
40011 9FB0           E8         DF28            call	_outw
40012 9FB3           83C4                   04  add	sp,*4
40013                                           !BCC_EOS
40014                                           ! 8759     } else {
40015 9FB6           E9         00E5            br 	.322
40016                       00009FB9            .320:
40017                                           ! 8760         outw(0x01CE, 0x1);
40018                                           ! Debug: list int = const 1 (used reg = )
40019 9FB9           B8                   0001  mov	ax,*1
40020 9FBC           50                         push	ax
40021                                           ! Debug: list int = const $1CE (used reg = )
40022 9FBD           B8                   01CE  mov	ax,#$1CE
40023 9FC0           50                         push	ax
40024                                           ! Debug: func () void = outw+0 (used reg = )
40025 9FC1           E8         DF17            call	_outw
40026 9FC4           83C4                   04  add	sp,*4
40027                                           !BCC_EOS
40028                                           ! 8761         outw(0x01CF, read_word(ES, BX));
40029                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40030 9FC7           FF76         06            push	6[bp]
40031                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40032 9FCA           FF76         04            push	4[bp]
40033                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40034 9FCD           E8         DEA2            call	_read_word
40035 9FD0           83C4                   04  add	sp,*4
40036                                           ! Debug: list unsigned short = ax+0 (used reg = )
40037 9FD3           50                         push	ax
40038                                           ! Debug: list int = const $1CF (used reg = )
40039 9FD4           B8                   01CF  mov	ax,#$1CF
40040 9FD7           50                         push	ax
40041                                           ! Debug: func () void = outw+0 (used reg = )
40042 9FD8           E8         DF00            call	_outw
40043 9FDB           83C4                   04  add	sp,*4
40044                                           !BCC_EOS
40045                                           ! 8762         BX +=
40046                                           ! 8762  2;
40047                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40048 9FDE           8B46         06            mov	ax,6[bp]
40049 9FE1           40                         inc	ax
40050 9FE2           40                         inc	ax
40051 9FE3           8946         06            mov	6[bp],ax
40052                                           !BCC_EOS
40053                                           ! 8763         outw(0x01CE, 0x2);
40054                                           ! Debug: list int = const 2 (used reg = )
40055 9FE6           B8                   0002  mov	ax,*2
40056 9FE9           50                         push	ax
40057                                           ! Debug: list int = const $1CE (used reg = )
40058 9FEA           B8                   01CE  mov	ax,#$1CE
40059 9FED           50                         push	ax
40060                                           ! Debug: func () void = outw+0 (used reg = )
40061 9FEE           E8         DEEA            call	_outw
40062 9FF1           83C4                   04  add	sp,*4
40063                                           !BCC_EOS
40064                                           ! 8764         outw(0x01CF, read_word(ES, BX));
40065                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40066 9FF4           FF76         06            push	6[bp]
40067                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40068 9FF7           FF76         04            push	4[bp]
40069                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40070 9FFA           E8         DE75            call	_read_word
40071 9FFD           83C4                   04  add	sp,*4
40072                                           ! Debug: list unsigned short = ax+0 (used reg = )
40073 A000           50                         push	ax
40074                                           ! Debug: list int = const $1CF (used reg = )
40075 A001           B8                   01CF  mov	ax,#$1CF
40076 A004           50                         push	ax
40077                                           ! Debug: func () void = outw+0 (used reg = )
40078 A005           E8         DED3            call	_outw
40079 A008           83C4                   04  add	sp,*4
40080                                           !BCC_EOS
40081                                           ! 8765         BX += 2;
40082                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40083 A00B           8B46         06            mov	ax,6[bp]
40084 A00E           40                         inc	ax
40085 A00F           40                         inc	ax
40086 A010           8946         06            mov	6[bp],ax
40087                                           !BCC_EOS
40088                                           ! 8766         outw(0x01CE, 0x3);
40089                                           ! Debug: list int = const 3 (used reg = )
40090 A013           B8                   0003  mov	ax,*3
40091 A016           50                         push	ax
40092                                           ! Debug: list int = const $1CE (used reg = )
40093 A017           B8                   01CE  mov	ax,#$1CE
40094 A01A           50                         push	ax
40095                                           ! Debug: func () void = outw+0 (used reg = )
40096 A01B           E8         DEBD            call	_outw
40097 A01E           83C4                   04  add	sp,*4
40098                                           !BCC_EOS
40099                                           ! 8767         outw(0x01CF, read_word(ES, BX));
40100                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40101 A021           FF76         06            push	6[bp]
40102                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40103 A024           FF76         04            push	4[bp]
40104                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40105 A027           E8         DE48            call	_read_word
40106 A02A           83C4                   04  add	sp,*4
40107                                           ! Debug: list unsigned short = ax+0 (used reg = )
40108 A02D           50                         push	ax
40109                                           ! Debug: list int = const $1CF (used reg = )
40110 A02E           B8                   01CF  mov	ax,#$1CF
40111 A031           50                         push	ax
40112                                           ! Debug: func () void = outw+0 (used reg = )
40113 A032           E8         DEA6            call	_outw
40114 A035           83C4                   04  add	sp,*4
40115                                           !BCC_EOS
40116                                           ! 8768         BX += 2;
40117                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40118 A038           8B46         06            mov	ax,6[bp]
40119 A03B           40                         inc	ax
40120 A03C           40                         inc	ax
40121 A03D           8946         06            mov	6[bp],ax
40122                                           !BCC_EOS
40123                                           ! 8769         outw(0x01CE,0x4);
40124                                           ! Debug: list int = const 4 (used reg = )
40125 A040           B8                   0004  mov	ax,*4
40126 A043           50                         push	ax
40127                                           ! Debug: list int = const $1CE (used reg = )
40128 A044           B8                   01CE  mov	ax,#$1CE
40129 A047           50                         push	ax
40130                                           ! Debug: func () void = outw+0 (used reg = )
40131 A048           E8         DE90            call	_outw
40132 A04B           83C4                   04  add	sp,*4
40133                                           !BCC_EOS
40134                                           ! 8770         outw(0x01CF, enable);
40135                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
40136 A04E           FF76         FE            push	-2[bp]
40137                                           ! Debug: list int = const $1CF (used reg = )
40138 A051           B8                   01CF  mov	ax,#$1CF
40139 A054           50                         push	ax
40140                                           ! Debug: func () void = outw+0 (used reg = )
40141 A055           E8         DE83            call	_outw
40142 A058           83C4                   04  add	sp,*4
40143                                           !BCC_EOS
40144                                           ! 8771         for(i = 0x5; i <= 0x9; i++) {
40145                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
40146 A05B           B8                   0005  mov	ax,*5
40147 A05E           8946         FC            mov	-4[bp],ax
40148                                           !BCC_EOS
40149                                           !BCC_EOS
40150 A061           EB           33            jmp .325
40151                       0000A063            .326:
40152                                           ! 8772             outw(0x01CE, i);
40153                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
40154 A063           FF76         FC            push	-4[bp]
40155                                           ! Debug: list int = const $1CE (used reg = )
40156 A066           B8                   01CE  mov	ax,#$1CE
40157 A069           50                         push	ax
40158                                           ! Debug: func () void = outw+0 (used reg = )
40159 A06A           E8         DE6E            call	_outw
40160 A06D           83C4                   04  add	sp,*4
40161                                           !BCC_EOS
40162                                           ! 8773             outw(0x01CF, read_word(ES, BX));
40163                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
40164 A070           FF76         06            push	6[bp]
40165                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
40166 A073           FF76         04            push	4[bp]
40167                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40168 A076           E8         DDF9            call	_read_word
40169 A079           83C4                   04  add	sp,*4
40170                                           ! Debug: list unsigned short = ax+0 (used reg = )
40171 A07C           50                         push	ax
40172                                           ! Debug: list int = const $1CF (used reg = )
40173 A07D           B8                   01CF  mov	ax,#$1CF
40174 A080           50                         push	ax
40175                                           ! Debug: func () void = outw+0 (used reg = )
40176 A081           E8         DE57            call	_outw
40177 A084           83C4                   04  add	sp,*4
40178                                           !BCC_EOS
40179                                           ! 8774             BX += 2;
40180                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
40181 A087           8B46         06            mov	ax,6[bp]
40182 A08A           40                         inc	ax
40183 A08B           40                         inc	ax
40184 A08C           8946         06            mov	6[bp],ax
40185                                           !BCC_EOS
40186                                           ! 8775         }
40187                                           ! 8776     }
40188                       0000A08F            .324:
40189                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
40190 A08F           8B46         FC            mov	ax,-4[bp]
40191 A092           40                         inc	ax
40192 A093           8946         FC            mov	-4[bp],ax
40193                       0000A096            .325:
40194                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
40195 A096           8B46         FC            mov	ax,-4[bp]
40196 A099           3D                   0009  cmp	ax,*9
40197 A09C           76           C5            jbe	.326
40198                       0000A09E            .327:
40199                       0000A09E            .323:
40200                                           ! 8777 }
40201                       0000A09E            .322:
40202 A09E           89EC                       mov	sp,bp
40203 A0A0           5D                         pop	bp
40204 A0A1           C3                         ret
40205                                           ! 8778 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
40206                                           ! 8779 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
40207                                           export	_vbe_biosfn_save_restore_state
40208                       0000A0A2            _vbe_biosfn_save_restore_state:
40209                                           !BCC_EOS
40210                                           !BCC_EOS
40211                                           !BCC_EOS
40212                                           !BCC_EOS
40213                                           !BCC_EOS
40214                                           ! 8780 {
40215                                           ! 8781     Bit16u ss=get_SS();
40216 A0A2           55                         push	bp
40217 A0A3           89E5                       mov	bp,sp
40218 A0A5           4C                         dec	sp
40219 A0A6           4C                         dec	sp
40220                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
40221 A0A7           E8         DE41            call	_get_SS
40222                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
40223 A0AA           8946         FE            mov	-2[bp],ax
40224                                           !BCC_EOS
40225                                           ! 8782     Bit16u result, val;
40226                                           !BCC_EOS
40227                                           ! 8783     result = 0x4f;
40228 A0AD           83C4                   FC  add	sp,*-4
40229                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
40230 A0B0           B8                   004F  mov	ax,*$4F
40231 A0B3           8946         FC            mov	-4[bp],ax
40232                                           !BCC_EOS
40233                                           ! 8784     switch(( DX & 0x00ff )) {
40234                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
40235 A0B6           8A46         08            mov	al,8[bp]
40236 A0B9           E9         00A9            br 	.32A
40237                                           ! 8785     case 0x00:
40238                                           ! 8786         val = biosfn_read_video_state_size2(CX);
40239                       0000A0BC            .32B:
40240                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
40241 A0BC           FF76         06            push	6[bp]
40242                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
40243 A0BF           E8         D09E            call	_biosfn_read_video_state_size2
40244 A0C2           44                         inc	sp
40245 A0C3           44                         inc	sp
40246                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40247 A0C4           8946         FA            mov	-6[bp],ax
40248                                           !BCC_EOS
40249                                           ! 8787         if (CX & 8)
40250                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40251 A0C7           8A46         06            mov	al,6[bp]
40252 A0CA           24                     08  and	al,*8
40253 A0CC           84C0                       test	al,al
40254 A0CE           74           09            je  	.32C
40255                       0000A0D0            .32D:
40256                                           ! 8788             val += vbe_biosfn_read_video_state_size();
40257                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
40258 A0D0           E8         FE08            call	_vbe_biosfn_read_video_state_size
40259                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40260 A0D3           0346         FA            add	ax,-6[bp]
40261 A0D6           8946         FA            mov	-6[bp],ax
40262                                           !BCC_EOS
40263                                           ! 8789         write_word(ss, BX, val);
40264                       0000A0D9            .32C:
40265                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40266 A0D9           FF76         FA            push	-6[bp]
40267                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
40268 A0DC           FF76         0C            push	$C[bp]
40269                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40270 A0DF           FF76         FE            push	-2[bp]
40271                                           ! Debug: func () void = write_word+0 (used reg = )
40272 A0E2           E8         DDB8            call	_write_word
40273 A0E5           83C4                   06  add	sp,*6
40274                                           !BCC_EOS
40275                                           ! 8790         break;
40276 A0E8           E9         008C            br 	.328
40277                                           !BCC_EOS
40278                                           ! 8791     case 0x01:
40279                                           ! 8792         val = read_word(ss, BX);
40280                       0000A0EB            .32E:
40281                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40282 A0EB           FF76         0C            push	$C[bp]
40283                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40284 A0EE           FF76         FE            push	-2[bp]
40285                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40286 A0F1           E8         DD7E            call	_read_word
40287 A0F4           83C4                   04  add	sp,*4
40288                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40289 A0F7           8946         FA            mov	-6[bp],ax
40290                                           !BCC_EOS
40291                                           ! 8793         val = biosfn_save_video_state(CX, ES, val);
40292                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40293 A0FA           FF76         FA            push	-6[bp]
40294                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40295 A0FD           FF76         0A            push	$A[bp]
40296                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40297 A100           FF76         06            push	6[bp]
40298                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
40299 A103           E8         D0C5            call	_biosfn_save_video_state
40300 A106           83C4                   06  add	sp,*6
40301                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40302 A109           8946         FA            mov	-6[bp],ax
40303                                           !BCC_EOS
40304                                           ! 8794         if (CX & 8)
40305                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40306 A10C           8A46         06            mov	al,6[bp]
40307 A10F           24                     08  and	al,*8
40308 A111           84C0                       test	al,al
40309 A113           74           0C            je  	.32F
40310                       0000A115            .330:
40311                                           ! 8795             vbe_biosfn_save_video_state(ES, val);
40312                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40313 A115           FF76         FA            push	-6[bp]
40314                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40315 A118           FF76         0A            push	$A[bp]
40316                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
40317 A11B           E8         FDC5            call	_vbe_biosfn_save_video_state
40318 A11E           83C4                   04  add	sp,*4
40319                                           !BCC_EOS
40320                                           ! 8796         break;
40321                       0000A121            .32F:
40322 A121           EB           54            jmp .328
40323                                           !BCC_EOS
40324                                           ! 8797     case 0x02:
40325                                           ! 8798         val = read_word(ss, BX);
40326                       0000A123            .331:
40327                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
40328 A123           FF76         0C            push	$C[bp]
40329                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
40330 A126           FF76         FE            push	-2[bp]
40331                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
40332 A129           E8         DD46            call	_read_word
40333 A12C           83C4                   04  add	sp,*4
40334                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40335 A12F           8946         FA            mov	-6[bp],ax
40336                                           !BCC_EOS
40337                                           ! 8799         val = biosfn_restore_video_state(CX, ES, val);
40338                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40339 A132           FF76         FA            push	-6[bp]
40340                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40341 A135           FF76         0A            push	$A[bp]
40342                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
40343 A138           FF76         06            push	6[bp]
40344                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
40345 A13B           E8         D657            call	_biosfn_restore_video_state
40346 A13E           83C4                   06  add	sp,*6
40347                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
40348 A141           8946         FA            mov	-6[bp],ax
40349                                           !BCC_EOS
40350                                           ! 8800         if (CX & 8)
40351                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
40352 A144           8A46         06            mov	al,6[bp]
40353 A147           24                     08  and	al,*8
40354 A149           84C0                       test	al,al
40355 A14B           74           0C            je  	.332
40356                       0000A14D            .333:
40357                                           ! 8801             vbe_biosfn_restore_video_state(ES, val);
40358                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
40359 A14D           FF76         FA            push	-6[bp]
40360                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
40361 A150           FF76         0A            push	$A[bp]
40362                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
40363 A153           E8         FE1F            call	_vbe_biosfn_restore_video_state
40364 A156           83C4                   04  add	sp,*4
40365                                           !BCC_EOS
40366                                           ! 8802         break;
40367                       0000A159            .332:
40368 A159           EB           1C            jmp .328
40369                                           !BCC_EOS
40370                                           ! 8803     default:
40371                                           ! 8804         result = 0x100;
40372                       0000A15B            .334:
40373                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
40374 A15B           B8                   0100  mov	ax,#$100
40375 A15E           8946         FC            mov	-4[bp],ax
40376                                           !BCC_EOS
40377                                           ! 8805         break;
40378 A161           EB           14            jmp .328
40379                                           !BCC_EOS
40380                                           ! 8806     }
40381                                           ! 8807     write_word(ss, AX, result);
40382 A163           EB           12            jmp .328
40383                       0000A165            .32A:
40384 A165           2C                     00  sub	al,*0
40385 A167         0F84         FF51            beq 	.32B
40386 A16B           2C                     01  sub	al,*1
40387 A16D         0F84         FF7A            beq 	.32E
40388 A171           2C                     01  sub	al,*1
40389 A173           74           AE            je 	.331
40390 A175           EB           E4            jmp	.334
40391                       0000A177            .328:
40392                       FFFFFFF8            ..FFF0	=	-8
40393                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
40394 A177           FF76         FC            push	-4[bp]
40395                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
40396 A17A           FF76         04            push	4[bp]
40397                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
40398 A17D           FF76         FE            push	-2[bp]
40399                                           ! Debug: func () void = write_word+0 (used reg = )
40400 A180           E8         DD1A            call	_write_word
40401 A183           83C4                   06  add	sp,*6
40402                                           !BCC_EOS
40403                                           ! 8808 }
40404 A186           89EC                       mov	sp,bp
40405 A188           5D                         pop	bp
40406 A189           C3                         ret
40407                                           ! 8809 #asm
40408                                           !BCC_ASM
40409                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40410                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40411                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40412                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40413                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40414                       0000A18A            vbe_biosfn_display_window_control:
40415 A18A           80FB                   00    cmp bl, #0x00
40416 A18D           75           24              jne vbe_05_failed
40417 A18F           80FF                   01    cmp bh, #0x01
40418 A192           74           16              je get_display_window
40419 A194           72           04              jb set_display_window
40420 A196           B8                   0100    mov ax, #0x0100
40421 A199           C3                           ret
40422                       0000A19A            set_display_window:
40423 A19A           89D0                         mov ax, dx
40424 A19C           E8         F5BC              call _dispi_set_bank
40425 A19F           E8         F5C9              call dispi_get_bank
40426 A1A2           39D0                         cmp ax, dx
40427 A1A4           75           0D              jne vbe_05_failed
40428 A1A6           B8                   004F    mov ax, #0x004f
40429 A1A9           C3                           ret
40430                       0000A1AA            get_display_window:
40431 A1AA           E8         F5BE              call dispi_get_bank
40432 A1AD           89C2                         mov dx, ax
40433 A1AF           B8                   004F    mov ax, #0x004f
40434 A1B2           C3                           ret
40435                       0000A1B3            vbe_05_failed:
40436 A1B3           B8                   014F    mov ax, #0x014f
40437 A1B6           C3                           ret
40438                                           ! 8834 endasm
40439                                           !BCC_ENDASM
40440                                           ! 8835 #asm
40441                                           !BCC_ASM
40442                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40443                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40444                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40445                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40446                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40447                       0000A1B7            vbe_biosfn_set_get_logical_scan_line_length:
40448 A1B7           89C8                         mov ax, cx
40449 A1B9           80FB                   01    cmp bl, #0x01
40450 A1BC           74           24              je get_logical_scan_line_length
40451 A1BE           80FB                   02    cmp bl, #0x02
40452 A1C1           74           06              je set_logical_scan_line_bytes
40453 A1C3           72           1A              jb set_logical_scan_line_pixels
40454 A1C5           B8                   0100    mov ax, #0x0100
40455 A1C8           C3                           ret
40456                       0000A1C9            set_logical_scan_line_bytes:
40457 A1C9           50                           push ax
40458 A1CA           E8         F513              call dispi_get_bpp
40459 A1CD           30FF                         xor bh, bh
40460 A1CF           88E3                         mov bl, ah
40461 A1D1           08DB                         or bl, bl
40462 A1D3           75           05              jnz no_4bpp_1
40463 A1D5           C1E0                   03    shl ax, #3
40464 A1D8           B3                     01    mov bl, #1
40465                       0000A1DA            no_4bpp_1:
40466 A1DA           31D2                         xor dx, dx
40467 A1DC           58                           pop ax
40468 A1DD           F7F3                         div bx
40469                       0000A1DF            set_logical_scan_line_pixels:
40470 A1DF           E8         F627              call dispi_set_virt_width
40471                       0000A1E2            get_logical_scan_line_length:
40472 A1E2           E8         F4FB              call dispi_get_bpp
40473 A1E5           30FF                         xor bh, bh
40474 A1E7           88E3                         mov bl, ah
40475 A1E9           E8         F630              call dispi_get_virt_width
40476 A1EC           89C1                         mov cx, ax
40477 A1EE           08DB                         or bl, bl
40478 A1F0           75           05              jnz no_4bpp_2
40479 A1F2           C1E8                   03    shr ax, #3
40480 A1F5           B3                     01    mov bl, #1
40481                       0000A1F7            no_4bpp_2:
40482 A1F7           F7E3                         mul bx
40483 A1F9           89C3                         mov bx, ax
40484 A1FB           E8         F62C              call dispi_get_virt_height
40485 A1FE           89C2                         mov dx, ax
40486 A200           B8                   004F    mov ax, #0x004f
40487 A203           C3                           ret
40488                                           ! 8877 endasm
40489                                           !BCC_ENDASM
40490                                           ! 8878 #asm
40491                                           !BCC_ASM
40492                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40493                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40494                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40495                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40496                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40497                       0000A204            vbe_biosfn_set_get_display_start:
40498 A204           80FB                   80    cmp bl, #0x80
40499 A207           74           0B              je set_display_start
40500 A209           80FB                   01    cmp bl, #0x01
40501 A20C           74           14              je get_display_start
40502 A20E           72           04              jb set_display_start
40503 A210           B8                   0100    mov ax, #0x0100
40504 A213           C3                           ret
40505                       0000A214            set_display_start:
40506 A214           89C8                         mov ax, cx
40507 A216           E8         F597              call dispi_set_x_offset
40508 A219           89D0                         mov ax, dx
40509 A21B           E8         F5B0              call dispi_set_y_offset
40510 A21E           B8                   004F    mov ax, #0x004f
40511 A221           C3                           ret
40512                       0000A222            get_display_start:
40513 A222           E8         F59B              call dispi_get_x_offset
40514 A225           89C1                         mov cx, ax
40515 A227           E8         F5B4              call dispi_get_y_offset
40516 A22A           89C2                         mov dx, ax
40517 A22C           30FF                         xor bh, bh
40518 A22E           B8                   004F    mov ax, #0x004f
40519 A231           C3                           ret
40520                                           ! 8902 endasm
40521                                           !BCC_ENDASM
40522                                           ! 8903 #asm
40523                                           !BCC_ASM
40524                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
40525                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
40526                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
40527                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
40528                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
40529                       0000A232            vbe_biosfn_set_get_dac_palette_format:
40530 A232           80FB                   01    cmp bl, #0x01
40531 A235           74           1E              je get_dac_palette_format
40532 A237           72           04              jb set_dac_palette_format
40533 A239           B8                   0100    mov ax, #0x0100
40534 A23C           C3                           ret
40535                       0000A23D            set_dac_palette_format:
40536 A23D           E8         F50D              call dispi_get_enable
40537 A240           80FF                   06    cmp bh, #0x06
40538 A243           74           0A              je set_normal_dac
40539 A245           80FF                   08    cmp bh, #0x08
40540 A248           75           1B              jne vbe_08_unsupported
40541 A24A           0D                   0020    or ax, # 0x20
40542 A24D           75           03              jnz set_dac_mode
40543                       0000A24F            set_normal_dac:
40544 A24F           25                   FFDF    and ax, #~ 0x20
40545                       0000A252            set_dac_mode:
40546 A252           E8         F4E8              call _dispi_set_enable
40547                       0000A255            get_dac_palette_format:
40548 A255           B7                     06    mov bh, #0x06
40549 A257           E8         F4F3              call dispi_get_enable
40550 A25A           25                   0020    and ax, # 0x20
40551 A25D           74           02              jz vbe_08_ok
40552 A25F           B7                     08    mov bh, #0x08
40553                       0000A261            vbe_08_ok:
40554 A261           B8                   004F    mov ax, #0x004f
40555 A264           C3                           ret
40556                       0000A265            vbe_08_unsupported:
40557 A265           B8                   014F    mov ax, #0x014f
40558 A268           C3                           ret
40559                                           ! 8934 endasm
40560                                           !BCC_ENDASM
40561                                           ! 8935 void vbe_biosfn_set_get_palette_data(AX)
40562                                           ! 8936 {
40563                                           export	_vbe_biosfn_set_get_palette_data
40564                       0000A269            _vbe_biosfn_set_get_palette_data:
40565                                           ! 8937 }
40566 A269           C3                         ret
40567                                           ! 8938 #asm
40568                                           !BCC_ASM
40569                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40570                       0000A26A            vbe_biosfn_return_protected_mode_interface:
40571 A26A           84DB                         test bl, bl
40572 A26C           75           11              jnz _fail
40573 A26E           BF                   C000    mov di, #0xc000
40574 A271           8EC7                         mov es, di
40575 A273           BF                   956E    mov di, # vesa_pm_start
40576 A276           B9                   966F    mov cx, # vesa_pm_end
40577 A279           29F9                         sub cx, di
40578 A27B           B8                   004F    mov ax, #0x004f
40579 A27E           C3                           ret
40580                       0000A27F            _fail:
40581 A27F           B8                   014F    mov ax, #0x014f
40582 A282           C3                           ret
40583                                           ! 8952 endasm
40584                                           !BCC_ENDASM
40585                                           ! 8953 #asm
40586                                           !BCC_ASM
40587                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40588                       0000A283            vesa_EDID:
40589 A283                        00              db 0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00
40590 A28B                        04              db 0x04,0x21
40591 A28D                        AB              db 0xAB,0xCD
40592 A28F                        00              db 0x00,0x00,0x00,0x00
40593 A293                        36              db 54, 10
40594 A295                        01              db 0x01, 0x03
40595 A297                        0F              db 0x0F
40596 A298                        21              db 0x21,0x19
40597 A29A                        78              db 0x78
40598 A29B                        0F              db 0x0F
40599 A29C                        78              db 0x78,0xF5
40600 A29E                        A6              db 0xA6,0x55,0x48,0x9B,0x26,0x12,0x50,0x54
40601 A2A6                        FF              db 0xFF
40602 A2A7                        EF              db 0xEF
40603 A2A8                        80              db 0x80
40604 A2A9                        D1              db 0xD1, 0x00
40605 A2AB                        61              db 0x61, 0x59
40606 A2AD                        45              db 0x45, 0x59
40607 A2AF                        81              db 0x81, 0xCA
40608 A2B1                        81              db 0x81, 0x0A
40609 A2B3                        A9              db 0xA9, 0xC0
40610 A2B5                        A9              db 0xA9, 0x40
40611 A2B7                        D1              db 0xD1, 0x00
40612 A2B9                        3C              db 0x3C, 0x28
40613 A2BB                        80              db 0x80
40614 A2BC                        A0              db 0xA0
40615 A2BD                        70              db 0x70
40616 A2BE                        B0              db 0xB0
40617 A2BF                        23              db 0x23
40618 A2C0                        40              db 0x40
40619 A2C1                        30              db 0x30
40620 A2C2                        20              db 0x20
40621 A2C3                        36              db 0x36
40622 A2C4                        00              db 0x00
40623 A2C5                        06              db 0x06
40624 A2C6                        44              db 0x44
40625 A2C7                        21              db 0x21
40626 A2C8                        00              db 0x00
40627 A2C9                        00              db 0x00
40628 A2CA                        1E              db 0x1E
40629 A2CB                        00              db 0x00,0x00,0x00,0xfD,0x00
40630 A2D0                        32              db 50,150
40631 A2D2                        1F              db 31,135
40632 A2D4                        10              db 16
40633 A2D5                        00              db 0
40634 A2D6                        0A              db 0x0A,0x20,0x20,0x20,0x20
40635 A2DB                        20              db 0x20,0x20
40636 A2DD                        00              db 0x00,0x00,0x00,0xFF,0x00
40637 A2E2                        30              .ascii "0123456789"
40638 A2EC                        0A              db 0x0A,0x20,0x20
40639 A2EF                        00              db 0x00,0x00,0x00,0xFC,0x00
40640 A2F4                        42              .ascii "Bochs Screen"
40641 A300                        0A              db 0x0A
40642 A301                        00              db 0x00
40643 A302                        00              db 0x00
40644                                           ! 9010 endasm
40645                                           !BCC_ENDASM
40646                                           ! 9011 #asm
40647                                           !BCC_ASM
40648                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40649                       0000A303            vbe_biosfn_display_identification_extensions:
40650 A303           80FB                   01    cmp bl,#0x01
40651 A306           72           06              jb _get_capabilities
40652 A308           74           0F              je _read_EDID
40653                       0000A30A            _failed:
40654 A30A           B8                   014F    mov ax, #0x014f
40655 A30D           C3                           ret
40656                       0000A30E            _get_capabilities:
40657 A30E           85C9                         test cx,cx
40658 A310           75           F8              jne _failed
40659 A312           B8                   004F    mov ax, #0x004f
40660 A315           BB                   0101    mov bx, #0x0101
40661 A318           C3                           ret
40662                       0000A319            _read_EDID:
40663 A319           85C9                         test cx,cx
40664 A31B           75           ED              jne _failed
40665 A31D           85D2                         test dx,dx
40666 A31F           75           E9              jne _failed
40667 A321           56                           push si
40668 A322           57                           push di
40669 A323           FC                           cld
40670 A324           B9                   007F    mov cx,#127
40671 A327           BE                   A283    mov si, # vesa_EDID
40672 A32A           30E4                         xor ah,ah
40673                       0000A32C            _nextByte:
40674 A32C                        2E              db 0x2E
40675 A32D           AC                             lodsb
40676 A32E           AA                           stosb
40677 A32F           28C4                         sub ah,al
40678 A331           E2           F9              loop _nextByte
40679 A333           88E0                         mov al,ah
40680 A335           AA                           stosb
40681 A336           5F                           pop di
40682 A337           5E                           pop si
40683 A338           31C9                         xor cx,cx
40684 A33A           B8                   004F    mov ax, #0x004f
40685 A33D           C3                           ret
40686                                           ! 9049 endasm
40687                                           !BCC_ENDASM
40688                                           ! 9050 #asm
40689                                           !BCC_ASM
40690                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40691                                           ;; DATA_SEG_DEFS_HERE
40692                                           ! 9052 endasm
40693                                           !BCC_ENDASM
40694                                           ! 9053 #asm
40695                                           !BCC_ASM
40696                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
40697 A33E                        76            .ascii "vgabios ends here"
40698 A34F                        00            .byte 0x00
40699                       0000A350            vgabios_end:
40700 A350                        CB            .byte 0xCB
40701                                           ;; BLOCK_STRINGS_BEGIN
40702                                           ! 9059 endasm
40703                                           !BCC_ENDASM
40704                                           ! 9060 
40705                                           
40706 A351                                      .bss
40707                                           
40708                                           ! 0 errors detected

Symbols:
..FFF0                      0 FFF8 A   ..FFF1                      0 FFFC A   
..FFF2                      0 FFFE A   ..FFF3                      0 FFFE A   
..FFF4                      0 FFFE A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFFA A   ..FFFF                      0 FFFE A   
.1                          0 3BCE A   .10                         0 36CD A   
.100                        0 4CEC A   .101                        0 4CE5 A   
.102                        0 4CDC A   .103                        0 4E86 A   
.104                        0 4DF8 A   .105                        0 4D6E A   
.106                        0 4DF5 A   .107                        0 4DE4 A   
.108                        0 4DEB A   .109                        0 4D78 A   
.10A                        0 4DBC A   .10B                        0 4D96 A   
.10C                        0 4D8F A   .10D                        0 4DE4 A   
.10E                        0 4DF5 A   .10F                        0 4E86 A   
.11                         0 36FC A   .110                        0 4E86 A   
.111                        0 4E73 A   .112                        0 4E7A A   
.113                        0 4E02 A   .114                        0 4E3F A   
.115                        0 4E19 A   .116                        0 4E12 A   
.117                        0 4E67 A   .118                        0 4E73 A   
.119                        0 4E71 A   .11A                        0 4E86 A   
.11B                        0 4E89 A   .11C                        0 4F1C A   
.11D                        0 4ED7 A   .11E                        0 4EC5 A   
.11F                        0 4EB3 A   .12                         0 36EC A   
.120                        0 4EAC A   .121                        0 4EA5 A   
.122                        0 5060 A   .123                        0 4F3F A   
.124                        0 4F23 A   .125                        0 4FD2 A   
.126                        0 4F48 A   .127                        0 4FCF A   
.128                        0 4FBE A   .129                        0 4FC5 A   
.12A                        0 4F52 A   .12B                        0 4F96 A   
.12C                        0 4F70 A   .12D                        0 4F69 A   
.12E                        0 4FBE A   .12F                        0 4FCF A   
.13                         0 3701 A   .130                        0 5060 A   
.131                        0 5060 A   .132                        0 504D A   
.133                        0 5054 A   .134                        0 4FDC A   
.135                        0 5019 A   .136                        0 4FF3 A   
.137                        0 4FEC A   .138                        0 5041 A   
.139                        0 504D A   .13A                        0 504B A   
.13B                        0 5060 A   .13C                        0 50B2 A   
.13D                        0 50AE A   .13E                        0 5171 A   
.13F                        0 5113 A   .14                         0 3718 A   
.140                        0 5171 A   .141                        0 51A2 A   
.143                        0 5198 A   .144                        0 5180 A   
.145                        0 5188 A   .146                        0 5190 A   
.147                        0 520F A   .148                        0 51FF A   
.149                        0 521D A   .14A                        0 52D5 A   
.14B                        0 52C4 A   .14C                        0 52CB A   
.14D                        0 5225 A   .14E                        0 52C4 A   
.14F                        0 52B4 A   .15                         0 372C A   
.150                        0 52BB A   .151                        0 5242 A   
.152                        0 52A4 A   .153                        0 528D A   
.154                        0 52B4 A   .155                        0 52C4 A   
.156                        0 52D5 A   .157                        0 54E7 A   
.158                        0 54D7 A   .159                        0 54DE A   
.15A                        0 532B A   .15B                        0 534F A   
.15C                        0 5346 A   .15D                        0 5410 A   
.15E                        0 535D A   .15F                        0 5378 A   
.16                         0 3745 A   .160                        0 5366 A   
.161                        0 537D A   .162                        0 53FA A   
.163                        0 53EC A   .164                        0 53F3 A   
.165                        0 5384 A   .166                        0 53E2 A   
.167                        0 539B A   .168                        0 53C4 A   
.169                        0 53A4 A   .16A                        0 53E2 A   
.16B                        0 53FA A   .16C                        0 54D7 A   
.16D                        0 54D7 A   .16E                        0 54CE A   
.16F                        0 5413 A   .17                         0 375C A   
.170                        0 542E A   .171                        0 541C A   
.172                        0 5433 A   .173                        0 54B4 A   
.174                        0 54A6 A   .175                        0 54AD A   
.176                        0 543A A   .177                        0 549C A   
.178                        0 5451 A   .179                        0 547C A   
.17A                        0 545A A   .17B                        0 549C A   
.17C                        0 54B4 A   .17D                        0 54D7 A   
.17E                        0 54E7 A   .17F                        0 55BB A   
.18                         0 376A A   .180                        0 55AB A   
.181                        0 55B2 A   .182                        0 5531 A   
.183                        0 55AB A   .184                        0 559D A   
.185                        0 55A4 A   .186                        0 5557 A   
.187                        0 5579 A   .188                        0 5573 A   
.189                        0 55AB A   .18A                        0 55BB A   
.18B                        0 55EF A   .18C                        0 55EB A   
.18D                        0 56BA A   .18E                        0 5650 A   
.18F                        0 57A1 A   .19                         0 37A5 A   
.190                        0 57A1 A   .191                        0 5789 A   
.192                        0 56E3 A   .193                        0 5782 A   
.195                        0 576E A   .196                        0 56F7 A   
.197                        0 56F7 A   .198                        0 5720 A   
.199                        0 5749 A   .19A                        0 57A1 A   
.19B                        0 5795 A   .19C                        0 57D5 A   
.19D                        0 57D1 A   .19E                        0 58A4 A   
.19F                        0 5836 A   .1A                         0 37DF A   
.1A0                        0 58A1 A   .1A1                        0 5895 A   
.1A2                        0 586C A   .1A3                        0 58A1 A   
.1A4                        0 598B A   .1A5                        0 598B A   
.1A6                        0 5973 A   .1A7                        0 58CD A   
.1A8                        0 596C A   .1AA                        0 5958 A   
.1AB                        0 58E1 A   .1AC                        0 58E1 A   
.1AD                        0 590A A   .1AE                        0 5933 A   
.1AF                        0 598B A   .1B                         0 37F4 A   
.1B0                        0 597F A   .1B1                        0 5A37 A   
.1B2                        0 5A33 A   .1B3                        0 5A51 A   
.1B4                        0 5A4D A   .1B5                        0 5C9F A   
.1B7                        0 5C89 A   .1B8                        0 5A66 A   
.1B9                        0 5A66 A   .1BA                        0 5AE7 A   
.1BB                        0 5AD9 A   .1BC                        0 5B0C A   
.1BD                        0 5B3E A   .1BE                        0 5B22 A   
.1BF                        0 5B58 A   .1C                         0 3814 A   
.1C0                        0 5B6A A   .1C1                        0 5B61 A   
.1C2                        0 5BD6 A   .1C3                        0 5B90 A   
.1C4                        0 5C16 A   .1C5                        0 5C2A A   
.1C6                        0 5C1F A   .1C7                        0 5C40 A   
.1C8                        0 5C55 A   .1C9                        0 5CD9 A   
.1CA                        0 5CD5 A   .1CB                        0 5CF3 A   
.1CC                        0 5CEF A   .1CD                        0 5E87 A   
.1CF                        0 5E6F A   .1D                         0 3834 A   
.1D0                        0 5D08 A   .1D1                        0 5D08 A   
.1D2                        0 5D9C A   .1D3                        0 5D8E A   
.1D4                        0 5D95 A   .1D5                        0 5D4A A   
.1D6                        0 5D8E A   .1D7                        0 5D7A A   
.1D8                        0 5D9C A   .1D9                        0 5D9F A   
.1DA                        0 5DCB A   .1DB                        0 5DC2 A   
.1DC                        0 5E16 A   .1DD                        0 5DF1 A   
.1DE                        0 5E37 A   .1DF                        0 5E39 A   
.1E                         0 3851 A   .1E0                        0 5E68 A   
.1E1                        0 5EC7 A   .1E2                        0 5EB6 A   
.1E3                        0 5EF1 A   .1E4                        0 5EED A   
.1E5                        0 6141 A   .1E7                        0 6120 A   
.1E8                        0 5F42 A   .1E9                        0 5F45 A   
.1EA                        0 5F53 A   .1EB                        0 5F4C A   
.1EC                        0 5F56 A   .1ED                        0 5F5E A   
.1EE                        0 5F68 A   .1EF                        0 5FB5 A   
.1F                         0 386C A   .1F0                        0 5FAA A   
.1F1                        0 5F68 A   .1F2                        0 5FB5 A   
.1F3                        0 5FB8 A   .1F4                        0 6052 A   
.1F5                        0 5FD0 A   .1F6                        0 604F A   
.1F7                        0 602C A   .1F8                        0 6117 A   
.1F9                        0 6117 A   .1FB                        0 6103 A   
.1FC                        0 608C A   .1FD                        0 608C A   
.1FE                        0 60B5 A   .1FF                        0 60DE A   
.20                         0 3889 A   .200                        0 6157 A   
.201                        0 614B A   .202                        0 622C A   
.203                        0 6163 A   .204                        0 61FC A   
.205                        0 617B A   .206                        0 6223 A   
.207                        0 65D9 A   .208                        0 65C8 A   
.209                        0 65CF A   .20A                        0 6511 A   
.20B                        0 6584 A   .20C                        0 657E A   
.20D                        0 65D9 A   .20E                        0 66BA A   
.20F                        0 66AA A   .21                         0 3898 A   
.210                        0 66D2 A   .211                        0 6817 A   
.212                        0 6808 A   .213                        0 680F A   
.214                        0 67CB A   .215                        0 6817 A   
.216                        0 682C A   .217                        0 6821 A   
.218                        0 68B0 A   .219                        0 68A1 A   
.21A                        0 68A8 A   .21B                        0 6867 A   
.21C                        0 68B0 A   .21D                        0 68C3 A   
.21E                        0 68BA A   .21F                        0 6941 A   
.22                         0 39D3 A   .220                        0 6932 A   
.221                        0 6939 A   .222                        0 68FE A   
.223                        0 6941 A   .224                        0 6954 A   
.225                        0 694B A   .226                        0 69DF A   
.227                        0 69D0 A   .228                        0 69D7 A   
.229                        0 699C A   .22A                        0 69DF A   
.22B                        0 69F2 A   .22C                        0 69E9 A   
.22D                        0 6ABB A   .22F                        0 6AA9 A   
.230                        0 6A54 A   .231                        0 6A6B A   
.232                        0 6A7F A   .233                        0 6A93 A   
.234                        0 6A93 A   .235                        0 6B45 A   
.237                        0 6B37 A   .238                        0 6AF8 A   
.239                        0 6B0C A   .23A                        0 6B20 A   
.23B                        0 6B20 A   .23C                        0 6BCC A   
.23E                        0 6BBE A   .23F                        0 6B80 A   
.24                         0 397F A   .240                        0 6B94 A   
.241                        0 6BA8 A   .242                        0 6BA8 A   
.243                        0 6C53 A   .245                        0 6C45 A   
.246                        0 6C07 A   .247                        0 6C1B A   
.248                        0 6C2F A   .249                        0 6C2F A   
.24A                        0 6DDF A   .24C                        0 6DBA A   
.24D                        0 6C77 A   .24E                        0 6CAE A   
.24F                        0 6CE5 A   .25                         0 389E A   
.250                        0 6D08 A   .251                        0 6D2B A   
.252                        0 6D4E A   .253                        0 6D70 A   
.254                        0 6D92 A   .255                        0 6DB4 A   
.256                        0 6DDD A   .257                        0 6DCD A   
.258                        0 6F4F A   .259                        0 6F3D A   
.25A                        0 6FD9 A   .25B                        0 6FCD A   
.25C                        0 6F7E A   .25D                        0 6FB1 A   
.25E                        0 6F9C A   .25F                        0 6FD9 A   
.26                         0 389E A   .260                        0 6FF1 A   
.261                        0 6FE2 A   .262                        0 717C A   
.263                        0 7173 A   .264                        0 718E A   
.265                        0 7185 A   .266                        0 71A0 A   
.267                        0 7197 A   .268                        0 7453 A   
.269                        0 71ED A   .26A                        0 72D8 A   
.26B                        0 72C9 A   .26C                        0 72D0 A   
.26D                        0 729D A   .26E                        0 72D8 A   
.26F                        0 7346 A   .27                         0 38C7 A   
.270                        0 7337 A   .271                        0 733E A   
.272                        0 730B A   .273                        0 7346 A   
.274                        0 7399 A   .275                        0 738A A   
.276                        0 7391 A   .277                        0 734D A   
.278                        0 7399 A   .279                        0 73E4 A   
.27A                        0 73D5 A   .27B                        0 73DC A   
.27C                        0 73A9 A   .27D                        0 73E4 A   
.27E                        0 76CE A   .27F                        0 745E A   
.28                         0 38C7 A   .280                        0 75FF A   
.281                        0 75F0 A   .282                        0 75F7 A   
.283                        0 75C8 A   .284                        0 75FF A   
.285                        0 778E A   .286                        0 76D9 A   
.287                        0 7778 A   .288                        0 7769 A   
.289                        0 7770 A   .28A                        0 774A A   
.28B                        0 7778 A   .28C                        0 7A50 A   
.28D                        0 77A6 A   .28E                        0 7815 A   
.28F                        0 7806 A   .29                         0 38DC A   
.290                        0 780D A   .291                        0 77D9 A   
.292                        0 7815 A   .293                        0 789A A   
.294                        0 788B A   .295                        0 7892 A   
.296                        0 7856 A   .297                        0 7884 A   
.298                        0 785E A   .299                        0 789A A   
.29A                        0 78BC A   .29B                        0 78B4 A   
.29C                        0 795D A   .29D                        0 794E A   
.29E                        0 7955 A   .29F                        0 7919 A   
.2A                         0 38DC A   .2A0                        0 795D A   
.2A1                        0 79B6 A   .2A2                        0 79A7 A   
.2A3                        0 79AE A   .2A4                        0 797A A   
.2A5                        0 79B6 A   .2A6                        0 7CCB A   
.2A7                        0 7A5B A   .2A8                        0 7BFC A   
.2A9                        0 7BED A   .2AA                        0 7BF4 A   
.2AB                        0 7BC5 A   .2AC                        0 7BFC A   
.2AD                        0 7D6C A   .2AE                        0 7CD6 A   
.2AF                        0 7D58 A   .2B                         0 38F1 A   
.2B0                        0 7D49 A   .2B1                        0 7D50 A   
.2B2                        0 7D29 A   .2B3                        0 7D58 A   
.2B4                        0 7DAE A   .2B5                        0 7DA0 A   
.2B6                        0 7DA7 A   .2B7                        0 7D84 A   
.2B8                        0 7DA0 A   .2B9                        0 7D98 A   
.2BA                        0 7DAE A   .2BB                        0 8027 A   
.2BC                        0 8011 A   .2BD                        0 7F0D A   
.2BE                        0 7F22 A   .2BF                        0 7F14 A   
.2C                         0 38F1 A   .2C0                        0 800A A   
.2C1                        0 7FFA A   .2C2                        0 7F2B A   
.2C3                        0 7F5A A   .2C4                        0 7F39 A   
.2C5                        0 7F32 A   .2C6                        0 7FF8 A   
.2C7                        0 7FF8 A   .2C8                        0 7F63 A   
.2C9                        0 7F87 A   .2CA                        0 7F81 A   
.2CB                        0 7FF3 A   .2CC                        0 7FE4 A   
.2CD                        0 7FEB A   .2CE                        0 7F9A A   
.2CF                        0 7FCC A   .2D                         0 3906 A   
.2D0                        0 7FB9 A   .2D1                        0 7FDD A   
.2D2                        0 7FF3 A   .2D3                        0 800A A   
.2D4                        0 8027 A   .2D5                        0 996A A   
.2D6                        0 995F A   .2D7                        0 991C A   
.2D8                        0 9956 A   .2D9                        0 9926 A   
.2DA                        0 9936 A   .2DB                        0 992D A   
.2DC                        0 9954 A   .2DD                        0 994B A   
.2DE                        0 9942 A   .2DF                        0 9954 A   
.2E                         0 3915 A   .2E0                        0 995F A   
.2E1                        0 996A A   .2E2                        0 9A84 A   
.2E3                        0 9A7D A   .2E4                        0 9A5D A   
.2E5                        0 9A55 A   .2E6                        0 9A4D A   
.2E7                        0 9A45 A   .2E8                        0 9A75 A   
.2E9                        0 9A6D A   .2EA                        0 9A65 A   
.2EB                        0 9B48 A   .2EC                        0 9AFD A   
.2ED                        0 9B60 A   .2EE                        0 9C0D A   
.2EF                        0 9BFF A   .2F                         0 3933 A   
.2F0                        0 9B60 A   .2F1                        0 9BF4 A   
.2F2                        0 9BC8 A   .2F3                        0 9BBE A   
.2F4                        0 9BA7 A   .2F5                        0 9BF4 A   
.2F6                        0 9C0D A   .2F7                        0 9C65 A   
.2F8                        0 9C67 A   .2F9                        0 9D22 A   
.2FA                        0 9C96 A   .2FB                        0 9CD6 A   
.2FC                        0 9CD0 A   .2FD                        0 9CFC A   
.2FE                        0 9CEB A   .2FF                        0 9D1A A   
.3                          0 3B7A A   .30                         0 3941 A   
.300                        0 9D06 A   .301                        0 9D28 A   
.302                        0 9D48 A   .303                        0 9D30 A   
.304                        0 9D78 A   .305                        0 9D7A A   
.306                        0 9D8A A   .307                        0 9D86 A   
.308                        0 9D8C A   .309                        0 9D9E A   
.30A                        0 9D9A A   .30B                        0 9DA0 A   
.30C                        0 9DD7 A   .30D                        0 9DB4 A   
.30E                        0 9E8F A   .30F                        0 9DF3 A   
.31                         0 394F A   .310                        0 9E0E A   
.311                        0 9E05 A   .312                        0 9E21 A   
.313                        0 9E18 A   .314                        0 9EA3 A   
.315                        0 9EA3 A   .316                        0 9E9D A   
.317                        0 9F27 A   .318                        0 9F23 A   
.319                        0 9F71 A   .31A                        0 9F62 A   
.31B                        0 9F69 A   .31C                        0 9F2F A   
.31D                        0 9F62 A   .31E                        0 9F37 A   
.31F                        0 9F71 A   .32                         0 395D A   
.320                        0 9FB9 A   .321                        0 9F9B A   
.322                        0 A09E A   .323                        0 A09E A   
.324                        0 A08F A   .325                        0 A096 A   
.326                        0 A063 A   .327                        0 A09E A   
.328                        0 A177 A   .32A                        0 A165 A   
.32B                        0 A0BC A   .32C                        0 A0D9 A   
.32D                        0 A0D0 A   .32E                        0 A0EB A   
.32F                        0 A121 A   .33                         0 39D6 A   
.330                        0 A115 A   .331                        0 A123 A   
.332                        0 A159 A   .333                        0 A14D A   
.334                        0 A15B A   .34                         0 3A23 A   
.36                         0 3A17 A   .37                         0 39DB A   
.38                         0 39E0 A   .39                         0 39FE A   
.3A                         0 3A26 A   .3B                         0 3A5A A   
.3C                         0 3A76 A   .3D                         0 3ABA A   
.3F                         0 3AAE A   .4                          0 36A3 A   
.40                         0 3A7B A   .41                         0 3A8A A   
.42                         0 3A9B A   .43                         0 3AC7 A   
.44                         0 3B70 A   .45                         0 3AD0 A   
.46                         0 3B6E A   .48                         0 3B43 A   
.49                         0 3AD5 A   .4A                         0 3AE8 A   
.4B                         0 3AFD A   .4C                         0 3B12 A   
.4D                         0 3B2B A   .4E                         0 3B33 A   
.4F                         0 3B3B A   .5                          0 36FE A   
.50                         0 3B6C A   .51                         0 3B56 A   
.52                         0 3B76 A   .53                         0 3BC7 A   
.54                         0 3B8D A   .55                         0 3C1A A   
.57                         0 3C0A A   .58                         0 3BE8 A   
.59                         0 3BF0 A   .5A                         0 3BF8 A   
.5B                         0 3C00 A   .5C                         0 3CC8 A   
.5D                         0 3CB7 A   .5E                         0 3CBE A   
.5F                         0 3C22 A   .60                         0 3C90 A   
.61                         0 3C34 A   .62                         0 3CB7 A   
.63                         0 3CC8 A   .64                         0 3CEA A   
.65                         0 3CE2 A   .66                         0 3D0B A   
.67                         0 3D07 A   .68                         0 3DE6 A   
.69                         0 3D97 A   .6A                         0 3DE6 A   
.6B                         0 3DD9 A   .6C                         0 3E36 A   
.6D                         0 3E27 A   .6E                         0 3E2E A   
.6F                         0 3DF6 A   .7                          0 36D9 A   
.70                         0 3E36 A   .71                         0 3EBB A   
.72                         0 3EAC A   .73                         0 3EB3 A   
.74                         0 3E74 A   .75                         0 3EBB A   
.76                         0 3F02 A   .77                         0 3EF3 A   
.78                         0 3EFA A   .79                         0 3EC2 A   
.7A                         0 3F02 A   .7B                         0 3F1D A   
.7C                         0 3F18 A   .7D                         0 3F20 A   
.7E                         0 3F77 A   .7F                         0 3F68 A   
.8                          0 36B5 A   .80                         0 3F6F A   
.81                         0 3F37 A   .82                         0 3F77 A   
.83                         0 4077 A   .84                         0 3FB6 A   
.85                         0 3FF2 A   .86                         0 3FCC A   
.87                         0 4077 A   .88                         0 401D A   
.89                         0 3FF9 A   .8A                         0 4077 A   
.8B                         0 41B4 A   .8C                         0 41A6 A   
.8D                         0 41D6 A   .8E                         0 41C7 A   
.8F                         0 41CE A   .9                          0 36C1 A   
.90                         0 41BB A   .91                         0 41D6 A   
.92                         0 4202 A   .93                         0 41F4 A   
.94                         0 4267 A   .96                         0 4258 A   
.97                         0 421A A   .98                         0 422E A   
.99                         0 4242 A   .9A                         0 4335 A   
.9B                         0 42E5 A   .9C                         0 42DE A   
.9D                         0 42D7 A   .9E                         0 42CF A   
.9F                         0 430E A   .A                          0 36C1 A   
.A0                         0 42F9 A   .A1                         0 4322 A   
.A2                         0 4397 A   .A3                         0 4393 A   
.A4                         0 4482 A   .A5                         0 43CA A   
.A6                         0 44BA A   .A7                         0 44B6 A   
.A8                         0 450C A   .A9                         0 4508 A   
.AA                         0 4536 A   .AB                         0 4532 A   
.AC                         0 45D0 A   .AD                         0 4562 A   
.AE                         0 45F4 A   .AF                         0 471C A   
.B                          0 36C1 A   .B0                         0 470D A   
.B1                         0 4714 A   .B2                         0 46D1 A   
.B3                         0 471C A   .B4                         0 47A7 A   
.B5                         0 4798 A   .B6                         0 479F A   
.B7                         0 476E A   .B8                         0 47A7 A   
.B9                         0 48C7 A   .BA                         0 48B6 A   
.BB                         0 48BD A   .BC                         0 4815 A   
.BD                         0 4874 A   .BE                         0 481E A   
.BF                         0 48B6 A   .C                          0 36C1 A   
.C0                         0 48C7 A   .C1                         0 497C A   
.C2                         0 496D A   .C3                         0 4974 A   
.C4                         0 48FF A   .C5                         0 4940 A   
.C6                         0 4908 A   .C7                         0 496D A   
.C8                         0 497C A   .C9                         0 4992 A   
.CA                         0 498E A   .CB                         0 499E A   
.CC                         0 499A A   .CD                         0 49C8 A   
.CE                         0 49C4 A   .CF                         0 4A05 A   
.D                          0 36C1 A   .D0                         0 49F4 A   
.D1                         0 4A16 A   .D2                         0 4A0F A   
.D3                         0 4A27 A   .D4                         0 4A20 A   
.D5                         0 4A36 A   .D6                         0 4A31 A   
.D7                         0 4CAD A   .D8                         0 4A5D A   
.D9                         0 4AE7 A   .DA                         0 4AB2 A   
.DB                         0 4AA0 A   .DC                         0 4A8E A   
.DD                         0 4A87 A   .DE                         0 4A80 A   
.DF                         0 4CAA A   .E                          0 36C1 A   
.E0                         0 4BCC A   .E1                         0 4AF0 A   
.E2                         0 4BC9 A   .E3                         0 4BB6 A   
.E4                         0 4BBD A   .E5                         0 4AFB A   
.E6                         0 4B5B A   .E7                         0 4B19 A   
.E8                         0 4B12 A   .E9                         0 4BB6 A   
.EA                         0 4BC9 A   .EB                         0 4CAA A   
.EC                         0 4CAA A   .ED                         0 4C97 A   
.EE                         0 4C9E A   .EF                         0 4BD7 A   
.F                          0 36C1 A   .F0                         0 4C30 A   
.F1                         0 4BEE A   .F2                         0 4BE7 A   
.F3                         0 4C8B A   .F4                         0 4C97 A   
.F5                         0 4C95 A   .F6                         0 4CAA A   
.F7                         0 5076 A   .F8                         0 5076 A   
.FA                         0 5064 A   .FB                         0 4CD3 A   
.FC                         0 4CD3 A   .FD                         0 4D65 A   
.FE                         0 4D10 A   .FF                         0 4CFE A   
_biosfn_alternate_prtsc     0 6E40 A   _biosfn_enable_video_refre+ 0 6F1B A   
_biosfn_get_cursor_pos      0 4486 A   _biosfn_get_font_info       0 6C66 A   
_biosfn_load_gfx_8_14_char+ 0 6AD0 A   _biosfn_load_gfx_8_16_char+ 0 6BDF A   
_biosfn_load_gfx_8_8_chars  0 69F6 A   _biosfn_load_gfx_8_8_dd_ch+ 0 6B58 A   
_biosfn_load_gfx_user_char+ 0 6A2A A   _biosfn_load_text_8_14_pat  0 6830 A   
_biosfn_load_text_8_16_pat  0 6965 A   _biosfn_load_text_8_8_pat   0 68C7 A   
_biosfn_load_text_user_pat  0 6794 A   _biosfn_perform_gray_scale+ 0 64ED A   
_biosfn_read_char_attr      0 507A A   _biosfn_read_pixel          0 5CA3 A   
_biosfn_read_state_info     0 7028 A   _biosfn_read_video_state_s+ 0 71A7 A   
_biosfn_read_video_state_s+ 0 7160 A   _biosfn_restore_video_stat+ 0 7795 A   
_biosfn_save_video_state    0 71CB A   _biosfn_scroll              0 4980 A   
_biosfn_set_active_page     0 44FB A   _biosfn_set_cursor_pos      0 4386 A   
_biosfn_set_cursor_shape    0 426B A   _biosfn_set_video_mode      0 3CCC A   
_biosfn_switch_video_inter+ 0 6F1A A   _biosfn_write_char_attr     0 55BF A   
_biosfn_write_char_only     0 57A5 A   _biosfn_write_pixel         0 5A07 A   
_biosfn_write_string        0 6F1C A   _biosfn_write_teletype      0 5EA9 A   
_dac_regs                   0 02C7 A   _dispi_get_max_bpp          0 971B A   
_dispi_get_max_xres         0 96F9 A   _dispi_set_bank             0 975B A   
_dispi_set_bank_farcall     0 9779 A   _dispi_set_bpp              0 96C2 A   
_dispi_set_enable           0 973D A   _dispi_set_xres             0 968D A   
_dispi_set_yres             0 96A4 A   _display_info               0 3651 A   
_display_splash_screen      0 3650 A   _display_string             0 366F A   
_fail                       0 A27F A   _failed                     0 A30A A   
_find_vga_entry             0 7D73 A   _get_SS                     0 7EEB A E 
_get_capabilities           0 A30E A   _get_font_access            0 65F4 A   
_inb                        0 7EB5 A E _int10_func                 0 3696 A   
_inw                        0 7EC0 A E _line_to_vpti               0 02B5 A   
_load_dac_palette           0 3BD0 A   _memcpyb                    0 7DFF A   
_memcpyw                    0 7E2F A   _memsetb                    0 7DB5 A   
_memsetw                    0 7DDA A   _mode_info_find_mode        0 990F A   
_mode_info_list             0 808F A   _nextByte                   0 A32C A   
_no_vbebios_info_string     0 9509 A   _outb                       0 7ECB A E 
_outw                       0 7EDB A E _palette0                   0 0A4B A   
_palette1                   0 0B0B A   _palette2                   0 0BCB A   
_palette3                   0 0C8B A   _pci_get_lfb_addr           0 802B A   
_printf                     0 7EEE A E _read_EDID                  0 A319 A   
_read_byte                  0 7E5F A   _read_word                  0 7E72 A   
_release_font_access        0 6617 A   _set_scan_lines             0 664B A   
_static_functionality       0 0F8B A   _vbe_biosfn_read_video_sta+ 0 9EDB A E 
_vbe_biosfn_restore_video_+ 0 9F75 A E _vbe_biosfn_return_control+ 0 99E7 A E 
_vbe_biosfn_return_mode_in+ 0 9C3F A E _vbe_biosfn_save_restore_s+ 0 A0A2 A E 
_vbe_biosfn_save_video_sta+ 0 9EE3 A E _vbe_biosfn_set_get_palett+ 0 A269 A E 
_vbe_biosfn_set_mode        0 9D5B A E _vbe_has_vbe_display        0 9970 A   
_vbebios_copyright          0 9437 A   _vbebios_info_string        0 94E3 A   
_vbebios_product_name       0 9495 A   _vbebios_product_revision   0 94AE A   
_vbebios_vendor_name        0 947D A   _vga_compat_setup           0 9838 A   
_vga_modes                  0 0225 A   _vgafont14                  0 179B A   
_vgafont14alt               0 359B A   _vgafont16                  0 259B A   
_vgafont16alt               0 359C A   _vgafont8                   0 0F9B A   
_vgamem_copy_cga            0 47B9 A   _vgamem_copy_pl4            0 466C A   
_vgamem_fill_cga            0 48CB A   _vgamem_fill_pl4            0 472E A   
_video_param_table          0 02CB A   _video_save_pointer_table   0 3634 A   
_write_byte                 0 7E85 A   _write_gfx_char_cga         0 52E8 A   
_write_gfx_char_lin         0 54EB A   _write_gfx_char_pl4         0 5175 A   
_write_word                 0 7E9D A   biosfn_enable_cursor_emula+ 0 6EF8 A   
biosfn_enable_default_pale+ 0 6E94 A   biosfn_enable_grayscale_su+ 0 6ED4 A   
biosfn_enable_video_addres+ 0 6EB6 A   biosfn_get_all_palette_reg  0 6392 A   
biosfn_get_ega_info         0 6E1D A   biosfn_get_single_palette_+ 0 6360 A   
biosfn_get_video_mode       0 625D A   biosfn_group_0B             0 598F A   
biosfn_group_10             0 6284 A   biosfn_group_1A             0 6FF5 A   
biosfn_read_all_dac_reg     0 6472 A   biosfn_read_display_code    0 6FFE A   
biosfn_read_overscan_borde+ 0 6384 A   biosfn_read_pel_mask        0 64A5 A   
biosfn_read_single_dac_reg  0 6457 A   biosfn_read_video_dac_stat+ 0 64B0 A   
biosfn_select_vert_res      0 6E41 A   biosfn_select_video_dac_co+ 0 6414 A   
biosfn_set_all_dac_reg      0 63EC A   biosfn_set_all_palette_reg  0 630D A   
biosfn_set_border_color     0 599A A   biosfn_set_display_code     0 7013 A   
biosfn_set_overscan_border+ 0 6305 A   biosfn_set_palette          0 59D9 A   
biosfn_set_pel_mask         0 649A A   biosfn_set_single_dac_reg   0 63D3 A   
biosfn_set_single_palette_+ 0 62EB A   biosfn_set_text_block_spec+ 0 6958 A   
biosfn_toggle_intensity     0 633A A   bit8_clear                  0 9880 A   
bit9_clear                  0 9887 A   bpp4_mode                   0 9621 A   
dispi_get_bank              0 976B A   dispi_get_bpp               0 96E0 A   
dispi_get_enable            0 974D A   dispi_get_id                0 966F A   
dispi_get_virt_height       0 982A A   dispi_get_virt_width        0 981C A   
dispi_get_x_offset          0 97C0 A   dispi_get_y_offset          0 97DE A   
dispi_set_bank_farcall_err+ 0 97AB A   dispi_set_bank_farcall_get  0 979D A   
dispi_set_id                0 967D A   dispi_set_virt_width        0 9809 A   
dispi_set_x_offset          0 97B0 A   dispi_set_y_offset          0 97CE A   
get_bpp_noinc               0 96F7 A   get_dac_16_page             0 64E0 A   
get_dac_palette_format      0 A255 A   get_display_start           0 A222 A   
get_display_window          0 A1AA A   get_logical_scan_line_leng+ 0 A1E2 A   
get_palette_loop            0 639A A   idiv_u                      0 6646 A   
illegal_window              0 95B4 A   init_bios_area              0 35FC A   
init_vga_card               0 359D A   int10_end                   0 0223 A   
int10_group_10_unknown      0 62EA A   int10_normal                0 0215 A   
int10_test_0B               0 0169 A   int10_test_1001             0 628A A   
int10_test_1002             0 6290 A   int10_test_1003             0 6296 A   
int10_test_1007             0 629D A   int10_test_1008             0 62A4 A   
int10_test_1009             0 62AB A   int10_test_1010             0 62B2 A   
int10_test_1012             0 62B9 A   int10_test_1013             0 62C0 A   
int10_test_1015             0 62C7 A   int10_test_1017             0 62CE A   
int10_test_1018             0 62D5 A   int10_test_1019             0 62DC A   
int10_test_101A             0 62E3 A   int10_test_101B             0 01C2 A   
int10_test_1103             0 0174 A   int10_test_12               0 017F A   
int10_test_1A               0 015E A   int10_test_4F               0 01D1 A   
int10_test_BL30             0 018F A   int10_test_BL31             0 019A A   
int10_test_BL32             0 01A4 A   int10_test_BL33             0 01AE A   
int10_test_BL34             0 01B8 A   int10_test_vbe_05           0 01DF A   
int10_test_vbe_06           0 01E8 A   int10_test_vbe_07           0 01F1 A   
int10_test_vbe_08           0 01FA A   int10_test_vbe_0A           0 0203 A   
int10_test_vbe_15           0 020C A   lmulul                      0 99CE A   
memcpyb_end                 0 7E27 A   memcpyw_end                 0 7E57 A   
memsetb_end                 0 7DD4 A   memsetw_end                 0 7DF9 A   
mode_ega_color              0 6E3D A   msg_vbe_init                0 952D A   
msg_vga_init                0 35B9 A   no_4bpp_1                   0 A1DA A   
no_4bpp_2                   0 A1F7 A   no_actl_reg1                0 6304 A   
no_actl_reg2                0 6383 A   no_vbe_flag                 0 99C3 A   
no_vbe_interface            0 99A7 A   no_vbe_mode                 0 9ECD A   
pci_get_lfb_addr_fail       0 8050 A   pci_get_lfb_addr_found      0 8054 A   
pci_get_lfb_addr_next_dev   0 803E A   pci_get_lfb_addr_return     0 806E A   
pci_get_lfb_addr_success    0 8068 A   pci_read_reg                0 8076 A   
read_dac_loop               0 6483 A   set_actl_normal             0 6450 A   
set_cga_palette_loop        0 59E6 A   set_dac_16_page             0 644A A   
set_dac_loop                0 63FD A   set_dac_mode                0 A252 A   
set_dac_page                0 6437 A   set_dac_palette_format      0 A23D A   
set_display_start           0 A214 A   set_display_window          0 A19A A   
set_intensity_loop          0 59B8 A   set_logical_scan_line_byte+ 0 A1C9 A   
set_logical_scan_line_pixe+ 0 A1DF A   set_low_border              0 59B2 A   
set_normal_dac              0 A24F A   set_palette_loop            0 631C A   
set_retcode                 0 6E8D A   set_vert_res                0 6E83 A   
set_width_svga              0 97FA A   set_xy_regs                 0 962D A   
vbe_03_ok                   0 9ED6 A   vbe_05_failed               0 A1B3 A   
vbe_08_ok                   0 A261 A   vbe_08_unsupported          0 A265 A   
vbe_biosfn_display_identif+ 0 A303 A   vbe_biosfn_display_window_+ 0 A18A A   
vbe_biosfn_return_current_+ 0 9EB6 A   vbe_biosfn_return_protecte+ 0 A26A A   
vbe_biosfn_set_get_dac_pal+ 0 A232 A   vbe_biosfn_set_get_display+ 0 A204 A   
vbe_biosfn_set_get_logical+ 0 A1B7 A   vbe_display_info            0 99B1 A   
vbe_init                    0 9983 A   vert_res_200                0 6E79 A   
vert_res_350                0 6E6F A   vert_res_400                0 6E63 A   
vesa_EDID                   0 A283 A   vesa_pm_end                 0 966F A   
vesa_pm_io_ports_table      0 9576 A   vesa_pm_set_display_start   0 95B9 A   
vesa_pm_set_display_start1  0 95C8 A   vesa_pm_set_display_window+ 0 958D A   
vesa_pm_set_window          0 9582 A   vesa_pm_start               0 956E A   
vesa_pm_unimplemented       0 966A A   vga_compat_end              0 990D A   
vga_set_virt_width          0 97EC A   vgabios_copyright           0 0058 A   
vgabios_date                0 004A A   vgabios_end                 0 A350 A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0128 A   
vgabios_int10_handler       0 0152 A   vgabios_license             0 0084 A   
vgabios_name                0 0022 A   vgabios_pci_data            0 0110 A   
vgabios_start               0 0000 A   vgabios_version             0 003E A   
vgabios_website             0 00B9 A   

00000 errors
00000 warnings
